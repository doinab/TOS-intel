[Log] Preprocessed input file.
FileAST:  (at None)
  Typedef: name='ptrdiff_t', quals=[], storage=['typedef'] (at pp.c:7)
    TypeDecl: declname='ptrdiff_t', quals=[] (at pp.c:7)
      IdentifierType: names=['int'] (at None)
  Typedef: name='size_t', quals=[], storage=['typedef'] (at pp.c:9)
    TypeDecl: declname='size_t', quals=[] (at pp.c:9)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='wchar_t', quals=[], storage=['typedef'] (at pp.c:11)
    TypeDecl: declname='wchar_t', quals=[] (at pp.c:11)
      IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:13)
    Struct: name='__nesc_attr_nonnull', packed=False (at pp.c:13)
      Decl: name='dummy', quals=[], storage=[] (at 0)
        TypeDecl: declname='dummy', quals=[] (at pp.c:15)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:18)
    Struct: name='__nesc_attr_bnd', packed=False (at pp.c:18)
      Decl: name='lo', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:20)
          TypeDecl: declname='lo', quals=[] (at pp.c:20)
            IdentifierType: names=['void'] (at None)
      Decl: name='hi', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:20)
          TypeDecl: declname='hi', quals=[] (at pp.c:20)
            IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:23)
    Struct: name='__nesc_attr_bnd_nok', packed=False (at pp.c:23)
      Decl: name='lo', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:25)
          TypeDecl: declname='lo', quals=[] (at pp.c:25)
            IdentifierType: names=['void'] (at None)
      Decl: name='hi', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:25)
          TypeDecl: declname='hi', quals=[] (at pp.c:25)
            IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:28)
    Struct: name='__nesc_attr_count', packed=False (at pp.c:28)
      Decl: name='n', quals=[], storage=[] (at 0)
        TypeDecl: declname='n', quals=[] (at pp.c:30)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:33)
    Struct: name='__nesc_attr_count_nok', packed=False (at pp.c:33)
      Decl: name='n', quals=[], storage=[] (at 0)
        TypeDecl: declname='n', quals=[] (at pp.c:35)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:38)
    Struct: name='__nesc_attr_one', packed=False (at pp.c:38)
      Decl: name='dummy', quals=[], storage=[] (at 0)
        TypeDecl: declname='dummy', quals=[] (at pp.c:40)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:43)
    Struct: name='__nesc_attr_one_nok', packed=False (at pp.c:43)
      Decl: name='dummy', quals=[], storage=[] (at 0)
        TypeDecl: declname='dummy', quals=[] (at pp.c:45)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:48)
    Struct: name='__nesc_attr_dmemset', packed=False (at pp.c:48)
      Decl: name='a1', quals=[], storage=[] (at 0)
        TypeDecl: declname='a1', quals=[] (at pp.c:50)
          IdentifierType: names=['int'] (at None)
      Decl: name='a2', quals=[], storage=[] (at 0)
        TypeDecl: declname='a2', quals=[] (at pp.c:50)
          IdentifierType: names=['int'] (at None)
      Decl: name='a3', quals=[], storage=[] (at 0)
        TypeDecl: declname='a3', quals=[] (at pp.c:50)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:53)
    Struct: name='__nesc_attr_dmemcpy', packed=False (at pp.c:53)
      Decl: name='a1', quals=[], storage=[] (at 0)
        TypeDecl: declname='a1', quals=[] (at pp.c:55)
          IdentifierType: names=['int'] (at None)
      Decl: name='a2', quals=[], storage=[] (at 0)
        TypeDecl: declname='a2', quals=[] (at pp.c:55)
          IdentifierType: names=['int'] (at None)
      Decl: name='a3', quals=[], storage=[] (at 0)
        TypeDecl: declname='a3', quals=[] (at pp.c:55)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:58)
    Struct: name='__nesc_attr_nts', packed=False (at pp.c:58)
      Decl: name='dummy', quals=[], storage=[] (at 0)
        TypeDecl: declname='dummy', quals=[] (at pp.c:60)
          IdentifierType: names=['int'] (at None)
  Typedef: name='int8_t', quals=[], storage=['typedef'] (at pp.c:63)
    TypeDecl: declname='int8_t', quals=[] (at pp.c:63)
      IdentifierType: names=['char', 'signed'] (at None)
  Typedef: name='uint8_t', quals=[], storage=['typedef'] (at pp.c:64)
    TypeDecl: declname='uint8_t', quals=[] (at pp.c:64)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Typedef: name='int16_t', quals=[], storage=['typedef'] (at pp.c:66)
    TypeDecl: declname='int16_t', quals=[] (at pp.c:66)
      IdentifierType: names=['int'] (at None)
  Typedef: name='uint16_t', quals=[], storage=['typedef'] (at pp.c:67)
    TypeDecl: declname='uint16_t', quals=[] (at pp.c:67)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='int32_t', quals=[], storage=['typedef'] (at pp.c:69)
    TypeDecl: declname='int32_t', quals=[] (at pp.c:69)
      IdentifierType: names=['long'] (at None)
  Typedef: name='uint32_t', quals=[], storage=['typedef'] (at pp.c:70)
    TypeDecl: declname='uint32_t', quals=[] (at pp.c:70)
      IdentifierType: names=['long', 'unsigned'] (at None)
  Typedef: name='int64_t', quals=[], storage=['typedef'] (at pp.c:72)
    TypeDecl: declname='int64_t', quals=[] (at pp.c:72)
      IdentifierType: names=['long', 'long'] (at None)
  Typedef: name='uint64_t', quals=[], storage=['typedef'] (at pp.c:73)
    TypeDecl: declname='uint64_t', quals=[] (at pp.c:73)
      IdentifierType: names=['long', 'long', 'unsigned'] (at None)
  Typedef: name='intptr_t', quals=[], storage=['typedef'] (at pp.c:78)
    TypeDecl: declname='intptr_t', quals=[] (at pp.c:78)
      IdentifierType: names=['int16_t'] (at None)
  Typedef: name='uintptr_t', quals=[], storage=['typedef'] (at pp.c:79)
    TypeDecl: declname='uintptr_t', quals=[] (at pp.c:79)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='__nesc_ntoh_uint8', quals=[], storage=['__inline', 'static'] (at pp.c:81)
    FuncDecl: quals=None (at pp.c:81)
      ParamList:  (at pp.c:81)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:81)
          PtrDecl: quals=[] (at pp.c:81)
            TypeDecl: declname='source', quals=['const'] (at pp.c:81)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_uint8', quals=[] (at pp.c:81)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='__nesc_hton_uint8', quals=[], storage=['__inline', 'static'] (at pp.c:86)
    FuncDecl: quals=None (at pp.c:86)
      ParamList:  (at pp.c:86)
        Decl: name='target', quals=[], storage=[] (at pp.c:86)
          PtrDecl: quals=[] (at pp.c:86)
            TypeDecl: declname='target', quals=[] (at pp.c:86)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:86)
          TypeDecl: declname='value', quals=[] (at pp.c:86)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='__nesc_hton_uint8', quals=[] (at pp.c:86)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='__nesc_ntoh_leuint8', quals=[], storage=['__inline', 'static'] (at pp.c:92)
    FuncDecl: quals=None (at pp.c:92)
      ParamList:  (at pp.c:92)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:92)
          PtrDecl: quals=[] (at pp.c:92)
            TypeDecl: declname='source', quals=['const'] (at pp.c:92)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_leuint8', quals=[] (at pp.c:92)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='__nesc_hton_leuint8', quals=[], storage=['__inline', 'static'] (at pp.c:97)
    FuncDecl: quals=None (at pp.c:97)
      ParamList:  (at pp.c:97)
        Decl: name='target', quals=[], storage=[] (at pp.c:97)
          PtrDecl: quals=[] (at pp.c:97)
            TypeDecl: declname='target', quals=[] (at pp.c:97)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:97)
          TypeDecl: declname='value', quals=[] (at pp.c:97)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='__nesc_hton_leuint8', quals=[] (at pp.c:97)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='__nesc_ntoh_int8', quals=[], storage=['__inline', 'static'] (at pp.c:103)
    FuncDecl: quals=None (at pp.c:103)
      ParamList:  (at pp.c:103)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:103)
          PtrDecl: quals=[] (at pp.c:103)
            TypeDecl: declname='source', quals=['const'] (at pp.c:103)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_int8', quals=[] (at pp.c:103)
        IdentifierType: names=['int8_t'] (at None)
  Decl: name='__nesc_hton_int8', quals=[], storage=['__inline', 'static'] (at pp.c:105)
    FuncDecl: quals=None (at pp.c:105)
      ParamList:  (at pp.c:105)
        Decl: name='target', quals=[], storage=[] (at pp.c:105)
          PtrDecl: quals=[] (at pp.c:105)
            TypeDecl: declname='target', quals=[] (at pp.c:105)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:105)
          TypeDecl: declname='value', quals=[] (at pp.c:105)
            IdentifierType: names=['int8_t'] (at None)
      TypeDecl: declname='__nesc_hton_int8', quals=[] (at pp.c:105)
        IdentifierType: names=['int8_t'] (at None)
  Decl: name='__nesc_ntoh_uint16', quals=[], storage=['__inline', 'static'] (at pp.c:112)
    FuncDecl: quals=None (at pp.c:112)
      ParamList:  (at pp.c:112)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:112)
          PtrDecl: quals=[] (at pp.c:112)
            TypeDecl: declname='source', quals=['const'] (at pp.c:112)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_uint16', quals=[] (at pp.c:112)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='__nesc_hton_uint16', quals=[], storage=['__inline', 'static'] (at pp.c:117)
    FuncDecl: quals=None (at pp.c:117)
      ParamList:  (at pp.c:117)
        Decl: name='target', quals=[], storage=[] (at pp.c:117)
          PtrDecl: quals=[] (at pp.c:117)
            TypeDecl: declname='target', quals=[] (at pp.c:117)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:117)
          TypeDecl: declname='value', quals=[] (at pp.c:117)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='__nesc_hton_uint16', quals=[] (at pp.c:117)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='__nesc_ntoh_leuint16', quals=[], storage=['__inline', 'static'] (at pp.c:124)
    FuncDecl: quals=None (at pp.c:124)
      ParamList:  (at pp.c:124)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:124)
          PtrDecl: quals=[] (at pp.c:124)
            TypeDecl: declname='source', quals=['const'] (at pp.c:124)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_leuint16', quals=[] (at pp.c:124)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='__nesc_hton_leuint16', quals=[], storage=['__inline', 'static'] (at pp.c:129)
    FuncDecl: quals=None (at pp.c:129)
      ParamList:  (at pp.c:129)
        Decl: name='target', quals=[], storage=[] (at pp.c:129)
          PtrDecl: quals=[] (at pp.c:129)
            TypeDecl: declname='target', quals=[] (at pp.c:129)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:129)
          TypeDecl: declname='value', quals=[] (at pp.c:129)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='__nesc_hton_leuint16', quals=[] (at pp.c:129)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='__nesc_ntoh_uint32', quals=[], storage=['__inline', 'static'] (at pp.c:131)
    FuncDecl: quals=None (at pp.c:131)
      ParamList:  (at pp.c:131)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:131)
          PtrDecl: quals=[] (at pp.c:131)
            TypeDecl: declname='source', quals=['const'] (at pp.c:131)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_uint32', quals=[] (at pp.c:131)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='__nesc_hton_uint32', quals=[], storage=['__inline', 'static'] (at pp.c:138)
    FuncDecl: quals=None (at pp.c:138)
      ParamList:  (at pp.c:138)
        Decl: name='target', quals=[], storage=[] (at pp.c:138)
          PtrDecl: quals=[] (at pp.c:138)
            TypeDecl: declname='target', quals=[] (at pp.c:138)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:138)
          TypeDecl: declname='value', quals=[] (at pp.c:138)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='__nesc_hton_uint32', quals=[] (at pp.c:138)
        IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='nx_int8_t', quals=[], storage=['typedef'] (at pp.c:140)
    TypeDecl: declname='nx_int8_t', quals=[] (at pp.c:140)
      Struct: name=None, packed=False (at pp.c:140)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:140)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:140)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='1' (at pp.c:140)
  Typedef: name='__nesc_nxbase_nx_int8_t', quals=[], storage=['typedef'] (at pp.c:140)
    TypeDecl: declname='__nesc_nxbase_nx_int8_t', quals=[] (at pp.c:140)
      IdentifierType: names=['int8_t'] (at None)
  Typedef: name='nx_int16_t', quals=[], storage=['typedef'] (at pp.c:141)
    TypeDecl: declname='nx_int16_t', quals=[] (at pp.c:141)
      Struct: name=None, packed=False (at pp.c:141)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:141)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:141)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='2' (at pp.c:141)
  Typedef: name='__nesc_nxbase_nx_int16_t', quals=[], storage=['typedef'] (at pp.c:141)
    TypeDecl: declname='__nesc_nxbase_nx_int16_t', quals=[] (at pp.c:141)
      IdentifierType: names=['int16_t'] (at None)
  Typedef: name='nx_int32_t', quals=[], storage=['typedef'] (at pp.c:142)
    TypeDecl: declname='nx_int32_t', quals=[] (at pp.c:142)
      Struct: name=None, packed=False (at pp.c:142)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:142)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:142)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='4' (at pp.c:142)
  Typedef: name='__nesc_nxbase_nx_int32_t', quals=[], storage=['typedef'] (at pp.c:142)
    TypeDecl: declname='__nesc_nxbase_nx_int32_t', quals=[] (at pp.c:142)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='nx_int64_t', quals=[], storage=['typedef'] (at pp.c:143)
    TypeDecl: declname='nx_int64_t', quals=[] (at pp.c:143)
      Struct: name=None, packed=False (at pp.c:143)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:143)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:143)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='8' (at pp.c:143)
  Typedef: name='__nesc_nxbase_nx_int64_t', quals=[], storage=['typedef'] (at pp.c:143)
    TypeDecl: declname='__nesc_nxbase_nx_int64_t', quals=[] (at pp.c:143)
      IdentifierType: names=['int64_t'] (at None)
  Typedef: name='nx_uint8_t', quals=[], storage=['typedef'] (at pp.c:144)
    TypeDecl: declname='nx_uint8_t', quals=[] (at pp.c:144)
      Struct: name=None, packed=False (at pp.c:144)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:144)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:144)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='1' (at pp.c:144)
  Typedef: name='__nesc_nxbase_nx_uint8_t', quals=[], storage=['typedef'] (at pp.c:144)
    TypeDecl: declname='__nesc_nxbase_nx_uint8_t', quals=[] (at pp.c:144)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='nx_uint16_t', quals=[], storage=['typedef'] (at pp.c:145)
    TypeDecl: declname='nx_uint16_t', quals=[] (at pp.c:145)
      Struct: name=None, packed=False (at pp.c:145)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:145)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:145)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='2' (at pp.c:145)
  Typedef: name='__nesc_nxbase_nx_uint16_t', quals=[], storage=['typedef'] (at pp.c:145)
    TypeDecl: declname='__nesc_nxbase_nx_uint16_t', quals=[] (at pp.c:145)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='nx_uint32_t', quals=[], storage=['typedef'] (at pp.c:146)
    TypeDecl: declname='nx_uint32_t', quals=[] (at pp.c:146)
      Struct: name=None, packed=False (at pp.c:146)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:146)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:146)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='4' (at pp.c:146)
  Typedef: name='__nesc_nxbase_nx_uint32_t', quals=[], storage=['typedef'] (at pp.c:146)
    TypeDecl: declname='__nesc_nxbase_nx_uint32_t', quals=[] (at pp.c:146)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='nx_uint64_t', quals=[], storage=['typedef'] (at pp.c:147)
    TypeDecl: declname='nx_uint64_t', quals=[] (at pp.c:147)
      Struct: name=None, packed=False (at pp.c:147)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:147)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:147)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='8' (at pp.c:147)
  Typedef: name='__nesc_nxbase_nx_uint64_t', quals=[], storage=['typedef'] (at pp.c:147)
    TypeDecl: declname='__nesc_nxbase_nx_uint64_t', quals=[] (at pp.c:147)
      IdentifierType: names=['uint64_t'] (at None)
  Typedef: name='nxle_int8_t', quals=[], storage=['typedef'] (at pp.c:150)
    TypeDecl: declname='nxle_int8_t', quals=[] (at pp.c:150)
      Struct: name=None, packed=False (at pp.c:150)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:150)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:150)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='1' (at pp.c:150)
  Typedef: name='__nesc_nxbase_nxle_int8_t', quals=[], storage=['typedef'] (at pp.c:150)
    TypeDecl: declname='__nesc_nxbase_nxle_int8_t', quals=[] (at pp.c:150)
      IdentifierType: names=['int8_t'] (at None)
  Typedef: name='nxle_int16_t', quals=[], storage=['typedef'] (at pp.c:151)
    TypeDecl: declname='nxle_int16_t', quals=[] (at pp.c:151)
      Struct: name=None, packed=False (at pp.c:151)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:151)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:151)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='2' (at pp.c:151)
  Typedef: name='__nesc_nxbase_nxle_int16_t', quals=[], storage=['typedef'] (at pp.c:151)
    TypeDecl: declname='__nesc_nxbase_nxle_int16_t', quals=[] (at pp.c:151)
      IdentifierType: names=['int16_t'] (at None)
  Typedef: name='nxle_int32_t', quals=[], storage=['typedef'] (at pp.c:152)
    TypeDecl: declname='nxle_int32_t', quals=[] (at pp.c:152)
      Struct: name=None, packed=False (at pp.c:152)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:152)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:152)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='4' (at pp.c:152)
  Typedef: name='__nesc_nxbase_nxle_int32_t', quals=[], storage=['typedef'] (at pp.c:152)
    TypeDecl: declname='__nesc_nxbase_nxle_int32_t', quals=[] (at pp.c:152)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='nxle_int64_t', quals=[], storage=['typedef'] (at pp.c:153)
    TypeDecl: declname='nxle_int64_t', quals=[] (at pp.c:153)
      Struct: name=None, packed=False (at pp.c:153)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:153)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:153)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='8' (at pp.c:153)
  Typedef: name='__nesc_nxbase_nxle_int64_t', quals=[], storage=['typedef'] (at pp.c:153)
    TypeDecl: declname='__nesc_nxbase_nxle_int64_t', quals=[] (at pp.c:153)
      IdentifierType: names=['int64_t'] (at None)
  Typedef: name='nxle_uint8_t', quals=[], storage=['typedef'] (at pp.c:154)
    TypeDecl: declname='nxle_uint8_t', quals=[] (at pp.c:154)
      Struct: name=None, packed=False (at pp.c:154)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:154)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:154)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='1' (at pp.c:154)
  Typedef: name='__nesc_nxbase_nxle_uint8_t', quals=[], storage=['typedef'] (at pp.c:154)
    TypeDecl: declname='__nesc_nxbase_nxle_uint8_t', quals=[] (at pp.c:154)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='nxle_uint16_t', quals=[], storage=['typedef'] (at pp.c:155)
    TypeDecl: declname='nxle_uint16_t', quals=[] (at pp.c:155)
      Struct: name=None, packed=False (at pp.c:155)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:155)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:155)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='2' (at pp.c:155)
  Typedef: name='__nesc_nxbase_nxle_uint16_t', quals=[], storage=['typedef'] (at pp.c:155)
    TypeDecl: declname='__nesc_nxbase_nxle_uint16_t', quals=[] (at pp.c:155)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='nxle_uint32_t', quals=[], storage=['typedef'] (at pp.c:156)
    TypeDecl: declname='nxle_uint32_t', quals=[] (at pp.c:156)
      Struct: name=None, packed=False (at pp.c:156)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:156)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:156)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='4' (at pp.c:156)
  Typedef: name='__nesc_nxbase_nxle_uint32_t', quals=[], storage=['typedef'] (at pp.c:156)
    TypeDecl: declname='__nesc_nxbase_nxle_uint32_t', quals=[] (at pp.c:156)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='nxle_uint64_t', quals=[], storage=['typedef'] (at pp.c:157)
    TypeDecl: declname='nxle_uint64_t', quals=[] (at pp.c:157)
      Struct: name=None, packed=False (at pp.c:157)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:157)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:157)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='8' (at pp.c:157)
  Typedef: name='__nesc_nxbase_nxle_uint64_t', quals=[], storage=['typedef'] (at pp.c:157)
    TypeDecl: declname='__nesc_nxbase_nxle_uint64_t', quals=[] (at pp.c:157)
      IdentifierType: names=['uint64_t'] (at None)
  Typedef: name='u_char', quals=[], storage=['typedef'] (at pp.c:159)
    TypeDecl: declname='u_char', quals=[] (at pp.c:159)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Typedef: name='u_short', quals=[], storage=['typedef'] (at pp.c:160)
    TypeDecl: declname='u_short', quals=[] (at pp.c:160)
      IdentifierType: names=['short', 'unsigned'] (at None)
  Typedef: name='u_int', quals=[], storage=['typedef'] (at pp.c:161)
    TypeDecl: declname='u_int', quals=[] (at pp.c:161)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='u_long', quals=[], storage=['typedef'] (at pp.c:162)
    TypeDecl: declname='u_long', quals=[] (at pp.c:162)
      IdentifierType: names=['long', 'unsigned'] (at None)
  Typedef: name='ushort', quals=[], storage=['typedef'] (at pp.c:163)
    TypeDecl: declname='ushort', quals=[] (at pp.c:163)
      IdentifierType: names=['short', 'unsigned'] (at None)
  Typedef: name='uint', quals=[], storage=['typedef'] (at pp.c:164)
    TypeDecl: declname='uint', quals=[] (at pp.c:164)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='u_int8_t', quals=[], storage=['typedef'] (at pp.c:166)
    TypeDecl: declname='u_int8_t', quals=[] (at pp.c:166)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='u_int16_t', quals=[], storage=['typedef'] (at pp.c:167)
    TypeDecl: declname='u_int16_t', quals=[] (at pp.c:167)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='u_int32_t', quals=[], storage=['typedef'] (at pp.c:168)
    TypeDecl: declname='u_int32_t', quals=[] (at pp.c:168)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='u_int64_t', quals=[], storage=['typedef'] (at pp.c:169)
    TypeDecl: declname='u_int64_t', quals=[] (at pp.c:169)
      IdentifierType: names=['uint64_t'] (at None)
  Typedef: name='u_quad_t', quals=[], storage=['typedef'] (at pp.c:171)
    TypeDecl: declname='u_quad_t', quals=[] (at pp.c:171)
      IdentifierType: names=['u_int64_t'] (at None)
  Typedef: name='quad_t', quals=[], storage=['typedef'] (at pp.c:172)
    TypeDecl: declname='quad_t', quals=[] (at pp.c:172)
      IdentifierType: names=['int64_t'] (at None)
  Typedef: name='qaddr_t', quals=[], storage=['typedef'] (at pp.c:173)
    PtrDecl: quals=[] (at pp.c:173)
      TypeDecl: declname='qaddr_t', quals=[] (at pp.c:173)
        IdentifierType: names=['quad_t'] (at None)
  Typedef: name='caddr_t', quals=[], storage=['typedef'] (at pp.c:175)
    PtrDecl: quals=[] (at pp.c:175)
      TypeDecl: declname='caddr_t', quals=[] (at pp.c:175)
        IdentifierType: names=['char'] (at None)
  Typedef: name='c_caddr_t', quals=['const'], storage=['typedef'] (at pp.c:176)
    PtrDecl: quals=[] (at pp.c:176)
      TypeDecl: declname='c_caddr_t', quals=['const'] (at pp.c:176)
        IdentifierType: names=['char'] (at None)
  Typedef: name='v_caddr_t', quals=['volatile'], storage=['typedef'] (at pp.c:177)
    PtrDecl: quals=[] (at pp.c:177)
      TypeDecl: declname='v_caddr_t', quals=['volatile'] (at pp.c:177)
        IdentifierType: names=['char'] (at None)
  Typedef: name='fixpt_t', quals=[], storage=['typedef'] (at pp.c:178)
    TypeDecl: declname='fixpt_t', quals=[] (at pp.c:178)
      IdentifierType: names=['u_int32_t'] (at None)
  Typedef: name='gid_t', quals=[], storage=['typedef'] (at pp.c:179)
    TypeDecl: declname='gid_t', quals=[] (at pp.c:179)
      IdentifierType: names=['u_int32_t'] (at None)
  Typedef: name='in_addr_t', quals=[], storage=['typedef'] (at pp.c:180)
    TypeDecl: declname='in_addr_t', quals=[] (at pp.c:180)
      IdentifierType: names=['u_int32_t'] (at None)
  Typedef: name='in_port_t', quals=[], storage=['typedef'] (at pp.c:181)
    TypeDecl: declname='in_port_t', quals=[] (at pp.c:181)
      IdentifierType: names=['u_int16_t'] (at None)
  Typedef: name='ino_t', quals=[], storage=['typedef'] (at pp.c:182)
    TypeDecl: declname='ino_t', quals=[] (at pp.c:182)
      IdentifierType: names=['u_int32_t'] (at None)
  Typedef: name='key_t', quals=[], storage=['typedef'] (at pp.c:183)
    TypeDecl: declname='key_t', quals=[] (at pp.c:183)
      IdentifierType: names=['long'] (at None)
  Typedef: name='mode_t', quals=[], storage=['typedef'] (at pp.c:184)
    TypeDecl: declname='mode_t', quals=[] (at pp.c:184)
      IdentifierType: names=['u_int16_t'] (at None)
  Typedef: name='nlink_t', quals=[], storage=['typedef'] (at pp.c:185)
    TypeDecl: declname='nlink_t', quals=[] (at pp.c:185)
      IdentifierType: names=['u_int16_t'] (at None)
  Typedef: name='rlim_t', quals=[], storage=['typedef'] (at pp.c:186)
    TypeDecl: declname='rlim_t', quals=[] (at pp.c:186)
      IdentifierType: names=['quad_t'] (at None)
  Typedef: name='segsz_t', quals=[], storage=['typedef'] (at pp.c:187)
    TypeDecl: declname='segsz_t', quals=[] (at pp.c:187)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='swblk_t', quals=[], storage=['typedef'] (at pp.c:188)
    TypeDecl: declname='swblk_t', quals=[] (at pp.c:188)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='ufs_daddr_t', quals=[], storage=['typedef'] (at pp.c:189)
    TypeDecl: declname='ufs_daddr_t', quals=[] (at pp.c:189)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='ufs_time_t', quals=[], storage=['typedef'] (at pp.c:190)
    TypeDecl: declname='ufs_time_t', quals=[] (at pp.c:190)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='uid_t', quals=[], storage=['typedef'] (at pp.c:191)
    TypeDecl: declname='uid_t', quals=[] (at pp.c:191)
      IdentifierType: names=['u_int32_t'] (at None)
  Decl: name='memcmp', quals=[], storage=['extern'] (at pp.c:193)
    FuncDecl: quals=None (at pp.c:193)
      ParamList:  (at pp.c:193)
        Decl: name='arg_0x100744de8', quals=['const'], storage=[] (at pp.c:193)
          PtrDecl: quals=[] (at pp.c:193)
            TypeDecl: declname='arg_0x100744de8', quals=['const'] (at pp.c:193)
              IdentifierType: names=['void'] (at None)
        Decl: name='arg_0x10074a100', quals=['const'], storage=[] (at pp.c:193)
          PtrDecl: quals=[] (at pp.c:193)
            TypeDecl: declname='arg_0x10074a100', quals=['const'] (at pp.c:193)
              IdentifierType: names=['void'] (at None)
        Decl: name='arg_0x10074a3a8', quals=[], storage=[] (at pp.c:193)
          TypeDecl: declname='arg_0x10074a3a8', quals=[] (at pp.c:193)
            IdentifierType: names=['size_t'] (at None)
      TypeDecl: declname='memcmp', quals=[] (at pp.c:193)
        IdentifierType: names=['int'] (at None)
  Decl: name='memset', quals=[], storage=['extern'] (at pp.c:196)
    FuncDecl: quals=None (at pp.c:196)
      ParamList:  (at pp.c:196)
        Decl: name='arg_0x100748980', quals=[], storage=[] (at pp.c:196)
          PtrDecl: quals=[] (at pp.c:196)
            TypeDecl: declname='arg_0x100748980', quals=[] (at pp.c:196)
              IdentifierType: names=['void'] (at None)
        Decl: name='arg_0x100748be8', quals=[], storage=[] (at pp.c:196)
          TypeDecl: declname='arg_0x100748be8', quals=[] (at pp.c:196)
            IdentifierType: names=['int'] (at None)
        Decl: name='arg_0x10074e020', quals=[], storage=[] (at pp.c:196)
          TypeDecl: declname='arg_0x10074e020', quals=[] (at pp.c:196)
            IdentifierType: names=['size_t'] (at None)
      PtrDecl: quals=[] (at pp.c:196)
        TypeDecl: declname='memset', quals=[] (at pp.c:196)
          IdentifierType: names=['void'] (at None)
  Decl: name='memset', quals=[], storage=['extern'] (at pp.c:198)
    FuncDecl: quals=None (at pp.c:198)
      ParamList:  (at pp.c:198)
        Decl: name='arg_0x100761b10', quals=[], storage=[] (at pp.c:198)
          PtrDecl: quals=[] (at pp.c:198)
            TypeDecl: declname='arg_0x100761b10', quals=[] (at pp.c:198)
              IdentifierType: names=['void'] (at None)
        Decl: name='arg_0x100761d78', quals=[], storage=[] (at pp.c:198)
          TypeDecl: declname='arg_0x100761d78', quals=[] (at pp.c:198)
            IdentifierType: names=['int'] (at None)
        Decl: name='arg_0x100767060', quals=[], storage=[] (at pp.c:198)
          TypeDecl: declname='arg_0x100767060', quals=[] (at pp.c:198)
            IdentifierType: names=['size_t'] (at None)
      PtrDecl: quals=[] (at pp.c:198)
        TypeDecl: declname='memset', quals=[] (at pp.c:198)
          IdentifierType: names=['void'] (at None)
  Typedef: name='div_t', quals=[], storage=['typedef'] (at pp.c:204)
    TypeDecl: declname='div_t', quals=[] (at pp.c:204)
      Struct: name='__nesc_unnamed4242', packed=False (at pp.c:201)
        Decl: name='quot', quals=[], storage=[] (at 0)
          TypeDecl: declname='quot', quals=[] (at pp.c:202)
            IdentifierType: names=['int'] (at None)
        Decl: name='rem', quals=[], storage=[] (at 0)
          TypeDecl: declname='rem', quals=[] (at pp.c:203)
            IdentifierType: names=['int'] (at None)
  Typedef: name='ldiv_t', quals=[], storage=['typedef'] (at pp.c:216)
    TypeDecl: declname='ldiv_t', quals=[] (at pp.c:216)
      Struct: name='__nesc_unnamed4243', packed=False (at pp.c:213)
        Decl: name='quot', quals=[], storage=[] (at 0)
          TypeDecl: declname='quot', quals=[] (at pp.c:214)
            IdentifierType: names=['long'] (at None)
        Decl: name='rem', quals=[], storage=[] (at 0)
          TypeDecl: declname='rem', quals=[] (at pp.c:215)
            IdentifierType: names=['long'] (at None)
  Typedef: name='__int32_t', quals=[], storage=['typedef'] (at pp.c:218)
    TypeDecl: declname='__int32_t', quals=[] (at pp.c:218)
      IdentifierType: names=['int', 'long'] (at None)
  Typedef: name='__uint32_t', quals=[], storage=['typedef'] (at pp.c:219)
    TypeDecl: declname='__uint32_t', quals=[] (at pp.c:219)
      IdentifierType: names=['int', 'long', 'unsigned'] (at None)
  Typedef: name='_off_t', quals=[], storage=['typedef'] (at pp.c:221)
    TypeDecl: declname='_off_t', quals=[] (at pp.c:221)
      IdentifierType: names=['long'] (at None)
  Typedef: name='_ssize_t', quals=[], storage=['typedef'] (at pp.c:222)
    TypeDecl: declname='_ssize_t', quals=[] (at pp.c:222)
      IdentifierType: names=['long'] (at None)
  Typedef: name='__ULong', quals=[], storage=['typedef'] (at pp.c:224)
    TypeDecl: declname='__ULong', quals=[] (at pp.c:224)
      IdentifierType: names=['__uint32_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:227)
    Struct: name='_glue', packed=False (at pp.c:227)
      Decl: name='_next', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:229)
          TypeDecl: declname='_next', quals=[] (at pp.c:229)
            Struct: name='_glue', packed=False (at pp.c:229)
      Decl: name='_niobs', quals=[], storage=[] (at 0)
        TypeDecl: declname='_niobs', quals=[] (at pp.c:230)
          IdentifierType: names=['int'] (at None)
      Decl: name='_iobs', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:231)
          TypeDecl: declname='_iobs', quals=[] (at pp.c:231)
            Struct: name='__sFILE', packed=False (at pp.c:231)
  Decl: name=None, quals=[], storage=[] (at pp.c:234)
    Struct: name='_Bigint', packed=False (at pp.c:234)
      Decl: name='_next', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:236)
          TypeDecl: declname='_next', quals=[] (at pp.c:236)
            Struct: name='_Bigint', packed=False (at pp.c:236)
      Decl: name='_k', quals=[], storage=[] (at 0)
        TypeDecl: declname='_k', quals=[] (at pp.c:237)
          IdentifierType: names=['int'] (at None)
      Decl: name='_maxwds', quals=[], storage=[] (at 0)
        TypeDecl: declname='_maxwds', quals=[] (at pp.c:237)
          IdentifierType: names=['int'] (at None)
      Decl: name='_sign', quals=[], storage=[] (at 0)
        TypeDecl: declname='_sign', quals=[] (at pp.c:237)
          IdentifierType: names=['int'] (at None)
      Decl: name='_wds', quals=[], storage=[] (at 0)
        TypeDecl: declname='_wds', quals=[] (at pp.c:237)
          IdentifierType: names=['int'] (at None)
      Decl: name='_x', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:238)
          TypeDecl: declname='_x', quals=[] (at pp.c:238)
            IdentifierType: names=['__ULong'] (at None)
          Constant: type='int', value='1' (at pp.c:238)
  Decl: name=None, quals=[], storage=[] (at pp.c:242)
    Struct: name='__tm', packed=False (at pp.c:242)
      Decl: name='__tm_sec', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_sec', quals=[] (at pp.c:244)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_min', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_min', quals=[] (at pp.c:245)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_hour', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_hour', quals=[] (at pp.c:246)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_mday', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_mday', quals=[] (at pp.c:247)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_mon', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_mon', quals=[] (at pp.c:248)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_year', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_year', quals=[] (at pp.c:249)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_wday', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_wday', quals=[] (at pp.c:250)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_yday', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_yday', quals=[] (at pp.c:251)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_isdst', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_isdst', quals=[] (at pp.c:252)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:261)
    Struct: name='_atexit', packed=False (at pp.c:261)
      Decl: name='_next', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:262)
          TypeDecl: declname='_next', quals=[] (at pp.c:262)
            Struct: name='_atexit', packed=False (at pp.c:262)
      Decl: name='_ind', quals=[], storage=[] (at 0)
        TypeDecl: declname='_ind', quals=[] (at pp.c:263)
          IdentifierType: names=['int'] (at None)
      Decl: name='_fns', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:264)
          PtrDecl: quals=[] (at pp.c:264)
            FuncDecl: quals=None (at pp.c:264)
              ParamList:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['void'] (at None)
              TypeDecl: declname='_fns', quals=[] (at pp.c:264)
                IdentifierType: names=['void'] (at None)
          Constant: type='int', value='32' (at pp.c:264)
  Decl: name=None, quals=[], storage=[] (at pp.c:274)
    Struct: name='__sbuf', packed=False (at pp.c:274)
      Decl: name='_base', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:275)
          TypeDecl: declname='_base', quals=[] (at pp.c:275)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='_size', quals=[], storage=[] (at 0)
        TypeDecl: declname='_size', quals=[] (at pp.c:276)
          IdentifierType: names=['int'] (at None)
  Typedef: name='_fpos_t', quals=[], storage=['typedef'] (at pp.c:284)
    TypeDecl: declname='_fpos_t', quals=[] (at pp.c:284)
      IdentifierType: names=['long'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:286)
    Struct: name='__sFILE', packed=False (at pp.c:286)
      Decl: name='_p', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:287)
          TypeDecl: declname='_p', quals=[] (at pp.c:287)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='_r', quals=[], storage=[] (at 0)
        TypeDecl: declname='_r', quals=[] (at pp.c:288)
          IdentifierType: names=['int'] (at None)
      Decl: name='_w', quals=[], storage=[] (at 0)
        TypeDecl: declname='_w', quals=[] (at pp.c:289)
          IdentifierType: names=['int'] (at None)
      Decl: name='_flags', quals=[], storage=[] (at 0)
        TypeDecl: declname='_flags', quals=[] (at pp.c:290)
          IdentifierType: names=['short'] (at None)
      Decl: name='_file', quals=[], storage=[] (at 0)
        TypeDecl: declname='_file', quals=[] (at pp.c:291)
          IdentifierType: names=['short'] (at None)
      Decl: name='_bf', quals=[], storage=[] (at 0)
        TypeDecl: declname='_bf', quals=[] (at pp.c:292)
          Struct: name='__sbuf', packed=False (at pp.c:292)
      Decl: name='_lbfsize', quals=[], storage=[] (at 0)
        TypeDecl: declname='_lbfsize', quals=[] (at pp.c:293)
          IdentifierType: names=['int'] (at None)
      Decl: name='_cookie', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:296)
          TypeDecl: declname='_cookie', quals=[] (at pp.c:296)
            IdentifierType: names=['void'] (at None)
      Decl: name='_read', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:298)
          FuncDecl: quals=None (at pp.c:298)
            ParamList:  (at pp.c:298)
              Decl: name='_cookie', quals=[], storage=[] (at pp.c:298)
                PtrDecl: quals=[] (at pp.c:298)
                  TypeDecl: declname='_cookie', quals=[] (at pp.c:298)
                    IdentifierType: names=['void'] (at None)
              Decl: name='_buf', quals=[], storage=[] (at pp.c:298)
                PtrDecl: quals=[] (at pp.c:298)
                  TypeDecl: declname='_buf', quals=[] (at pp.c:298)
                    IdentifierType: names=['char'] (at None)
              Decl: name='_n', quals=[], storage=[] (at pp.c:298)
                TypeDecl: declname='_n', quals=[] (at pp.c:298)
                  IdentifierType: names=['int'] (at None)
            TypeDecl: declname='_read', quals=[] (at pp.c:298)
              IdentifierType: names=['int'] (at None)
      Decl: name='_write', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:299)
          FuncDecl: quals=None (at pp.c:299)
            ParamList:  (at pp.c:299)
              Decl: name='_cookie', quals=[], storage=[] (at pp.c:299)
                PtrDecl: quals=[] (at pp.c:299)
                  TypeDecl: declname='_cookie', quals=[] (at pp.c:299)
                    IdentifierType: names=['void'] (at None)
              Decl: name='_buf', quals=['const'], storage=[] (at pp.c:299)
                PtrDecl: quals=[] (at pp.c:299)
                  TypeDecl: declname='_buf', quals=['const'] (at pp.c:299)
                    IdentifierType: names=['char'] (at None)
              Decl: name='_n', quals=[], storage=[] (at pp.c:299)
                TypeDecl: declname='_n', quals=[] (at pp.c:299)
                  IdentifierType: names=['int'] (at None)
            TypeDecl: declname='_write', quals=[] (at pp.c:299)
              IdentifierType: names=['int'] (at None)
      Decl: name='_seek', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:301)
          FuncDecl: quals=None (at pp.c:301)
            ParamList:  (at pp.c:301)
              Decl: name='_cookie', quals=[], storage=[] (at pp.c:301)
                PtrDecl: quals=[] (at pp.c:301)
                  TypeDecl: declname='_cookie', quals=[] (at pp.c:301)
                    IdentifierType: names=['void'] (at None)
              Decl: name='_offset', quals=[], storage=[] (at pp.c:301)
                TypeDecl: declname='_offset', quals=[] (at pp.c:301)
                  IdentifierType: names=['_fpos_t'] (at None)
              Decl: name='_whence', quals=[], storage=[] (at pp.c:301)
                TypeDecl: declname='_whence', quals=[] (at pp.c:301)
                  IdentifierType: names=['int'] (at None)
            TypeDecl: declname='_seek', quals=[] (at pp.c:301)
              IdentifierType: names=['_fpos_t'] (at None)
      Decl: name='_close', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:302)
          FuncDecl: quals=None (at pp.c:302)
            ParamList:  (at pp.c:302)
              Decl: name='_cookie', quals=[], storage=[] (at pp.c:302)
                PtrDecl: quals=[] (at pp.c:302)
                  TypeDecl: declname='_cookie', quals=[] (at pp.c:302)
                    IdentifierType: names=['void'] (at None)
            TypeDecl: declname='_close', quals=[] (at pp.c:302)
              IdentifierType: names=['int'] (at None)
      Decl: name='_ub', quals=[], storage=[] (at 0)
        TypeDecl: declname='_ub', quals=[] (at pp.c:305)
          Struct: name='__sbuf', packed=False (at pp.c:305)
      Decl: name='_up', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:306)
          TypeDecl: declname='_up', quals=[] (at pp.c:306)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='_ur', quals=[], storage=[] (at 0)
        TypeDecl: declname='_ur', quals=[] (at pp.c:307)
          IdentifierType: names=['int'] (at None)
      Decl: name='_ubuf', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:310)
          TypeDecl: declname='_ubuf', quals=[] (at pp.c:310)
            IdentifierType: names=['char', 'unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:310)
      Decl: name='_nbuf', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:311)
          TypeDecl: declname='_nbuf', quals=[] (at pp.c:311)
            IdentifierType: names=['char', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:311)
      Decl: name='_lb', quals=[], storage=[] (at 0)
        TypeDecl: declname='_lb', quals=[] (at pp.c:314)
          Struct: name='__sbuf', packed=False (at pp.c:314)
      Decl: name='_blksize', quals=[], storage=[] (at 0)
        TypeDecl: declname='_blksize', quals=[] (at pp.c:317)
          IdentifierType: names=['int'] (at None)
      Decl: name='_offset', quals=[], storage=[] (at 0)
        TypeDecl: declname='_offset', quals=[] (at pp.c:318)
          IdentifierType: names=['int'] (at None)
      Decl: name='_data', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:320)
          TypeDecl: declname='_data', quals=[] (at pp.c:320)
            Struct: name='_reent', packed=False (at pp.c:320)
  Decl: name=None, quals=[], storage=[] (at pp.c:323)
    Struct: name='_rand48', packed=False (at pp.c:323)
      Decl: name='_seed', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:324)
          TypeDecl: declname='_seed', quals=[] (at pp.c:324)
            IdentifierType: names=['short', 'unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:324)
      Decl: name='_mult', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:325)
          TypeDecl: declname='_mult', quals=[] (at pp.c:325)
            IdentifierType: names=['short', 'unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:325)
      Decl: name='_add', quals=[], storage=[] (at 0)
        TypeDecl: declname='_add', quals=[] (at pp.c:326)
          IdentifierType: names=['short', 'unsigned'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:337)
    Struct: name='_reent', packed=False (at pp.c:337)
      Decl: name='_errno', quals=[], storage=[] (at 0)
        TypeDecl: declname='_errno', quals=[] (at pp.c:340)
          IdentifierType: names=['int'] (at None)
      Decl: name='_stdin', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:345)
          TypeDecl: declname='_stdin', quals=[] (at pp.c:345)
            Struct: name='__sFILE', packed=False (at pp.c:345)
      Decl: name='_stdout', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:345)
          TypeDecl: declname='_stdout', quals=[] (at pp.c:345)
            Struct: name='__sFILE', packed=False (at pp.c:345)
      Decl: name='_stderr', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:345)
          TypeDecl: declname='_stderr', quals=[] (at pp.c:345)
            Struct: name='__sFILE', packed=False (at pp.c:345)
      Decl: name='_inc', quals=[], storage=[] (at 0)
        TypeDecl: declname='_inc', quals=[] (at pp.c:347)
          IdentifierType: names=['int'] (at None)
      Decl: name='_emergency', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:348)
          TypeDecl: declname='_emergency', quals=[] (at pp.c:348)
            IdentifierType: names=['char'] (at None)
          Constant: type='int', value='25' (at pp.c:348)
      Decl: name='_current_category', quals=[], storage=[] (at 0)
        TypeDecl: declname='_current_category', quals=[] (at pp.c:350)
          IdentifierType: names=['int'] (at None)
      Decl: name='_current_locale', quals=['const'], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:351)
          TypeDecl: declname='_current_locale', quals=['const'] (at pp.c:351)
            IdentifierType: names=['char'] (at None)
      Decl: name='__sdidinit', quals=[], storage=[] (at 0)
        TypeDecl: declname='__sdidinit', quals=[] (at pp.c:353)
          IdentifierType: names=['int'] (at None)
      Decl: name='__cleanup', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:355)
          FuncDecl: quals=None (at pp.c:355)
            ParamList:  (at pp.c:355)
              Decl: name='arg_0x10079c0c8', quals=[], storage=[] (at pp.c:355)
                PtrDecl: quals=[] (at pp.c:355)
                  TypeDecl: declname='arg_0x10079c0c8', quals=[] (at pp.c:355)
                    Struct: name='_reent', packed=False (at pp.c:355)
            TypeDecl: declname='__cleanup', quals=[] (at pp.c:355)
              IdentifierType: names=['void'] (at None)
      Decl: name='_result', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:358)
          TypeDecl: declname='_result', quals=[] (at pp.c:358)
            Struct: name='_Bigint', packed=False (at pp.c:358)
      Decl: name='_result_k', quals=[], storage=[] (at 0)
        TypeDecl: declname='_result_k', quals=[] (at pp.c:359)
          IdentifierType: names=['int'] (at None)
      Decl: name='_p5s', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:360)
          TypeDecl: declname='_p5s', quals=[] (at pp.c:360)
            Struct: name='_Bigint', packed=False (at pp.c:360)
      Decl: name='_freelist', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:361)
          PtrDecl: quals=[] (at pp.c:361)
            TypeDecl: declname='_freelist', quals=[] (at pp.c:361)
              Struct: name='_Bigint', packed=False (at pp.c:361)
      Decl: name='_cvtlen', quals=[], storage=[] (at 0)
        TypeDecl: declname='_cvtlen', quals=[] (at pp.c:364)
          IdentifierType: names=['int'] (at None)
      Decl: name='_cvtbuf', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:365)
          TypeDecl: declname='_cvtbuf', quals=[] (at pp.c:365)
            IdentifierType: names=['char'] (at None)
      Decl: name='_new', quals=[], storage=[] (at 0)
        TypeDecl: declname='_new', quals=[] (at pp.c:388)
          Union: name='__nesc_unnamed4244', packed=False (at pp.c:367)
            Decl: name='_reent', quals=[], storage=[] (at 0)
              TypeDecl: declname='_reent', quals=[] (at pp.c:378)
                Struct: name='__nesc_unnamed4245', packed=False (at pp.c:369)
                  Decl: name='_unused_rand', quals=[], storage=[] (at 0)
                    TypeDecl: declname='_unused_rand', quals=[] (at pp.c:371)
                      IdentifierType: names=['int', 'unsigned'] (at None)
                  Decl: name='_strtok_last', quals=[], storage=[] (at 0)
                    PtrDecl: quals=[] (at pp.c:372)
                      TypeDecl: declname='_strtok_last', quals=[] (at pp.c:372)
                        IdentifierType: names=['char'] (at None)
                  Decl: name='_asctime_buf', quals=[], storage=[] (at 0)
                    ArrayDecl:  (at pp.c:373)
                      TypeDecl: declname='_asctime_buf', quals=[] (at pp.c:373)
                        IdentifierType: names=['char'] (at None)
                      Constant: type='int', value='26' (at pp.c:373)
                  Decl: name='_localtime_buf', quals=[], storage=[] (at 0)
                    TypeDecl: declname='_localtime_buf', quals=[] (at pp.c:374)
                      Struct: name='__tm', packed=False (at pp.c:374)
                  Decl: name='_gamma_signgam', quals=[], storage=[] (at 0)
                    TypeDecl: declname='_gamma_signgam', quals=[] (at pp.c:375)
                      IdentifierType: names=['int'] (at None)
                  Decl: name='_rand_next', quals=[], storage=[] (at 0)
                    TypeDecl: declname='_rand_next', quals=[] (at pp.c:376)
                      IdentifierType: names=['long', 'long', 'unsigned'] (at None)
                  Decl: name='_r48', quals=[], storage=[] (at 0)
                    TypeDecl: declname='_r48', quals=[] (at pp.c:377)
                      Struct: name='_rand48', packed=False (at pp.c:377)
            Decl: name='_unused', quals=[], storage=[] (at 0)
              TypeDecl: declname='_unused', quals=[] (at pp.c:387)
                Struct: name='__nesc_unnamed4246', packed=False (at pp.c:382)
                  Decl: name='_nextf', quals=[], storage=[] (at 0)
                    ArrayDecl:  (at pp.c:385)
                      PtrDecl: quals=[] (at pp.c:385)
                        TypeDecl: declname='_nextf', quals=[] (at pp.c:385)
                          IdentifierType: names=['char', 'unsigned'] (at None)
                      Constant: type='int', value='30' (at pp.c:385)
                  Decl: name='_nmalloc', quals=[], storage=[] (at 0)
                    ArrayDecl:  (at pp.c:386)
                      TypeDecl: declname='_nmalloc', quals=[] (at pp.c:386)
                        IdentifierType: names=['int', 'unsigned'] (at None)
                      Constant: type='int', value='30' (at pp.c:386)
      Decl: name='_atexit', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:391)
          TypeDecl: declname='_atexit', quals=[] (at pp.c:391)
            Struct: name='_atexit', packed=False (at pp.c:391)
      Decl: name='_atexit0', quals=[], storage=[] (at 0)
        TypeDecl: declname='_atexit0', quals=[] (at pp.c:392)
          Struct: name='_atexit', packed=False (at pp.c:392)
      Decl: name='_sig_func', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:395)
          PtrDecl: quals=[] (at pp.c:395)
            FuncDecl: quals=None (at pp.c:395)
              ParamList:  (at pp.c:395)
                Decl: name='arg_0x10079f180', quals=[], storage=[] (at pp.c:395)
                  TypeDecl: declname='arg_0x10079f180', quals=[] (at pp.c:395)
                    IdentifierType: names=['int'] (at None)
              TypeDecl: declname='_sig_func', quals=[] (at pp.c:395)
                IdentifierType: names=['void'] (at None)
      Decl: name='__sglue', quals=[], storage=[] (at 0)
        TypeDecl: declname='__sglue', quals=[] (at pp.c:400)
          Struct: name='_glue', packed=False (at pp.c:400)
      Decl: name='__sf', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:401)
          TypeDecl: declname='__sf', quals=[] (at pp.c:401)
            Struct: name='__sFILE', packed=False (at pp.c:401)
          Constant: type='int', value='3' (at pp.c:401)
  Decl: name=None, quals=[], storage=[] (at pp.c:404)
    Struct: name='_reent', packed=False (at pp.c:404)
  Decl: name=None, quals=[], storage=[] (at pp.c:406)
    Union: name='__dmath', packed=False (at pp.c:406)
      Decl: name='i', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:408)
          TypeDecl: declname='i', quals=[] (at pp.c:408)
            IdentifierType: names=['__uint32_t'] (at None)
          Constant: type='int', value='2' (at pp.c:408)
      Decl: name='d', quals=[], storage=[] (at 0)
        TypeDecl: declname='d', quals=[] (at pp.c:409)
          IdentifierType: names=['double'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:415)
    Union: name='__dmath', packed=False (at pp.c:415)
  Decl: name=None, quals=[], storage=[] (at pp.c:417)
    Struct: name='exception', packed=False (at pp.c:417)
      Decl: name='type', quals=[], storage=[] (at 0)
        TypeDecl: declname='type', quals=[] (at pp.c:420)
          IdentifierType: names=['int'] (at None)
      Decl: name='name', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:421)
          TypeDecl: declname='name', quals=[] (at pp.c:421)
            IdentifierType: names=['char'] (at None)
      Decl: name='arg1', quals=[], storage=[] (at 0)
        TypeDecl: declname='arg1', quals=[] (at pp.c:422)
          IdentifierType: names=['double'] (at None)
      Decl: name='arg2', quals=[], storage=[] (at 0)
        TypeDecl: declname='arg2', quals=[] (at pp.c:423)
          IdentifierType: names=['double'] (at None)
      Decl: name='retval', quals=[], storage=[] (at 0)
        TypeDecl: declname='retval', quals=[] (at pp.c:424)
          IdentifierType: names=['double'] (at None)
      Decl: name='err', quals=[], storage=[] (at 0)
        TypeDecl: declname='err', quals=[] (at pp.c:425)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:428)
    Enum: name='__fdlibm_version' (at pp.c:428)
      EnumeratorList:  (at pp.c:430)
        Enumerator: name='__fdlibm_ieee' (at pp.c:430)
          UnaryOp: op='-' (at pp.c:430)
            Constant: type='int', value='1' (at pp.c:430)
        Enumerator: name='__fdlibm_svid' (at pp.c:431)
        Enumerator: name='__fdlibm_xopen' (at pp.c:432)
        Enumerator: name='__fdlibm_posix' (at pp.c:433)
  Decl: name=None, quals=[], storage=[] (at pp.c:439)
    Enum: name='__fdlibm_version' (at pp.c:439)
  Typedef: name='bool', quals=[], storage=['typedef'] (at pp.c:441)
    TypeDecl: declname='bool', quals=[] (at pp.c:441)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:442)
    Enum: name='__nesc_unnamed4247' (at pp.c:442)
      EnumeratorList:  (at pp.c:444)
        Enumerator: name='FALSE' (at pp.c:444)
          Constant: type='int', value='0' (at pp.c:444)
        Enumerator: name='TRUE' (at pp.c:444)
          Constant: type='int', value='1' (at pp.c:444)
  Typedef: name='nx_bool', quals=[], storage=['typedef'] (at pp.c:446)
    TypeDecl: declname='nx_bool', quals=[] (at pp.c:446)
      IdentifierType: names=['nx_int8_t'] (at None)
  Decl: name='TOS_NODE_ID', quals=[], storage=[] (at pp.c:447)
    TypeDecl: declname='TOS_NODE_ID', quals=[] (at pp.c:447)
      IdentifierType: names=['uint16_t'] (at None)
    Constant: type='int', value='1' (at pp.c:447)
  Decl: name=None, quals=[], storage=[] (at pp.c:454)
    Struct: name='__nesc_attr_atmostonce', packed=False (at pp.c:454)
  Decl: name=None, quals=[], storage=[] (at pp.c:457)
    Struct: name='__nesc_attr_atleastonce', packed=False (at pp.c:457)
  Decl: name=None, quals=[], storage=[] (at pp.c:460)
    Struct: name='__nesc_attr_exactlyonce', packed=False (at pp.c:460)
  Decl: name=None, quals=[], storage=[] (at pp.c:463)
    Enum: name='__nesc_unnamed4248' (at pp.c:463)
      EnumeratorList:  (at pp.c:464)
        Enumerator: name='SUCCESS' (at pp.c:464)
          Constant: type='int', value='0' (at pp.c:464)
        Enumerator: name='FAIL' (at pp.c:465)
          Constant: type='int', value='1' (at pp.c:465)
        Enumerator: name='ESIZE' (at pp.c:466)
          Constant: type='int', value='2' (at pp.c:466)
        Enumerator: name='ECANCEL' (at pp.c:467)
          Constant: type='int', value='3' (at pp.c:467)
        Enumerator: name='EOFF' (at pp.c:468)
          Constant: type='int', value='4' (at pp.c:468)
        Enumerator: name='EBUSY' (at pp.c:469)
          Constant: type='int', value='5' (at pp.c:469)
        Enumerator: name='EINVAL' (at pp.c:470)
          Constant: type='int', value='6' (at pp.c:470)
        Enumerator: name='ERETRY' (at pp.c:471)
          Constant: type='int', value='7' (at pp.c:471)
        Enumerator: name='ERESERVE' (at pp.c:472)
          Constant: type='int', value='8' (at pp.c:472)
        Enumerator: name='EALREADY' (at pp.c:473)
          Constant: type='int', value='9' (at pp.c:473)
        Enumerator: name='ENOMEM' (at pp.c:474)
          Constant: type='int', value='10' (at pp.c:474)
        Enumerator: name='ENOACK' (at pp.c:475)
          Constant: type='int', value='11' (at pp.c:475)
        Enumerator: name='ELAST' (at pp.c:476)
          Constant: type='int', value='11' (at pp.c:476)
  Typedef: name='error_t', quals=[], storage=['typedef'] (at pp.c:479)
    TypeDecl: declname='error_t', quals=[] (at pp.c:479)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ecombine', quals=[], storage=['inline', 'static'] (at pp.c:481)
    FuncDecl: quals=None (at pp.c:481)
      ParamList:  (at pp.c:481)
        Decl: name='r1', quals=[], storage=[] (at pp.c:481)
          TypeDecl: declname='r1', quals=[] (at pp.c:481)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='r2', quals=[], storage=[] (at pp.c:481)
          TypeDecl: declname='r2', quals=[] (at pp.c:481)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='ecombine', quals=[] (at pp.c:481)
        IdentifierType: names=['error_t'] (at None)
  Typedef: name='ioregister_t', quals=[], storage=['typedef'] (at pp.c:496)
    TypeDecl: declname='ioregister_t', quals=[] (at pp.c:496)
      Union: name='port', packed=True (at pp.c:484)
        Decl: name='reg_p', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='reg_p', quals=['volatile'] (at pp.c:485)
            IdentifierType: names=['char', 'unsigned'] (at None)
        Decl: name='__pin', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='__pin', quals=['volatile'] (at pp.c:495)
            Struct: name='__nesc_unnamed4249', packed=False (at pp.c:486)
              Decl: name='__p0', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p0', quals=[] (at pp.c:487)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:487)
              Decl: name='__p1', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p1', quals=[] (at pp.c:488)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:488)
              Decl: name='__p2', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p2', quals=[] (at pp.c:489)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:489)
              Decl: name='__p3', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p3', quals=[] (at pp.c:490)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:490)
              Decl: name='__p4', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p4', quals=[] (at pp.c:491)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:491)
              Decl: name='__p5', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p5', quals=[] (at pp.c:492)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:492)
              Decl: name='__p6', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p6', quals=[] (at pp.c:493)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:493)
              Decl: name='__p7', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p7', quals=[] (at pp.c:494)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:494)
  Decl: name=None, quals=[], storage=[] (at pp.c:498)
    Struct: name='port_full_t', packed=False (at pp.c:498)
      Decl: name='in', quals=[], storage=[] (at 0)
        TypeDecl: declname='in', quals=[] (at pp.c:499)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='out', quals=[], storage=[] (at 0)
        TypeDecl: declname='out', quals=[] (at pp.c:500)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='dir', quals=[], storage=[] (at 0)
        TypeDecl: declname='dir', quals=[] (at pp.c:501)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='ifg', quals=[], storage=[] (at 0)
        TypeDecl: declname='ifg', quals=[] (at pp.c:502)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='ies', quals=[], storage=[] (at 0)
        TypeDecl: declname='ies', quals=[] (at pp.c:503)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='ie', quals=[], storage=[] (at 0)
        TypeDecl: declname='ie', quals=[] (at pp.c:504)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='sel', quals=[], storage=[] (at 0)
        TypeDecl: declname='sel', quals=[] (at pp.c:505)
          IdentifierType: names=['ioregister_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:516)
    Struct: name='port_simple_t', packed=False (at pp.c:516)
      Decl: name='in', quals=[], storage=[] (at 0)
        TypeDecl: declname='in', quals=[] (at pp.c:517)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='out', quals=[], storage=[] (at 0)
        TypeDecl: declname='out', quals=[] (at pp.c:518)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='dir', quals=[], storage=[] (at 0)
        TypeDecl: declname='dir', quals=[] (at pp.c:519)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='sel', quals=[], storage=[] (at 0)
        TypeDecl: declname='sel', quals=[] (at pp.c:520)
          IdentifierType: names=['ioregister_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:526)
    Struct: name='port_full_t', packed=False (at pp.c:526)
  Decl: name=None, quals=[], storage=[] (at pp.c:530)
    Struct: name='port_full_t', packed=False (at pp.c:530)
  Decl: name=None, quals=[], storage=[] (at pp.c:534)
    Struct: name='port_simple_t', packed=False (at pp.c:534)
  Decl: name=None, quals=[], storage=[] (at pp.c:538)
    Struct: name='port_simple_t', packed=False (at pp.c:538)
  Decl: name=None, quals=[], storage=[] (at pp.c:542)
    Struct: name='port_simple_t', packed=False (at pp.c:542)
  Decl: name=None, quals=[], storage=[] (at pp.c:546)
    Struct: name='port_simple_t', packed=False (at pp.c:546)
  Decl: name='P1OUT@"0x0021"', quals=['volatile'], storage=[] (at pp.c:548)
    TypeDecl: declname='P1OUT@"0x0021"', quals=['volatile'] (at pp.c:548)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P1DIR@"0x0022"', quals=['volatile'], storage=[] (at pp.c:550)
    TypeDecl: declname='P1DIR@"0x0022"', quals=['volatile'] (at pp.c:550)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P1IFG@"0x0023"', quals=['volatile'], storage=[] (at pp.c:552)
    TypeDecl: declname='P1IFG@"0x0023"', quals=['volatile'] (at pp.c:552)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P1IES@"0x0024"', quals=['volatile'], storage=[] (at pp.c:554)
    TypeDecl: declname='P1IES@"0x0024"', quals=['volatile'] (at pp.c:554)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P1IE@"0x0025"', quals=['volatile'], storage=[] (at pp.c:556)
    TypeDecl: declname='P1IE@"0x0025"', quals=['volatile'] (at pp.c:556)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P1SEL@"0x0026"', quals=['volatile'], storage=[] (at pp.c:558)
    TypeDecl: declname='P1SEL@"0x0026"', quals=['volatile'] (at pp.c:558)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P2OUT@"0x0029"', quals=['volatile'], storage=[] (at pp.c:569)
    TypeDecl: declname='P2OUT@"0x0029"', quals=['volatile'] (at pp.c:569)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P2DIR@"0x002A"', quals=['volatile'], storage=[] (at pp.c:571)
    TypeDecl: declname='P2DIR@"0x002A"', quals=['volatile'] (at pp.c:571)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P2IFG@"0x002B"', quals=['volatile'], storage=[] (at pp.c:573)
    TypeDecl: declname='P2IFG@"0x002B"', quals=['volatile'] (at pp.c:573)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P2IE@"0x002D"', quals=['volatile'], storage=[] (at pp.c:577)
    TypeDecl: declname='P2IE@"0x002D"', quals=['volatile'] (at pp.c:577)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P2SEL@"0x002E"', quals=['volatile'], storage=[] (at pp.c:579)
    TypeDecl: declname='P2SEL@"0x002E"', quals=['volatile'] (at pp.c:579)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P3OUT@"0x0019"', quals=['volatile'], storage=[] (at pp.c:590)
    TypeDecl: declname='P3OUT@"0x0019"', quals=['volatile'] (at pp.c:590)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P3DIR@"0x001A"', quals=['volatile'], storage=[] (at pp.c:592)
    TypeDecl: declname='P3DIR@"0x001A"', quals=['volatile'] (at pp.c:592)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P3SEL@"0x001B"', quals=['volatile'], storage=[] (at pp.c:594)
    TypeDecl: declname='P3SEL@"0x001B"', quals=['volatile'] (at pp.c:594)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P4OUT@"0x001D"', quals=['volatile'], storage=[] (at pp.c:605)
    TypeDecl: declname='P4OUT@"0x001D"', quals=['volatile'] (at pp.c:605)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P4DIR@"0x001E"', quals=['volatile'], storage=[] (at pp.c:607)
    TypeDecl: declname='P4DIR@"0x001E"', quals=['volatile'] (at pp.c:607)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P4SEL@"0x001F"', quals=['volatile'], storage=[] (at pp.c:609)
    TypeDecl: declname='P4SEL@"0x001F"', quals=['volatile'] (at pp.c:609)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P5OUT@"0x0031"', quals=['volatile'], storage=[] (at pp.c:620)
    TypeDecl: declname='P5OUT@"0x0031"', quals=['volatile'] (at pp.c:620)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P5DIR@"0x0032"', quals=['volatile'], storage=[] (at pp.c:622)
    TypeDecl: declname='P5DIR@"0x0032"', quals=['volatile'] (at pp.c:622)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P5SEL@"0x0033"', quals=['volatile'], storage=[] (at pp.c:624)
    TypeDecl: declname='P5SEL@"0x0033"', quals=['volatile'] (at pp.c:624)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P6OUT@"0x0035"', quals=['volatile'], storage=[] (at pp.c:635)
    TypeDecl: declname='P6OUT@"0x0035"', quals=['volatile'] (at pp.c:635)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P6DIR@"0x0036"', quals=['volatile'], storage=[] (at pp.c:637)
    TypeDecl: declname='P6DIR@"0x0036"', quals=['volatile'] (at pp.c:637)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P6SEL@"0x0037"', quals=['volatile'], storage=[] (at pp.c:639)
    TypeDecl: declname='P6SEL@"0x0037"', quals=['volatile'] (at pp.c:639)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0CTL@"0x0070"', quals=['volatile'], storage=[] (at pp.c:641)
    TypeDecl: declname='U0CTL@"0x0070"', quals=['volatile'] (at pp.c:641)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0TCTL@"0x0071"', quals=['volatile'], storage=[] (at pp.c:643)
    TypeDecl: declname='U0TCTL@"0x0071"', quals=['volatile'] (at pp.c:643)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0MCTL@"0x0073"', quals=['volatile'], storage=[] (at pp.c:647)
    TypeDecl: declname='U0MCTL@"0x0073"', quals=['volatile'] (at pp.c:647)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0BR0@"0x0074"', quals=['volatile'], storage=[] (at pp.c:649)
    TypeDecl: declname='U0BR0@"0x0074"', quals=['volatile'] (at pp.c:649)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0BR1@"0x0075"', quals=['volatile'], storage=[] (at pp.c:651)
    TypeDecl: declname='U0BR1@"0x0075"', quals=['volatile'] (at pp.c:651)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0RXBUF@"0x0076"', quals=['volatile'], storage=[] (at pp.c:653)
    TypeDecl: declname='U0RXBUF@"0x0076"', quals=['volatile'] (at pp.c:653)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U1CTL@"0x0078"', quals=['volatile'], storage=[] (at pp.c:655)
    TypeDecl: declname='U1CTL@"0x0078"', quals=['volatile'] (at pp.c:655)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U1TCTL@"0x0079"', quals=['volatile'], storage=[] (at pp.c:657)
    TypeDecl: declname='U1TCTL@"0x0079"', quals=['volatile'] (at pp.c:657)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U1MCTL@"0x007B"', quals=['volatile'], storage=[] (at pp.c:661)
    TypeDecl: declname='U1MCTL@"0x007B"', quals=['volatile'] (at pp.c:661)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U1BR0@"0x007C"', quals=['volatile'], storage=[] (at pp.c:663)
    TypeDecl: declname='U1BR0@"0x007C"', quals=['volatile'] (at pp.c:663)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U1BR1@"0x007D"', quals=['volatile'], storage=[] (at pp.c:665)
    TypeDecl: declname='U1BR1@"0x007D"', quals=['volatile'] (at pp.c:665)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U1RXBUF@"0x007E"', quals=['volatile'], storage=[] (at pp.c:667)
    TypeDecl: declname='U1RXBUF@"0x007E"', quals=['volatile'] (at pp.c:667)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='TA0CTL@"0x0160"', quals=['volatile'], storage=[] (at pp.c:669)
    TypeDecl: declname='TA0CTL@"0x0160"', quals=['volatile'] (at pp.c:669)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TA0R@"0x0170"', quals=['volatile'], storage=[] (at pp.c:671)
    TypeDecl: declname='TA0R@"0x0170"', quals=['volatile'] (at pp.c:671)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TA0CCTL0@"0x0162"', quals=['volatile'], storage=[] (at pp.c:674)
    TypeDecl: declname='TA0CCTL0@"0x0162"', quals=['volatile'] (at pp.c:674)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TA0CCTL1@"0x0164"', quals=['volatile'], storage=[] (at pp.c:676)
    TypeDecl: declname='TA0CCTL1@"0x0164"', quals=['volatile'] (at pp.c:676)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TA0CCTL2@"0x0166"', quals=['volatile'], storage=[] (at pp.c:678)
    TypeDecl: declname='TA0CCTL2@"0x0166"', quals=['volatile'] (at pp.c:678)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='tactl_t', quals=[], storage=['typedef'] (at pp.c:690)
    TypeDecl: declname='tactl_t', quals=[] (at pp.c:690)
      Struct: name='__nesc_unnamed4250', packed=True (at pp.c:681)
        Decl: name='taifg', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='taifg', quals=['volatile'] (at pp.c:683)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:683)
        Decl: name='taie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='taie', quals=['volatile'] (at pp.c:684)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:684)
        Decl: name='taclr', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='taclr', quals=['volatile'] (at pp.c:685)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:685)
        Decl: name='dummy', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='dummy', quals=['volatile'] (at pp.c:686)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:686)
        Decl: name='tamc', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tamc', quals=['volatile'] (at pp.c:687)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:687)
        Decl: name='taid', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='taid', quals=['volatile'] (at pp.c:688)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:688)
        Decl: name='tassel', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tassel', quals=['volatile'] (at pp.c:689)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:689)
  Typedef: name='tacctl_t', quals=[], storage=['typedef'] (at pp.c:707)
    TypeDecl: declname='tacctl_t', quals=[] (at pp.c:707)
      Struct: name='__nesc_unnamed4251', packed=True (at pp.c:693)
        Decl: name='ccifg', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccifg', quals=['volatile'] (at pp.c:695)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:695)
        Decl: name='cov', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cov', quals=['volatile'] (at pp.c:696)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:696)
        Decl: name='out', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='out', quals=['volatile'] (at pp.c:697)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:697)
        Decl: name='cci', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cci', quals=['volatile'] (at pp.c:698)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:698)
        Decl: name='ccie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccie', quals=['volatile'] (at pp.c:699)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:699)
        Decl: name='outmod', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='outmod', quals=['volatile'] (at pp.c:700)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:700)
        Decl: name='cap', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cap', quals=['volatile'] (at pp.c:701)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:701)
        Decl: name='dummy', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='dummy', quals=['volatile'] (at pp.c:702)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:702)
        Decl: name='scci', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='scci', quals=['volatile'] (at pp.c:703)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:703)
        Decl: name='scs', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='scs', quals=['volatile'] (at pp.c:704)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:704)
        Decl: name='ccis', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccis', quals=['volatile'] (at pp.c:705)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:705)
        Decl: name='cm', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cm', quals=['volatile'] (at pp.c:706)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:706)
  Decl: name=None, quals=[], storage=[] (at pp.c:710)
    Struct: name='timera_t', packed=False (at pp.c:710)
      Decl: name='ctl', quals=[], storage=[] (at 0)
        TypeDecl: declname='ctl', quals=[] (at pp.c:711)
          IdentifierType: names=['tactl_t'] (at None)
      Decl: name='cctl0', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl0', quals=[] (at pp.c:712)
          IdentifierType: names=['tacctl_t'] (at None)
      Decl: name='cctl1', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl1', quals=[] (at pp.c:713)
          IdentifierType: names=['tacctl_t'] (at None)
      Decl: name='cctl2', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl2', quals=[] (at pp.c:714)
          IdentifierType: names=['tacctl_t'] (at None)
      Decl: name='dummy', quals=['volatile'], storage=[] (at 0)
        ArrayDecl:  (at pp.c:715)
          TypeDecl: declname='dummy', quals=['volatile'] (at pp.c:715)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:715)
      Decl: name='tar', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tar', quals=['volatile'] (at pp.c:716)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='taccr0', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='taccr0', quals=['volatile'] (at pp.c:717)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='taccr1', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='taccr1', quals=['volatile'] (at pp.c:718)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='taccr2', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='taccr2', quals=['volatile'] (at pp.c:719)
          IdentifierType: names=['unsigned'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:724)
    Struct: name='timera_t', packed=False (at pp.c:724)
  Decl: name='TBR@"0x0190"', quals=['volatile'], storage=[] (at pp.c:726)
    TypeDecl: declname='TBR@"0x0190"', quals=['volatile'] (at pp.c:726)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TBCCTL0@"0x0182"', quals=['volatile'], storage=[] (at pp.c:729)
    TypeDecl: declname='TBCCTL0@"0x0182"', quals=['volatile'] (at pp.c:729)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TBCCR0@"0x0192"', quals=['volatile'], storage=[] (at pp.c:735)
    TypeDecl: declname='TBCCR0@"0x0192"', quals=['volatile'] (at pp.c:735)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='tbctl_t', quals=[], storage=['typedef'] (at pp.c:750)
    TypeDecl: declname='tbctl_t', quals=[] (at pp.c:750)
      Struct: name='__nesc_unnamed4252', packed=True (at pp.c:738)
        Decl: name='tbifg', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbifg', quals=['volatile'] (at pp.c:740)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:740)
        Decl: name='tbie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbie', quals=['volatile'] (at pp.c:741)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:741)
        Decl: name='tbclr', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbclr', quals=['volatile'] (at pp.c:742)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:742)
        Decl: name='dummy1', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='dummy1', quals=['volatile'] (at pp.c:743)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:743)
        Decl: name='tbmc', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbmc', quals=['volatile'] (at pp.c:744)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:744)
        Decl: name='tbid', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbid', quals=['volatile'] (at pp.c:745)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:745)
        Decl: name='tbssel', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbssel', quals=['volatile'] (at pp.c:746)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:746)
        Decl: name='dummy2', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='dummy2', quals=['volatile'] (at pp.c:747)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:747)
        Decl: name='tbcntl', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbcntl', quals=['volatile'] (at pp.c:748)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:748)
        Decl: name='tbclgrp', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbclgrp', quals=['volatile'] (at pp.c:749)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:749)
  Typedef: name='tbcctl_t', quals=[], storage=['typedef'] (at pp.c:766)
    TypeDecl: declname='tbcctl_t', quals=[] (at pp.c:766)
      Struct: name='__nesc_unnamed4253', packed=True (at pp.c:753)
        Decl: name='ccifg', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccifg', quals=['volatile'] (at pp.c:755)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:755)
        Decl: name='cov', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cov', quals=['volatile'] (at pp.c:756)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:756)
        Decl: name='out', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='out', quals=['volatile'] (at pp.c:757)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:757)
        Decl: name='cci', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cci', quals=['volatile'] (at pp.c:758)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:758)
        Decl: name='ccie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccie', quals=['volatile'] (at pp.c:759)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:759)
        Decl: name='outmod', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='outmod', quals=['volatile'] (at pp.c:760)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:760)
        Decl: name='cap', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cap', quals=['volatile'] (at pp.c:761)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:761)
        Decl: name='clld', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='clld', quals=['volatile'] (at pp.c:762)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:762)
        Decl: name='scs', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='scs', quals=['volatile'] (at pp.c:763)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:763)
        Decl: name='ccis', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccis', quals=['volatile'] (at pp.c:764)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:764)
        Decl: name='cm', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cm', quals=['volatile'] (at pp.c:765)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:765)
  Decl: name=None, quals=[], storage=[] (at pp.c:769)
    Struct: name='timerb_t', packed=False (at pp.c:769)
      Decl: name='ctl', quals=[], storage=[] (at 0)
        TypeDecl: declname='ctl', quals=[] (at pp.c:770)
          IdentifierType: names=['tbctl_t'] (at None)
      Decl: name='cctl0', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl0', quals=[] (at pp.c:771)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl1', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl1', quals=[] (at pp.c:772)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl2', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl2', quals=[] (at pp.c:773)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl3', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl3', quals=[] (at pp.c:775)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl4', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl4', quals=[] (at pp.c:776)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl5', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl5', quals=[] (at pp.c:777)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl6', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl6', quals=[] (at pp.c:778)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='tbr', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbr', quals=['volatile'] (at pp.c:782)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr0', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr0', quals=['volatile'] (at pp.c:783)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr1', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr1', quals=['volatile'] (at pp.c:784)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr2', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr2', quals=['volatile'] (at pp.c:785)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr3', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr3', quals=['volatile'] (at pp.c:787)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr4', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr4', quals=['volatile'] (at pp.c:788)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr5', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr5', quals=['volatile'] (at pp.c:789)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr6', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr6', quals=['volatile'] (at pp.c:790)
          IdentifierType: names=['unsigned'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:797)
    Struct: name='timerb_t', packed=False (at pp.c:797)
  Decl: name='DCOCTL@"0x0056"', quals=['volatile'], storage=[] (at pp.c:799)
    TypeDecl: declname='DCOCTL@"0x0056"', quals=['volatile'] (at pp.c:799)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='BCSCTL1@"0x0057"', quals=['volatile'], storage=[] (at pp.c:801)
    TypeDecl: declname='BCSCTL1@"0x0057"', quals=['volatile'] (at pp.c:801)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='BCSCTL2@"0x0058"', quals=['volatile'], storage=[] (at pp.c:803)
    TypeDecl: declname='BCSCTL2@"0x0058"', quals=['volatile'] (at pp.c:803)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='ADC12CTL0@"0x01A0"', quals=['volatile'], storage=[] (at pp.c:805)
    TypeDecl: declname='ADC12CTL0@"0x01A0"', quals=['volatile'] (at pp.c:805)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='ADC12CTL1@"0x01A2"', quals=['volatile'], storage=[] (at pp.c:807)
    TypeDecl: declname='ADC12CTL1@"0x01A2"', quals=['volatile'] (at pp.c:807)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='adc12ctl0_t', quals=[], storage=['typedef'] (at pp.c:822)
    TypeDecl: declname='adc12ctl0_t', quals=[] (at pp.c:822)
      Struct: name='__nesc_unnamed4254', packed=True (at pp.c:810)
        Decl: name='adc12sc', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12sc', quals=['volatile'] (at pp.c:812)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:812)
        Decl: name='enc', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='enc', quals=['volatile'] (at pp.c:813)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:813)
        Decl: name='adc12tovie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12tovie', quals=['volatile'] (at pp.c:814)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:814)
        Decl: name='adc12ovie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12ovie', quals=['volatile'] (at pp.c:815)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:815)
        Decl: name='adc12on', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12on', quals=['volatile'] (at pp.c:816)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:816)
        Decl: name='refon', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='refon', quals=['volatile'] (at pp.c:817)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:817)
        Decl: name='r2_5v', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='r2_5v', quals=['volatile'] (at pp.c:818)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:818)
        Decl: name='msc', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='msc', quals=['volatile'] (at pp.c:819)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:819)
        Decl: name='sht0', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='sht0', quals=['volatile'] (at pp.c:820)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:820)
        Decl: name='sht1', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='sht1', quals=['volatile'] (at pp.c:821)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:821)
  Typedef: name='adc12ctl1_t', quals=[], storage=['typedef'] (at pp.c:835)
    TypeDecl: declname='adc12ctl1_t', quals=[] (at pp.c:835)
      Struct: name='__nesc_unnamed4255', packed=True (at pp.c:825)
        Decl: name='adc12busy', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12busy', quals=['volatile'] (at pp.c:827)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:827)
        Decl: name='conseq', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='conseq', quals=['volatile'] (at pp.c:828)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:828)
        Decl: name='adc12ssel', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12ssel', quals=['volatile'] (at pp.c:829)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:829)
        Decl: name='adc12div', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12div', quals=['volatile'] (at pp.c:830)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:830)
        Decl: name='issh', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='issh', quals=['volatile'] (at pp.c:831)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:831)
        Decl: name='shp', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='shp', quals=['volatile'] (at pp.c:832)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:832)
        Decl: name='shs', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='shs', quals=['volatile'] (at pp.c:833)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:833)
        Decl: name='cstartadd', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cstartadd', quals=['volatile'] (at pp.c:834)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:834)
  Typedef: name='adc12xflg_t', quals=[], storage=['typedef'] (at pp.c:856)
    TypeDecl: declname='adc12xflg_t', quals=[] (at pp.c:856)
      Struct: name='__nesc_unnamed4256', packed=True (at pp.c:838)
        Decl: name='bit0', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit0', quals=['volatile'] (at pp.c:840)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:840)
        Decl: name='bit1', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit1', quals=['volatile'] (at pp.c:841)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:841)
        Decl: name='bit2', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit2', quals=['volatile'] (at pp.c:842)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:842)
        Decl: name='bit3', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit3', quals=['volatile'] (at pp.c:843)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:843)
        Decl: name='bit4', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit4', quals=['volatile'] (at pp.c:844)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:844)
        Decl: name='bit5', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit5', quals=['volatile'] (at pp.c:845)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:845)
        Decl: name='bit6', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit6', quals=['volatile'] (at pp.c:846)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:846)
        Decl: name='bit7', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit7', quals=['volatile'] (at pp.c:847)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:847)
        Decl: name='bit8', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit8', quals=['volatile'] (at pp.c:848)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:848)
        Decl: name='bit9', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit9', quals=['volatile'] (at pp.c:849)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:849)
        Decl: name='bit10', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit10', quals=['volatile'] (at pp.c:850)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:850)
        Decl: name='bit11', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit11', quals=['volatile'] (at pp.c:851)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:851)
        Decl: name='bit12', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit12', quals=['volatile'] (at pp.c:852)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:852)
        Decl: name='bit13', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit13', quals=['volatile'] (at pp.c:853)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:853)
        Decl: name='bit14', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit14', quals=['volatile'] (at pp.c:854)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:854)
        Decl: name='bit15', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit15', quals=['volatile'] (at pp.c:855)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:855)
  Decl: name=None, quals=[], storage=[] (at pp.c:859)
    Struct: name='adc12_t', packed=False (at pp.c:859)
      Decl: name='ctl0', quals=[], storage=[] (at 0)
        TypeDecl: declname='ctl0', quals=[] (at pp.c:860)
          IdentifierType: names=['adc12ctl0_t'] (at None)
      Decl: name='ctl1', quals=[], storage=[] (at 0)
        TypeDecl: declname='ctl1', quals=[] (at pp.c:861)
          IdentifierType: names=['adc12ctl1_t'] (at None)
      Decl: name='ifg', quals=[], storage=[] (at 0)
        TypeDecl: declname='ifg', quals=[] (at pp.c:862)
          IdentifierType: names=['adc12xflg_t'] (at None)
      Decl: name='ie', quals=[], storage=[] (at 0)
        TypeDecl: declname='ie', quals=[] (at pp.c:863)
          IdentifierType: names=['adc12xflg_t'] (at None)
      Decl: name='iv', quals=[], storage=[] (at 0)
        TypeDecl: declname='iv', quals=[] (at pp.c:864)
          IdentifierType: names=['adc12xflg_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:870)
    Struct: name='adc12_t', packed=False (at pp.c:870)
  Decl: name='ME1@"0x0004"', quals=['volatile'], storage=[] (at pp.c:872)
    TypeDecl: declname='ME1@"0x0004"', quals=['volatile'] (at pp.c:872)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='ME2@"0x0005"', quals=['volatile'], storage=[] (at pp.c:878)
    TypeDecl: declname='ME2@"0x0005"', quals=['volatile'] (at pp.c:878)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0CTLnr@"0x0070"', quals=['volatile'], storage=['static'] (at pp.c:880)
    TypeDecl: declname='U0CTLnr@"0x0070"', quals=['volatile'] (at pp.c:880)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='I2CTCTLnr@"0x0071"', quals=['volatile'], storage=['static'] (at pp.c:881)
    TypeDecl: declname='I2CTCTLnr@"0x0071"', quals=['volatile'] (at pp.c:881)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='I2CDCTLnr@"0x0072"', quals=['volatile'], storage=['static'] (at pp.c:882)
    TypeDecl: declname='I2CDCTLnr@"0x0072"', quals=['volatile'] (at pp.c:882)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='mcu_power_t', quals=[], storage=['typedef'] (at pp.c:884)
    TypeDecl: declname='mcu_power_t', quals=[] (at pp.c:884)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='mcombine', quals=[], storage=['inline', 'static'] (at pp.c:885)
    FuncDecl: quals=None (at pp.c:885)
      ParamList:  (at pp.c:885)
        Decl: name='m1', quals=[], storage=[] (at pp.c:885)
          TypeDecl: declname='m1', quals=[] (at pp.c:885)
            IdentifierType: names=['mcu_power_t'] (at None)
        Decl: name='m2', quals=[], storage=[] (at pp.c:885)
          TypeDecl: declname='m2', quals=[] (at pp.c:885)
            IdentifierType: names=['mcu_power_t'] (at None)
      TypeDecl: declname='mcombine', quals=[] (at pp.c:885)
        IdentifierType: names=['mcu_power_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:888)
    Enum: name='__nesc_unnamed4257' (at pp.c:888)
      EnumeratorList:  (at pp.c:889)
        Enumerator: name='MSP430_POWER_ACTIVE' (at pp.c:889)
          Constant: type='int', value='0' (at pp.c:889)
        Enumerator: name='MSP430_POWER_LPM0' (at pp.c:890)
          Constant: type='int', value='1' (at pp.c:890)
        Enumerator: name='MSP430_POWER_LPM1' (at pp.c:891)
          Constant: type='int', value='2' (at pp.c:891)
        Enumerator: name='MSP430_POWER_LPM2' (at pp.c:892)
          Constant: type='int', value='3' (at pp.c:892)
        Enumerator: name='MSP430_POWER_LPM3' (at pp.c:893)
          Constant: type='int', value='4' (at pp.c:893)
        Enumerator: name='MSP430_POWER_LPM4' (at pp.c:894)
          Constant: type='int', value='5' (at pp.c:894)
  Decl: name='__nesc_disable_interrupt', quals=[], storage=['inline', 'static'] (at pp.c:897)
    FuncDecl: quals=None (at pp.c:897)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_disable_interrupt', quals=[] (at pp.c:897)
        IdentifierType: names=['void'] (at None)
  Decl: name='__nesc_enable_interrupt', quals=[], storage=['inline', 'static'] (at pp.c:903)
    FuncDecl: quals=None (at pp.c:903)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_enable_interrupt', quals=[] (at pp.c:903)
        IdentifierType: names=['void'] (at None)
  Typedef: name='__nesc_atomic_t', quals=[], storage=['typedef'] (at pp.c:908)
    TypeDecl: declname='__nesc_atomic_t', quals=[] (at pp.c:908)
      IdentifierType: names=['bool'] (at None)
  Decl: name='__nesc_atomic_start', quals=[], storage=[] (at pp.c:909)
    FuncDecl: quals=None (at pp.c:909)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_atomic_start', quals=[] (at pp.c:909)
        IdentifierType: names=['__nesc_atomic_t'] (at None)
  Decl: name='__nesc_atomic_end', quals=[], storage=[] (at pp.c:910)
    FuncDecl: quals=None (at pp.c:910)
      ParamList:  (at pp.c:910)
        Decl: name='reenable_interrupts', quals=[], storage=[] (at pp.c:910)
          TypeDecl: declname='reenable_interrupts', quals=[] (at pp.c:910)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
      TypeDecl: declname='__nesc_atomic_end', quals=[] (at pp.c:910)
        IdentifierType: names=['void'] (at None)
  Decl: name='__nesc_atomic_start', quals=[], storage=[] (at pp.c:917)
    FuncDecl: quals=None (at pp.c:917)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_atomic_start', quals=[] (at pp.c:917)
        IdentifierType: names=['__nesc_atomic_t'] (at None)
  Decl: name='__nesc_atomic_end', quals=[], storage=[] (at pp.c:925)
    FuncDecl: quals=None (at pp.c:925)
      ParamList:  (at pp.c:925)
        Decl: name='reenable_interrupts', quals=[], storage=[] (at pp.c:925)
          TypeDecl: declname='reenable_interrupts', quals=[] (at pp.c:925)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
      TypeDecl: declname='__nesc_atomic_end', quals=[] (at pp.c:925)
        IdentifierType: names=['void'] (at None)
  Typedef: name='nx_float', quals=[], storage=['typedef'] (at pp.c:927)
    TypeDecl: declname='nx_float', quals=[] (at pp.c:927)
      Struct: name=None, packed=False (at pp.c:927)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:927)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:927)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='4' (at pp.c:927)
  Typedef: name='__nesc_nxbase_nx_float', quals=[], storage=['typedef'] (at pp.c:927)
    TypeDecl: declname='__nesc_nxbase_nx_float', quals=[] (at pp.c:927)
      IdentifierType: names=['float'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:929)
    Enum: name='__nesc_unnamed4258' (at pp.c:929)
      EnumeratorList:  (at pp.c:930)
        Enumerator: name='TOS_SLEEP_NONE' (at pp.c:930)
          ID: name='MSP430_POWER_ACTIVE' (at pp.c:930)
  Decl: name='TOSH_SET_SIMO0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:933)
    FuncDecl: quals=None (at pp.c:933)
      TypeDecl: declname='TOSH_SET_SIMO0_PIN', quals=[] (at pp.c:933)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_CLR_SIMO0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:935)
    FuncDecl: quals=None (at pp.c:935)
      TypeDecl: declname='TOSH_CLR_SIMO0_PIN', quals=[] (at pp.c:935)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_MAKE_SIMO0_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:937)
    FuncDecl: quals=None (at pp.c:937)
      TypeDecl: declname='TOSH_MAKE_SIMO0_OUTPUT', quals=[] (at pp.c:937)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_SET_UCLK0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:938)
    FuncDecl: quals=None (at pp.c:938)
      TypeDecl: declname='TOSH_SET_UCLK0_PIN', quals=[] (at pp.c:938)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_CLR_UCLK0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:940)
    FuncDecl: quals=None (at pp.c:940)
      TypeDecl: declname='TOSH_CLR_UCLK0_PIN', quals=[] (at pp.c:940)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_MAKE_UCLK0_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:942)
    FuncDecl: quals=None (at pp.c:942)
      TypeDecl: declname='TOSH_MAKE_UCLK0_OUTPUT', quals=[] (at pp.c:942)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:944)
    Enum: name='__nesc_unnamed4259' (at pp.c:944)
      EnumeratorList:  (at pp.c:946)
        Enumerator: name='TOSH_HUMIDITY_ADDR' (at pp.c:946)
          Constant: type='int', value='5' (at pp.c:946)
        Enumerator: name='TOSH_HUMIDTEMP_ADDR' (at pp.c:947)
          Constant: type='int', value='3' (at pp.c:947)
        Enumerator: name='TOSH_HUMIDITY_RESET' (at pp.c:948)
          Constant: type='int', value='0x1E' (at pp.c:948)
  Decl: name='TOSH_SET_FLASH_CS_PIN', quals=[], storage=['inline', 'static'] (at pp.c:953)
    FuncDecl: quals=None (at pp.c:953)
      TypeDecl: declname='TOSH_SET_FLASH_CS_PIN', quals=[] (at pp.c:953)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_CLR_FLASH_CS_PIN', quals=[], storage=['inline', 'static'] (at pp.c:955)
    FuncDecl: quals=None (at pp.c:955)
      TypeDecl: declname='TOSH_CLR_FLASH_CS_PIN', quals=[] (at pp.c:955)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:957)
    FuncDecl: quals=None (at pp.c:957)
      TypeDecl: declname='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[] (at pp.c:957)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_SET_FLASH_HOLD_PIN', quals=[], storage=['inline', 'static'] (at pp.c:958)
    FuncDecl: quals=None (at pp.c:958)
      TypeDecl: declname='TOSH_SET_FLASH_HOLD_PIN', quals=[] (at pp.c:958)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:960)
    FuncDecl: quals=None (at pp.c:960)
      TypeDecl: declname='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[] (at pp.c:960)
        IdentifierType: names=['void'] (at None)
  Typedef: name='volume_id_t', quals=[], storage=['typedef'] (at pp.c:962)
    TypeDecl: declname='volume_id_t', quals=[] (at pp.c:962)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='storage_addr_t', quals=[], storage=['typedef'] (at pp.c:963)
    TypeDecl: declname='storage_addr_t', quals=[] (at pp.c:963)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='storage_len_t', quals=[], storage=['typedef'] (at pp.c:964)
    TypeDecl: declname='storage_len_t', quals=[] (at pp.c:964)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='storage_cookie_t', quals=[], storage=['typedef'] (at pp.c:965)
    TypeDecl: declname='storage_cookie_t', quals=[] (at pp.c:965)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:967)
    Enum: name='__nesc_unnamed4260' (at pp.c:967)
      EnumeratorList:  (at pp.c:968)
        Enumerator: name='SEEK_BEGINNING' (at pp.c:968)
          Constant: type='int', value='0' (at pp.c:968)
  Typedef: name='stm25p_addr_t', quals=[], storage=['typedef'] (at pp.c:971)
    TypeDecl: declname='stm25p_addr_t', quals=[] (at pp.c:971)
      IdentifierType: names=['storage_addr_t'] (at None)
  Typedef: name='stm25p_len_t', quals=[], storage=['typedef'] (at pp.c:972)
    TypeDecl: declname='stm25p_len_t', quals=[] (at pp.c:972)
      IdentifierType: names=['storage_len_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:974)
    Enum: name='__nesc_unnamed4261' (at pp.c:974)
      EnumeratorList:  (at pp.c:975)
        Enumerator: name='STM25P_NUM_SECTORS' (at pp.c:975)
          Constant: type='int', value='16' (at pp.c:975)
        Enumerator: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:976)
          Constant: type='int', value='16' (at pp.c:976)
        Enumerator: name='STM25P_SECTOR_SIZE' (at pp.c:977)
          BinaryOp: op='<<' (at pp.c:977)
            Constant: type='int', value='1L' (at pp.c:977)
            ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:977)
        Enumerator: name='STM25P_SECTOR_MASK' (at pp.c:978)
          Constant: type='int', value='0xffff' (at pp.c:978)
        Enumerator: name='STM25P_PAGE_SIZE_LOG2' (at pp.c:979)
          Constant: type='int', value='8' (at pp.c:979)
        Enumerator: name='STM25P_PAGE_SIZE' (at pp.c:980)
          BinaryOp: op='<<' (at pp.c:980)
            Constant: type='int', value='1' (at pp.c:980)
            ID: name='STM25P_PAGE_SIZE_LOG2' (at pp.c:980)
        Enumerator: name='STM25P_PAGE_MASK' (at pp.c:981)
          BinaryOp: op='-' (at pp.c:981)
            ID: name='STM25P_PAGE_SIZE' (at pp.c:981)
            Constant: type='int', value='1' (at pp.c:981)
        Enumerator: name='STM25P_INVALID_ADDRESS' (at pp.c:982)
          Constant: type='int', value='0xffffffff' (at pp.c:982)
  Typedef: name='stm25p_volume_info_t', quals=[], storage=['typedef'] (at pp.c:992)
    TypeDecl: declname='stm25p_volume_info_t', quals=[] (at pp.c:992)
      Struct: name='stm25p_volume_info_t', packed=False (at pp.c:989)
        Decl: name='base', quals=[], storage=[] (at 0)
          TypeDecl: declname='base', quals=[] (at pp.c:990)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='size', quals=[], storage=[] (at 0)
          TypeDecl: declname='size', quals=[] (at pp.c:991)
            IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='cc2420_status_t', quals=[], storage=['typedef'] (at pp.c:994)
    TypeDecl: declname='cc2420_status_t', quals=[] (at pp.c:994)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='security_header_t', quals=[], storage=['typedef'] (at pp.c:1003)
    TypeDecl: declname='security_header_t', quals=[] (at pp.c:1003)
      Struct: name='security_header_t', packed=False (at pp.c:997)
        Decl: name='__nesc_filler0', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:998)
            TypeDecl: declname='__nesc_filler0', quals=[] (at pp.c:998)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='1' (at pp.c:998)
        Decl: name='frameCounter', quals=[], storage=[] (at 0)
          TypeDecl: declname='frameCounter', quals=[] (at pp.c:1001)
            IdentifierType: names=['nx_uint32_t'] (at None)
        Decl: name='keyID', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1002)
            TypeDecl: declname='keyID', quals=[] (at pp.c:1002)
              IdentifierType: names=['nx_uint8_t'] (at None)
            Constant: type='int', value='1' (at pp.c:1002)
  Typedef: name='cc2420_header_t', quals=[], storage=['typedef'] (at pp.c:1024)
    TypeDecl: declname='cc2420_header_t', quals=[] (at pp.c:1024)
      Struct: name='cc2420_header_t', packed=False (at pp.c:1006)
        Decl: name='length', quals=[], storage=[] (at 0)
          TypeDecl: declname='length', quals=[] (at pp.c:1007)
            IdentifierType: names=['nxle_uint8_t'] (at None)
        Decl: name='fcf', quals=[], storage=[] (at 0)
          TypeDecl: declname='fcf', quals=[] (at pp.c:1008)
            IdentifierType: names=['nxle_uint16_t'] (at None)
        Decl: name='dsn', quals=[], storage=[] (at 0)
          TypeDecl: declname='dsn', quals=[] (at pp.c:1009)
            IdentifierType: names=['nxle_uint8_t'] (at None)
        Decl: name='destpan', quals=[], storage=[] (at 0)
          TypeDecl: declname='destpan', quals=[] (at pp.c:1010)
            IdentifierType: names=['nxle_uint16_t'] (at None)
        Decl: name='dest', quals=[], storage=[] (at 0)
          TypeDecl: declname='dest', quals=[] (at pp.c:1011)
            IdentifierType: names=['nxle_uint16_t'] (at None)
        Decl: name='src', quals=[], storage=[] (at 0)
          TypeDecl: declname='src', quals=[] (at pp.c:1012)
            IdentifierType: names=['nxle_uint16_t'] (at None)
        Decl: name='network', quals=[], storage=[] (at 0)
          TypeDecl: declname='network', quals=[] (at pp.c:1020)
            IdentifierType: names=['nxle_uint8_t'] (at None)
        Decl: name='type', quals=[], storage=[] (at 0)
          TypeDecl: declname='type', quals=[] (at pp.c:1023)
            IdentifierType: names=['nxle_uint8_t'] (at None)
  Typedef: name='cc2420_footer_t', quals=[], storage=['typedef'] (at pp.c:1032)
    TypeDecl: declname='cc2420_footer_t', quals=[] (at pp.c:1032)
      Struct: name='cc2420_footer_t', packed=False (at pp.c:1031)
  Typedef: name='cc2420_metadata_t', quals=[], storage=['typedef'] (at pp.c:1050)
    TypeDecl: declname='cc2420_metadata_t', quals=[] (at pp.c:1050)
      Struct: name='cc2420_metadata_t', packed=False (at pp.c:1035)
        Decl: name='rssi', quals=[], storage=[] (at 0)
          TypeDecl: declname='rssi', quals=[] (at pp.c:1036)
            IdentifierType: names=['nx_uint8_t'] (at None)
        Decl: name='lqi', quals=[], storage=[] (at 0)
          TypeDecl: declname='lqi', quals=[] (at pp.c:1037)
            IdentifierType: names=['nx_uint8_t'] (at None)
        Decl: name='tx_power', quals=[], storage=[] (at 0)
          TypeDecl: declname='tx_power', quals=[] (at pp.c:1038)
            IdentifierType: names=['nx_uint8_t'] (at None)
        Decl: name='crc', quals=[], storage=[] (at 0)
          TypeDecl: declname='crc', quals=[] (at pp.c:1039)
            IdentifierType: names=['nx_bool'] (at None)
        Decl: name='ack', quals=[], storage=[] (at 0)
          TypeDecl: declname='ack', quals=[] (at pp.c:1040)
            IdentifierType: names=['nx_bool'] (at None)
        Decl: name='timesync', quals=[], storage=[] (at 0)
          TypeDecl: declname='timesync', quals=[] (at pp.c:1041)
            IdentifierType: names=['nx_bool'] (at None)
        Decl: name='timestamp', quals=[], storage=[] (at 0)
          TypeDecl: declname='timestamp', quals=[] (at pp.c:1042)
            IdentifierType: names=['nx_uint32_t'] (at None)
        Decl: name='rxInterval', quals=[], storage=[] (at 0)
          TypeDecl: declname='rxInterval', quals=[] (at pp.c:1043)
            IdentifierType: names=['nx_uint16_t'] (at None)
  Typedef: name='cc2420_packet_t', quals=[], storage=['typedef'] (at pp.c:1060)
    TypeDecl: declname='cc2420_packet_t', quals=[] (at pp.c:1060)
      Struct: name='cc2420_packet_t', packed=False (at pp.c:1057)
        Decl: name='packet', quals=[], storage=[] (at 0)
          TypeDecl: declname='packet', quals=[] (at pp.c:1058)
            IdentifierType: names=['cc2420_header_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1059)
            TypeDecl: declname='data', quals=[] (at pp.c:1059)
              IdentifierType: names=['nx_uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1062)
    Enum: name='__nesc_unnamed4262' (at pp.c:1062)
      EnumeratorList:  (at pp.c:1064)
        Enumerator: name='MAC_HEADER_SIZE' (at pp.c:1064)
          BinaryOp: op='-' (at pp.c:1064)
            UnaryOp: op='sizeof' (at pp.c:1064)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['cc2420_header_t'] (at None)
            Constant: type='int', value='1' (at pp.c:1064)
        Enumerator: name='MAC_FOOTER_SIZE' (at pp.c:1066)
          UnaryOp: op='sizeof' (at pp.c:1066)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint16_t'] (at None)
        Enumerator: name='MAC_PACKET_SIZE' (at pp.c:1068)
          BinaryOp: op='+' (at pp.c:1068)
            BinaryOp: op='+' (at pp.c:1068)
              ID: name='MAC_HEADER_SIZE' (at pp.c:1068)
              Constant: type='int', value='28' (at pp.c:1068)
            ID: name='MAC_FOOTER_SIZE' (at pp.c:1068)
        Enumerator: name='CC2420_SIZE' (at pp.c:1070)
          BinaryOp: op='+' (at pp.c:1070)
            ID: name='MAC_HEADER_SIZE' (at pp.c:1070)
            ID: name='MAC_FOOTER_SIZE' (at pp.c:1070)
  Decl: name=None, quals=[], storage=[] (at pp.c:1073)
    Enum: name='cc2420_enums' (at pp.c:1073)
      EnumeratorList:  (at pp.c:1074)
        Enumerator: name='CC2420_TIME_ACK_TURNAROUND' (at pp.c:1074)
          Constant: type='int', value='7' (at pp.c:1074)
        Enumerator: name='CC2420_TIME_VREN' (at pp.c:1075)
          Constant: type='int', value='20' (at pp.c:1075)
        Enumerator: name='CC2420_TIME_SYMBOL' (at pp.c:1076)
          Constant: type='int', value='2' (at pp.c:1076)
        Enumerator: name='CC2420_BACKOFF_PERIOD' (at pp.c:1077)
          BinaryOp: op='/' (at pp.c:1077)
            Constant: type='int', value='20' (at pp.c:1077)
            ID: name='CC2420_TIME_SYMBOL' (at pp.c:1077)
        Enumerator: name='CC2420_MIN_BACKOFF' (at pp.c:1078)
          BinaryOp: op='/' (at pp.c:1078)
            Constant: type='int', value='20' (at pp.c:1078)
            ID: name='CC2420_TIME_SYMBOL' (at pp.c:1078)
        Enumerator: name='CC2420_ACK_WAIT_DELAY' (at pp.c:1079)
          Constant: type='int', value='256' (at pp.c:1079)
  Decl: name=None, quals=[], storage=[] (at pp.c:1082)
    Enum: name='cc2420_status_enums' (at pp.c:1082)
      EnumeratorList:  (at pp.c:1083)
        Enumerator: name='CC2420_STATUS_RSSI_VALID' (at pp.c:1083)
          BinaryOp: op='<<' (at pp.c:1083)
            Constant: type='int', value='1' (at pp.c:1083)
            Constant: type='int', value='1' (at pp.c:1083)
        Enumerator: name='CC2420_STATUS_LOCK' (at pp.c:1084)
          BinaryOp: op='<<' (at pp.c:1084)
            Constant: type='int', value='1' (at pp.c:1084)
            Constant: type='int', value='2' (at pp.c:1084)
        Enumerator: name='CC2420_STATUS_TX_ACTIVE' (at pp.c:1085)
          BinaryOp: op='<<' (at pp.c:1085)
            Constant: type='int', value='1' (at pp.c:1085)
            Constant: type='int', value='3' (at pp.c:1085)
        Enumerator: name='CC2420_STATUS_ENC_BUSY' (at pp.c:1086)
          BinaryOp: op='<<' (at pp.c:1086)
            Constant: type='int', value='1' (at pp.c:1086)
            Constant: type='int', value='4' (at pp.c:1086)
        Enumerator: name='CC2420_STATUS_TX_UNDERFLOW' (at pp.c:1087)
          BinaryOp: op='<<' (at pp.c:1087)
            Constant: type='int', value='1' (at pp.c:1087)
            Constant: type='int', value='5' (at pp.c:1087)
        Enumerator: name='CC2420_STATUS_XOSC16M_STABLE' (at pp.c:1088)
          BinaryOp: op='<<' (at pp.c:1088)
            Constant: type='int', value='1' (at pp.c:1088)
            Constant: type='int', value='6' (at pp.c:1088)
  Decl: name=None, quals=[], storage=[] (at pp.c:1091)
    Enum: name='cc2420_config_reg_enums' (at pp.c:1091)
      EnumeratorList:  (at pp.c:1092)
        Enumerator: name='CC2420_SNOP' (at pp.c:1092)
          Constant: type='int', value='0x00' (at pp.c:1092)
        Enumerator: name='CC2420_SXOSCON' (at pp.c:1093)
          Constant: type='int', value='0x01' (at pp.c:1093)
        Enumerator: name='CC2420_STXCAL' (at pp.c:1094)
          Constant: type='int', value='0x02' (at pp.c:1094)
        Enumerator: name='CC2420_SRXON' (at pp.c:1095)
          Constant: type='int', value='0x03' (at pp.c:1095)
        Enumerator: name='CC2420_STXON' (at pp.c:1096)
          Constant: type='int', value='0x04' (at pp.c:1096)
        Enumerator: name='CC2420_STXONCCA' (at pp.c:1097)
          Constant: type='int', value='0x05' (at pp.c:1097)
        Enumerator: name='CC2420_SRFOFF' (at pp.c:1098)
          Constant: type='int', value='0x06' (at pp.c:1098)
        Enumerator: name='CC2420_SXOSCOFF' (at pp.c:1099)
          Constant: type='int', value='0x07' (at pp.c:1099)
        Enumerator: name='CC2420_SFLUSHRX' (at pp.c:1100)
          Constant: type='int', value='0x08' (at pp.c:1100)
        Enumerator: name='CC2420_SFLUSHTX' (at pp.c:1101)
          Constant: type='int', value='0x09' (at pp.c:1101)
        Enumerator: name='CC2420_SACK' (at pp.c:1102)
          Constant: type='int', value='0x0a' (at pp.c:1102)
        Enumerator: name='CC2420_SACKPEND' (at pp.c:1103)
          Constant: type='int', value='0x0b' (at pp.c:1103)
        Enumerator: name='CC2420_SRXDEC' (at pp.c:1104)
          Constant: type='int', value='0x0c' (at pp.c:1104)
        Enumerator: name='CC2420_STXENC' (at pp.c:1105)
          Constant: type='int', value='0x0d' (at pp.c:1105)
        Enumerator: name='CC2420_SAES' (at pp.c:1106)
          Constant: type='int', value='0x0e' (at pp.c:1106)
        Enumerator: name='CC2420_MAIN' (at pp.c:1107)
          Constant: type='int', value='0x10' (at pp.c:1107)
        Enumerator: name='CC2420_MDMCTRL0' (at pp.c:1108)
          Constant: type='int', value='0x11' (at pp.c:1108)
        Enumerator: name='CC2420_MDMCTRL1' (at pp.c:1109)
          Constant: type='int', value='0x12' (at pp.c:1109)
        Enumerator: name='CC2420_RSSI' (at pp.c:1110)
          Constant: type='int', value='0x13' (at pp.c:1110)
        Enumerator: name='CC2420_SYNCWORD' (at pp.c:1111)
          Constant: type='int', value='0x14' (at pp.c:1111)
        Enumerator: name='CC2420_TXCTRL' (at pp.c:1112)
          Constant: type='int', value='0x15' (at pp.c:1112)
        Enumerator: name='CC2420_RXCTRL0' (at pp.c:1113)
          Constant: type='int', value='0x16' (at pp.c:1113)
        Enumerator: name='CC2420_RXCTRL1' (at pp.c:1114)
          Constant: type='int', value='0x17' (at pp.c:1114)
        Enumerator: name='CC2420_FSCTRL' (at pp.c:1115)
          Constant: type='int', value='0x18' (at pp.c:1115)
        Enumerator: name='CC2420_SECCTRL0' (at pp.c:1116)
          Constant: type='int', value='0x19' (at pp.c:1116)
        Enumerator: name='CC2420_SECCTRL1' (at pp.c:1117)
          Constant: type='int', value='0x1a' (at pp.c:1117)
        Enumerator: name='CC2420_BATTMON' (at pp.c:1118)
          Constant: type='int', value='0x1b' (at pp.c:1118)
        Enumerator: name='CC2420_IOCFG0' (at pp.c:1119)
          Constant: type='int', value='0x1c' (at pp.c:1119)
        Enumerator: name='CC2420_IOCFG1' (at pp.c:1120)
          Constant: type='int', value='0x1d' (at pp.c:1120)
        Enumerator: name='CC2420_MANFIDL' (at pp.c:1121)
          Constant: type='int', value='0x1e' (at pp.c:1121)
        Enumerator: name='CC2420_MANFIDH' (at pp.c:1122)
          Constant: type='int', value='0x1f' (at pp.c:1122)
        Enumerator: name='CC2420_FSMTC' (at pp.c:1123)
          Constant: type='int', value='0x20' (at pp.c:1123)
        Enumerator: name='CC2420_MANAND' (at pp.c:1124)
          Constant: type='int', value='0x21' (at pp.c:1124)
        Enumerator: name='CC2420_MANOR' (at pp.c:1125)
          Constant: type='int', value='0x22' (at pp.c:1125)
        Enumerator: name='CC2420_AGCCTRL' (at pp.c:1126)
          Constant: type='int', value='0x23' (at pp.c:1126)
        Enumerator: name='CC2420_AGCTST0' (at pp.c:1127)
          Constant: type='int', value='0x24' (at pp.c:1127)
        Enumerator: name='CC2420_AGCTST1' (at pp.c:1128)
          Constant: type='int', value='0x25' (at pp.c:1128)
        Enumerator: name='CC2420_AGCTST2' (at pp.c:1129)
          Constant: type='int', value='0x26' (at pp.c:1129)
        Enumerator: name='CC2420_FSTST0' (at pp.c:1130)
          Constant: type='int', value='0x27' (at pp.c:1130)
        Enumerator: name='CC2420_FSTST1' (at pp.c:1131)
          Constant: type='int', value='0x28' (at pp.c:1131)
        Enumerator: name='CC2420_FSTST2' (at pp.c:1132)
          Constant: type='int', value='0x29' (at pp.c:1132)
        Enumerator: name='CC2420_FSTST3' (at pp.c:1133)
          Constant: type='int', value='0x2a' (at pp.c:1133)
        Enumerator: name='CC2420_RXBPFTST' (at pp.c:1134)
          Constant: type='int', value='0x2b' (at pp.c:1134)
        Enumerator: name='CC2420_FMSTATE' (at pp.c:1135)
          Constant: type='int', value='0x2c' (at pp.c:1135)
        Enumerator: name='CC2420_ADCTST' (at pp.c:1136)
          Constant: type='int', value='0x2d' (at pp.c:1136)
        Enumerator: name='CC2420_DACTST' (at pp.c:1137)
          Constant: type='int', value='0x2e' (at pp.c:1137)
        Enumerator: name='CC2420_TOPTST' (at pp.c:1138)
          Constant: type='int', value='0x2f' (at pp.c:1138)
        Enumerator: name='CC2420_TXFIFO' (at pp.c:1139)
          Constant: type='int', value='0x3e' (at pp.c:1139)
        Enumerator: name='CC2420_RXFIFO' (at pp.c:1140)
          Constant: type='int', value='0x3f' (at pp.c:1140)
  Decl: name=None, quals=[], storage=[] (at pp.c:1143)
    Enum: name='cc2420_ram_addr_enums' (at pp.c:1143)
      EnumeratorList:  (at pp.c:1144)
        Enumerator: name='CC2420_RAM_TXFIFO' (at pp.c:1144)
          Constant: type='int', value='0x000' (at pp.c:1144)
        Enumerator: name='CC2420_RAM_RXFIFO' (at pp.c:1145)
          Constant: type='int', value='0x080' (at pp.c:1145)
        Enumerator: name='CC2420_RAM_KEY0' (at pp.c:1146)
          Constant: type='int', value='0x100' (at pp.c:1146)
        Enumerator: name='CC2420_RAM_RXNONCE' (at pp.c:1147)
          Constant: type='int', value='0x110' (at pp.c:1147)
        Enumerator: name='CC2420_RAM_SABUF' (at pp.c:1148)
          Constant: type='int', value='0x120' (at pp.c:1148)
        Enumerator: name='CC2420_RAM_KEY1' (at pp.c:1149)
          Constant: type='int', value='0x130' (at pp.c:1149)
        Enumerator: name='CC2420_RAM_TXNONCE' (at pp.c:1150)
          Constant: type='int', value='0x140' (at pp.c:1150)
        Enumerator: name='CC2420_RAM_CBCSTATE' (at pp.c:1151)
          Constant: type='int', value='0x150' (at pp.c:1151)
        Enumerator: name='CC2420_RAM_IEEEADR' (at pp.c:1152)
          Constant: type='int', value='0x160' (at pp.c:1152)
        Enumerator: name='CC2420_RAM_PANID' (at pp.c:1153)
          Constant: type='int', value='0x168' (at pp.c:1153)
        Enumerator: name='CC2420_RAM_SHORTADR' (at pp.c:1154)
          Constant: type='int', value='0x16a' (at pp.c:1154)
  Decl: name=None, quals=[], storage=[] (at pp.c:1157)
    Enum: name='cc2420_nonce_enums' (at pp.c:1157)
      EnumeratorList:  (at pp.c:1158)
        Enumerator: name='CC2420_NONCE_BLOCK_COUNTER' (at pp.c:1158)
          Constant: type='int', value='0' (at pp.c:1158)
        Enumerator: name='CC2420_NONCE_KEY_SEQ_COUNTER' (at pp.c:1159)
          Constant: type='int', value='2' (at pp.c:1159)
        Enumerator: name='CC2420_NONCE_FRAME_COUNTER' (at pp.c:1160)
          Constant: type='int', value='3' (at pp.c:1160)
        Enumerator: name='CC2420_NONCE_SOURCE_ADDRESS' (at pp.c:1161)
          Constant: type='int', value='7' (at pp.c:1161)
        Enumerator: name='CC2420_NONCE_FLAGS' (at pp.c:1162)
          Constant: type='int', value='15' (at pp.c:1162)
  Decl: name=None, quals=[], storage=[] (at pp.c:1165)
    Enum: name='cc2420_main_enums' (at pp.c:1165)
      EnumeratorList:  (at pp.c:1166)
        Enumerator: name='CC2420_MAIN_RESETn' (at pp.c:1166)
          Constant: type='int', value='15' (at pp.c:1166)
        Enumerator: name='CC2420_MAIN_ENC_RESETn' (at pp.c:1167)
          Constant: type='int', value='14' (at pp.c:1167)
        Enumerator: name='CC2420_MAIN_DEMOD_RESETn' (at pp.c:1168)
          Constant: type='int', value='13' (at pp.c:1168)
        Enumerator: name='CC2420_MAIN_MOD_RESETn' (at pp.c:1169)
          Constant: type='int', value='12' (at pp.c:1169)
        Enumerator: name='CC2420_MAIN_FS_RESETn' (at pp.c:1170)
          Constant: type='int', value='11' (at pp.c:1170)
        Enumerator: name='CC2420_MAIN_XOSC16M_BYPASS' (at pp.c:1171)
          Constant: type='int', value='0' (at pp.c:1171)
  Decl: name=None, quals=[], storage=[] (at pp.c:1174)
    Enum: name='cc2420_mdmctrl0_enums' (at pp.c:1174)
      EnumeratorList:  (at pp.c:1175)
        Enumerator: name='CC2420_MDMCTRL0_RESERVED_FRAME_MODE' (at pp.c:1175)
          Constant: type='int', value='13' (at pp.c:1175)
        Enumerator: name='CC2420_MDMCTRL0_PAN_COORDINATOR' (at pp.c:1176)
          Constant: type='int', value='12' (at pp.c:1176)
        Enumerator: name='CC2420_MDMCTRL0_ADR_DECODE' (at pp.c:1177)
          Constant: type='int', value='11' (at pp.c:1177)
        Enumerator: name='CC2420_MDMCTRL0_CCA_HYST' (at pp.c:1178)
          Constant: type='int', value='8' (at pp.c:1178)
        Enumerator: name='CC2420_MDMCTRL0_CCA_MOD' (at pp.c:1179)
          Constant: type='int', value='6' (at pp.c:1179)
        Enumerator: name='CC2420_MDMCTRL0_AUTOCRC' (at pp.c:1180)
          Constant: type='int', value='5' (at pp.c:1180)
        Enumerator: name='CC2420_MDMCTRL0_AUTOACK' (at pp.c:1181)
          Constant: type='int', value='4' (at pp.c:1181)
        Enumerator: name='CC2420_MDMCTRL0_PREAMBLE_LENGTH' (at pp.c:1182)
          Constant: type='int', value='0' (at pp.c:1182)
  Decl: name=None, quals=[], storage=[] (at pp.c:1185)
    Enum: name='cc2420_mdmctrl1_enums' (at pp.c:1185)
      EnumeratorList:  (at pp.c:1186)
        Enumerator: name='CC2420_MDMCTRL1_CORR_THR' (at pp.c:1186)
          Constant: type='int', value='6' (at pp.c:1186)
        Enumerator: name='CC2420_MDMCTRL1_DEMOD_AVG_MODE' (at pp.c:1187)
          Constant: type='int', value='5' (at pp.c:1187)
        Enumerator: name='CC2420_MDMCTRL1_MODULATION_MODE' (at pp.c:1188)
          Constant: type='int', value='4' (at pp.c:1188)
        Enumerator: name='CC2420_MDMCTRL1_TX_MODE' (at pp.c:1189)
          Constant: type='int', value='2' (at pp.c:1189)
        Enumerator: name='CC2420_MDMCTRL1_RX_MODE' (at pp.c:1190)
          Constant: type='int', value='0' (at pp.c:1190)
  Decl: name=None, quals=[], storage=[] (at pp.c:1193)
    Enum: name='cc2420_rssi_enums' (at pp.c:1193)
      EnumeratorList:  (at pp.c:1194)
        Enumerator: name='CC2420_RSSI_CCA_THR' (at pp.c:1194)
          Constant: type='int', value='8' (at pp.c:1194)
        Enumerator: name='CC2420_RSSI_RSSI_VAL' (at pp.c:1195)
          Constant: type='int', value='0' (at pp.c:1195)
  Decl: name=None, quals=[], storage=[] (at pp.c:1198)
    Enum: name='cc2420_syncword_enums' (at pp.c:1198)
      EnumeratorList:  (at pp.c:1199)
        Enumerator: name='CC2420_SYNCWORD_SYNCWORD' (at pp.c:1199)
          Constant: type='int', value='0' (at pp.c:1199)
  Decl: name=None, quals=[], storage=[] (at pp.c:1202)
    Enum: name='cc2420_txctrl_enums' (at pp.c:1202)
      EnumeratorList:  (at pp.c:1203)
        Enumerator: name='CC2420_TXCTRL_TXMIXBUF_CUR' (at pp.c:1203)
          Constant: type='int', value='14' (at pp.c:1203)
        Enumerator: name='CC2420_TXCTRL_TX_TURNAROUND' (at pp.c:1204)
          Constant: type='int', value='13' (at pp.c:1204)
        Enumerator: name='CC2420_TXCTRL_TXMIX_CAP_ARRAY' (at pp.c:1205)
          Constant: type='int', value='11' (at pp.c:1205)
        Enumerator: name='CC2420_TXCTRL_TXMIX_CURRENT' (at pp.c:1206)
          Constant: type='int', value='9' (at pp.c:1206)
        Enumerator: name='CC2420_TXCTRL_PA_CURRENT' (at pp.c:1207)
          Constant: type='int', value='6' (at pp.c:1207)
        Enumerator: name='CC2420_TXCTRL_RESERVED' (at pp.c:1208)
          Constant: type='int', value='5' (at pp.c:1208)
        Enumerator: name='CC2420_TXCTRL_PA_LEVEL' (at pp.c:1209)
          Constant: type='int', value='0' (at pp.c:1209)
  Decl: name=None, quals=[], storage=[] (at pp.c:1212)
    Enum: name='cc2420_rxctrl0_enums' (at pp.c:1212)
      EnumeratorList:  (at pp.c:1213)
        Enumerator: name='CC2420_RXCTRL0_RXMIXBUF_CUR' (at pp.c:1213)
          Constant: type='int', value='12' (at pp.c:1213)
        Enumerator: name='CC2420_RXCTRL0_HIGH_LNA_GAIN' (at pp.c:1214)
          Constant: type='int', value='10' (at pp.c:1214)
        Enumerator: name='CC2420_RXCTRL0_MED_LNA_GAIN' (at pp.c:1215)
          Constant: type='int', value='8' (at pp.c:1215)
        Enumerator: name='CC2420_RXCTRL0_LOW_LNA_GAIN' (at pp.c:1216)
          Constant: type='int', value='6' (at pp.c:1216)
        Enumerator: name='CC2420_RXCTRL0_HIGH_LNA_CURRENT' (at pp.c:1217)
          Constant: type='int', value='4' (at pp.c:1217)
        Enumerator: name='CC2420_RXCTRL0_MED_LNA_CURRENT' (at pp.c:1218)
          Constant: type='int', value='2' (at pp.c:1218)
        Enumerator: name='CC2420_RXCTRL0_LOW_LNA_CURRENT' (at pp.c:1219)
          Constant: type='int', value='0' (at pp.c:1219)
  Decl: name=None, quals=[], storage=[] (at pp.c:1222)
    Enum: name='cc2420_rxctrl1_enums' (at pp.c:1222)
      EnumeratorList:  (at pp.c:1223)
        Enumerator: name='CC2420_RXCTRL1_RXBPF_LOCUR' (at pp.c:1223)
          Constant: type='int', value='13' (at pp.c:1223)
        Enumerator: name='CC2420_RXCTRL1_RXBPF_MIDCUR' (at pp.c:1224)
          Constant: type='int', value='12' (at pp.c:1224)
        Enumerator: name='CC2420_RXCTRL1_LOW_LOWGAIN' (at pp.c:1225)
          Constant: type='int', value='11' (at pp.c:1225)
        Enumerator: name='CC2420_RXCTRL1_MED_LOWGAIN' (at pp.c:1226)
          Constant: type='int', value='10' (at pp.c:1226)
        Enumerator: name='CC2420_RXCTRL1_HIGH_HGM' (at pp.c:1227)
          Constant: type='int', value='9' (at pp.c:1227)
        Enumerator: name='CC2420_RXCTRL1_MED_HGM' (at pp.c:1228)
          Constant: type='int', value='8' (at pp.c:1228)
        Enumerator: name='CC2420_RXCTRL1_LNA_CAP_ARRAY' (at pp.c:1229)
          Constant: type='int', value='6' (at pp.c:1229)
        Enumerator: name='CC2420_RXCTRL1_RXMIX_TAIL' (at pp.c:1230)
          Constant: type='int', value='4' (at pp.c:1230)
        Enumerator: name='CC2420_RXCTRL1_RXMIX_VCM' (at pp.c:1231)
          Constant: type='int', value='2' (at pp.c:1231)
        Enumerator: name='CC2420_RXCTRL1_RXMIX_CURRENT' (at pp.c:1232)
          Constant: type='int', value='0' (at pp.c:1232)
  Decl: name=None, quals=[], storage=[] (at pp.c:1235)
    Enum: name='cc2420_rsctrl_enums' (at pp.c:1235)
      EnumeratorList:  (at pp.c:1236)
        Enumerator: name='CC2420_FSCTRL_LOCK_THR' (at pp.c:1236)
          Constant: type='int', value='14' (at pp.c:1236)
        Enumerator: name='CC2420_FSCTRL_CAL_DONE' (at pp.c:1237)
          Constant: type='int', value='13' (at pp.c:1237)
        Enumerator: name='CC2420_FSCTRL_CAL_RUNNING' (at pp.c:1238)
          Constant: type='int', value='12' (at pp.c:1238)
        Enumerator: name='CC2420_FSCTRL_LOCK_LENGTH' (at pp.c:1239)
          Constant: type='int', value='11' (at pp.c:1239)
        Enumerator: name='CC2420_FSCTRL_LOCK_STATUS' (at pp.c:1240)
          Constant: type='int', value='10' (at pp.c:1240)
        Enumerator: name='CC2420_FSCTRL_FREQ' (at pp.c:1241)
          Constant: type='int', value='0' (at pp.c:1241)
  Decl: name=None, quals=[], storage=[] (at pp.c:1244)
    Enum: name='cc2420_secctrl0_enums' (at pp.c:1244)
      EnumeratorList:  (at pp.c:1245)
        Enumerator: name='CC2420_SECCTRL0_RXFIFO_PROTECTION' (at pp.c:1245)
          Constant: type='int', value='9' (at pp.c:1245)
        Enumerator: name='CC2420_SECCTRL0_SEC_CBC_HEAD' (at pp.c:1246)
          Constant: type='int', value='8' (at pp.c:1246)
        Enumerator: name='CC2420_SECCTRL0_SEC_SAKEYSEL' (at pp.c:1247)
          Constant: type='int', value='7' (at pp.c:1247)
        Enumerator: name='CC2420_SECCTRL0_SEC_TXKEYSEL' (at pp.c:1248)
          Constant: type='int', value='6' (at pp.c:1248)
        Enumerator: name='CC2420_SECCTRL0_SEC_RXKEYSEL' (at pp.c:1249)
          Constant: type='int', value='5' (at pp.c:1249)
        Enumerator: name='CC2420_SECCTRL0_SEC_M' (at pp.c:1250)
          Constant: type='int', value='2' (at pp.c:1250)
        Enumerator: name='CC2420_SECCTRL0_SEC_MODE' (at pp.c:1251)
          Constant: type='int', value='0' (at pp.c:1251)
  Decl: name=None, quals=[], storage=[] (at pp.c:1254)
    Enum: name='cc2420_secctrl1_enums' (at pp.c:1254)
      EnumeratorList:  (at pp.c:1255)
        Enumerator: name='CC2420_SECCTRL1_SEC_TXL' (at pp.c:1255)
          Constant: type='int', value='8' (at pp.c:1255)
        Enumerator: name='CC2420_SECCTRL1_SEC_RXL' (at pp.c:1256)
          Constant: type='int', value='0' (at pp.c:1256)
  Decl: name=None, quals=[], storage=[] (at pp.c:1259)
    Enum: name='cc2420_battmon_enums' (at pp.c:1259)
      EnumeratorList:  (at pp.c:1260)
        Enumerator: name='CC2420_BATTMON_BATT_OK' (at pp.c:1260)
          Constant: type='int', value='6' (at pp.c:1260)
        Enumerator: name='CC2420_BATTMON_BATTMON_EN' (at pp.c:1261)
          Constant: type='int', value='5' (at pp.c:1261)
        Enumerator: name='CC2420_BATTMON_BATTMON_VOLTAGE' (at pp.c:1262)
          Constant: type='int', value='0' (at pp.c:1262)
  Decl: name=None, quals=[], storage=[] (at pp.c:1265)
    Enum: name='cc2420_iocfg0_enums' (at pp.c:1265)
      EnumeratorList:  (at pp.c:1266)
        Enumerator: name='CC2420_IOCFG0_BCN_ACCEPT' (at pp.c:1266)
          Constant: type='int', value='11' (at pp.c:1266)
        Enumerator: name='CC2420_IOCFG0_FIFO_POLARITY' (at pp.c:1267)
          Constant: type='int', value='10' (at pp.c:1267)
        Enumerator: name='CC2420_IOCFG0_FIFOP_POLARITY' (at pp.c:1268)
          Constant: type='int', value='9' (at pp.c:1268)
        Enumerator: name='CC2420_IOCFG0_SFD_POLARITY' (at pp.c:1269)
          Constant: type='int', value='8' (at pp.c:1269)
        Enumerator: name='CC2420_IOCFG0_CCA_POLARITY' (at pp.c:1270)
          Constant: type='int', value='7' (at pp.c:1270)
        Enumerator: name='CC2420_IOCFG0_FIFOP_THR' (at pp.c:1271)
          Constant: type='int', value='0' (at pp.c:1271)
  Decl: name=None, quals=[], storage=[] (at pp.c:1274)
    Enum: name='cc2420_iocfg1_enums' (at pp.c:1274)
      EnumeratorList:  (at pp.c:1275)
        Enumerator: name='CC2420_IOCFG1_HSSD_SRC' (at pp.c:1275)
          Constant: type='int', value='10' (at pp.c:1275)
        Enumerator: name='CC2420_IOCFG1_SFDMUX' (at pp.c:1276)
          Constant: type='int', value='5' (at pp.c:1276)
        Enumerator: name='CC2420_IOCFG1_CCAMUX' (at pp.c:1277)
          Constant: type='int', value='0' (at pp.c:1277)
  Decl: name=None, quals=[], storage=[] (at pp.c:1280)
    Enum: name='cc2420_manfidl_enums' (at pp.c:1280)
      EnumeratorList:  (at pp.c:1281)
        Enumerator: name='CC2420_MANFIDL_PARTNUM' (at pp.c:1281)
          Constant: type='int', value='12' (at pp.c:1281)
        Enumerator: name='CC2420_MANFIDL_MANFID' (at pp.c:1282)
          Constant: type='int', value='0' (at pp.c:1282)
  Decl: name=None, quals=[], storage=[] (at pp.c:1285)
    Enum: name='cc2420_manfidh_enums' (at pp.c:1285)
      EnumeratorList:  (at pp.c:1286)
        Enumerator: name='CC2420_MANFIDH_VERSION' (at pp.c:1286)
          Constant: type='int', value='12' (at pp.c:1286)
        Enumerator: name='CC2420_MANFIDH_PARTNUM' (at pp.c:1287)
          Constant: type='int', value='0' (at pp.c:1287)
  Decl: name=None, quals=[], storage=[] (at pp.c:1290)
    Enum: name='cc2420_fsmtc_enums' (at pp.c:1290)
      EnumeratorList:  (at pp.c:1291)
        Enumerator: name='CC2420_FSMTC_TC_RXCHAIN2RX' (at pp.c:1291)
          Constant: type='int', value='13' (at pp.c:1291)
        Enumerator: name='CC2420_FSMTC_TC_SWITCH2TX' (at pp.c:1292)
          Constant: type='int', value='10' (at pp.c:1292)
        Enumerator: name='CC2420_FSMTC_TC_PAON2TX' (at pp.c:1293)
          Constant: type='int', value='6' (at pp.c:1293)
        Enumerator: name='CC2420_FSMTC_TC_TXEND2SWITCH' (at pp.c:1294)
          Constant: type='int', value='3' (at pp.c:1294)
        Enumerator: name='CC2420_FSMTC_TC_TXEND2PAOFF' (at pp.c:1295)
          Constant: type='int', value='0' (at pp.c:1295)
  Decl: name=None, quals=[], storage=[] (at pp.c:1298)
    Enum: name='cc2420_sfdmux_enums' (at pp.c:1298)
      EnumeratorList:  (at pp.c:1299)
        Enumerator: name='CC2420_SFDMUX_SFD' (at pp.c:1299)
          Constant: type='int', value='0' (at pp.c:1299)
        Enumerator: name='CC2420_SFDMUX_XOSC16M_STABLE' (at pp.c:1300)
          Constant: type='int', value='24' (at pp.c:1300)
  Decl: name=None, quals=[], storage=[] (at pp.c:1303)
    Enum: name='cc2420_security_enums' (at pp.c:1303)
      EnumeratorList:  (at pp.c:1304)
        Enumerator: name='CC2420_NO_SEC' (at pp.c:1304)
          Constant: type='int', value='0' (at pp.c:1304)
        Enumerator: name='CC2420_CBC_MAC' (at pp.c:1305)
          Constant: type='int', value='1' (at pp.c:1305)
        Enumerator: name='CC2420_CTR' (at pp.c:1306)
          Constant: type='int', value='2' (at pp.c:1306)
        Enumerator: name='CC2420_CCM' (at pp.c:1307)
          Constant: type='int', value='3' (at pp.c:1307)
        Enumerator: name='NO_SEC' (at pp.c:1308)
          Constant: type='int', value='0' (at pp.c:1308)
        Enumerator: name='CBC_MAC_4' (at pp.c:1309)
          Constant: type='int', value='1' (at pp.c:1309)
        Enumerator: name='CBC_MAC_8' (at pp.c:1310)
          Constant: type='int', value='2' (at pp.c:1310)
        Enumerator: name='CBC_MAC_16' (at pp.c:1311)
          Constant: type='int', value='3' (at pp.c:1311)
        Enumerator: name='CTR' (at pp.c:1312)
          Constant: type='int', value='4' (at pp.c:1312)
        Enumerator: name='CCM_4' (at pp.c:1313)
          Constant: type='int', value='5' (at pp.c:1313)
        Enumerator: name='CCM_8' (at pp.c:1314)
          Constant: type='int', value='6' (at pp.c:1314)
        Enumerator: name='CCM_16' (at pp.c:1315)
          Constant: type='int', value='7' (at pp.c:1315)
  Decl: name=None, quals=[], storage=[] (at pp.c:1319)
    Enum: name='__nesc_unnamed4263' (at pp.c:1319)
      EnumeratorList:  (at pp.c:1321)
        Enumerator: name='CC2420_INVALID_TIMESTAMP' (at pp.c:1321)
          Constant: type='int', value='0x80000000L' (at pp.c:1321)
  Typedef: name='nx_am_id_t', quals=[], storage=['typedef'] (at pp.c:1324)
    TypeDecl: declname='nx_am_id_t', quals=[] (at pp.c:1324)
      IdentifierType: names=['nx_uint8_t'] (at None)
  Typedef: name='nx_am_group_t', quals=[], storage=['typedef'] (at pp.c:1325)
    TypeDecl: declname='nx_am_group_t', quals=[] (at pp.c:1325)
      IdentifierType: names=['nx_uint8_t'] (at None)
  Typedef: name='nx_am_addr_t', quals=[], storage=['typedef'] (at pp.c:1326)
    TypeDecl: declname='nx_am_addr_t', quals=[] (at pp.c:1326)
      IdentifierType: names=['nx_uint16_t'] (at None)
  Typedef: name='am_id_t', quals=[], storage=['typedef'] (at pp.c:1328)
    TypeDecl: declname='am_id_t', quals=[] (at pp.c:1328)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='am_group_t', quals=[], storage=['typedef'] (at pp.c:1329)
    TypeDecl: declname='am_group_t', quals=[] (at pp.c:1329)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='am_addr_t', quals=[], storage=['typedef'] (at pp.c:1330)
    TypeDecl: declname='am_addr_t', quals=[] (at pp.c:1330)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1332)
    Enum: name='__nesc_unnamed4264' (at pp.c:1332)
      EnumeratorList:  (at pp.c:1333)
        Enumerator: name='AM_BROADCAST_ADDR' (at pp.c:1333)
          Constant: type='int', value='0xffff' (at pp.c:1333)
  Decl: name=None, quals=[], storage=[] (at pp.c:1344)
    Enum: name='__nesc_unnamed4265' (at pp.c:1344)
      EnumeratorList:  (at pp.c:1345)
        Enumerator: name='TOS_AM_GROUP' (at pp.c:1345)
          Constant: type='int', value='0x22' (at pp.c:1345)
        Enumerator: name='TOS_AM_ADDRESS' (at pp.c:1346)
          Constant: type='int', value='1' (at pp.c:1346)
  Typedef: name='uart_id_t', quals=[], storage=['typedef'] (at pp.c:1349)
    TypeDecl: declname='uart_id_t', quals=[] (at pp.c:1349)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1353)
    Enum: name='__nesc_unnamed4266' (at pp.c:1353)
      EnumeratorList:  (at pp.c:1354)
        Enumerator: name='HDLC_FLAG_BYTE' (at pp.c:1354)
          Constant: type='int', value='0x7e' (at pp.c:1354)
        Enumerator: name='HDLC_CTLESC_BYTE' (at pp.c:1355)
          Constant: type='int', value='0x7d' (at pp.c:1355)
  Decl: name=None, quals=[], storage=[] (at pp.c:1360)
    Enum: name='__nesc_unnamed4267' (at pp.c:1360)
      EnumeratorList:  (at pp.c:1361)
        Enumerator: name='TOS_SERIAL_ACTIVE_MESSAGE_ID' (at pp.c:1361)
          Constant: type='int', value='0' (at pp.c:1361)
        Enumerator: name='TOS_SERIAL_CC1000_ID' (at pp.c:1362)
          Constant: type='int', value='1' (at pp.c:1362)
        Enumerator: name='TOS_SERIAL_802_15_4_ID' (at pp.c:1363)
          Constant: type='int', value='2' (at pp.c:1363)
        Enumerator: name='TOS_SERIAL_UNKNOWN_ID' (at pp.c:1364)
          Constant: type='int', value='255' (at pp.c:1364)
  Decl: name=None, quals=[], storage=[] (at pp.c:1368)
    Enum: name='__nesc_unnamed4268' (at pp.c:1368)
      EnumeratorList:  (at pp.c:1369)
        Enumerator: name='SERIAL_PROTO_ACK' (at pp.c:1369)
          Constant: type='int', value='67' (at pp.c:1369)
        Enumerator: name='SERIAL_PROTO_PACKET_ACK' (at pp.c:1370)
          Constant: type='int', value='68' (at pp.c:1370)
        Enumerator: name='SERIAL_PROTO_PACKET_NOACK' (at pp.c:1371)
          Constant: type='int', value='69' (at pp.c:1371)
        Enumerator: name='SERIAL_PROTO_PACKET_UNKNOWN' (at pp.c:1372)
          Constant: type='int', value='255' (at pp.c:1372)
  Typedef: name='radio_stats_t', quals=[], storage=['typedef'] (at pp.c:1388)
    TypeDecl: declname='radio_stats_t', quals=[] (at pp.c:1388)
      Struct: name='radio_stats', packed=False (at pp.c:1376)
        Decl: name='version', quals=[], storage=[] (at 0)
          TypeDecl: declname='version', quals=[] (at pp.c:1377)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='flags', quals=[], storage=[] (at 0)
          TypeDecl: declname='flags', quals=[] (at pp.c:1378)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='reserved', quals=[], storage=[] (at 0)
          TypeDecl: declname='reserved', quals=[] (at pp.c:1379)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='platform', quals=[], storage=[] (at 0)
          TypeDecl: declname='platform', quals=[] (at pp.c:1380)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='MTU', quals=[], storage=[] (at 0)
          TypeDecl: declname='MTU', quals=[] (at pp.c:1381)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='radio_crc_fail', quals=[], storage=[] (at 0)
          TypeDecl: declname='radio_crc_fail', quals=[] (at pp.c:1382)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='radio_queue_drops', quals=[], storage=[] (at 0)
          TypeDecl: declname='radio_queue_drops', quals=[] (at pp.c:1383)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='serial_crc_fail', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial_crc_fail', quals=[] (at pp.c:1384)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='serial_tx_fail', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial_tx_fail', quals=[] (at pp.c:1385)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='serial_short_packets', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial_short_packets', quals=[] (at pp.c:1386)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='serial_proto_drops', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial_proto_drops', quals=[] (at pp.c:1387)
            IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='serial_header_t', quals=[], storage=['typedef'] (at pp.c:1403)
    TypeDecl: declname='serial_header_t', quals=[] (at pp.c:1403)
      Struct: name='serial_header', packed=False (at pp.c:1397)
        Decl: name='dest', quals=[], storage=[] (at 0)
          TypeDecl: declname='dest', quals=[] (at pp.c:1398)
            IdentifierType: names=['nx_am_addr_t'] (at None)
        Decl: name='src', quals=[], storage=[] (at 0)
          TypeDecl: declname='src', quals=[] (at pp.c:1399)
            IdentifierType: names=['nx_am_addr_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at 0)
          TypeDecl: declname='length', quals=[] (at pp.c:1400)
            IdentifierType: names=['nx_uint8_t'] (at None)
        Decl: name='group', quals=[], storage=[] (at 0)
          TypeDecl: declname='group', quals=[] (at pp.c:1401)
            IdentifierType: names=['nx_am_group_t'] (at None)
        Decl: name='type', quals=[], storage=[] (at 0)
          TypeDecl: declname='type', quals=[] (at pp.c:1402)
            IdentifierType: names=['nx_am_id_t'] (at None)
  Typedef: name='serial_packet_t', quals=[], storage=['typedef'] (at pp.c:1412)
    TypeDecl: declname='serial_packet_t', quals=[] (at pp.c:1412)
      Struct: name='serial_packet', packed=False (at pp.c:1409)
        Decl: name='header', quals=[], storage=[] (at 0)
          TypeDecl: declname='header', quals=[] (at pp.c:1410)
            IdentifierType: names=['serial_header_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1411)
            TypeDecl: declname='data', quals=[] (at pp.c:1411)
              IdentifierType: names=['nx_uint8_t'] (at None)
  Typedef: name='serial_metadata_t', quals=[], storage=['typedef'] (at pp.c:1419)
    TypeDecl: declname='serial_metadata_t', quals=[] (at pp.c:1419)
      Struct: name='serial_metadata', packed=False (at pp.c:1417)
        Decl: name='ack', quals=[], storage=[] (at 0)
          TypeDecl: declname='ack', quals=[] (at pp.c:1418)
            IdentifierType: names=['nx_uint8_t'] (at None)
  Typedef: name='message_header_t', quals=[], storage=['typedef'] (at pp.c:1425)
    TypeDecl: declname='message_header_t', quals=[] (at pp.c:1425)
      Union: name='message_header', packed=False (at pp.c:1422)
        Decl: name='cc2420', quals=[], storage=[] (at 0)
          TypeDecl: declname='cc2420', quals=[] (at pp.c:1423)
            IdentifierType: names=['cc2420_header_t'] (at None)
        Decl: name='serial', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial', quals=[] (at pp.c:1424)
            IdentifierType: names=['serial_header_t'] (at None)
  Typedef: name='message_footer_t', quals=[], storage=['typedef'] (at pp.c:1432)
    TypeDecl: declname='message_footer_t', quals=[] (at pp.c:1432)
      Union: name='TOSRadioFooter', packed=False (at pp.c:1430)
        Decl: name='cc2420', quals=[], storage=[] (at 0)
          TypeDecl: declname='cc2420', quals=[] (at pp.c:1431)
            IdentifierType: names=['cc2420_footer_t'] (at None)
  Typedef: name='message_metadata_t', quals=[], storage=['typedef'] (at pp.c:1441)
    TypeDecl: declname='message_metadata_t', quals=[] (at pp.c:1441)
      Union: name='TOSRadioMetadata', packed=False (at pp.c:1438)
        Decl: name='cc2420', quals=[], storage=[] (at 0)
          TypeDecl: declname='cc2420', quals=[] (at pp.c:1439)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
        Decl: name='serial', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial', quals=[] (at pp.c:1440)
            IdentifierType: names=['serial_metadata_t'] (at None)
  Typedef: name='message_t', quals=[], storage=['typedef'] (at pp.c:1449)
    TypeDecl: declname='message_t', quals=[] (at pp.c:1449)
      Struct: name='message_t', packed=False (at pp.c:1444)
        Decl: name='header', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1445)
            TypeDecl: declname='header', quals=[] (at pp.c:1445)
              IdentifierType: names=['nx_uint8_t'] (at None)
            UnaryOp: op='sizeof' (at pp.c:1445)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['message_header_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1446)
            TypeDecl: declname='data', quals=[] (at pp.c:1446)
              IdentifierType: names=['nx_uint8_t'] (at None)
            Constant: type='int', value='28' (at pp.c:1446)
        Decl: name='footer', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1447)
            TypeDecl: declname='footer', quals=[] (at pp.c:1447)
              IdentifierType: names=['nx_uint8_t'] (at None)
            UnaryOp: op='sizeof' (at pp.c:1447)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['message_footer_t'] (at None)
        Decl: name='metadata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1448)
            TypeDecl: declname='metadata', quals=[] (at pp.c:1448)
              IdentifierType: names=['nx_uint8_t'] (at None)
            UnaryOp: op='sizeof' (at pp.c:1448)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['message_metadata_t'] (at None)
  Typedef: name='sensor_sample_t', quals=[], storage=['typedef'] (at pp.c:1455)
    TypeDecl: declname='sensor_sample_t', quals=[] (at pp.c:1455)
      Struct: name='sensor_sample', packed=False (at pp.c:1452)
        Decl: name='sample_num', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample_num', quals=[] (at pp.c:1453)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='sin_value', quals=[], storage=[] (at 0)
          TypeDecl: declname='sin_value', quals=[] (at pp.c:1454)
            IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='nx_sensor_sample_t', quals=[], storage=['typedef'] (at pp.c:1464)
    TypeDecl: declname='nx_sensor_sample_t', quals=[] (at pp.c:1464)
      Struct: name='nx_sensor_sample', packed=False (at pp.c:1461)
        Decl: name='sample_num', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample_num', quals=[] (at pp.c:1462)
            IdentifierType: names=['nx_uint32_t'] (at None)
        Decl: name='sin_value', quals=[], storage=[] (at 0)
          TypeDecl: declname='sin_value', quals=[] (at pp.c:1463)
            IdentifierType: names=['nx_uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1466)
    Enum: name='__nesc_unnamed4269' (at pp.c:1466)
      EnumeratorList:  (at pp.c:1467)
        Enumerator: name='AM_SERIAL_REQUEST_SAMPLES_MSG' (at pp.c:1467)
          Constant: type='int', value='0x92' (at pp.c:1467)
        Enumerator: name='AM_REQUEST_SAMPLES_MSG' (at pp.c:1468)
          Constant: type='int', value='0x93' (at pp.c:1468)
        Enumerator: name='AM_SAMPLE_MSG' (at pp.c:1470)
          Constant: type='int', value='0x98' (at pp.c:1470)
        Enumerator: name='AM_SERIAL_SAMPLE_MSG' (at pp.c:1471)
          Constant: type='int', value='0x99' (at pp.c:1471)
  Typedef: name='serial_request_samples_msg_t', quals=[], storage=['typedef'] (at pp.c:1481)
    TypeDecl: declname='serial_request_samples_msg_t', quals=[] (at pp.c:1481)
      Struct: name='serial_request_samples_msg', packed=False (at pp.c:1478)
        Decl: name='addr', quals=[], storage=[] (at 0)
          TypeDecl: declname='addr', quals=[] (at pp.c:1479)
            IdentifierType: names=['nx_am_addr_t'] (at None)
        Decl: name='sample_num', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample_num', quals=[] (at pp.c:1480)
            IdentifierType: names=['nx_uint32_t'] (at None)
  Typedef: name='request_samples_msg_t', quals=[], storage=['typedef'] (at pp.c:1486)
    TypeDecl: declname='request_samples_msg_t', quals=[] (at pp.c:1486)
      Struct: name='request_samples_msg', packed=False (at pp.c:1485)
  Typedef: name='sample_msg_t', quals=[], storage=['typedef'] (at pp.c:1493)
    TypeDecl: declname='sample_msg_t', quals=[] (at pp.c:1493)
      Struct: name='sample_msg', packed=False (at pp.c:1491)
        Decl: name='sample', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample', quals=[] (at pp.c:1492)
            IdentifierType: names=['nx_sensor_sample_t'] (at None)
  Typedef: name='serial_sample_msg_t', quals=[], storage=['typedef'] (at pp.c:1502)
    TypeDecl: declname='serial_sample_msg_t', quals=[] (at pp.c:1502)
      Struct: name='serial_sample_msg', packed=False (at pp.c:1499)
        Decl: name='src_addr', quals=[], storage=[] (at 0)
          TypeDecl: declname='src_addr', quals=[] (at pp.c:1500)
            IdentifierType: names=['nx_am_addr_t'] (at None)
        Decl: name='sample', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample', quals=[] (at pp.c:1501)
            IdentifierType: names=['nx_sensor_sample_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1504)
    Enum: name='__nesc_unnamed4270' (at pp.c:1504)
      EnumeratorList:  (at pp.c:1505)
        Enumerator: name='LPL_INTERVAL' (at pp.c:1505)
          Constant: type='int', value='2000' (at pp.c:1505)
        Enumerator: name='SAMPLING_INTERVAL' (at pp.c:1506)
          Constant: type='int', value='3000' (at pp.c:1506)
        Enumerator: name='MSG_QUEUE_SIZE' (at pp.c:1507)
          Constant: type='int', value='50' (at pp.c:1507)
        Enumerator: name='BASE_STATION_ADDR' (at pp.c:1508)
          Constant: type='int', value='0' (at pp.c:1508)
  Decl: name=None, quals=[], storage=[] (at pp.c:1511)
    Enum: name='__nesc_unnamed4271' (at pp.c:1511)
      EnumeratorList:  (at pp.c:1512)
        Enumerator: name='MSP430TIMER_CM_NONE' (at pp.c:1512)
          Constant: type='int', value='0' (at pp.c:1512)
        Enumerator: name='MSP430TIMER_CM_RISING' (at pp.c:1513)
          Constant: type='int', value='1' (at pp.c:1513)
        Enumerator: name='MSP430TIMER_CM_FALLING' (at pp.c:1514)
          Constant: type='int', value='2' (at pp.c:1514)
        Enumerator: name='MSP430TIMER_CM_BOTH' (at pp.c:1515)
          Constant: type='int', value='3' (at pp.c:1515)
        Enumerator: name='MSP430TIMER_STOP_MODE' (at pp.c:1517)
          Constant: type='int', value='0' (at pp.c:1517)
        Enumerator: name='MSP430TIMER_UP_MODE' (at pp.c:1518)
          Constant: type='int', value='1' (at pp.c:1518)
        Enumerator: name='MSP430TIMER_CONTINUOUS_MODE' (at pp.c:1519)
          Constant: type='int', value='2' (at pp.c:1519)
        Enumerator: name='MSP430TIMER_UPDOWN_MODE' (at pp.c:1520)
          Constant: type='int', value='3' (at pp.c:1520)
        Enumerator: name='MSP430TIMER_TACLK' (at pp.c:1522)
          Constant: type='int', value='0' (at pp.c:1522)
        Enumerator: name='MSP430TIMER_TBCLK' (at pp.c:1523)
          Constant: type='int', value='0' (at pp.c:1523)
        Enumerator: name='MSP430TIMER_ACLK' (at pp.c:1524)
          Constant: type='int', value='1' (at pp.c:1524)
        Enumerator: name='MSP430TIMER_SMCLK' (at pp.c:1525)
          Constant: type='int', value='2' (at pp.c:1525)
        Enumerator: name='MSP430TIMER_INCLK' (at pp.c:1526)
          Constant: type='int', value='3' (at pp.c:1526)
        Enumerator: name='MSP430TIMER_CLOCKDIV_1' (at pp.c:1528)
          Constant: type='int', value='0' (at pp.c:1528)
        Enumerator: name='MSP430TIMER_CLOCKDIV_2' (at pp.c:1529)
          Constant: type='int', value='1' (at pp.c:1529)
        Enumerator: name='MSP430TIMER_CLOCKDIV_4' (at pp.c:1530)
          Constant: type='int', value='2' (at pp.c:1530)
        Enumerator: name='MSP430TIMER_CLOCKDIV_8' (at pp.c:1531)
          Constant: type='int', value='3' (at pp.c:1531)
  Typedef: name='msp430_compare_control_t', quals=[], storage=['typedef'] (at pp.c:1548)
    TypeDecl: declname='msp430_compare_control_t', quals=[] (at pp.c:1548)
      Struct: name='__nesc_unnamed4272', packed=False (at pp.c:1535)
        Decl: name='ccifg', quals=[], storage=[] (at 0)
          TypeDecl: declname='ccifg', quals=[] (at pp.c:1537)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1537)
        Decl: name='cov', quals=[], storage=[] (at 0)
          TypeDecl: declname='cov', quals=[] (at pp.c:1538)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1538)
        Decl: name='out', quals=[], storage=[] (at 0)
          TypeDecl: declname='out', quals=[] (at pp.c:1539)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1539)
        Decl: name='cci', quals=[], storage=[] (at 0)
          TypeDecl: declname='cci', quals=[] (at pp.c:1540)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1540)
        Decl: name='ccie', quals=[], storage=[] (at 0)
          TypeDecl: declname='ccie', quals=[] (at pp.c:1541)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1541)
        Decl: name='outmod', quals=[], storage=[] (at 0)
          TypeDecl: declname='outmod', quals=[] (at pp.c:1542)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='3' (at pp.c:1542)
        Decl: name='cap', quals=[], storage=[] (at 0)
          TypeDecl: declname='cap', quals=[] (at pp.c:1543)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1543)
        Decl: name='clld', quals=[], storage=[] (at 0)
          TypeDecl: declname='clld', quals=[] (at pp.c:1544)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1544)
        Decl: name='scs', quals=[], storage=[] (at 0)
          TypeDecl: declname='scs', quals=[] (at pp.c:1545)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1545)
        Decl: name='ccis', quals=[], storage=[] (at 0)
          TypeDecl: declname='ccis', quals=[] (at pp.c:1546)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1546)
        Decl: name='cm', quals=[], storage=[] (at 0)
          TypeDecl: declname='cm', quals=[] (at pp.c:1547)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1547)
  Typedef: name='msp430_timer_a_control_t', quals=[], storage=['typedef'] (at pp.c:1561)
    TypeDecl: declname='msp430_timer_a_control_t', quals=[] (at pp.c:1561)
      Struct: name='__nesc_unnamed4273', packed=False (at pp.c:1551)
        Decl: name='taifg', quals=[], storage=[] (at 0)
          TypeDecl: declname='taifg', quals=[] (at pp.c:1553)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1553)
        Decl: name='taie', quals=[], storage=[] (at 0)
          TypeDecl: declname='taie', quals=[] (at pp.c:1554)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1554)
        Decl: name='taclr', quals=[], storage=[] (at 0)
          TypeDecl: declname='taclr', quals=[] (at pp.c:1555)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1555)
        Decl: name='_unused0', quals=[], storage=[] (at 0)
          TypeDecl: declname='_unused0', quals=[] (at pp.c:1556)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1556)
        Decl: name='mc', quals=[], storage=[] (at 0)
          TypeDecl: declname='mc', quals=[] (at pp.c:1557)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1557)
        Decl: name='id', quals=[], storage=[] (at 0)
          TypeDecl: declname='id', quals=[] (at pp.c:1558)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1558)
        Decl: name='tassel', quals=[], storage=[] (at 0)
          TypeDecl: declname='tassel', quals=[] (at pp.c:1559)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1559)
        Decl: name='_unused1', quals=[], storage=[] (at 0)
          TypeDecl: declname='_unused1', quals=[] (at pp.c:1560)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='6' (at pp.c:1560)
  Typedef: name='msp430_timer_b_control_t', quals=[], storage=['typedef'] (at pp.c:1577)
    TypeDecl: declname='msp430_timer_b_control_t', quals=[] (at pp.c:1577)
      Struct: name='__nesc_unnamed4274', packed=False (at pp.c:1564)
        Decl: name='tbifg', quals=[], storage=[] (at 0)
          TypeDecl: declname='tbifg', quals=[] (at pp.c:1566)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1566)
        Decl: name='tbie', quals=[], storage=[] (at 0)
          TypeDecl: declname='tbie', quals=[] (at pp.c:1567)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1567)
        Decl: name='tbclr', quals=[], storage=[] (at 0)
          TypeDecl: declname='tbclr', quals=[] (at pp.c:1568)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1568)
        Decl: name='_unused0', quals=[], storage=[] (at 0)
          TypeDecl: declname='_unused0', quals=[] (at pp.c:1569)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1569)
        Decl: name='mc', quals=[], storage=[] (at 0)
          TypeDecl: declname='mc', quals=[] (at pp.c:1570)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1570)
        Decl: name='id', quals=[], storage=[] (at 0)
          TypeDecl: declname='id', quals=[] (at pp.c:1571)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1571)
        Decl: name='tbssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='tbssel', quals=[] (at pp.c:1572)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1572)
        Decl: name='_unused1', quals=[], storage=[] (at 0)
          TypeDecl: declname='_unused1', quals=[] (at pp.c:1573)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1573)
        Decl: name='cntl', quals=[], storage=[] (at 0)
          TypeDecl: declname='cntl', quals=[] (at pp.c:1574)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1574)
        Decl: name='tbclgrp', quals=[], storage=[] (at 0)
          TypeDecl: declname='tbclgrp', quals=[] (at pp.c:1575)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1575)
        Decl: name='_unused2', quals=[], storage=[] (at 0)
          TypeDecl: declname='_unused2', quals=[] (at pp.c:1576)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1576)
  Decl: name=None, quals=[], storage=[] (at pp.c:1579)
    Enum: name='__nesc_unnamed4275' (at pp.c:1579)
      EnumeratorList:  (at pp.c:1580)
        Enumerator: name='LEDS_LED0' (at pp.c:1580)
          BinaryOp: op='<<' (at pp.c:1580)
            Constant: type='int', value='1' (at pp.c:1580)
            Constant: type='int', value='0' (at pp.c:1580)
        Enumerator: name='LEDS_LED1' (at pp.c:1581)
          BinaryOp: op='<<' (at pp.c:1581)
            Constant: type='int', value='1' (at pp.c:1581)
            Constant: type='int', value='1' (at pp.c:1581)
        Enumerator: name='LEDS_LED2' (at pp.c:1582)
          BinaryOp: op='<<' (at pp.c:1582)
            Constant: type='int', value='1' (at pp.c:1582)
            Constant: type='int', value='2' (at pp.c:1582)
        Enumerator: name='LEDS_LED3' (at pp.c:1583)
          BinaryOp: op='<<' (at pp.c:1583)
            Constant: type='int', value='1' (at pp.c:1583)
            Constant: type='int', value='3' (at pp.c:1583)
        Enumerator: name='LEDS_LED4' (at pp.c:1584)
          BinaryOp: op='<<' (at pp.c:1584)
            Constant: type='int', value='1' (at pp.c:1584)
            Constant: type='int', value='4' (at pp.c:1584)
        Enumerator: name='LEDS_LED5' (at pp.c:1585)
          BinaryOp: op='<<' (at pp.c:1585)
            Constant: type='int', value='1' (at pp.c:1585)
            Constant: type='int', value='5' (at pp.c:1585)
        Enumerator: name='LEDS_LED6' (at pp.c:1586)
          BinaryOp: op='<<' (at pp.c:1586)
            Constant: type='int', value='1' (at pp.c:1586)
            Constant: type='int', value='6' (at pp.c:1586)
        Enumerator: name='LEDS_LED7' (at pp.c:1587)
          BinaryOp: op='<<' (at pp.c:1587)
            Constant: type='int', value='1' (at pp.c:1587)
            Constant: type='int', value='7' (at pp.c:1587)
  Decl: name='crcByte', quals=[], storage=['static'] (at pp.c:1590)
    FuncDecl: quals=None (at pp.c:1590)
      ParamList:  (at pp.c:1590)
        Decl: name='crc', quals=[], storage=[] (at pp.c:1590)
          TypeDecl: declname='crc', quals=[] (at pp.c:1590)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='b', quals=[], storage=[] (at pp.c:1590)
          TypeDecl: declname='b', quals=[] (at pp.c:1590)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='crcByte', quals=[] (at pp.c:1590)
        IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='msp430_usartmode_t', quals=[], storage=['typedef'] (at pp.c:1601)
    TypeDecl: declname='msp430_usartmode_t', quals=[] (at pp.c:1601)
      Enum: name='__nesc_unnamed4276' (at pp.c:1593)
        EnumeratorList:  (at pp.c:1595)
          Enumerator: name='USART_NONE' (at pp.c:1595)
            Constant: type='int', value='0' (at pp.c:1595)
          Enumerator: name='USART_UART' (at pp.c:1596)
            Constant: type='int', value='1' (at pp.c:1596)
          Enumerator: name='USART_UART_TX' (at pp.c:1597)
            Constant: type='int', value='2' (at pp.c:1597)
          Enumerator: name='USART_UART_RX' (at pp.c:1598)
            Constant: type='int', value='3' (at pp.c:1598)
          Enumerator: name='USART_SPI' (at pp.c:1599)
            Constant: type='int', value='4' (at pp.c:1599)
          Enumerator: name='USART_I2C' (at pp.c:1600)
            Constant: type='int', value='5' (at pp.c:1600)
  Typedef: name='msp430_uctl_t', quals=[], storage=['typedef'] (at pp.c:1622)
    TypeDecl: declname='msp430_uctl_t', quals=[] (at pp.c:1622)
      Struct: name='__nesc_unnamed4277', packed=True (at pp.c:1613)
        Decl: name='swrst', quals=[], storage=[] (at 0)
          TypeDecl: declname='swrst', quals=[] (at pp.c:1614)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1614)
        Decl: name='mm', quals=[], storage=[] (at 0)
          TypeDecl: declname='mm', quals=[] (at pp.c:1615)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1615)
        Decl: name='sync', quals=[], storage=[] (at 0)
          TypeDecl: declname='sync', quals=[] (at pp.c:1616)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1616)
        Decl: name='listen', quals=[], storage=[] (at 0)
          TypeDecl: declname='listen', quals=[] (at pp.c:1617)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1617)
        Decl: name='clen', quals=[], storage=[] (at 0)
          TypeDecl: declname='clen', quals=[] (at pp.c:1618)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1618)
        Decl: name='spb', quals=[], storage=[] (at 0)
          TypeDecl: declname='spb', quals=[] (at pp.c:1619)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1619)
        Decl: name='pev', quals=[], storage=[] (at 0)
          TypeDecl: declname='pev', quals=[] (at pp.c:1620)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1620)
        Decl: name='pena', quals=[], storage=[] (at 0)
          TypeDecl: declname='pena', quals=[] (at pp.c:1621)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1621)
  Typedef: name='msp430_utctl_t', quals=[], storage=['typedef'] (at pp.c:1641)
    TypeDecl: declname='msp430_utctl_t', quals=[] (at pp.c:1641)
      Struct: name='__nesc_unnamed4278', packed=True (at pp.c:1633)
        Decl: name='txept', quals=[], storage=[] (at 0)
          TypeDecl: declname='txept', quals=[] (at pp.c:1634)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1634)
        Decl: name='stc', quals=[], storage=[] (at 0)
          TypeDecl: declname='stc', quals=[] (at pp.c:1635)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1635)
        Decl: name='txwake', quals=[], storage=[] (at 0)
          TypeDecl: declname='txwake', quals=[] (at pp.c:1636)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1636)
        Decl: name='urxse', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxse', quals=[] (at pp.c:1637)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1637)
        Decl: name='ssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='ssel', quals=[] (at pp.c:1638)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1638)
        Decl: name='ckpl', quals=[], storage=[] (at 0)
          TypeDecl: declname='ckpl', quals=[] (at pp.c:1639)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1639)
        Decl: name='ckph', quals=[], storage=[] (at 0)
          TypeDecl: declname='ckph', quals=[] (at pp.c:1640)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1640)
  Typedef: name='msp430_urctl_t', quals=[], storage=['typedef'] (at pp.c:1662)
    TypeDecl: declname='msp430_urctl_t', quals=[] (at pp.c:1662)
      Struct: name='__nesc_unnamed4279', packed=True (at pp.c:1653)
        Decl: name='rxerr', quals=[], storage=[] (at 0)
          TypeDecl: declname='rxerr', quals=[] (at pp.c:1654)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1654)
        Decl: name='rxwake', quals=[], storage=[] (at 0)
          TypeDecl: declname='rxwake', quals=[] (at pp.c:1655)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1655)
        Decl: name='urxwie', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxwie', quals=[] (at pp.c:1656)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1656)
        Decl: name='urxeie', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxeie', quals=[] (at pp.c:1657)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1657)
        Decl: name='brk', quals=[], storage=[] (at 0)
          TypeDecl: declname='brk', quals=[] (at pp.c:1658)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1658)
        Decl: name='oe', quals=[], storage=[] (at 0)
          TypeDecl: declname='oe', quals=[] (at pp.c:1659)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1659)
        Decl: name='pe', quals=[], storage=[] (at 0)
          TypeDecl: declname='pe', quals=[] (at pp.c:1660)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1660)
        Decl: name='fe', quals=[], storage=[] (at 0)
          TypeDecl: declname='fe', quals=[] (at pp.c:1661)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1661)
  Typedef: name='msp430_spi_config_t', quals=[], storage=['typedef'] (at pp.c:1682)
    TypeDecl: declname='msp430_spi_config_t', quals=[] (at pp.c:1682)
      Struct: name='__nesc_unnamed4280', packed=False (at pp.c:1665)
        Decl: name='ubr', quals=[], storage=[] (at 0)
          TypeDecl: declname='ubr', quals=[] (at pp.c:1666)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='16' (at pp.c:1666)
        Decl: name='xwasu', quals=[], storage=[] (at 0)
          TypeDecl: declname='xwasu', quals=[] (at pp.c:1668)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1668)
        Decl: name='mm', quals=[], storage=[] (at 0)
          TypeDecl: declname='mm', quals=[] (at pp.c:1669)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1669)
        Decl: name='udcef', quals=[], storage=[] (at 0)
          TypeDecl: declname='udcef', quals=[] (at pp.c:1670)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1670)
        Decl: name='listen', quals=[], storage=[] (at 0)
          TypeDecl: declname='listen', quals=[] (at pp.c:1671)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1671)
        Decl: name='clen', quals=[], storage=[] (at 0)
          TypeDecl: declname='clen', quals=[] (at pp.c:1672)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1672)
        Decl: name='rreqy', quals=[], storage=[] (at 0)
          TypeDecl: declname='rreqy', quals=[] (at pp.c:1673)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:1673)
        Decl: name='qzmrr', quals=[], storage=[] (at 0)
          TypeDecl: declname='qzmrr', quals=[] (at pp.c:1675)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1675)
        Decl: name='stc', quals=[], storage=[] (at 0)
          TypeDecl: declname='stc', quals=[] (at pp.c:1676)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1676)
        Decl: name='tcsox', quals=[], storage=[] (at 0)
          TypeDecl: declname='tcsox', quals=[] (at pp.c:1677)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1677)
        Decl: name='ssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='ssel', quals=[] (at pp.c:1678)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1678)
        Decl: name='ckpl', quals=[], storage=[] (at 0)
          TypeDecl: declname='ckpl', quals=[] (at pp.c:1679)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1679)
        Decl: name='ckph', quals=[], storage=[] (at 0)
          TypeDecl: declname='ckph', quals=[] (at pp.c:1680)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1680)
        Decl: name='iumuv', quals=[], storage=[] (at 0)
          TypeDecl: declname='iumuv', quals=[] (at pp.c:1681)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='0' (at pp.c:1681)
  Typedef: name='msp430_spi_registers_t', quals=[], storage=['typedef'] (at pp.c:1693)
    TypeDecl: declname='msp430_spi_registers_t', quals=[] (at pp.c:1693)
      Struct: name='__nesc_unnamed4281', packed=False (at pp.c:1689)
        Decl: name='ubr', quals=[], storage=[] (at 0)
          TypeDecl: declname='ubr', quals=[] (at pp.c:1690)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='uctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='uctl', quals=[] (at pp.c:1691)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='utctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='utctl', quals=[] (at pp.c:1692)
            IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='msp430_spi_union_config_t', quals=[], storage=['typedef'] (at pp.c:1702)
    TypeDecl: declname='msp430_spi_union_config_t', quals=[] (at pp.c:1702)
      Union: name='__nesc_unnamed4282', packed=False (at pp.c:1699)
        Decl: name='spiConfig', quals=[], storage=[] (at 0)
          TypeDecl: declname='spiConfig', quals=[] (at pp.c:1700)
            IdentifierType: names=['msp430_spi_config_t'] (at None)
        Decl: name='spiRegisters', quals=[], storage=[] (at 0)
          TypeDecl: declname='spiRegisters', quals=[] (at pp.c:1701)
            IdentifierType: names=['msp430_spi_registers_t'] (at None)
  Decl: name='msp430_spi_default_config', quals=[], storage=[] (at pp.c:1704)
    TypeDecl: declname='msp430_spi_default_config', quals=[] (at pp.c:1704)
      IdentifierType: names=['msp430_spi_union_config_t'] (at None)
    ExprList:  (at pp.c:1706)
      ExprList:  (at pp.c:1706)
        Assignment: op='=' (at pp.c:1706)
          StructRef: type='.' (at pp.c:1706)
            ID: name='ubr' (at pp.c:1706)
          Constant: type='int', value='0x0002' (at pp.c:1706)
        Assignment: op='=' (at pp.c:1707)
          StructRef: type='.' (at pp.c:1707)
            ID: name='ssel' (at pp.c:1707)
          Constant: type='int', value='0x02' (at pp.c:1707)
        Assignment: op='=' (at pp.c:1708)
          StructRef: type='.' (at pp.c:1708)
            ID: name='clen' (at pp.c:1708)
          Constant: type='int', value='1' (at pp.c:1708)
        Assignment: op='=' (at pp.c:1709)
          StructRef: type='.' (at pp.c:1709)
            ID: name='listen' (at pp.c:1709)
          Constant: type='int', value='0' (at pp.c:1709)
        Assignment: op='=' (at pp.c:1710)
          StructRef: type='.' (at pp.c:1710)
            ID: name='mm' (at pp.c:1710)
          Constant: type='int', value='1' (at pp.c:1710)
        Assignment: op='=' (at pp.c:1711)
          StructRef: type='.' (at pp.c:1711)
            ID: name='ckph' (at pp.c:1711)
          Constant: type='int', value='1' (at pp.c:1711)
        Assignment: op='=' (at pp.c:1712)
          StructRef: type='.' (at pp.c:1712)
            ID: name='ckpl' (at pp.c:1712)
          Constant: type='int', value='0' (at pp.c:1712)
        Assignment: op='=' (at pp.c:1713)
          StructRef: type='.' (at pp.c:1713)
            ID: name='stc' (at pp.c:1713)
          Constant: type='int', value='1' (at pp.c:1713)
  Typedef: name='msp430_uart_rate_t', quals=[], storage=['typedef'] (at pp.c:1735)
    TypeDecl: declname='msp430_uart_rate_t', quals=[] (at pp.c:1735)
      Enum: name='__nesc_unnamed4283' (at pp.c:1716)
        EnumeratorList:  (at pp.c:1718)
          Enumerator: name='UBR_32KHZ_1200' (at pp.c:1718)
            Constant: type='int', value='0x001B' (at pp.c:1718)
          Enumerator: name='UMCTL_32KHZ_1200' (at pp.c:1718)
            Constant: type='int', value='0x94' (at pp.c:1718)
          Enumerator: name='UBR_32KHZ_1800' (at pp.c:1719)
            Constant: type='int', value='0x0012' (at pp.c:1719)
          Enumerator: name='UMCTL_32KHZ_1800' (at pp.c:1719)
            Constant: type='int', value='0x84' (at pp.c:1719)
          Enumerator: name='UBR_32KHZ_2400' (at pp.c:1720)
            Constant: type='int', value='0x000D' (at pp.c:1720)
          Enumerator: name='UMCTL_32KHZ_2400' (at pp.c:1720)
            Constant: type='int', value='0x6D' (at pp.c:1720)
          Enumerator: name='UBR_32KHZ_4800' (at pp.c:1721)
            Constant: type='int', value='0x0006' (at pp.c:1721)
          Enumerator: name='UMCTL_32KHZ_4800' (at pp.c:1721)
            Constant: type='int', value='0x77' (at pp.c:1721)
          Enumerator: name='UBR_32KHZ_9600' (at pp.c:1722)
            Constant: type='int', value='0x0003' (at pp.c:1722)
          Enumerator: name='UMCTL_32KHZ_9600' (at pp.c:1722)
            Constant: type='int', value='0x29' (at pp.c:1722)
          Enumerator: name='UBR_1MHZ_1200' (at pp.c:1724)
            Constant: type='int', value='0x0369' (at pp.c:1724)
          Enumerator: name='UMCTL_1MHZ_1200' (at pp.c:1724)
            Constant: type='int', value='0x7B' (at pp.c:1724)
          Enumerator: name='UBR_1MHZ_1800' (at pp.c:1725)
            Constant: type='int', value='0x0246' (at pp.c:1725)
          Enumerator: name='UMCTL_1MHZ_1800' (at pp.c:1725)
            Constant: type='int', value='0x55' (at pp.c:1725)
          Enumerator: name='UBR_1MHZ_2400' (at pp.c:1726)
            Constant: type='int', value='0x01B4' (at pp.c:1726)
          Enumerator: name='UMCTL_1MHZ_2400' (at pp.c:1726)
            Constant: type='int', value='0xDF' (at pp.c:1726)
          Enumerator: name='UBR_1MHZ_4800' (at pp.c:1727)
            Constant: type='int', value='0x00DA' (at pp.c:1727)
          Enumerator: name='UMCTL_1MHZ_4800' (at pp.c:1727)
            Constant: type='int', value='0xAA' (at pp.c:1727)
          Enumerator: name='UBR_1MHZ_9600' (at pp.c:1728)
            Constant: type='int', value='0x006D' (at pp.c:1728)
          Enumerator: name='UMCTL_1MHZ_9600' (at pp.c:1728)
            Constant: type='int', value='0x44' (at pp.c:1728)
          Enumerator: name='UBR_1MHZ_19200' (at pp.c:1729)
            Constant: type='int', value='0x0036' (at pp.c:1729)
          Enumerator: name='UMCTL_1MHZ_19200' (at pp.c:1729)
            Constant: type='int', value='0xB5' (at pp.c:1729)
          Enumerator: name='UBR_1MHZ_38400' (at pp.c:1730)
            Constant: type='int', value='0x001B' (at pp.c:1730)
          Enumerator: name='UMCTL_1MHZ_38400' (at pp.c:1730)
            Constant: type='int', value='0x94' (at pp.c:1730)
          Enumerator: name='UBR_1MHZ_57600' (at pp.c:1731)
            Constant: type='int', value='0x0012' (at pp.c:1731)
          Enumerator: name='UMCTL_1MHZ_57600' (at pp.c:1731)
            Constant: type='int', value='0x84' (at pp.c:1731)
          Enumerator: name='UBR_1MHZ_76800' (at pp.c:1732)
            Constant: type='int', value='0x000D' (at pp.c:1732)
          Enumerator: name='UMCTL_1MHZ_76800' (at pp.c:1732)
            Constant: type='int', value='0x6D' (at pp.c:1732)
          Enumerator: name='UBR_1MHZ_115200' (at pp.c:1733)
            Constant: type='int', value='0x0009' (at pp.c:1733)
          Enumerator: name='UMCTL_1MHZ_115200' (at pp.c:1733)
            Constant: type='int', value='0x10' (at pp.c:1733)
          Enumerator: name='UBR_1MHZ_230400' (at pp.c:1734)
            Constant: type='int', value='0x0004' (at pp.c:1734)
          Enumerator: name='UMCTL_1MHZ_230400' (at pp.c:1734)
            Constant: type='int', value='0x55' (at pp.c:1734)
  Typedef: name='msp430_uart_config_t', quals=[], storage=['typedef'] (at pp.c:1767)
    TypeDecl: declname='msp430_uart_config_t', quals=[] (at pp.c:1767)
      Struct: name='__nesc_unnamed4284', packed=False (at pp.c:1738)
        Decl: name='ubr', quals=[], storage=[] (at 0)
          TypeDecl: declname='ubr', quals=[] (at pp.c:1739)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='16' (at pp.c:1739)
        Decl: name='umctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='umctl', quals=[] (at pp.c:1741)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='8' (at pp.c:1741)
        Decl: name='axlwe', quals=[], storage=[] (at 0)
          TypeDecl: declname='axlwe', quals=[] (at pp.c:1743)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1743)
        Decl: name='mm', quals=[], storage=[] (at 0)
          TypeDecl: declname='mm', quals=[] (at pp.c:1744)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1744)
        Decl: name='wmvxd', quals=[], storage=[] (at 0)
          TypeDecl: declname='wmvxd', quals=[] (at pp.c:1745)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1745)
        Decl: name='listen', quals=[], storage=[] (at 0)
          TypeDecl: declname='listen', quals=[] (at pp.c:1746)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1746)
        Decl: name='clen', quals=[], storage=[] (at 0)
          TypeDecl: declname='clen', quals=[] (at pp.c:1747)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1747)
        Decl: name='spb', quals=[], storage=[] (at 0)
          TypeDecl: declname='spb', quals=[] (at pp.c:1748)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1748)
        Decl: name='pev', quals=[], storage=[] (at 0)
          TypeDecl: declname='pev', quals=[] (at pp.c:1749)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1749)
        Decl: name='pena', quals=[], storage=[] (at 0)
          TypeDecl: declname='pena', quals=[] (at pp.c:1750)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1750)
        Decl: name='tflid', quals=[], storage=[] (at 0)
          TypeDecl: declname='tflid', quals=[] (at pp.c:1751)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='0' (at pp.c:1751)
        Decl: name='edbho', quals=[], storage=[] (at 0)
          TypeDecl: declname='edbho', quals=[] (at pp.c:1753)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:1753)
        Decl: name='urxse', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxse', quals=[] (at pp.c:1754)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1754)
        Decl: name='ssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='ssel', quals=[] (at pp.c:1755)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1755)
        Decl: name='ckpl', quals=[], storage=[] (at 0)
          TypeDecl: declname='ckpl', quals=[] (at pp.c:1756)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1756)
        Decl: name='dweup', quals=[], storage=[] (at 0)
          TypeDecl: declname='dweup', quals=[] (at pp.c:1757)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1757)
        Decl: name='tleax', quals=[], storage=[] (at 0)
          TypeDecl: declname='tleax', quals=[] (at pp.c:1759)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1759)
        Decl: name='urxwie', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxwie', quals=[] (at pp.c:1760)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1760)
        Decl: name='urxeie', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxeie', quals=[] (at pp.c:1761)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1761)
        Decl: name='edwaj', quals=[], storage=[] (at 0)
          TypeDecl: declname='edwaj', quals=[] (at pp.c:1762)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:1762)
        Decl: name='phxwu', quals=[], storage=[] (at 0)
          TypeDecl: declname='phxwu', quals=[] (at pp.c:1763)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='0' (at pp.c:1763)
        Decl: name='utxe', quals=[], storage=[] (at 0)
          TypeDecl: declname='utxe', quals=[] (at pp.c:1765)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1765)
        Decl: name='urxe', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxe', quals=[] (at pp.c:1766)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1766)
  Typedef: name='msp430_uart_registers_t', quals=[], storage=['typedef'] (at pp.c:1784)
    TypeDecl: declname='msp430_uart_registers_t', quals=[] (at pp.c:1784)
      Struct: name='__nesc_unnamed4285', packed=False (at pp.c:1777)
        Decl: name='ubr', quals=[], storage=[] (at 0)
          TypeDecl: declname='ubr', quals=[] (at pp.c:1778)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='umctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='umctl', quals=[] (at pp.c:1779)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='uctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='uctl', quals=[] (at pp.c:1780)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='utctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='utctl', quals=[] (at pp.c:1781)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='urctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='urctl', quals=[] (at pp.c:1782)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='ume', quals=[], storage=[] (at 0)
          TypeDecl: declname='ume', quals=[] (at pp.c:1783)
            IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='msp430_uart_union_config_t', quals=[], storage=['typedef'] (at pp.c:1793)
    TypeDecl: declname='msp430_uart_union_config_t', quals=[] (at pp.c:1793)
      Union: name='__nesc_unnamed4286', packed=False (at pp.c:1790)
        Decl: name='uartConfig', quals=[], storage=[] (at 0)
          TypeDecl: declname='uartConfig', quals=[] (at pp.c:1791)
            IdentifierType: names=['msp430_uart_config_t'] (at None)
        Decl: name='uartRegisters', quals=[], storage=[] (at 0)
          TypeDecl: declname='uartRegisters', quals=[] (at pp.c:1792)
            IdentifierType: names=['msp430_uart_registers_t'] (at None)
  Decl: name='msp430_uart_default_config', quals=[], storage=[] (at pp.c:1795)
    TypeDecl: declname='msp430_uart_default_config', quals=[] (at pp.c:1795)
      IdentifierType: names=['msp430_uart_union_config_t'] (at None)
    ExprList:  (at pp.c:1797)
      ExprList:  (at pp.c:1797)
        Assignment: op='=' (at pp.c:1797)
          StructRef: type='.' (at pp.c:1797)
            ID: name='utxe' (at pp.c:1797)
          Constant: type='int', value='1' (at pp.c:1797)
        Assignment: op='=' (at pp.c:1798)
          StructRef: type='.' (at pp.c:1798)
            ID: name='urxe' (at pp.c:1798)
          Constant: type='int', value='1' (at pp.c:1798)
        Assignment: op='=' (at pp.c:1799)
          StructRef: type='.' (at pp.c:1799)
            ID: name='ubr' (at pp.c:1799)
          ID: name='UBR_1MHZ_57600' (at pp.c:1799)
        Assignment: op='=' (at pp.c:1800)
          StructRef: type='.' (at pp.c:1800)
            ID: name='umctl' (at pp.c:1800)
          ID: name='UMCTL_1MHZ_57600' (at pp.c:1800)
        Assignment: op='=' (at pp.c:1801)
          StructRef: type='.' (at pp.c:1801)
            ID: name='ssel' (at pp.c:1801)
          Constant: type='int', value='0x02' (at pp.c:1801)
        Assignment: op='=' (at pp.c:1802)
          StructRef: type='.' (at pp.c:1802)
            ID: name='pena' (at pp.c:1802)
          Constant: type='int', value='0' (at pp.c:1802)
        Assignment: op='=' (at pp.c:1803)
          StructRef: type='.' (at pp.c:1803)
            ID: name='pev' (at pp.c:1803)
          Constant: type='int', value='0' (at pp.c:1803)
        Assignment: op='=' (at pp.c:1804)
          StructRef: type='.' (at pp.c:1804)
            ID: name='spb' (at pp.c:1804)
          Constant: type='int', value='0' (at pp.c:1804)
        Assignment: op='=' (at pp.c:1805)
          StructRef: type='.' (at pp.c:1805)
            ID: name='clen' (at pp.c:1805)
          Constant: type='int', value='1' (at pp.c:1805)
        Assignment: op='=' (at pp.c:1806)
          StructRef: type='.' (at pp.c:1806)
            ID: name='listen' (at pp.c:1806)
          Constant: type='int', value='0' (at pp.c:1806)
        Assignment: op='=' (at pp.c:1807)
          StructRef: type='.' (at pp.c:1807)
            ID: name='mm' (at pp.c:1807)
          Constant: type='int', value='0' (at pp.c:1807)
        Assignment: op='=' (at pp.c:1808)
          StructRef: type='.' (at pp.c:1808)
            ID: name='ckpl' (at pp.c:1808)
          Constant: type='int', value='0' (at pp.c:1808)
        Assignment: op='=' (at pp.c:1809)
          StructRef: type='.' (at pp.c:1809)
            ID: name='urxse' (at pp.c:1809)
          Constant: type='int', value='0' (at pp.c:1809)
        Assignment: op='=' (at pp.c:1810)
          StructRef: type='.' (at pp.c:1810)
            ID: name='urxeie' (at pp.c:1810)
          Constant: type='int', value='1' (at pp.c:1810)
        Assignment: op='=' (at pp.c:1811)
          StructRef: type='.' (at pp.c:1811)
            ID: name='urxwie' (at pp.c:1811)
          Constant: type='int', value='0' (at pp.c:1811)
        Assignment: op='=' (at pp.c:1812)
          StructRef: type='.' (at pp.c:1812)
            ID: name='utxe' (at pp.c:1812)
          Constant: type='int', value='1' (at pp.c:1812)
        Assignment: op='=' (at pp.c:1813)
          StructRef: type='.' (at pp.c:1813)
            ID: name='urxe' (at pp.c:1813)
          Constant: type='int', value='1' (at pp.c:1813)
  Typedef: name='msp430_i2ctctl_t', quals=[], storage=['typedef'] (at pp.c:1824)
    TypeDecl: declname='msp430_i2ctctl_t', quals=[] (at pp.c:1824)
      Struct: name='__nesc_unnamed4287', packed=True (at pp.c:1816)
        Decl: name='i2cstt', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cstt', quals=[] (at pp.c:1817)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1817)
        Decl: name='i2cstp', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cstp', quals=[] (at pp.c:1818)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1818)
        Decl: name='i2cstb', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cstb', quals=[] (at pp.c:1819)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1819)
        Decl: name='i2cctrx', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cctrx', quals=[] (at pp.c:1820)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1820)
        Decl: name='i2cssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cssel', quals=[] (at pp.c:1821)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1821)
        Decl: name='i2ccrm', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2ccrm', quals=[] (at pp.c:1822)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1822)
        Decl: name='i2cword', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cword', quals=[] (at pp.c:1823)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1823)
  Typedef: name='msp430_i2c_config_t', quals=[], storage=['typedef'] (at pp.c:1850)
    TypeDecl: declname='msp430_i2c_config_t', quals=[] (at pp.c:1850)
      Struct: name='__nesc_unnamed4288', packed=False (at pp.c:1827)
        Decl: name='xngmy', quals=[], storage=[] (at 0)
          TypeDecl: declname='xngmy', quals=[] (at pp.c:1828)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1828)
        Decl: name='mst', quals=[], storage=[] (at 0)
          TypeDecl: declname='mst', quals=[] (at pp.c:1829)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1829)
        Decl: name='mjpvi', quals=[], storage=[] (at 0)
          TypeDecl: declname='mjpvi', quals=[] (at pp.c:1830)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1830)
        Decl: name='listen', quals=[], storage=[] (at 0)
          TypeDecl: declname='listen', quals=[] (at pp.c:1831)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1831)
        Decl: name='xa', quals=[], storage=[] (at 0)
          TypeDecl: declname='xa', quals=[] (at pp.c:1832)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1832)
        Decl: name='aaslo', quals=[], storage=[] (at 0)
          TypeDecl: declname='aaslo', quals=[] (at pp.c:1833)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1833)
        Decl: name='txdmaen', quals=[], storage=[] (at 0)
          TypeDecl: declname='txdmaen', quals=[] (at pp.c:1834)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1834)
        Decl: name='rxdmaen', quals=[], storage=[] (at 0)
          TypeDecl: declname='rxdmaen', quals=[] (at pp.c:1835)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1835)
        Decl: name='uflim', quals=[], storage=[] (at 0)
          TypeDecl: declname='uflim', quals=[] (at pp.c:1837)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:1837)
        Decl: name='i2cssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cssel', quals=[] (at pp.c:1838)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1838)
        Decl: name='i2crm', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2crm', quals=[] (at pp.c:1839)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1839)
        Decl: name='i2cword', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cword', quals=[] (at pp.c:1840)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1840)
        Decl: name='i2cpsc', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cpsc', quals=[] (at pp.c:1842)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='8' (at pp.c:1842)
        Decl: name='i2csclh', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2csclh', quals=[] (at pp.c:1844)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='8' (at pp.c:1844)
        Decl: name='i2cscll', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cscll', quals=[] (at pp.c:1846)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='8' (at pp.c:1846)
        Decl: name='i2coa', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2coa', quals=[] (at pp.c:1848)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='10' (at pp.c:1848)
        Decl: name='fmknu', quals=[], storage=[] (at 0)
          TypeDecl: declname='fmknu', quals=[] (at pp.c:1849)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='6' (at pp.c:1849)
  Typedef: name='msp430_i2c_registers_t', quals=[], storage=['typedef'] (at pp.c:1867)
    TypeDecl: declname='msp430_i2c_registers_t', quals=[] (at pp.c:1867)
      Struct: name='__nesc_unnamed4289', packed=False (at pp.c:1860)
        Decl: name='uctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='uctl', quals=[] (at pp.c:1861)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='i2ctctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2ctctl', quals=[] (at pp.c:1862)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='i2cpsc', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cpsc', quals=[] (at pp.c:1863)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='i2csclh', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2csclh', quals=[] (at pp.c:1864)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='i2cscll', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cscll', quals=[] (at pp.c:1865)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='i2coa', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2coa', quals=[] (at pp.c:1866)
            IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='msp430_i2c_union_config_t', quals=[], storage=['typedef'] (at pp.c:1876)
    TypeDecl: declname='msp430_i2c_union_config_t', quals=[] (at pp.c:1876)
      Union: name='__nesc_unnamed4290', packed=False (at pp.c:1873)
        Decl: name='i2cConfig', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cConfig', quals=[] (at pp.c:1874)
            IdentifierType: names=['msp430_i2c_config_t'] (at None)
        Decl: name='i2cRegisters', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cRegisters', quals=[] (at pp.c:1875)
            IdentifierType: names=['msp430_i2c_registers_t'] (at None)
  Typedef: name='uart_speed_t', quals=[], storage=['typedef'] (at pp.c:1878)
    TypeDecl: declname='uart_speed_t', quals=[] (at pp.c:1878)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='uart_parity_t', quals=[], storage=['typedef'] (at pp.c:1879)
    TypeDecl: declname='uart_parity_t', quals=[] (at pp.c:1879)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='uart_duplex_t', quals=[], storage=['typedef'] (at pp.c:1880)
    TypeDecl: declname='uart_duplex_t', quals=[] (at pp.c:1880)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1882)
    Enum: name='__nesc_unnamed4291' (at pp.c:1882)
      EnumeratorList:  (at pp.c:1883)
        Enumerator: name='TOS_UART_1200' (at pp.c:1883)
          Constant: type='int', value='0' (at pp.c:1883)
        Enumerator: name='TOS_UART_1800' (at pp.c:1884)
          Constant: type='int', value='1' (at pp.c:1884)
        Enumerator: name='TOS_UART_2400' (at pp.c:1885)
          Constant: type='int', value='2' (at pp.c:1885)
        Enumerator: name='TOS_UART_4800' (at pp.c:1886)
          Constant: type='int', value='3' (at pp.c:1886)
        Enumerator: name='TOS_UART_9600' (at pp.c:1887)
          Constant: type='int', value='4' (at pp.c:1887)
        Enumerator: name='TOS_UART_19200' (at pp.c:1888)
          Constant: type='int', value='5' (at pp.c:1888)
        Enumerator: name='TOS_UART_38400' (at pp.c:1889)
          Constant: type='int', value='6' (at pp.c:1889)
        Enumerator: name='TOS_UART_57600' (at pp.c:1890)
          Constant: type='int', value='7' (at pp.c:1890)
        Enumerator: name='TOS_UART_76800' (at pp.c:1891)
          Constant: type='int', value='8' (at pp.c:1891)
        Enumerator: name='TOS_UART_115200' (at pp.c:1892)
          Constant: type='int', value='9' (at pp.c:1892)
        Enumerator: name='TOS_UART_230400' (at pp.c:1893)
          Constant: type='int', value='10' (at pp.c:1893)
  Decl: name=None, quals=[], storage=[] (at pp.c:1896)
    Enum: name='__nesc_unnamed4292' (at pp.c:1896)
      EnumeratorList:  (at pp.c:1897)
        Enumerator: name='TOS_UART_OFF' (at pp.c:1897)
        Enumerator: name='TOS_UART_RONLY' (at pp.c:1898)
        Enumerator: name='TOS_UART_TONLY' (at pp.c:1899)
        Enumerator: name='TOS_UART_DUPLEX' (at pp.c:1900)
  Decl: name=None, quals=[], storage=[] (at pp.c:1903)
    Enum: name='__nesc_unnamed4293' (at pp.c:1903)
      EnumeratorList:  (at pp.c:1904)
        Enumerator: name='TOS_UART_PARITY_NONE' (at pp.c:1904)
        Enumerator: name='TOS_UART_PARITY_EVEN' (at pp.c:1905)
        Enumerator: name='TOS_UART_PARITY_ODD' (at pp.c:1906)
  Typedef: name='TMilli', quals=[], storage=['typedef'] (at pp.c:1914)
    TypeDecl: declname='TMilli', quals=[] (at pp.c:1914)
      Struct: name='__nesc_unnamed4294', packed=False (at pp.c:1909)
        Decl: name='notUsed', quals=[], storage=[] (at 0)
          TypeDecl: declname='notUsed', quals=[] (at pp.c:1911)
            IdentifierType: names=['int'] (at None)
  Typedef: name='T32khz', quals=[], storage=['typedef'] (at pp.c:1920)
    TypeDecl: declname='T32khz', quals=[] (at pp.c:1920)
      Struct: name='__nesc_unnamed4295', packed=False (at pp.c:1915)
        Decl: name='notUsed', quals=[], storage=[] (at 0)
          TypeDecl: declname='notUsed', quals=[] (at pp.c:1917)
            IdentifierType: names=['int'] (at None)
  Typedef: name='TMicro', quals=[], storage=['typedef'] (at pp.c:1926)
    TypeDecl: declname='TMicro', quals=[] (at pp.c:1926)
      Struct: name='__nesc_unnamed4296', packed=False (at pp.c:1921)
        Decl: name='notUsed', quals=[], storage=[] (at 0)
          TypeDecl: declname='notUsed', quals=[] (at pp.c:1923)
            IdentifierType: names=['int'] (at None)
  Typedef: name='resource_client_id_t', quals=[], storage=['typedef'] (at pp.c:1928)
    TypeDecl: declname='resource_client_id_t', quals=[] (at pp.c:1928)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1930)
    Enum: name='__nesc_unnamed4297' (at pp.c:1930)
      EnumeratorList:  (at pp.c:1932)
        Enumerator: name='IEEE_EUI64_LENGTH' (at pp.c:1932)
          Constant: type='int', value='8' (at pp.c:1932)
  Typedef: name='ieee_eui64_t', quals=[], storage=['typedef'] (at pp.c:1939)
    TypeDecl: declname='ieee_eui64_t', quals=[] (at pp.c:1939)
      Struct: name='ieee_eui64', packed=False (at pp.c:1937)
        Decl: name='data', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1938)
            TypeDecl: declname='data', quals=[] (at pp.c:1938)
              IdentifierType: names=['uint8_t'] (at None)
            ID: name='IEEE_EUI64_LENGTH' (at pp.c:1938)
  Typedef: name='ieee154_panid_t', quals=[], storage=['typedef'] (at pp.c:1941)
    TypeDecl: declname='ieee154_panid_t', quals=[] (at pp.c:1941)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='ieee154_saddr_t', quals=[], storage=['typedef'] (at pp.c:1942)
    TypeDecl: declname='ieee154_saddr_t', quals=[] (at pp.c:1942)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='ieee154_laddr_t', quals=[], storage=['typedef'] (at pp.c:1943)
    TypeDecl: declname='ieee154_laddr_t', quals=[] (at pp.c:1943)
      IdentifierType: names=['ieee_eui64_t'] (at None)
  Typedef: name='ieee154_addr_t', quals=[], storage=['typedef'] (at pp.c:1958)
    TypeDecl: declname='ieee154_addr_t', quals=[] (at pp.c:1958)
      Struct: name='__nesc_unnamed4298', packed=False (at pp.c:1952)
        Decl: name='ieee_mode', quals=[], storage=[] (at 0)
          TypeDecl: declname='ieee_mode', quals=[] (at pp.c:1953)
            IdentifierType: names=['uint8_t'] (at None)
          Constant: type='int', value='2' (at pp.c:1953)
        Decl: name='ieee_addr', quals=[], storage=[] (at 0)
          TypeDecl: declname='ieee_addr', quals=[] (at pp.c:1957)
            Union: name='__nesc_unnamed4299', packed=False (at pp.c:1954)
              Decl: name='saddr', quals=[], storage=[] (at 0)
                TypeDecl: declname='saddr', quals=[] (at pp.c:1955)
                  IdentifierType: names=['ieee154_saddr_t'] (at None)
              Decl: name='laddr', quals=[], storage=[] (at 0)
                TypeDecl: declname='laddr', quals=[] (at pp.c:1956)
                  IdentifierType: names=['ieee154_laddr_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1962)
    Enum: name='__nesc_unnamed4300' (at pp.c:1962)
      EnumeratorList:  (at pp.c:1963)
        Enumerator: name='IEEE154_BROADCAST_ADDR' (at pp.c:1963)
          Constant: type='int', value='0xffff' (at pp.c:1963)
        Enumerator: name='IEEE154_LINK_MTU' (at pp.c:1964)
          Constant: type='int', value='127' (at pp.c:1964)
  Decl: name=None, quals=[], storage=[] (at pp.c:1967)
    Struct: name='ieee154_frame_addr', packed=False (at pp.c:1967)
      Decl: name='ieee_src', quals=[], storage=[] (at 0)
        TypeDecl: declname='ieee_src', quals=[] (at pp.c:1968)
          IdentifierType: names=['ieee154_addr_t'] (at None)
      Decl: name='ieee_dst', quals=[], storage=[] (at 0)
        TypeDecl: declname='ieee_dst', quals=[] (at pp.c:1969)
          IdentifierType: names=['ieee154_addr_t'] (at None)
      Decl: name='ieee_dstpan', quals=[], storage=[] (at 0)
        TypeDecl: declname='ieee_dstpan', quals=[] (at pp.c:1970)
          IdentifierType: names=['ieee154_panid_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1973)
    Enum: name='__nesc_unnamed4301' (at pp.c:1973)
      EnumeratorList:  (at pp.c:1974)
        Enumerator: name='IEEE154_MIN_HDR_SZ' (at pp.c:1974)
          Constant: type='int', value='6' (at pp.c:1974)
  Decl: name=None, quals=[], storage=[] (at pp.c:1977)
    Enum: name='ieee154_fcf_enums' (at pp.c:1977)
      EnumeratorList:  (at pp.c:1978)
        Enumerator: name='IEEE154_FCF_FRAME_TYPE' (at pp.c:1978)
          Constant: type='int', value='0' (at pp.c:1978)
        Enumerator: name='IEEE154_FCF_SECURITY_ENABLED' (at pp.c:1979)
          Constant: type='int', value='3' (at pp.c:1979)
        Enumerator: name='IEEE154_FCF_FRAME_PENDING' (at pp.c:1980)
          Constant: type='int', value='4' (at pp.c:1980)
        Enumerator: name='IEEE154_FCF_ACK_REQ' (at pp.c:1981)
          Constant: type='int', value='5' (at pp.c:1981)
        Enumerator: name='IEEE154_FCF_INTRAPAN' (at pp.c:1982)
          Constant: type='int', value='6' (at pp.c:1982)
        Enumerator: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:1983)
          Constant: type='int', value='10' (at pp.c:1983)
        Enumerator: name='IEEE154_FCF_SRC_ADDR_MODE' (at pp.c:1984)
          Constant: type='int', value='14' (at pp.c:1984)
  Decl: name=None, quals=[], storage=[] (at pp.c:1987)
    Enum: name='ieee154_fcf_type_enums' (at pp.c:1987)
      EnumeratorList:  (at pp.c:1988)
        Enumerator: name='IEEE154_TYPE_BEACON' (at pp.c:1988)
          Constant: type='int', value='0' (at pp.c:1988)
        Enumerator: name='IEEE154_TYPE_DATA' (at pp.c:1989)
          Constant: type='int', value='1' (at pp.c:1989)
        Enumerator: name='IEEE154_TYPE_ACK' (at pp.c:1990)
          Constant: type='int', value='2' (at pp.c:1990)
        Enumerator: name='IEEE154_TYPE_MAC_CMD' (at pp.c:1991)
          Constant: type='int', value='3' (at pp.c:1991)
  Decl: name=None, quals=[], storage=[] (at pp.c:1994)
    Enum: name='iee154_fcf_addr_mode_enums' (at pp.c:1994)
      EnumeratorList:  (at pp.c:1995)
        Enumerator: name='IEEE154_ADDR_NONE' (at pp.c:1995)
          Constant: type='int', value='0' (at pp.c:1995)
        Enumerator: name='IEEE154_ADDR_SHORT' (at pp.c:1996)
          Constant: type='int', value='2' (at pp.c:1996)
        Enumerator: name='IEEE154_ADDR_EXT' (at pp.c:1997)
          Constant: type='int', value='3' (at pp.c:1997)
  Decl: name=None, quals=[], storage=[] (at pp.c:2000)
    Enum: name='__nesc_unnamed4302' (at pp.c:2000)
      EnumeratorList:  (at pp.c:2001)
        Enumerator: name='DALLASID48_SERIAL_LENGTH' (at pp.c:2001)
          Constant: type='int', value='6' (at pp.c:2001)
        Enumerator: name='DALLASID48_DATA_LENGTH' (at pp.c:2002)
          Constant: type='int', value='8' (at pp.c:2002)
  Typedef: name='dallasid48_serial_t', quals=[], storage=['typedef'] (at pp.c:2020)
    TypeDecl: declname='dallasid48_serial_t', quals=[] (at pp.c:2020)
      Union: name='dallasid48_serial_t', packed=False (at pp.c:2013)
        Decl: name='data', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:2014)
            TypeDecl: declname='data', quals=[] (at pp.c:2014)
              IdentifierType: names=['uint8_t'] (at None)
            ID: name='DALLASID48_DATA_LENGTH' (at pp.c:2014)
        Decl: name='temp', quals=[], storage=[] (at 0)
          TypeDecl: declname='temp', quals=[] (at pp.c:2019)
            Struct: name=None, packed=False (at pp.c:2015)
              Decl: name='family_code', quals=[], storage=[] (at 0)
                TypeDecl: declname='family_code', quals=[] (at pp.c:2016)
                  IdentifierType: names=['uint8_t'] (at None)
              Decl: name='serial', quals=[], storage=[] (at 0)
                ArrayDecl:  (at pp.c:2017)
                  TypeDecl: declname='serial', quals=[] (at pp.c:2017)
                    IdentifierType: names=['uint8_t'] (at None)
                  ID: name='DALLASID48_SERIAL_LENGTH' (at pp.c:2017)
              Decl: name='crc', quals=[], storage=[] (at 0)
                TypeDecl: declname='crc', quals=[] (at pp.c:2018)
                  IdentifierType: names=['uint8_t'] (at None)
  Decl: name='dallasid48checkCrc', quals=[], storage=['inline', 'static'] (at pp.c:2025)
    FuncDecl: quals=None (at pp.c:2025)
      ParamList:  (at pp.c:2025)
        Decl: name='id', quals=['const'], storage=[] (at pp.c:2025)
          PtrDecl: quals=[] (at pp.c:2025)
            TypeDecl: declname='id', quals=['const'] (at pp.c:2025)
              IdentifierType: names=['dallasid48_serial_t'] (at None)
      TypeDecl: declname='dallasid48checkCrc', quals=[] (at pp.c:2025)
        IdentifierType: names=['bool'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2027)
    Enum: name='__nesc_unnamed4303' (at pp.c:2027)
      EnumeratorList:  (at pp.c:2028)
        Enumerator: name='IEEE_EUI64_COMPANY_ID_0' (at pp.c:2028)
          Constant: type='int', value='0x00' (at pp.c:2028)
        Enumerator: name='IEEE_EUI64_COMPANY_ID_1' (at pp.c:2029)
          Constant: type='int', value='0x12' (at pp.c:2029)
        Enumerator: name='IEEE_EUI64_COMPANY_ID_2' (at pp.c:2030)
          Constant: type='int', value='0x6d' (at pp.c:2030)
        Enumerator: name='IEEE_EUI64_SERIAL_ID_0' (at pp.c:2031)
          Constant: type='char', value="'E'" (at pp.c:2031)
        Enumerator: name='IEEE_EUI64_SERIAL_ID_1' (at pp.c:2032)
          Constant: type='char', value="'P'" (at pp.c:2032)
  Typedef: name='timesync_radio_t', quals=[], storage=['typedef'] (at pp.c:2035)
    TypeDecl: declname='timesync_radio_t', quals=[] (at pp.c:2035)
      IdentifierType: names=['nx_uint32_t'] (at None)
  Typedef: name='timesync_footer_t', quals=[], storage=['typedef'] (at pp.c:2046)
    TypeDecl: declname='timesync_footer_t', quals=[] (at pp.c:2046)
      Struct: name='timesync_footer_t', packed=False (at pp.c:2042)
        Decl: name='type', quals=[], storage=[] (at 0)
          TypeDecl: declname='type', quals=[] (at pp.c:2044)
            IdentifierType: names=['nx_am_id_t'] (at None)
        Decl: name='timestamp', quals=[], storage=[] (at 0)
          TypeDecl: declname='timestamp', quals=[] (at pp.c:2045)
            IdentifierType: names=['timesync_radio_t'] (at None)
  Typedef: name='lpl_sendstate_t', quals=[], storage=['typedef'] (at pp.c:2054)
    TypeDecl: declname='lpl_sendstate_t', quals=[] (at pp.c:2054)
      Enum: name='__nesc_unnamed4304' (at pp.c:2049)
        EnumeratorList:  (at pp.c:2050)
          Enumerator: name='S_LPL_NOT_SENDING' (at pp.c:2050)
          Enumerator: name='S_LPL_FIRST_MESSAGE' (at pp.c:2051)
          Enumerator: name='S_LPL_SENDING' (at pp.c:2052)
          Enumerator: name='S_LPL_CLEAN_UP' (at pp.c:2053)
  Typedef: name='LowPowerSensingBaseC__MsgQueue__t', quals=[], storage=['typedef'] (at pp.c:2055)
    TypeDecl: declname='LowPowerSensingBaseC__MsgQueue__t', quals=[] (at pp.c:2055)
      IdentifierType: names=['message_t'] (at None)
  Typedef: name='QueueC__0__queue_t', quals=[], storage=['typedef'] (at pp.c:2056)
    TypeDecl: declname='QueueC__0__queue_t', quals=[] (at pp.c:2056)
      IdentifierType: names=['message_t'] (at None)
  Typedef: name='QueueC__0__Queue__t', quals=[], storage=['typedef'] (at pp.c:2057)
    TypeDecl: declname='QueueC__0__Queue__t', quals=[] (at pp.c:2057)
      IdentifierType: names=['QueueC__0__queue_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2058)
    Enum: name='Msp430Uart1C__0____nesc_unnamed4305' (at pp.c:2058)
      EnumeratorList:  (at pp.c:2059)
        Enumerator: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:2059)
          Constant: type='int', value='0U' (at pp.c:2059)
  Typedef: name='Msp430UartP__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2061)
    TypeDecl: declname='Msp430UartP__0__Counter__precision_tag', quals=[] (at pp.c:2061)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='Msp430UartP__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2062)
    TypeDecl: declname='Msp430UartP__0__Counter__size_type', quals=[] (at pp.c:2062)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='Msp430CounterC__0__frequency_tag', quals=[], storage=['typedef'] (at pp.c:2063)
    TypeDecl: declname='Msp430CounterC__0__frequency_tag', quals=[] (at pp.c:2063)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='Msp430CounterC__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2064)
    TypeDecl: declname='Msp430CounterC__0__Counter__precision_tag', quals=[] (at pp.c:2064)
      IdentifierType: names=['Msp430CounterC__0__frequency_tag'] (at None)
  Typedef: name='Msp430CounterC__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2065)
    TypeDecl: declname='Msp430CounterC__0__Counter__size_type', quals=[] (at pp.c:2065)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2066)
    Enum: name='Msp430Usart1C__0____nesc_unnamed4306' (at pp.c:2066)
      EnumeratorList:  (at pp.c:2067)
        Enumerator: name='Msp430Usart1C__0__CLIENT_ID' (at pp.c:2067)
          Constant: type='int', value='0U' (at pp.c:2067)
  Decl: name=None, quals=[], storage=[] (at pp.c:2069)
    Enum: name='CC2420ActiveMessageC____nesc_unnamed4307' (at pp.c:2069)
      EnumeratorList:  (at pp.c:2070)
        Enumerator: name='CC2420ActiveMessageC__CC2420_AM_SEND_ID' (at pp.c:2070)
          Constant: type='int', value='0U' (at pp.c:2070)
  Typedef: name='CC2420ControlP__StartupTimer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2072)
    TypeDecl: declname='CC2420ControlP__StartupTimer__precision_tag', quals=[] (at pp.c:2072)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420ControlP__StartupTimer__size_type', quals=[], storage=['typedef'] (at pp.c:2073)
    TypeDecl: declname='CC2420ControlP__StartupTimer__size_type', quals=[] (at pp.c:2073)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='CC2420ControlP__ReadRssi__val_t', quals=[], storage=['typedef'] (at pp.c:2074)
    TypeDecl: declname='CC2420ControlP__ReadRssi__val_t', quals=[] (at pp.c:2074)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2075)
    Enum: name='Msp430Timer32khzC__0____nesc_unnamed4308' (at pp.c:2075)
      EnumeratorList:  (at pp.c:2076)
        Enumerator: name='Msp430Timer32khzC__0__ALARM_ID' (at pp.c:2076)
          Constant: type='int', value='0U' (at pp.c:2076)
  Typedef: name='Msp430AlarmC__0__frequency_tag', quals=[], storage=['typedef'] (at pp.c:2078)
    TypeDecl: declname='Msp430AlarmC__0__frequency_tag', quals=[] (at pp.c:2078)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='Msp430AlarmC__0__Alarm__precision_tag', quals=[], storage=['typedef'] (at pp.c:2079)
    TypeDecl: declname='Msp430AlarmC__0__Alarm__precision_tag', quals=[] (at pp.c:2079)
      IdentifierType: names=['Msp430AlarmC__0__frequency_tag'] (at None)
  Typedef: name='Msp430AlarmC__0__Alarm__size_type', quals=[], storage=['typedef'] (at pp.c:2080)
    TypeDecl: declname='Msp430AlarmC__0__Alarm__size_type', quals=[] (at pp.c:2080)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformCounterC__0__to_precision_tag', quals=[], storage=['typedef'] (at pp.c:2081)
    TypeDecl: declname='TransformCounterC__0__to_precision_tag', quals=[] (at pp.c:2081)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformCounterC__0__to_size_type', quals=[], storage=['typedef'] (at pp.c:2082)
    TypeDecl: declname='TransformCounterC__0__to_size_type', quals=[] (at pp.c:2082)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='TransformCounterC__0__from_precision_tag', quals=[], storage=['typedef'] (at pp.c:2083)
    TypeDecl: declname='TransformCounterC__0__from_precision_tag', quals=[] (at pp.c:2083)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformCounterC__0__from_size_type', quals=[], storage=['typedef'] (at pp.c:2084)
    TypeDecl: declname='TransformCounterC__0__from_size_type', quals=[] (at pp.c:2084)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformCounterC__0__upper_count_type', quals=[], storage=['typedef'] (at pp.c:2085)
    TypeDecl: declname='TransformCounterC__0__upper_count_type', quals=[] (at pp.c:2085)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformCounterC__0__CounterFrom__precision_tag', quals=[], storage=['typedef'] (at pp.c:2086)
    TypeDecl: declname='TransformCounterC__0__CounterFrom__precision_tag', quals=[] (at pp.c:2086)
      IdentifierType: names=['TransformCounterC__0__from_precision_tag'] (at None)
  Typedef: name='TransformCounterC__0__CounterFrom__size_type', quals=[], storage=['typedef'] (at pp.c:2087)
    TypeDecl: declname='TransformCounterC__0__CounterFrom__size_type', quals=[] (at pp.c:2087)
      IdentifierType: names=['TransformCounterC__0__from_size_type'] (at None)
  Typedef: name='TransformCounterC__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2088)
    TypeDecl: declname='TransformCounterC__0__Counter__precision_tag', quals=[] (at pp.c:2088)
      IdentifierType: names=['TransformCounterC__0__to_precision_tag'] (at None)
  Typedef: name='TransformCounterC__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2089)
    TypeDecl: declname='TransformCounterC__0__Counter__size_type', quals=[] (at pp.c:2089)
      IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
  Typedef: name='TransformAlarmC__0__to_precision_tag', quals=[], storage=['typedef'] (at pp.c:2090)
    TypeDecl: declname='TransformAlarmC__0__to_precision_tag', quals=[] (at pp.c:2090)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformAlarmC__0__to_size_type', quals=[], storage=['typedef'] (at pp.c:2091)
    TypeDecl: declname='TransformAlarmC__0__to_size_type', quals=[] (at pp.c:2091)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='TransformAlarmC__0__from_precision_tag', quals=[], storage=['typedef'] (at pp.c:2092)
    TypeDecl: declname='TransformAlarmC__0__from_precision_tag', quals=[] (at pp.c:2092)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformAlarmC__0__from_size_type', quals=[], storage=['typedef'] (at pp.c:2093)
    TypeDecl: declname='TransformAlarmC__0__from_size_type', quals=[] (at pp.c:2093)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformAlarmC__0__Alarm__precision_tag', quals=[], storage=['typedef'] (at pp.c:2094)
    TypeDecl: declname='TransformAlarmC__0__Alarm__precision_tag', quals=[] (at pp.c:2094)
      IdentifierType: names=['TransformAlarmC__0__to_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__0__Alarm__size_type', quals=[], storage=['typedef'] (at pp.c:2095)
    TypeDecl: declname='TransformAlarmC__0__Alarm__size_type', quals=[] (at pp.c:2095)
      IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Typedef: name='TransformAlarmC__0__AlarmFrom__precision_tag', quals=[], storage=['typedef'] (at pp.c:2096)
    TypeDecl: declname='TransformAlarmC__0__AlarmFrom__precision_tag', quals=[] (at pp.c:2096)
      IdentifierType: names=['TransformAlarmC__0__from_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__0__AlarmFrom__size_type', quals=[], storage=['typedef'] (at pp.c:2097)
    TypeDecl: declname='TransformAlarmC__0__AlarmFrom__size_type', quals=[] (at pp.c:2097)
      IdentifierType: names=['TransformAlarmC__0__from_size_type'] (at None)
  Typedef: name='TransformAlarmC__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2098)
    TypeDecl: declname='TransformAlarmC__0__Counter__precision_tag', quals=[] (at pp.c:2098)
      IdentifierType: names=['TransformAlarmC__0__to_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2099)
    TypeDecl: declname='TransformAlarmC__0__Counter__size_type', quals=[] (at pp.c:2099)
      IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2100)
    Enum: name='CC2420SpiC__0____nesc_unnamed4309' (at pp.c:2100)
      EnumeratorList:  (at pp.c:2101)
        Enumerator: name='CC2420SpiC__0__CLIENT_ID' (at pp.c:2101)
          Constant: type='int', value='0U' (at pp.c:2101)
  Decl: name=None, quals=[], storage=[] (at pp.c:2103)
    Enum: name='Msp430Spi0C__0____nesc_unnamed4310' (at pp.c:2103)
      EnumeratorList:  (at pp.c:2104)
        Enumerator: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:2104)
          Constant: type='int', value='0U' (at pp.c:2104)
  Decl: name=None, quals=[], storage=[] (at pp.c:2106)
    Enum: name='Msp430Usart0C__0____nesc_unnamed4311' (at pp.c:2106)
      EnumeratorList:  (at pp.c:2107)
        Enumerator: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:2107)
          Constant: type='int', value='0U' (at pp.c:2107)
  Decl: name=None, quals=[], storage=[] (at pp.c:2109)
    Enum: name='CC2420SpiC__1____nesc_unnamed4312' (at pp.c:2109)
      EnumeratorList:  (at pp.c:2110)
        Enumerator: name='CC2420SpiC__1__CLIENT_ID' (at pp.c:2110)
          Constant: type='int', value='1U' (at pp.c:2110)
  Decl: name=None, quals=[], storage=[] (at pp.c:2112)
    Enum: name='CC2420SpiC__2____nesc_unnamed4313' (at pp.c:2112)
      EnumeratorList:  (at pp.c:2113)
        Enumerator: name='CC2420SpiC__2__CLIENT_ID' (at pp.c:2113)
          Constant: type='int', value='2U' (at pp.c:2113)
  Typedef: name='OneWireMasterC__BusyWait__precision_tag', quals=[], storage=['typedef'] (at pp.c:2115)
    TypeDecl: declname='OneWireMasterC__BusyWait__precision_tag', quals=[] (at pp.c:2115)
      IdentifierType: names=['TMicro'] (at None)
  Typedef: name='OneWireMasterC__BusyWait__size_type', quals=[], storage=['typedef'] (at pp.c:2116)
    TypeDecl: declname='OneWireMasterC__BusyWait__size_type', quals=[] (at pp.c:2116)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='BusyWaitCounterC__0__precision_tag', quals=[], storage=['typedef'] (at pp.c:2117)
    TypeDecl: declname='BusyWaitCounterC__0__precision_tag', quals=[] (at pp.c:2117)
      IdentifierType: names=['TMicro'] (at None)
  Typedef: name='BusyWaitCounterC__0__size_type', quals=[], storage=['typedef'] (at pp.c:2118)
    TypeDecl: declname='BusyWaitCounterC__0__size_type', quals=[] (at pp.c:2118)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='BusyWaitCounterC__0__BusyWait__precision_tag', quals=[], storage=['typedef'] (at pp.c:2119)
    TypeDecl: declname='BusyWaitCounterC__0__BusyWait__precision_tag', quals=[] (at pp.c:2119)
      IdentifierType: names=['BusyWaitCounterC__0__precision_tag'] (at None)
  Typedef: name='BusyWaitCounterC__0__BusyWait__size_type', quals=[], storage=['typedef'] (at pp.c:2120)
    TypeDecl: declname='BusyWaitCounterC__0__BusyWait__size_type', quals=[] (at pp.c:2120)
      IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
  Typedef: name='BusyWaitCounterC__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2121)
    TypeDecl: declname='BusyWaitCounterC__0__Counter__precision_tag', quals=[] (at pp.c:2121)
      IdentifierType: names=['BusyWaitCounterC__0__precision_tag'] (at None)
  Typedef: name='BusyWaitCounterC__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2122)
    TypeDecl: declname='BusyWaitCounterC__0__Counter__size_type', quals=[] (at pp.c:2122)
      IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
  Typedef: name='Msp430CounterC__1__frequency_tag', quals=[], storage=['typedef'] (at pp.c:2123)
    TypeDecl: declname='Msp430CounterC__1__frequency_tag', quals=[] (at pp.c:2123)
      IdentifierType: names=['TMicro'] (at None)
  Typedef: name='Msp430CounterC__1__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2124)
    TypeDecl: declname='Msp430CounterC__1__Counter__precision_tag', quals=[] (at pp.c:2124)
      IdentifierType: names=['Msp430CounterC__1__frequency_tag'] (at None)
  Typedef: name='Msp430CounterC__1__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2125)
    TypeDecl: declname='Msp430CounterC__1__Counter__size_type', quals=[] (at pp.c:2125)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='CC2420TransmitP__PacketTimeStamp__precision_tag', quals=[], storage=['typedef'] (at pp.c:2126)
    TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__precision_tag', quals=[] (at pp.c:2126)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420TransmitP__PacketTimeStamp__size_type', quals=[], storage=['typedef'] (at pp.c:2127)
    TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__size_type', quals=[] (at pp.c:2127)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='CC2420TransmitP__BackoffTimer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2128)
    TypeDecl: declname='CC2420TransmitP__BackoffTimer__precision_tag', quals=[] (at pp.c:2128)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420TransmitP__BackoffTimer__size_type', quals=[], storage=['typedef'] (at pp.c:2129)
    TypeDecl: declname='CC2420TransmitP__BackoffTimer__size_type', quals=[] (at pp.c:2129)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2130)
    Enum: name='CC2420SpiC__3____nesc_unnamed4314' (at pp.c:2130)
      EnumeratorList:  (at pp.c:2131)
        Enumerator: name='CC2420SpiC__3__CLIENT_ID' (at pp.c:2131)
          Constant: type='int', value='3U' (at pp.c:2131)
  Typedef: name='CC2420ReceiveP__PacketTimeStamp__precision_tag', quals=[], storage=['typedef'] (at pp.c:2133)
    TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__precision_tag', quals=[] (at pp.c:2133)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420ReceiveP__PacketTimeStamp__size_type', quals=[], storage=['typedef'] (at pp.c:2134)
    TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__size_type', quals=[] (at pp.c:2134)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='CC2420PacketP__PacketTimeStamp32khz__precision_tag', quals=[], storage=['typedef'] (at pp.c:2135)
    TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__precision_tag', quals=[] (at pp.c:2135)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420PacketP__PacketTimeStamp32khz__size_type', quals=[], storage=['typedef'] (at pp.c:2136)
    TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__size_type', quals=[] (at pp.c:2136)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='CC2420PacketP__LocalTime32khz__precision_tag', quals=[], storage=['typedef'] (at pp.c:2137)
    TypeDecl: declname='CC2420PacketP__LocalTime32khz__precision_tag', quals=[] (at pp.c:2137)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420PacketP__LocalTimeMilli__precision_tag', quals=[], storage=['typedef'] (at pp.c:2138)
    TypeDecl: declname='CC2420PacketP__LocalTimeMilli__precision_tag', quals=[] (at pp.c:2138)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='CC2420PacketP__PacketTimeStampMilli__precision_tag', quals=[], storage=['typedef'] (at pp.c:2139)
    TypeDecl: declname='CC2420PacketP__PacketTimeStampMilli__precision_tag', quals=[] (at pp.c:2139)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='CC2420PacketP__PacketTimeStampMilli__size_type', quals=[], storage=['typedef'] (at pp.c:2140)
    TypeDecl: declname='CC2420PacketP__PacketTimeStampMilli__size_type', quals=[] (at pp.c:2140)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='CounterToLocalTimeC__0__precision_tag', quals=[], storage=['typedef'] (at pp.c:2141)
    TypeDecl: declname='CounterToLocalTimeC__0__precision_tag', quals=[] (at pp.c:2141)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CounterToLocalTimeC__0__LocalTime__precision_tag', quals=[], storage=['typedef'] (at pp.c:2142)
    TypeDecl: declname='CounterToLocalTimeC__0__LocalTime__precision_tag', quals=[] (at pp.c:2142)
      IdentifierType: names=['CounterToLocalTimeC__0__precision_tag'] (at None)
  Typedef: name='CounterToLocalTimeC__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2143)
    TypeDecl: declname='CounterToLocalTimeC__0__Counter__precision_tag', quals=[] (at pp.c:2143)
      IdentifierType: names=['CounterToLocalTimeC__0__precision_tag'] (at None)
  Typedef: name='CounterToLocalTimeC__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2144)
    TypeDecl: declname='CounterToLocalTimeC__0__Counter__size_type', quals=[] (at pp.c:2144)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2145)
    Enum: name='Msp430Timer32khzC__1____nesc_unnamed4315' (at pp.c:2145)
      EnumeratorList:  (at pp.c:2146)
        Enumerator: name='Msp430Timer32khzC__1__ALARM_ID' (at pp.c:2146)
          Constant: type='int', value='1U' (at pp.c:2146)
  Typedef: name='Msp430AlarmC__1__frequency_tag', quals=[], storage=['typedef'] (at pp.c:2148)
    TypeDecl: declname='Msp430AlarmC__1__frequency_tag', quals=[] (at pp.c:2148)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='Msp430AlarmC__1__Alarm__precision_tag', quals=[], storage=['typedef'] (at pp.c:2149)
    TypeDecl: declname='Msp430AlarmC__1__Alarm__precision_tag', quals=[] (at pp.c:2149)
      IdentifierType: names=['Msp430AlarmC__1__frequency_tag'] (at None)
  Typedef: name='Msp430AlarmC__1__Alarm__size_type', quals=[], storage=['typedef'] (at pp.c:2150)
    TypeDecl: declname='Msp430AlarmC__1__Alarm__size_type', quals=[] (at pp.c:2150)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformCounterC__1__to_precision_tag', quals=[], storage=['typedef'] (at pp.c:2151)
    TypeDecl: declname='TransformCounterC__1__to_precision_tag', quals=[] (at pp.c:2151)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='TransformCounterC__1__to_size_type', quals=[], storage=['typedef'] (at pp.c:2152)
    TypeDecl: declname='TransformCounterC__1__to_size_type', quals=[] (at pp.c:2152)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='TransformCounterC__1__from_precision_tag', quals=[], storage=['typedef'] (at pp.c:2153)
    TypeDecl: declname='TransformCounterC__1__from_precision_tag', quals=[] (at pp.c:2153)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformCounterC__1__from_size_type', quals=[], storage=['typedef'] (at pp.c:2154)
    TypeDecl: declname='TransformCounterC__1__from_size_type', quals=[] (at pp.c:2154)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformCounterC__1__upper_count_type', quals=[], storage=['typedef'] (at pp.c:2155)
    TypeDecl: declname='TransformCounterC__1__upper_count_type', quals=[] (at pp.c:2155)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='TransformCounterC__1__CounterFrom__precision_tag', quals=[], storage=['typedef'] (at pp.c:2156)
    TypeDecl: declname='TransformCounterC__1__CounterFrom__precision_tag', quals=[] (at pp.c:2156)
      IdentifierType: names=['TransformCounterC__1__from_precision_tag'] (at None)
  Typedef: name='TransformCounterC__1__CounterFrom__size_type', quals=[], storage=['typedef'] (at pp.c:2157)
    TypeDecl: declname='TransformCounterC__1__CounterFrom__size_type', quals=[] (at pp.c:2157)
      IdentifierType: names=['TransformCounterC__1__from_size_type'] (at None)
  Typedef: name='TransformCounterC__1__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2158)
    TypeDecl: declname='TransformCounterC__1__Counter__precision_tag', quals=[] (at pp.c:2158)
      IdentifierType: names=['TransformCounterC__1__to_precision_tag'] (at None)
  Typedef: name='TransformCounterC__1__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2159)
    TypeDecl: declname='TransformCounterC__1__Counter__size_type', quals=[] (at pp.c:2159)
      IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
  Typedef: name='TransformAlarmC__1__to_precision_tag', quals=[], storage=['typedef'] (at pp.c:2160)
    TypeDecl: declname='TransformAlarmC__1__to_precision_tag', quals=[] (at pp.c:2160)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='TransformAlarmC__1__to_size_type', quals=[], storage=['typedef'] (at pp.c:2161)
    TypeDecl: declname='TransformAlarmC__1__to_size_type', quals=[] (at pp.c:2161)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='TransformAlarmC__1__from_precision_tag', quals=[], storage=['typedef'] (at pp.c:2162)
    TypeDecl: declname='TransformAlarmC__1__from_precision_tag', quals=[] (at pp.c:2162)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformAlarmC__1__from_size_type', quals=[], storage=['typedef'] (at pp.c:2163)
    TypeDecl: declname='TransformAlarmC__1__from_size_type', quals=[] (at pp.c:2163)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformAlarmC__1__Alarm__precision_tag', quals=[], storage=['typedef'] (at pp.c:2164)
    TypeDecl: declname='TransformAlarmC__1__Alarm__precision_tag', quals=[] (at pp.c:2164)
      IdentifierType: names=['TransformAlarmC__1__to_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__1__Alarm__size_type', quals=[], storage=['typedef'] (at pp.c:2165)
    TypeDecl: declname='TransformAlarmC__1__Alarm__size_type', quals=[] (at pp.c:2165)
      IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Typedef: name='TransformAlarmC__1__AlarmFrom__precision_tag', quals=[], storage=['typedef'] (at pp.c:2166)
    TypeDecl: declname='TransformAlarmC__1__AlarmFrom__precision_tag', quals=[] (at pp.c:2166)
      IdentifierType: names=['TransformAlarmC__1__from_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__1__AlarmFrom__size_type', quals=[], storage=['typedef'] (at pp.c:2167)
    TypeDecl: declname='TransformAlarmC__1__AlarmFrom__size_type', quals=[] (at pp.c:2167)
      IdentifierType: names=['TransformAlarmC__1__from_size_type'] (at None)
  Typedef: name='TransformAlarmC__1__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2168)
    TypeDecl: declname='TransformAlarmC__1__Counter__precision_tag', quals=[] (at pp.c:2168)
      IdentifierType: names=['TransformAlarmC__1__to_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__1__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2169)
    TypeDecl: declname='TransformAlarmC__1__Counter__size_type', quals=[] (at pp.c:2169)
      IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Typedef: name='AlarmToTimerC__0__precision_tag', quals=[], storage=['typedef'] (at pp.c:2170)
    TypeDecl: declname='AlarmToTimerC__0__precision_tag', quals=[] (at pp.c:2170)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='AlarmToTimerC__0__Alarm__precision_tag', quals=[], storage=['typedef'] (at pp.c:2171)
    TypeDecl: declname='AlarmToTimerC__0__Alarm__precision_tag', quals=[] (at pp.c:2171)
      IdentifierType: names=['AlarmToTimerC__0__precision_tag'] (at None)
  Typedef: name='AlarmToTimerC__0__Alarm__size_type', quals=[], storage=['typedef'] (at pp.c:2172)
    TypeDecl: declname='AlarmToTimerC__0__Alarm__size_type', quals=[] (at pp.c:2172)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='AlarmToTimerC__0__Timer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2173)
    TypeDecl: declname='AlarmToTimerC__0__Timer__precision_tag', quals=[] (at pp.c:2173)
      IdentifierType: names=['AlarmToTimerC__0__precision_tag'] (at None)
  Typedef: name='VirtualizeTimerC__0__precision_tag', quals=[], storage=['typedef'] (at pp.c:2174)
    TypeDecl: declname='VirtualizeTimerC__0__precision_tag', quals=[] (at pp.c:2174)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='VirtualizeTimerC__0__TimerFrom__precision_tag', quals=[], storage=['typedef'] (at pp.c:2175)
    TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__precision_tag', quals=[] (at pp.c:2175)
      IdentifierType: names=['VirtualizeTimerC__0__precision_tag'] (at None)
  Typedef: name='VirtualizeTimerC__0__Timer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2176)
    TypeDecl: declname='VirtualizeTimerC__0__Timer__precision_tag', quals=[] (at pp.c:2176)
      IdentifierType: names=['VirtualizeTimerC__0__precision_tag'] (at None)
  Typedef: name='CounterToLocalTimeC__1__precision_tag', quals=[], storage=['typedef'] (at pp.c:2177)
    TypeDecl: declname='CounterToLocalTimeC__1__precision_tag', quals=[] (at pp.c:2177)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='CounterToLocalTimeC__1__LocalTime__precision_tag', quals=[], storage=['typedef'] (at pp.c:2178)
    TypeDecl: declname='CounterToLocalTimeC__1__LocalTime__precision_tag', quals=[] (at pp.c:2178)
      IdentifierType: names=['CounterToLocalTimeC__1__precision_tag'] (at None)
  Typedef: name='CounterToLocalTimeC__1__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2179)
    TypeDecl: declname='CounterToLocalTimeC__1__Counter__precision_tag', quals=[] (at pp.c:2179)
      IdentifierType: names=['CounterToLocalTimeC__1__precision_tag'] (at None)
  Typedef: name='CounterToLocalTimeC__1__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2180)
    TypeDecl: declname='CounterToLocalTimeC__1__Counter__size_type', quals=[] (at pp.c:2180)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2181)
    Enum: name='CC2420SpiC__4____nesc_unnamed4316' (at pp.c:2181)
      EnumeratorList:  (at pp.c:2182)
        Enumerator: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:2182)
          Constant: type='int', value='4U' (at pp.c:2182)
  Typedef: name='RandomMlcgC__SeedInit__parameter', quals=[], storage=['typedef'] (at pp.c:2184)
    TypeDecl: declname='RandomMlcgC__SeedInit__parameter', quals=[] (at pp.c:2184)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2185)
    Enum: name='CC2420TinyosNetworkC____nesc_unnamed4317' (at pp.c:2185)
      EnumeratorList:  (at pp.c:2186)
        Enumerator: name='CC2420TinyosNetworkC__TINYOS_N_NETWORKS' (at pp.c:2186)
          Constant: type='int', value='1U' (at pp.c:2186)
  Typedef: name='DefaultLplP__OffTimer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2188)
    TypeDecl: declname='DefaultLplP__OffTimer__precision_tag', quals=[] (at pp.c:2188)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='DefaultLplP__SendDoneTimer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2189)
    TypeDecl: declname='DefaultLplP__SendDoneTimer__precision_tag', quals=[] (at pp.c:2189)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='PowerCycleP__OnTimer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2190)
    TypeDecl: declname='PowerCycleP__OnTimer__precision_tag', quals=[] (at pp.c:2190)
      IdentifierType: names=['TMilli'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2191)
    Enum: name='AMQueueP____nesc_unnamed4318' (at pp.c:2191)
      EnumeratorList:  (at pp.c:2192)
        Enumerator: name='AMQueueP__NUM_CLIENTS' (at pp.c:2192)
          Constant: type='int', value='1U' (at pp.c:2192)
  Decl: name=None, quals=[], storage=[] (at pp.c:2194)
    Enum: name='SerialAMQueueP____nesc_unnamed4319' (at pp.c:2194)
      EnumeratorList:  (at pp.c:2195)
        Enumerator: name='SerialAMQueueP__NUM_CLIENTS' (at pp.c:2195)
          Constant: type='int', value='1U' (at pp.c:2195)
  Decl: name='PlatformP__Init__init', quals=[], storage=['static'] (at pp.c:2198)
    FuncDecl: quals=None (at pp.c:2198)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PlatformP__Init__init', quals=[] (at pp.c:2198)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='MotePlatformC__Init__init', quals=[], storage=['static'] (at pp.c:2200)
    FuncDecl: quals=None (at pp.c:2200)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='MotePlatformC__Init__init', quals=[] (at pp.c:2200)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[], storage=['static'] (at pp.c:2202)
    FuncDecl: quals=None (at pp.c:2202)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[] (at pp.c:2202)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[], storage=['static'] (at pp.c:2204)
    FuncDecl: quals=None (at pp.c:2204)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[] (at pp.c:2204)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[], storage=['static'] (at pp.c:2208)
    FuncDecl: quals=None (at pp.c:2208)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[] (at pp.c:2208)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[], storage=['static'] (at pp.c:2210)
    FuncDecl: quals=None (at pp.c:2210)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[] (at pp.c:2210)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[], storage=['static'] (at pp.c:2216)
    FuncDecl: quals=None (at pp.c:2216)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[] (at pp.c:2216)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[], storage=['static'] (at pp.c:2218)
    FuncDecl: quals=None (at pp.c:2218)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[] (at pp.c:2218)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[], storage=['static'] (at pp.c:2220)
    FuncDecl: quals=None (at pp.c:2220)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[] (at pp.c:2220)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[], storage=['static'] (at pp.c:2221)
    FuncDecl: quals=None (at pp.c:2221)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[] (at pp.c:2221)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__McuPowerOverride__lowestState', quals=[], storage=['static'] (at pp.c:2223)
    FuncDecl: quals=None (at pp.c:2223)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__McuPowerOverride__lowestState', quals=[] (at pp.c:2223)
        IdentifierType: names=['mcu_power_t'] (at None)
  Decl: name='Msp430ClockP__Init__init', quals=[], storage=['static'] (at pp.c:2225)
    FuncDecl: quals=None (at pp.c:2225)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Init__init', quals=[] (at pp.c:2225)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430TimerP__0__VectorTimerX0__fired', quals=[], storage=['static'] (at pp.c:2227)
    FuncDecl: quals=None (at pp.c:2227)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__VectorTimerX0__fired', quals=[] (at pp.c:2227)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Overflow__fired', quals=[], storage=['static'] (at pp.c:2229)
    FuncDecl: quals=None (at pp.c:2229)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Overflow__fired', quals=[] (at pp.c:2229)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__VectorTimerX1__fired', quals=[], storage=['static'] (at pp.c:2231)
    FuncDecl: quals=None (at pp.c:2231)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__VectorTimerX1__fired', quals=[] (at pp.c:2231)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Event__default__fired', quals=[], storage=['static'] (at pp.c:2233)
    FuncDecl: quals=None (at pp.c:2233)
      ParamList:  (at pp.c:2235)
        Decl: name='arg_0x1015d0de0', quals=[], storage=[] (at pp.c:2235)
          TypeDecl: declname='arg_0x1015d0de0', quals=[] (at pp.c:2235)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Event__default__fired', quals=[] (at pp.c:2233)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Timer__get', quals=[], storage=['static'] (at pp.c:2237)
    FuncDecl: quals=None (at pp.c:2237)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Timer__get', quals=[] (at pp.c:2237)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerP__1__VectorTimerX0__fired', quals=[], storage=['static'] (at pp.c:2239)
    FuncDecl: quals=None (at pp.c:2239)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__VectorTimerX0__fired', quals=[] (at pp.c:2239)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Overflow__fired', quals=[], storage=['static'] (at pp.c:2241)
    FuncDecl: quals=None (at pp.c:2241)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Overflow__fired', quals=[] (at pp.c:2241)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__VectorTimerX1__fired', quals=[], storage=['static'] (at pp.c:2243)
    FuncDecl: quals=None (at pp.c:2243)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__VectorTimerX1__fired', quals=[] (at pp.c:2243)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Event__default__fired', quals=[], storage=['static'] (at pp.c:2245)
    FuncDecl: quals=None (at pp.c:2245)
      ParamList:  (at pp.c:2247)
        Decl: name='arg_0x1015d0de0', quals=[], storage=[] (at pp.c:2247)
          TypeDecl: declname='arg_0x1015d0de0', quals=[] (at pp.c:2247)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Event__default__fired', quals=[] (at pp.c:2245)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Timer__get', quals=[], storage=['static'] (at pp.c:2249)
    FuncDecl: quals=None (at pp.c:2249)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Timer__get', quals=[] (at pp.c:2249)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerP__1__Timer__isOverflowPending', quals=[], storage=['static'] (at pp.c:2250)
    FuncDecl: quals=None (at pp.c:2250)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Timer__isOverflowPending', quals=[] (at pp.c:2250)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430TimerCapComP__0__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2252)
    FuncDecl: quals=None (at pp.c:2252)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Capture__getEvent', quals=[] (at pp.c:2252)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2254)
    FuncDecl: quals=None (at pp.c:2254)
      ParamList:  (at pp.c:2254)
        Decl: name='time', quals=[], storage=[] (at pp.c:2254)
          TypeDecl: declname='time', quals=[] (at pp.c:2254)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Capture__default__captured', quals=[] (at pp.c:2254)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Control__getControl', quals=[], storage=['static'] (at pp.c:2256)
    FuncDecl: quals=None (at pp.c:2256)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Control__getControl', quals=[] (at pp.c:2256)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__Event__fired', quals=[], storage=['static'] (at pp.c:2258)
    FuncDecl: quals=None (at pp.c:2258)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Event__fired', quals=[] (at pp.c:2258)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2260)
    FuncDecl: quals=None (at pp.c:2260)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Compare__default__fired', quals=[] (at pp.c:2260)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Timer__overflow', quals=[], storage=['static'] (at pp.c:2262)
    FuncDecl: quals=None (at pp.c:2262)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Timer__overflow', quals=[] (at pp.c:2262)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2264)
    FuncDecl: quals=None (at pp.c:2264)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Capture__getEvent', quals=[] (at pp.c:2264)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2266)
    FuncDecl: quals=None (at pp.c:2266)
      ParamList:  (at pp.c:2266)
        Decl: name='time', quals=[], storage=[] (at pp.c:2266)
          TypeDecl: declname='time', quals=[] (at pp.c:2266)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Capture__default__captured', quals=[] (at pp.c:2266)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Control__getControl', quals=[], storage=['static'] (at pp.c:2268)
    FuncDecl: quals=None (at pp.c:2268)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Control__getControl', quals=[] (at pp.c:2268)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__Event__fired', quals=[], storage=['static'] (at pp.c:2270)
    FuncDecl: quals=None (at pp.c:2270)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Event__fired', quals=[] (at pp.c:2270)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2272)
    FuncDecl: quals=None (at pp.c:2272)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Compare__default__fired', quals=[] (at pp.c:2272)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Timer__overflow', quals=[], storage=['static'] (at pp.c:2274)
    FuncDecl: quals=None (at pp.c:2274)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Timer__overflow', quals=[] (at pp.c:2274)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2276)
    FuncDecl: quals=None (at pp.c:2276)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Capture__getEvent', quals=[] (at pp.c:2276)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2278)
    FuncDecl: quals=None (at pp.c:2278)
      ParamList:  (at pp.c:2278)
        Decl: name='time', quals=[], storage=[] (at pp.c:2278)
          TypeDecl: declname='time', quals=[] (at pp.c:2278)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Capture__default__captured', quals=[] (at pp.c:2278)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Control__getControl', quals=[], storage=['static'] (at pp.c:2280)
    FuncDecl: quals=None (at pp.c:2280)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Control__getControl', quals=[] (at pp.c:2280)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__Event__fired', quals=[], storage=['static'] (at pp.c:2282)
    FuncDecl: quals=None (at pp.c:2282)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Event__fired', quals=[] (at pp.c:2282)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2284)
    FuncDecl: quals=None (at pp.c:2284)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Compare__default__fired', quals=[] (at pp.c:2284)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Timer__overflow', quals=[], storage=['static'] (at pp.c:2286)
    FuncDecl: quals=None (at pp.c:2286)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Timer__overflow', quals=[] (at pp.c:2286)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2288)
    FuncDecl: quals=None (at pp.c:2288)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Capture__getEvent', quals=[] (at pp.c:2288)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2290)
    FuncDecl: quals=None (at pp.c:2290)
      ParamList:  (at pp.c:2290)
        Decl: name='time', quals=[], storage=[] (at pp.c:2290)
          TypeDecl: declname='time', quals=[] (at pp.c:2290)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Capture__default__captured', quals=[] (at pp.c:2290)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__getControl', quals=[], storage=['static'] (at pp.c:2292)
    FuncDecl: quals=None (at pp.c:2292)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__getControl', quals=[] (at pp.c:2292)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__enableEvents', quals=[], storage=['static'] (at pp.c:2294)
    FuncDecl: quals=None (at pp.c:2294)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__enableEvents', quals=[] (at pp.c:2294)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[], storage=['static'] (at pp.c:2296)
    FuncDecl: quals=None (at pp.c:2296)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[] (at pp.c:2296)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__disableEvents', quals=[], storage=['static'] (at pp.c:2307)
    FuncDecl: quals=None (at pp.c:2307)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__disableEvents', quals=[] (at pp.c:2307)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:2309)
    FuncDecl: quals=None (at pp.c:2309)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[] (at pp.c:2309)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Event__fired', quals=[], storage=['static'] (at pp.c:2311)
    FuncDecl: quals=None (at pp.c:2311)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Event__fired', quals=[] (at pp.c:2311)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Compare__setEvent', quals=[], storage=['static'] (at pp.c:2313)
    FuncDecl: quals=None (at pp.c:2313)
      ParamList:  (at pp.c:2313)
        Decl: name='time', quals=[], storage=[] (at pp.c:2313)
          TypeDecl: declname='time', quals=[] (at pp.c:2313)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEvent', quals=[] (at pp.c:2313)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[], storage=['static'] (at pp.c:2315)
    FuncDecl: quals=None (at pp.c:2315)
      ParamList:  (at pp.c:2315)
        Decl: name='delta', quals=[], storage=[] (at pp.c:2315)
          TypeDecl: declname='delta', quals=[] (at pp.c:2315)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[] (at pp.c:2315)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Timer__overflow', quals=[], storage=['static'] (at pp.c:2317)
    FuncDecl: quals=None (at pp.c:2317)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Timer__overflow', quals=[] (at pp.c:2317)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2319)
    FuncDecl: quals=None (at pp.c:2319)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Capture__getEvent', quals=[] (at pp.c:2319)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[], storage=['static'] (at pp.c:2321)
    FuncDecl: quals=None (at pp.c:2321)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[] (at pp.c:2321)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[], storage=['static'] (at pp.c:2323)
    FuncDecl: quals=None (at pp.c:2323)
      ParamList:  (at pp.c:2323)
        Decl: name='cm', quals=[], storage=[] (at pp.c:2323)
          TypeDecl: declname='cm', quals=[] (at pp.c:2323)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[] (at pp.c:2323)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__getControl', quals=[], storage=['static'] (at pp.c:2325)
    FuncDecl: quals=None (at pp.c:2325)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__getControl', quals=[] (at pp.c:2325)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__enableEvents', quals=[], storage=['static'] (at pp.c:2327)
    FuncDecl: quals=None (at pp.c:2327)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__enableEvents', quals=[] (at pp.c:2327)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__disableEvents', quals=[], storage=['static'] (at pp.c:2328)
    FuncDecl: quals=None (at pp.c:2328)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__disableEvents', quals=[] (at pp.c:2328)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:2330)
    FuncDecl: quals=None (at pp.c:2330)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[] (at pp.c:2330)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Event__fired', quals=[], storage=['static'] (at pp.c:2332)
    FuncDecl: quals=None (at pp.c:2332)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Event__fired', quals=[] (at pp.c:2332)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2334)
    FuncDecl: quals=None (at pp.c:2334)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Compare__default__fired', quals=[] (at pp.c:2334)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Timer__overflow', quals=[], storage=['static'] (at pp.c:2336)
    FuncDecl: quals=None (at pp.c:2336)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Timer__overflow', quals=[] (at pp.c:2336)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2338)
    FuncDecl: quals=None (at pp.c:2338)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Capture__getEvent', quals=[] (at pp.c:2338)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2340)
    FuncDecl: quals=None (at pp.c:2340)
      ParamList:  (at pp.c:2340)
        Decl: name='time', quals=[], storage=[] (at pp.c:2340)
          TypeDecl: declname='time', quals=[] (at pp.c:2340)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Capture__default__captured', quals=[] (at pp.c:2340)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__getControl', quals=[], storage=['static'] (at pp.c:2342)
    FuncDecl: quals=None (at pp.c:2342)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__getControl', quals=[] (at pp.c:2342)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__enableEvents', quals=[], storage=['static'] (at pp.c:2344)
    FuncDecl: quals=None (at pp.c:2344)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__enableEvents', quals=[] (at pp.c:2344)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[], storage=['static'] (at pp.c:2346)
    FuncDecl: quals=None (at pp.c:2346)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[] (at pp.c:2346)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__disableEvents', quals=[], storage=['static'] (at pp.c:2357)
    FuncDecl: quals=None (at pp.c:2357)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__disableEvents', quals=[] (at pp.c:2357)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:2359)
    FuncDecl: quals=None (at pp.c:2359)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[] (at pp.c:2359)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Event__fired', quals=[], storage=['static'] (at pp.c:2361)
    FuncDecl: quals=None (at pp.c:2361)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Event__fired', quals=[] (at pp.c:2361)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Compare__setEvent', quals=[], storage=['static'] (at pp.c:2363)
    FuncDecl: quals=None (at pp.c:2363)
      ParamList:  (at pp.c:2363)
        Decl: name='time', quals=[], storage=[] (at pp.c:2363)
          TypeDecl: declname='time', quals=[] (at pp.c:2363)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEvent', quals=[] (at pp.c:2363)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[], storage=['static'] (at pp.c:2365)
    FuncDecl: quals=None (at pp.c:2365)
      ParamList:  (at pp.c:2365)
        Decl: name='delta', quals=[], storage=[] (at pp.c:2365)
          TypeDecl: declname='delta', quals=[] (at pp.c:2365)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[] (at pp.c:2365)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Timer__overflow', quals=[], storage=['static'] (at pp.c:2367)
    FuncDecl: quals=None (at pp.c:2367)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Timer__overflow', quals=[] (at pp.c:2367)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2369)
    FuncDecl: quals=None (at pp.c:2369)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Capture__getEvent', quals=[] (at pp.c:2369)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2371)
    FuncDecl: quals=None (at pp.c:2371)
      ParamList:  (at pp.c:2371)
        Decl: name='time', quals=[], storage=[] (at pp.c:2371)
          TypeDecl: declname='time', quals=[] (at pp.c:2371)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Capture__default__captured', quals=[] (at pp.c:2371)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Control__getControl', quals=[], storage=['static'] (at pp.c:2373)
    FuncDecl: quals=None (at pp.c:2373)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Control__getControl', quals=[] (at pp.c:2373)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__Event__fired', quals=[], storage=['static'] (at pp.c:2375)
    FuncDecl: quals=None (at pp.c:2375)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Event__fired', quals=[] (at pp.c:2375)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2377)
    FuncDecl: quals=None (at pp.c:2377)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Compare__default__fired', quals=[] (at pp.c:2377)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Timer__overflow', quals=[], storage=['static'] (at pp.c:2379)
    FuncDecl: quals=None (at pp.c:2379)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Timer__overflow', quals=[] (at pp.c:2379)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2381)
    FuncDecl: quals=None (at pp.c:2381)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Capture__getEvent', quals=[] (at pp.c:2381)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2383)
    FuncDecl: quals=None (at pp.c:2383)
      ParamList:  (at pp.c:2383)
        Decl: name='time', quals=[], storage=[] (at pp.c:2383)
          TypeDecl: declname='time', quals=[] (at pp.c:2383)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Capture__default__captured', quals=[] (at pp.c:2383)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Control__getControl', quals=[], storage=['static'] (at pp.c:2385)
    FuncDecl: quals=None (at pp.c:2385)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Control__getControl', quals=[] (at pp.c:2385)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__Event__fired', quals=[], storage=['static'] (at pp.c:2387)
    FuncDecl: quals=None (at pp.c:2387)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Event__fired', quals=[] (at pp.c:2387)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2389)
    FuncDecl: quals=None (at pp.c:2389)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Compare__default__fired', quals=[] (at pp.c:2389)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Timer__overflow', quals=[], storage=['static'] (at pp.c:2391)
    FuncDecl: quals=None (at pp.c:2391)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Timer__overflow', quals=[] (at pp.c:2391)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2393)
    FuncDecl: quals=None (at pp.c:2393)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Capture__getEvent', quals=[] (at pp.c:2393)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2395)
    FuncDecl: quals=None (at pp.c:2395)
      ParamList:  (at pp.c:2395)
        Decl: name='time', quals=[], storage=[] (at pp.c:2395)
          TypeDecl: declname='time', quals=[] (at pp.c:2395)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Capture__default__captured', quals=[] (at pp.c:2395)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Control__getControl', quals=[], storage=['static'] (at pp.c:2397)
    FuncDecl: quals=None (at pp.c:2397)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Control__getControl', quals=[] (at pp.c:2397)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__Event__fired', quals=[], storage=['static'] (at pp.c:2399)
    FuncDecl: quals=None (at pp.c:2399)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Event__fired', quals=[] (at pp.c:2399)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2401)
    FuncDecl: quals=None (at pp.c:2401)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Compare__default__fired', quals=[] (at pp.c:2401)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Timer__overflow', quals=[], storage=['static'] (at pp.c:2403)
    FuncDecl: quals=None (at pp.c:2403)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Timer__overflow', quals=[] (at pp.c:2403)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2405)
    FuncDecl: quals=None (at pp.c:2405)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Capture__getEvent', quals=[] (at pp.c:2405)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2407)
    FuncDecl: quals=None (at pp.c:2407)
      ParamList:  (at pp.c:2407)
        Decl: name='time', quals=[], storage=[] (at pp.c:2407)
          TypeDecl: declname='time', quals=[] (at pp.c:2407)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Capture__default__captured', quals=[] (at pp.c:2407)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Control__getControl', quals=[], storage=['static'] (at pp.c:2409)
    FuncDecl: quals=None (at pp.c:2409)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Control__getControl', quals=[] (at pp.c:2409)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__Event__fired', quals=[], storage=['static'] (at pp.c:2411)
    FuncDecl: quals=None (at pp.c:2411)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Event__fired', quals=[] (at pp.c:2411)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2413)
    FuncDecl: quals=None (at pp.c:2413)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Compare__default__fired', quals=[] (at pp.c:2413)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Timer__overflow', quals=[], storage=['static'] (at pp.c:2415)
    FuncDecl: quals=None (at pp.c:2415)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Timer__overflow', quals=[] (at pp.c:2415)
        IdentifierType: names=['void'] (at None)
  Decl: name='McuSleepC__McuSleep__sleep', quals=[], storage=['static'] (at pp.c:2417)
    FuncDecl: quals=None (at pp.c:2417)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='McuSleepC__McuSleep__sleep', quals=[] (at pp.c:2417)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__TaskBasic__postTask', quals=[], storage=['static'] (at pp.c:2419)
    FuncDecl: quals=None (at pp.c:2419)
      ParamList:  (at pp.c:2421)
        Decl: name='arg_0x101487d50', quals=[], storage=[] (at pp.c:2421)
          TypeDecl: declname='arg_0x101487d50', quals=[] (at pp.c:2421)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__TaskBasic__postTask', quals=[] (at pp.c:2419)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SchedulerBasicP__TaskBasic__default__runTask', quals=[], storage=['static'] (at pp.c:2423)
    FuncDecl: quals=None (at pp.c:2423)
      ParamList:  (at pp.c:2425)
        Decl: name='arg_0x101487d50', quals=[], storage=[] (at pp.c:2425)
          TypeDecl: declname='arg_0x101487d50', quals=[] (at pp.c:2425)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__TaskBasic__default__runTask', quals=[] (at pp.c:2423)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__init', quals=[], storage=['static'] (at pp.c:2427)
    FuncDecl: quals=None (at pp.c:2427)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__init', quals=[] (at pp.c:2427)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__taskLoop', quals=[], storage=['static'] (at pp.c:2429)
    FuncDecl: quals=None (at pp.c:2429)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__taskLoop', quals=[] (at pp.c:2429)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__runNextTask', quals=[], storage=['static'] (at pp.c:2431)
    FuncDecl: quals=None (at pp.c:2431)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__runNextTask', quals=[] (at pp.c:2431)
        IdentifierType: names=['bool'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialRequestSampleMsgsReceive__receive', quals=[], storage=['static'] (at pp.c:2439)
    FuncDecl: quals=None (at pp.c:2439)
      ParamList:  (at pp.c:2441)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2441)
          PtrDecl: quals=[] (at pp.c:2441)
            TypeDecl: declname='msg', quals=[] (at pp.c:2441)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:2442)
          PtrDecl: quals=[] (at pp.c:2442)
            TypeDecl: declname='payload', quals=[] (at pp.c:2442)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2448)
          TypeDecl: declname='len', quals=[] (at pp.c:2448)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:2435)
        TypeDecl: declname='LowPowerSensingBaseC__SerialRequestSampleMsgsReceive__receive', quals=[] (at pp.c:2439)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='LowPowerSensingBaseC__Boot__booted', quals=[], storage=['static'] (at pp.c:2450)
    FuncDecl: quals=None (at pp.c:2450)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__Boot__booted', quals=[] (at pp.c:2450)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioAMControl__startDone', quals=[], storage=['static'] (at pp.c:2452)
    FuncDecl: quals=None (at pp.c:2452)
      ParamList:  (at pp.c:2452)
        Decl: name='error', quals=[], storage=[] (at pp.c:2452)
          TypeDecl: declname='error', quals=[] (at pp.c:2452)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__RadioAMControl__startDone', quals=[] (at pp.c:2452)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioAMControl__stopDone', quals=[], storage=['static'] (at pp.c:2454)
    FuncDecl: quals=None (at pp.c:2454)
      ParamList:  (at pp.c:2454)
        Decl: name='error', quals=[], storage=[] (at pp.c:2454)
          TypeDecl: declname='error', quals=[] (at pp.c:2454)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__RadioAMControl__stopDone', quals=[] (at pp.c:2454)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialAMControl__startDone', quals=[], storage=['static'] (at pp.c:2456)
    FuncDecl: quals=None (at pp.c:2456)
      ParamList:  (at pp.c:2456)
        Decl: name='error', quals=[], storage=[] (at pp.c:2456)
          TypeDecl: declname='error', quals=[] (at pp.c:2456)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__SerialAMControl__startDone', quals=[] (at pp.c:2456)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialAMControl__stopDone', quals=[], storage=['static'] (at pp.c:2458)
    FuncDecl: quals=None (at pp.c:2458)
      ParamList:  (at pp.c:2458)
        Decl: name='error', quals=[], storage=[] (at pp.c:2458)
          TypeDecl: declname='error', quals=[] (at pp.c:2458)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__SerialAMControl__stopDone', quals=[] (at pp.c:2458)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialSampleMsgSend__sendDone', quals=[], storage=['static'] (at pp.c:2460)
    FuncDecl: quals=None (at pp.c:2460)
      ParamList:  (at pp.c:2462)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2462)
          PtrDecl: quals=[] (at pp.c:2462)
            TypeDecl: declname='msg', quals=[] (at pp.c:2462)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2469)
          TypeDecl: declname='error', quals=[] (at pp.c:2469)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__SerialSampleMsgSend__sendDone', quals=[] (at pp.c:2460)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__sendDone', quals=[], storage=['static'] (at pp.c:2471)
    FuncDecl: quals=None (at pp.c:2471)
      ParamList:  (at pp.c:2473)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2473)
          PtrDecl: quals=[] (at pp.c:2473)
            TypeDecl: declname='msg', quals=[] (at pp.c:2473)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2480)
          TypeDecl: declname='error', quals=[] (at pp.c:2480)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__sendDone', quals=[] (at pp.c:2471)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioSampleMsgReceive__receive', quals=[], storage=['static'] (at pp.c:2488)
    FuncDecl: quals=None (at pp.c:2488)
      ParamList:  (at pp.c:2490)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2490)
          PtrDecl: quals=[] (at pp.c:2490)
            TypeDecl: declname='msg', quals=[] (at pp.c:2490)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:2491)
          PtrDecl: quals=[] (at pp.c:2491)
            TypeDecl: declname='payload', quals=[] (at pp.c:2491)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2497)
          TypeDecl: declname='len', quals=[] (at pp.c:2497)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:2484)
        TypeDecl: declname='LowPowerSensingBaseC__RadioSampleMsgReceive__receive', quals=[] (at pp.c:2488)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='QueueC__0__Queue__head', quals=[], storage=['static'] (at pp.c:2503)
    FuncDecl: quals=None (at pp.c:2503)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__Queue__head', quals=[] (at pp.c:2503)
        IdentifierType: names=['QueueC__0__Queue__t'] (at None)
  Decl: name='QueueC__0__Queue__enqueue', quals=[], storage=['static'] (at pp.c:2505)
    FuncDecl: quals=None (at pp.c:2505)
      ParamList:  (at pp.c:2507)
        Decl: name='newVal', quals=[], storage=[] (at pp.c:2507)
          TypeDecl: declname='newVal', quals=[] (at pp.c:2507)
            IdentifierType: names=['QueueC__0__Queue__t'] (at None)
      TypeDecl: declname='QueueC__0__Queue__enqueue', quals=[] (at pp.c:2505)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='QueueC__0__Queue__maxSize', quals=[], storage=['static'] (at pp.c:2509)
    FuncDecl: quals=None (at pp.c:2509)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__Queue__maxSize', quals=[] (at pp.c:2509)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='QueueC__0__Queue__dequeue', quals=[], storage=['static'] (at pp.c:2515)
    FuncDecl: quals=None (at pp.c:2515)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__Queue__dequeue', quals=[] (at pp.c:2515)
        IdentifierType: names=['QueueC__0__Queue__t'] (at None)
  Decl: name='QueueC__0__Queue__empty', quals=[], storage=['static'] (at pp.c:2517)
    FuncDecl: quals=None (at pp.c:2517)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__Queue__empty', quals=[] (at pp.c:2517)
        IdentifierType: names=['bool'] (at None)
  Decl: name='QueueC__0__Queue__size', quals=[], storage=['static'] (at pp.c:2525)
    FuncDecl: quals=None (at pp.c:2525)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__Queue__size', quals=[] (at pp.c:2525)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='LedsP__Init__init', quals=[], storage=['static'] (at pp.c:2527)
    FuncDecl: quals=None (at pp.c:2527)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Init__init', quals=[] (at pp.c:2527)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LedsP__Leds__led0Off', quals=[], storage=['static'] (at pp.c:2529)
    FuncDecl: quals=None (at pp.c:2529)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led0Off', quals=[] (at pp.c:2529)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Leds__led2Toggle', quals=[], storage=['static'] (at pp.c:2531)
    FuncDecl: quals=None (at pp.c:2531)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led2Toggle', quals=[] (at pp.c:2531)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Leds__led0On', quals=[], storage=['static'] (at pp.c:2533)
    FuncDecl: quals=None (at pp.c:2533)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led0On', quals=[] (at pp.c:2533)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__0__IO__get', quals=[], storage=['static'] (at pp.c:2535)
    FuncDecl: quals=None (at pp.c:2535)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__0__IO__get', quals=[] (at pp.c:2535)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__0__IO__getRaw', quals=[], storage=['static'] (at pp.c:2537)
    FuncDecl: quals=None (at pp.c:2537)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__0__IO__getRaw', quals=[] (at pp.c:2537)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__3__IO__get', quals=[], storage=['static'] (at pp.c:2544)
    FuncDecl: quals=None (at pp.c:2544)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__3__IO__get', quals=[] (at pp.c:2544)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__3__IO__getRaw', quals=[], storage=['static'] (at pp.c:2546)
    FuncDecl: quals=None (at pp.c:2546)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__3__IO__getRaw', quals=[] (at pp.c:2546)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__makeInput', quals=[], storage=['static'] (at pp.c:2548)
    FuncDecl: quals=None (at pp.c:2548)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__makeInput', quals=[] (at pp.c:2548)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__get', quals=[], storage=['static'] (at pp.c:2550)
    FuncDecl: quals=None (at pp.c:2550)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__get', quals=[] (at pp.c:2550)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__getRaw', quals=[], storage=['static'] (at pp.c:2552)
    FuncDecl: quals=None (at pp.c:2552)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__getRaw', quals=[] (at pp.c:2552)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__makeInput', quals=[], storage=['static'] (at pp.c:2554)
    FuncDecl: quals=None (at pp.c:2554)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeInput', quals=[] (at pp.c:2554)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[], storage=['static'] (at pp.c:2561)
    FuncDecl: quals=None (at pp.c:2561)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[] (at pp.c:2561)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__get', quals=[], storage=['static'] (at pp.c:2563)
    FuncDecl: quals=None (at pp.c:2563)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__get', quals=[] (at pp.c:2563)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__getRaw', quals=[], storage=['static'] (at pp.c:2565)
    FuncDecl: quals=None (at pp.c:2565)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__getRaw', quals=[] (at pp.c:2565)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__clr', quals=[], storage=['static'] (at pp.c:2567)
    FuncDecl: quals=None (at pp.c:2567)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__clr', quals=[] (at pp.c:2567)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2569)
    FuncDecl: quals=None (at pp.c:2569)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[] (at pp.c:2569)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:2571)
    FuncDecl: quals=None (at pp.c:2571)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[] (at pp.c:2571)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2578)
    FuncDecl: quals=None (at pp.c:2578)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[] (at pp.c:2578)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:2580)
    FuncDecl: quals=None (at pp.c:2580)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[] (at pp.c:2580)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2587)
    FuncDecl: quals=None (at pp.c:2587)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[] (at pp.c:2587)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:2589)
    FuncDecl: quals=None (at pp.c:2589)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[] (at pp.c:2589)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2596)
    FuncDecl: quals=None (at pp.c:2596)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[] (at pp.c:2596)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2598)
    FuncDecl: quals=None (at pp.c:2598)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[] (at pp.c:2598)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__22__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2600)
    FuncDecl: quals=None (at pp.c:2600)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__22__IO__selectIOFunc', quals=[] (at pp.c:2600)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__22__IO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:2602)
    FuncDecl: quals=None (at pp.c:2602)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__22__IO__selectModuleFunc', quals=[] (at pp.c:2602)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__23__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2609)
    FuncDecl: quals=None (at pp.c:2609)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__23__IO__selectIOFunc', quals=[] (at pp.c:2609)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__23__IO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:2611)
    FuncDecl: quals=None (at pp.c:2611)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__23__IO__selectModuleFunc', quals=[] (at pp.c:2611)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__makeInput', quals=[], storage=['static'] (at pp.c:2613)
    FuncDecl: quals=None (at pp.c:2613)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__makeInput', quals=[] (at pp.c:2613)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__get', quals=[], storage=['static'] (at pp.c:2615)
    FuncDecl: quals=None (at pp.c:2615)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__get', quals=[] (at pp.c:2615)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2617)
    FuncDecl: quals=None (at pp.c:2617)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[] (at pp.c:2617)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__getRaw', quals=[], storage=['static'] (at pp.c:2619)
    FuncDecl: quals=None (at pp.c:2619)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__getRaw', quals=[] (at pp.c:2619)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:2621)
    FuncDecl: quals=None (at pp.c:2621)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[] (at pp.c:2621)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[], storage=['static'] (at pp.c:2623)
    FuncDecl: quals=None (at pp.c:2623)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[] (at pp.c:2623)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__set', quals=[], storage=['static'] (at pp.c:2625)
    FuncDecl: quals=None (at pp.c:2625)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__set', quals=[] (at pp.c:2625)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__clr', quals=[], storage=['static'] (at pp.c:2630)
    FuncDecl: quals=None (at pp.c:2630)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__clr', quals=[] (at pp.c:2630)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[], storage=['static'] (at pp.c:2632)
    FuncDecl: quals=None (at pp.c:2632)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[] (at pp.c:2632)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__set', quals=[], storage=['static'] (at pp.c:2634)
    FuncDecl: quals=None (at pp.c:2634)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__set', quals=[] (at pp.c:2634)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__clr', quals=[], storage=['static'] (at pp.c:2639)
    FuncDecl: quals=None (at pp.c:2639)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__clr', quals=[] (at pp.c:2639)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[], storage=['static'] (at pp.c:2641)
    FuncDecl: quals=None (at pp.c:2641)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[] (at pp.c:2641)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__set', quals=[], storage=['static'] (at pp.c:2643)
    FuncDecl: quals=None (at pp.c:2643)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__set', quals=[] (at pp.c:2643)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__clr', quals=[], storage=['static'] (at pp.c:2648)
    FuncDecl: quals=None (at pp.c:2648)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__clr', quals=[] (at pp.c:2648)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__33__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2650)
    FuncDecl: quals=None (at pp.c:2650)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__33__IO__selectIOFunc', quals=[] (at pp.c:2650)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__34__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2652)
    FuncDecl: quals=None (at pp.c:2652)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__34__IO__selectIOFunc', quals=[] (at pp.c:2652)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__35__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:2654)
    FuncDecl: quals=None (at pp.c:2654)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__35__IO__selectIOFunc', quals=[] (at pp.c:2654)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[], storage=['static'] (at pp.c:2656)
    FuncDecl: quals=None (at pp.c:2656)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[] (at pp.c:2656)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__set', quals=[], storage=['static'] (at pp.c:2658)
    FuncDecl: quals=None (at pp.c:2658)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__set', quals=[] (at pp.c:2658)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__clr', quals=[], storage=['static'] (at pp.c:2663)
    FuncDecl: quals=None (at pp.c:2663)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__clr', quals=[] (at pp.c:2663)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[], storage=['static'] (at pp.c:2665)
    FuncDecl: quals=None (at pp.c:2665)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[] (at pp.c:2665)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__37__IO__set', quals=[], storage=['static'] (at pp.c:2667)
    FuncDecl: quals=None (at pp.c:2667)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__37__IO__set', quals=[] (at pp.c:2667)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__toggle', quals=[], storage=['static'] (at pp.c:2677)
    FuncDecl: quals=None (at pp.c:2677)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__toggle', quals=[] (at pp.c:2677)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[], storage=['static'] (at pp.c:2679)
    FuncDecl: quals=None (at pp.c:2679)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[] (at pp.c:2679)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__set', quals=[], storage=['static'] (at pp.c:2681)
    FuncDecl: quals=None (at pp.c:2681)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__set', quals=[] (at pp.c:2681)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:2683)
    FuncDecl: quals=None (at pp.c:2683)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__makeOutput', quals=[] (at pp.c:2683)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__set', quals=[], storage=['static'] (at pp.c:2685)
    FuncDecl: quals=None (at pp.c:2685)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__set', quals=[] (at pp.c:2685)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:2686)
    FuncDecl: quals=None (at pp.c:2686)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__clr', quals=[] (at pp.c:2686)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:2691)
    FuncDecl: quals=None (at pp.c:2691)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__GeneralIO__makeOutput', quals=[] (at pp.c:2691)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__GeneralIO__set', quals=[], storage=['static'] (at pp.c:2693)
    FuncDecl: quals=None (at pp.c:2693)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__GeneralIO__set', quals=[] (at pp.c:2693)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__toggle', quals=[], storage=['static'] (at pp.c:2695)
    FuncDecl: quals=None (at pp.c:2695)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__toggle', quals=[] (at pp.c:2695)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:2699)
    FuncDecl: quals=None (at pp.c:2699)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__makeOutput', quals=[] (at pp.c:2699)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__set', quals=[], storage=['static'] (at pp.c:2701)
    FuncDecl: quals=None (at pp.c:2701)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__set', quals=[] (at pp.c:2701)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__SubSend__sendDone', quals=[], storage=['static'] (at pp.c:2703)
    FuncDecl: quals=None (at pp.c:2703)
      ParamList:  (at pp.c:2705)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2705)
          PtrDecl: quals=[] (at pp.c:2705)
            TypeDecl: declname='msg', quals=[] (at pp.c:2705)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2709)
          TypeDecl: declname='error', quals=[] (at pp.c:2709)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__SubSend__sendDone', quals=[] (at pp.c:2703)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__SubReceive__receive', quals=[], storage=['static'] (at pp.c:2717)
    FuncDecl: quals=None (at pp.c:2717)
      ParamList:  (at pp.c:2719)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2719)
          PtrDecl: quals=[] (at pp.c:2719)
            TypeDecl: declname='msg', quals=[] (at pp.c:2719)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:2720)
          PtrDecl: quals=[] (at pp.c:2720)
            TypeDecl: declname='payload', quals=[] (at pp.c:2720)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2726)
          TypeDecl: declname='len', quals=[] (at pp.c:2726)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:2713)
        TypeDecl: declname='SerialActiveMessageP__0__SubReceive__receive', quals=[] (at pp.c:2717)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='SerialActiveMessageP__0__AMSend__send', quals=[], storage=['static'] (at pp.c:2728)
    FuncDecl: quals=None (at pp.c:2728)
      ParamList:  (at pp.c:2730)
        Decl: name='arg_0x10199d020', quals=[], storage=[] (at pp.c:2730)
          TypeDecl: declname='arg_0x10199d020', quals=[] (at pp.c:2730)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2732)
          TypeDecl: declname='addr', quals=[] (at pp.c:2732)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2734)
          PtrDecl: quals=[] (at pp.c:2734)
            TypeDecl: declname='msg', quals=[] (at pp.c:2734)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2743)
          TypeDecl: declname='len', quals=[] (at pp.c:2743)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMSend__send', quals=[] (at pp.c:2728)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialActiveMessageP__0__Packet__payloadLength', quals=[], storage=['static'] (at pp.c:2745)
    FuncDecl: quals=None (at pp.c:2745)
      ParamList:  (at pp.c:2747)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2747)
          PtrDecl: quals=[] (at pp.c:2747)
            TypeDecl: declname='msg', quals=[] (at pp.c:2747)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__Packet__payloadLength', quals=[] (at pp.c:2745)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialActiveMessageP__0__Packet__getPayload', quals=[], storage=['static'] (at pp.c:2754)
    FuncDecl: quals=None (at pp.c:2754)
      ParamList:  (at pp.c:2756)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2756)
          PtrDecl: quals=[] (at pp.c:2756)
            TypeDecl: declname='msg', quals=[] (at pp.c:2756)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2761)
          TypeDecl: declname='len', quals=[] (at pp.c:2761)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:2751)
        TypeDecl: declname='SerialActiveMessageP__0__Packet__getPayload', quals=[] (at pp.c:2754)
          IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__Packet__maxPayloadLength', quals=[], storage=['static'] (at pp.c:2763)
    FuncDecl: quals=None (at pp.c:2763)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__Packet__maxPayloadLength', quals=[] (at pp.c:2763)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialActiveMessageP__0__Packet__setPayloadLength', quals=[], storage=['static'] (at pp.c:2765)
    FuncDecl: quals=None (at pp.c:2765)
      ParamList:  (at pp.c:2767)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2767)
          PtrDecl: quals=[] (at pp.c:2767)
            TypeDecl: declname='msg', quals=[] (at pp.c:2767)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2771)
          TypeDecl: declname='len', quals=[] (at pp.c:2771)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__Packet__setPayloadLength', quals=[] (at pp.c:2765)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__Receive__default__receive', quals=[], storage=['static'] (at pp.c:2779)
    FuncDecl: quals=None (at pp.c:2779)
      ParamList:  (at pp.c:2781)
        Decl: name='arg_0x10199c158', quals=[], storage=[] (at pp.c:2781)
          TypeDecl: declname='arg_0x10199c158', quals=[] (at pp.c:2781)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2783)
          PtrDecl: quals=[] (at pp.c:2783)
            TypeDecl: declname='msg', quals=[] (at pp.c:2783)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:2784)
          PtrDecl: quals=[] (at pp.c:2784)
            TypeDecl: declname='payload', quals=[] (at pp.c:2784)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2790)
          TypeDecl: declname='len', quals=[] (at pp.c:2790)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:2775)
        TypeDecl: declname='SerialActiveMessageP__0__Receive__default__receive', quals=[] (at pp.c:2779)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='SerialActiveMessageP__0__AMPacket__destination', quals=[], storage=['static'] (at pp.c:2792)
    FuncDecl: quals=None (at pp.c:2792)
      ParamList:  (at pp.c:2794)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:2794)
          PtrDecl: quals=[] (at pp.c:2794)
            TypeDecl: declname='amsg', quals=[] (at pp.c:2794)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMPacket__destination', quals=[] (at pp.c:2792)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='SerialActiveMessageP__0__AMPacket__setDestination', quals=[], storage=['static'] (at pp.c:2796)
    FuncDecl: quals=None (at pp.c:2796)
      ParamList:  (at pp.c:2798)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:2798)
          PtrDecl: quals=[] (at pp.c:2798)
            TypeDecl: declname='amsg', quals=[] (at pp.c:2798)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2802)
          TypeDecl: declname='addr', quals=[] (at pp.c:2802)
            IdentifierType: names=['am_addr_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMPacket__setDestination', quals=[] (at pp.c:2796)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__AMPacket__type', quals=[], storage=['static'] (at pp.c:2804)
    FuncDecl: quals=None (at pp.c:2804)
      ParamList:  (at pp.c:2806)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:2806)
          PtrDecl: quals=[] (at pp.c:2806)
            TypeDecl: declname='amsg', quals=[] (at pp.c:2806)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMPacket__type', quals=[] (at pp.c:2804)
        IdentifierType: names=['am_id_t'] (at None)
  Decl: name='SerialActiveMessageP__0__AMPacket__setType', quals=[], storage=['static'] (at pp.c:2808)
    FuncDecl: quals=None (at pp.c:2808)
      ParamList:  (at pp.c:2810)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:2810)
          PtrDecl: quals=[] (at pp.c:2810)
            TypeDecl: declname='amsg', quals=[] (at pp.c:2810)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='t', quals=[], storage=[] (at pp.c:2814)
          TypeDecl: declname='t', quals=[] (at pp.c:2814)
            IdentifierType: names=['am_id_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMPacket__setType', quals=[] (at pp.c:2808)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SplitControl__start', quals=[], storage=['static'] (at pp.c:2816)
    FuncDecl: quals=None (at pp.c:2816)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SplitControl__start', quals=[] (at pp.c:2816)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__stopDoneTask__runTask', quals=[], storage=['static'] (at pp.c:2818)
    FuncDecl: quals=None (at pp.c:2818)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__stopDoneTask__runTask', quals=[] (at pp.c:2818)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__RunTx__runTask', quals=[], storage=['static'] (at pp.c:2820)
    FuncDecl: quals=None (at pp.c:2820)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__RunTx__runTask', quals=[] (at pp.c:2820)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__Init__init', quals=[], storage=['static'] (at pp.c:2822)
    FuncDecl: quals=None (at pp.c:2822)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__Init__init', quals=[] (at pp.c:2822)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__SerialFlush__flushDone', quals=[], storage=['static'] (at pp.c:2824)
    FuncDecl: quals=None (at pp.c:2824)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFlush__flushDone', quals=[] (at pp.c:2824)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SerialFlush__default__flush', quals=[], storage=['static'] (at pp.c:2826)
    FuncDecl: quals=None (at pp.c:2826)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFlush__default__flush', quals=[] (at pp.c:2826)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__startDoneTask__runTask', quals=[], storage=['static'] (at pp.c:2828)
    FuncDecl: quals=None (at pp.c:2828)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__startDoneTask__runTask', quals=[] (at pp.c:2828)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SerialFrameComm__dataReceived', quals=[], storage=['static'] (at pp.c:2830)
    FuncDecl: quals=None (at pp.c:2830)
      ParamList:  (at pp.c:2830)
        Decl: name='data', quals=[], storage=[] (at pp.c:2830)
          TypeDecl: declname='data', quals=[] (at pp.c:2830)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__SerialFrameComm__dataReceived', quals=[] (at pp.c:2830)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SerialFrameComm__putDone', quals=[], storage=['static'] (at pp.c:2836)
    FuncDecl: quals=None (at pp.c:2836)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFrameComm__putDone', quals=[] (at pp.c:2836)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SerialFrameComm__delimiterReceived', quals=[], storage=['static'] (at pp.c:2838)
    FuncDecl: quals=None (at pp.c:2838)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFrameComm__delimiterReceived', quals=[] (at pp.c:2838)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__defaultSerialFlushTask__runTask', quals=[], storage=['static'] (at pp.c:2840)
    FuncDecl: quals=None (at pp.c:2840)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__defaultSerialFlushTask__runTask', quals=[] (at pp.c:2840)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SendBytePacket__completeSend', quals=[], storage=['static'] (at pp.c:2842)
    FuncDecl: quals=None (at pp.c:2842)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SendBytePacket__completeSend', quals=[] (at pp.c:2842)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__SendBytePacket__startSend', quals=[], storage=['static'] (at pp.c:2844)
    FuncDecl: quals=None (at pp.c:2844)
      ParamList:  (at pp.c:2844)
        Decl: name='first_byte', quals=[], storage=[] (at pp.c:2844)
          TypeDecl: declname='first_byte', quals=[] (at pp.c:2844)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__SendBytePacket__startSend', quals=[] (at pp.c:2844)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialDispatcherP__0__receiveTask__runTask', quals=[], storage=['static'] (at pp.c:2846)
    FuncDecl: quals=None (at pp.c:2846)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__receiveTask__runTask', quals=[] (at pp.c:2846)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__Send__send', quals=[], storage=['static'] (at pp.c:2848)
    FuncDecl: quals=None (at pp.c:2848)
      ParamList:  (at pp.c:2850)
        Decl: name='arg_0x101ace748', quals=[], storage=[] (at pp.c:2850)
          TypeDecl: declname='arg_0x101ace748', quals=[] (at pp.c:2850)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2852)
          PtrDecl: quals=[] (at pp.c:2852)
            TypeDecl: declname='msg', quals=[] (at pp.c:2852)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2860)
          TypeDecl: declname='len', quals=[] (at pp.c:2860)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__Send__send', quals=[] (at pp.c:2848)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialDispatcherP__0__Send__default__sendDone', quals=[], storage=['static'] (at pp.c:2862)
    FuncDecl: quals=None (at pp.c:2862)
      ParamList:  (at pp.c:2864)
        Decl: name='arg_0x101ace748', quals=[], storage=[] (at pp.c:2864)
          TypeDecl: declname='arg_0x101ace748', quals=[] (at pp.c:2864)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2866)
          PtrDecl: quals=[] (at pp.c:2866)
            TypeDecl: declname='msg', quals=[] (at pp.c:2866)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2870)
          TypeDecl: declname='error', quals=[] (at pp.c:2870)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__Send__default__sendDone', quals=[] (at pp.c:2862)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__signalSendDone__runTask', quals=[], storage=['static'] (at pp.c:2872)
    FuncDecl: quals=None (at pp.c:2872)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__signalSendDone__runTask', quals=[] (at pp.c:2872)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__Receive__default__receive', quals=[], storage=['static'] (at pp.c:2880)
    FuncDecl: quals=None (at pp.c:2880)
      ParamList:  (at pp.c:2882)
        Decl: name='arg_0x101ad1c50', quals=[], storage=[] (at pp.c:2882)
          TypeDecl: declname='arg_0x101ad1c50', quals=[] (at pp.c:2882)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2884)
          PtrDecl: quals=[] (at pp.c:2884)
            TypeDecl: declname='msg', quals=[] (at pp.c:2884)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:2885)
          PtrDecl: quals=[] (at pp.c:2885)
            TypeDecl: declname='payload', quals=[] (at pp.c:2885)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2891)
          TypeDecl: declname='len', quals=[] (at pp.c:2891)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:2876)
        TypeDecl: declname='SerialDispatcherP__0__Receive__default__receive', quals=[] (at pp.c:2880)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='SerialDispatcherP__0__PacketInfo__default__upperLength', quals=[], storage=['static'] (at pp.c:2893)
    FuncDecl: quals=None (at pp.c:2893)
      ParamList:  (at pp.c:2895)
        Decl: name='arg_0x101acdaa8', quals=[], storage=[] (at pp.c:2895)
          TypeDecl: declname='arg_0x101acdaa8', quals=[] (at pp.c:2895)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2897)
          PtrDecl: quals=[] (at pp.c:2897)
            TypeDecl: declname='msg', quals=[] (at pp.c:2897)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='dataLinkLen', quals=[], storage=[] (at pp.c:2897)
          TypeDecl: declname='dataLinkLen', quals=[] (at pp.c:2897)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__PacketInfo__default__upperLength', quals=[] (at pp.c:2893)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__PacketInfo__default__offset', quals=[], storage=['static'] (at pp.c:2899)
    FuncDecl: quals=None (at pp.c:2899)
      ParamList:  (at pp.c:2901)
        Decl: name='arg_0x101acdaa8', quals=[], storage=[] (at pp.c:2901)
          TypeDecl: declname='arg_0x101acdaa8', quals=[] (at pp.c:2901)
            IdentifierType: names=['uart_id_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__PacketInfo__default__offset', quals=[] (at pp.c:2899)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__PacketInfo__default__dataLinkLength', quals=[], storage=['static'] (at pp.c:2903)
    FuncDecl: quals=None (at pp.c:2903)
      ParamList:  (at pp.c:2905)
        Decl: name='arg_0x101acdaa8', quals=[], storage=[] (at pp.c:2905)
          TypeDecl: declname='arg_0x101acdaa8', quals=[] (at pp.c:2905)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:2907)
          PtrDecl: quals=[] (at pp.c:2907)
            TypeDecl: declname='msg', quals=[] (at pp.c:2907)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='upperLen', quals=[], storage=[] (at pp.c:2907)
          TypeDecl: declname='upperLen', quals=[] (at pp.c:2907)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__PacketInfo__default__dataLinkLength', quals=[] (at pp.c:2903)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__SendBytePacket__nextByte', quals=[], storage=['static'] (at pp.c:2909)
    FuncDecl: quals=None (at pp.c:2909)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__SendBytePacket__nextByte', quals=[] (at pp.c:2909)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__SendBytePacket__sendCompleted', quals=[], storage=['static'] (at pp.c:2919)
    FuncDecl: quals=None (at pp.c:2919)
      ParamList:  (at pp.c:2919)
        Decl: name='error', quals=[], storage=[] (at pp.c:2919)
          TypeDecl: declname='error', quals=[] (at pp.c:2919)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__SendBytePacket__sendCompleted', quals=[] (at pp.c:2919)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__ReceiveBytePacket__startPacket', quals=[], storage=['static'] (at pp.c:2921)
    FuncDecl: quals=None (at pp.c:2921)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__ReceiveBytePacket__startPacket', quals=[] (at pp.c:2921)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialDispatcherP__0__ReceiveBytePacket__byteReceived', quals=[], storage=['static'] (at pp.c:2928)
    FuncDecl: quals=None (at pp.c:2928)
      ParamList:  (at pp.c:2928)
        Decl: name='data', quals=[], storage=[] (at pp.c:2928)
          TypeDecl: declname='data', quals=[] (at pp.c:2928)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__ReceiveBytePacket__byteReceived', quals=[] (at pp.c:2928)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__ReceiveBytePacket__endPacket', quals=[], storage=['static'] (at pp.c:2939)
    FuncDecl: quals=None (at pp.c:2939)
      ParamList:  (at pp.c:2939)
        Decl: name='result', quals=[], storage=[] (at pp.c:2939)
          TypeDecl: declname='result', quals=[] (at pp.c:2939)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__ReceiveBytePacket__endPacket', quals=[] (at pp.c:2939)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__UartStream__receivedByte', quals=[], storage=['static'] (at pp.c:2941)
    FuncDecl: quals=None (at pp.c:2941)
      ParamList:  (at pp.c:2941)
        Decl: name='byte', quals=[], storage=[] (at pp.c:2941)
          TypeDecl: declname='byte', quals=[] (at pp.c:2941)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HdlcTranslateC__UartStream__receivedByte', quals=[] (at pp.c:2941)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__UartStream__receiveDone', quals=[], storage=['static'] (at pp.c:2943)
    FuncDecl: quals=None (at pp.c:2943)
      ParamList:  (at pp.c:2945)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2945)
          PtrDecl: quals=[] (at pp.c:2945)
            TypeDecl: declname='buf', quals=[] (at pp.c:2945)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2949)
          TypeDecl: declname='len', quals=[] (at pp.c:2949)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2949)
          TypeDecl: declname='error', quals=[] (at pp.c:2949)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='HdlcTranslateC__UartStream__receiveDone', quals=[] (at pp.c:2943)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__UartStream__sendDone', quals=[], storage=['static'] (at pp.c:2951)
    FuncDecl: quals=None (at pp.c:2951)
      ParamList:  (at pp.c:2953)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2953)
          PtrDecl: quals=[] (at pp.c:2953)
            TypeDecl: declname='buf', quals=[] (at pp.c:2953)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2957)
          TypeDecl: declname='len', quals=[] (at pp.c:2957)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2957)
          TypeDecl: declname='error', quals=[] (at pp.c:2957)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='HdlcTranslateC__UartStream__sendDone', quals=[] (at pp.c:2951)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__SerialFrameComm__putDelimiter', quals=[], storage=['static'] (at pp.c:2959)
    FuncDecl: quals=None (at pp.c:2959)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HdlcTranslateC__SerialFrameComm__putDelimiter', quals=[] (at pp.c:2959)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='HdlcTranslateC__SerialFrameComm__resetReceive', quals=[], storage=['static'] (at pp.c:2961)
    FuncDecl: quals=None (at pp.c:2961)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HdlcTranslateC__SerialFrameComm__resetReceive', quals=[] (at pp.c:2961)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__SerialFrameComm__putData', quals=[], storage=['static'] (at pp.c:2963)
    FuncDecl: quals=None (at pp.c:2963)
      ParamList:  (at pp.c:2963)
        Decl: name='data', quals=[], storage=[] (at pp.c:2963)
          TypeDecl: declname='data', quals=[] (at pp.c:2963)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HdlcTranslateC__SerialFrameComm__putData', quals=[] (at pp.c:2963)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__ResourceConfigure__unconfigure', quals=[], storage=['static'] (at pp.c:2965)
    FuncDecl: quals=None (at pp.c:2965)
      ParamList:  (at pp.c:2967)
        Decl: name='arg_0x101bfe2f0', quals=[], storage=[] (at pp.c:2967)
          TypeDecl: declname='arg_0x101bfe2f0', quals=[] (at pp.c:2967)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:2965)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__ResourceConfigure__configure', quals=[], storage=['static'] (at pp.c:2969)
    FuncDecl: quals=None (at pp.c:2969)
      ParamList:  (at pp.c:2971)
        Decl: name='arg_0x101bfe2f0', quals=[], storage=[] (at pp.c:2971)
          TypeDecl: declname='arg_0x101bfe2f0', quals=[] (at pp.c:2971)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__ResourceConfigure__configure', quals=[] (at pp.c:2969)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__Msp430UartConfigure__default__getConfig', quals=[], storage=['static'] (at pp.c:2973)
    FuncDecl: quals=None (at pp.c:2973)
      ParamList:  (at pp.c:2975)
        Decl: name='arg_0x101bf94c8', quals=[], storage=[] (at pp.c:2975)
          TypeDecl: declname='arg_0x101bf94c8', quals=[] (at pp.c:2975)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:2973)
        TypeDecl: declname='Msp430UartP__0__Msp430UartConfigure__default__getConfig', quals=[] (at pp.c:2973)
          IdentifierType: names=['msp430_uart_union_config_t'] (at None)
  Decl: name='Msp430UartP__0__UartStream__send', quals=[], storage=['static'] (at pp.c:2977)
    FuncDecl: quals=None (at pp.c:2977)
      ParamList:  (at pp.c:2979)
        Decl: name='arg_0x101bfd020', quals=[], storage=[] (at pp.c:2979)
          TypeDecl: declname='arg_0x101bfd020', quals=[] (at pp.c:2979)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2981)
          PtrDecl: quals=[] (at pp.c:2981)
            TypeDecl: declname='buf', quals=[] (at pp.c:2981)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2985)
          TypeDecl: declname='len', quals=[] (at pp.c:2985)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__send', quals=[] (at pp.c:2977)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__UartStream__default__receivedByte', quals=[], storage=['static'] (at pp.c:2987)
    FuncDecl: quals=None (at pp.c:2987)
      ParamList:  (at pp.c:2989)
        Decl: name='arg_0x101bfd020', quals=[], storage=[] (at pp.c:2989)
          TypeDecl: declname='arg_0x101bfd020', quals=[] (at pp.c:2989)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='byte', quals=[], storage=[] (at pp.c:2991)
          TypeDecl: declname='byte', quals=[] (at pp.c:2991)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__default__receivedByte', quals=[] (at pp.c:2987)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UartStream__default__receiveDone', quals=[], storage=['static'] (at pp.c:2993)
    FuncDecl: quals=None (at pp.c:2993)
      ParamList:  (at pp.c:2995)
        Decl: name='arg_0x101bfd020', quals=[], storage=[] (at pp.c:2995)
          TypeDecl: declname='arg_0x101bfd020', quals=[] (at pp.c:2995)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2997)
          PtrDecl: quals=[] (at pp.c:2997)
            TypeDecl: declname='buf', quals=[] (at pp.c:2997)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3001)
          TypeDecl: declname='len', quals=[] (at pp.c:3001)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3001)
          TypeDecl: declname='error', quals=[] (at pp.c:3001)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__default__receiveDone', quals=[] (at pp.c:2993)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UartStream__default__sendDone', quals=[], storage=['static'] (at pp.c:3003)
    FuncDecl: quals=None (at pp.c:3003)
      ParamList:  (at pp.c:3005)
        Decl: name='arg_0x101bfd020', quals=[], storage=[] (at pp.c:3005)
          TypeDecl: declname='arg_0x101bfd020', quals=[] (at pp.c:3005)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:3007)
          PtrDecl: quals=[] (at pp.c:3007)
            TypeDecl: declname='buf', quals=[] (at pp.c:3007)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3011)
          TypeDecl: declname='len', quals=[] (at pp.c:3011)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3011)
          TypeDecl: declname='error', quals=[] (at pp.c:3011)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__default__sendDone', quals=[] (at pp.c:3003)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:3013)
    FuncDecl: quals=None (at pp.c:3013)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UartP__0__Counter__overflow', quals=[] (at pp.c:3013)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__default__release', quals=[], storage=['static'] (at pp.c:3015)
    FuncDecl: quals=None (at pp.c:3015)
      ParamList:  (at pp.c:3017)
        Decl: name='arg_0x101bfa258', quals=[], storage=[] (at pp.c:3017)
          TypeDecl: declname='arg_0x101bfa258', quals=[] (at pp.c:3017)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__default__release', quals=[] (at pp.c:3015)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__default__immediateRequest', quals=[], storage=['static'] (at pp.c:3019)
    FuncDecl: quals=None (at pp.c:3019)
      ParamList:  (at pp.c:3021)
        Decl: name='arg_0x101bfa258', quals=[], storage=[] (at pp.c:3021)
          TypeDecl: declname='arg_0x101bfa258', quals=[] (at pp.c:3021)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__default__immediateRequest', quals=[] (at pp.c:3019)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__granted', quals=[], storage=['static'] (at pp.c:3023)
    FuncDecl: quals=None (at pp.c:3023)
      ParamList:  (at pp.c:3025)
        Decl: name='arg_0x101bfa258', quals=[], storage=[] (at pp.c:3025)
          TypeDecl: declname='arg_0x101bfa258', quals=[] (at pp.c:3025)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__granted', quals=[] (at pp.c:3023)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__default__isOwner', quals=[], storage=['static'] (at pp.c:3027)
    FuncDecl: quals=None (at pp.c:3027)
      ParamList:  (at pp.c:3029)
        Decl: name='arg_0x101bfa258', quals=[], storage=[] (at pp.c:3029)
          TypeDecl: declname='arg_0x101bfa258', quals=[] (at pp.c:3029)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__default__isOwner', quals=[] (at pp.c:3027)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430UartP__0__Resource__release', quals=[], storage=['static'] (at pp.c:3031)
    FuncDecl: quals=None (at pp.c:3031)
      ParamList:  (at pp.c:3033)
        Decl: name='arg_0x101bc50c8', quals=[], storage=[] (at pp.c:3033)
          TypeDecl: declname='arg_0x101bc50c8', quals=[] (at pp.c:3033)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__Resource__release', quals=[] (at pp.c:3031)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:3035)
    FuncDecl: quals=None (at pp.c:3035)
      ParamList:  (at pp.c:3037)
        Decl: name='arg_0x101bc50c8', quals=[], storage=[] (at pp.c:3037)
          TypeDecl: declname='arg_0x101bc50c8', quals=[] (at pp.c:3037)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__Resource__immediateRequest', quals=[] (at pp.c:3035)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__Resource__default__granted', quals=[], storage=['static'] (at pp.c:3039)
    FuncDecl: quals=None (at pp.c:3039)
      ParamList:  (at pp.c:3041)
        Decl: name='arg_0x101bc50c8', quals=[], storage=[] (at pp.c:3041)
          TypeDecl: declname='arg_0x101bc50c8', quals=[] (at pp.c:3041)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__Resource__default__granted', quals=[] (at pp.c:3039)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UsartInterrupts__rxDone', quals=[], storage=['static'] (at pp.c:3043)
    FuncDecl: quals=None (at pp.c:3043)
      ParamList:  (at pp.c:3045)
        Decl: name='arg_0x101c132f0', quals=[], storage=[] (at pp.c:3045)
          TypeDecl: declname='arg_0x101c132f0', quals=[] (at pp.c:3045)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3047)
          TypeDecl: declname='data', quals=[] (at pp.c:3047)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartInterrupts__rxDone', quals=[] (at pp.c:3043)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UsartInterrupts__txDone', quals=[], storage=['static'] (at pp.c:3049)
    FuncDecl: quals=None (at pp.c:3049)
      ParamList:  (at pp.c:3051)
        Decl: name='arg_0x101c132f0', quals=[], storage=[] (at pp.c:3051)
          TypeDecl: declname='arg_0x101c132f0', quals=[] (at pp.c:3051)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartInterrupts__txDone', quals=[] (at pp.c:3049)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__enableUartRx', quals=[], storage=['static'] (at pp.c:3053)
    FuncDecl: quals=None (at pp.c:3053)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__enableUartRx', quals=[] (at pp.c:3053)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__enableUart', quals=[], storage=['static'] (at pp.c:3055)
    FuncDecl: quals=None (at pp.c:3055)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__enableUart', quals=[] (at pp.c:3055)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__resetUsart', quals=[], storage=['static'] (at pp.c:3057)
    FuncDecl: quals=None (at pp.c:3057)
      ParamList:  (at pp.c:3057)
        Decl: name='reset', quals=[], storage=[] (at pp.c:3057)
          TypeDecl: declname='reset', quals=[] (at pp.c:3057)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__resetUsart', quals=[] (at pp.c:3057)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__disableIntr', quals=[], storage=['static'] (at pp.c:3059)
    FuncDecl: quals=None (at pp.c:3059)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__disableIntr', quals=[] (at pp.c:3059)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__setUmctl', quals=[], storage=['static'] (at pp.c:3061)
    FuncDecl: quals=None (at pp.c:3061)
      ParamList:  (at pp.c:3061)
        Decl: name='umctl', quals=[], storage=[] (at pp.c:3061)
          TypeDecl: declname='umctl', quals=[] (at pp.c:3061)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__setUmctl', quals=[] (at pp.c:3061)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__enableUartTx', quals=[], storage=['static'] (at pp.c:3063)
    FuncDecl: quals=None (at pp.c:3063)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__enableUartTx', quals=[] (at pp.c:3063)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__disableUartRx', quals=[], storage=['static'] (at pp.c:3065)
    FuncDecl: quals=None (at pp.c:3065)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__disableUartRx', quals=[] (at pp.c:3065)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__enableIntr', quals=[], storage=['static'] (at pp.c:3067)
    FuncDecl: quals=None (at pp.c:3067)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__enableIntr', quals=[] (at pp.c:3067)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__clrIntr', quals=[], storage=['static'] (at pp.c:3069)
    FuncDecl: quals=None (at pp.c:3069)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__clrIntr', quals=[] (at pp.c:3069)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__setUbr', quals=[], storage=['static'] (at pp.c:3071)
    FuncDecl: quals=None (at pp.c:3071)
      ParamList:  (at pp.c:3071)
        Decl: name='ubr', quals=[], storage=[] (at pp.c:3071)
          TypeDecl: declname='ubr', quals=[] (at pp.c:3071)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__setUbr', quals=[] (at pp.c:3071)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__tx', quals=[], storage=['static'] (at pp.c:3073)
    FuncDecl: quals=None (at pp.c:3073)
      ParamList:  (at pp.c:3073)
        Decl: name='data', quals=[], storage=[] (at pp.c:3073)
          TypeDecl: declname='data', quals=[] (at pp.c:3073)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__tx', quals=[] (at pp.c:3073)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__disableUart', quals=[], storage=['static'] (at pp.c:3075)
    FuncDecl: quals=None (at pp.c:3075)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__disableUart', quals=[] (at pp.c:3075)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__setModeUart', quals=[], storage=['static'] (at pp.c:3077)
    FuncDecl: quals=None (at pp.c:3077)
      ParamList:  (at pp.c:3077)
        Decl: name='config', quals=[], storage=[] (at pp.c:3077)
          PtrDecl: quals=[] (at pp.c:3077)
            TypeDecl: declname='config', quals=[] (at pp.c:3077)
              IdentifierType: names=['msp430_uart_union_config_t'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__setModeUart', quals=[] (at pp.c:3077)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:3079)
    FuncDecl: quals=None (at pp.c:3079)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__disableSpi', quals=[] (at pp.c:3079)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__disableUartTx', quals=[], storage=['static'] (at pp.c:3081)
    FuncDecl: quals=None (at pp.c:3081)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__disableUartTx', quals=[] (at pp.c:3081)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__AsyncStdControl__start', quals=[], storage=['static'] (at pp.c:3083)
    FuncDecl: quals=None (at pp.c:3083)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__AsyncStdControl__start', quals=[] (at pp.c:3083)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='HplMsp430Usart1P__AsyncStdControl__stop', quals=[], storage=['static'] (at pp.c:3093)
    FuncDecl: quals=None (at pp.c:3093)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__AsyncStdControl__stop', quals=[] (at pp.c:3093)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430CounterC__0__Msp430Timer__overflow', quals=[], storage=['static'] (at pp.c:3095)
    FuncDecl: quals=None (at pp.c:3095)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Msp430Timer__overflow', quals=[] (at pp.c:3095)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__0__Counter__get', quals=[], storage=['static'] (at pp.c:3097)
    FuncDecl: quals=None (at pp.c:3097)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Counter__get', quals=[] (at pp.c:3097)
        IdentifierType: names=['Msp430CounterC__0__Counter__size_type'] (at None)
  Decl: name='Msp430CounterC__0__Counter__isOverflowPending', quals=[], storage=['static'] (at pp.c:3104)
    FuncDecl: quals=None (at pp.c:3104)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Counter__isOverflowPending', quals=[] (at pp.c:3104)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[], storage=['static'] (at pp.c:3106)
    FuncDecl: quals=None (at pp.c:3106)
      ParamList:  (at pp.c:3108)
        Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:3108)
          TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:3108)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3110)
          TypeDecl: declname='data', quals=[] (at pp.c:3110)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[] (at pp.c:3106)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[], storage=['static'] (at pp.c:3112)
    FuncDecl: quals=None (at pp.c:3112)
      ParamList:  (at pp.c:3114)
        Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:3114)
          TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:3114)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[] (at pp.c:3112)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[], storage=['static'] (at pp.c:3116)
    FuncDecl: quals=None (at pp.c:3116)
      ParamList:  (at pp.c:3116)
        Decl: name='data', quals=[], storage=[] (at pp.c:3116)
          TypeDecl: declname='data', quals=[] (at pp.c:3116)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[] (at pp.c:3116)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[], storage=['static'] (at pp.c:3118)
    FuncDecl: quals=None (at pp.c:3118)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[] (at pp.c:3118)
        IdentifierType: names=['void'] (at None)
  Decl: name='FcfsResourceQueueC__1__Init__init', quals=[], storage=['static'] (at pp.c:3120)
    FuncDecl: quals=None (at pp.c:3120)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__Init__init', quals=[] (at pp.c:3120)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[], storage=['static'] (at pp.c:3122)
    FuncDecl: quals=None (at pp.c:3122)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[] (at pp.c:3122)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[], storage=['static'] (at pp.c:3124)
    FuncDecl: quals=None (at pp.c:3124)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[] (at pp.c:3124)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='ArbiterP__0__ResourceRequested__default__immediateRequested', quals=[], storage=['static'] (at pp.c:3126)
    FuncDecl: quals=None (at pp.c:3126)
      ParamList:  (at pp.c:3128)
        Decl: name='arg_0x101d807e8', quals=[], storage=[] (at pp.c:3128)
          TypeDecl: declname='arg_0x101d807e8', quals=[] (at pp.c:3128)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceRequested__default__immediateRequested', quals=[] (at pp.c:3126)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[], storage=['static'] (at pp.c:3130)
    FuncDecl: quals=None (at pp.c:3130)
      ParamList:  (at pp.c:3132)
        Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:3132)
          TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:3132)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:3130)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__default__configure', quals=[], storage=['static'] (at pp.c:3134)
    FuncDecl: quals=None (at pp.c:3134)
      ParamList:  (at pp.c:3136)
        Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:3136)
          TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:3136)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__configure', quals=[] (at pp.c:3134)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:3138)
    FuncDecl: quals=None (at pp.c:3138)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__release', quals=[] (at pp.c:3138)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__Resource__release', quals=[], storage=['static'] (at pp.c:3140)
    FuncDecl: quals=None (at pp.c:3140)
      ParamList:  (at pp.c:3142)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:3142)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:3142)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__release', quals=[] (at pp.c:3140)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:3144)
    FuncDecl: quals=None (at pp.c:3144)
      ParamList:  (at pp.c:3146)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:3146)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:3146)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__immediateRequest', quals=[] (at pp.c:3144)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__Resource__default__granted', quals=[], storage=['static'] (at pp.c:3148)
    FuncDecl: quals=None (at pp.c:3148)
      ParamList:  (at pp.c:3150)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:3150)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:3150)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__default__granted', quals=[] (at pp.c:3148)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__Resource__isOwner', quals=[], storage=['static'] (at pp.c:3152)
    FuncDecl: quals=None (at pp.c:3152)
      ParamList:  (at pp.c:3154)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:3154)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:3154)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__isOwner', quals=[] (at pp.c:3152)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__0__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:3156)
    FuncDecl: quals=None (at pp.c:3156)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ArbiterInfo__inUse', quals=[] (at pp.c:3156)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__0__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:3164)
    FuncDecl: quals=None (at pp.c:3164)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ArbiterInfo__userId', quals=[] (at pp.c:3164)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__0__grantedTask__runTask', quals=[], storage=['static'] (at pp.c:3166)
    FuncDecl: quals=None (at pp.c:3166)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__grantedTask__runTask', quals=[] (at pp.c:3166)
        IdentifierType: names=['void'] (at None)
  Decl: name='AsyncPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[], storage=['static'] (at pp.c:3168)
    FuncDecl: quals=None (at pp.c:3168)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AsyncPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[] (at pp.c:3168)
        IdentifierType: names=['void'] (at None)
  Decl: name='AsyncPowerManagerP__0__ResourceDefaultOwner__granted', quals=[], storage=['static'] (at pp.c:3170)
    FuncDecl: quals=None (at pp.c:3170)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AsyncPowerManagerP__0__ResourceDefaultOwner__granted', quals=[] (at pp.c:3170)
        IdentifierType: names=['void'] (at None)
  Decl: name='AsyncPowerManagerP__0__ResourceDefaultOwner__immediateRequested', quals=[], storage=['static'] (at pp.c:3172)
    FuncDecl: quals=None (at pp.c:3172)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AsyncPowerManagerP__0__ResourceDefaultOwner__immediateRequested', quals=[] (at pp.c:3172)
        IdentifierType: names=['void'] (at None)
  Decl: name='TelosSerialP__Msp430UartConfigure__getConfig', quals=[], storage=['static'] (at pp.c:3174)
    FuncDecl: quals=None (at pp.c:3174)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      PtrDecl: quals=[] (at pp.c:3174)
        TypeDecl: declname='TelosSerialP__Msp430UartConfigure__getConfig', quals=[] (at pp.c:3174)
          IdentifierType: names=['msp430_uart_union_config_t'] (at None)
  Decl: name='TelosSerialP__Resource__granted', quals=[], storage=['static'] (at pp.c:3176)
    FuncDecl: quals=None (at pp.c:3176)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TelosSerialP__Resource__granted', quals=[] (at pp.c:3176)
        IdentifierType: names=['void'] (at None)
  Decl: name='TelosSerialP__StdControl__start', quals=[], storage=['static'] (at pp.c:3178)
    FuncDecl: quals=None (at pp.c:3178)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TelosSerialP__StdControl__start', quals=[] (at pp.c:3178)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='TelosSerialP__StdControl__stop', quals=[], storage=['static'] (at pp.c:3188)
    FuncDecl: quals=None (at pp.c:3188)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TelosSerialP__StdControl__stop', quals=[] (at pp.c:3188)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialPacketInfoActiveMessageP__Info__upperLength', quals=[], storage=['static'] (at pp.c:3190)
    FuncDecl: quals=None (at pp.c:3190)
      ParamList:  (at pp.c:3190)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3190)
          PtrDecl: quals=[] (at pp.c:3190)
            TypeDecl: declname='msg', quals=[] (at pp.c:3190)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='dataLinkLen', quals=[], storage=[] (at pp.c:3190)
          TypeDecl: declname='dataLinkLen', quals=[] (at pp.c:3190)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialPacketInfoActiveMessageP__Info__upperLength', quals=[] (at pp.c:3190)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialPacketInfoActiveMessageP__Info__offset', quals=[], storage=['static'] (at pp.c:3192)
    FuncDecl: quals=None (at pp.c:3192)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialPacketInfoActiveMessageP__Info__offset', quals=[] (at pp.c:3192)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialPacketInfoActiveMessageP__Info__dataLinkLength', quals=[], storage=['static'] (at pp.c:3200)
    FuncDecl: quals=None (at pp.c:3200)
      ParamList:  (at pp.c:3200)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3200)
          PtrDecl: quals=[] (at pp.c:3200)
            TypeDecl: declname='msg', quals=[] (at pp.c:3200)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='upperLen', quals=[], storage=[] (at pp.c:3200)
          TypeDecl: declname='upperLen', quals=[] (at pp.c:3200)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialPacketInfoActiveMessageP__Info__dataLinkLength', quals=[] (at pp.c:3200)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__start', quals=[], storage=['static'] (at pp.c:3202)
    FuncDecl: quals=None (at pp.c:3202)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__start', quals=[] (at pp.c:3202)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__stop', quals=[], storage=['static'] (at pp.c:3204)
    FuncDecl: quals=None (at pp.c:3204)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__stop', quals=[] (at pp.c:3204)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[], storage=['static'] (at pp.c:3206)
    FuncDecl: quals=None (at pp.c:3206)
      ParamList:  (at pp.c:3206)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:3206)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:3206)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:3206)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[], storage=['static'] (at pp.c:3208)
    FuncDecl: quals=None (at pp.c:3208)
      ParamList:  (at pp.c:3208)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:3208)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:3208)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:3208)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:3210)
    FuncDecl: quals=None (at pp.c:3210)
      ParamList:  (at pp.c:3210)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3210)
          PtrDecl: quals=[] (at pp.c:3210)
            TypeDecl: declname='msg', quals=[] (at pp.c:3210)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:3210)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:3217)
    FuncDecl: quals=None (at pp.c:3217)
      ParamList:  (at pp.c:3217)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3217)
          PtrDecl: quals=[] (at pp.c:3217)
            TypeDecl: declname='msg', quals=[] (at pp.c:3217)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:3217)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Transmit__sendDone', quals=[], storage=['static'] (at pp.c:3219)
    FuncDecl: quals=None (at pp.c:3219)
      ParamList:  (at pp.c:3219)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:3219)
          PtrDecl: quals=[] (at pp.c:3219)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:3219)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3219)
          TypeDecl: declname='error', quals=[] (at pp.c:3219)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Transmit__sendDone', quals=[] (at pp.c:3219)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__Send__send', quals=[], storage=['static'] (at pp.c:3221)
    FuncDecl: quals=None (at pp.c:3221)
      ParamList:  (at pp.c:3223)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3223)
          PtrDecl: quals=[] (at pp.c:3223)
            TypeDecl: declname='msg', quals=[] (at pp.c:3223)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3231)
          TypeDecl: declname='len', quals=[] (at pp.c:3231)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__Send__send', quals=[] (at pp.c:3221)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Send__maxPayloadLength', quals=[], storage=['static'] (at pp.c:3233)
    FuncDecl: quals=None (at pp.c:3233)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Send__maxPayloadLength', quals=[] (at pp.c:3233)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[], storage=['static'] (at pp.c:3235)
    FuncDecl: quals=None (at pp.c:3235)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[] (at pp.c:3235)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startVRegDone', quals=[], storage=['static'] (at pp.c:3237)
    FuncDecl: quals=None (at pp.c:3237)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startVRegDone', quals=[] (at pp.c:3237)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__Resource__granted', quals=[], storage=['static'] (at pp.c:3239)
    FuncDecl: quals=None (at pp.c:3239)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Resource__granted', quals=[] (at pp.c:3239)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__sendDone_task__runTask', quals=[], storage=['static'] (at pp.c:3241)
    FuncDecl: quals=None (at pp.c:3241)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__sendDone_task__runTask', quals=[] (at pp.c:3241)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__stopDone_task__runTask', quals=[], storage=['static'] (at pp.c:3243)
    FuncDecl: quals=None (at pp.c:3243)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__stopDone_task__runTask', quals=[] (at pp.c:3243)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__startDone_task__runTask', quals=[], storage=['static'] (at pp.c:3245)
    FuncDecl: quals=None (at pp.c:3245)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__startDone_task__runTask', quals=[] (at pp.c:3245)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[], storage=['static'] (at pp.c:3247)
    FuncDecl: quals=None (at pp.c:3247)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[] (at pp.c:3247)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[], storage=['static'] (at pp.c:3249)
    FuncDecl: quals=None (at pp.c:3249)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[] (at pp.c:3249)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[], storage=['static'] (at pp.c:3251)
    FuncDecl: quals=None (at pp.c:3251)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[] (at pp.c:3251)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getExtAddr', quals=[], storage=['static'] (at pp.c:3253)
    FuncDecl: quals=None (at pp.c:3253)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getExtAddr', quals=[] (at pp.c:3253)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getShortAddr', quals=[], storage=['static'] (at pp.c:3258)
    FuncDecl: quals=None (at pp.c:3258)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getShortAddr', quals=[] (at pp.c:3258)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__sync', quals=[], storage=['static'] (at pp.c:3260)
    FuncDecl: quals=None (at pp.c:3260)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__sync', quals=[] (at pp.c:3260)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getPanAddr', quals=[], storage=['static'] (at pp.c:3262)
    FuncDecl: quals=None (at pp.c:3262)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getPanAddr', quals=[] (at pp.c:3262)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__StartupTimer__fired', quals=[], storage=['static'] (at pp.c:3264)
    FuncDecl: quals=None (at pp.c:3264)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__StartupTimer__fired', quals=[] (at pp.c:3264)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__ReadRssi__default__readDone', quals=[], storage=['static'] (at pp.c:3266)
    FuncDecl: quals=None (at pp.c:3266)
      ParamList:  (at pp.c:3266)
        Decl: name='result', quals=[], storage=[] (at pp.c:3266)
          TypeDecl: declname='result', quals=[] (at pp.c:3266)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='val', quals=[], storage=[] (at pp.c:3266)
          TypeDecl: declname='val', quals=[] (at pp.c:3266)
            IdentifierType: names=['CC2420ControlP__ReadRssi__val_t'] (at None)
      TypeDecl: declname='CC2420ControlP__ReadRssi__default__readDone', quals=[] (at pp.c:3266)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__syncDone__runTask', quals=[], storage=['static'] (at pp.c:3268)
    FuncDecl: quals=None (at pp.c:3268)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__syncDone__runTask', quals=[] (at pp.c:3268)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__Init__init', quals=[], storage=['static'] (at pp.c:3270)
    FuncDecl: quals=None (at pp.c:3270)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Init__init', quals=[] (at pp.c:3270)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:3272)
    FuncDecl: quals=None (at pp.c:3272)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SpiResource__granted', quals=[] (at pp.c:3272)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__SyncResource__granted', quals=[], storage=['static'] (at pp.c:3274)
    FuncDecl: quals=None (at pp.c:3274)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SyncResource__granted', quals=[] (at pp.c:3274)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startOscillator', quals=[], storage=['static'] (at pp.c:3276)
    FuncDecl: quals=None (at pp.c:3276)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startOscillator', quals=[] (at pp.c:3276)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__rxOn', quals=[], storage=['static'] (at pp.c:3278)
    FuncDecl: quals=None (at pp.c:3278)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__rxOn', quals=[] (at pp.c:3278)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startVReg', quals=[], storage=['static'] (at pp.c:3280)
    FuncDecl: quals=None (at pp.c:3280)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startVReg', quals=[] (at pp.c:3280)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__stopVReg', quals=[], storage=['static'] (at pp.c:3282)
    FuncDecl: quals=None (at pp.c:3282)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__stopVReg', quals=[] (at pp.c:3282)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__sync__runTask', quals=[], storage=['static'] (at pp.c:3284)
    FuncDecl: quals=None (at pp.c:3284)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__sync__runTask', quals=[] (at pp.c:3284)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__Resource__release', quals=[], storage=['static'] (at pp.c:3286)
    FuncDecl: quals=None (at pp.c:3286)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Resource__release', quals=[] (at pp.c:3286)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__Resource__request', quals=[], storage=['static'] (at pp.c:3288)
    FuncDecl: quals=None (at pp.c:3288)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Resource__request', quals=[] (at pp.c:3288)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__InterruptCCA__fired', quals=[], storage=['static'] (at pp.c:3290)
    FuncDecl: quals=None (at pp.c:3290)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__InterruptCCA__fired', quals=[] (at pp.c:3290)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__RssiResource__granted', quals=[], storage=['static'] (at pp.c:3292)
    FuncDecl: quals=None (at pp.c:3292)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RssiResource__granted', quals=[] (at pp.c:3292)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Compare__fired', quals=[], storage=['static'] (at pp.c:3294)
    FuncDecl: quals=None (at pp.c:3294)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__fired', quals=[] (at pp.c:3294)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Timer__overflow', quals=[], storage=['static'] (at pp.c:3296)
    FuncDecl: quals=None (at pp.c:3296)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Timer__overflow', quals=[] (at pp.c:3296)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Alarm__startAt', quals=[], storage=['static'] (at pp.c:3298)
    FuncDecl: quals=None (at pp.c:3298)
      ParamList:  (at pp.c:3298)
        Decl: name='t0', quals=[], storage=[] (at pp.c:3298)
          TypeDecl: declname='t0', quals=[] (at pp.c:3298)
            IdentifierType: names=['Msp430AlarmC__0__Alarm__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:3298)
          TypeDecl: declname='dt', quals=[] (at pp.c:3298)
            IdentifierType: names=['Msp430AlarmC__0__Alarm__size_type'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Alarm__startAt', quals=[] (at pp.c:3298)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Alarm__stop', quals=[], storage=['static'] (at pp.c:3300)
    FuncDecl: quals=None (at pp.c:3300)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Alarm__stop', quals=[] (at pp.c:3300)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Init__init', quals=[], storage=['static'] (at pp.c:3302)
    FuncDecl: quals=None (at pp.c:3302)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Init__init', quals=[] (at pp.c:3302)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='TransformCounterC__0__CounterFrom__overflow', quals=[], storage=['static'] (at pp.c:3304)
    FuncDecl: quals=None (at pp.c:3304)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__CounterFrom__overflow', quals=[] (at pp.c:3304)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__0__Counter__get', quals=[], storage=['static'] (at pp.c:3306)
    FuncDecl: quals=None (at pp.c:3306)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__Counter__get', quals=[] (at pp.c:3306)
        IdentifierType: names=['TransformCounterC__0__Counter__size_type'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__getNow', quals=[], storage=['static'] (at pp.c:3308)
    FuncDecl: quals=None (at pp.c:3308)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__getNow', quals=[] (at pp.c:3308)
        IdentifierType: names=['TransformAlarmC__0__Alarm__size_type'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__startAt', quals=[], storage=['static'] (at pp.c:3310)
    FuncDecl: quals=None (at pp.c:3310)
      ParamList:  (at pp.c:3310)
        Decl: name='t0', quals=[], storage=[] (at pp.c:3310)
          TypeDecl: declname='t0', quals=[] (at pp.c:3310)
            IdentifierType: names=['TransformAlarmC__0__Alarm__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:3310)
          TypeDecl: declname='dt', quals=[] (at pp.c:3310)
            IdentifierType: names=['TransformAlarmC__0__Alarm__size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__startAt', quals=[] (at pp.c:3310)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__start', quals=[], storage=['static'] (at pp.c:3312)
    FuncDecl: quals=None (at pp.c:3312)
      ParamList:  (at pp.c:3312)
        Decl: name='dt', quals=[], storage=[] (at pp.c:3312)
          TypeDecl: declname='dt', quals=[] (at pp.c:3312)
            IdentifierType: names=['TransformAlarmC__0__Alarm__size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__start', quals=[] (at pp.c:3312)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__stop', quals=[], storage=['static'] (at pp.c:3319)
    FuncDecl: quals=None (at pp.c:3319)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__stop', quals=[] (at pp.c:3319)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__AlarmFrom__fired', quals=[], storage=['static'] (at pp.c:3324)
    FuncDecl: quals=None (at pp.c:3324)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__AlarmFrom__fired', quals=[] (at pp.c:3324)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:3326)
    FuncDecl: quals=None (at pp.c:3326)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Counter__overflow', quals=[] (at pp.c:3326)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__GeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:3328)
    FuncDecl: quals=None (at pp.c:3328)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__GeneralIO__makeInput', quals=[] (at pp.c:3328)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__GeneralIO__get', quals=[], storage=['static'] (at pp.c:3330)
    FuncDecl: quals=None (at pp.c:3330)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__GeneralIO__get', quals=[] (at pp.c:3330)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__4__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3333)
    FuncDecl: quals=None (at pp.c:3333)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__GeneralIO__makeOutput', quals=[] (at pp.c:3333)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3335)
    FuncDecl: quals=None (at pp.c:3335)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__GeneralIO__set', quals=[] (at pp.c:3335)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:3336)
    FuncDecl: quals=None (at pp.c:3336)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__GeneralIO__clr', quals=[] (at pp.c:3336)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__5__GeneralIO__get', quals=[], storage=['static'] (at pp.c:3338)
    FuncDecl: quals=None (at pp.c:3338)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__5__GeneralIO__get', quals=[] (at pp.c:3338)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__6__GeneralIO__get', quals=[], storage=['static'] (at pp.c:3340)
    FuncDecl: quals=None (at pp.c:3340)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__GeneralIO__get', quals=[] (at pp.c:3340)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__7__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3343)
    FuncDecl: quals=None (at pp.c:3343)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__GeneralIO__makeOutput', quals=[] (at pp.c:3343)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__7__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3345)
    FuncDecl: quals=None (at pp.c:3345)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__GeneralIO__set', quals=[] (at pp.c:3345)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__7__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:3346)
    FuncDecl: quals=None (at pp.c:3346)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__GeneralIO__clr', quals=[] (at pp.c:3346)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__8__GeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:3349)
    FuncDecl: quals=None (at pp.c:3349)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__8__GeneralIO__makeInput', quals=[] (at pp.c:3349)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__8__GeneralIO__get', quals=[], storage=['static'] (at pp.c:3351)
    FuncDecl: quals=None (at pp.c:3351)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__8__GeneralIO__get', quals=[] (at pp.c:3351)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3354)
    FuncDecl: quals=None (at pp.c:3354)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__makeOutput', quals=[] (at pp.c:3354)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3356)
    FuncDecl: quals=None (at pp.c:3356)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__set', quals=[] (at pp.c:3356)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:3357)
    FuncDecl: quals=None (at pp.c:3357)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__clr', quals=[] (at pp.c:3357)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430Capture__captured', quals=[], storage=['static'] (at pp.c:3359)
    FuncDecl: quals=None (at pp.c:3359)
      ParamList:  (at pp.c:3359)
        Decl: name='time', quals=[], storage=[] (at pp.c:3359)
          TypeDecl: declname='time', quals=[] (at pp.c:3359)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430Capture__captured', quals=[] (at pp.c:3359)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Capture__captureFallingEdge', quals=[], storage=['static'] (at pp.c:3361)
    FuncDecl: quals=None (at pp.c:3361)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__captureFallingEdge', quals=[] (at pp.c:3361)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='GpioCaptureC__0__Capture__disable', quals=[], storage=['static'] (at pp.c:3363)
    FuncDecl: quals=None (at pp.c:3363)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__disable', quals=[] (at pp.c:3363)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Capture__captureRisingEdge', quals=[], storage=['static'] (at pp.c:3365)
    FuncDecl: quals=None (at pp.c:3365)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__captureRisingEdge', quals=[] (at pp.c:3365)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__clear', quals=[], storage=['static'] (at pp.c:3367)
    FuncDecl: quals=None (at pp.c:3367)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__clear', quals=[] (at pp.c:3367)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__disable', quals=[], storage=['static'] (at pp.c:3369)
    FuncDecl: quals=None (at pp.c:3369)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__disable', quals=[] (at pp.c:3369)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__edge', quals=[], storage=['static'] (at pp.c:3371)
    FuncDecl: quals=None (at pp.c:3371)
      ParamList:  (at pp.c:3371)
        Decl: name='low_to_high', quals=[], storage=[] (at pp.c:3371)
          TypeDecl: declname='low_to_high', quals=[] (at pp.c:3371)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__edge', quals=[] (at pp.c:3371)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__enable', quals=[], storage=['static'] (at pp.c:3373)
    FuncDecl: quals=None (at pp.c:3373)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__enable', quals=[] (at pp.c:3373)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port26__clear', quals=[], storage=['static'] (at pp.c:3383)
    FuncDecl: quals=None (at pp.c:3383)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port26__clear', quals=[] (at pp.c:3383)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port26__default__fired', quals=[], storage=['static'] (at pp.c:3385)
    FuncDecl: quals=None (at pp.c:3385)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port26__default__fired', quals=[] (at pp.c:3385)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port17__clear', quals=[], storage=['static'] (at pp.c:3387)
    FuncDecl: quals=None (at pp.c:3387)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port17__clear', quals=[] (at pp.c:3387)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port17__default__fired', quals=[], storage=['static'] (at pp.c:3389)
    FuncDecl: quals=None (at pp.c:3389)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port17__default__fired', quals=[] (at pp.c:3389)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port21__clear', quals=[], storage=['static'] (at pp.c:3391)
    FuncDecl: quals=None (at pp.c:3391)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port21__clear', quals=[] (at pp.c:3391)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port21__default__fired', quals=[], storage=['static'] (at pp.c:3393)
    FuncDecl: quals=None (at pp.c:3393)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port21__default__fired', quals=[] (at pp.c:3393)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port12__clear', quals=[], storage=['static'] (at pp.c:3395)
    FuncDecl: quals=None (at pp.c:3395)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port12__clear', quals=[] (at pp.c:3395)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port12__default__fired', quals=[], storage=['static'] (at pp.c:3397)
    FuncDecl: quals=None (at pp.c:3397)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port12__default__fired', quals=[] (at pp.c:3397)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port24__clear', quals=[], storage=['static'] (at pp.c:3399)
    FuncDecl: quals=None (at pp.c:3399)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port24__clear', quals=[] (at pp.c:3399)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port24__default__fired', quals=[], storage=['static'] (at pp.c:3401)
    FuncDecl: quals=None (at pp.c:3401)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port24__default__fired', quals=[] (at pp.c:3401)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port15__clear', quals=[], storage=['static'] (at pp.c:3403)
    FuncDecl: quals=None (at pp.c:3403)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port15__clear', quals=[] (at pp.c:3403)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port15__default__fired', quals=[], storage=['static'] (at pp.c:3405)
    FuncDecl: quals=None (at pp.c:3405)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port15__default__fired', quals=[] (at pp.c:3405)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port27__clear', quals=[], storage=['static'] (at pp.c:3407)
    FuncDecl: quals=None (at pp.c:3407)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port27__clear', quals=[] (at pp.c:3407)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port27__default__fired', quals=[], storage=['static'] (at pp.c:3409)
    FuncDecl: quals=None (at pp.c:3409)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port27__default__fired', quals=[] (at pp.c:3409)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__clear', quals=[], storage=['static'] (at pp.c:3411)
    FuncDecl: quals=None (at pp.c:3411)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__clear', quals=[] (at pp.c:3411)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__disable', quals=[], storage=['static'] (at pp.c:3413)
    FuncDecl: quals=None (at pp.c:3413)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__disable', quals=[] (at pp.c:3413)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__edge', quals=[], storage=['static'] (at pp.c:3415)
    FuncDecl: quals=None (at pp.c:3415)
      ParamList:  (at pp.c:3415)
        Decl: name='low_to_high', quals=[], storage=[] (at pp.c:3415)
          TypeDecl: declname='low_to_high', quals=[] (at pp.c:3415)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__edge', quals=[] (at pp.c:3415)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__enable', quals=[], storage=['static'] (at pp.c:3417)
    FuncDecl: quals=None (at pp.c:3417)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__enable', quals=[] (at pp.c:3417)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port22__clear', quals=[], storage=['static'] (at pp.c:3427)
    FuncDecl: quals=None (at pp.c:3427)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port22__clear', quals=[] (at pp.c:3427)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port22__default__fired', quals=[], storage=['static'] (at pp.c:3429)
    FuncDecl: quals=None (at pp.c:3429)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port22__default__fired', quals=[] (at pp.c:3429)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port13__clear', quals=[], storage=['static'] (at pp.c:3431)
    FuncDecl: quals=None (at pp.c:3431)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port13__clear', quals=[] (at pp.c:3431)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port13__default__fired', quals=[], storage=['static'] (at pp.c:3433)
    FuncDecl: quals=None (at pp.c:3433)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port13__default__fired', quals=[] (at pp.c:3433)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port25__clear', quals=[], storage=['static'] (at pp.c:3435)
    FuncDecl: quals=None (at pp.c:3435)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port25__clear', quals=[] (at pp.c:3435)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port25__default__fired', quals=[], storage=['static'] (at pp.c:3437)
    FuncDecl: quals=None (at pp.c:3437)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port25__default__fired', quals=[] (at pp.c:3437)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port16__clear', quals=[], storage=['static'] (at pp.c:3439)
    FuncDecl: quals=None (at pp.c:3439)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port16__clear', quals=[] (at pp.c:3439)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port16__default__fired', quals=[], storage=['static'] (at pp.c:3441)
    FuncDecl: quals=None (at pp.c:3441)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port16__default__fired', quals=[] (at pp.c:3441)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port20__clear', quals=[], storage=['static'] (at pp.c:3443)
    FuncDecl: quals=None (at pp.c:3443)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port20__clear', quals=[] (at pp.c:3443)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port20__default__fired', quals=[], storage=['static'] (at pp.c:3445)
    FuncDecl: quals=None (at pp.c:3445)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port20__default__fired', quals=[] (at pp.c:3445)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port11__clear', quals=[], storage=['static'] (at pp.c:3447)
    FuncDecl: quals=None (at pp.c:3447)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port11__clear', quals=[] (at pp.c:3447)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port11__default__fired', quals=[], storage=['static'] (at pp.c:3449)
    FuncDecl: quals=None (at pp.c:3449)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port11__default__fired', quals=[] (at pp.c:3449)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port23__clear', quals=[], storage=['static'] (at pp.c:3451)
    FuncDecl: quals=None (at pp.c:3451)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port23__clear', quals=[] (at pp.c:3451)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port23__default__fired', quals=[], storage=['static'] (at pp.c:3453)
    FuncDecl: quals=None (at pp.c:3453)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port23__default__fired', quals=[] (at pp.c:3453)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__fired', quals=[], storage=['static'] (at pp.c:3455)
    FuncDecl: quals=None (at pp.c:3455)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__fired', quals=[] (at pp.c:3455)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__Interrupt__disable', quals=[], storage=['static'] (at pp.c:3457)
    FuncDecl: quals=None (at pp.c:3457)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__Interrupt__disable', quals=[] (at pp.c:3457)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[], storage=['static'] (at pp.c:3459)
    FuncDecl: quals=None (at pp.c:3459)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[] (at pp.c:3459)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__fired', quals=[], storage=['static'] (at pp.c:3461)
    FuncDecl: quals=None (at pp.c:3461)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__fired', quals=[] (at pp.c:3461)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__Interrupt__disable', quals=[], storage=['static'] (at pp.c:3463)
    FuncDecl: quals=None (at pp.c:3463)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__Interrupt__disable', quals=[] (at pp.c:3463)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[], storage=['static'] (at pp.c:3465)
    FuncDecl: quals=None (at pp.c:3465)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[] (at pp.c:3465)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:3467)
    FuncDecl: quals=None (at pp.c:3467)
      ParamList:  (at pp.c:3469)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:3469)
          PtrDecl: quals=[] (at pp.c:3469)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:3469)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:3470)
          PtrDecl: quals=[] (at pp.c:3470)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:3470)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3476)
          TypeDecl: declname='len', quals=[] (at pp.c:3476)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3477)
          TypeDecl: declname='error', quals=[] (at pp.c:3477)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiPacket__sendDone', quals=[] (at pp.c:3467)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__continueRead', quals=[], storage=['static'] (at pp.c:3479)
    FuncDecl: quals=None (at pp.c:3479)
      ParamList:  (at pp.c:3481)
        Decl: name='arg_0x102200328', quals=[], storage=[] (at pp.c:3481)
          TypeDecl: declname='arg_0x102200328', quals=[] (at pp.c:3481)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3483)
          PtrDecl: quals=[] (at pp.c:3483)
            TypeDecl: declname='data', quals=[] (at pp.c:3483)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3483)
          TypeDecl: declname='length', quals=[] (at pp.c:3483)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__continueRead', quals=[] (at pp.c:3479)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__default__writeDone', quals=[], storage=['static'] (at pp.c:3485)
    FuncDecl: quals=None (at pp.c:3485)
      ParamList:  (at pp.c:3487)
        Decl: name='arg_0x102200328', quals=[], storage=[] (at pp.c:3487)
          TypeDecl: declname='arg_0x102200328', quals=[] (at pp.c:3487)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3489)
          PtrDecl: quals=[] (at pp.c:3489)
            TypeDecl: declname='data', quals=[] (at pp.c:3489)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3489)
          TypeDecl: declname='length', quals=[] (at pp.c:3489)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3489)
          TypeDecl: declname='error', quals=[] (at pp.c:3489)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__default__writeDone', quals=[] (at pp.c:3485)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__write', quals=[], storage=['static'] (at pp.c:3491)
    FuncDecl: quals=None (at pp.c:3491)
      ParamList:  (at pp.c:3493)
        Decl: name='arg_0x102200328', quals=[], storage=[] (at pp.c:3493)
          TypeDecl: declname='arg_0x102200328', quals=[] (at pp.c:3493)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3495)
          PtrDecl: quals=[] (at pp.c:3495)
            TypeDecl: declname='data', quals=[] (at pp.c:3495)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3495)
          TypeDecl: declname='length', quals=[] (at pp.c:3495)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__write', quals=[] (at pp.c:3491)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__beginRead', quals=[], storage=['static'] (at pp.c:3497)
    FuncDecl: quals=None (at pp.c:3497)
      ParamList:  (at pp.c:3499)
        Decl: name='arg_0x102200328', quals=[], storage=[] (at pp.c:3499)
          TypeDecl: declname='arg_0x102200328', quals=[] (at pp.c:3499)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3501)
          PtrDecl: quals=[] (at pp.c:3501)
            TypeDecl: declname='data', quals=[] (at pp.c:3501)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3501)
          TypeDecl: declname='length', quals=[] (at pp.c:3501)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__beginRead', quals=[] (at pp.c:3497)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__default__readDone', quals=[], storage=['static'] (at pp.c:3503)
    FuncDecl: quals=None (at pp.c:3503)
      ParamList:  (at pp.c:3505)
        Decl: name='arg_0x102200328', quals=[], storage=[] (at pp.c:3505)
          TypeDecl: declname='arg_0x102200328', quals=[] (at pp.c:3505)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3507)
          PtrDecl: quals=[] (at pp.c:3507)
            TypeDecl: declname='data', quals=[] (at pp.c:3507)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3507)
          TypeDecl: declname='length', quals=[] (at pp.c:3507)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3507)
          TypeDecl: declname='error', quals=[] (at pp.c:3507)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__default__readDone', quals=[] (at pp.c:3503)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__ChipSpiResource__abortRelease', quals=[], storage=['static'] (at pp.c:3509)
    FuncDecl: quals=None (at pp.c:3509)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__ChipSpiResource__abortRelease', quals=[] (at pp.c:3509)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[], storage=['static'] (at pp.c:3517)
    FuncDecl: quals=None (at pp.c:3517)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[] (at pp.c:3517)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:3519)
    FuncDecl: quals=None (at pp.c:3519)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__granted', quals=[] (at pp.c:3519)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Ram__write', quals=[], storage=['static'] (at pp.c:3521)
    FuncDecl: quals=None (at pp.c:3521)
      ParamList:  (at pp.c:3523)
        Decl: name='arg_0x1021ff4d8', quals=[], storage=[] (at pp.c:3523)
          TypeDecl: declname='arg_0x1021ff4d8', quals=[] (at pp.c:3523)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='offset', quals=[], storage=[] (at pp.c:3525)
          TypeDecl: declname='offset', quals=[] (at pp.c:3525)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3525)
          PtrDecl: quals=[] (at pp.c:3525)
            TypeDecl: declname='data', quals=[] (at pp.c:3525)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3525)
          TypeDecl: declname='length', quals=[] (at pp.c:3525)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Ram__write', quals=[] (at pp.c:3521)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Reg__read', quals=[], storage=['static'] (at pp.c:3527)
    FuncDecl: quals=None (at pp.c:3527)
      ParamList:  (at pp.c:3529)
        Decl: name='arg_0x1021fe220', quals=[], storage=[] (at pp.c:3529)
          TypeDecl: declname='arg_0x1021fe220', quals=[] (at pp.c:3529)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3531)
          PtrDecl: quals=[] (at pp.c:3531)
            TypeDecl: declname='data', quals=[] (at pp.c:3531)
              IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Reg__read', quals=[] (at pp.c:3527)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Reg__write', quals=[], storage=['static'] (at pp.c:3539)
    FuncDecl: quals=None (at pp.c:3539)
      ParamList:  (at pp.c:3541)
        Decl: name='arg_0x1021fe220', quals=[], storage=[] (at pp.c:3541)
          TypeDecl: declname='arg_0x1021fe220', quals=[] (at pp.c:3541)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3543)
          TypeDecl: declname='data', quals=[] (at pp.c:3543)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Reg__write', quals=[] (at pp.c:3539)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Resource__release', quals=[], storage=['static'] (at pp.c:3545)
    FuncDecl: quals=None (at pp.c:3545)
      ParamList:  (at pp.c:3547)
        Decl: name='arg_0x102202158', quals=[], storage=[] (at pp.c:3547)
          TypeDecl: declname='arg_0x102202158', quals=[] (at pp.c:3547)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__release', quals=[] (at pp.c:3545)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:3549)
    FuncDecl: quals=None (at pp.c:3549)
      ParamList:  (at pp.c:3551)
        Decl: name='arg_0x102202158', quals=[], storage=[] (at pp.c:3551)
          TypeDecl: declname='arg_0x102202158', quals=[] (at pp.c:3551)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__immediateRequest', quals=[] (at pp.c:3549)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__request', quals=[], storage=['static'] (at pp.c:3553)
    FuncDecl: quals=None (at pp.c:3553)
      ParamList:  (at pp.c:3555)
        Decl: name='arg_0x102202158', quals=[], storage=[] (at pp.c:3555)
          TypeDecl: declname='arg_0x102202158', quals=[] (at pp.c:3555)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__request', quals=[] (at pp.c:3553)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__default__granted', quals=[], storage=['static'] (at pp.c:3557)
    FuncDecl: quals=None (at pp.c:3557)
      ParamList:  (at pp.c:3559)
        Decl: name='arg_0x102202158', quals=[], storage=[] (at pp.c:3559)
          TypeDecl: declname='arg_0x102202158', quals=[] (at pp.c:3559)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__default__granted', quals=[] (at pp.c:3557)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Resource__isOwner', quals=[], storage=['static'] (at pp.c:3561)
    FuncDecl: quals=None (at pp.c:3561)
      ParamList:  (at pp.c:3563)
        Decl: name='arg_0x102202158', quals=[], storage=[] (at pp.c:3563)
          TypeDecl: declname='arg_0x102202158', quals=[] (at pp.c:3563)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__isOwner', quals=[] (at pp.c:3561)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420SpiP__grant__runTask', quals=[], storage=['static'] (at pp.c:3565)
    FuncDecl: quals=None (at pp.c:3565)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__grant__runTask', quals=[] (at pp.c:3565)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Strobe__strobe', quals=[], storage=['static'] (at pp.c:3567)
    FuncDecl: quals=None (at pp.c:3567)
      ParamList:  (at pp.c:3569)
        Decl: name='arg_0x102250020', quals=[], storage=[] (at pp.c:3569)
          TypeDecl: declname='arg_0x102250020', quals=[] (at pp.c:3569)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Strobe__strobe', quals=[] (at pp.c:3567)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='StateImplP__Init__init', quals=[], storage=['static'] (at pp.c:3571)
    FuncDecl: quals=None (at pp.c:3571)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='StateImplP__Init__init', quals=[] (at pp.c:3571)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='StateImplP__State__getState', quals=[], storage=['static'] (at pp.c:3573)
    FuncDecl: quals=None (at pp.c:3573)
      ParamList:  (at pp.c:3575)
        Decl: name='arg_0x102287020', quals=[], storage=[] (at pp.c:3575)
          TypeDecl: declname='arg_0x102287020', quals=[] (at pp.c:3575)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__getState', quals=[] (at pp.c:3573)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='StateImplP__State__toIdle', quals=[], storage=['static'] (at pp.c:3577)
    FuncDecl: quals=None (at pp.c:3577)
      ParamList:  (at pp.c:3579)
        Decl: name='arg_0x102287020', quals=[], storage=[] (at pp.c:3579)
          TypeDecl: declname='arg_0x102287020', quals=[] (at pp.c:3579)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__toIdle', quals=[] (at pp.c:3577)
        IdentifierType: names=['void'] (at None)
  Decl: name='StateImplP__State__isState', quals=[], storage=['static'] (at pp.c:3581)
    FuncDecl: quals=None (at pp.c:3581)
      ParamList:  (at pp.c:3583)
        Decl: name='arg_0x102287020', quals=[], storage=[] (at pp.c:3583)
          TypeDecl: declname='arg_0x102287020', quals=[] (at pp.c:3583)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='myState', quals=[], storage=[] (at pp.c:3585)
          TypeDecl: declname='myState', quals=[] (at pp.c:3585)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__isState', quals=[] (at pp.c:3581)
        IdentifierType: names=['bool'] (at None)
  Decl: name='StateImplP__State__isIdle', quals=[], storage=['static'] (at pp.c:3587)
    FuncDecl: quals=None (at pp.c:3587)
      ParamList:  (at pp.c:3589)
        Decl: name='arg_0x102287020', quals=[], storage=[] (at pp.c:3589)
          TypeDecl: declname='arg_0x102287020', quals=[] (at pp.c:3589)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__isIdle', quals=[] (at pp.c:3587)
        IdentifierType: names=['bool'] (at None)
  Decl: name='StateImplP__State__requestState', quals=[], storage=['static'] (at pp.c:3591)
    FuncDecl: quals=None (at pp.c:3591)
      ParamList:  (at pp.c:3593)
        Decl: name='arg_0x102287020', quals=[], storage=[] (at pp.c:3593)
          TypeDecl: declname='arg_0x102287020', quals=[] (at pp.c:3593)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:3595)
          TypeDecl: declname='reqState', quals=[] (at pp.c:3595)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__requestState', quals=[] (at pp.c:3591)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='StateImplP__State__forceState', quals=[], storage=['static'] (at pp.c:3601)
    FuncDecl: quals=None (at pp.c:3601)
      ParamList:  (at pp.c:3603)
        Decl: name='arg_0x102287020', quals=[], storage=[] (at pp.c:3603)
          TypeDecl: declname='arg_0x102287020', quals=[] (at pp.c:3603)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:3605)
          TypeDecl: declname='reqState', quals=[] (at pp.c:3605)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__forceState', quals=[] (at pp.c:3601)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[], storage=['static'] (at pp.c:3607)
    FuncDecl: quals=None (at pp.c:3607)
      ParamList:  (at pp.c:3609)
        Decl: name='arg_0x1022a74b8', quals=[], storage=[] (at pp.c:3609)
          TypeDecl: declname='arg_0x1022a74b8', quals=[] (at pp.c:3609)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:3607)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[], storage=['static'] (at pp.c:3611)
    FuncDecl: quals=None (at pp.c:3611)
      ParamList:  (at pp.c:3613)
        Decl: name='arg_0x1022a74b8', quals=[], storage=[] (at pp.c:3613)
          TypeDecl: declname='arg_0x1022a74b8', quals=[] (at pp.c:3613)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[] (at pp.c:3611)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[], storage=['static'] (at pp.c:3615)
    FuncDecl: quals=None (at pp.c:3615)
      ParamList:  (at pp.c:3617)
        Decl: name='arg_0x1022a52f0', quals=[], storage=[] (at pp.c:3617)
          TypeDecl: declname='arg_0x1022a52f0', quals=[] (at pp.c:3617)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:3619)
          PtrDecl: quals=[] (at pp.c:3619)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:3619)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:3621)
          PtrDecl: quals=[] (at pp.c:3621)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:3621)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3630)
          TypeDecl: declname='len', quals=[] (at pp.c:3630)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[] (at pp.c:3615)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[], storage=['static'] (at pp.c:3632)
    FuncDecl: quals=None (at pp.c:3632)
      ParamList:  (at pp.c:3634)
        Decl: name='arg_0x1022a52f0', quals=[], storage=[] (at pp.c:3634)
          TypeDecl: declname='arg_0x1022a52f0', quals=[] (at pp.c:3634)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:3636)
          PtrDecl: quals=[] (at pp.c:3636)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:3636)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:3637)
          PtrDecl: quals=[] (at pp.c:3637)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:3637)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3643)
          TypeDecl: declname='len', quals=[] (at pp.c:3643)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3644)
          TypeDecl: declname='error', quals=[] (at pp.c:3644)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[] (at pp.c:3632)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[], storage=['static'] (at pp.c:3646)
    FuncDecl: quals=None (at pp.c:3646)
      ParamList:  (at pp.c:3648)
        Decl: name='arg_0x1022f92f0', quals=[], storage=[] (at pp.c:3648)
          TypeDecl: declname='arg_0x1022f92f0', quals=[] (at pp.c:3648)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:3646)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[] (at pp.c:3646)
          IdentifierType: names=['msp430_spi_union_config_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiByte__write', quals=[], storage=['static'] (at pp.c:3650)
    FuncDecl: quals=None (at pp.c:3650)
      ParamList:  (at pp.c:3650)
        Decl: name='tx', quals=[], storage=[] (at pp.c:3650)
          TypeDecl: declname='tx', quals=[] (at pp.c:3650)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiByte__write', quals=[] (at pp.c:3650)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[], storage=['static'] (at pp.c:3652)
    FuncDecl: quals=None (at pp.c:3652)
      ParamList:  (at pp.c:3654)
        Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:3654)
          TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:3654)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[] (at pp.c:3652)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[], storage=['static'] (at pp.c:3656)
    FuncDecl: quals=None (at pp.c:3656)
      ParamList:  (at pp.c:3658)
        Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:3658)
          TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:3658)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[] (at pp.c:3656)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[], storage=['static'] (at pp.c:3660)
    FuncDecl: quals=None (at pp.c:3660)
      ParamList:  (at pp.c:3662)
        Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:3662)
          TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:3662)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[] (at pp.c:3660)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[], storage=['static'] (at pp.c:3664)
    FuncDecl: quals=None (at pp.c:3664)
      ParamList:  (at pp.c:3666)
        Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:3666)
          TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:3666)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[] (at pp.c:3664)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[], storage=['static'] (at pp.c:3668)
    FuncDecl: quals=None (at pp.c:3668)
      ParamList:  (at pp.c:3670)
        Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:3670)
          TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:3670)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[] (at pp.c:3668)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__release', quals=[], storage=['static'] (at pp.c:3672)
    FuncDecl: quals=None (at pp.c:3672)
      ParamList:  (at pp.c:3674)
        Decl: name='arg_0x1022a92f0', quals=[], storage=[] (at pp.c:3674)
          TypeDecl: declname='arg_0x1022a92f0', quals=[] (at pp.c:3674)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__release', quals=[] (at pp.c:3672)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:3676)
    FuncDecl: quals=None (at pp.c:3676)
      ParamList:  (at pp.c:3678)
        Decl: name='arg_0x1022a92f0', quals=[], storage=[] (at pp.c:3678)
          TypeDecl: declname='arg_0x1022a92f0', quals=[] (at pp.c:3678)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[] (at pp.c:3676)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__request', quals=[], storage=['static'] (at pp.c:3680)
    FuncDecl: quals=None (at pp.c:3680)
      ParamList:  (at pp.c:3682)
        Decl: name='arg_0x1022a92f0', quals=[], storage=[] (at pp.c:3682)
          TypeDecl: declname='arg_0x1022a92f0', quals=[] (at pp.c:3682)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__request', quals=[] (at pp.c:3680)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[], storage=['static'] (at pp.c:3684)
    FuncDecl: quals=None (at pp.c:3684)
      ParamList:  (at pp.c:3686)
        Decl: name='arg_0x1022a92f0', quals=[], storage=[] (at pp.c:3686)
          TypeDecl: declname='arg_0x1022a92f0', quals=[] (at pp.c:3686)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[] (at pp.c:3684)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[], storage=['static'] (at pp.c:3688)
    FuncDecl: quals=None (at pp.c:3688)
      ParamList:  (at pp.c:3690)
        Decl: name='arg_0x1022a92f0', quals=[], storage=[] (at pp.c:3690)
          TypeDecl: declname='arg_0x1022a92f0', quals=[] (at pp.c:3690)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[] (at pp.c:3688)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[], storage=['static'] (at pp.c:3692)
    FuncDecl: quals=None (at pp.c:3692)
      ParamList:  (at pp.c:3692)
        Decl: name='data', quals=[], storage=[] (at pp.c:3692)
          TypeDecl: declname='data', quals=[] (at pp.c:3692)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[] (at pp.c:3692)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[], storage=['static'] (at pp.c:3694)
    FuncDecl: quals=None (at pp.c:3694)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[] (at pp.c:3694)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[], storage=['static'] (at pp.c:3696)
    FuncDecl: quals=None (at pp.c:3696)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[] (at pp.c:3696)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__enableRxIntr', quals=[], storage=['static'] (at pp.c:3698)
    FuncDecl: quals=None (at pp.c:3698)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__enableRxIntr', quals=[] (at pp.c:3698)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__clrRxIntr', quals=[], storage=['static'] (at pp.c:3700)
    FuncDecl: quals=None (at pp.c:3700)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__clrRxIntr', quals=[] (at pp.c:3700)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__resetUsart', quals=[], storage=['static'] (at pp.c:3702)
    FuncDecl: quals=None (at pp.c:3702)
      ParamList:  (at pp.c:3702)
        Decl: name='reset', quals=[], storage=[] (at pp.c:3702)
          TypeDecl: declname='reset', quals=[] (at pp.c:3702)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__resetUsart', quals=[] (at pp.c:3702)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableIntr', quals=[], storage=['static'] (at pp.c:3704)
    FuncDecl: quals=None (at pp.c:3704)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableIntr', quals=[] (at pp.c:3704)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setUmctl', quals=[], storage=['static'] (at pp.c:3706)
    FuncDecl: quals=None (at pp.c:3706)
      ParamList:  (at pp.c:3706)
        Decl: name='umctl', quals=[], storage=[] (at pp.c:3706)
          TypeDecl: declname='umctl', quals=[] (at pp.c:3706)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setUmctl', quals=[] (at pp.c:3706)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableRxIntr', quals=[], storage=['static'] (at pp.c:3708)
    FuncDecl: quals=None (at pp.c:3708)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableRxIntr', quals=[] (at pp.c:3708)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__clrIntr', quals=[], storage=['static'] (at pp.c:3710)
    FuncDecl: quals=None (at pp.c:3710)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__clrIntr', quals=[] (at pp.c:3710)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setUbr', quals=[], storage=['static'] (at pp.c:3712)
    FuncDecl: quals=None (at pp.c:3712)
      ParamList:  (at pp.c:3712)
        Decl: name='ubr', quals=[], storage=[] (at pp.c:3712)
          TypeDecl: declname='ubr', quals=[] (at pp.c:3712)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setUbr', quals=[] (at pp.c:3712)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__tx', quals=[], storage=['static'] (at pp.c:3714)
    FuncDecl: quals=None (at pp.c:3714)
      ParamList:  (at pp.c:3714)
        Decl: name='data', quals=[], storage=[] (at pp.c:3714)
          TypeDecl: declname='data', quals=[] (at pp.c:3714)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__tx', quals=[] (at pp.c:3714)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableUart', quals=[], storage=['static'] (at pp.c:3716)
    FuncDecl: quals=None (at pp.c:3716)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableUart', quals=[] (at pp.c:3716)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__enableSpi', quals=[], storage=['static'] (at pp.c:3718)
    FuncDecl: quals=None (at pp.c:3718)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__enableSpi', quals=[] (at pp.c:3718)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setModeSpi', quals=[], storage=['static'] (at pp.c:3720)
    FuncDecl: quals=None (at pp.c:3720)
      ParamList:  (at pp.c:3720)
        Decl: name='config', quals=[], storage=[] (at pp.c:3720)
          PtrDecl: quals=[] (at pp.c:3720)
            TypeDecl: declname='config', quals=[] (at pp.c:3720)
              IdentifierType: names=['msp430_spi_union_config_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setModeSpi', quals=[] (at pp.c:3720)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__rx', quals=[], storage=['static'] (at pp.c:3722)
    FuncDecl: quals=None (at pp.c:3722)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__rx', quals=[] (at pp.c:3722)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[], storage=['static'] (at pp.c:3724)
    FuncDecl: quals=None (at pp.c:3724)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[] (at pp.c:3724)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:3726)
    FuncDecl: quals=None (at pp.c:3726)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableSpi', quals=[] (at pp.c:3726)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__Interrupts__default__rxDone', quals=[], storage=['static'] (at pp.c:3728)
    FuncDecl: quals=None (at pp.c:3728)
      ParamList:  (at pp.c:3730)
        Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:3730)
          TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:3730)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3732)
          TypeDecl: declname='data', quals=[] (at pp.c:3732)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__Interrupts__default__rxDone', quals=[] (at pp.c:3728)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__Interrupts__default__txDone', quals=[], storage=['static'] (at pp.c:3734)
    FuncDecl: quals=None (at pp.c:3734)
      ParamList:  (at pp.c:3736)
        Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:3736)
          TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:3736)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__Interrupts__default__txDone', quals=[] (at pp.c:3734)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__RawI2CInterrupts__fired', quals=[], storage=['static'] (at pp.c:3738)
    FuncDecl: quals=None (at pp.c:3738)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__RawI2CInterrupts__fired', quals=[] (at pp.c:3738)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__I2CInterrupts__default__fired', quals=[], storage=['static'] (at pp.c:3740)
    FuncDecl: quals=None (at pp.c:3740)
      ParamList:  (at pp.c:3742)
        Decl: name='arg_0x101d3bc58', quals=[], storage=[] (at pp.c:3742)
          TypeDecl: declname='arg_0x101d3bc58', quals=[] (at pp.c:3742)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__I2CInterrupts__default__fired', quals=[] (at pp.c:3740)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__RawInterrupts__rxDone', quals=[], storage=['static'] (at pp.c:3744)
    FuncDecl: quals=None (at pp.c:3744)
      ParamList:  (at pp.c:3744)
        Decl: name='data', quals=[], storage=[] (at pp.c:3744)
          TypeDecl: declname='data', quals=[] (at pp.c:3744)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__RawInterrupts__rxDone', quals=[] (at pp.c:3744)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__RawInterrupts__txDone', quals=[], storage=['static'] (at pp.c:3746)
    FuncDecl: quals=None (at pp.c:3746)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__RawInterrupts__txDone', quals=[] (at pp.c:3746)
        IdentifierType: names=['void'] (at None)
  Decl: name='FcfsResourceQueueC__2__Init__init', quals=[], storage=['static'] (at pp.c:3748)
    FuncDecl: quals=None (at pp.c:3748)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__Init__init', quals=[] (at pp.c:3748)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[], storage=['static'] (at pp.c:3750)
    FuncDecl: quals=None (at pp.c:3750)
      ParamList:  (at pp.c:3750)
        Decl: name='id', quals=[], storage=[] (at pp.c:3750)
          TypeDecl: declname='id', quals=[] (at pp.c:3750)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[] (at pp.c:3750)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[], storage=['static'] (at pp.c:3752)
    FuncDecl: quals=None (at pp.c:3752)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[] (at pp.c:3752)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[], storage=['static'] (at pp.c:3761)
    FuncDecl: quals=None (at pp.c:3761)
      ParamList:  (at pp.c:3761)
        Decl: name='id', quals=[], storage=[] (at pp.c:3761)
          TypeDecl: declname='id', quals=[] (at pp.c:3761)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[] (at pp.c:3761)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[], storage=['static'] (at pp.c:3769)
    FuncDecl: quals=None (at pp.c:3769)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[] (at pp.c:3769)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__default__requested', quals=[], storage=['static'] (at pp.c:3771)
    FuncDecl: quals=None (at pp.c:3771)
      ParamList:  (at pp.c:3773)
        Decl: name='arg_0x101d807e8', quals=[], storage=[] (at pp.c:3773)
          TypeDecl: declname='arg_0x101d807e8', quals=[] (at pp.c:3773)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__default__requested', quals=[] (at pp.c:3771)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[], storage=['static'] (at pp.c:3775)
    FuncDecl: quals=None (at pp.c:3775)
      ParamList:  (at pp.c:3777)
        Decl: name='arg_0x101d807e8', quals=[], storage=[] (at pp.c:3777)
          TypeDecl: declname='arg_0x101d807e8', quals=[] (at pp.c:3777)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[] (at pp.c:3775)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[], storage=['static'] (at pp.c:3779)
    FuncDecl: quals=None (at pp.c:3779)
      ParamList:  (at pp.c:3781)
        Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:3781)
          TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:3781)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:3779)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__default__configure', quals=[], storage=['static'] (at pp.c:3783)
    FuncDecl: quals=None (at pp.c:3783)
      ParamList:  (at pp.c:3785)
        Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:3785)
          TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:3785)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__configure', quals=[] (at pp.c:3783)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:3787)
    FuncDecl: quals=None (at pp.c:3787)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__release', quals=[] (at pp.c:3787)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[], storage=['static'] (at pp.c:3789)
    FuncDecl: quals=None (at pp.c:3789)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[] (at pp.c:3789)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[], storage=['static'] (at pp.c:3791)
    FuncDecl: quals=None (at pp.c:3791)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[] (at pp.c:3791)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[], storage=['static'] (at pp.c:3793)
    FuncDecl: quals=None (at pp.c:3793)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[] (at pp.c:3793)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__Resource__release', quals=[], storage=['static'] (at pp.c:3795)
    FuncDecl: quals=None (at pp.c:3795)
      ParamList:  (at pp.c:3797)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:3797)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:3797)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__release', quals=[] (at pp.c:3795)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:3799)
    FuncDecl: quals=None (at pp.c:3799)
      ParamList:  (at pp.c:3801)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:3801)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:3801)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__immediateRequest', quals=[] (at pp.c:3799)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Resource__request', quals=[], storage=['static'] (at pp.c:3803)
    FuncDecl: quals=None (at pp.c:3803)
      ParamList:  (at pp.c:3805)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:3805)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:3805)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__request', quals=[] (at pp.c:3803)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Resource__default__granted', quals=[], storage=['static'] (at pp.c:3807)
    FuncDecl: quals=None (at pp.c:3807)
      ParamList:  (at pp.c:3809)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:3809)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:3809)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__default__granted', quals=[] (at pp.c:3807)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__Resource__isOwner', quals=[], storage=['static'] (at pp.c:3811)
    FuncDecl: quals=None (at pp.c:3811)
      ParamList:  (at pp.c:3813)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:3813)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:3813)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__isOwner', quals=[] (at pp.c:3811)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__1__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:3815)
    FuncDecl: quals=None (at pp.c:3815)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ArbiterInfo__inUse', quals=[] (at pp.c:3815)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__1__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:3823)
    FuncDecl: quals=None (at pp.c:3823)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ArbiterInfo__userId', quals=[] (at pp.c:3823)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__1__grantedTask__runTask', quals=[], storage=['static'] (at pp.c:3825)
    FuncDecl: quals=None (at pp.c:3825)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__grantedTask__runTask', quals=[] (at pp.c:3825)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[], storage=['static'] (at pp.c:3827)
    FuncDecl: quals=None (at pp.c:3827)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[] (at pp.c:3827)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430I2C0P__HplI2C__isI2C', quals=[], storage=['static'] (at pp.c:3829)
    FuncDecl: quals=None (at pp.c:3829)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430I2C0P__HplI2C__isI2C', quals=[] (at pp.c:3829)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ActiveMessageAddressC__amAddress', quals=[], storage=['static'] (at pp.c:3831)
    FuncDecl: quals=None (at pp.c:3831)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__amAddress', quals=[] (at pp.c:3831)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[], storage=['static'] (at pp.c:3833)
    FuncDecl: quals=None (at pp.c:3833)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[] (at pp.c:3833)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[], storage=['static'] (at pp.c:3838)
    FuncDecl: quals=None (at pp.c:3838)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[] (at pp.c:3838)
        IdentifierType: names=['am_group_t'] (at None)
  Decl: name='Ds2411P__ReadId48__read', quals=[], storage=['static'] (at pp.c:3840)
    FuncDecl: quals=None (at pp.c:3840)
      ParamList:  (at pp.c:3840)
        Decl: name='id', quals=[], storage=[] (at pp.c:3840)
          PtrDecl: quals=[] (at pp.c:3840)
            TypeDecl: declname='id', quals=[] (at pp.c:3840)
              IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Ds2411P__ReadId48__read', quals=[] (at pp.c:3840)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='OneWireMasterC__OneWire__read', quals=[], storage=['static'] (at pp.c:3842)
    FuncDecl: quals=None (at pp.c:3842)
      ParamList:  (at pp.c:3842)
        Decl: name='cmd', quals=[], storage=[] (at pp.c:3842)
          TypeDecl: declname='cmd', quals=[] (at pp.c:3842)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:3842)
          PtrDecl: quals=[] (at pp.c:3842)
            TypeDecl: declname='buf', quals=[] (at pp.c:3842)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3842)
          TypeDecl: declname='len', quals=[] (at pp.c:3842)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='OneWireMasterC__OneWire__read', quals=[] (at pp.c:3842)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='BusyWaitCounterC__0__BusyWait__wait', quals=[], storage=['static'] (at pp.c:3844)
    FuncDecl: quals=None (at pp.c:3844)
      ParamList:  (at pp.c:3844)
        Decl: name='dt', quals=[], storage=[] (at pp.c:3844)
          TypeDecl: declname='dt', quals=[] (at pp.c:3844)
            IdentifierType: names=['BusyWaitCounterC__0__BusyWait__size_type'] (at None)
      TypeDecl: declname='BusyWaitCounterC__0__BusyWait__wait', quals=[] (at pp.c:3844)
        IdentifierType: names=['void'] (at None)
  Decl: name='BusyWaitCounterC__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:3846)
    FuncDecl: quals=None (at pp.c:3846)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='BusyWaitCounterC__0__Counter__overflow', quals=[] (at pp.c:3846)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__1__Msp430Timer__overflow', quals=[], storage=['static'] (at pp.c:3848)
    FuncDecl: quals=None (at pp.c:3848)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Msp430Timer__overflow', quals=[] (at pp.c:3848)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__1__Counter__get', quals=[], storage=['static'] (at pp.c:3850)
    FuncDecl: quals=None (at pp.c:3850)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Counter__get', quals=[] (at pp.c:3850)
        IdentifierType: names=['Msp430CounterC__1__Counter__size_type'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:3852)
    FuncDecl: quals=None (at pp.c:3852)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__makeInput', quals=[] (at pp.c:3852)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__get', quals=[], storage=['static'] (at pp.c:3854)
    FuncDecl: quals=None (at pp.c:3854)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__get', quals=[] (at pp.c:3854)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3857)
    FuncDecl: quals=None (at pp.c:3857)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__makeOutput', quals=[] (at pp.c:3857)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:3859)
    FuncDecl: quals=None (at pp.c:3859)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__clr', quals=[] (at pp.c:3859)
        IdentifierType: names=['void'] (at None)
  Decl: name='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[], storage=['static'] (at pp.c:3861)
    FuncDecl: quals=None (at pp.c:3861)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[] (at pp.c:3861)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[], storage=['static'] (at pp.c:3863)
    FuncDecl: quals=None (at pp.c:3863)
      ParamList:  (at pp.c:3863)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:3863)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:3863)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:3863)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[], storage=['static'] (at pp.c:3865)
    FuncDecl: quals=None (at pp.c:3865)
      ParamList:  (at pp.c:3865)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:3865)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:3865)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:3865)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[], storage=['static'] (at pp.c:3867)
    FuncDecl: quals=None (at pp.c:3867)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[] (at pp.c:3867)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__CaptureSFD__captured', quals=[], storage=['static'] (at pp.c:3869)
    FuncDecl: quals=None (at pp.c:3869)
      ParamList:  (at pp.c:3869)
        Decl: name='time', quals=[], storage=[] (at pp.c:3869)
          TypeDecl: declname='time', quals=[] (at pp.c:3869)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__CaptureSFD__captured', quals=[] (at pp.c:3869)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__BackoffTimer__fired', quals=[], storage=['static'] (at pp.c:3871)
    FuncDecl: quals=None (at pp.c:3871)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__BackoffTimer__fired', quals=[] (at pp.c:3871)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CC2420Receive__receive', quals=[], storage=['static'] (at pp.c:3873)
    FuncDecl: quals=None (at pp.c:3873)
      ParamList:  (at pp.c:3873)
        Decl: name='type', quals=[], storage=[] (at pp.c:3873)
          TypeDecl: declname='type', quals=[] (at pp.c:3873)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='message', quals=[], storage=[] (at pp.c:3873)
          PtrDecl: quals=[] (at pp.c:3873)
            TypeDecl: declname='message', quals=[] (at pp.c:3873)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__CC2420Receive__receive', quals=[] (at pp.c:3873)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__Send__send', quals=[], storage=['static'] (at pp.c:3875)
    FuncDecl: quals=None (at pp.c:3875)
      ParamList:  (at pp.c:3875)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:3875)
          PtrDecl: quals=[] (at pp.c:3875)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:3875)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:3875)
          TypeDecl: declname='useCca', quals=[] (at pp.c:3875)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__Send__send', quals=[] (at pp.c:3875)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__Send__resend', quals=[], storage=['static'] (at pp.c:3882)
    FuncDecl: quals=None (at pp.c:3882)
      ParamList:  (at pp.c:3882)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:3882)
          TypeDecl: declname='useCca', quals=[] (at pp.c:3882)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__Send__resend', quals=[] (at pp.c:3882)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__ChipSpiResource__releasing', quals=[], storage=['static'] (at pp.c:3884)
    FuncDecl: quals=None (at pp.c:3884)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__ChipSpiResource__releasing', quals=[] (at pp.c:3884)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__Init__init', quals=[], storage=['static'] (at pp.c:3886)
    FuncDecl: quals=None (at pp.c:3886)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__Init__init', quals=[] (at pp.c:3886)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:3888)
    FuncDecl: quals=None (at pp.c:3888)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SpiResource__granted', quals=[] (at pp.c:3888)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__StdControl__start', quals=[], storage=['static'] (at pp.c:3890)
    FuncDecl: quals=None (at pp.c:3890)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__StdControl__start', quals=[] (at pp.c:3890)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__StdControl__stop', quals=[], storage=['static'] (at pp.c:3900)
    FuncDecl: quals=None (at pp.c:3900)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__StdControl__stop', quals=[] (at pp.c:3900)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO__writeDone', quals=[], storage=['static'] (at pp.c:3902)
    FuncDecl: quals=None (at pp.c:3902)
      ParamList:  (at pp.c:3902)
        Decl: name='data', quals=[], storage=[] (at pp.c:3902)
          PtrDecl: quals=[] (at pp.c:3902)
            TypeDecl: declname='data', quals=[] (at pp.c:3902)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3902)
          TypeDecl: declname='length', quals=[] (at pp.c:3902)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3902)
          TypeDecl: declname='error', quals=[] (at pp.c:3902)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO__writeDone', quals=[] (at pp.c:3902)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO__readDone', quals=[], storage=['static'] (at pp.c:3904)
    FuncDecl: quals=None (at pp.c:3904)
      ParamList:  (at pp.c:3904)
        Decl: name='data', quals=[], storage=[] (at pp.c:3904)
          PtrDecl: quals=[] (at pp.c:3904)
            TypeDecl: declname='data', quals=[] (at pp.c:3904)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3904)
          TypeDecl: declname='length', quals=[] (at pp.c:3904)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3904)
          TypeDecl: declname='error', quals=[] (at pp.c:3904)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO__readDone', quals=[] (at pp.c:3904)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__syncDone', quals=[], storage=['static'] (at pp.c:3906)
    FuncDecl: quals=None (at pp.c:3906)
      ParamList:  (at pp.c:3906)
        Decl: name='error', quals=[], storage=[] (at pp.c:3906)
          TypeDecl: declname='error', quals=[] (at pp.c:3906)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__syncDone', quals=[] (at pp.c:3906)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__receiveDone_task__runTask', quals=[], storage=['static'] (at pp.c:3908)
    FuncDecl: quals=None (at pp.c:3908)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__receiveDone_task__runTask', quals=[] (at pp.c:3908)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[], storage=['static'] (at pp.c:3910)
    FuncDecl: quals=None (at pp.c:3910)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[] (at pp.c:3910)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Receive__sfd', quals=[], storage=['static'] (at pp.c:3912)
    FuncDecl: quals=None (at pp.c:3912)
      ParamList:  (at pp.c:3912)
        Decl: name='time', quals=[], storage=[] (at pp.c:3912)
          TypeDecl: declname='time', quals=[] (at pp.c:3912)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd', quals=[] (at pp.c:3912)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__Init__init', quals=[], storage=['static'] (at pp.c:3914)
    FuncDecl: quals=None (at pp.c:3914)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__Init__init', quals=[] (at pp.c:3914)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:3916)
    FuncDecl: quals=None (at pp.c:3916)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__granted', quals=[] (at pp.c:3916)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__writeDone', quals=[], storage=['static'] (at pp.c:3918)
    FuncDecl: quals=None (at pp.c:3918)
      ParamList:  (at pp.c:3918)
        Decl: name='data', quals=[], storage=[] (at pp.c:3918)
          PtrDecl: quals=[] (at pp.c:3918)
            TypeDecl: declname='data', quals=[] (at pp.c:3918)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3918)
          TypeDecl: declname='length', quals=[] (at pp.c:3918)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3918)
          TypeDecl: declname='error', quals=[] (at pp.c:3918)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__writeDone', quals=[] (at pp.c:3918)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__readDone', quals=[], storage=['static'] (at pp.c:3920)
    FuncDecl: quals=None (at pp.c:3920)
      ParamList:  (at pp.c:3920)
        Decl: name='data', quals=[], storage=[] (at pp.c:3920)
          PtrDecl: quals=[] (at pp.c:3920)
            TypeDecl: declname='data', quals=[] (at pp.c:3920)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3920)
          TypeDecl: declname='length', quals=[] (at pp.c:3920)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3920)
          TypeDecl: declname='error', quals=[] (at pp.c:3920)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__readDone', quals=[] (at pp.c:3920)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[], storage=['static'] (at pp.c:3922)
    FuncDecl: quals=None (at pp.c:3922)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[] (at pp.c:3922)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__InterruptFIFOP__fired', quals=[], storage=['static'] (at pp.c:3924)
    FuncDecl: quals=None (at pp.c:3924)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__fired', quals=[] (at pp.c:3924)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__StdControl__start', quals=[], storage=['static'] (at pp.c:3926)
    FuncDecl: quals=None (at pp.c:3926)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__StdControl__start', quals=[] (at pp.c:3926)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__StdControl__stop', quals=[], storage=['static'] (at pp.c:3936)
    FuncDecl: quals=None (at pp.c:3936)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__StdControl__stop', quals=[] (at pp.c:3936)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420PacketP__CC2420Packet__setNetwork', quals=[], storage=['static'] (at pp.c:3938)
    FuncDecl: quals=None (at pp.c:3938)
      ParamList:  (at pp.c:3938)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:3938)
          PtrDecl: quals=[] (at pp.c:3938)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:3938)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='networkId', quals=[], storage=[] (at pp.c:3938)
          TypeDecl: declname='networkId', quals=[] (at pp.c:3938)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420PacketP__CC2420Packet__setNetwork', quals=[] (at pp.c:3938)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__CC2420Packet__getNetwork', quals=[], storage=['static'] (at pp.c:3940)
    FuncDecl: quals=None (at pp.c:3940)
      ParamList:  (at pp.c:3940)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:3940)
          PtrDecl: quals=[] (at pp.c:3940)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:3940)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__CC2420Packet__getNetwork', quals=[] (at pp.c:3940)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[], storage=['static'] (at pp.c:3942)
    FuncDecl: quals=None (at pp.c:3942)
      ParamList:  (at pp.c:3944)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3944)
          PtrDecl: quals=[] (at pp.c:3944)
            TypeDecl: declname='msg', quals=[] (at pp.c:3944)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[] (at pp.c:3942)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__PacketTimeStamp32khz__set', quals=[], storage=['static'] (at pp.c:3946)
    FuncDecl: quals=None (at pp.c:3946)
      ParamList:  (at pp.c:3948)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3948)
          PtrDecl: quals=[] (at pp.c:3948)
            TypeDecl: declname='msg', quals=[] (at pp.c:3948)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:3953)
          TypeDecl: declname='value', quals=[] (at pp.c:3953)
            IdentifierType: names=['CC2420PacketP__PacketTimeStamp32khz__size_type'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__set', quals=[] (at pp.c:3946)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:3955)
    FuncDecl: quals=None (at pp.c:3955)
      ParamList:  (at pp.c:3955)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3955)
          PtrDecl: quals=[] (at pp.c:3955)
            TypeDecl: declname='msg', quals=[] (at pp.c:3955)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:3955)
        TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getHeader', quals=[] (at pp.c:3955)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:3966)
    FuncDecl: quals=None (at pp.c:3966)
      ParamList:  (at pp.c:3966)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3966)
          PtrDecl: quals=[] (at pp.c:3966)
            TypeDecl: declname='msg', quals=[] (at pp.c:3966)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:3966)
        TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:3966)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420PacketP__PacketTimeSyncOffset__get', quals=[], storage=['static'] (at pp.c:3968)
    FuncDecl: quals=None (at pp.c:3968)
      ParamList:  (at pp.c:3970)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3970)
          PtrDecl: quals=[] (at pp.c:3970)
            TypeDecl: declname='msg', quals=[] (at pp.c:3970)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__get', quals=[] (at pp.c:3968)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[], storage=['static'] (at pp.c:3972)
    FuncDecl: quals=None (at pp.c:3972)
      ParamList:  (at pp.c:3974)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3974)
          PtrDecl: quals=[] (at pp.c:3974)
            TypeDecl: declname='msg', quals=[] (at pp.c:3974)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[] (at pp.c:3972)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420PacketP__Acks__requestAck', quals=[], storage=['static'] (at pp.c:3976)
    FuncDecl: quals=None (at pp.c:3976)
      ParamList:  (at pp.c:3978)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3978)
          PtrDecl: quals=[] (at pp.c:3978)
            TypeDecl: declname='msg', quals=[] (at pp.c:3978)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__requestAck', quals=[] (at pp.c:3976)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420PacketP__Acks__noAck', quals=[], storage=['static'] (at pp.c:3980)
    FuncDecl: quals=None (at pp.c:3980)
      ParamList:  (at pp.c:3982)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3982)
          PtrDecl: quals=[] (at pp.c:3982)
            TypeDecl: declname='msg', quals=[] (at pp.c:3982)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__noAck', quals=[] (at pp.c:3980)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420PacketP__Acks__wasAcked', quals=[], storage=['static'] (at pp.c:3984)
    FuncDecl: quals=None (at pp.c:3984)
      ParamList:  (at pp.c:3986)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3986)
          PtrDecl: quals=[] (at pp.c:3986)
            TypeDecl: declname='msg', quals=[] (at pp.c:3986)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__wasAcked', quals=[] (at pp.c:3984)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CounterToLocalTimeC__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:3988)
    FuncDecl: quals=None (at pp.c:3988)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CounterToLocalTimeC__0__Counter__overflow', quals=[] (at pp.c:3988)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Compare__fired', quals=[], storage=['static'] (at pp.c:3990)
    FuncDecl: quals=None (at pp.c:3990)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__fired', quals=[] (at pp.c:3990)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Timer__overflow', quals=[], storage=['static'] (at pp.c:3992)
    FuncDecl: quals=None (at pp.c:3992)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Timer__overflow', quals=[] (at pp.c:3992)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Alarm__startAt', quals=[], storage=['static'] (at pp.c:3994)
    FuncDecl: quals=None (at pp.c:3994)
      ParamList:  (at pp.c:3994)
        Decl: name='t0', quals=[], storage=[] (at pp.c:3994)
          TypeDecl: declname='t0', quals=[] (at pp.c:3994)
            IdentifierType: names=['Msp430AlarmC__1__Alarm__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:3994)
          TypeDecl: declname='dt', quals=[] (at pp.c:3994)
            IdentifierType: names=['Msp430AlarmC__1__Alarm__size_type'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Alarm__startAt', quals=[] (at pp.c:3994)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Alarm__stop', quals=[], storage=['static'] (at pp.c:3996)
    FuncDecl: quals=None (at pp.c:3996)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Alarm__stop', quals=[] (at pp.c:3996)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Init__init', quals=[], storage=['static'] (at pp.c:3998)
    FuncDecl: quals=None (at pp.c:3998)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Init__init', quals=[] (at pp.c:3998)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='TransformCounterC__1__CounterFrom__overflow', quals=[], storage=['static'] (at pp.c:4000)
    FuncDecl: quals=None (at pp.c:4000)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__CounterFrom__overflow', quals=[] (at pp.c:4000)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__1__Counter__get', quals=[], storage=['static'] (at pp.c:4002)
    FuncDecl: quals=None (at pp.c:4002)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__Counter__get', quals=[] (at pp.c:4002)
        IdentifierType: names=['TransformCounterC__1__Counter__size_type'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__getNow', quals=[], storage=['static'] (at pp.c:4004)
    FuncDecl: quals=None (at pp.c:4004)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__getNow', quals=[] (at pp.c:4004)
        IdentifierType: names=['TransformAlarmC__1__Alarm__size_type'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__startAt', quals=[], storage=['static'] (at pp.c:4006)
    FuncDecl: quals=None (at pp.c:4006)
      ParamList:  (at pp.c:4006)
        Decl: name='t0', quals=[], storage=[] (at pp.c:4006)
          TypeDecl: declname='t0', quals=[] (at pp.c:4006)
            IdentifierType: names=['TransformAlarmC__1__Alarm__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:4006)
          TypeDecl: declname='dt', quals=[] (at pp.c:4006)
            IdentifierType: names=['TransformAlarmC__1__Alarm__size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__startAt', quals=[] (at pp.c:4006)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__getAlarm', quals=[], storage=['static'] (at pp.c:4008)
    FuncDecl: quals=None (at pp.c:4008)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__getAlarm', quals=[] (at pp.c:4008)
        IdentifierType: names=['TransformAlarmC__1__Alarm__size_type'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__stop', quals=[], storage=['static'] (at pp.c:4010)
    FuncDecl: quals=None (at pp.c:4010)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__stop', quals=[] (at pp.c:4010)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__AlarmFrom__fired', quals=[], storage=['static'] (at pp.c:4015)
    FuncDecl: quals=None (at pp.c:4015)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__AlarmFrom__fired', quals=[] (at pp.c:4015)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Counter__overflow', quals=[], storage=['static'] (at pp.c:4017)
    FuncDecl: quals=None (at pp.c:4017)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Counter__overflow', quals=[] (at pp.c:4017)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__fired__runTask', quals=[], storage=['static'] (at pp.c:4019)
    FuncDecl: quals=None (at pp.c:4019)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__fired__runTask', quals=[] (at pp.c:4019)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__fired', quals=[], storage=['static'] (at pp.c:4021)
    FuncDecl: quals=None (at pp.c:4021)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__fired', quals=[] (at pp.c:4021)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__getNow', quals=[], storage=['static'] (at pp.c:4023)
    FuncDecl: quals=None (at pp.c:4023)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__getNow', quals=[] (at pp.c:4023)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__startOneShotAt', quals=[], storage=['static'] (at pp.c:4025)
    FuncDecl: quals=None (at pp.c:4025)
      ParamList:  (at pp.c:4025)
        Decl: name='t0', quals=[], storage=[] (at pp.c:4025)
          TypeDecl: declname='t0', quals=[] (at pp.c:4025)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:4025)
          TypeDecl: declname='dt', quals=[] (at pp.c:4025)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__startOneShotAt', quals=[] (at pp.c:4025)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__stop', quals=[], storage=['static'] (at pp.c:4027)
    FuncDecl: quals=None (at pp.c:4027)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__stop', quals=[] (at pp.c:4027)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[], storage=['static'] (at pp.c:4029)
    FuncDecl: quals=None (at pp.c:4029)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[] (at pp.c:4029)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__TimerFrom__fired', quals=[], storage=['static'] (at pp.c:4031)
    FuncDecl: quals=None (at pp.c:4031)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__fired', quals=[] (at pp.c:4031)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__default__fired', quals=[], storage=['static'] (at pp.c:4033)
    FuncDecl: quals=None (at pp.c:4033)
      ParamList:  (at pp.c:4035)
        Decl: name='arg_0x1028742f8', quals=[], storage=[] (at pp.c:4035)
          TypeDecl: declname='arg_0x1028742f8', quals=[] (at pp.c:4035)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__default__fired', quals=[] (at pp.c:4033)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__isRunning', quals=[], storage=['static'] (at pp.c:4037)
    FuncDecl: quals=None (at pp.c:4037)
      ParamList:  (at pp.c:4039)
        Decl: name='arg_0x1028742f8', quals=[], storage=[] (at pp.c:4039)
          TypeDecl: declname='arg_0x1028742f8', quals=[] (at pp.c:4039)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__isRunning', quals=[] (at pp.c:4037)
        IdentifierType: names=['bool'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__startOneShot', quals=[], storage=['static'] (at pp.c:4041)
    FuncDecl: quals=None (at pp.c:4041)
      ParamList:  (at pp.c:4043)
        Decl: name='arg_0x1028742f8', quals=[], storage=[] (at pp.c:4043)
          TypeDecl: declname='arg_0x1028742f8', quals=[] (at pp.c:4043)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:4045)
          TypeDecl: declname='dt', quals=[] (at pp.c:4045)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__startOneShot', quals=[] (at pp.c:4041)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__stop', quals=[], storage=['static'] (at pp.c:4050)
    FuncDecl: quals=None (at pp.c:4050)
      ParamList:  (at pp.c:4052)
        Decl: name='arg_0x1028742f8', quals=[], storage=[] (at pp.c:4052)
          TypeDecl: declname='arg_0x1028742f8', quals=[] (at pp.c:4052)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__stop', quals=[] (at pp.c:4050)
        IdentifierType: names=['void'] (at None)
  Decl: name='CounterToLocalTimeC__1__Counter__overflow', quals=[], storage=['static'] (at pp.c:4054)
    FuncDecl: quals=None (at pp.c:4054)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CounterToLocalTimeC__1__Counter__overflow', quals=[] (at pp.c:4054)
        IdentifierType: names=['void'] (at None)
  Decl: name='RandomMlcgC__Random__rand16', quals=[], storage=['static'] (at pp.c:4056)
    FuncDecl: quals=None (at pp.c:4056)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Random__rand16', quals=[] (at pp.c:4056)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='RandomMlcgC__Random__rand32', quals=[], storage=['static'] (at pp.c:4058)
    FuncDecl: quals=None (at pp.c:4058)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Random__rand32', quals=[] (at pp.c:4058)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='RandomMlcgC__Init__init', quals=[], storage=['static'] (at pp.c:4060)
    FuncDecl: quals=None (at pp.c:4060)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Init__init', quals=[] (at pp.c:4060)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__SubSend__sendDone', quals=[], storage=['static'] (at pp.c:4062)
    FuncDecl: quals=None (at pp.c:4062)
      ParamList:  (at pp.c:4064)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4064)
          PtrDecl: quals=[] (at pp.c:4064)
            TypeDecl: declname='msg', quals=[] (at pp.c:4064)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4068)
          TypeDecl: declname='error', quals=[] (at pp.c:4068)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='UniqueSendP__SubSend__sendDone', quals=[] (at pp.c:4062)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueSendP__Send__send', quals=[], storage=['static'] (at pp.c:4070)
    FuncDecl: quals=None (at pp.c:4070)
      ParamList:  (at pp.c:4072)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4072)
          PtrDecl: quals=[] (at pp.c:4072)
            TypeDecl: declname='msg', quals=[] (at pp.c:4072)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4080)
          TypeDecl: declname='len', quals=[] (at pp.c:4080)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueSendP__Send__send', quals=[] (at pp.c:4070)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__Send__maxPayloadLength', quals=[], storage=['static'] (at pp.c:4082)
    FuncDecl: quals=None (at pp.c:4082)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__Send__maxPayloadLength', quals=[] (at pp.c:4082)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='UniqueSendP__Init__init', quals=[], storage=['static'] (at pp.c:4084)
    FuncDecl: quals=None (at pp.c:4084)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__Init__init', quals=[] (at pp.c:4084)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueReceiveP__SubReceive__receive', quals=[], storage=['static'] (at pp.c:4092)
    FuncDecl: quals=None (at pp.c:4092)
      ParamList:  (at pp.c:4094)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4094)
          PtrDecl: quals=[] (at pp.c:4094)
            TypeDecl: declname='msg', quals=[] (at pp.c:4094)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4095)
          PtrDecl: quals=[] (at pp.c:4095)
            TypeDecl: declname='payload', quals=[] (at pp.c:4095)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4101)
          TypeDecl: declname='len', quals=[] (at pp.c:4101)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4088)
        TypeDecl: declname='UniqueReceiveP__SubReceive__receive', quals=[] (at pp.c:4092)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='UniqueReceiveP__Init__init', quals=[], storage=['static'] (at pp.c:4103)
    FuncDecl: quals=None (at pp.c:4103)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueReceiveP__Init__init', quals=[] (at pp.c:4103)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueReceiveP__DuplicateReceive__default__receive', quals=[], storage=['static'] (at pp.c:4111)
    FuncDecl: quals=None (at pp.c:4111)
      ParamList:  (at pp.c:4113)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4113)
          PtrDecl: quals=[] (at pp.c:4113)
            TypeDecl: declname='msg', quals=[] (at pp.c:4113)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4114)
          PtrDecl: quals=[] (at pp.c:4114)
            TypeDecl: declname='payload', quals=[] (at pp.c:4114)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4120)
          TypeDecl: declname='len', quals=[] (at pp.c:4120)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4107)
        TypeDecl: declname='UniqueReceiveP__DuplicateReceive__default__receive', quals=[] (at pp.c:4111)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubSend__sendDone', quals=[], storage=['static'] (at pp.c:4122)
    FuncDecl: quals=None (at pp.c:4122)
      ParamList:  (at pp.c:4124)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4124)
          PtrDecl: quals=[] (at pp.c:4124)
            TypeDecl: declname='msg', quals=[] (at pp.c:4124)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4128)
          TypeDecl: declname='error', quals=[] (at pp.c:4128)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__SubSend__sendDone', quals=[] (at pp.c:4122)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubReceive__receive', quals=[], storage=['static'] (at pp.c:4136)
    FuncDecl: quals=None (at pp.c:4136)
      ParamList:  (at pp.c:4138)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4138)
          PtrDecl: quals=[] (at pp.c:4138)
            TypeDecl: declname='msg', quals=[] (at pp.c:4138)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4139)
          PtrDecl: quals=[] (at pp.c:4139)
            TypeDecl: declname='payload', quals=[] (at pp.c:4139)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4145)
          TypeDecl: declname='len', quals=[] (at pp.c:4145)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4132)
        TypeDecl: declname='CC2420TinyosNetworkP__SubReceive__receive', quals=[] (at pp.c:4136)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__grantTask__runTask', quals=[], storage=['static'] (at pp.c:4147)
    FuncDecl: quals=None (at pp.c:4147)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__grantTask__runTask', quals=[] (at pp.c:4147)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__send', quals=[], storage=['static'] (at pp.c:4149)
    FuncDecl: quals=None (at pp.c:4149)
      ParamList:  (at pp.c:4151)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4151)
          PtrDecl: quals=[] (at pp.c:4151)
            TypeDecl: declname='msg', quals=[] (at pp.c:4151)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4159)
          TypeDecl: declname='len', quals=[] (at pp.c:4159)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__send', quals=[] (at pp.c:4149)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[], storage=['static'] (at pp.c:4161)
    FuncDecl: quals=None (at pp.c:4161)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[] (at pp.c:4161)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[], storage=['static'] (at pp.c:4169)
    FuncDecl: quals=None (at pp.c:4169)
      ParamList:  (at pp.c:4171)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4171)
          PtrDecl: quals=[] (at pp.c:4171)
            TypeDecl: declname='msg', quals=[] (at pp.c:4171)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4172)
          PtrDecl: quals=[] (at pp.c:4172)
            TypeDecl: declname='payload', quals=[] (at pp.c:4172)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4178)
          TypeDecl: declname='len', quals=[] (at pp.c:4178)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4165)
        TypeDecl: declname='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[] (at pp.c:4169)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__release', quals=[], storage=['static'] (at pp.c:4180)
    FuncDecl: quals=None (at pp.c:4180)
      ParamList:  (at pp.c:4182)
        Decl: name='arg_0x10297f060', quals=[], storage=[] (at pp.c:4182)
          TypeDecl: declname='arg_0x10297f060', quals=[] (at pp.c:4182)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__release', quals=[] (at pp.c:4180)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:4184)
    FuncDecl: quals=None (at pp.c:4184)
      ParamList:  (at pp.c:4186)
        Decl: name='arg_0x10297f060', quals=[], storage=[] (at pp.c:4186)
          TypeDecl: declname='arg_0x10297f060', quals=[] (at pp.c:4186)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[] (at pp.c:4184)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__request', quals=[], storage=['static'] (at pp.c:4188)
    FuncDecl: quals=None (at pp.c:4188)
      ParamList:  (at pp.c:4190)
        Decl: name='arg_0x10297f060', quals=[], storage=[] (at pp.c:4190)
          TypeDecl: declname='arg_0x10297f060', quals=[] (at pp.c:4190)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__request', quals=[] (at pp.c:4188)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__default__granted', quals=[], storage=['static'] (at pp.c:4192)
    FuncDecl: quals=None (at pp.c:4192)
      ParamList:  (at pp.c:4194)
        Decl: name='arg_0x10297f060', quals=[], storage=[] (at pp.c:4194)
          TypeDecl: declname='arg_0x10297f060', quals=[] (at pp.c:4194)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__default__granted', quals=[] (at pp.c:4192)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareSend__getPayload', quals=[], storage=['static'] (at pp.c:4200)
    FuncDecl: quals=None (at pp.c:4200)
      ParamList:  (at pp.c:4202)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4202)
          PtrDecl: quals=[] (at pp.c:4202)
            TypeDecl: declname='msg', quals=[] (at pp.c:4202)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4205)
          TypeDecl: declname='len', quals=[] (at pp.c:4205)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4198)
        TypeDecl: declname='CC2420TinyosNetworkP__BareSend__getPayload', quals=[] (at pp.c:4200)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[], storage=['static'] (at pp.c:4207)
    FuncDecl: quals=None (at pp.c:4207)
      ParamList:  (at pp.c:4209)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4209)
          PtrDecl: quals=[] (at pp.c:4209)
            TypeDecl: declname='msg', quals=[] (at pp.c:4209)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4213)
          TypeDecl: declname='error', quals=[] (at pp.c:4213)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[] (at pp.c:4207)
        IdentifierType: names=['void'] (at None)
  Decl: name='FcfsResourceQueueC__0__Init__init', quals=[], storage=['static'] (at pp.c:4215)
    FuncDecl: quals=None (at pp.c:4215)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__Init__init', quals=[] (at pp.c:4215)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[], storage=['static'] (at pp.c:4217)
    FuncDecl: quals=None (at pp.c:4217)
      ParamList:  (at pp.c:4217)
        Decl: name='id', quals=[], storage=[] (at pp.c:4217)
          TypeDecl: declname='id', quals=[] (at pp.c:4217)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[] (at pp.c:4217)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[], storage=['static'] (at pp.c:4219)
    FuncDecl: quals=None (at pp.c:4219)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[] (at pp.c:4219)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[], storage=['static'] (at pp.c:4228)
    FuncDecl: quals=None (at pp.c:4228)
      ParamList:  (at pp.c:4228)
        Decl: name='id', quals=[], storage=[] (at pp.c:4228)
          TypeDecl: declname='id', quals=[] (at pp.c:4228)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[] (at pp.c:4228)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[], storage=['static'] (at pp.c:4236)
    FuncDecl: quals=None (at pp.c:4236)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[] (at pp.c:4236)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='DefaultLplP__SubReceive__receive', quals=[], storage=['static'] (at pp.c:4244)
    FuncDecl: quals=None (at pp.c:4244)
      ParamList:  (at pp.c:4246)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4246)
          PtrDecl: quals=[] (at pp.c:4246)
            TypeDecl: declname='msg', quals=[] (at pp.c:4246)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4247)
          PtrDecl: quals=[] (at pp.c:4247)
            TypeDecl: declname='payload', quals=[] (at pp.c:4247)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4253)
          TypeDecl: declname='len', quals=[] (at pp.c:4253)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4240)
        TypeDecl: declname='DefaultLplP__SubReceive__receive', quals=[] (at pp.c:4244)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='DefaultLplP__SubSend__sendDone', quals=[], storage=['static'] (at pp.c:4255)
    FuncDecl: quals=None (at pp.c:4255)
      ParamList:  (at pp.c:4257)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4257)
          PtrDecl: quals=[] (at pp.c:4257)
            TypeDecl: declname='msg', quals=[] (at pp.c:4257)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4261)
          TypeDecl: declname='error', quals=[] (at pp.c:4261)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubSend__sendDone', quals=[] (at pp.c:4255)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__send__runTask', quals=[], storage=['static'] (at pp.c:4263)
    FuncDecl: quals=None (at pp.c:4263)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__send__runTask', quals=[] (at pp.c:4263)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestCca', quals=[], storage=['static'] (at pp.c:4265)
    FuncDecl: quals=None (at pp.c:4265)
      ParamList:  (at pp.c:4265)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4265)
          PtrDecl: quals=[] (at pp.c:4265)
            TypeDecl: declname='msg', quals=[] (at pp.c:4265)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestCca', quals=[] (at pp.c:4265)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:4267)
    FuncDecl: quals=None (at pp.c:4267)
      ParamList:  (at pp.c:4267)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4267)
          PtrDecl: quals=[] (at pp.c:4267)
            TypeDecl: declname='msg', quals=[] (at pp.c:4267)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:4267)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:4274)
    FuncDecl: quals=None (at pp.c:4274)
      ParamList:  (at pp.c:4274)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4274)
          PtrDecl: quals=[] (at pp.c:4274)
            TypeDecl: declname='msg', quals=[] (at pp.c:4274)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:4274)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__OffTimer__fired', quals=[], storage=['static'] (at pp.c:4276)
    FuncDecl: quals=None (at pp.c:4276)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__OffTimer__fired', quals=[] (at pp.c:4276)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Send__send', quals=[], storage=['static'] (at pp.c:4278)
    FuncDecl: quals=None (at pp.c:4278)
      ParamList:  (at pp.c:4280)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4280)
          PtrDecl: quals=[] (at pp.c:4280)
            TypeDecl: declname='msg', quals=[] (at pp.c:4280)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4288)
          TypeDecl: declname='len', quals=[] (at pp.c:4288)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__Send__send', quals=[] (at pp.c:4278)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__Send__maxPayloadLength', quals=[], storage=['static'] (at pp.c:4290)
    FuncDecl: quals=None (at pp.c:4290)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__Send__maxPayloadLength', quals=[] (at pp.c:4290)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:4292)
    FuncDecl: quals=None (at pp.c:4292)
      ParamList:  (at pp.c:4294)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4294)
          PtrDecl: quals=[] (at pp.c:4294)
            TypeDecl: declname='msg', quals=[] (at pp.c:4294)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:4297)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:4297)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[] (at pp.c:4292)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:4303)
    FuncDecl: quals=None (at pp.c:4303)
      ParamList:  (at pp.c:4305)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4305)
          PtrDecl: quals=[] (at pp.c:4305)
            TypeDecl: declname='msg', quals=[] (at pp.c:4305)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[] (at pp.c:4303)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='DefaultLplP__Resend__sendDone', quals=[], storage=['static'] (at pp.c:4307)
    FuncDecl: quals=None (at pp.c:4307)
      ParamList:  (at pp.c:4307)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:4307)
          PtrDecl: quals=[] (at pp.c:4307)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:4307)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4307)
          TypeDecl: declname='error', quals=[] (at pp.c:4307)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__Resend__sendDone', quals=[] (at pp.c:4307)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Init__init', quals=[], storage=['static'] (at pp.c:4309)
    FuncDecl: quals=None (at pp.c:4309)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__Init__init', quals=[] (at pp.c:4309)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SubControl__startDone', quals=[], storage=['static'] (at pp.c:4311)
    FuncDecl: quals=None (at pp.c:4311)
      ParamList:  (at pp.c:4311)
        Decl: name='error', quals=[], storage=[] (at pp.c:4311)
          TypeDecl: declname='error', quals=[] (at pp.c:4311)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__startDone', quals=[] (at pp.c:4311)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SubControl__stopDone', quals=[], storage=['static'] (at pp.c:4313)
    FuncDecl: quals=None (at pp.c:4313)
      ParamList:  (at pp.c:4313)
        Decl: name='error', quals=[], storage=[] (at pp.c:4313)
          TypeDecl: declname='error', quals=[] (at pp.c:4313)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__stopDone', quals=[] (at pp.c:4313)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__startRadio__runTask', quals=[], storage=['static'] (at pp.c:4315)
    FuncDecl: quals=None (at pp.c:4315)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__startRadio__runTask', quals=[] (at pp.c:4315)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SendDoneTimer__fired', quals=[], storage=['static'] (at pp.c:4317)
    FuncDecl: quals=None (at pp.c:4317)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendDoneTimer__fired', quals=[] (at pp.c:4317)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__resend__runTask', quals=[], storage=['static'] (at pp.c:4319)
    FuncDecl: quals=None (at pp.c:4319)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__resend__runTask', quals=[] (at pp.c:4319)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__PowerCycle__detected', quals=[], storage=['static'] (at pp.c:4321)
    FuncDecl: quals=None (at pp.c:4321)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__PowerCycle__detected', quals=[] (at pp.c:4321)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__stopRadio__runTask', quals=[], storage=['static'] (at pp.c:4323)
    FuncDecl: quals=None (at pp.c:4323)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__stopRadio__runTask', quals=[] (at pp.c:4323)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SplitControl__start', quals=[], storage=['static'] (at pp.c:4325)
    FuncDecl: quals=None (at pp.c:4325)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControl__start', quals=[] (at pp.c:4325)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__startRadio__runTask', quals=[], storage=['static'] (at pp.c:4327)
    FuncDecl: quals=None (at pp.c:4327)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__startRadio__runTask', quals=[] (at pp.c:4327)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SubControl__startDone', quals=[], storage=['static'] (at pp.c:4329)
    FuncDecl: quals=None (at pp.c:4329)
      ParamList:  (at pp.c:4329)
        Decl: name='error', quals=[], storage=[] (at pp.c:4329)
          TypeDecl: declname='error', quals=[] (at pp.c:4329)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__startDone', quals=[] (at pp.c:4329)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SubControl__stopDone', quals=[], storage=['static'] (at pp.c:4331)
    FuncDecl: quals=None (at pp.c:4331)
      ParamList:  (at pp.c:4331)
        Decl: name='error', quals=[], storage=[] (at pp.c:4331)
          TypeDecl: declname='error', quals=[] (at pp.c:4331)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__stopDone', quals=[] (at pp.c:4331)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__getCca__runTask', quals=[], storage=['static'] (at pp.c:4333)
    FuncDecl: quals=None (at pp.c:4333)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__getCca__runTask', quals=[] (at pp.c:4333)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__OnTimer__fired', quals=[], storage=['static'] (at pp.c:4335)
    FuncDecl: quals=None (at pp.c:4335)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__OnTimer__fired', quals=[] (at pp.c:4335)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__PowerCycle__getSleepInterval', quals=[], storage=['static'] (at pp.c:4337)
    FuncDecl: quals=None (at pp.c:4337)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__PowerCycle__getSleepInterval', quals=[] (at pp.c:4337)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='PowerCycleP__stopRadio__runTask', quals=[], storage=['static'] (at pp.c:4339)
    FuncDecl: quals=None (at pp.c:4339)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__stopRadio__runTask', quals=[] (at pp.c:4339)
        IdentifierType: names=['void'] (at None)
  Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:4341)
    FuncDecl: quals=None (at pp.c:4341)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[] (at pp.c:4341)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[], storage=['static'] (at pp.c:4342)
    FuncDecl: quals=None (at pp.c:4342)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[] (at pp.c:4342)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SubReceive__receive', quals=[], storage=['static'] (at pp.c:4350)
    FuncDecl: quals=None (at pp.c:4350)
      ParamList:  (at pp.c:4352)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4352)
          PtrDecl: quals=[] (at pp.c:4352)
            TypeDecl: declname='msg', quals=[] (at pp.c:4352)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4353)
          PtrDecl: quals=[] (at pp.c:4353)
            TypeDecl: declname='payload', quals=[] (at pp.c:4353)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4359)
          TypeDecl: declname='len', quals=[] (at pp.c:4359)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4346)
        TypeDecl: declname='CC2420ActiveMessageP__SubReceive__receive', quals=[] (at pp.c:4350)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SubSend__sendDone', quals=[], storage=['static'] (at pp.c:4361)
    FuncDecl: quals=None (at pp.c:4361)
      ParamList:  (at pp.c:4363)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4363)
          PtrDecl: quals=[] (at pp.c:4363)
            TypeDecl: declname='msg', quals=[] (at pp.c:4363)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4367)
          TypeDecl: declname='error', quals=[] (at pp.c:4367)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubSend__sendDone', quals=[] (at pp.c:4361)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[], storage=['static'] (at pp.c:4369)
    FuncDecl: quals=None (at pp.c:4369)
      ParamList:  (at pp.c:4369)
        Decl: name='error', quals=[], storage=[] (at pp.c:4369)
          TypeDecl: declname='error', quals=[] (at pp.c:4369)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[] (at pp.c:4369)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[], storage=['static'] (at pp.c:4371)
    FuncDecl: quals=None (at pp.c:4371)
      ParamList:  (at pp.c:4373)
        Decl: name='arg_0x102b20d60', quals=[], storage=[] (at pp.c:4373)
          TypeDecl: declname='arg_0x102b20d60', quals=[] (at pp.c:4373)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4375)
          PtrDecl: quals=[] (at pp.c:4375)
            TypeDecl: declname='msg', quals=[] (at pp.c:4375)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[] (at pp.c:4371)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:4377)
    FuncDecl: quals=None (at pp.c:4377)
      ParamList:  (at pp.c:4379)
        Decl: name='arg_0x102b20d60', quals=[], storage=[] (at pp.c:4379)
          TypeDecl: declname='arg_0x102b20d60', quals=[] (at pp.c:4379)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4381)
          PtrDecl: quals=[] (at pp.c:4381)
            TypeDecl: declname='msg', quals=[] (at pp.c:4381)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[] (at pp.c:4377)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:4388)
    FuncDecl: quals=None (at pp.c:4388)
      ParamList:  (at pp.c:4390)
        Decl: name='arg_0x102b20d60', quals=[], storage=[] (at pp.c:4390)
          TypeDecl: declname='arg_0x102b20d60', quals=[] (at pp.c:4390)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4392)
          PtrDecl: quals=[] (at pp.c:4392)
            TypeDecl: declname='msg', quals=[] (at pp.c:4392)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[] (at pp.c:4388)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[], storage=['static'] (at pp.c:4394)
    FuncDecl: quals=None (at pp.c:4394)
      ParamList:  (at pp.c:4396)
        Decl: name='arg_0x102b20258', quals=[], storage=[] (at pp.c:4396)
          TypeDecl: declname='arg_0x102b20258', quals=[] (at pp.c:4396)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='dest', quals=[], storage=[] (at pp.c:4398)
          TypeDecl: declname='dest', quals=[] (at pp.c:4398)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4400)
          PtrDecl: quals=[] (at pp.c:4400)
            TypeDecl: declname='msg', quals=[] (at pp.c:4400)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[] (at pp.c:4394)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[], storage=['static'] (at pp.c:4402)
    FuncDecl: quals=None (at pp.c:4402)
      ParamList:  (at pp.c:4402)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4402)
          PtrDecl: quals=[] (at pp.c:4402)
            TypeDecl: declname='msg', quals=[] (at pp.c:4402)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[] (at pp.c:4402)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:4404)
    FuncDecl: quals=None (at pp.c:4404)
      ParamList:  (at pp.c:4404)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4404)
          PtrDecl: quals=[] (at pp.c:4404)
            TypeDecl: declname='msg', quals=[] (at pp.c:4404)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:4404)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:4411)
    FuncDecl: quals=None (at pp.c:4411)
      ParamList:  (at pp.c:4411)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4411)
          PtrDecl: quals=[] (at pp.c:4411)
            TypeDecl: declname='msg', quals=[] (at pp.c:4411)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:4411)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__payloadLength', quals=[], storage=['static'] (at pp.c:4413)
    FuncDecl: quals=None (at pp.c:4413)
      ParamList:  (at pp.c:4415)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4415)
          PtrDecl: quals=[] (at pp.c:4415)
            TypeDecl: declname='msg', quals=[] (at pp.c:4415)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__payloadLength', quals=[] (at pp.c:4413)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[], storage=['static'] (at pp.c:4417)
    FuncDecl: quals=None (at pp.c:4417)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[] (at pp.c:4417)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[], storage=['static'] (at pp.c:4419)
    FuncDecl: quals=None (at pp.c:4419)
      ParamList:  (at pp.c:4421)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4421)
          PtrDecl: quals=[] (at pp.c:4421)
            TypeDecl: declname='msg', quals=[] (at pp.c:4421)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4425)
          TypeDecl: declname='len', quals=[] (at pp.c:4425)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[] (at pp.c:4419)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMSend__send', quals=[], storage=['static'] (at pp.c:4427)
    FuncDecl: quals=None (at pp.c:4427)
      ParamList:  (at pp.c:4429)
        Decl: name='arg_0x102b257d8', quals=[], storage=[] (at pp.c:4429)
          TypeDecl: declname='arg_0x102b257d8', quals=[] (at pp.c:4429)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:4431)
          TypeDecl: declname='addr', quals=[] (at pp.c:4431)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4433)
          PtrDecl: quals=[] (at pp.c:4433)
            TypeDecl: declname='msg', quals=[] (at pp.c:4433)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4442)
          TypeDecl: declname='len', quals=[] (at pp.c:4442)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMSend__send', quals=[] (at pp.c:4427)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Snoop__default__receive', quals=[], storage=['static'] (at pp.c:4450)
    FuncDecl: quals=None (at pp.c:4450)
      ParamList:  (at pp.c:4452)
        Decl: name='arg_0x102b23480', quals=[], storage=[] (at pp.c:4452)
          TypeDecl: declname='arg_0x102b23480', quals=[] (at pp.c:4452)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4454)
          PtrDecl: quals=[] (at pp.c:4454)
            TypeDecl: declname='msg', quals=[] (at pp.c:4454)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4455)
          PtrDecl: quals=[] (at pp.c:4455)
            TypeDecl: declname='payload', quals=[] (at pp.c:4455)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4461)
          TypeDecl: declname='len', quals=[] (at pp.c:4461)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4446)
        TypeDecl: declname='CC2420ActiveMessageP__Snoop__default__receive', quals=[] (at pp.c:4450)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Receive__default__receive', quals=[], storage=['static'] (at pp.c:4469)
    FuncDecl: quals=None (at pp.c:4469)
      ParamList:  (at pp.c:4471)
        Decl: name='arg_0x102b24908', quals=[], storage=[] (at pp.c:4471)
          TypeDecl: declname='arg_0x102b24908', quals=[] (at pp.c:4471)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4473)
          PtrDecl: quals=[] (at pp.c:4473)
            TypeDecl: declname='msg', quals=[] (at pp.c:4473)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4474)
          PtrDecl: quals=[] (at pp.c:4474)
            TypeDecl: declname='payload', quals=[] (at pp.c:4474)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4480)
          TypeDecl: declname='len', quals=[] (at pp.c:4480)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4465)
        TypeDecl: declname='CC2420ActiveMessageP__Receive__default__receive', quals=[] (at pp.c:4469)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__source', quals=[], storage=['static'] (at pp.c:4482)
    FuncDecl: quals=None (at pp.c:4482)
      ParamList:  (at pp.c:4484)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4484)
          PtrDecl: quals=[] (at pp.c:4484)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4484)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__source', quals=[] (at pp.c:4482)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__address', quals=[], storage=['static'] (at pp.c:4486)
    FuncDecl: quals=None (at pp.c:4486)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__address', quals=[] (at pp.c:4486)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__destination', quals=[], storage=['static'] (at pp.c:4496)
    FuncDecl: quals=None (at pp.c:4496)
      ParamList:  (at pp.c:4498)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4498)
          PtrDecl: quals=[] (at pp.c:4498)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4498)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__destination', quals=[] (at pp.c:4496)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__setDestination', quals=[], storage=['static'] (at pp.c:4500)
    FuncDecl: quals=None (at pp.c:4500)
      ParamList:  (at pp.c:4502)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4502)
          PtrDecl: quals=[] (at pp.c:4502)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4502)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:4506)
          TypeDecl: declname='addr', quals=[] (at pp.c:4506)
            IdentifierType: names=['am_addr_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setDestination', quals=[] (at pp.c:4500)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__type', quals=[], storage=['static'] (at pp.c:4508)
    FuncDecl: quals=None (at pp.c:4508)
      ParamList:  (at pp.c:4510)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4510)
          PtrDecl: quals=[] (at pp.c:4510)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4510)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__type', quals=[] (at pp.c:4508)
        IdentifierType: names=['am_id_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__setType', quals=[], storage=['static'] (at pp.c:4512)
    FuncDecl: quals=None (at pp.c:4512)
      ParamList:  (at pp.c:4514)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4514)
          PtrDecl: quals=[] (at pp.c:4514)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4514)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='t', quals=[], storage=[] (at pp.c:4518)
          TypeDecl: declname='t', quals=[] (at pp.c:4518)
            IdentifierType: names=['am_id_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setType', quals=[] (at pp.c:4512)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__isForMe', quals=[], storage=['static'] (at pp.c:4520)
    FuncDecl: quals=None (at pp.c:4520)
      ParamList:  (at pp.c:4522)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4522)
          PtrDecl: quals=[] (at pp.c:4522)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4522)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__isForMe', quals=[] (at pp.c:4520)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioResource__granted', quals=[], storage=['static'] (at pp.c:4524)
    FuncDecl: quals=None (at pp.c:4524)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioResource__granted', quals=[] (at pp.c:4524)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__AMSend__send', quals=[], storage=['static'] (at pp.c:4526)
    FuncDecl: quals=None (at pp.c:4526)
      ParamList:  (at pp.c:4526)
        Decl: name='addr', quals=[], storage=[] (at pp.c:4526)
          TypeDecl: declname='addr', quals=[] (at pp.c:4526)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4528)
          PtrDecl: quals=[] (at pp.c:4528)
            TypeDecl: declname='msg', quals=[] (at pp.c:4528)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4537)
          TypeDecl: declname='len', quals=[] (at pp.c:4537)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__AMSend__send', quals=[] (at pp.c:4526)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueEntryP__0__Send__sendDone', quals=[], storage=['static'] (at pp.c:4539)
    FuncDecl: quals=None (at pp.c:4539)
      ParamList:  (at pp.c:4541)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4541)
          PtrDecl: quals=[] (at pp.c:4541)
            TypeDecl: declname='msg', quals=[] (at pp.c:4541)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4545)
          TypeDecl: declname='error', quals=[] (at pp.c:4545)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__Send__sendDone', quals=[] (at pp.c:4539)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:4547)
    FuncDecl: quals=None (at pp.c:4547)
      ParamList:  (at pp.c:4549)
        Decl: name='arg_0x102bbe020', quals=[], storage=[] (at pp.c:4549)
          TypeDecl: declname='arg_0x102bbe020', quals=[] (at pp.c:4549)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4551)
          PtrDecl: quals=[] (at pp.c:4551)
            TypeDecl: declname='msg', quals=[] (at pp.c:4551)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4558)
          TypeDecl: declname='error', quals=[] (at pp.c:4558)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__AMSend__sendDone', quals=[] (at pp.c:4547)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Send__send', quals=[], storage=['static'] (at pp.c:4560)
    FuncDecl: quals=None (at pp.c:4560)
      ParamList:  (at pp.c:4562)
        Decl: name='arg_0x102bc1e18', quals=[], storage=[] (at pp.c:4562)
          TypeDecl: declname='arg_0x102bc1e18', quals=[] (at pp.c:4562)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4564)
          PtrDecl: quals=[] (at pp.c:4564)
            TypeDecl: declname='msg', quals=[] (at pp.c:4564)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4572)
          TypeDecl: declname='len', quals=[] (at pp.c:4572)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Send__send', quals=[] (at pp.c:4560)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__0__Send__default__sendDone', quals=[], storage=['static'] (at pp.c:4574)
    FuncDecl: quals=None (at pp.c:4574)
      ParamList:  (at pp.c:4576)
        Decl: name='arg_0x102bc1e18', quals=[], storage=[] (at pp.c:4576)
          TypeDecl: declname='arg_0x102bc1e18', quals=[] (at pp.c:4576)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4578)
          PtrDecl: quals=[] (at pp.c:4578)
            TypeDecl: declname='msg', quals=[] (at pp.c:4578)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4582)
          TypeDecl: declname='error', quals=[] (at pp.c:4582)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Send__default__sendDone', quals=[] (at pp.c:4574)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__errorTask__runTask', quals=[], storage=['static'] (at pp.c:4584)
    FuncDecl: quals=None (at pp.c:4584)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__errorTask__runTask', quals=[] (at pp.c:4584)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__CancelTask__runTask', quals=[], storage=['static'] (at pp.c:4586)
    FuncDecl: quals=None (at pp.c:4586)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__CancelTask__runTask', quals=[] (at pp.c:4586)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__SubAMSend__sendDone', quals=[], storage=['static'] (at pp.c:4588)
    FuncDecl: quals=None (at pp.c:4588)
      ParamList:  (at pp.c:4590)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4590)
          PtrDecl: quals=[] (at pp.c:4590)
            TypeDecl: declname='msg', quals=[] (at pp.c:4590)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4597)
          TypeDecl: declname='error', quals=[] (at pp.c:4597)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__SubAMSend__sendDone', quals=[] (at pp.c:4588)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__AMSend__send', quals=[], storage=['static'] (at pp.c:4599)
    FuncDecl: quals=None (at pp.c:4599)
      ParamList:  (at pp.c:4599)
        Decl: name='addr', quals=[], storage=[] (at pp.c:4599)
          TypeDecl: declname='addr', quals=[] (at pp.c:4599)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4601)
          PtrDecl: quals=[] (at pp.c:4601)
            TypeDecl: declname='msg', quals=[] (at pp.c:4601)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4610)
          TypeDecl: declname='len', quals=[] (at pp.c:4610)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__AMSend__send', quals=[] (at pp.c:4599)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueEntryP__1__AMSend__send', quals=[], storage=['static'] (at pp.c:4612)
    FuncDecl: quals=None (at pp.c:4612)
      ParamList:  (at pp.c:4612)
        Decl: name='addr', quals=[], storage=[] (at pp.c:4612)
          TypeDecl: declname='addr', quals=[] (at pp.c:4612)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4614)
          PtrDecl: quals=[] (at pp.c:4614)
            TypeDecl: declname='msg', quals=[] (at pp.c:4614)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4623)
          TypeDecl: declname='len', quals=[] (at pp.c:4623)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__1__AMSend__send', quals=[] (at pp.c:4612)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueEntryP__1__Send__sendDone', quals=[], storage=['static'] (at pp.c:4625)
    FuncDecl: quals=None (at pp.c:4625)
      ParamList:  (at pp.c:4627)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4627)
          PtrDecl: quals=[] (at pp.c:4627)
            TypeDecl: declname='msg', quals=[] (at pp.c:4627)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4631)
          TypeDecl: declname='error', quals=[] (at pp.c:4631)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__1__Send__sendDone', quals=[] (at pp.c:4625)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:4633)
    FuncDecl: quals=None (at pp.c:4633)
      ParamList:  (at pp.c:4635)
        Decl: name='arg_0x102bbe020', quals=[], storage=[] (at pp.c:4635)
          TypeDecl: declname='arg_0x102bbe020', quals=[] (at pp.c:4635)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4637)
          PtrDecl: quals=[] (at pp.c:4637)
            TypeDecl: declname='msg', quals=[] (at pp.c:4637)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4644)
          TypeDecl: declname='error', quals=[] (at pp.c:4644)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__AMSend__sendDone', quals=[] (at pp.c:4633)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__Send__send', quals=[], storage=['static'] (at pp.c:4646)
    FuncDecl: quals=None (at pp.c:4646)
      ParamList:  (at pp.c:4648)
        Decl: name='arg_0x102bc1e18', quals=[], storage=[] (at pp.c:4648)
          TypeDecl: declname='arg_0x102bc1e18', quals=[] (at pp.c:4648)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4650)
          PtrDecl: quals=[] (at pp.c:4650)
            TypeDecl: declname='msg', quals=[] (at pp.c:4650)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4658)
          TypeDecl: declname='len', quals=[] (at pp.c:4658)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__Send__send', quals=[] (at pp.c:4646)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__1__Send__default__sendDone', quals=[], storage=['static'] (at pp.c:4660)
    FuncDecl: quals=None (at pp.c:4660)
      ParamList:  (at pp.c:4662)
        Decl: name='arg_0x102bc1e18', quals=[], storage=[] (at pp.c:4662)
          TypeDecl: declname='arg_0x102bc1e18', quals=[] (at pp.c:4662)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4664)
          PtrDecl: quals=[] (at pp.c:4664)
            TypeDecl: declname='msg', quals=[] (at pp.c:4664)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4668)
          TypeDecl: declname='error', quals=[] (at pp.c:4668)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__Send__default__sendDone', quals=[] (at pp.c:4660)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__errorTask__runTask', quals=[], storage=['static'] (at pp.c:4670)
    FuncDecl: quals=None (at pp.c:4670)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__1__errorTask__runTask', quals=[] (at pp.c:4670)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__CancelTask__runTask', quals=[], storage=['static'] (at pp.c:4672)
    FuncDecl: quals=None (at pp.c:4672)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__1__CancelTask__runTask', quals=[] (at pp.c:4672)
        IdentifierType: names=['void'] (at None)
  Decl: name='PlatformP__MoteInit__init', quals=[], storage=['static'] (at pp.c:4674)
    FuncDecl: quals=None (at pp.c:4674)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PlatformP__MoteInit__init', quals=[] (at pp.c:4674)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PlatformP__MoteClockInit__init', quals=[], storage=['static'] (at pp.c:4676)
    FuncDecl: quals=None (at pp.c:4676)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PlatformP__MoteClockInit__init', quals=[] (at pp.c:4676)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PlatformP__LedsInit__init', quals=[], storage=['static'] (at pp.c:4678)
    FuncDecl: quals=None (at pp.c:4678)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PlatformP__LedsInit__init', quals=[] (at pp.c:4678)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PlatformP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:4680)
    FuncDecl: quals=None (at pp.c:4680)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PlatformP__Init__init', quals=[] (at pp.c:4680)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='MotePlatformC__uwait', quals=[], storage=['__inline', 'static'] (at pp.c:4682)
    FuncDecl: quals=None (at pp.c:4682)
      ParamList:  (at pp.c:4682)
        Decl: name='u', quals=[], storage=[] (at pp.c:4682)
          TypeDecl: declname='u', quals=[] (at pp.c:4682)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='MotePlatformC__uwait', quals=[] (at pp.c:4682)
        IdentifierType: names=['void'] (at None)
  Decl: name='MotePlatformC__TOSH_wait', quals=[], storage=['__inline', 'static'] (at pp.c:4687)
    FuncDecl: quals=None (at pp.c:4687)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='MotePlatformC__TOSH_wait', quals=[] (at pp.c:4687)
        IdentifierType: names=['void'] (at None)
  Decl: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit', quals=[], storage=['static'] (at pp.c:4692)
    FuncDecl: quals=None (at pp.c:4692)
      ParamList:  (at pp.c:4692)
        Decl: name='set', quals=[], storage=[] (at pp.c:4692)
          TypeDecl: declname='set', quals=[] (at pp.c:4692)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='MotePlatformC__TOSH_FLASH_M25P_DP_bit', quals=[] (at pp.c:4692)
        IdentifierType: names=['void'] (at None)
  Decl: name='MotePlatformC__TOSH_FLASH_M25P_DP', quals=[], storage=['inline', 'static'] (at pp.c:4703)
    FuncDecl: quals=None (at pp.c:4703)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='MotePlatformC__TOSH_FLASH_M25P_DP', quals=[] (at pp.c:4703)
        IdentifierType: names=['void'] (at None)
  Decl: name='MotePlatformC__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:4705)
    FuncDecl: quals=None (at pp.c:4705)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='MotePlatformC__Init__init', quals=[] (at pp.c:4705)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__initTimerB', quals=[], storage=['static'] (at pp.c:4707)
    FuncDecl: quals=None (at pp.c:4707)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initTimerB', quals=[] (at pp.c:4707)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__initTimerA', quals=[], storage=['static'] (at pp.c:4709)
    FuncDecl: quals=None (at pp.c:4709)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initTimerA', quals=[] (at pp.c:4709)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__setupDcoCalibrate', quals=[], storage=['static'] (at pp.c:4711)
    FuncDecl: quals=None (at pp.c:4711)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__setupDcoCalibrate', quals=[] (at pp.c:4711)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__initClocks', quals=[], storage=['static'] (at pp.c:4712)
    FuncDecl: quals=None (at pp.c:4712)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initClocks', quals=[] (at pp.c:4712)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__IE1@"0x0000"', quals=['volatile'], storage=['static'] (at pp.c:4714)
    TypeDecl: declname='Msp430ClockP__IE1@"0x0000"', quals=['volatile'] (at pp.c:4714)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430ClockP__TA0CTL@"0x0160"', quals=['volatile'], storage=['static'] (at pp.c:4715)
    TypeDecl: declname='Msp430ClockP__TA0CTL@"0x0160"', quals=['volatile'] (at pp.c:4715)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430ClockP__TA0IV@"0x012E"', quals=['volatile'], storage=['static'] (at pp.c:4716)
    TypeDecl: declname='Msp430ClockP__TA0IV@"0x012E"', quals=['volatile'] (at pp.c:4716)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430ClockP__TBCTL@"0x0180"', quals=['volatile'], storage=['static'] (at pp.c:4717)
    TypeDecl: declname='Msp430ClockP__TBCTL@"0x0180"', quals=['volatile'] (at pp.c:4717)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430ClockP__TBIV@"0x011E"', quals=['volatile'], storage=['static'] (at pp.c:4718)
    TypeDecl: declname='Msp430ClockP__TBIV@"0x011E"', quals=['volatile'] (at pp.c:4718)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:4720)
    Enum: name='Msp430ClockP____nesc_unnamed4320' (at pp.c:4720)
      EnumeratorList:  (at pp.c:4722)
        Enumerator: name='Msp430ClockP__ACLK_CALIB_PERIOD' (at pp.c:4722)
          Constant: type='int', value='8' (at pp.c:4722)
        Enumerator: name='Msp430ClockP__TARGET_DCO_DELTA' (at pp.c:4723)
          BinaryOp: op='*' (at pp.c:4723)
            BinaryOp: op='/' (at pp.c:4723)
              Constant: type='int', value='4096' (at pp.c:4723)
              Constant: type='int', value='32' (at pp.c:4723)
            ID: name='Msp430ClockP__ACLK_CALIB_PERIOD' (at pp.c:4723)
  Decl: name='Msp430ClockP__McuPowerOverride__lowestState', quals=[], storage=['inline', 'static'] (at pp.c:4726)
    FuncDecl: quals=None (at pp.c:4726)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__McuPowerOverride__lowestState', quals=[] (at pp.c:4726)
        IdentifierType: names=['mcu_power_t'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[], storage=['inline', 'static'] (at pp.c:4730)
    FuncDecl: quals=None (at pp.c:4730)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[] (at pp.c:4730)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[], storage=['inline', 'static'] (at pp.c:4732)
    FuncDecl: quals=None (at pp.c:4732)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[] (at pp.c:4732)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[], storage=['inline', 'static'] (at pp.c:4734)
    FuncDecl: quals=None (at pp.c:4734)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[] (at pp.c:4734)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[], storage=['inline', 'static'] (at pp.c:4736)
    FuncDecl: quals=None (at pp.c:4736)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[] (at pp.c:4736)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[], storage=['inline', 'static'] (at pp.c:4738)
    FuncDecl: quals=None (at pp.c:4738)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[] (at pp.c:4738)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[], storage=['inline', 'static'] (at pp.c:4743)
    FuncDecl: quals=None (at pp.c:4743)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[] (at pp.c:4743)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[], storage=['inline', 'static'] (at pp.c:4748)
    FuncDecl: quals=None (at pp.c:4748)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[] (at pp.c:4748)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[], storage=['inline', 'static'] (at pp.c:4753)
    FuncDecl: quals=None (at pp.c:4753)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[] (at pp.c:4753)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__startTimerA', quals=[], storage=['inline', 'static'] (at pp.c:4759)
    FuncDecl: quals=None (at pp.c:4759)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__startTimerA', quals=[] (at pp.c:4759)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__startTimerB', quals=[], storage=['inline', 'static'] (at pp.c:4761)
    FuncDecl: quals=None (at pp.c:4761)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__startTimerB', quals=[] (at pp.c:4761)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__set_dco_calib', quals=[], storage=['static'] (at pp.c:4763)
    FuncDecl: quals=None (at pp.c:4763)
      ParamList:  (at pp.c:4763)
        Decl: name='calib', quals=[], storage=[] (at pp.c:4763)
          TypeDecl: declname='calib', quals=[] (at pp.c:4763)
            IdentifierType: names=['int'] (at None)
      TypeDecl: declname='Msp430ClockP__set_dco_calib', quals=[] (at pp.c:4763)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__test_calib_busywait_delta', quals=[], storage=['inline', 'static'] (at pp.c:4769)
    FuncDecl: quals=None (at pp.c:4769)
      ParamList:  (at pp.c:4769)
        Decl: name='calib', quals=[], storage=[] (at pp.c:4769)
          TypeDecl: declname='calib', quals=[] (at pp.c:4769)
            IdentifierType: names=['int'] (at None)
      TypeDecl: declname='Msp430ClockP__test_calib_busywait_delta', quals=[] (at pp.c:4769)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430ClockP__busyCalibrateDco', quals=[], storage=['inline', 'static'] (at pp.c:4771)
    FuncDecl: quals=None (at pp.c:4771)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__busyCalibrateDco', quals=[] (at pp.c:4771)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:4773)
    FuncDecl: quals=None (at pp.c:4773)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Init__init', quals=[] (at pp.c:4773)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430TimerP__0__Event__fired', quals=[], storage=['static'] (at pp.c:4775)
    FuncDecl: quals=None (at pp.c:4775)
      ParamList:  (at pp.c:4777)
        Decl: name='arg_0x1015d0de0', quals=[], storage=[] (at pp.c:4777)
          TypeDecl: declname='arg_0x1015d0de0', quals=[] (at pp.c:4777)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Event__fired', quals=[] (at pp.c:4775)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Timer__overflow', quals=[], storage=['static'] (at pp.c:4779)
    FuncDecl: quals=None (at pp.c:4779)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Timer__overflow', quals=[] (at pp.c:4779)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Timer__get', quals=[], storage=['inline', 'static'] (at pp.c:4781)
    FuncDecl: quals=None (at pp.c:4781)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Timer__get', quals=[] (at pp.c:4781)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerP__0__VectorTimerX0__fired', quals=[], storage=['inline', 'static'] (at pp.c:4783)
    FuncDecl: quals=None (at pp.c:4783)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__VectorTimerX0__fired', quals=[] (at pp.c:4783)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__VectorTimerX1__fired', quals=[], storage=['inline', 'static'] (at pp.c:4788)
    FuncDecl: quals=None (at pp.c:4788)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__VectorTimerX1__fired', quals=[] (at pp.c:4788)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Overflow__fired', quals=[], storage=['inline', 'static'] (at pp.c:4794)
    FuncDecl: quals=None (at pp.c:4794)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Overflow__fired', quals=[] (at pp.c:4794)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Event__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:4803)
    FuncDecl: quals=None (at pp.c:4803)
      ParamList:  (at pp.c:4803)
        Decl: name='n', quals=[], storage=[] (at pp.c:4803)
          TypeDecl: declname='n', quals=[] (at pp.c:4803)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Event__default__fired', quals=[] (at pp.c:4803)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Event__fired', quals=[], storage=['static'] (at pp.c:4805)
    FuncDecl: quals=None (at pp.c:4805)
      ParamList:  (at pp.c:4807)
        Decl: name='arg_0x1015d0de0', quals=[], storage=[] (at pp.c:4807)
          TypeDecl: declname='arg_0x1015d0de0', quals=[] (at pp.c:4807)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Event__fired', quals=[] (at pp.c:4805)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Timer__overflow', quals=[], storage=['static'] (at pp.c:4809)
    FuncDecl: quals=None (at pp.c:4809)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Timer__overflow', quals=[] (at pp.c:4809)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Timer__get', quals=[], storage=['static'] (at pp.c:4811)
    FuncDecl: quals=None (at pp.c:4811)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Timer__get', quals=[] (at pp.c:4811)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerP__1__Timer__isOverflowPending', quals=[], storage=['inline', 'static'] (at pp.c:4813)
    FuncDecl: quals=None (at pp.c:4813)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Timer__isOverflowPending', quals=[] (at pp.c:4813)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430TimerP__1__VectorTimerX0__fired', quals=[], storage=['inline', 'static'] (at pp.c:4815)
    FuncDecl: quals=None (at pp.c:4815)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__VectorTimerX0__fired', quals=[] (at pp.c:4815)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__VectorTimerX1__fired', quals=[], storage=['inline', 'static'] (at pp.c:4820)
    FuncDecl: quals=None (at pp.c:4820)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__VectorTimerX1__fired', quals=[] (at pp.c:4820)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Overflow__fired', quals=[], storage=['inline', 'static'] (at pp.c:4826)
    FuncDecl: quals=None (at pp.c:4826)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Overflow__fired', quals=[] (at pp.c:4826)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Event__default__fired', quals=[], storage=['static'] (at pp.c:4835)
    FuncDecl: quals=None (at pp.c:4835)
      ParamList:  (at pp.c:4835)
        Decl: name='n', quals=[], storage=[] (at pp.c:4835)
          TypeDecl: declname='n', quals=[] (at pp.c:4835)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Event__default__fired', quals=[] (at pp.c:4835)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Capture__captured', quals=[], storage=['static'] (at pp.c:4837)
    FuncDecl: quals=None (at pp.c:4837)
      ParamList:  (at pp.c:4837)
        Decl: name='time', quals=[], storage=[] (at pp.c:4837)
          TypeDecl: declname='time', quals=[] (at pp.c:4837)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Capture__captured', quals=[] (at pp.c:4837)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Compare__fired', quals=[], storage=['static'] (at pp.c:4839)
    FuncDecl: quals=None (at pp.c:4839)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Compare__fired', quals=[] (at pp.c:4839)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__0__cc_t', quals=[], storage=['typedef'] (at pp.c:4841)
    TypeDecl: declname='Msp430TimerCapComP__0__cc_t', quals=[] (at pp.c:4841)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:4844)
    FuncDecl: quals=None (at pp.c:4844)
      ParamList:  (at pp.c:4844)
        Decl: name='x', quals=[], storage=[] (at pp.c:4844)
          TypeDecl: declname='x', quals=[] (at pp.c:4844)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__int2CC', quals=[] (at pp.c:4844)
        IdentifierType: names=['Msp430TimerCapComP__0__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:4846)
    FuncDecl: quals=None (at pp.c:4846)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Control__getControl', quals=[] (at pp.c:4846)
        IdentifierType: names=['Msp430TimerCapComP__0__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:4848)
    FuncDecl: quals=None (at pp.c:4848)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Capture__getEvent', quals=[] (at pp.c:4848)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__Event__fired', quals=[], storage=['static'] (at pp.c:4850)
    FuncDecl: quals=None (at pp.c:4850)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Event__fired', quals=[] (at pp.c:4850)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:4858)
    FuncDecl: quals=None (at pp.c:4858)
      ParamList:  (at pp.c:4858)
        Decl: name='n', quals=[], storage=[] (at pp.c:4858)
          TypeDecl: declname='n', quals=[] (at pp.c:4858)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Capture__default__captured', quals=[] (at pp.c:4858)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:4862)
    FuncDecl: quals=None (at pp.c:4862)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Compare__default__fired', quals=[] (at pp.c:4862)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:4866)
    FuncDecl: quals=None (at pp.c:4866)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Timer__overflow', quals=[] (at pp.c:4866)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Capture__captured', quals=[], storage=['static'] (at pp.c:4868)
    FuncDecl: quals=None (at pp.c:4868)
      ParamList:  (at pp.c:4868)
        Decl: name='time', quals=[], storage=[] (at pp.c:4868)
          TypeDecl: declname='time', quals=[] (at pp.c:4868)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Capture__captured', quals=[] (at pp.c:4868)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Compare__fired', quals=[], storage=['static'] (at pp.c:4870)
    FuncDecl: quals=None (at pp.c:4870)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Compare__fired', quals=[] (at pp.c:4870)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__1__cc_t', quals=[], storage=['typedef'] (at pp.c:4872)
    TypeDecl: declname='Msp430TimerCapComP__1__cc_t', quals=[] (at pp.c:4872)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:4875)
    FuncDecl: quals=None (at pp.c:4875)
      ParamList:  (at pp.c:4875)
        Decl: name='x', quals=[], storage=[] (at pp.c:4875)
          TypeDecl: declname='x', quals=[] (at pp.c:4875)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__int2CC', quals=[] (at pp.c:4875)
        IdentifierType: names=['Msp430TimerCapComP__1__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:4877)
    FuncDecl: quals=None (at pp.c:4877)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Control__getControl', quals=[] (at pp.c:4877)
        IdentifierType: names=['Msp430TimerCapComP__1__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:4879)
    FuncDecl: quals=None (at pp.c:4879)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Capture__getEvent', quals=[] (at pp.c:4879)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__Event__fired', quals=[], storage=['static'] (at pp.c:4881)
    FuncDecl: quals=None (at pp.c:4881)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Event__fired', quals=[] (at pp.c:4881)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:4889)
    FuncDecl: quals=None (at pp.c:4889)
      ParamList:  (at pp.c:4889)
        Decl: name='n', quals=[], storage=[] (at pp.c:4889)
          TypeDecl: declname='n', quals=[] (at pp.c:4889)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Capture__default__captured', quals=[] (at pp.c:4889)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:4893)
    FuncDecl: quals=None (at pp.c:4893)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Compare__default__fired', quals=[] (at pp.c:4893)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:4897)
    FuncDecl: quals=None (at pp.c:4897)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Timer__overflow', quals=[] (at pp.c:4897)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Capture__captured', quals=[], storage=['static'] (at pp.c:4899)
    FuncDecl: quals=None (at pp.c:4899)
      ParamList:  (at pp.c:4899)
        Decl: name='time', quals=[], storage=[] (at pp.c:4899)
          TypeDecl: declname='time', quals=[] (at pp.c:4899)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Capture__captured', quals=[] (at pp.c:4899)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Compare__fired', quals=[], storage=['static'] (at pp.c:4901)
    FuncDecl: quals=None (at pp.c:4901)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Compare__fired', quals=[] (at pp.c:4901)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__2__cc_t', quals=[], storage=['typedef'] (at pp.c:4903)
    TypeDecl: declname='Msp430TimerCapComP__2__cc_t', quals=[] (at pp.c:4903)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:4906)
    FuncDecl: quals=None (at pp.c:4906)
      ParamList:  (at pp.c:4906)
        Decl: name='x', quals=[], storage=[] (at pp.c:4906)
          TypeDecl: declname='x', quals=[] (at pp.c:4906)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__int2CC', quals=[] (at pp.c:4906)
        IdentifierType: names=['Msp430TimerCapComP__2__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:4908)
    FuncDecl: quals=None (at pp.c:4908)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Control__getControl', quals=[] (at pp.c:4908)
        IdentifierType: names=['Msp430TimerCapComP__2__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:4910)
    FuncDecl: quals=None (at pp.c:4910)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Capture__getEvent', quals=[] (at pp.c:4910)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__Event__fired', quals=[], storage=['static'] (at pp.c:4912)
    FuncDecl: quals=None (at pp.c:4912)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Event__fired', quals=[] (at pp.c:4912)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:4920)
    FuncDecl: quals=None (at pp.c:4920)
      ParamList:  (at pp.c:4920)
        Decl: name='n', quals=[], storage=[] (at pp.c:4920)
          TypeDecl: declname='n', quals=[] (at pp.c:4920)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Capture__default__captured', quals=[] (at pp.c:4920)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:4924)
    FuncDecl: quals=None (at pp.c:4924)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Compare__default__fired', quals=[] (at pp.c:4924)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:4928)
    FuncDecl: quals=None (at pp.c:4928)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Timer__overflow', quals=[] (at pp.c:4928)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Capture__captured', quals=[], storage=['static'] (at pp.c:4930)
    FuncDecl: quals=None (at pp.c:4930)
      ParamList:  (at pp.c:4930)
        Decl: name='time', quals=[], storage=[] (at pp.c:4930)
          TypeDecl: declname='time', quals=[] (at pp.c:4930)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Capture__captured', quals=[] (at pp.c:4930)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Compare__fired', quals=[], storage=['static'] (at pp.c:4932)
    FuncDecl: quals=None (at pp.c:4932)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Compare__fired', quals=[] (at pp.c:4932)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Timer__get', quals=[], storage=['static'] (at pp.c:4934)
    FuncDecl: quals=None (at pp.c:4934)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Timer__get', quals=[] (at pp.c:4934)
        IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='Msp430TimerCapComP__3__cc_t', quals=[], storage=['typedef'] (at pp.c:4936)
    TypeDecl: declname='Msp430TimerCapComP__3__cc_t', quals=[] (at pp.c:4936)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:4938)
    FuncDecl: quals=None (at pp.c:4938)
      ParamList:  (at pp.c:4938)
        Decl: name='x', quals=[], storage=[] (at pp.c:4938)
          TypeDecl: declname='x', quals=[] (at pp.c:4938)
            IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__CC2int', quals=[] (at pp.c:4938)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:4939)
    FuncDecl: quals=None (at pp.c:4939)
      ParamList:  (at pp.c:4939)
        Decl: name='x', quals=[], storage=[] (at pp.c:4939)
          TypeDecl: declname='x', quals=[] (at pp.c:4939)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__int2CC', quals=[] (at pp.c:4939)
        IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__compareControl', quals=[], storage=['inline', 'static'] (at pp.c:4941)
    FuncDecl: quals=None (at pp.c:4941)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__compareControl', quals=[] (at pp.c:4941)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:4943)
    FuncDecl: quals=None (at pp.c:4943)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__getControl', quals=[] (at pp.c:4943)
        IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:4953)
    FuncDecl: quals=None (at pp.c:4953)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[] (at pp.c:4953)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[], storage=['inline', 'static'] (at pp.c:4963)
    FuncDecl: quals=None (at pp.c:4963)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[] (at pp.c:4963)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:4965)
    FuncDecl: quals=None (at pp.c:4965)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__enableEvents', quals=[] (at pp.c:4965)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:4970)
    FuncDecl: quals=None (at pp.c:4970)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__disableEvents', quals=[] (at pp.c:4970)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:4972)
    FuncDecl: quals=None (at pp.c:4972)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Capture__getEvent', quals=[] (at pp.c:4972)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__Compare__setEvent', quals=[], storage=['inline', 'static'] (at pp.c:4977)
    FuncDecl: quals=None (at pp.c:4977)
      ParamList:  (at pp.c:4977)
        Decl: name='x', quals=[], storage=[] (at pp.c:4977)
          TypeDecl: declname='x', quals=[] (at pp.c:4977)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEvent', quals=[] (at pp.c:4977)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[], storage=['inline', 'static'] (at pp.c:4987)
    FuncDecl: quals=None (at pp.c:4987)
      ParamList:  (at pp.c:4987)
        Decl: name='x', quals=[], storage=[] (at pp.c:4987)
          TypeDecl: declname='x', quals=[] (at pp.c:4987)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[] (at pp.c:4987)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:4989)
    FuncDecl: quals=None (at pp.c:4989)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Event__fired', quals=[] (at pp.c:4989)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:4997)
    FuncDecl: quals=None (at pp.c:4997)
      ParamList:  (at pp.c:4997)
        Decl: name='n', quals=[], storage=[] (at pp.c:4997)
          TypeDecl: declname='n', quals=[] (at pp.c:4997)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Capture__default__captured', quals=[] (at pp.c:4997)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5005)
    FuncDecl: quals=None (at pp.c:5005)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Timer__overflow', quals=[] (at pp.c:5005)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Capture__captured', quals=[], storage=['static'] (at pp.c:5007)
    FuncDecl: quals=None (at pp.c:5007)
      ParamList:  (at pp.c:5007)
        Decl: name='time', quals=[], storage=[] (at pp.c:5007)
          TypeDecl: declname='time', quals=[] (at pp.c:5007)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Capture__captured', quals=[] (at pp.c:5007)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Compare__fired', quals=[], storage=['static'] (at pp.c:5009)
    FuncDecl: quals=None (at pp.c:5009)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Compare__fired', quals=[] (at pp.c:5009)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__4__cc_t', quals=[], storage=['typedef'] (at pp.c:5011)
    TypeDecl: declname='Msp430TimerCapComP__4__cc_t', quals=[] (at pp.c:5011)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:5013)
    FuncDecl: quals=None (at pp.c:5013)
      ParamList:  (at pp.c:5013)
        Decl: name='x', quals=[], storage=[] (at pp.c:5013)
          TypeDecl: declname='x', quals=[] (at pp.c:5013)
            IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__CC2int', quals=[] (at pp.c:5013)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5014)
    FuncDecl: quals=None (at pp.c:5014)
      ParamList:  (at pp.c:5014)
        Decl: name='x', quals=[], storage=[] (at pp.c:5014)
          TypeDecl: declname='x', quals=[] (at pp.c:5014)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__int2CC', quals=[] (at pp.c:5014)
        IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__captureControl', quals=[], storage=['inline', 'static'] (at pp.c:5016)
    FuncDecl: quals=None (at pp.c:5016)
      ParamList:  (at pp.c:5016)
        Decl: name='l_cm', quals=[], storage=[] (at pp.c:5016)
          TypeDecl: declname='l_cm', quals=[] (at pp.c:5016)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__captureControl', quals=[] (at pp.c:5016)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5018)
    FuncDecl: quals=None (at pp.c:5018)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__getControl', quals=[] (at pp.c:5018)
        IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:5028)
    FuncDecl: quals=None (at pp.c:5028)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[] (at pp.c:5028)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[], storage=['inline', 'static'] (at pp.c:5030)
    FuncDecl: quals=None (at pp.c:5030)
      ParamList:  (at pp.c:5030)
        Decl: name='cm', quals=[], storage=[] (at pp.c:5030)
          TypeDecl: declname='cm', quals=[] (at pp.c:5030)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[] (at pp.c:5030)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:5032)
    FuncDecl: quals=None (at pp.c:5032)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__enableEvents', quals=[] (at pp.c:5032)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:5037)
    FuncDecl: quals=None (at pp.c:5037)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__disableEvents', quals=[] (at pp.c:5037)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5039)
    FuncDecl: quals=None (at pp.c:5039)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Capture__getEvent', quals=[] (at pp.c:5039)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[], storage=['inline', 'static'] (at pp.c:5041)
    FuncDecl: quals=None (at pp.c:5041)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[] (at pp.c:5041)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5046)
    FuncDecl: quals=None (at pp.c:5046)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Event__fired', quals=[] (at pp.c:5046)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5048)
    FuncDecl: quals=None (at pp.c:5048)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Compare__default__fired', quals=[] (at pp.c:5048)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5052)
    FuncDecl: quals=None (at pp.c:5052)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Timer__overflow', quals=[] (at pp.c:5052)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Capture__captured', quals=[], storage=['static'] (at pp.c:5054)
    FuncDecl: quals=None (at pp.c:5054)
      ParamList:  (at pp.c:5054)
        Decl: name='time', quals=[], storage=[] (at pp.c:5054)
          TypeDecl: declname='time', quals=[] (at pp.c:5054)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Capture__captured', quals=[] (at pp.c:5054)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Compare__fired', quals=[], storage=['static'] (at pp.c:5056)
    FuncDecl: quals=None (at pp.c:5056)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Compare__fired', quals=[] (at pp.c:5056)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Timer__get', quals=[], storage=['static'] (at pp.c:5058)
    FuncDecl: quals=None (at pp.c:5058)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Timer__get', quals=[] (at pp.c:5058)
        IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='Msp430TimerCapComP__5__cc_t', quals=[], storage=['typedef'] (at pp.c:5060)
    TypeDecl: declname='Msp430TimerCapComP__5__cc_t', quals=[] (at pp.c:5060)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:5062)
    FuncDecl: quals=None (at pp.c:5062)
      ParamList:  (at pp.c:5062)
        Decl: name='x', quals=[], storage=[] (at pp.c:5062)
          TypeDecl: declname='x', quals=[] (at pp.c:5062)
            IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__CC2int', quals=[] (at pp.c:5062)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5063)
    FuncDecl: quals=None (at pp.c:5063)
      ParamList:  (at pp.c:5063)
        Decl: name='x', quals=[], storage=[] (at pp.c:5063)
          TypeDecl: declname='x', quals=[] (at pp.c:5063)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__int2CC', quals=[] (at pp.c:5063)
        IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__compareControl', quals=[], storage=['inline', 'static'] (at pp.c:5065)
    FuncDecl: quals=None (at pp.c:5065)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__compareControl', quals=[] (at pp.c:5065)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5067)
    FuncDecl: quals=None (at pp.c:5067)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__getControl', quals=[] (at pp.c:5067)
        IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:5077)
    FuncDecl: quals=None (at pp.c:5077)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[] (at pp.c:5077)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[], storage=['inline', 'static'] (at pp.c:5087)
    FuncDecl: quals=None (at pp.c:5087)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[] (at pp.c:5087)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:5089)
    FuncDecl: quals=None (at pp.c:5089)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__enableEvents', quals=[] (at pp.c:5089)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:5094)
    FuncDecl: quals=None (at pp.c:5094)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__disableEvents', quals=[] (at pp.c:5094)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5096)
    FuncDecl: quals=None (at pp.c:5096)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Capture__getEvent', quals=[] (at pp.c:5096)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__Compare__setEvent', quals=[], storage=['inline', 'static'] (at pp.c:5101)
    FuncDecl: quals=None (at pp.c:5101)
      ParamList:  (at pp.c:5101)
        Decl: name='x', quals=[], storage=[] (at pp.c:5101)
          TypeDecl: declname='x', quals=[] (at pp.c:5101)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEvent', quals=[] (at pp.c:5101)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[], storage=['inline', 'static'] (at pp.c:5111)
    FuncDecl: quals=None (at pp.c:5111)
      ParamList:  (at pp.c:5111)
        Decl: name='x', quals=[], storage=[] (at pp.c:5111)
          TypeDecl: declname='x', quals=[] (at pp.c:5111)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[] (at pp.c:5111)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5113)
    FuncDecl: quals=None (at pp.c:5113)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Event__fired', quals=[] (at pp.c:5113)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:5121)
    FuncDecl: quals=None (at pp.c:5121)
      ParamList:  (at pp.c:5121)
        Decl: name='n', quals=[], storage=[] (at pp.c:5121)
          TypeDecl: declname='n', quals=[] (at pp.c:5121)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Capture__default__captured', quals=[] (at pp.c:5121)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5129)
    FuncDecl: quals=None (at pp.c:5129)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Timer__overflow', quals=[] (at pp.c:5129)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Capture__captured', quals=[], storage=['static'] (at pp.c:5131)
    FuncDecl: quals=None (at pp.c:5131)
      ParamList:  (at pp.c:5131)
        Decl: name='time', quals=[], storage=[] (at pp.c:5131)
          TypeDecl: declname='time', quals=[] (at pp.c:5131)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Capture__captured', quals=[] (at pp.c:5131)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Compare__fired', quals=[], storage=['static'] (at pp.c:5133)
    FuncDecl: quals=None (at pp.c:5133)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Compare__fired', quals=[] (at pp.c:5133)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__6__cc_t', quals=[], storage=['typedef'] (at pp.c:5135)
    TypeDecl: declname='Msp430TimerCapComP__6__cc_t', quals=[] (at pp.c:5135)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5138)
    FuncDecl: quals=None (at pp.c:5138)
      ParamList:  (at pp.c:5138)
        Decl: name='x', quals=[], storage=[] (at pp.c:5138)
          TypeDecl: declname='x', quals=[] (at pp.c:5138)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__int2CC', quals=[] (at pp.c:5138)
        IdentifierType: names=['Msp430TimerCapComP__6__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5140)
    FuncDecl: quals=None (at pp.c:5140)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Control__getControl', quals=[] (at pp.c:5140)
        IdentifierType: names=['Msp430TimerCapComP__6__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5142)
    FuncDecl: quals=None (at pp.c:5142)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Capture__getEvent', quals=[] (at pp.c:5142)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5144)
    FuncDecl: quals=None (at pp.c:5144)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Event__fired', quals=[] (at pp.c:5144)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:5152)
    FuncDecl: quals=None (at pp.c:5152)
      ParamList:  (at pp.c:5152)
        Decl: name='n', quals=[], storage=[] (at pp.c:5152)
          TypeDecl: declname='n', quals=[] (at pp.c:5152)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Capture__default__captured', quals=[] (at pp.c:5152)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5156)
    FuncDecl: quals=None (at pp.c:5156)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Compare__default__fired', quals=[] (at pp.c:5156)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5160)
    FuncDecl: quals=None (at pp.c:5160)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Timer__overflow', quals=[] (at pp.c:5160)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Capture__captured', quals=[], storage=['static'] (at pp.c:5162)
    FuncDecl: quals=None (at pp.c:5162)
      ParamList:  (at pp.c:5162)
        Decl: name='time', quals=[], storage=[] (at pp.c:5162)
          TypeDecl: declname='time', quals=[] (at pp.c:5162)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Capture__captured', quals=[] (at pp.c:5162)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Compare__fired', quals=[], storage=['static'] (at pp.c:5164)
    FuncDecl: quals=None (at pp.c:5164)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Compare__fired', quals=[] (at pp.c:5164)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__7__cc_t', quals=[], storage=['typedef'] (at pp.c:5166)
    TypeDecl: declname='Msp430TimerCapComP__7__cc_t', quals=[] (at pp.c:5166)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5169)
    FuncDecl: quals=None (at pp.c:5169)
      ParamList:  (at pp.c:5169)
        Decl: name='x', quals=[], storage=[] (at pp.c:5169)
          TypeDecl: declname='x', quals=[] (at pp.c:5169)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__int2CC', quals=[] (at pp.c:5169)
        IdentifierType: names=['Msp430TimerCapComP__7__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5171)
    FuncDecl: quals=None (at pp.c:5171)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Control__getControl', quals=[] (at pp.c:5171)
        IdentifierType: names=['Msp430TimerCapComP__7__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5173)
    FuncDecl: quals=None (at pp.c:5173)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Capture__getEvent', quals=[] (at pp.c:5173)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5175)
    FuncDecl: quals=None (at pp.c:5175)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Event__fired', quals=[] (at pp.c:5175)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:5183)
    FuncDecl: quals=None (at pp.c:5183)
      ParamList:  (at pp.c:5183)
        Decl: name='n', quals=[], storage=[] (at pp.c:5183)
          TypeDecl: declname='n', quals=[] (at pp.c:5183)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Capture__default__captured', quals=[] (at pp.c:5183)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5187)
    FuncDecl: quals=None (at pp.c:5187)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Compare__default__fired', quals=[] (at pp.c:5187)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5191)
    FuncDecl: quals=None (at pp.c:5191)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Timer__overflow', quals=[] (at pp.c:5191)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Capture__captured', quals=[], storage=['static'] (at pp.c:5193)
    FuncDecl: quals=None (at pp.c:5193)
      ParamList:  (at pp.c:5193)
        Decl: name='time', quals=[], storage=[] (at pp.c:5193)
          TypeDecl: declname='time', quals=[] (at pp.c:5193)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Capture__captured', quals=[] (at pp.c:5193)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Compare__fired', quals=[], storage=['static'] (at pp.c:5195)
    FuncDecl: quals=None (at pp.c:5195)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Compare__fired', quals=[] (at pp.c:5195)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__8__cc_t', quals=[], storage=['typedef'] (at pp.c:5197)
    TypeDecl: declname='Msp430TimerCapComP__8__cc_t', quals=[] (at pp.c:5197)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5200)
    FuncDecl: quals=None (at pp.c:5200)
      ParamList:  (at pp.c:5200)
        Decl: name='x', quals=[], storage=[] (at pp.c:5200)
          TypeDecl: declname='x', quals=[] (at pp.c:5200)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__int2CC', quals=[] (at pp.c:5200)
        IdentifierType: names=['Msp430TimerCapComP__8__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5202)
    FuncDecl: quals=None (at pp.c:5202)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Control__getControl', quals=[] (at pp.c:5202)
        IdentifierType: names=['Msp430TimerCapComP__8__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5204)
    FuncDecl: quals=None (at pp.c:5204)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Capture__getEvent', quals=[] (at pp.c:5204)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5206)
    FuncDecl: quals=None (at pp.c:5206)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Event__fired', quals=[] (at pp.c:5206)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:5214)
    FuncDecl: quals=None (at pp.c:5214)
      ParamList:  (at pp.c:5214)
        Decl: name='n', quals=[], storage=[] (at pp.c:5214)
          TypeDecl: declname='n', quals=[] (at pp.c:5214)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Capture__default__captured', quals=[] (at pp.c:5214)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5218)
    FuncDecl: quals=None (at pp.c:5218)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Compare__default__fired', quals=[] (at pp.c:5218)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5222)
    FuncDecl: quals=None (at pp.c:5222)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Timer__overflow', quals=[] (at pp.c:5222)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Capture__captured', quals=[], storage=['static'] (at pp.c:5224)
    FuncDecl: quals=None (at pp.c:5224)
      ParamList:  (at pp.c:5224)
        Decl: name='time', quals=[], storage=[] (at pp.c:5224)
          TypeDecl: declname='time', quals=[] (at pp.c:5224)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Capture__captured', quals=[] (at pp.c:5224)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Compare__fired', quals=[], storage=['static'] (at pp.c:5226)
    FuncDecl: quals=None (at pp.c:5226)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Compare__fired', quals=[] (at pp.c:5226)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__9__cc_t', quals=[], storage=['typedef'] (at pp.c:5228)
    TypeDecl: declname='Msp430TimerCapComP__9__cc_t', quals=[] (at pp.c:5228)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5231)
    FuncDecl: quals=None (at pp.c:5231)
      ParamList:  (at pp.c:5231)
        Decl: name='x', quals=[], storage=[] (at pp.c:5231)
          TypeDecl: declname='x', quals=[] (at pp.c:5231)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__int2CC', quals=[] (at pp.c:5231)
        IdentifierType: names=['Msp430TimerCapComP__9__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5233)
    FuncDecl: quals=None (at pp.c:5233)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Control__getControl', quals=[] (at pp.c:5233)
        IdentifierType: names=['Msp430TimerCapComP__9__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5235)
    FuncDecl: quals=None (at pp.c:5235)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Capture__getEvent', quals=[] (at pp.c:5235)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5237)
    FuncDecl: quals=None (at pp.c:5237)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Event__fired', quals=[] (at pp.c:5237)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:5245)
    FuncDecl: quals=None (at pp.c:5245)
      ParamList:  (at pp.c:5245)
        Decl: name='n', quals=[], storage=[] (at pp.c:5245)
          TypeDecl: declname='n', quals=[] (at pp.c:5245)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Capture__default__captured', quals=[] (at pp.c:5245)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5249)
    FuncDecl: quals=None (at pp.c:5249)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Compare__default__fired', quals=[] (at pp.c:5249)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5253)
    FuncDecl: quals=None (at pp.c:5253)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Timer__overflow', quals=[] (at pp.c:5253)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCommonP__VectorTimerB1__fired', quals=[], storage=['static'] (at pp.c:5255)
    FuncDecl: quals=None (at pp.c:5255)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCommonP__VectorTimerB1__fired', quals=[] (at pp.c:5255)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCommonP__VectorTimerA0__fired', quals=[], storage=['static'] (at pp.c:5257)
    FuncDecl: quals=None (at pp.c:5257)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCommonP__VectorTimerA0__fired', quals=[] (at pp.c:5257)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCommonP__VectorTimerA1__fired', quals=[], storage=['static'] (at pp.c:5259)
    FuncDecl: quals=None (at pp.c:5259)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCommonP__VectorTimerA1__fired', quals=[] (at pp.c:5259)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCommonP__VectorTimerB0__fired', quals=[], storage=['static'] (at pp.c:5261)
    FuncDecl: quals=None (at pp.c:5261)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCommonP__VectorTimerB0__fired', quals=[] (at pp.c:5261)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_TIMERA0_VECTOR', quals=[], storage=[] (at pp.c:5263)
    FuncDecl: quals=None (at pp.c:5263)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_TIMERA0_VECTOR', quals=[] (at pp.c:5263)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_TIMERA1_VECTOR', quals=[], storage=[] (at pp.c:5264)
    FuncDecl: quals=None (at pp.c:5264)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_TIMERA1_VECTOR', quals=[] (at pp.c:5264)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_TIMERB0_VECTOR', quals=[], storage=[] (at pp.c:5265)
    FuncDecl: quals=None (at pp.c:5265)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_TIMERB0_VECTOR', quals=[] (at pp.c:5265)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_TIMERB1_VECTOR', quals=[], storage=[] (at pp.c:5266)
    FuncDecl: quals=None (at pp.c:5266)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_TIMERB1_VECTOR', quals=[] (at pp.c:5266)
        IdentifierType: names=['void'] (at None)
  Decl: name='McuSleepC__McuPowerOverride__lowestState', quals=[], storage=['static'] (at pp.c:5268)
    FuncDecl: quals=None (at pp.c:5268)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='McuSleepC__McuPowerOverride__lowestState', quals=[] (at pp.c:5268)
        IdentifierType: names=['mcu_power_t'] (at None)
  Decl: name='McuSleepC__dirty', quals=[], storage=[] (at pp.c:5270)
    TypeDecl: declname='McuSleepC__dirty', quals=[] (at pp.c:5270)
      IdentifierType: names=['bool'] (at None)
    ID: name='TRUE' (at pp.c:5270)
  Decl: name='McuSleepC__powerState', quals=[], storage=[] (at pp.c:5271)
    TypeDecl: declname='McuSleepC__powerState', quals=[] (at pp.c:5271)
      IdentifierType: names=['mcu_power_t'] (at None)
    ID: name='MSP430_POWER_ACTIVE' (at pp.c:5271)
  Decl: name='McuSleepC__msp430PowerBits', quals=['const'], storage=[] (at pp.c:5276)
    ArrayDecl:  (at pp.c:5276)
      TypeDecl: declname='McuSleepC__msp430PowerBits', quals=['const'] (at pp.c:5276)
        IdentifierType: names=['uint16_t'] (at None)
      BinaryOp: op='+' (at pp.c:5276)
        ID: name='MSP430_POWER_LPM4' (at pp.c:5276)
        Constant: type='int', value='1' (at pp.c:5276)
    ExprList:  (at pp.c:5277)
      Constant: type='int', value='0' (at pp.c:5277)
      Constant: type='int', value='0x0010' (at pp.c:5278)
      BinaryOp: op='+' (at pp.c:5279)
        Constant: type='int', value='0x0040' (at pp.c:5279)
        Constant: type='int', value='0x0010' (at pp.c:5279)
      BinaryOp: op='+' (at pp.c:5280)
        Constant: type='int', value='0x0080' (at pp.c:5280)
        Constant: type='int', value='0x0010' (at pp.c:5280)
      BinaryOp: op='+' (at pp.c:5281)
        BinaryOp: op='+' (at pp.c:5281)
          Constant: type='int', value='0x0080' (at pp.c:5281)
          Constant: type='int', value='0x0040' (at pp.c:5281)
        Constant: type='int', value='0x0010' (at pp.c:5281)
      BinaryOp: op='+' (at pp.c:5282)
        BinaryOp: op='+' (at pp.c:5282)
          BinaryOp: op='+' (at pp.c:5282)
            Constant: type='int', value='0x0080' (at pp.c:5282)
            Constant: type='int', value='0x0040' (at pp.c:5282)
          Constant: type='int', value='0x0020' (at pp.c:5282)
        Constant: type='int', value='0x0010' (at pp.c:5282)
  Decl: name='McuSleepC__getPowerState', quals=[], storage=['inline', 'static'] (at pp.c:5285)
    FuncDecl: quals=None (at pp.c:5285)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='McuSleepC__getPowerState', quals=[] (at pp.c:5285)
        IdentifierType: names=['mcu_power_t'] (at None)
  Decl: name='McuSleepC__computePowerState', quals=[], storage=['inline', 'static'] (at pp.c:5287)
    FuncDecl: quals=None (at pp.c:5287)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='McuSleepC__computePowerState', quals=[] (at pp.c:5287)
        IdentifierType: names=['void'] (at None)
  Decl: name='McuSleepC__McuSleep__sleep', quals=[], storage=['inline', 'static'] (at pp.c:5292)
    FuncDecl: quals=None (at pp.c:5292)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='McuSleepC__McuSleep__sleep', quals=[] (at pp.c:5292)
        IdentifierType: names=['void'] (at None)
  Decl: name='RealMainP__SoftwareInit__init', quals=[], storage=['static'] (at pp.c:5294)
    FuncDecl: quals=None (at pp.c:5294)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__SoftwareInit__init', quals=[] (at pp.c:5294)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='RealMainP__Boot__booted', quals=[], storage=['static'] (at pp.c:5296)
    FuncDecl: quals=None (at pp.c:5296)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__Boot__booted', quals=[] (at pp.c:5296)
        IdentifierType: names=['void'] (at None)
  Decl: name='RealMainP__PlatformInit__init', quals=[], storage=['static'] (at pp.c:5298)
    FuncDecl: quals=None (at pp.c:5298)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__PlatformInit__init', quals=[] (at pp.c:5298)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='RealMainP__Scheduler__init', quals=[], storage=['static'] (at pp.c:5300)
    FuncDecl: quals=None (at pp.c:5300)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__Scheduler__init', quals=[] (at pp.c:5300)
        IdentifierType: names=['void'] (at None)
  Decl: name='RealMainP__Scheduler__taskLoop', quals=[], storage=['static'] (at pp.c:5302)
    FuncDecl: quals=None (at pp.c:5302)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__Scheduler__taskLoop', quals=[] (at pp.c:5302)
        IdentifierType: names=['void'] (at None)
  Decl: name='RealMainP__Scheduler__runNextTask', quals=[], storage=['static'] (at pp.c:5304)
    FuncDecl: quals=None (at pp.c:5304)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__Scheduler__runNextTask', quals=[] (at pp.c:5304)
        IdentifierType: names=['bool'] (at None)
  Decl: name='main', quals=[], storage=[] (at pp.c:5306)
    FuncDecl: quals=None (at pp.c:5306)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='main', quals=[] (at pp.c:5306)
        IdentifierType: names=['int'] (at None)
  Decl: name='SchedulerBasicP__TaskBasic__runTask', quals=[], storage=['static'] (at pp.c:5308)
    FuncDecl: quals=None (at pp.c:5308)
      ParamList:  (at pp.c:5310)
        Decl: name='arg_0x101487d50', quals=[], storage=[] (at pp.c:5310)
          TypeDecl: declname='arg_0x101487d50', quals=[] (at pp.c:5310)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__TaskBasic__runTask', quals=[] (at pp.c:5308)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__McuSleep__sleep', quals=[], storage=['static'] (at pp.c:5312)
    FuncDecl: quals=None (at pp.c:5312)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__McuSleep__sleep', quals=[] (at pp.c:5312)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:5314)
    Enum: name='SchedulerBasicP____nesc_unnamed4321' (at pp.c:5314)
      EnumeratorList:  (at pp.c:5316)
        Enumerator: name='SchedulerBasicP__NUM_TASKS' (at pp.c:5316)
          Constant: type='int', value='30U' (at pp.c:5316)
        Enumerator: name='SchedulerBasicP__NO_TASK' (at pp.c:5317)
          Constant: type='int', value='255' (at pp.c:5317)
  Decl: name='SchedulerBasicP__m_head', quals=[], storage=[] (at pp.c:5320)
    TypeDecl: declname='SchedulerBasicP__m_head', quals=[] (at pp.c:5320)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SchedulerBasicP__m_tail', quals=[], storage=[] (at pp.c:5321)
    TypeDecl: declname='SchedulerBasicP__m_tail', quals=[] (at pp.c:5321)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SchedulerBasicP__m_next', quals=[], storage=[] (at pp.c:5322)
    ArrayDecl:  (at pp.c:5322)
      TypeDecl: declname='SchedulerBasicP__m_next', quals=[] (at pp.c:5322)
        IdentifierType: names=['uint8_t'] (at None)
      ID: name='SchedulerBasicP__NUM_TASKS' (at pp.c:5322)
  Decl: name='SchedulerBasicP__popTask', quals=[], storage=['__inline', 'static'] (at pp.c:5331)
    FuncDecl: quals=None (at pp.c:5331)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__popTask', quals=[] (at pp.c:5331)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SchedulerBasicP__isWaiting', quals=[], storage=['inline', 'static'] (at pp.c:5333)
    FuncDecl: quals=None (at pp.c:5333)
      ParamList:  (at pp.c:5333)
        Decl: name='id', quals=[], storage=[] (at pp.c:5333)
          TypeDecl: declname='id', quals=[] (at pp.c:5333)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__isWaiting', quals=[] (at pp.c:5333)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SchedulerBasicP__pushTask', quals=[], storage=['inline', 'static'] (at pp.c:5338)
    FuncDecl: quals=None (at pp.c:5338)
      ParamList:  (at pp.c:5338)
        Decl: name='id', quals=[], storage=[] (at pp.c:5338)
          TypeDecl: declname='id', quals=[] (at pp.c:5338)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__pushTask', quals=[] (at pp.c:5338)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__init', quals=[], storage=['inline', 'static'] (at pp.c:5340)
    FuncDecl: quals=None (at pp.c:5340)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__init', quals=[] (at pp.c:5340)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__runNextTask', quals=[], storage=['static'] (at pp.c:5350)
    FuncDecl: quals=None (at pp.c:5350)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__runNextTask', quals=[] (at pp.c:5350)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__taskLoop', quals=[], storage=['inline', 'static'] (at pp.c:5352)
    FuncDecl: quals=None (at pp.c:5352)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__taskLoop', quals=[] (at pp.c:5352)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__TaskBasic__postTask', quals=[], storage=['static'] (at pp.c:5354)
    FuncDecl: quals=None (at pp.c:5354)
      ParamList:  (at pp.c:5354)
        Decl: name='id', quals=[], storage=[] (at pp.c:5354)
          TypeDecl: declname='id', quals=[] (at pp.c:5354)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__TaskBasic__postTask', quals=[] (at pp.c:5354)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SchedulerBasicP__TaskBasic__default__runTask', quals=[], storage=['static'] (at pp.c:5359)
    FuncDecl: quals=None (at pp.c:5359)
      ParamList:  (at pp.c:5359)
        Decl: name='id', quals=[], storage=[] (at pp.c:5359)
          TypeDecl: declname='id', quals=[] (at pp.c:5359)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__TaskBasic__default__runTask', quals=[] (at pp.c:5359)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__LPL__setRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:5361)
    FuncDecl: quals=None (at pp.c:5361)
      ParamList:  (at pp.c:5363)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5363)
          PtrDecl: quals=[] (at pp.c:5363)
            TypeDecl: declname='msg', quals=[] (at pp.c:5363)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:5366)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:5366)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__LPL__setRemoteWakeupInterval', quals=[] (at pp.c:5361)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioAMPacket__source', quals=[], storage=['static'] (at pp.c:5368)
    FuncDecl: quals=None (at pp.c:5368)
      ParamList:  (at pp.c:5370)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:5370)
          PtrDecl: quals=[] (at pp.c:5370)
            TypeDecl: declname='amsg', quals=[] (at pp.c:5370)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__RadioAMPacket__source', quals=[] (at pp.c:5368)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioAMControl__start', quals=[], storage=['static'] (at pp.c:5372)
    FuncDecl: quals=None (at pp.c:5372)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__RadioAMControl__start', quals=[] (at pp.c:5372)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LowPowerSensingBaseC__MsgQueue__enqueue', quals=[], storage=['static'] (at pp.c:5374)
    FuncDecl: quals=None (at pp.c:5374)
      ParamList:  (at pp.c:5376)
        Decl: name='newVal', quals=[], storage=[] (at pp.c:5376)
          TypeDecl: declname='newVal', quals=[] (at pp.c:5376)
            IdentifierType: names=['LowPowerSensingBaseC__MsgQueue__t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__MsgQueue__enqueue', quals=[] (at pp.c:5374)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LowPowerSensingBaseC__MsgQueue__dequeue', quals=[], storage=['static'] (at pp.c:5382)
    FuncDecl: quals=None (at pp.c:5382)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__MsgQueue__dequeue', quals=[] (at pp.c:5382)
        IdentifierType: names=['LowPowerSensingBaseC__MsgQueue__t'] (at None)
  Decl: name='LowPowerSensingBaseC__MsgQueue__empty', quals=[], storage=['static'] (at pp.c:5384)
    FuncDecl: quals=None (at pp.c:5384)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__MsgQueue__empty', quals=[] (at pp.c:5384)
        IdentifierType: names=['bool'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialAMControl__start', quals=[], storage=['static'] (at pp.c:5386)
    FuncDecl: quals=None (at pp.c:5386)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__SerialAMControl__start', quals=[] (at pp.c:5386)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialPacket__getPayload', quals=[], storage=['static'] (at pp.c:5393)
    FuncDecl: quals=None (at pp.c:5393)
      ParamList:  (at pp.c:5395)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5395)
          PtrDecl: quals=[] (at pp.c:5395)
            TypeDecl: declname='msg', quals=[] (at pp.c:5395)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5400)
          TypeDecl: declname='len', quals=[] (at pp.c:5400)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:5390)
        TypeDecl: declname='LowPowerSensingBaseC__SerialPacket__getPayload', quals=[] (at pp.c:5393)
          IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialSampleMsgSend__send', quals=[], storage=['static'] (at pp.c:5402)
    FuncDecl: quals=None (at pp.c:5402)
      ParamList:  (at pp.c:5402)
        Decl: name='addr', quals=[], storage=[] (at pp.c:5402)
          TypeDecl: declname='addr', quals=[] (at pp.c:5402)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5404)
          PtrDecl: quals=[] (at pp.c:5404)
            TypeDecl: declname='msg', quals=[] (at pp.c:5404)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5413)
          TypeDecl: declname='len', quals=[] (at pp.c:5413)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__SerialSampleMsgSend__send', quals=[] (at pp.c:5402)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__send', quals=[], storage=['static'] (at pp.c:5415)
    FuncDecl: quals=None (at pp.c:5415)
      ParamList:  (at pp.c:5415)
        Decl: name='addr', quals=[], storage=[] (at pp.c:5415)
          TypeDecl: declname='addr', quals=[] (at pp.c:5415)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5417)
          PtrDecl: quals=[] (at pp.c:5417)
            TypeDecl: declname='msg', quals=[] (at pp.c:5417)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5426)
          TypeDecl: declname='len', quals=[] (at pp.c:5426)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__send', quals=[] (at pp.c:5415)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LowPowerSensingBaseC__Leds__led0Off', quals=[], storage=['static'] (at pp.c:5428)
    FuncDecl: quals=None (at pp.c:5428)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__Leds__led0Off', quals=[] (at pp.c:5428)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__Leds__led2Toggle', quals=[], storage=['static'] (at pp.c:5430)
    FuncDecl: quals=None (at pp.c:5430)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__Leds__led2Toggle', quals=[] (at pp.c:5430)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__Leds__led0On', quals=[], storage=['static'] (at pp.c:5432)
    FuncDecl: quals=None (at pp.c:5432)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__Leds__led0On', quals=[] (at pp.c:5432)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialAMPacket__destination', quals=[], storage=['static'] (at pp.c:5434)
    FuncDecl: quals=None (at pp.c:5434)
      ParamList:  (at pp.c:5436)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:5436)
          PtrDecl: quals=[] (at pp.c:5436)
            TypeDecl: declname='amsg', quals=[] (at pp.c:5436)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__SerialAMPacket__destination', quals=[] (at pp.c:5434)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='LowPowerSensingBaseC__serialSending', quals=[], storage=[] (at pp.c:5438)
    TypeDecl: declname='LowPowerSensingBaseC__serialSending', quals=[] (at pp.c:5438)
      IdentifierType: names=['bool'] (at None)
  Decl: name='LowPowerSensingBaseC__dest_addr', quals=[], storage=[] (at pp.c:5439)
    TypeDecl: declname='LowPowerSensingBaseC__dest_addr', quals=[] (at pp.c:5439)
      IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='LowPowerSensingBaseC__request_samples_msg', quals=[], storage=[] (at pp.c:5440)
    TypeDecl: declname='LowPowerSensingBaseC__request_samples_msg', quals=[] (at pp.c:5440)
      IdentifierType: names=['message_t'] (at None)
  Decl: name='LowPowerSensingBaseC__sample_msg', quals=[], storage=[] (at pp.c:5441)
    TypeDecl: declname='LowPowerSensingBaseC__sample_msg', quals=[] (at pp.c:5441)
      IdentifierType: names=['message_t'] (at None)
  Decl: name='LowPowerSensingBaseC__sample_msg_payload', quals=[], storage=[] (at pp.c:5442)
    PtrDecl: quals=[] (at pp.c:5442)
      TypeDecl: declname='LowPowerSensingBaseC__sample_msg_payload', quals=[] (at pp.c:5442)
        IdentifierType: names=['serial_sample_msg_t'] (at None)
  Decl: name='LowPowerSensingBaseC__Boot__booted', quals=[], storage=['inline', 'static'] (at pp.c:5444)
    FuncDecl: quals=None (at pp.c:5444)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__Boot__booted', quals=[] (at pp.c:5444)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioAMControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:5450)
    FuncDecl: quals=None (at pp.c:5450)
      ParamList:  (at pp.c:5450)
        Decl: name='error', quals=[], storage=[] (at pp.c:5450)
          TypeDecl: declname='error', quals=[] (at pp.c:5450)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__RadioAMControl__startDone', quals=[] (at pp.c:5450)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialAMControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:5454)
    FuncDecl: quals=None (at pp.c:5454)
      ParamList:  (at pp.c:5454)
        Decl: name='error', quals=[], storage=[] (at pp.c:5454)
          TypeDecl: declname='error', quals=[] (at pp.c:5454)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__SerialAMControl__startDone', quals=[] (at pp.c:5454)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioAMControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:5457)
    FuncDecl: quals=None (at pp.c:5457)
      ParamList:  (at pp.c:5457)
        Decl: name='error', quals=[], storage=[] (at pp.c:5457)
          TypeDecl: declname='error', quals=[] (at pp.c:5457)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__RadioAMControl__stopDone', quals=[] (at pp.c:5457)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialAMControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:5460)
    FuncDecl: quals=None (at pp.c:5460)
      ParamList:  (at pp.c:5460)
        Decl: name='error', quals=[], storage=[] (at pp.c:5460)
          TypeDecl: declname='error', quals=[] (at pp.c:5460)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__SerialAMControl__stopDone', quals=[] (at pp.c:5460)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialRequestSampleMsgsReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:5463)
    FuncDecl: quals=None (at pp.c:5463)
      ParamList:  (at pp.c:5463)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5463)
          PtrDecl: quals=[] (at pp.c:5463)
            TypeDecl: declname='msg', quals=[] (at pp.c:5463)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:5463)
          PtrDecl: quals=[] (at pp.c:5463)
            TypeDecl: declname='payload', quals=[] (at pp.c:5463)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5463)
          TypeDecl: declname='len', quals=[] (at pp.c:5463)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:5463)
        TypeDecl: declname='LowPowerSensingBaseC__SerialRequestSampleMsgsReceive__receive', quals=[] (at pp.c:5463)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:5471)
    FuncDecl: quals=None (at pp.c:5471)
      ParamList:  (at pp.c:5471)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5471)
          PtrDecl: quals=[] (at pp.c:5471)
            TypeDecl: declname='msg', quals=[] (at pp.c:5471)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5471)
          TypeDecl: declname='error', quals=[] (at pp.c:5471)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__sendDone', quals=[] (at pp.c:5471)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingBaseC__RadioSampleMsgReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:5476)
    FuncDecl: quals=None (at pp.c:5476)
      ParamList:  (at pp.c:5476)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5476)
          PtrDecl: quals=[] (at pp.c:5476)
            TypeDecl: declname='msg', quals=[] (at pp.c:5476)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:5476)
          PtrDecl: quals=[] (at pp.c:5476)
            TypeDecl: declname='payload', quals=[] (at pp.c:5476)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5476)
          TypeDecl: declname='len', quals=[] (at pp.c:5476)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:5476)
        TypeDecl: declname='LowPowerSensingBaseC__RadioSampleMsgReceive__receive', quals=[] (at pp.c:5476)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='LowPowerSensingBaseC__SerialSampleMsgSend__sendDone', quals=[], storage=['static'] (at pp.c:5478)
    FuncDecl: quals=None (at pp.c:5478)
      ParamList:  (at pp.c:5478)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5478)
          PtrDecl: quals=[] (at pp.c:5478)
            TypeDecl: declname='msg', quals=[] (at pp.c:5478)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5478)
          TypeDecl: declname='error', quals=[] (at pp.c:5478)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingBaseC__SerialSampleMsgSend__sendDone', quals=[] (at pp.c:5478)
        IdentifierType: names=['void'] (at None)
  Decl: name='QueueC__0__queue', quals=[], storage=[] (at pp.c:5480)
    ArrayDecl:  (at pp.c:5480)
      TypeDecl: declname='QueueC__0__queue', quals=[] (at pp.c:5480)
        IdentifierType: names=['QueueC__0__queue_t'] (at None)
      Constant: type='int', value='50' (at pp.c:5480)
  Decl: name='QueueC__0__head', quals=[], storage=[] (at pp.c:5481)
    TypeDecl: declname='QueueC__0__head', quals=[] (at pp.c:5481)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:5481)
  Decl: name='QueueC__0__tail', quals=[], storage=[] (at pp.c:5482)
    TypeDecl: declname='QueueC__0__tail', quals=[] (at pp.c:5482)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:5482)
  Decl: name='QueueC__0__size', quals=[], storage=[] (at pp.c:5483)
    TypeDecl: declname='QueueC__0__size', quals=[] (at pp.c:5483)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:5483)
  Decl: name='QueueC__0__Queue__empty', quals=[], storage=['inline', 'static'] (at pp.c:5485)
    FuncDecl: quals=None (at pp.c:5485)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__Queue__empty', quals=[] (at pp.c:5485)
        IdentifierType: names=['bool'] (at None)
  Decl: name='QueueC__0__Queue__size', quals=[], storage=['inline', 'static'] (at pp.c:5489)
    FuncDecl: quals=None (at pp.c:5489)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__Queue__size', quals=[] (at pp.c:5489)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='QueueC__0__Queue__maxSize', quals=[], storage=['inline', 'static'] (at pp.c:5493)
    FuncDecl: quals=None (at pp.c:5493)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__Queue__maxSize', quals=[] (at pp.c:5493)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='QueueC__0__Queue__head', quals=[], storage=['inline', 'static'] (at pp.c:5497)
    FuncDecl: quals=None (at pp.c:5497)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__Queue__head', quals=[] (at pp.c:5497)
        IdentifierType: names=['QueueC__0__queue_t'] (at None)
  Decl: name='QueueC__0__printQueue', quals=[], storage=['inline', 'static'] (at pp.c:5501)
    FuncDecl: quals=None (at pp.c:5501)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__printQueue', quals=[] (at pp.c:5501)
        IdentifierType: names=['void'] (at None)
  Decl: name='QueueC__0__Queue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:5503)
    FuncDecl: quals=None (at pp.c:5503)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='QueueC__0__Queue__dequeue', quals=[] (at pp.c:5503)
        IdentifierType: names=['QueueC__0__queue_t'] (at None)
  Decl: name='QueueC__0__Queue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:5505)
    FuncDecl: quals=None (at pp.c:5505)
      ParamList:  (at pp.c:5505)
        Decl: name='newVal', quals=[], storage=[] (at pp.c:5505)
          TypeDecl: declname='newVal', quals=[] (at pp.c:5505)
            IdentifierType: names=['QueueC__0__queue_t'] (at None)
      TypeDecl: declname='QueueC__0__Queue__enqueue', quals=[] (at pp.c:5505)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LedsP__Led0__makeOutput', quals=[], storage=['static'] (at pp.c:5507)
    FuncDecl: quals=None (at pp.c:5507)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led0__makeOutput', quals=[] (at pp.c:5507)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led0__set', quals=[], storage=['static'] (at pp.c:5509)
    FuncDecl: quals=None (at pp.c:5509)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led0__set', quals=[] (at pp.c:5509)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led0__clr', quals=[], storage=['static'] (at pp.c:5510)
    FuncDecl: quals=None (at pp.c:5510)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led0__clr', quals=[] (at pp.c:5510)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led1__makeOutput', quals=[], storage=['static'] (at pp.c:5515)
    FuncDecl: quals=None (at pp.c:5515)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led1__makeOutput', quals=[] (at pp.c:5515)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led1__set', quals=[], storage=['static'] (at pp.c:5517)
    FuncDecl: quals=None (at pp.c:5517)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led1__set', quals=[] (at pp.c:5517)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led2__toggle', quals=[], storage=['static'] (at pp.c:5519)
    FuncDecl: quals=None (at pp.c:5519)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led2__toggle', quals=[] (at pp.c:5519)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led2__makeOutput', quals=[], storage=['static'] (at pp.c:5523)
    FuncDecl: quals=None (at pp.c:5523)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led2__makeOutput', quals=[] (at pp.c:5523)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led2__set', quals=[], storage=['static'] (at pp.c:5525)
    FuncDecl: quals=None (at pp.c:5525)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led2__set', quals=[] (at pp.c:5525)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:5527)
    FuncDecl: quals=None (at pp.c:5527)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Init__init', quals=[] (at pp.c:5527)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LedsP__Leds__led0On', quals=[], storage=['inline', 'static'] (at pp.c:5529)
    FuncDecl: quals=None (at pp.c:5529)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led0On', quals=[] (at pp.c:5529)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Leds__led0Off', quals=[], storage=['inline', 'static'] (at pp.c:5534)
    FuncDecl: quals=None (at pp.c:5534)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led0Off', quals=[] (at pp.c:5534)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Leds__led2Toggle', quals=[], storage=['inline', 'static'] (at pp.c:5536)
    FuncDecl: quals=None (at pp.c:5536)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led2Toggle', quals=[] (at pp.c:5536)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__0__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:5538)
    FuncDecl: quals=None (at pp.c:5538)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__0__IO__getRaw', quals=[] (at pp.c:5538)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__0__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:5539)
    FuncDecl: quals=None (at pp.c:5539)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__0__IO__get', quals=[] (at pp.c:5539)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__3__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:5541)
    FuncDecl: quals=None (at pp.c:5541)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__3__IO__getRaw', quals=[] (at pp.c:5541)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__3__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:5542)
    FuncDecl: quals=None (at pp.c:5542)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__3__IO__get', quals=[] (at pp.c:5542)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:5544)
    FuncDecl: quals=None (at pp.c:5544)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__getRaw', quals=[] (at pp.c:5544)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:5545)
    FuncDecl: quals=None (at pp.c:5545)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__get', quals=[] (at pp.c:5545)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:5546)
    FuncDecl: quals=None (at pp.c:5546)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__makeInput', quals=[] (at pp.c:5546)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:5548)
    FuncDecl: quals=None (at pp.c:5548)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__clr', quals=[] (at pp.c:5548)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:5550)
    FuncDecl: quals=None (at pp.c:5550)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__getRaw', quals=[] (at pp.c:5550)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:5551)
    FuncDecl: quals=None (at pp.c:5551)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__get', quals=[] (at pp.c:5551)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:5552)
    FuncDecl: quals=None (at pp.c:5552)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeInput', quals=[] (at pp.c:5552)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:5554)
    FuncDecl: quals=None (at pp.c:5554)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[] (at pp.c:5554)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:5556)
    FuncDecl: quals=None (at pp.c:5556)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[] (at pp.c:5556)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5558)
    FuncDecl: quals=None (at pp.c:5558)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[] (at pp.c:5558)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:5560)
    FuncDecl: quals=None (at pp.c:5560)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[] (at pp.c:5560)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5562)
    FuncDecl: quals=None (at pp.c:5562)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[] (at pp.c:5562)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:5564)
    FuncDecl: quals=None (at pp.c:5564)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[] (at pp.c:5564)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5566)
    FuncDecl: quals=None (at pp.c:5566)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[] (at pp.c:5566)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5568)
    FuncDecl: quals=None (at pp.c:5568)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[] (at pp.c:5568)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5570)
    FuncDecl: quals=None (at pp.c:5570)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[] (at pp.c:5570)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__22__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:5572)
    FuncDecl: quals=None (at pp.c:5572)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__22__IO__selectModuleFunc', quals=[] (at pp.c:5572)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__22__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5574)
    FuncDecl: quals=None (at pp.c:5574)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__22__IO__selectIOFunc', quals=[] (at pp.c:5574)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__23__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:5576)
    FuncDecl: quals=None (at pp.c:5576)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__23__IO__selectModuleFunc', quals=[] (at pp.c:5576)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__23__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5578)
    FuncDecl: quals=None (at pp.c:5578)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__23__IO__selectIOFunc', quals=[] (at pp.c:5578)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:5580)
    FuncDecl: quals=None (at pp.c:5580)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__getRaw', quals=[] (at pp.c:5580)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:5581)
    FuncDecl: quals=None (at pp.c:5581)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__get', quals=[] (at pp.c:5581)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:5582)
    FuncDecl: quals=None (at pp.c:5582)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__makeInput', quals=[] (at pp.c:5582)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:5586)
    FuncDecl: quals=None (at pp.c:5586)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[] (at pp.c:5586)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5588)
    FuncDecl: quals=None (at pp.c:5588)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[] (at pp.c:5588)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__set', quals=[], storage=['static'] (at pp.c:5590)
    FuncDecl: quals=None (at pp.c:5590)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__set', quals=[] (at pp.c:5590)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__clr', quals=[], storage=['static'] (at pp.c:5591)
    FuncDecl: quals=None (at pp.c:5591)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__clr', quals=[] (at pp.c:5591)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:5597)
    FuncDecl: quals=None (at pp.c:5597)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[] (at pp.c:5597)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:5599)
    FuncDecl: quals=None (at pp.c:5599)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__set', quals=[] (at pp.c:5599)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:5600)
    FuncDecl: quals=None (at pp.c:5600)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__clr', quals=[] (at pp.c:5600)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:5606)
    FuncDecl: quals=None (at pp.c:5606)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[] (at pp.c:5606)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__set', quals=[], storage=['static'] (at pp.c:5608)
    FuncDecl: quals=None (at pp.c:5608)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__set', quals=[] (at pp.c:5608)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__clr', quals=[], storage=['static'] (at pp.c:5609)
    FuncDecl: quals=None (at pp.c:5609)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__clr', quals=[] (at pp.c:5609)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:5615)
    FuncDecl: quals=None (at pp.c:5615)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[] (at pp.c:5615)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__33__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5619)
    FuncDecl: quals=None (at pp.c:5619)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__33__IO__selectIOFunc', quals=[] (at pp.c:5619)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__34__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5621)
    FuncDecl: quals=None (at pp.c:5621)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__34__IO__selectIOFunc', quals=[] (at pp.c:5621)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__35__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:5623)
    FuncDecl: quals=None (at pp.c:5623)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__35__IO__selectIOFunc', quals=[] (at pp.c:5623)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__set', quals=[], storage=['static'] (at pp.c:5625)
    FuncDecl: quals=None (at pp.c:5625)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__set', quals=[] (at pp.c:5625)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:5626)
    FuncDecl: quals=None (at pp.c:5626)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__clr', quals=[] (at pp.c:5626)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:5632)
    FuncDecl: quals=None (at pp.c:5632)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[] (at pp.c:5632)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__37__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:5634)
    FuncDecl: quals=None (at pp.c:5634)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__37__IO__set', quals=[] (at pp.c:5634)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:5641)
    FuncDecl: quals=None (at pp.c:5641)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[] (at pp.c:5641)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:5643)
    FuncDecl: quals=None (at pp.c:5643)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__set', quals=[] (at pp.c:5643)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:5645)
    FuncDecl: quals=None (at pp.c:5645)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__toggle', quals=[] (at pp.c:5645)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:5650)
    FuncDecl: quals=None (at pp.c:5650)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[] (at pp.c:5650)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:5652)
    FuncDecl: quals=None (at pp.c:5652)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__makeOutput', quals=[] (at pp.c:5652)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:5654)
    FuncDecl: quals=None (at pp.c:5654)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__set', quals=[] (at pp.c:5654)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:5659)
    FuncDecl: quals=None (at pp.c:5659)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__clr', quals=[] (at pp.c:5659)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:5661)
    FuncDecl: quals=None (at pp.c:5661)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__set', quals=[] (at pp.c:5661)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:5662)
    FuncDecl: quals=None (at pp.c:5662)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__clr', quals=[] (at pp.c:5662)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:5667)
    FuncDecl: quals=None (at pp.c:5667)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__makeOutput', quals=[] (at pp.c:5667)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:5669)
    FuncDecl: quals=None (at pp.c:5669)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__HplGeneralIO__makeOutput', quals=[] (at pp.c:5669)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:5671)
    FuncDecl: quals=None (at pp.c:5671)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__HplGeneralIO__set', quals=[] (at pp.c:5671)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:5673)
    FuncDecl: quals=None (at pp.c:5673)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__GeneralIO__set', quals=[] (at pp.c:5673)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:5679)
    FuncDecl: quals=None (at pp.c:5679)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__GeneralIO__makeOutput', quals=[] (at pp.c:5679)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__HplGeneralIO__toggle', quals=[], storage=['static'] (at pp.c:5681)
    FuncDecl: quals=None (at pp.c:5681)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__toggle', quals=[] (at pp.c:5681)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:5683)
    FuncDecl: quals=None (at pp.c:5683)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__makeOutput', quals=[] (at pp.c:5683)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:5685)
    FuncDecl: quals=None (at pp.c:5685)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__set', quals=[] (at pp.c:5685)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:5687)
    FuncDecl: quals=None (at pp.c:5687)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__set', quals=[] (at pp.c:5687)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:5689)
    FuncDecl: quals=None (at pp.c:5689)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__toggle', quals=[] (at pp.c:5689)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:5693)
    FuncDecl: quals=None (at pp.c:5693)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__makeOutput', quals=[] (at pp.c:5693)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__SubSend__send', quals=[], storage=['static'] (at pp.c:5695)
    FuncDecl: quals=None (at pp.c:5695)
      ParamList:  (at pp.c:5697)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5697)
          PtrDecl: quals=[] (at pp.c:5697)
            TypeDecl: declname='msg', quals=[] (at pp.c:5697)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5705)
          TypeDecl: declname='len', quals=[] (at pp.c:5705)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__SubSend__send', quals=[] (at pp.c:5695)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialActiveMessageP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:5707)
    FuncDecl: quals=None (at pp.c:5707)
      ParamList:  (at pp.c:5709)
        Decl: name='arg_0x10199d020', quals=[], storage=[] (at pp.c:5709)
          TypeDecl: declname='arg_0x10199d020', quals=[] (at pp.c:5709)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5711)
          PtrDecl: quals=[] (at pp.c:5711)
            TypeDecl: declname='msg', quals=[] (at pp.c:5711)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5718)
          TypeDecl: declname='error', quals=[] (at pp.c:5718)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMSend__sendDone', quals=[] (at pp.c:5707)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__Receive__receive', quals=[], storage=['static'] (at pp.c:5726)
    FuncDecl: quals=None (at pp.c:5726)
      ParamList:  (at pp.c:5728)
        Decl: name='arg_0x10199c158', quals=[], storage=[] (at pp.c:5728)
          TypeDecl: declname='arg_0x10199c158', quals=[] (at pp.c:5728)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5730)
          PtrDecl: quals=[] (at pp.c:5730)
            TypeDecl: declname='msg', quals=[] (at pp.c:5730)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:5731)
          PtrDecl: quals=[] (at pp.c:5731)
            TypeDecl: declname='payload', quals=[] (at pp.c:5731)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5737)
          TypeDecl: declname='len', quals=[] (at pp.c:5737)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:5722)
        TypeDecl: declname='SerialActiveMessageP__0__Receive__receive', quals=[] (at pp.c:5726)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='SerialActiveMessageP__0__getHeader', quals=[], storage=['inline', 'static'] (at pp.c:5739)
    FuncDecl: quals=None (at pp.c:5739)
      ParamList:  (at pp.c:5739)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5739)
          PtrDecl: quals=[] (at pp.c:5739)
            TypeDecl: declname='msg', quals=[] (at pp.c:5739)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:5739)
        TypeDecl: declname='SerialActiveMessageP__0__getHeader', quals=[] (at pp.c:5739)
          IdentifierType: names=['serial_header_t'] (at None)
  Decl: name='SerialActiveMessageP__0__AMSend__send', quals=[], storage=['static'] (at pp.c:5747)
    FuncDecl: quals=None (at pp.c:5747)
      ParamList:  (at pp.c:5747)
        Decl: name='id', quals=[], storage=[] (at pp.c:5747)
          TypeDecl: declname='id', quals=[] (at pp.c:5747)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='dest', quals=[], storage=[] (at pp.c:5747)
          TypeDecl: declname='dest', quals=[] (at pp.c:5747)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5748)
          PtrDecl: quals=[] (at pp.c:5748)
            TypeDecl: declname='msg', quals=[] (at pp.c:5748)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5749)
          TypeDecl: declname='len', quals=[] (at pp.c:5749)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMSend__send', quals=[] (at pp.c:5747)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialActiveMessageP__0__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:5751)
    FuncDecl: quals=None (at pp.c:5751)
      ParamList:  (at pp.c:5751)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5751)
          PtrDecl: quals=[] (at pp.c:5751)
            TypeDecl: declname='msg', quals=[] (at pp.c:5751)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='result', quals=[], storage=[] (at pp.c:5751)
          TypeDecl: declname='result', quals=[] (at pp.c:5751)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__SubSend__sendDone', quals=[] (at pp.c:5751)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__Receive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:5759)
    FuncDecl: quals=None (at pp.c:5759)
      ParamList:  (at pp.c:5759)
        Decl: name='id', quals=[], storage=[] (at pp.c:5759)
          TypeDecl: declname='id', quals=[] (at pp.c:5759)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5759)
          PtrDecl: quals=[] (at pp.c:5759)
            TypeDecl: declname='msg', quals=[] (at pp.c:5759)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:5759)
          PtrDecl: quals=[] (at pp.c:5759)
            TypeDecl: declname='payload', quals=[] (at pp.c:5759)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5759)
          TypeDecl: declname='len', quals=[] (at pp.c:5759)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:5759)
        TypeDecl: declname='SerialActiveMessageP__0__Receive__default__receive', quals=[] (at pp.c:5759)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='SerialActiveMessageP__0__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:5763)
    FuncDecl: quals=None (at pp.c:5763)
      ParamList:  (at pp.c:5763)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5763)
          PtrDecl: quals=[] (at pp.c:5763)
            TypeDecl: declname='msg', quals=[] (at pp.c:5763)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:5763)
          PtrDecl: quals=[] (at pp.c:5763)
            TypeDecl: declname='payload', quals=[] (at pp.c:5763)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5763)
          TypeDecl: declname='len', quals=[] (at pp.c:5763)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:5763)
        TypeDecl: declname='SerialActiveMessageP__0__SubReceive__receive', quals=[] (at pp.c:5763)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='SerialActiveMessageP__0__Packet__payloadLength', quals=[], storage=['inline', 'static'] (at pp.c:5772)
    FuncDecl: quals=None (at pp.c:5772)
      ParamList:  (at pp.c:5772)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5772)
          PtrDecl: quals=[] (at pp.c:5772)
            TypeDecl: declname='msg', quals=[] (at pp.c:5772)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__Packet__payloadLength', quals=[] (at pp.c:5772)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialActiveMessageP__0__Packet__setPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:5777)
    FuncDecl: quals=None (at pp.c:5777)
      ParamList:  (at pp.c:5777)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5777)
          PtrDecl: quals=[] (at pp.c:5777)
            TypeDecl: declname='msg', quals=[] (at pp.c:5777)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5777)
          TypeDecl: declname='len', quals=[] (at pp.c:5777)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__Packet__setPayloadLength', quals=[] (at pp.c:5777)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__Packet__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:5781)
    FuncDecl: quals=None (at pp.c:5781)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__Packet__maxPayloadLength', quals=[] (at pp.c:5781)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialActiveMessageP__0__Packet__getPayload', quals=[], storage=['static'] (at pp.c:5785)
    FuncDecl: quals=None (at pp.c:5785)
      ParamList:  (at pp.c:5785)
        Decl: name='msg', quals=[], storage=[] (at pp.c:5785)
          PtrDecl: quals=[] (at pp.c:5785)
            TypeDecl: declname='msg', quals=[] (at pp.c:5785)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5785)
          TypeDecl: declname='len', quals=[] (at pp.c:5785)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:5785)
        TypeDecl: declname='SerialActiveMessageP__0__Packet__getPayload', quals=[] (at pp.c:5785)
          IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__AMPacket__destination', quals=[], storage=['inline', 'static'] (at pp.c:5787)
    FuncDecl: quals=None (at pp.c:5787)
      ParamList:  (at pp.c:5787)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:5787)
          PtrDecl: quals=[] (at pp.c:5787)
            TypeDecl: declname='amsg', quals=[] (at pp.c:5787)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMPacket__destination', quals=[] (at pp.c:5787)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='SerialActiveMessageP__0__AMPacket__setDestination', quals=[], storage=['inline', 'static'] (at pp.c:5797)
    FuncDecl: quals=None (at pp.c:5797)
      ParamList:  (at pp.c:5797)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:5797)
          PtrDecl: quals=[] (at pp.c:5797)
            TypeDecl: declname='amsg', quals=[] (at pp.c:5797)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:5797)
          TypeDecl: declname='addr', quals=[] (at pp.c:5797)
            IdentifierType: names=['am_addr_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMPacket__setDestination', quals=[] (at pp.c:5797)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialActiveMessageP__0__AMPacket__type', quals=[], storage=['static'] (at pp.c:5799)
    FuncDecl: quals=None (at pp.c:5799)
      ParamList:  (at pp.c:5799)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:5799)
          PtrDecl: quals=[] (at pp.c:5799)
            TypeDecl: declname='amsg', quals=[] (at pp.c:5799)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMPacket__type', quals=[] (at pp.c:5799)
        IdentifierType: names=['am_id_t'] (at None)
  Decl: name='SerialActiveMessageP__0__AMPacket__setType', quals=[], storage=['inline', 'static'] (at pp.c:5804)
    FuncDecl: quals=None (at pp.c:5804)
      ParamList:  (at pp.c:5804)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:5804)
          PtrDecl: quals=[] (at pp.c:5804)
            TypeDecl: declname='amsg', quals=[] (at pp.c:5804)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='type', quals=[], storage=[] (at pp.c:5804)
          TypeDecl: declname='type', quals=[] (at pp.c:5804)
            IdentifierType: names=['am_id_t'] (at None)
      TypeDecl: declname='SerialActiveMessageP__0__AMPacket__setType', quals=[] (at pp.c:5804)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SplitControl__startDone', quals=[], storage=['static'] (at pp.c:5806)
    FuncDecl: quals=None (at pp.c:5806)
      ParamList:  (at pp.c:5806)
        Decl: name='error', quals=[], storage=[] (at pp.c:5806)
          TypeDecl: declname='error', quals=[] (at pp.c:5806)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialP__SplitControl__startDone', quals=[] (at pp.c:5806)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SplitControl__stopDone', quals=[], storage=['static'] (at pp.c:5808)
    FuncDecl: quals=None (at pp.c:5808)
      ParamList:  (at pp.c:5808)
        Decl: name='error', quals=[], storage=[] (at pp.c:5808)
          TypeDecl: declname='error', quals=[] (at pp.c:5808)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialP__SplitControl__stopDone', quals=[] (at pp.c:5808)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__stopDoneTask__postTask', quals=[], storage=['static'] (at pp.c:5810)
    FuncDecl: quals=None (at pp.c:5810)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__stopDoneTask__postTask', quals=[] (at pp.c:5810)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__SerialControl__start', quals=[], storage=['static'] (at pp.c:5812)
    FuncDecl: quals=None (at pp.c:5812)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialControl__start', quals=[] (at pp.c:5812)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__SerialControl__stop', quals=[], storage=['static'] (at pp.c:5822)
    FuncDecl: quals=None (at pp.c:5822)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialControl__stop', quals=[] (at pp.c:5822)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__RunTx__postTask', quals=[], storage=['static'] (at pp.c:5824)
    FuncDecl: quals=None (at pp.c:5824)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__RunTx__postTask', quals=[] (at pp.c:5824)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__SerialFlush__flush', quals=[], storage=['static'] (at pp.c:5826)
    FuncDecl: quals=None (at pp.c:5826)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFlush__flush', quals=[] (at pp.c:5826)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__startDoneTask__postTask', quals=[], storage=['static'] (at pp.c:5828)
    FuncDecl: quals=None (at pp.c:5828)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__startDoneTask__postTask', quals=[] (at pp.c:5828)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__SerialFrameComm__putDelimiter', quals=[], storage=['static'] (at pp.c:5830)
    FuncDecl: quals=None (at pp.c:5830)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFrameComm__putDelimiter', quals=[] (at pp.c:5830)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__SerialFrameComm__resetReceive', quals=[], storage=['static'] (at pp.c:5832)
    FuncDecl: quals=None (at pp.c:5832)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFrameComm__resetReceive', quals=[] (at pp.c:5832)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SerialFrameComm__putData', quals=[], storage=['static'] (at pp.c:5834)
    FuncDecl: quals=None (at pp.c:5834)
      ParamList:  (at pp.c:5834)
        Decl: name='data', quals=[], storage=[] (at pp.c:5834)
          TypeDecl: declname='data', quals=[] (at pp.c:5834)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__SerialFrameComm__putData', quals=[] (at pp.c:5834)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__defaultSerialFlushTask__postTask', quals=[], storage=['static'] (at pp.c:5836)
    FuncDecl: quals=None (at pp.c:5836)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__defaultSerialFlushTask__postTask', quals=[] (at pp.c:5836)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__SendBytePacket__nextByte', quals=[], storage=['static'] (at pp.c:5838)
    FuncDecl: quals=None (at pp.c:5838)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SendBytePacket__nextByte', quals=[] (at pp.c:5838)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__SendBytePacket__sendCompleted', quals=[], storage=['static'] (at pp.c:5848)
    FuncDecl: quals=None (at pp.c:5848)
      ParamList:  (at pp.c:5848)
        Decl: name='error', quals=[], storage=[] (at pp.c:5848)
          TypeDecl: declname='error', quals=[] (at pp.c:5848)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialP__SendBytePacket__sendCompleted', quals=[] (at pp.c:5848)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__ReceiveBytePacket__startPacket', quals=[], storage=['static'] (at pp.c:5850)
    FuncDecl: quals=None (at pp.c:5850)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ReceiveBytePacket__startPacket', quals=[] (at pp.c:5850)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__ReceiveBytePacket__byteReceived', quals=[], storage=['static'] (at pp.c:5857)
    FuncDecl: quals=None (at pp.c:5857)
      ParamList:  (at pp.c:5857)
        Decl: name='data', quals=[], storage=[] (at pp.c:5857)
          TypeDecl: declname='data', quals=[] (at pp.c:5857)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__ReceiveBytePacket__byteReceived', quals=[] (at pp.c:5857)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__ReceiveBytePacket__endPacket', quals=[], storage=['static'] (at pp.c:5868)
    FuncDecl: quals=None (at pp.c:5868)
      ParamList:  (at pp.c:5868)
        Decl: name='result', quals=[], storage=[] (at pp.c:5868)
          TypeDecl: declname='result', quals=[] (at pp.c:5868)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialP__ReceiveBytePacket__endPacket', quals=[] (at pp.c:5868)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:5870)
    Enum: name='SerialP____nesc_unnamed4322' (at pp.c:5870)
      EnumeratorList:  (at pp.c:5872)
        Enumerator: name='SerialP__RunTx' (at pp.c:5872)
          Constant: type='int', value='0U' (at pp.c:5872)
  Typedef: name='SerialP____nesc_sillytask_RunTx', quals=[], storage=['typedef'] (at pp.c:5875)
    ArrayDecl:  (at pp.c:5875)
      TypeDecl: declname='SerialP____nesc_sillytask_RunTx', quals=[] (at pp.c:5875)
        IdentifierType: names=['int'] (at None)
      ID: name='SerialP__RunTx' (at pp.c:5875)
  Decl: name=None, quals=[], storage=[] (at pp.c:5877)
    Enum: name='SerialP____nesc_unnamed4323' (at pp.c:5877)
      EnumeratorList:  (at pp.c:5879)
        Enumerator: name='SerialP__startDoneTask' (at pp.c:5879)
          Constant: type='int', value='1U' (at pp.c:5879)
  Typedef: name='SerialP____nesc_sillytask_startDoneTask', quals=[], storage=['typedef'] (at pp.c:5882)
    ArrayDecl:  (at pp.c:5882)
      TypeDecl: declname='SerialP____nesc_sillytask_startDoneTask', quals=[] (at pp.c:5882)
        IdentifierType: names=['int'] (at None)
      ID: name='SerialP__startDoneTask' (at pp.c:5882)
  Decl: name=None, quals=[], storage=[] (at pp.c:5888)
    Enum: name='SerialP____nesc_unnamed4324' (at pp.c:5888)
      EnumeratorList:  (at pp.c:5890)
        Enumerator: name='SerialP__stopDoneTask' (at pp.c:5890)
          Constant: type='int', value='2U' (at pp.c:5890)
  Typedef: name='SerialP____nesc_sillytask_stopDoneTask', quals=[], storage=['typedef'] (at pp.c:5893)
    ArrayDecl:  (at pp.c:5893)
      TypeDecl: declname='SerialP____nesc_sillytask_stopDoneTask', quals=[] (at pp.c:5893)
        IdentifierType: names=['int'] (at None)
      ID: name='SerialP__stopDoneTask' (at pp.c:5893)
  Decl: name=None, quals=[], storage=[] (at pp.c:5902)
    Enum: name='SerialP____nesc_unnamed4325' (at pp.c:5902)
      EnumeratorList:  (at pp.c:5904)
        Enumerator: name='SerialP__defaultSerialFlushTask' (at pp.c:5904)
          Constant: type='int', value='3U' (at pp.c:5904)
  Typedef: name='SerialP____nesc_sillytask_defaultSerialFlushTask', quals=[], storage=['typedef'] (at pp.c:5907)
    ArrayDecl:  (at pp.c:5907)
      TypeDecl: declname='SerialP____nesc_sillytask_defaultSerialFlushTask', quals=[] (at pp.c:5907)
        IdentifierType: names=['int'] (at None)
      ID: name='SerialP__defaultSerialFlushTask' (at pp.c:5907)
  Decl: name=None, quals=[], storage=[] (at pp.c:5909)
    Enum: name='SerialP____nesc_unnamed4326' (at pp.c:5909)
      EnumeratorList:  (at pp.c:5910)
        Enumerator: name='SerialP__RX_DATA_BUFFER_SIZE' (at pp.c:5910)
          Constant: type='int', value='2' (at pp.c:5910)
        Enumerator: name='SerialP__TX_DATA_BUFFER_SIZE' (at pp.c:5911)
          Constant: type='int', value='4' (at pp.c:5911)
        Enumerator: name='SerialP__SERIAL_MTU' (at pp.c:5912)
          Constant: type='int', value='255' (at pp.c:5912)
        Enumerator: name='SerialP__SERIAL_VERSION' (at pp.c:5913)
          Constant: type='int', value='1' (at pp.c:5913)
        Enumerator: name='SerialP__ACK_QUEUE_SIZE' (at pp.c:5914)
          Constant: type='int', value='5' (at pp.c:5914)
  Decl: name=None, quals=[], storage=[] (at pp.c:5917)
    Enum: name='SerialP____nesc_unnamed4327' (at pp.c:5917)
      EnumeratorList:  (at pp.c:5918)
        Enumerator: name='SerialP__RXSTATE_NOSYNC' (at pp.c:5918)
        Enumerator: name='SerialP__RXSTATE_PROTO' (at pp.c:5919)
        Enumerator: name='SerialP__RXSTATE_TOKEN' (at pp.c:5920)
        Enumerator: name='SerialP__RXSTATE_INFO' (at pp.c:5921)
        Enumerator: name='SerialP__RXSTATE_INACTIVE' (at pp.c:5922)
  Decl: name=None, quals=[], storage=[] (at pp.c:5925)
    Enum: name='SerialP____nesc_unnamed4328' (at pp.c:5925)
      EnumeratorList:  (at pp.c:5926)
        Enumerator: name='SerialP__TXSTATE_IDLE' (at pp.c:5926)
        Enumerator: name='SerialP__TXSTATE_PROTO' (at pp.c:5927)
        Enumerator: name='SerialP__TXSTATE_SEQNO' (at pp.c:5928)
        Enumerator: name='SerialP__TXSTATE_INFO' (at pp.c:5929)
        Enumerator: name='SerialP__TXSTATE_FCS1' (at pp.c:5930)
        Enumerator: name='SerialP__TXSTATE_FCS2' (at pp.c:5931)
        Enumerator: name='SerialP__TXSTATE_ENDFLAG' (at pp.c:5932)
        Enumerator: name='SerialP__TXSTATE_ENDWAIT' (at pp.c:5933)
        Enumerator: name='SerialP__TXSTATE_FINISH' (at pp.c:5934)
        Enumerator: name='SerialP__TXSTATE_ERROR' (at pp.c:5935)
        Enumerator: name='SerialP__TXSTATE_INACTIVE' (at pp.c:5936)
  Typedef: name='SerialP__tx_data_buffer_states_t', quals=[], storage=['typedef'] (at pp.c:5948)
    TypeDecl: declname='SerialP__tx_data_buffer_states_t', quals=[] (at pp.c:5948)
      Enum: name='SerialP____nesc_unnamed4329' (at pp.c:5944)
        EnumeratorList:  (at pp.c:5945)
          Enumerator: name='SerialP__BUFFER_AVAILABLE' (at pp.c:5945)
          Enumerator: name='SerialP__BUFFER_FILLING' (at pp.c:5946)
          Enumerator: name='SerialP__BUFFER_COMPLETE' (at pp.c:5947)
  Decl: name=None, quals=[], storage=[] (at pp.c:5950)
    Enum: name='SerialP____nesc_unnamed4330' (at pp.c:5950)
      EnumeratorList:  (at pp.c:5951)
        Enumerator: name='SerialP__TX_ACK_INDEX' (at pp.c:5951)
          Constant: type='int', value='0' (at pp.c:5951)
        Enumerator: name='SerialP__TX_DATA_INDEX' (at pp.c:5952)
          Constant: type='int', value='1' (at pp.c:5952)
        Enumerator: name='SerialP__TX_BUFFER_COUNT' (at pp.c:5953)
          Constant: type='int', value='2' (at pp.c:5953)
  Typedef: name='SerialP__rx_buf_t', quals=[], storage=['typedef'] (at pp.c:5966)
    TypeDecl: declname='SerialP__rx_buf_t', quals=[] (at pp.c:5966)
      Struct: name='SerialP____nesc_unnamed4331', packed=False (at pp.c:5962)
        Decl: name='writePtr', quals=[], storage=[] (at 0)
          TypeDecl: declname='writePtr', quals=[] (at pp.c:5963)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='readPtr', quals=[], storage=[] (at 0)
          TypeDecl: declname='readPtr', quals=[] (at pp.c:5964)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:5965)
            TypeDecl: declname='buf', quals=[] (at pp.c:5965)
              IdentifierType: names=['uint8_t'] (at None)
            BinaryOp: op='+' (at pp.c:5965)
              ID: name='SerialP__RX_DATA_BUFFER_SIZE' (at pp.c:5965)
              Constant: type='int', value='1' (at pp.c:5965)
  Typedef: name='SerialP__tx_buf_t', quals=[], storage=['typedef'] (at pp.c:5975)
    TypeDecl: declname='SerialP__tx_buf_t', quals=[] (at pp.c:5975)
      Struct: name='SerialP____nesc_unnamed4332', packed=False (at pp.c:5972)
        Decl: name='state', quals=[], storage=[] (at 0)
          TypeDecl: declname='state', quals=[] (at pp.c:5973)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at 0)
          TypeDecl: declname='buf', quals=[] (at pp.c:5974)
            IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='SerialP__ack_queue_t', quals=[], storage=['typedef'] (at pp.c:5986)
    TypeDecl: declname='SerialP__ack_queue_t', quals=[] (at pp.c:5986)
      Struct: name='SerialP____nesc_unnamed4333', packed=False (at pp.c:5982)
        Decl: name='writePtr', quals=[], storage=[] (at 0)
          TypeDecl: declname='writePtr', quals=[] (at pp.c:5983)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='readPtr', quals=[], storage=[] (at 0)
          TypeDecl: declname='readPtr', quals=[] (at pp.c:5984)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:5985)
            TypeDecl: declname='buf', quals=[] (at pp.c:5985)
              IdentifierType: names=['uint8_t'] (at None)
            BinaryOp: op='+' (at pp.c:5985)
              ID: name='SerialP__ACK_QUEUE_SIZE' (at pp.c:5985)
              Constant: type='int', value='1' (at pp.c:5985)
  Decl: name='SerialP__rxBuf', quals=[], storage=[] (at pp.c:5990)
    TypeDecl: declname='SerialP__rxBuf', quals=[] (at pp.c:5990)
      IdentifierType: names=['SerialP__rx_buf_t'] (at None)
  Decl: name='SerialP__txBuf', quals=[], storage=[] (at pp.c:5991)
    ArrayDecl:  (at pp.c:5991)
      TypeDecl: declname='SerialP__txBuf', quals=[] (at pp.c:5991)
        IdentifierType: names=['SerialP__tx_buf_t'] (at None)
      ID: name='SerialP__TX_BUFFER_COUNT' (at pp.c:5991)
  Decl: name='SerialP__rxState', quals=[], storage=[] (at pp.c:5995)
    TypeDecl: declname='SerialP__rxState', quals=[] (at pp.c:5995)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__rxByteCnt', quals=[], storage=[] (at pp.c:5996)
    TypeDecl: declname='SerialP__rxByteCnt', quals=[] (at pp.c:5996)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__rxProto', quals=[], storage=[] (at pp.c:5997)
    TypeDecl: declname='SerialP__rxProto', quals=[] (at pp.c:5997)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__rxSeqno', quals=[], storage=[] (at pp.c:5998)
    TypeDecl: declname='SerialP__rxSeqno', quals=[] (at pp.c:5998)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__rxCRC', quals=[], storage=[] (at pp.c:5999)
    TypeDecl: declname='SerialP__rxCRC', quals=[] (at pp.c:5999)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='SerialP__txState', quals=[], storage=[] (at pp.c:6003)
    TypeDecl: declname='SerialP__txState', quals=[] (at pp.c:6003)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__txByteCnt', quals=[], storage=[] (at pp.c:6004)
    TypeDecl: declname='SerialP__txByteCnt', quals=[] (at pp.c:6004)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__txProto', quals=[], storage=[] (at pp.c:6005)
    TypeDecl: declname='SerialP__txProto', quals=[] (at pp.c:6005)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__txSeqno', quals=[], storage=[] (at pp.c:6006)
    TypeDecl: declname='SerialP__txSeqno', quals=[] (at pp.c:6006)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__txCRC', quals=[], storage=[] (at pp.c:6007)
    TypeDecl: declname='SerialP__txCRC', quals=[] (at pp.c:6007)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='SerialP__txPending', quals=[], storage=[] (at pp.c:6008)
    TypeDecl: declname='SerialP__txPending', quals=[] (at pp.c:6008)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__txIndex', quals=[], storage=[] (at pp.c:6009)
    TypeDecl: declname='SerialP__txIndex', quals=[] (at pp.c:6009)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__ackQ', quals=[], storage=[] (at pp.c:6012)
    TypeDecl: declname='SerialP__ackQ', quals=[] (at pp.c:6012)
      IdentifierType: names=['SerialP__ack_queue_t'] (at None)
  Decl: name='SerialP__offPending', quals=[], storage=[] (at pp.c:6014)
    TypeDecl: declname='SerialP__offPending', quals=[] (at pp.c:6014)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:6014)
  Decl: name='SerialP__txInit', quals=[], storage=['__inline', 'static'] (at pp.c:6018)
    FuncDecl: quals=None (at pp.c:6018)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__txInit', quals=[] (at pp.c:6018)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__rxInit', quals=[], storage=['__inline', 'static'] (at pp.c:6019)
    FuncDecl: quals=None (at pp.c:6019)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__rxInit', quals=[] (at pp.c:6019)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__ackInit', quals=[], storage=['__inline', 'static'] (at pp.c:6020)
    FuncDecl: quals=None (at pp.c:6020)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ackInit', quals=[] (at pp.c:6020)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__ack_queue_is_full', quals=[], storage=['__inline', 'static'] (at pp.c:6022)
    FuncDecl: quals=None (at pp.c:6022)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ack_queue_is_full', quals=[] (at pp.c:6022)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SerialP__ack_queue_is_empty', quals=[], storage=['__inline', 'static'] (at pp.c:6023)
    FuncDecl: quals=None (at pp.c:6023)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ack_queue_is_empty', quals=[] (at pp.c:6023)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SerialP__ack_queue_push', quals=[], storage=['__inline', 'static'] (at pp.c:6024)
    FuncDecl: quals=None (at pp.c:6024)
      ParamList:  (at pp.c:6024)
        Decl: name='token', quals=[], storage=[] (at pp.c:6024)
          TypeDecl: declname='token', quals=[] (at pp.c:6024)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__ack_queue_push', quals=[] (at pp.c:6024)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__ack_queue_top', quals=[], storage=['__inline', 'static'] (at pp.c:6025)
    FuncDecl: quals=None (at pp.c:6025)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ack_queue_top', quals=[] (at pp.c:6025)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__ack_queue_pop', quals=[], storage=['inline', 'static'] (at pp.c:6026)
    FuncDecl: quals=None (at pp.c:6026)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ack_queue_pop', quals=[] (at pp.c:6026)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__rx_buffer_push', quals=[], storage=['__inline', 'static'] (at pp.c:6031)
    FuncDecl: quals=None (at pp.c:6031)
      ParamList:  (at pp.c:6031)
        Decl: name='data', quals=[], storage=[] (at pp.c:6031)
          TypeDecl: declname='data', quals=[] (at pp.c:6031)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__rx_buffer_push', quals=[] (at pp.c:6031)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__rx_buffer_top', quals=[], storage=['__inline', 'static'] (at pp.c:6032)
    FuncDecl: quals=None (at pp.c:6032)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__rx_buffer_top', quals=[] (at pp.c:6032)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__rx_buffer_pop', quals=[], storage=['__inline', 'static'] (at pp.c:6033)
    FuncDecl: quals=None (at pp.c:6033)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__rx_buffer_pop', quals=[] (at pp.c:6033)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__rx_current_crc', quals=[], storage=['__inline', 'static'] (at pp.c:6034)
    FuncDecl: quals=None (at pp.c:6034)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__rx_current_crc', quals=[] (at pp.c:6034)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='SerialP__rx_state_machine', quals=[], storage=['static'] (at pp.c:6036)
    FuncDecl: quals=None (at pp.c:6036)
      ParamList:  (at pp.c:6036)
        Decl: name='isDelimeter', quals=[], storage=[] (at pp.c:6036)
          TypeDecl: declname='isDelimeter', quals=[] (at pp.c:6036)
            IdentifierType: names=['bool'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:6036)
          TypeDecl: declname='data', quals=[] (at pp.c:6036)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__rx_state_machine', quals=[] (at pp.c:6036)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__MaybeScheduleTx', quals=[], storage=['static'] (at pp.c:6037)
    FuncDecl: quals=None (at pp.c:6037)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__MaybeScheduleTx', quals=[] (at pp.c:6037)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__txInit', quals=[], storage=['__inline', 'static'] (at pp.c:6042)
    FuncDecl: quals=None (at pp.c:6042)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__txInit', quals=[] (at pp.c:6042)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__rxInit', quals=[], storage=['__inline', 'static'] (at pp.c:6044)
    FuncDecl: quals=None (at pp.c:6044)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__rxInit', quals=[] (at pp.c:6044)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__ackInit', quals=[], storage=['__inline', 'static'] (at pp.c:6053)
    FuncDecl: quals=None (at pp.c:6053)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ackInit', quals=[] (at pp.c:6053)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:6057)
    FuncDecl: quals=None (at pp.c:6057)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__Init__init', quals=[] (at pp.c:6057)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__ack_queue_is_full', quals=[], storage=['__inline', 'static'] (at pp.c:6059)
    FuncDecl: quals=None (at pp.c:6059)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ack_queue_is_full', quals=[] (at pp.c:6059)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SerialP__ack_queue_is_empty', quals=[], storage=['__inline', 'static'] (at pp.c:6069)
    FuncDecl: quals=None (at pp.c:6069)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ack_queue_is_empty', quals=[] (at pp.c:6069)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SerialP__ack_queue_push', quals=[], storage=['__inline', 'static'] (at pp.c:6075)
    FuncDecl: quals=None (at pp.c:6075)
      ParamList:  (at pp.c:6075)
        Decl: name='token', quals=[], storage=[] (at pp.c:6075)
          TypeDecl: declname='token', quals=[] (at pp.c:6075)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__ack_queue_push', quals=[] (at pp.c:6075)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__ack_queue_top', quals=[], storage=['__inline', 'static'] (at pp.c:6085)
    FuncDecl: quals=None (at pp.c:6085)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ack_queue_top', quals=[] (at pp.c:6085)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__ack_queue_pop', quals=[], storage=['inline', 'static'] (at pp.c:6095)
    FuncDecl: quals=None (at pp.c:6095)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__ack_queue_pop', quals=[] (at pp.c:6095)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__rx_buffer_push', quals=[], storage=['__inline', 'static'] (at pp.c:6097)
    FuncDecl: quals=None (at pp.c:6097)
      ParamList:  (at pp.c:6097)
        Decl: name='data', quals=[], storage=[] (at pp.c:6097)
          TypeDecl: declname='data', quals=[] (at pp.c:6097)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__rx_buffer_push', quals=[] (at pp.c:6097)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__rx_buffer_top', quals=[], storage=['__inline', 'static'] (at pp.c:6101)
    FuncDecl: quals=None (at pp.c:6101)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__rx_buffer_top', quals=[] (at pp.c:6101)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__rx_buffer_pop', quals=[], storage=['__inline', 'static'] (at pp.c:6105)
    FuncDecl: quals=None (at pp.c:6105)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__rx_buffer_pop', quals=[] (at pp.c:6105)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialP__rx_current_crc', quals=[], storage=['__inline', 'static'] (at pp.c:6111)
    FuncDecl: quals=None (at pp.c:6111)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__rx_current_crc', quals=[] (at pp.c:6111)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='SerialP__startDoneTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6122)
    FuncDecl: quals=None (at pp.c:6122)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__startDoneTask__runTask', quals=[] (at pp.c:6122)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__stopDoneTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6128)
    FuncDecl: quals=None (at pp.c:6128)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__stopDoneTask__runTask', quals=[] (at pp.c:6128)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SerialFlush__flushDone', quals=[], storage=['inline', 'static'] (at pp.c:6132)
    FuncDecl: quals=None (at pp.c:6132)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFlush__flushDone', quals=[] (at pp.c:6132)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__defaultSerialFlushTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6137)
    FuncDecl: quals=None (at pp.c:6137)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__defaultSerialFlushTask__runTask', quals=[] (at pp.c:6137)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SerialFlush__default__flush', quals=[], storage=['inline', 'static'] (at pp.c:6140)
    FuncDecl: quals=None (at pp.c:6140)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFlush__default__flush', quals=[] (at pp.c:6140)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SplitControl__start', quals=[], storage=['inline', 'static'] (at pp.c:6144)
    FuncDecl: quals=None (at pp.c:6144)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SplitControl__start', quals=[] (at pp.c:6144)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__testOff', quals=[], storage=['static'] (at pp.c:6149)
    FuncDecl: quals=None (at pp.c:6149)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__testOff', quals=[] (at pp.c:6149)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SerialFrameComm__delimiterReceived', quals=[], storage=['inline', 'static'] (at pp.c:6151)
    FuncDecl: quals=None (at pp.c:6151)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFrameComm__delimiterReceived', quals=[] (at pp.c:6151)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SerialFrameComm__dataReceived', quals=[], storage=['inline', 'static'] (at pp.c:6154)
    FuncDecl: quals=None (at pp.c:6154)
      ParamList:  (at pp.c:6154)
        Decl: name='data', quals=[], storage=[] (at pp.c:6154)
          TypeDecl: declname='data', quals=[] (at pp.c:6154)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__SerialFrameComm__dataReceived', quals=[] (at pp.c:6154)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__valid_rx_proto', quals=[], storage=['inline', 'static'] (at pp.c:6158)
    FuncDecl: quals=None (at pp.c:6158)
      ParamList:  (at pp.c:6158)
        Decl: name='proto', quals=[], storage=[] (at pp.c:6158)
          TypeDecl: declname='proto', quals=[] (at pp.c:6158)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__valid_rx_proto', quals=[] (at pp.c:6158)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SerialP__rx_state_machine', quals=[], storage=['static'] (at pp.c:6169)
    FuncDecl: quals=None (at pp.c:6169)
      ParamList:  (at pp.c:6169)
        Decl: name='isDelimeter', quals=[], storage=[] (at pp.c:6169)
          TypeDecl: declname='isDelimeter', quals=[] (at pp.c:6169)
            IdentifierType: names=['bool'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:6169)
          TypeDecl: declname='data', quals=[] (at pp.c:6169)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__rx_state_machine', quals=[] (at pp.c:6169)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__MaybeScheduleTx', quals=[], storage=['static'] (at pp.c:6171)
    FuncDecl: quals=None (at pp.c:6171)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__MaybeScheduleTx', quals=[] (at pp.c:6171)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SendBytePacket__completeSend', quals=[], storage=['inline', 'static'] (at pp.c:6182)
    FuncDecl: quals=None (at pp.c:6182)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SendBytePacket__completeSend', quals=[] (at pp.c:6182)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__SendBytePacket__startSend', quals=[], storage=['inline', 'static'] (at pp.c:6191)
    FuncDecl: quals=None (at pp.c:6191)
      ParamList:  (at pp.c:6191)
        Decl: name='b', quals=[], storage=[] (at pp.c:6191)
          TypeDecl: declname='b', quals=[] (at pp.c:6191)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialP__SendBytePacket__startSend', quals=[] (at pp.c:6191)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialP__RunTx__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6193)
    FuncDecl: quals=None (at pp.c:6193)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__RunTx__runTask', quals=[] (at pp.c:6193)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialP__SerialFrameComm__putDone', quals=[], storage=['inline', 'static'] (at pp.c:6195)
    FuncDecl: quals=None (at pp.c:6195)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialP__SerialFrameComm__putDone', quals=[] (at pp.c:6195)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__receiveTask__postTask', quals=[], storage=['static'] (at pp.c:6197)
    FuncDecl: quals=None (at pp.c:6197)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__receiveTask__postTask', quals=[] (at pp.c:6197)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialDispatcherP__0__Send__sendDone', quals=[], storage=['static'] (at pp.c:6199)
    FuncDecl: quals=None (at pp.c:6199)
      ParamList:  (at pp.c:6201)
        Decl: name='arg_0x101ace748', quals=[], storage=[] (at pp.c:6201)
          TypeDecl: declname='arg_0x101ace748', quals=[] (at pp.c:6201)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6203)
          PtrDecl: quals=[] (at pp.c:6203)
            TypeDecl: declname='msg', quals=[] (at pp.c:6203)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6207)
          TypeDecl: declname='error', quals=[] (at pp.c:6207)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__Send__sendDone', quals=[] (at pp.c:6199)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__signalSendDone__postTask', quals=[], storage=['static'] (at pp.c:6209)
    FuncDecl: quals=None (at pp.c:6209)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__signalSendDone__postTask', quals=[] (at pp.c:6209)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialDispatcherP__0__Receive__receive', quals=[], storage=['static'] (at pp.c:6217)
    FuncDecl: quals=None (at pp.c:6217)
      ParamList:  (at pp.c:6219)
        Decl: name='arg_0x101ad1c50', quals=[], storage=[] (at pp.c:6219)
          TypeDecl: declname='arg_0x101ad1c50', quals=[] (at pp.c:6219)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6221)
          PtrDecl: quals=[] (at pp.c:6221)
            TypeDecl: declname='msg', quals=[] (at pp.c:6221)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:6222)
          PtrDecl: quals=[] (at pp.c:6222)
            TypeDecl: declname='payload', quals=[] (at pp.c:6222)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6228)
          TypeDecl: declname='len', quals=[] (at pp.c:6228)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:6213)
        TypeDecl: declname='SerialDispatcherP__0__Receive__receive', quals=[] (at pp.c:6217)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='SerialDispatcherP__0__PacketInfo__upperLength', quals=[], storage=['static'] (at pp.c:6230)
    FuncDecl: quals=None (at pp.c:6230)
      ParamList:  (at pp.c:6232)
        Decl: name='arg_0x101acdaa8', quals=[], storage=[] (at pp.c:6232)
          TypeDecl: declname='arg_0x101acdaa8', quals=[] (at pp.c:6232)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6234)
          PtrDecl: quals=[] (at pp.c:6234)
            TypeDecl: declname='msg', quals=[] (at pp.c:6234)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='dataLinkLen', quals=[], storage=[] (at pp.c:6234)
          TypeDecl: declname='dataLinkLen', quals=[] (at pp.c:6234)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__PacketInfo__upperLength', quals=[] (at pp.c:6230)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__PacketInfo__offset', quals=[], storage=['static'] (at pp.c:6236)
    FuncDecl: quals=None (at pp.c:6236)
      ParamList:  (at pp.c:6238)
        Decl: name='arg_0x101acdaa8', quals=[], storage=[] (at pp.c:6238)
          TypeDecl: declname='arg_0x101acdaa8', quals=[] (at pp.c:6238)
            IdentifierType: names=['uart_id_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__PacketInfo__offset', quals=[] (at pp.c:6236)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__PacketInfo__dataLinkLength', quals=[], storage=['static'] (at pp.c:6240)
    FuncDecl: quals=None (at pp.c:6240)
      ParamList:  (at pp.c:6242)
        Decl: name='arg_0x101acdaa8', quals=[], storage=[] (at pp.c:6242)
          TypeDecl: declname='arg_0x101acdaa8', quals=[] (at pp.c:6242)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6244)
          PtrDecl: quals=[] (at pp.c:6244)
            TypeDecl: declname='msg', quals=[] (at pp.c:6244)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='upperLen', quals=[], storage=[] (at pp.c:6244)
          TypeDecl: declname='upperLen', quals=[] (at pp.c:6244)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__PacketInfo__dataLinkLength', quals=[] (at pp.c:6240)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__SendBytePacket__completeSend', quals=[], storage=['static'] (at pp.c:6246)
    FuncDecl: quals=None (at pp.c:6246)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__SendBytePacket__completeSend', quals=[] (at pp.c:6246)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialDispatcherP__0__SendBytePacket__startSend', quals=[], storage=['static'] (at pp.c:6248)
    FuncDecl: quals=None (at pp.c:6248)
      ParamList:  (at pp.c:6248)
        Decl: name='first_byte', quals=[], storage=[] (at pp.c:6248)
          TypeDecl: declname='first_byte', quals=[] (at pp.c:6248)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__SendBytePacket__startSend', quals=[] (at pp.c:6248)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:6250)
    Enum: name='SerialDispatcherP__0____nesc_unnamed4334' (at pp.c:6250)
      EnumeratorList:  (at pp.c:6252)
        Enumerator: name='SerialDispatcherP__0__signalSendDone' (at pp.c:6252)
          Constant: type='int', value='4U' (at pp.c:6252)
  Typedef: name='SerialDispatcherP__0____nesc_sillytask_signalSendDone', quals=[], storage=['typedef'] (at pp.c:6255)
    ArrayDecl:  (at pp.c:6255)
      TypeDecl: declname='SerialDispatcherP__0____nesc_sillytask_signalSendDone', quals=[] (at pp.c:6255)
        IdentifierType: names=['int'] (at None)
      ID: name='SerialDispatcherP__0__signalSendDone' (at pp.c:6255)
  Decl: name=None, quals=[], storage=[] (at pp.c:6257)
    Enum: name='SerialDispatcherP__0____nesc_unnamed4335' (at pp.c:6257)
      EnumeratorList:  (at pp.c:6259)
        Enumerator: name='SerialDispatcherP__0__receiveTask' (at pp.c:6259)
          Constant: type='int', value='5U' (at pp.c:6259)
  Typedef: name='SerialDispatcherP__0____nesc_sillytask_receiveTask', quals=[], storage=['typedef'] (at pp.c:6262)
    ArrayDecl:  (at pp.c:6262)
      TypeDecl: declname='SerialDispatcherP__0____nesc_sillytask_receiveTask', quals=[] (at pp.c:6262)
        IdentifierType: names=['int'] (at None)
      ID: name='SerialDispatcherP__0__receiveTask' (at pp.c:6262)
  Typedef: name='SerialDispatcherP__0__send_state_t', quals=[], storage=['typedef'] (at pp.c:6269)
    TypeDecl: declname='SerialDispatcherP__0__send_state_t', quals=[] (at pp.c:6269)
      Enum: name='SerialDispatcherP__0____nesc_unnamed4336' (at pp.c:6265)
        EnumeratorList:  (at pp.c:6266)
          Enumerator: name='SerialDispatcherP__0__SEND_STATE_IDLE' (at pp.c:6266)
            Constant: type='int', value='0' (at pp.c:6266)
          Enumerator: name='SerialDispatcherP__0__SEND_STATE_BEGIN' (at pp.c:6267)
            Constant: type='int', value='1' (at pp.c:6267)
          Enumerator: name='SerialDispatcherP__0__SEND_STATE_DATA' (at pp.c:6268)
            Constant: type='int', value='2' (at pp.c:6268)
  Decl: name=None, quals=[], storage=[] (at pp.c:6271)
    Enum: name='SerialDispatcherP__0____nesc_unnamed4337' (at pp.c:6271)
      EnumeratorList:  (at pp.c:6272)
        Enumerator: name='SerialDispatcherP__0__RECV_STATE_IDLE' (at pp.c:6272)
          Constant: type='int', value='0' (at pp.c:6272)
        Enumerator: name='SerialDispatcherP__0__RECV_STATE_BEGIN' (at pp.c:6273)
          Constant: type='int', value='1' (at pp.c:6273)
        Enumerator: name='SerialDispatcherP__0__RECV_STATE_DATA' (at pp.c:6274)
          Constant: type='int', value='2' (at pp.c:6274)
  Typedef: name='SerialDispatcherP__0__recv_state_t', quals=[], storage=['typedef'] (at pp.c:6288)
    TypeDecl: declname='SerialDispatcherP__0__recv_state_t', quals=[] (at pp.c:6288)
      Struct: name='SerialDispatcherP__0____nesc_unnamed4338', packed=False (at pp.c:6283)
        Decl: name='which', quals=[], storage=[] (at 0)
          TypeDecl: declname='which', quals=[] (at pp.c:6284)
            IdentifierType: names=['uint8_t'] (at None)
          Constant: type='int', value='1' (at pp.c:6284)
        Decl: name='bufZeroLocked', quals=[], storage=[] (at 0)
          TypeDecl: declname='bufZeroLocked', quals=[] (at pp.c:6285)
            IdentifierType: names=['uint8_t'] (at None)
          Constant: type='int', value='1' (at pp.c:6285)
        Decl: name='bufOneLocked', quals=[], storage=[] (at 0)
          TypeDecl: declname='bufOneLocked', quals=[] (at pp.c:6286)
            IdentifierType: names=['uint8_t'] (at None)
          Constant: type='int', value='1' (at pp.c:6286)
        Decl: name='state', quals=[], storage=[] (at 0)
          TypeDecl: declname='state', quals=[] (at pp.c:6287)
            IdentifierType: names=['uint8_t'] (at None)
          Constant: type='int', value='2' (at pp.c:6287)
  Decl: name='SerialDispatcherP__0__receiveState', quals=[], storage=[] (at pp.c:6292)
    TypeDecl: declname='SerialDispatcherP__0__receiveState', quals=[] (at pp.c:6292)
      IdentifierType: names=['SerialDispatcherP__0__recv_state_t'] (at None)
    ExprList:  (at pp.c:6292)
      Constant: type='int', value='0' (at pp.c:6292)
      Constant: type='int', value='0' (at pp.c:6292)
      Constant: type='int', value='0' (at pp.c:6292)
      ID: name='SerialDispatcherP__0__RECV_STATE_IDLE' (at pp.c:6292)
  Decl: name='SerialDispatcherP__0__recvType', quals=[], storage=[] (at pp.c:6293)
    TypeDecl: declname='SerialDispatcherP__0__recvType', quals=[] (at pp.c:6293)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='TOS_SERIAL_UNKNOWN_ID' (at pp.c:6293)
  Decl: name='SerialDispatcherP__0__recvIndex', quals=[], storage=[] (at pp.c:6294)
    TypeDecl: declname='SerialDispatcherP__0__recvIndex', quals=[] (at pp.c:6294)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:6294)
  Decl: name='SerialDispatcherP__0__messages', quals=[], storage=[] (at pp.c:6297)
    ArrayDecl:  (at pp.c:6297)
      TypeDecl: declname='SerialDispatcherP__0__messages', quals=[] (at pp.c:6297)
        IdentifierType: names=['message_t'] (at None)
      Constant: type='int', value='2' (at pp.c:6297)
  Decl: name='SerialDispatcherP__0__messagePtrs', quals=[], storage=[] (at pp.c:6298)
    ArrayDecl:  (at pp.c:6298)
      PtrDecl: quals=[] (at pp.c:6298)
        TypeDecl: declname='SerialDispatcherP__0__messagePtrs', quals=[] (at pp.c:6298)
          IdentifierType: names=['message_t'] (at None)
      Constant: type='int', value='2' (at pp.c:6298)
    ExprList:  (at pp.c:6298)
      UnaryOp: op='&' (at pp.c:6298)
        ArrayRef:  (at pp.c:6298)
          ID: name='SerialDispatcherP__0__messages' (at pp.c:6298)
          Constant: type='int', value='0' (at pp.c:6298)
      UnaryOp: op='&' (at pp.c:6298)
        ArrayRef:  (at pp.c:6298)
          ID: name='SerialDispatcherP__0__messages' (at pp.c:6298)
          Constant: type='int', value='1' (at pp.c:6298)
  Decl: name='SerialDispatcherP__0__receiveBuffer', quals=[], storage=[] (at pp.c:6303)
    PtrDecl: quals=[] (at pp.c:6303)
      TypeDecl: declname='SerialDispatcherP__0__receiveBuffer', quals=[] (at pp.c:6303)
        IdentifierType: names=['uint8_t'] (at None)
    Cast:  (at None)
      Typename: quals=[] (at None)
        PtrDecl: quals=[] (at pp.c:6303)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['uint8_t'] (at None)
      UnaryOp: op='&' (at pp.c:6303)
        ArrayRef:  (at pp.c:6303)
          ID: name='SerialDispatcherP__0__messages' (at pp.c:6303)
          Constant: type='int', value='0' (at pp.c:6303)
  Decl: name='SerialDispatcherP__0__sendBuffer', quals=[], storage=[] (at pp.c:6305)
    PtrDecl: quals=[] (at pp.c:6305)
      TypeDecl: declname='SerialDispatcherP__0__sendBuffer', quals=[] (at pp.c:6305)
        IdentifierType: names=['uint8_t'] (at None)
    Cast:  (at None)
      Typename: quals=[] (at None)
        PtrDecl: quals=[] (at pp.c:6305)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      Constant: type='int', value='0' (at pp.c:6305)
  Decl: name='SerialDispatcherP__0__sendState', quals=[], storage=[] (at pp.c:6306)
    TypeDecl: declname='SerialDispatcherP__0__sendState', quals=[] (at pp.c:6306)
      IdentifierType: names=['SerialDispatcherP__0__send_state_t'] (at None)
    ID: name='SerialDispatcherP__0__SEND_STATE_IDLE' (at pp.c:6306)
  Decl: name='SerialDispatcherP__0__sendLen', quals=[], storage=[] (at pp.c:6307)
    TypeDecl: declname='SerialDispatcherP__0__sendLen', quals=[] (at pp.c:6307)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:6307)
  Decl: name='SerialDispatcherP__0__sendIndex', quals=[], storage=[] (at pp.c:6308)
    TypeDecl: declname='SerialDispatcherP__0__sendIndex', quals=[] (at pp.c:6308)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:6308)
  Decl: name='SerialDispatcherP__0__sendError', quals=[], storage=[] (at pp.c:6309)
    TypeDecl: declname='SerialDispatcherP__0__sendError', quals=[] (at pp.c:6309)
      IdentifierType: names=['error_t'] (at None)
    ID: name='SUCCESS' (at pp.c:6309)
  Decl: name='SerialDispatcherP__0__sendCancelled', quals=[], storage=[] (at pp.c:6310)
    TypeDecl: declname='SerialDispatcherP__0__sendCancelled', quals=[] (at pp.c:6310)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:6310)
  Decl: name='SerialDispatcherP__0__sendId', quals=[], storage=[] (at pp.c:6311)
    TypeDecl: declname='SerialDispatcherP__0__sendId', quals=[] (at pp.c:6311)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:6311)
  Decl: name='SerialDispatcherP__0__receiveTaskPending', quals=[], storage=[] (at pp.c:6314)
    TypeDecl: declname='SerialDispatcherP__0__receiveTaskPending', quals=[] (at pp.c:6314)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FALSE' (at pp.c:6314)
  Decl: name='SerialDispatcherP__0__receiveTaskType', quals=[], storage=[] (at pp.c:6315)
    TypeDecl: declname='SerialDispatcherP__0__receiveTaskType', quals=[] (at pp.c:6315)
      IdentifierType: names=['uart_id_t'] (at None)
    Constant: type='int', value='0' (at pp.c:6315)
  Decl: name='SerialDispatcherP__0__receiveTaskWhich', quals=[], storage=[] (at pp.c:6316)
    TypeDecl: declname='SerialDispatcherP__0__receiveTaskWhich', quals=[] (at pp.c:6316)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__receiveTaskBuf', quals=[], storage=[] (at pp.c:6317)
    PtrDecl: quals=[] (at pp.c:6317)
      TypeDecl: declname='SerialDispatcherP__0__receiveTaskBuf', quals=[] (at pp.c:6317)
        IdentifierType: names=['message_t'] (at None)
    Cast:  (at None)
      Typename: quals=[] (at None)
        PtrDecl: quals=[] (at pp.c:6317)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      Constant: type='int', value='0' (at pp.c:6317)
  Decl: name='SerialDispatcherP__0__receiveTaskSize', quals=[], storage=[] (at pp.c:6318)
    TypeDecl: declname='SerialDispatcherP__0__receiveTaskSize', quals=[] (at pp.c:6318)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:6318)
  Decl: name='SerialDispatcherP__0__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:6320)
    FuncDecl: quals=None (at pp.c:6320)
      ParamList:  (at pp.c:6320)
        Decl: name='id', quals=[], storage=[] (at pp.c:6320)
          TypeDecl: declname='id', quals=[] (at pp.c:6320)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6320)
          PtrDecl: quals=[] (at pp.c:6320)
            TypeDecl: declname='msg', quals=[] (at pp.c:6320)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6320)
          TypeDecl: declname='len', quals=[] (at pp.c:6320)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__Send__send', quals=[] (at pp.c:6320)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialDispatcherP__0__signalSendDone__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6322)
    FuncDecl: quals=None (at pp.c:6322)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__signalSendDone__runTask', quals=[] (at pp.c:6322)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__SendBytePacket__nextByte', quals=[], storage=['inline', 'static'] (at pp.c:6324)
    FuncDecl: quals=None (at pp.c:6324)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__SendBytePacket__nextByte', quals=[] (at pp.c:6324)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__SendBytePacket__sendCompleted', quals=[], storage=['inline', 'static'] (at pp.c:6326)
    FuncDecl: quals=None (at pp.c:6326)
      ParamList:  (at pp.c:6326)
        Decl: name='error', quals=[], storage=[] (at pp.c:6326)
          TypeDecl: declname='error', quals=[] (at pp.c:6326)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__SendBytePacket__sendCompleted', quals=[] (at pp.c:6326)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__isCurrentBufferLocked', quals=[], storage=['inline', 'static'] (at pp.c:6331)
    FuncDecl: quals=None (at pp.c:6331)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__isCurrentBufferLocked', quals=[] (at pp.c:6331)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SerialDispatcherP__0__lockCurrentBuffer', quals=[], storage=['inline', 'static'] (at pp.c:6335)
    FuncDecl: quals=None (at pp.c:6335)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__lockCurrentBuffer', quals=[] (at pp.c:6335)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__unlockBuffer', quals=[], storage=['inline', 'static'] (at pp.c:6344)
    FuncDecl: quals=None (at pp.c:6344)
      ParamList:  (at pp.c:6344)
        Decl: name='which', quals=[], storage=[] (at pp.c:6344)
          TypeDecl: declname='which', quals=[] (at pp.c:6344)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__unlockBuffer', quals=[] (at pp.c:6344)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__receiveBufferSwap', quals=[], storage=['inline', 'static'] (at pp.c:6353)
    FuncDecl: quals=None (at pp.c:6353)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__receiveBufferSwap', quals=[] (at pp.c:6353)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__ReceiveBytePacket__startPacket', quals=[], storage=['inline', 'static'] (at pp.c:6358)
    FuncDecl: quals=None (at pp.c:6358)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__ReceiveBytePacket__startPacket', quals=[] (at pp.c:6358)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SerialDispatcherP__0__ReceiveBytePacket__byteReceived', quals=[], storage=['inline', 'static'] (at pp.c:6360)
    FuncDecl: quals=None (at pp.c:6360)
      ParamList:  (at pp.c:6360)
        Decl: name='b', quals=[], storage=[] (at pp.c:6360)
          TypeDecl: declname='b', quals=[] (at pp.c:6360)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__ReceiveBytePacket__byteReceived', quals=[] (at pp.c:6360)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__receiveTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6362)
    FuncDecl: quals=None (at pp.c:6362)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__receiveTask__runTask', quals=[] (at pp.c:6362)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__ReceiveBytePacket__endPacket', quals=[], storage=['static'] (at pp.c:6364)
    FuncDecl: quals=None (at pp.c:6364)
      ParamList:  (at pp.c:6364)
        Decl: name='result', quals=[], storage=[] (at pp.c:6364)
          TypeDecl: declname='result', quals=[] (at pp.c:6364)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__ReceiveBytePacket__endPacket', quals=[] (at pp.c:6364)
        IdentifierType: names=['void'] (at None)
  Decl: name='SerialDispatcherP__0__PacketInfo__default__offset', quals=[], storage=['inline', 'static'] (at pp.c:6366)
    FuncDecl: quals=None (at pp.c:6366)
      ParamList:  (at pp.c:6366)
        Decl: name='id', quals=[], storage=[] (at pp.c:6366)
          TypeDecl: declname='id', quals=[] (at pp.c:6366)
            IdentifierType: names=['uart_id_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__PacketInfo__default__offset', quals=[] (at pp.c:6366)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__PacketInfo__default__dataLinkLength', quals=[], storage=['inline', 'static'] (at pp.c:6369)
    FuncDecl: quals=None (at pp.c:6369)
      ParamList:  (at pp.c:6369)
        Decl: name='id', quals=[], storage=[] (at pp.c:6369)
          TypeDecl: declname='id', quals=[] (at pp.c:6369)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6369)
          PtrDecl: quals=[] (at pp.c:6369)
            TypeDecl: declname='msg', quals=[] (at pp.c:6369)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='upperLen', quals=[], storage=[] (at pp.c:6370)
          TypeDecl: declname='upperLen', quals=[] (at pp.c:6370)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__PacketInfo__default__dataLinkLength', quals=[] (at pp.c:6369)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__PacketInfo__default__upperLength', quals=[], storage=['inline', 'static'] (at pp.c:6373)
    FuncDecl: quals=None (at pp.c:6373)
      ParamList:  (at pp.c:6373)
        Decl: name='id', quals=[], storage=[] (at pp.c:6373)
          TypeDecl: declname='id', quals=[] (at pp.c:6373)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6373)
          PtrDecl: quals=[] (at pp.c:6373)
            TypeDecl: declname='msg', quals=[] (at pp.c:6373)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='dataLinkLen', quals=[], storage=[] (at pp.c:6374)
          TypeDecl: declname='dataLinkLen', quals=[] (at pp.c:6374)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__PacketInfo__default__upperLength', quals=[] (at pp.c:6373)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialDispatcherP__0__Receive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:6379)
    FuncDecl: quals=None (at pp.c:6379)
      ParamList:  (at pp.c:6379)
        Decl: name='idxxx', quals=[], storage=[] (at pp.c:6379)
          TypeDecl: declname='idxxx', quals=[] (at pp.c:6379)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6379)
          PtrDecl: quals=[] (at pp.c:6379)
            TypeDecl: declname='msg', quals=[] (at pp.c:6379)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:6380)
          PtrDecl: quals=[] (at pp.c:6380)
            TypeDecl: declname='payload', quals=[] (at pp.c:6380)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6381)
          TypeDecl: declname='len', quals=[] (at pp.c:6381)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:6379)
        TypeDecl: declname='SerialDispatcherP__0__Receive__default__receive', quals=[] (at pp.c:6379)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='SerialDispatcherP__0__Send__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:6384)
    FuncDecl: quals=None (at pp.c:6384)
      ParamList:  (at pp.c:6384)
        Decl: name='idxxx', quals=[], storage=[] (at pp.c:6384)
          TypeDecl: declname='idxxx', quals=[] (at pp.c:6384)
            IdentifierType: names=['uart_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6384)
          PtrDecl: quals=[] (at pp.c:6384)
            TypeDecl: declname='msg', quals=[] (at pp.c:6384)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6384)
          TypeDecl: declname='error', quals=[] (at pp.c:6384)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SerialDispatcherP__0__Send__default__sendDone', quals=[] (at pp.c:6384)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__UartStream__send', quals=[], storage=['static'] (at pp.c:6386)
    FuncDecl: quals=None (at pp.c:6386)
      ParamList:  (at pp.c:6388)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6388)
          PtrDecl: quals=[] (at pp.c:6388)
            TypeDecl: declname='buf', quals=[] (at pp.c:6388)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6392)
          TypeDecl: declname='len', quals=[] (at pp.c:6392)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='HdlcTranslateC__UartStream__send', quals=[] (at pp.c:6386)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='HdlcTranslateC__SerialFrameComm__dataReceived', quals=[], storage=['static'] (at pp.c:6394)
    FuncDecl: quals=None (at pp.c:6394)
      ParamList:  (at pp.c:6394)
        Decl: name='data', quals=[], storage=[] (at pp.c:6394)
          TypeDecl: declname='data', quals=[] (at pp.c:6394)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HdlcTranslateC__SerialFrameComm__dataReceived', quals=[] (at pp.c:6394)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__SerialFrameComm__putDone', quals=[], storage=['static'] (at pp.c:6400)
    FuncDecl: quals=None (at pp.c:6400)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HdlcTranslateC__SerialFrameComm__putDone', quals=[] (at pp.c:6400)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__SerialFrameComm__delimiterReceived', quals=[], storage=['static'] (at pp.c:6402)
    FuncDecl: quals=None (at pp.c:6402)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HdlcTranslateC__SerialFrameComm__delimiterReceived', quals=[] (at pp.c:6402)
        IdentifierType: names=['void'] (at None)
  Typedef: name='HdlcTranslateC__HdlcState', quals=[], storage=['typedef'] (at pp.c:6408)
    TypeDecl: declname='HdlcTranslateC__HdlcState', quals=[] (at pp.c:6408)
      Struct: name='HdlcTranslateC____nesc_unnamed4339', packed=False (at pp.c:6405)
        Decl: name='sendEscape', quals=[], storage=[] (at 0)
          TypeDecl: declname='sendEscape', quals=[] (at pp.c:6406)
            IdentifierType: names=['uint8_t'] (at None)
          Constant: type='int', value='1' (at pp.c:6406)
        Decl: name='receiveEscape', quals=[], storage=[] (at 0)
          TypeDecl: declname='receiveEscape', quals=[] (at pp.c:6407)
            IdentifierType: names=['uint8_t'] (at None)
          Constant: type='int', value='1' (at pp.c:6407)
  Decl: name='HdlcTranslateC__state', quals=[], storage=[] (at pp.c:6411)
    TypeDecl: declname='HdlcTranslateC__state', quals=[] (at pp.c:6411)
      IdentifierType: names=['HdlcTranslateC__HdlcState'] (at None)
    ExprList:  (at pp.c:6411)
      Constant: type='int', value='0' (at pp.c:6411)
      Constant: type='int', value='0' (at pp.c:6411)
  Decl: name='HdlcTranslateC__txTemp', quals=[], storage=[] (at pp.c:6412)
    TypeDecl: declname='HdlcTranslateC__txTemp', quals=[] (at pp.c:6412)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HdlcTranslateC__m_data', quals=[], storage=[] (at pp.c:6413)
    TypeDecl: declname='HdlcTranslateC__m_data', quals=[] (at pp.c:6413)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HdlcTranslateC__SerialFrameComm__resetReceive', quals=[], storage=['inline', 'static'] (at pp.c:6416)
    FuncDecl: quals=None (at pp.c:6416)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HdlcTranslateC__SerialFrameComm__resetReceive', quals=[] (at pp.c:6416)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__UartStream__receivedByte', quals=[], storage=['inline', 'static'] (at pp.c:6422)
    FuncDecl: quals=None (at pp.c:6422)
      ParamList:  (at pp.c:6422)
        Decl: name='data', quals=[], storage=[] (at pp.c:6422)
          TypeDecl: declname='data', quals=[] (at pp.c:6422)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HdlcTranslateC__UartStream__receivedByte', quals=[] (at pp.c:6422)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__SerialFrameComm__putDelimiter', quals=[], storage=['static'] (at pp.c:6424)
    FuncDecl: quals=None (at pp.c:6424)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HdlcTranslateC__SerialFrameComm__putDelimiter', quals=[] (at pp.c:6424)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='HdlcTranslateC__SerialFrameComm__putData', quals=[], storage=['static'] (at pp.c:6432)
    FuncDecl: quals=None (at pp.c:6432)
      ParamList:  (at pp.c:6432)
        Decl: name='data', quals=[], storage=[] (at pp.c:6432)
          TypeDecl: declname='data', quals=[] (at pp.c:6432)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HdlcTranslateC__SerialFrameComm__putData', quals=[] (at pp.c:6432)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='HdlcTranslateC__UartStream__sendDone', quals=[], storage=['static'] (at pp.c:6434)
    FuncDecl: quals=None (at pp.c:6434)
      ParamList:  (at pp.c:6434)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6434)
          PtrDecl: quals=[] (at pp.c:6434)
            TypeDecl: declname='buf', quals=[] (at pp.c:6434)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6434)
          TypeDecl: declname='len', quals=[] (at pp.c:6434)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6435)
          TypeDecl: declname='error', quals=[] (at pp.c:6435)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='HdlcTranslateC__UartStream__sendDone', quals=[] (at pp.c:6434)
        IdentifierType: names=['void'] (at None)
  Decl: name='HdlcTranslateC__UartStream__receiveDone', quals=[], storage=['inline', 'static'] (at pp.c:6437)
    FuncDecl: quals=None (at pp.c:6437)
      ParamList:  (at pp.c:6437)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6437)
          PtrDecl: quals=[] (at pp.c:6437)
            TypeDecl: declname='buf', quals=[] (at pp.c:6437)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6437)
          TypeDecl: declname='len', quals=[] (at pp.c:6437)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6437)
          TypeDecl: declname='error', quals=[] (at pp.c:6437)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='HdlcTranslateC__UartStream__receiveDone', quals=[] (at pp.c:6437)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__Msp430UartConfigure__getConfig', quals=[], storage=['static'] (at pp.c:6439)
    FuncDecl: quals=None (at pp.c:6439)
      ParamList:  (at pp.c:6441)
        Decl: name='arg_0x101bf94c8', quals=[], storage=[] (at pp.c:6441)
          TypeDecl: declname='arg_0x101bf94c8', quals=[] (at pp.c:6441)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:6439)
        TypeDecl: declname='Msp430UartP__0__Msp430UartConfigure__getConfig', quals=[] (at pp.c:6439)
          IdentifierType: names=['msp430_uart_union_config_t'] (at None)
  Decl: name='Msp430UartP__0__Usart__resetUsart', quals=[], storage=['static'] (at pp.c:6443)
    FuncDecl: quals=None (at pp.c:6443)
      ParamList:  (at pp.c:6443)
        Decl: name='reset', quals=[], storage=[] (at pp.c:6443)
          TypeDecl: declname='reset', quals=[] (at pp.c:6443)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430UartP__0__Usart__resetUsart', quals=[] (at pp.c:6443)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__Usart__disableIntr', quals=[], storage=['static'] (at pp.c:6445)
    FuncDecl: quals=None (at pp.c:6445)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UartP__0__Usart__disableIntr', quals=[] (at pp.c:6445)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__Usart__enableIntr', quals=[], storage=['static'] (at pp.c:6448)
    FuncDecl: quals=None (at pp.c:6448)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UartP__0__Usart__enableIntr', quals=[] (at pp.c:6448)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__Usart__tx', quals=[], storage=['static'] (at pp.c:6450)
    FuncDecl: quals=None (at pp.c:6450)
      ParamList:  (at pp.c:6450)
        Decl: name='data', quals=[], storage=[] (at pp.c:6450)
          TypeDecl: declname='data', quals=[] (at pp.c:6450)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__Usart__tx', quals=[] (at pp.c:6450)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__Usart__disableUart', quals=[], storage=['static'] (at pp.c:6452)
    FuncDecl: quals=None (at pp.c:6452)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UartP__0__Usart__disableUart', quals=[] (at pp.c:6452)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__Usart__setModeUart', quals=[], storage=['static'] (at pp.c:6454)
    FuncDecl: quals=None (at pp.c:6454)
      ParamList:  (at pp.c:6454)
        Decl: name='config', quals=[], storage=[] (at pp.c:6454)
          PtrDecl: quals=[] (at pp.c:6454)
            TypeDecl: declname='config', quals=[] (at pp.c:6454)
              IdentifierType: names=['msp430_uart_union_config_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__Usart__setModeUart', quals=[] (at pp.c:6454)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UartStream__receivedByte', quals=[], storage=['static'] (at pp.c:6456)
    FuncDecl: quals=None (at pp.c:6456)
      ParamList:  (at pp.c:6458)
        Decl: name='arg_0x101bfd020', quals=[], storage=[] (at pp.c:6458)
          TypeDecl: declname='arg_0x101bfd020', quals=[] (at pp.c:6458)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='byte', quals=[], storage=[] (at pp.c:6460)
          TypeDecl: declname='byte', quals=[] (at pp.c:6460)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__receivedByte', quals=[] (at pp.c:6456)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UartStream__receiveDone', quals=[], storage=['static'] (at pp.c:6462)
    FuncDecl: quals=None (at pp.c:6462)
      ParamList:  (at pp.c:6464)
        Decl: name='arg_0x101bfd020', quals=[], storage=[] (at pp.c:6464)
          TypeDecl: declname='arg_0x101bfd020', quals=[] (at pp.c:6464)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6466)
          PtrDecl: quals=[] (at pp.c:6466)
            TypeDecl: declname='buf', quals=[] (at pp.c:6466)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6470)
          TypeDecl: declname='len', quals=[] (at pp.c:6470)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6470)
          TypeDecl: declname='error', quals=[] (at pp.c:6470)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__receiveDone', quals=[] (at pp.c:6462)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UartStream__sendDone', quals=[], storage=['static'] (at pp.c:6472)
    FuncDecl: quals=None (at pp.c:6472)
      ParamList:  (at pp.c:6474)
        Decl: name='arg_0x101bfd020', quals=[], storage=[] (at pp.c:6474)
          TypeDecl: declname='arg_0x101bfd020', quals=[] (at pp.c:6474)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6476)
          PtrDecl: quals=[] (at pp.c:6476)
            TypeDecl: declname='buf', quals=[] (at pp.c:6476)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6480)
          TypeDecl: declname='len', quals=[] (at pp.c:6480)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6480)
          TypeDecl: declname='error', quals=[] (at pp.c:6480)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__sendDone', quals=[] (at pp.c:6472)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__release', quals=[], storage=['static'] (at pp.c:6482)
    FuncDecl: quals=None (at pp.c:6482)
      ParamList:  (at pp.c:6484)
        Decl: name='arg_0x101bfa258', quals=[], storage=[] (at pp.c:6484)
          TypeDecl: declname='arg_0x101bfa258', quals=[] (at pp.c:6484)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__release', quals=[] (at pp.c:6482)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__immediateRequest', quals=[], storage=['static'] (at pp.c:6486)
    FuncDecl: quals=None (at pp.c:6486)
      ParamList:  (at pp.c:6488)
        Decl: name='arg_0x101bfa258', quals=[], storage=[] (at pp.c:6488)
          TypeDecl: declname='arg_0x101bfa258', quals=[] (at pp.c:6488)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__immediateRequest', quals=[] (at pp.c:6486)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__isOwner', quals=[], storage=['static'] (at pp.c:6490)
    FuncDecl: quals=None (at pp.c:6490)
      ParamList:  (at pp.c:6492)
        Decl: name='arg_0x101bfa258', quals=[], storage=[] (at pp.c:6492)
          TypeDecl: declname='arg_0x101bfa258', quals=[] (at pp.c:6492)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__isOwner', quals=[] (at pp.c:6490)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430UartP__0__Resource__granted', quals=[], storage=['static'] (at pp.c:6494)
    FuncDecl: quals=None (at pp.c:6494)
      ParamList:  (at pp.c:6496)
        Decl: name='arg_0x101bc50c8', quals=[], storage=[] (at pp.c:6496)
          TypeDecl: declname='arg_0x101bc50c8', quals=[] (at pp.c:6496)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__Resource__granted', quals=[] (at pp.c:6494)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__m_tx_len', quals=[], storage=[] (at pp.c:6498)
    TypeDecl: declname='Msp430UartP__0__m_tx_len', quals=[] (at pp.c:6498)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430UartP__0__m_rx_len', quals=[], storage=[] (at pp.c:6500)
    TypeDecl: declname='Msp430UartP__0__m_rx_len', quals=[] (at pp.c:6500)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430UartP__0__m_tx_buf', quals=[], storage=[] (at pp.c:6501)
    PtrDecl: quals=[] (at pp.c:6501)
      TypeDecl: declname='Msp430UartP__0__m_tx_buf', quals=[] (at pp.c:6501)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430UartP__0__m_rx_buf', quals=[], storage=[] (at pp.c:6503)
    PtrDecl: quals=[] (at pp.c:6503)
      TypeDecl: declname='Msp430UartP__0__m_rx_buf', quals=[] (at pp.c:6503)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430UartP__0__m_tx_pos', quals=[], storage=[] (at pp.c:6504)
    TypeDecl: declname='Msp430UartP__0__m_tx_pos', quals=[] (at pp.c:6504)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430UartP__0__m_rx_pos', quals=[], storage=[] (at pp.c:6506)
    TypeDecl: declname='Msp430UartP__0__m_rx_pos', quals=[] (at pp.c:6506)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430UartP__0__m_byte_time', quals=[], storage=[] (at pp.c:6507)
    TypeDecl: declname='Msp430UartP__0__m_byte_time', quals=[] (at pp.c:6507)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430UartP__0__current_owner', quals=[], storage=[] (at pp.c:6508)
    TypeDecl: declname='Msp430UartP__0__current_owner', quals=[] (at pp.c:6508)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430UartP__0__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:6510)
    FuncDecl: quals=None (at pp.c:6510)
      ParamList:  (at pp.c:6510)
        Decl: name='id', quals=[], storage=[] (at pp.c:6510)
          TypeDecl: declname='id', quals=[] (at pp.c:6510)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__Resource__immediateRequest', quals=[] (at pp.c:6510)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:6512)
    FuncDecl: quals=None (at pp.c:6512)
      ParamList:  (at pp.c:6512)
        Decl: name='id', quals=[], storage=[] (at pp.c:6512)
          TypeDecl: declname='id', quals=[] (at pp.c:6512)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__Resource__release', quals=[] (at pp.c:6512)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__ResourceConfigure__configure', quals=[], storage=['static'] (at pp.c:6520)
    FuncDecl: quals=None (at pp.c:6520)
      ParamList:  (at pp.c:6520)
        Decl: name='id', quals=[], storage=[] (at pp.c:6520)
          TypeDecl: declname='id', quals=[] (at pp.c:6520)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__ResourceConfigure__configure', quals=[] (at pp.c:6520)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__ResourceConfigure__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:6527)
    FuncDecl: quals=None (at pp.c:6527)
      ParamList:  (at pp.c:6527)
        Decl: name='id', quals=[], storage=[] (at pp.c:6527)
          TypeDecl: declname='id', quals=[] (at pp.c:6527)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:6527)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:6536)
    FuncDecl: quals=None (at pp.c:6536)
      ParamList:  (at pp.c:6536)
        Decl: name='id', quals=[], storage=[] (at pp.c:6536)
          TypeDecl: declname='id', quals=[] (at pp.c:6536)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__granted', quals=[] (at pp.c:6536)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UsartInterrupts__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:6538)
    FuncDecl: quals=None (at pp.c:6538)
      ParamList:  (at pp.c:6538)
        Decl: name='id', quals=[], storage=[] (at pp.c:6538)
          TypeDecl: declname='id', quals=[] (at pp.c:6538)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:6538)
          TypeDecl: declname='data', quals=[] (at pp.c:6538)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartInterrupts__rxDone', quals=[] (at pp.c:6538)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UartStream__send', quals=[], storage=['static'] (at pp.c:6540)
    FuncDecl: quals=None (at pp.c:6540)
      ParamList:  (at pp.c:6540)
        Decl: name='id', quals=[], storage=[] (at pp.c:6540)
          TypeDecl: declname='id', quals=[] (at pp.c:6540)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6540)
          PtrDecl: quals=[] (at pp.c:6540)
            TypeDecl: declname='buf', quals=[] (at pp.c:6540)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6540)
          TypeDecl: declname='len', quals=[] (at pp.c:6540)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__send', quals=[] (at pp.c:6540)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__UsartInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:6542)
    FuncDecl: quals=None (at pp.c:6542)
      ParamList:  (at pp.c:6542)
        Decl: name='id', quals=[], storage=[] (at pp.c:6542)
          TypeDecl: declname='id', quals=[] (at pp.c:6542)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartInterrupts__txDone', quals=[] (at pp.c:6542)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:6544)
    FuncDecl: quals=None (at pp.c:6544)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UartP__0__Counter__overflow', quals=[] (at pp.c:6544)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__default__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:6546)
    FuncDecl: quals=None (at pp.c:6546)
      ParamList:  (at pp.c:6546)
        Decl: name='id', quals=[], storage=[] (at pp.c:6546)
          TypeDecl: declname='id', quals=[] (at pp.c:6546)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__default__isOwner', quals=[] (at pp.c:6546)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__default__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:6548)
    FuncDecl: quals=None (at pp.c:6548)
      ParamList:  (at pp.c:6548)
        Decl: name='id', quals=[], storage=[] (at pp.c:6548)
          TypeDecl: declname='id', quals=[] (at pp.c:6548)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__default__immediateRequest', quals=[] (at pp.c:6548)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__UsartResource__default__release', quals=[], storage=['inline', 'static'] (at pp.c:6549)
    FuncDecl: quals=None (at pp.c:6549)
      ParamList:  (at pp.c:6549)
        Decl: name='id', quals=[], storage=[] (at pp.c:6549)
          TypeDecl: declname='id', quals=[] (at pp.c:6549)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UsartResource__default__release', quals=[] (at pp.c:6549)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430UartP__0__Msp430UartConfigure__default__getConfig', quals=[], storage=['inline', 'static'] (at pp.c:6550)
    FuncDecl: quals=None (at pp.c:6550)
      ParamList:  (at pp.c:6550)
        Decl: name='id', quals=[], storage=[] (at pp.c:6550)
          TypeDecl: declname='id', quals=[] (at pp.c:6550)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:6550)
        TypeDecl: declname='Msp430UartP__0__Msp430UartConfigure__default__getConfig', quals=[] (at pp.c:6550)
          IdentifierType: names=['msp430_uart_union_config_t'] (at None)
  Decl: name='Msp430UartP__0__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:6554)
    FuncDecl: quals=None (at pp.c:6554)
      ParamList:  (at pp.c:6554)
        Decl: name='id', quals=[], storage=[] (at pp.c:6554)
          TypeDecl: declname='id', quals=[] (at pp.c:6554)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__Resource__default__granted', quals=[] (at pp.c:6554)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UartStream__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:6556)
    FuncDecl: quals=None (at pp.c:6556)
      ParamList:  (at pp.c:6556)
        Decl: name='id', quals=[], storage=[] (at pp.c:6556)
          TypeDecl: declname='id', quals=[] (at pp.c:6556)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6556)
          PtrDecl: quals=[] (at pp.c:6556)
            TypeDecl: declname='buf', quals=[] (at pp.c:6556)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6556)
          TypeDecl: declname='len', quals=[] (at pp.c:6556)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6556)
          TypeDecl: declname='error', quals=[] (at pp.c:6556)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__default__sendDone', quals=[] (at pp.c:6556)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UartStream__default__receivedByte', quals=[], storage=['inline', 'static'] (at pp.c:6557)
    FuncDecl: quals=None (at pp.c:6557)
      ParamList:  (at pp.c:6557)
        Decl: name='id', quals=[], storage=[] (at pp.c:6557)
          TypeDecl: declname='id', quals=[] (at pp.c:6557)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='byte', quals=[], storage=[] (at pp.c:6557)
          TypeDecl: declname='byte', quals=[] (at pp.c:6557)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__default__receivedByte', quals=[] (at pp.c:6557)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UartP__0__UartStream__default__receiveDone', quals=[], storage=['inline', 'static'] (at pp.c:6558)
    FuncDecl: quals=None (at pp.c:6558)
      ParamList:  (at pp.c:6558)
        Decl: name='id', quals=[], storage=[] (at pp.c:6558)
          TypeDecl: declname='id', quals=[] (at pp.c:6558)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6558)
          PtrDecl: quals=[] (at pp.c:6558)
            TypeDecl: declname='buf', quals=[] (at pp.c:6558)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6558)
          TypeDecl: declname='len', quals=[] (at pp.c:6558)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6558)
          TypeDecl: declname='error', quals=[] (at pp.c:6558)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430UartP__0__UartStream__default__receiveDone', quals=[] (at pp.c:6558)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__UCLK__selectIOFunc', quals=[], storage=['static'] (at pp.c:6560)
    FuncDecl: quals=None (at pp.c:6560)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__UCLK__selectIOFunc', quals=[] (at pp.c:6560)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Interrupts__rxDone', quals=[], storage=['static'] (at pp.c:6562)
    FuncDecl: quals=None (at pp.c:6562)
      ParamList:  (at pp.c:6562)
        Decl: name='data', quals=[], storage=[] (at pp.c:6562)
          TypeDecl: declname='data', quals=[] (at pp.c:6562)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Interrupts__rxDone', quals=[] (at pp.c:6562)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Interrupts__txDone', quals=[], storage=['static'] (at pp.c:6564)
    FuncDecl: quals=None (at pp.c:6564)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Interrupts__txDone', quals=[] (at pp.c:6564)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__URXD__selectIOFunc', quals=[], storage=['static'] (at pp.c:6566)
    FuncDecl: quals=None (at pp.c:6566)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__URXD__selectIOFunc', quals=[] (at pp.c:6566)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__URXD__selectModuleFunc', quals=[], storage=['static'] (at pp.c:6568)
    FuncDecl: quals=None (at pp.c:6568)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__URXD__selectModuleFunc', quals=[] (at pp.c:6568)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__UTXD__selectIOFunc', quals=[], storage=['static'] (at pp.c:6575)
    FuncDecl: quals=None (at pp.c:6575)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__UTXD__selectIOFunc', quals=[] (at pp.c:6575)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__UTXD__selectModuleFunc', quals=[], storage=['static'] (at pp.c:6577)
    FuncDecl: quals=None (at pp.c:6577)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__UTXD__selectModuleFunc', quals=[] (at pp.c:6577)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__SOMI__selectIOFunc', quals=[], storage=['static'] (at pp.c:6584)
    FuncDecl: quals=None (at pp.c:6584)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__SOMI__selectIOFunc', quals=[] (at pp.c:6584)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__SIMO__selectIOFunc', quals=[], storage=['static'] (at pp.c:6586)
    FuncDecl: quals=None (at pp.c:6586)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__SIMO__selectIOFunc', quals=[] (at pp.c:6586)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__IE2@"0x0001"', quals=['volatile'], storage=['static'] (at pp.c:6588)
    TypeDecl: declname='HplMsp430Usart1P__IE2@"0x0001"', quals=['volatile'] (at pp.c:6588)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart1P__ME2@"0x0005"', quals=['volatile'], storage=['static'] (at pp.c:6589)
    TypeDecl: declname='HplMsp430Usart1P__ME2@"0x0005"', quals=['volatile'] (at pp.c:6589)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart1P__IFG2@"0x0003"', quals=['volatile'], storage=['static'] (at pp.c:6590)
    TypeDecl: declname='HplMsp430Usart1P__IFG2@"0x0003"', quals=['volatile'] (at pp.c:6590)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart1P__U1TCTL@"0x0079"', quals=['volatile'], storage=['static'] (at pp.c:6591)
    TypeDecl: declname='HplMsp430Usart1P__U1TCTL@"0x0079"', quals=['volatile'] (at pp.c:6591)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart1P__U1RCTL@"0x007A"', quals=['volatile'], storage=['static'] (at pp.c:6592)
    TypeDecl: declname='HplMsp430Usart1P__U1RCTL@"0x007A"', quals=['volatile'] (at pp.c:6592)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart1P__U1TXBUF@"0x007F"', quals=['volatile'], storage=['static'] (at pp.c:6593)
    TypeDecl: declname='HplMsp430Usart1P__U1TXBUF@"0x007F"', quals=['volatile'] (at pp.c:6593)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='sig_UART1RX_VECTOR', quals=[], storage=[] (at pp.c:6597)
    FuncDecl: quals=None (at pp.c:6597)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_UART1RX_VECTOR', quals=[] (at pp.c:6597)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_UART1TX_VECTOR', quals=[], storage=[] (at pp.c:6602)
    FuncDecl: quals=None (at pp.c:6602)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_UART1TX_VECTOR', quals=[] (at pp.c:6602)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__AsyncStdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:6606)
    FuncDecl: quals=None (at pp.c:6606)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__AsyncStdControl__start', quals=[] (at pp.c:6606)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='HplMsp430Usart1P__AsyncStdControl__stop', quals=[], storage=['inline', 'static'] (at pp.c:6610)
    FuncDecl: quals=None (at pp.c:6610)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__AsyncStdControl__stop', quals=[] (at pp.c:6610)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__setUbr', quals=[], storage=['inline', 'static'] (at pp.c:6612)
    FuncDecl: quals=None (at pp.c:6612)
      ParamList:  (at pp.c:6612)
        Decl: name='control', quals=[], storage=[] (at pp.c:6612)
          TypeDecl: declname='control', quals=[] (at pp.c:6612)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__setUbr', quals=[] (at pp.c:6612)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__setUmctl', quals=[], storage=['inline', 'static'] (at pp.c:6623)
    FuncDecl: quals=None (at pp.c:6623)
      ParamList:  (at pp.c:6623)
        Decl: name='control', quals=[], storage=[] (at pp.c:6623)
          TypeDecl: declname='control', quals=[] (at pp.c:6623)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__setUmctl', quals=[] (at pp.c:6623)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__resetUsart', quals=[], storage=['inline', 'static'] (at pp.c:6631)
    FuncDecl: quals=None (at pp.c:6631)
      ParamList:  (at pp.c:6631)
        Decl: name='reset', quals=[], storage=[] (at pp.c:6631)
          TypeDecl: declname='reset', quals=[] (at pp.c:6631)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__resetUsart', quals=[] (at pp.c:6631)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__enableUart', quals=[], storage=['inline', 'static'] (at pp.c:6633)
    FuncDecl: quals=None (at pp.c:6633)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__enableUart', quals=[] (at pp.c:6633)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__disableUart', quals=[], storage=['static'] (at pp.c:6641)
    FuncDecl: quals=None (at pp.c:6641)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__disableUart', quals=[] (at pp.c:6641)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__enableUartTx', quals=[], storage=['inline', 'static'] (at pp.c:6650)
    FuncDecl: quals=None (at pp.c:6650)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__enableUartTx', quals=[] (at pp.c:6650)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__disableUartTx', quals=[], storage=['inline', 'static'] (at pp.c:6655)
    FuncDecl: quals=None (at pp.c:6655)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__disableUartTx', quals=[] (at pp.c:6655)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__enableUartRx', quals=[], storage=['inline', 'static'] (at pp.c:6661)
    FuncDecl: quals=None (at pp.c:6661)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__enableUartRx', quals=[] (at pp.c:6661)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__disableUartRx', quals=[], storage=['inline', 'static'] (at pp.c:6666)
    FuncDecl: quals=None (at pp.c:6666)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__disableUartRx', quals=[] (at pp.c:6666)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:6668)
    FuncDecl: quals=None (at pp.c:6668)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__disableSpi', quals=[] (at pp.c:6668)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__configUart', quals=[], storage=['inline', 'static'] (at pp.c:6670)
    FuncDecl: quals=None (at pp.c:6670)
      ParamList:  (at pp.c:6670)
        Decl: name='config', quals=[], storage=[] (at pp.c:6670)
          PtrDecl: quals=[] (at pp.c:6670)
            TypeDecl: declname='config', quals=[] (at pp.c:6670)
              IdentifierType: names=['msp430_uart_union_config_t'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__configUart', quals=[] (at pp.c:6670)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__setModeUart', quals=[], storage=['inline', 'static'] (at pp.c:6680)
    FuncDecl: quals=None (at pp.c:6680)
      ParamList:  (at pp.c:6680)
        Decl: name='config', quals=[], storage=[] (at pp.c:6680)
          PtrDecl: quals=[] (at pp.c:6680)
            TypeDecl: declname='config', quals=[] (at pp.c:6680)
              IdentifierType: names=['msp430_uart_union_config_t'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__setModeUart', quals=[] (at pp.c:6680)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__clrIntr', quals=[], storage=['inline', 'static'] (at pp.c:6682)
    FuncDecl: quals=None (at pp.c:6682)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__clrIntr', quals=[] (at pp.c:6682)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__disableIntr', quals=[], storage=['inline', 'static'] (at pp.c:6684)
    FuncDecl: quals=None (at pp.c:6684)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__disableIntr', quals=[] (at pp.c:6684)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__enableIntr', quals=[], storage=['inline', 'static'] (at pp.c:6686)
    FuncDecl: quals=None (at pp.c:6686)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__enableIntr', quals=[] (at pp.c:6686)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart1P__Usart__tx', quals=[], storage=['inline', 'static'] (at pp.c:6693)
    FuncDecl: quals=None (at pp.c:6693)
      ParamList:  (at pp.c:6693)
        Decl: name='data', quals=[], storage=[] (at pp.c:6693)
          TypeDecl: declname='data', quals=[] (at pp.c:6693)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart1P__Usart__tx', quals=[] (at pp.c:6693)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__0__Msp430Timer__get', quals=[], storage=['static'] (at pp.c:6695)
    FuncDecl: quals=None (at pp.c:6695)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Msp430Timer__get', quals=[] (at pp.c:6695)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430CounterC__0__Msp430Timer__isOverflowPending', quals=[], storage=['static'] (at pp.c:6696)
    FuncDecl: quals=None (at pp.c:6696)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Msp430Timer__isOverflowPending', quals=[] (at pp.c:6696)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430CounterC__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:6698)
    FuncDecl: quals=None (at pp.c:6698)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Counter__overflow', quals=[] (at pp.c:6698)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__0__Counter__get', quals=[], storage=['inline', 'static'] (at pp.c:6700)
    FuncDecl: quals=None (at pp.c:6700)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Counter__get', quals=[] (at pp.c:6700)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430CounterC__0__Counter__isOverflowPending', quals=[], storage=['inline', 'static'] (at pp.c:6705)
    FuncDecl: quals=None (at pp.c:6705)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Counter__isOverflowPending', quals=[] (at pp.c:6705)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430CounterC__0__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:6715)
    FuncDecl: quals=None (at pp.c:6715)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Msp430Timer__overflow', quals=[] (at pp.c:6715)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:6717)
    FuncDecl: quals=None (at pp.c:6717)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__ArbiterInfo__inUse', quals=[] (at pp.c:6717)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430UsartShareP__0__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:6725)
    FuncDecl: quals=None (at pp.c:6725)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__ArbiterInfo__userId', quals=[] (at pp.c:6725)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__rxDone', quals=[], storage=['static'] (at pp.c:6727)
    FuncDecl: quals=None (at pp.c:6727)
      ParamList:  (at pp.c:6729)
        Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:6729)
          TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:6729)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:6731)
          TypeDecl: declname='data', quals=[] (at pp.c:6731)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__rxDone', quals=[] (at pp.c:6727)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__txDone', quals=[], storage=['static'] (at pp.c:6733)
    FuncDecl: quals=None (at pp.c:6733)
      ParamList:  (at pp.c:6735)
        Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:6735)
          TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:6735)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__txDone', quals=[] (at pp.c:6733)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:6745)
    FuncDecl: quals=None (at pp.c:6745)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[] (at pp.c:6745)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:6750)
    FuncDecl: quals=None (at pp.c:6750)
      ParamList:  (at pp.c:6750)
        Decl: name='data', quals=[], storage=[] (at pp.c:6750)
          TypeDecl: declname='data', quals=[] (at pp.c:6750)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[] (at pp.c:6750)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[], storage=['inline', 'static'] (at pp.c:6760)
    FuncDecl: quals=None (at pp.c:6760)
      ParamList:  (at pp.c:6760)
        Decl: name='id', quals=[], storage=[] (at pp.c:6760)
          TypeDecl: declname='id', quals=[] (at pp.c:6760)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[] (at pp.c:6760)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:6761)
    FuncDecl: quals=None (at pp.c:6761)
      ParamList:  (at pp.c:6761)
        Decl: name='id', quals=[], storage=[] (at pp.c:6761)
          TypeDecl: declname='id', quals=[] (at pp.c:6761)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:6761)
          TypeDecl: declname='data', quals=[] (at pp.c:6761)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[] (at pp.c:6761)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:6763)
    Enum: name='FcfsResourceQueueC__1____nesc_unnamed4340' (at pp.c:6763)
      EnumeratorList:  (at pp.c:6765)
        Enumerator: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:6765)
          Constant: type='int', value='0xFF' (at pp.c:6765)
  Decl: name='FcfsResourceQueueC__1__resQ', quals=[], storage=[] (at pp.c:6767)
    ArrayDecl:  (at pp.c:6767)
      TypeDecl: declname='FcfsResourceQueueC__1__resQ', quals=[] (at pp.c:6767)
        IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='1U' (at pp.c:6767)
  Decl: name='FcfsResourceQueueC__1__qHead', quals=[], storage=[] (at pp.c:6768)
    TypeDecl: declname='FcfsResourceQueueC__1__qHead', quals=[] (at pp.c:6768)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:6768)
  Decl: name='FcfsResourceQueueC__1__qTail', quals=[], storage=[] (at pp.c:6769)
    TypeDecl: declname='FcfsResourceQueueC__1__qTail', quals=[] (at pp.c:6769)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:6769)
  Decl: name='FcfsResourceQueueC__1__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:6771)
    FuncDecl: quals=None (at pp.c:6771)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__Init__init', quals=[] (at pp.c:6771)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[], storage=['inline', 'static'] (at pp.c:6776)
    FuncDecl: quals=None (at pp.c:6776)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[] (at pp.c:6776)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:6784)
    FuncDecl: quals=None (at pp.c:6784)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[] (at pp.c:6784)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='ArbiterP__0__ResourceRequested__immediateRequested', quals=[], storage=['static'] (at pp.c:6786)
    FuncDecl: quals=None (at pp.c:6786)
      ParamList:  (at pp.c:6788)
        Decl: name='arg_0x101d807e8', quals=[], storage=[] (at pp.c:6788)
          TypeDecl: declname='arg_0x101d807e8', quals=[] (at pp.c:6788)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceRequested__immediateRequested', quals=[] (at pp.c:6786)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__unconfigure', quals=[], storage=['static'] (at pp.c:6790)
    FuncDecl: quals=None (at pp.c:6790)
      ParamList:  (at pp.c:6792)
        Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:6792)
          TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:6792)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:6790)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__configure', quals=[], storage=['static'] (at pp.c:6794)
    FuncDecl: quals=None (at pp.c:6794)
      ParamList:  (at pp.c:6796)
        Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:6796)
          TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:6796)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__configure', quals=[] (at pp.c:6794)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__Queue__isEmpty', quals=[], storage=['static'] (at pp.c:6798)
    FuncDecl: quals=None (at pp.c:6798)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__Queue__isEmpty', quals=[] (at pp.c:6798)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__0__Queue__dequeue', quals=[], storage=['static'] (at pp.c:6800)
    FuncDecl: quals=None (at pp.c:6800)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__Queue__dequeue', quals=[] (at pp.c:6800)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='ArbiterP__0__ResourceDefaultOwner__granted', quals=[], storage=['static'] (at pp.c:6802)
    FuncDecl: quals=None (at pp.c:6802)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__granted', quals=[] (at pp.c:6802)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceDefaultOwner__immediateRequested', quals=[], storage=['static'] (at pp.c:6804)
    FuncDecl: quals=None (at pp.c:6804)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__immediateRequested', quals=[] (at pp.c:6804)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__Resource__granted', quals=[], storage=['static'] (at pp.c:6806)
    FuncDecl: quals=None (at pp.c:6806)
      ParamList:  (at pp.c:6808)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:6808)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:6808)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__granted', quals=[] (at pp.c:6806)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__grantedTask__postTask', quals=[], storage=['static'] (at pp.c:6810)
    FuncDecl: quals=None (at pp.c:6810)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__grantedTask__postTask', quals=[] (at pp.c:6810)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:6812)
    Enum: name='ArbiterP__0____nesc_unnamed4341' (at pp.c:6812)
      EnumeratorList:  (at pp.c:6814)
        Enumerator: name='ArbiterP__0__grantedTask' (at pp.c:6814)
          Constant: type='int', value='6U' (at pp.c:6814)
  Typedef: name='ArbiterP__0____nesc_sillytask_grantedTask', quals=[], storage=['typedef'] (at pp.c:6817)
    ArrayDecl:  (at pp.c:6817)
      TypeDecl: declname='ArbiterP__0____nesc_sillytask_grantedTask', quals=[] (at pp.c:6817)
        IdentifierType: names=['int'] (at None)
      ID: name='ArbiterP__0__grantedTask' (at pp.c:6817)
  Decl: name=None, quals=[], storage=[] (at pp.c:6819)
    Enum: name='ArbiterP__0____nesc_unnamed4342' (at pp.c:6819)
      EnumeratorList:  (at pp.c:6821)
        Enumerator: name='ArbiterP__0__RES_CONTROLLED' (at pp.c:6821)
        Enumerator: name='ArbiterP__0__RES_GRANTING' (at pp.c:6821)
        Enumerator: name='ArbiterP__0__RES_IMM_GRANTING' (at pp.c:6821)
        Enumerator: name='ArbiterP__0__RES_BUSY' (at pp.c:6821)
  Decl: name=None, quals=[], storage=[] (at pp.c:6824)
    Enum: name='ArbiterP__0____nesc_unnamed4343' (at pp.c:6824)
      EnumeratorList:  (at pp.c:6826)
        Enumerator: name='ArbiterP__0__default_owner_id' (at pp.c:6826)
          Constant: type='int', value='1U' (at pp.c:6826)
  Decl: name=None, quals=[], storage=[] (at pp.c:6829)
    Enum: name='ArbiterP__0____nesc_unnamed4344' (at pp.c:6829)
      EnumeratorList:  (at pp.c:6831)
        Enumerator: name='ArbiterP__0__NO_RES' (at pp.c:6831)
          Constant: type='int', value='0xFF' (at pp.c:6831)
  Decl: name='ArbiterP__0__state', quals=[], storage=[] (at pp.c:6833)
    TypeDecl: declname='ArbiterP__0__state', quals=[] (at pp.c:6833)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='ArbiterP__0__RES_CONTROLLED' (at pp.c:6833)
  Decl: name='ArbiterP__0__resId', quals=[], storage=[] (at pp.c:6834)
    TypeDecl: declname='ArbiterP__0__resId', quals=[] (at pp.c:6834)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='ArbiterP__0__default_owner_id' (at pp.c:6834)
  Decl: name='ArbiterP__0__reqResId', quals=[], storage=[] (at pp.c:6835)
    TypeDecl: declname='ArbiterP__0__reqResId', quals=[] (at pp.c:6835)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__0__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:6837)
    FuncDecl: quals=None (at pp.c:6837)
      ParamList:  (at pp.c:6837)
        Decl: name='id', quals=[], storage=[] (at pp.c:6837)
          TypeDecl: declname='id', quals=[] (at pp.c:6837)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__immediateRequest', quals=[] (at pp.c:6837)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:6839)
    FuncDecl: quals=None (at pp.c:6839)
      ParamList:  (at pp.c:6839)
        Decl: name='id', quals=[], storage=[] (at pp.c:6839)
          TypeDecl: declname='id', quals=[] (at pp.c:6839)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__release', quals=[] (at pp.c:6839)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__ResourceDefaultOwner__release', quals=[], storage=['inline', 'static'] (at pp.c:6841)
    FuncDecl: quals=None (at pp.c:6841)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__release', quals=[] (at pp.c:6841)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:6843)
    FuncDecl: quals=None (at pp.c:6843)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ArbiterInfo__inUse', quals=[] (at pp.c:6843)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__0__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:6845)
    FuncDecl: quals=None (at pp.c:6845)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ArbiterInfo__userId', quals=[] (at pp.c:6845)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__0__Resource__isOwner', quals=[], storage=['static'] (at pp.c:6856)
    FuncDecl: quals=None (at pp.c:6856)
      ParamList:  (at pp.c:6856)
        Decl: name='id', quals=[], storage=[] (at pp.c:6856)
          TypeDecl: declname='id', quals=[] (at pp.c:6856)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__isOwner', quals=[] (at pp.c:6856)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__0__grantedTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6858)
    FuncDecl: quals=None (at pp.c:6858)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__grantedTask__runTask', quals=[] (at pp.c:6858)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:6860)
    FuncDecl: quals=None (at pp.c:6860)
      ParamList:  (at pp.c:6860)
        Decl: name='id', quals=[], storage=[] (at pp.c:6860)
          TypeDecl: declname='id', quals=[] (at pp.c:6860)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__default__granted', quals=[] (at pp.c:6860)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceRequested__default__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:6864)
    FuncDecl: quals=None (at pp.c:6864)
      ParamList:  (at pp.c:6864)
        Decl: name='id', quals=[], storage=[] (at pp.c:6864)
          TypeDecl: declname='id', quals=[] (at pp.c:6864)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceRequested__default__immediateRequested', quals=[] (at pp.c:6864)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__default__configure', quals=[], storage=['inline', 'static'] (at pp.c:6874)
    FuncDecl: quals=None (at pp.c:6874)
      ParamList:  (at pp.c:6874)
        Decl: name='id', quals=[], storage=[] (at pp.c:6874)
          TypeDecl: declname='id', quals=[] (at pp.c:6874)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__configure', quals=[] (at pp.c:6874)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:6876)
    FuncDecl: quals=None (at pp.c:6876)
      ParamList:  (at pp.c:6876)
        Decl: name='id', quals=[], storage=[] (at pp.c:6876)
          TypeDecl: declname='id', quals=[] (at pp.c:6876)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:6876)
        IdentifierType: names=['void'] (at None)
  Decl: name='AsyncPowerManagerP__0__PowerDownCleanup__cleanup', quals=[], storage=['static'] (at pp.c:6878)
    FuncDecl: quals=None (at pp.c:6878)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AsyncPowerManagerP__0__PowerDownCleanup__cleanup', quals=[] (at pp.c:6878)
        IdentifierType: names=['void'] (at None)
  Decl: name='AsyncPowerManagerP__0__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:6880)
    FuncDecl: quals=None (at pp.c:6880)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AsyncPowerManagerP__0__ResourceDefaultOwner__release', quals=[] (at pp.c:6880)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AsyncPowerManagerP__0__AsyncStdControl__start', quals=[], storage=['static'] (at pp.c:6882)
    FuncDecl: quals=None (at pp.c:6882)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AsyncPowerManagerP__0__AsyncStdControl__start', quals=[] (at pp.c:6882)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AsyncPowerManagerP__0__AsyncStdControl__stop', quals=[], storage=['static'] (at pp.c:6892)
    FuncDecl: quals=None (at pp.c:6892)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AsyncPowerManagerP__0__AsyncStdControl__stop', quals=[] (at pp.c:6892)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AsyncPowerManagerP__0__ResourceDefaultOwner__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:6894)
    FuncDecl: quals=None (at pp.c:6894)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AsyncPowerManagerP__0__ResourceDefaultOwner__immediateRequested', quals=[] (at pp.c:6894)
        IdentifierType: names=['void'] (at None)
  Decl: name='AsyncPowerManagerP__0__ResourceDefaultOwner__granted', quals=[], storage=['inline', 'static'] (at pp.c:6899)
    FuncDecl: quals=None (at pp.c:6899)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AsyncPowerManagerP__0__ResourceDefaultOwner__granted', quals=[] (at pp.c:6899)
        IdentifierType: names=['void'] (at None)
  Decl: name='AsyncPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[], storage=['inline', 'static'] (at pp.c:6904)
    FuncDecl: quals=None (at pp.c:6904)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AsyncPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[] (at pp.c:6904)
        IdentifierType: names=['void'] (at None)
  Decl: name='TelosSerialP__Resource__release', quals=[], storage=['static'] (at pp.c:6906)
    FuncDecl: quals=None (at pp.c:6906)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TelosSerialP__Resource__release', quals=[] (at pp.c:6906)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='TelosSerialP__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:6908)
    FuncDecl: quals=None (at pp.c:6908)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TelosSerialP__Resource__immediateRequest', quals=[] (at pp.c:6908)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='TelosSerialP__msp430_uart_telos_config', quals=[], storage=[] (at pp.c:6910)
    TypeDecl: declname='TelosSerialP__msp430_uart_telos_config', quals=[] (at pp.c:6910)
      IdentifierType: names=['msp430_uart_union_config_t'] (at None)
    ExprList:  (at pp.c:6910)
      ExprList:  (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='ubr' (at pp.c:6910)
          ID: name='UBR_1MHZ_115200' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='umctl' (at pp.c:6910)
          ID: name='UMCTL_1MHZ_115200' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='ssel' (at pp.c:6910)
          Constant: type='int', value='0x02' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='pena' (at pp.c:6910)
          Constant: type='int', value='0' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='pev' (at pp.c:6910)
          Constant: type='int', value='0' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='spb' (at pp.c:6910)
          Constant: type='int', value='0' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='clen' (at pp.c:6910)
          Constant: type='int', value='1' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='listen' (at pp.c:6910)
          Constant: type='int', value='0' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='mm' (at pp.c:6910)
          Constant: type='int', value='0' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='ckpl' (at pp.c:6910)
          Constant: type='int', value='0' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='urxse' (at pp.c:6910)
          Constant: type='int', value='0' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='urxeie' (at pp.c:6910)
          Constant: type='int', value='1' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='urxwie' (at pp.c:6910)
          Constant: type='int', value='0' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='utxe' (at pp.c:6910)
          Constant: type='int', value='1' (at pp.c:6910)
        Assignment: op='=' (at pp.c:6910)
          StructRef: type='.' (at pp.c:6910)
            ID: name='urxe' (at pp.c:6910)
          Constant: type='int', value='1' (at pp.c:6910)
  Decl: name='TelosSerialP__StdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:6912)
    FuncDecl: quals=None (at pp.c:6912)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TelosSerialP__StdControl__start', quals=[] (at pp.c:6912)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='TelosSerialP__StdControl__stop', quals=[], storage=['inline', 'static'] (at pp.c:6915)
    FuncDecl: quals=None (at pp.c:6915)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TelosSerialP__StdControl__stop', quals=[] (at pp.c:6915)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='TelosSerialP__Resource__granted', quals=[], storage=['inline', 'static'] (at pp.c:6919)
    FuncDecl: quals=None (at pp.c:6919)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TelosSerialP__Resource__granted', quals=[] (at pp.c:6919)
        IdentifierType: names=['void'] (at None)
  Decl: name='TelosSerialP__Msp430UartConfigure__getConfig', quals=[], storage=['inline', 'static'] (at pp.c:6921)
    FuncDecl: quals=None (at pp.c:6921)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      PtrDecl: quals=[] (at pp.c:6921)
        TypeDecl: declname='TelosSerialP__Msp430UartConfigure__getConfig', quals=[] (at pp.c:6921)
          IdentifierType: names=['msp430_uart_union_config_t'] (at None)
  Decl: name='SerialPacketInfoActiveMessageP__Info__offset', quals=[], storage=['inline', 'static'] (at pp.c:6923)
    FuncDecl: quals=None (at pp.c:6923)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SerialPacketInfoActiveMessageP__Info__offset', quals=[] (at pp.c:6923)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialPacketInfoActiveMessageP__Info__dataLinkLength', quals=[], storage=['inline', 'static'] (at pp.c:6926)
    FuncDecl: quals=None (at pp.c:6926)
      ParamList:  (at pp.c:6926)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6926)
          PtrDecl: quals=[] (at pp.c:6926)
            TypeDecl: declname='msg', quals=[] (at pp.c:6926)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='upperLen', quals=[], storage=[] (at pp.c:6926)
          TypeDecl: declname='upperLen', quals=[] (at pp.c:6926)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialPacketInfoActiveMessageP__Info__dataLinkLength', quals=[] (at pp.c:6926)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SerialPacketInfoActiveMessageP__Info__upperLength', quals=[], storage=['inline', 'static'] (at pp.c:6929)
    FuncDecl: quals=None (at pp.c:6929)
      ParamList:  (at pp.c:6929)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6929)
          PtrDecl: quals=[] (at pp.c:6929)
            TypeDecl: declname='msg', quals=[] (at pp.c:6929)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='dataLinkLen', quals=[], storage=[] (at pp.c:6929)
          TypeDecl: declname='dataLinkLen', quals=[] (at pp.c:6929)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SerialPacketInfoActiveMessageP__Info__upperLength', quals=[] (at pp.c:6929)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__startDone', quals=[], storage=['static'] (at pp.c:6931)
    FuncDecl: quals=None (at pp.c:6931)
      ParamList:  (at pp.c:6931)
        Decl: name='error', quals=[], storage=[] (at pp.c:6931)
          TypeDecl: declname='error', quals=[] (at pp.c:6931)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__startDone', quals=[] (at pp.c:6931)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__stopDone', quals=[], storage=['static'] (at pp.c:6933)
    FuncDecl: quals=None (at pp.c:6933)
      ParamList:  (at pp.c:6933)
        Decl: name='error', quals=[], storage=[] (at pp.c:6933)
          TypeDecl: declname='error', quals=[] (at pp.c:6933)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__stopDone', quals=[] (at pp.c:6933)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__requestCca', quals=[], storage=['static'] (at pp.c:6935)
    FuncDecl: quals=None (at pp.c:6935)
      ParamList:  (at pp.c:6935)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6935)
          PtrDecl: quals=[] (at pp.c:6935)
            TypeDecl: declname='msg', quals=[] (at pp.c:6935)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestCca', quals=[] (at pp.c:6935)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:6937)
    FuncDecl: quals=None (at pp.c:6937)
      ParamList:  (at pp.c:6937)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6937)
          PtrDecl: quals=[] (at pp.c:6937)
            TypeDecl: declname='msg', quals=[] (at pp.c:6937)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:6937)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:6944)
    FuncDecl: quals=None (at pp.c:6944)
      ParamList:  (at pp.c:6944)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6944)
          PtrDecl: quals=[] (at pp.c:6944)
            TypeDecl: declname='msg', quals=[] (at pp.c:6944)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:6944)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__setCongestionBackoff', quals=[], storage=['static'] (at pp.c:6946)
    FuncDecl: quals=None (at pp.c:6946)
      ParamList:  (at pp.c:6946)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:6946)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:6946)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__setCongestionBackoff', quals=[] (at pp.c:6946)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__setInitialBackoff', quals=[], storage=['static'] (at pp.c:6948)
    FuncDecl: quals=None (at pp.c:6948)
      ParamList:  (at pp.c:6948)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:6948)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:6948)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__setInitialBackoff', quals=[] (at pp.c:6948)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Transmit__send', quals=[], storage=['static'] (at pp.c:6950)
    FuncDecl: quals=None (at pp.c:6950)
      ParamList:  (at pp.c:6950)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:6950)
          PtrDecl: quals=[] (at pp.c:6950)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:6950)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:6950)
          TypeDecl: declname='useCca', quals=[] (at pp.c:6950)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Transmit__send', quals=[] (at pp.c:6950)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Send__sendDone', quals=[], storage=['static'] (at pp.c:6952)
    FuncDecl: quals=None (at pp.c:6952)
      ParamList:  (at pp.c:6954)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6954)
          PtrDecl: quals=[] (at pp.c:6954)
            TypeDecl: declname='msg', quals=[] (at pp.c:6954)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6958)
          TypeDecl: declname='error', quals=[] (at pp.c:6958)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__Send__sendDone', quals=[] (at pp.c:6952)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__Random__rand16', quals=[], storage=['static'] (at pp.c:6960)
    FuncDecl: quals=None (at pp.c:6960)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Random__rand16', quals=[] (at pp.c:6960)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420CsmaP__SubControl__start', quals=[], storage=['static'] (at pp.c:6962)
    FuncDecl: quals=None (at pp.c:6962)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubControl__start', quals=[] (at pp.c:6962)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__SubControl__stop', quals=[], storage=['static'] (at pp.c:6972)
    FuncDecl: quals=None (at pp.c:6972)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubControl__stop', quals=[] (at pp.c:6972)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:6974)
    FuncDecl: quals=None (at pp.c:6974)
      ParamList:  (at pp.c:6974)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6974)
          PtrDecl: quals=[] (at pp.c:6974)
            TypeDecl: declname='msg', quals=[] (at pp.c:6974)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:6974)
        TypeDecl: declname='CC2420CsmaP__CC2420PacketBody__getHeader', quals=[] (at pp.c:6974)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:6985)
    FuncDecl: quals=None (at pp.c:6985)
      ParamList:  (at pp.c:6985)
        Decl: name='msg', quals=[], storage=[] (at pp.c:6985)
          PtrDecl: quals=[] (at pp.c:6985)
            TypeDecl: declname='msg', quals=[] (at pp.c:6985)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:6985)
        TypeDecl: declname='CC2420CsmaP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:6985)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startOscillator', quals=[], storage=['static'] (at pp.c:6987)
    FuncDecl: quals=None (at pp.c:6987)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startOscillator', quals=[] (at pp.c:6987)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__rxOn', quals=[], storage=['static'] (at pp.c:6989)
    FuncDecl: quals=None (at pp.c:6989)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__rxOn', quals=[] (at pp.c:6989)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startVReg', quals=[], storage=['static'] (at pp.c:6991)
    FuncDecl: quals=None (at pp.c:6991)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startVReg', quals=[] (at pp.c:6991)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__stopVReg', quals=[], storage=['static'] (at pp.c:6993)
    FuncDecl: quals=None (at pp.c:6993)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__stopVReg', quals=[] (at pp.c:6993)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Resource__release', quals=[], storage=['static'] (at pp.c:6995)
    FuncDecl: quals=None (at pp.c:6995)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Resource__release', quals=[] (at pp.c:6995)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Resource__request', quals=[], storage=['static'] (at pp.c:6997)
    FuncDecl: quals=None (at pp.c:6997)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Resource__request', quals=[] (at pp.c:6997)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__SplitControlState__isState', quals=[], storage=['static'] (at pp.c:6999)
    FuncDecl: quals=None (at pp.c:6999)
      ParamList:  (at pp.c:6999)
        Decl: name='myState', quals=[], storage=[] (at pp.c:6999)
          TypeDecl: declname='myState', quals=[] (at pp.c:6999)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControlState__isState', quals=[] (at pp.c:6999)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420CsmaP__SplitControlState__requestState', quals=[], storage=['static'] (at pp.c:7001)
    FuncDecl: quals=None (at pp.c:7001)
      ParamList:  (at pp.c:7001)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:7001)
          TypeDecl: declname='reqState', quals=[] (at pp.c:7001)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControlState__requestState', quals=[] (at pp.c:7001)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__SplitControlState__forceState', quals=[], storage=['static'] (at pp.c:7007)
    FuncDecl: quals=None (at pp.c:7007)
      ParamList:  (at pp.c:7007)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:7007)
          TypeDecl: declname='reqState', quals=[] (at pp.c:7007)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControlState__forceState', quals=[] (at pp.c:7007)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__sendDone_task__postTask', quals=[], storage=['static'] (at pp.c:7009)
    FuncDecl: quals=None (at pp.c:7009)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__sendDone_task__postTask', quals=[] (at pp.c:7009)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__stopDone_task__postTask', quals=[], storage=['static'] (at pp.c:7011)
    FuncDecl: quals=None (at pp.c:7011)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__stopDone_task__postTask', quals=[] (at pp.c:7011)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__startDone_task__postTask', quals=[], storage=['static'] (at pp.c:7013)
    FuncDecl: quals=None (at pp.c:7013)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__startDone_task__postTask', quals=[] (at pp.c:7013)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:7015)
    Enum: name='CC2420CsmaP____nesc_unnamed4345' (at pp.c:7015)
      EnumeratorList:  (at pp.c:7017)
        Enumerator: name='CC2420CsmaP__startDone_task' (at pp.c:7017)
          Constant: type='int', value='7U' (at pp.c:7017)
  Typedef: name='CC2420CsmaP____nesc_sillytask_startDone_task', quals=[], storage=['typedef'] (at pp.c:7020)
    ArrayDecl:  (at pp.c:7020)
      TypeDecl: declname='CC2420CsmaP____nesc_sillytask_startDone_task', quals=[] (at pp.c:7020)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420CsmaP__startDone_task' (at pp.c:7020)
  Decl: name=None, quals=[], storage=[] (at pp.c:7021)
    Enum: name='CC2420CsmaP____nesc_unnamed4346' (at pp.c:7021)
      EnumeratorList:  (at pp.c:7023)
        Enumerator: name='CC2420CsmaP__stopDone_task' (at pp.c:7023)
          Constant: type='int', value='8U' (at pp.c:7023)
  Typedef: name='CC2420CsmaP____nesc_sillytask_stopDone_task', quals=[], storage=['typedef'] (at pp.c:7026)
    ArrayDecl:  (at pp.c:7026)
      TypeDecl: declname='CC2420CsmaP____nesc_sillytask_stopDone_task', quals=[] (at pp.c:7026)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420CsmaP__stopDone_task' (at pp.c:7026)
  Decl: name=None, quals=[], storage=[] (at pp.c:7027)
    Enum: name='CC2420CsmaP____nesc_unnamed4347' (at pp.c:7027)
      EnumeratorList:  (at pp.c:7029)
        Enumerator: name='CC2420CsmaP__sendDone_task' (at pp.c:7029)
          Constant: type='int', value='9U' (at pp.c:7029)
  Typedef: name='CC2420CsmaP____nesc_sillytask_sendDone_task', quals=[], storage=['typedef'] (at pp.c:7032)
    ArrayDecl:  (at pp.c:7032)
      TypeDecl: declname='CC2420CsmaP____nesc_sillytask_sendDone_task', quals=[] (at pp.c:7032)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420CsmaP__sendDone_task' (at pp.c:7032)
  Decl: name=None, quals=[], storage=[] (at pp.c:7034)
    Enum: name='CC2420CsmaP____nesc_unnamed4348' (at pp.c:7034)
      EnumeratorList:  (at pp.c:7035)
        Enumerator: name='CC2420CsmaP__S_STOPPED' (at pp.c:7035)
        Enumerator: name='CC2420CsmaP__S_STARTING' (at pp.c:7036)
        Enumerator: name='CC2420CsmaP__S_STARTED' (at pp.c:7037)
        Enumerator: name='CC2420CsmaP__S_STOPPING' (at pp.c:7038)
        Enumerator: name='CC2420CsmaP__S_TRANSMITTING' (at pp.c:7039)
  Decl: name='CC2420CsmaP__m_msg', quals=[], storage=[] (at pp.c:7042)
    PtrDecl: quals=[] (at pp.c:7042)
      TypeDecl: declname='CC2420CsmaP__m_msg', quals=[] (at pp.c:7042)
        IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420CsmaP__sendErr', quals=[], storage=[] (at pp.c:7044)
    TypeDecl: declname='CC2420CsmaP__sendErr', quals=[] (at pp.c:7044)
      IdentifierType: names=['error_t'] (at None)
    ID: name='SUCCESS' (at pp.c:7044)
  Decl: name='CC2420CsmaP__ccaOn', quals=[], storage=[] (at pp.c:7047)
    TypeDecl: declname='CC2420CsmaP__ccaOn', quals=[] (at pp.c:7047)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420CsmaP__shutdown', quals=[], storage=['inline', 'static'] (at pp.c:7054)
    FuncDecl: quals=None (at pp.c:7054)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__shutdown', quals=[] (at pp.c:7054)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__start', quals=[], storage=['static'] (at pp.c:7057)
    FuncDecl: quals=None (at pp.c:7057)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__start', quals=[] (at pp.c:7057)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__stop', quals=[], storage=['static'] (at pp.c:7059)
    FuncDecl: quals=None (at pp.c:7059)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__stop', quals=[] (at pp.c:7059)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:7061)
    FuncDecl: quals=None (at pp.c:7061)
      ParamList:  (at pp.c:7061)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:7061)
          PtrDecl: quals=[] (at pp.c:7061)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:7061)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7061)
          TypeDecl: declname='len', quals=[] (at pp.c:7061)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__Send__send', quals=[] (at pp.c:7061)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:7063)
    FuncDecl: quals=None (at pp.c:7063)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Send__maxPayloadLength', quals=[] (at pp.c:7063)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:7072)
    FuncDecl: quals=None (at pp.c:7072)
      ParamList:  (at pp.c:7072)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:7072)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:7072)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:7072)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:7080)
    FuncDecl: quals=None (at pp.c:7080)
      ParamList:  (at pp.c:7080)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:7080)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:7080)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:7080)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Transmit__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:7082)
    FuncDecl: quals=None (at pp.c:7082)
      ParamList:  (at pp.c:7082)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:7082)
          PtrDecl: quals=[] (at pp.c:7082)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:7082)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:7082)
          TypeDecl: declname='err', quals=[] (at pp.c:7082)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Transmit__sendDone', quals=[] (at pp.c:7082)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startVRegDone', quals=[], storage=['inline', 'static'] (at pp.c:7087)
    FuncDecl: quals=None (at pp.c:7087)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startVRegDone', quals=[] (at pp.c:7087)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__Resource__granted', quals=[], storage=['inline', 'static'] (at pp.c:7091)
    FuncDecl: quals=None (at pp.c:7091)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Resource__granted', quals=[] (at pp.c:7091)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[], storage=['inline', 'static'] (at pp.c:7095)
    FuncDecl: quals=None (at pp.c:7095)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[] (at pp.c:7095)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:7100)
    FuncDecl: quals=None (at pp.c:7100)
      ParamList:  (at pp.c:7100)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7100)
          PtrDecl: quals=[] (at pp.c:7100)
            TypeDecl: declname='msg', quals=[] (at pp.c:7100)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:7100)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:7107)
    FuncDecl: quals=None (at pp.c:7107)
      ParamList:  (at pp.c:7107)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7107)
          PtrDecl: quals=[] (at pp.c:7107)
            TypeDecl: declname='msg', quals=[] (at pp.c:7107)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:7107)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__sendDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7109)
    FuncDecl: quals=None (at pp.c:7109)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__sendDone_task__runTask', quals=[] (at pp.c:7109)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__startDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7111)
    FuncDecl: quals=None (at pp.c:7111)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__startDone_task__runTask', quals=[] (at pp.c:7111)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__stopDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7119)
    FuncDecl: quals=None (at pp.c:7119)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__stopDone_task__runTask', quals=[] (at pp.c:7119)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__shutdown', quals=[], storage=['inline', 'static'] (at pp.c:7129)
    FuncDecl: quals=None (at pp.c:7129)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__shutdown', quals=[] (at pp.c:7129)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__syncDone', quals=[], storage=['static'] (at pp.c:7131)
    FuncDecl: quals=None (at pp.c:7131)
      ParamList:  (at pp.c:7131)
        Decl: name='error', quals=[], storage=[] (at pp.c:7131)
          TypeDecl: declname='error', quals=[] (at pp.c:7131)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__syncDone', quals=[] (at pp.c:7131)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__RXCTRL1__write', quals=[], storage=['static'] (at pp.c:7133)
    FuncDecl: quals=None (at pp.c:7133)
      ParamList:  (at pp.c:7133)
        Decl: name='data', quals=[], storage=[] (at pp.c:7133)
          TypeDecl: declname='data', quals=[] (at pp.c:7133)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__RXCTRL1__write', quals=[] (at pp.c:7133)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__LocalIeeeEui64__getId', quals=[], storage=['static'] (at pp.c:7135)
    FuncDecl: quals=None (at pp.c:7135)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__LocalIeeeEui64__getId', quals=[] (at pp.c:7135)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420ControlP__StartupTimer__start', quals=[], storage=['static'] (at pp.c:7137)
    FuncDecl: quals=None (at pp.c:7137)
      ParamList:  (at pp.c:7137)
        Decl: name='dt', quals=[], storage=[] (at pp.c:7137)
          TypeDecl: declname='dt', quals=[] (at pp.c:7137)
            IdentifierType: names=['CC2420ControlP__StartupTimer__size_type'] (at None)
      TypeDecl: declname='CC2420ControlP__StartupTimer__start', quals=[] (at pp.c:7137)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__MDMCTRL0__write', quals=[], storage=['static'] (at pp.c:7139)
    FuncDecl: quals=None (at pp.c:7139)
      ParamList:  (at pp.c:7139)
        Decl: name='data', quals=[], storage=[] (at pp.c:7139)
          TypeDecl: declname='data', quals=[] (at pp.c:7139)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__MDMCTRL0__write', quals=[] (at pp.c:7139)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__RSTN__makeOutput', quals=[], storage=['static'] (at pp.c:7141)
    FuncDecl: quals=None (at pp.c:7141)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RSTN__makeOutput', quals=[] (at pp.c:7141)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__RSTN__set', quals=[], storage=['static'] (at pp.c:7143)
    FuncDecl: quals=None (at pp.c:7143)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RSTN__set', quals=[] (at pp.c:7143)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__RSTN__clr', quals=[], storage=['static'] (at pp.c:7144)
    FuncDecl: quals=None (at pp.c:7144)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RSTN__clr', quals=[] (at pp.c:7144)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__ReadRssi__readDone', quals=[], storage=['static'] (at pp.c:7146)
    FuncDecl: quals=None (at pp.c:7146)
      ParamList:  (at pp.c:7146)
        Decl: name='result', quals=[], storage=[] (at pp.c:7146)
          TypeDecl: declname='result', quals=[] (at pp.c:7146)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='val', quals=[], storage=[] (at pp.c:7146)
          TypeDecl: declname='val', quals=[] (at pp.c:7146)
            IdentifierType: names=['CC2420ControlP__ReadRssi__val_t'] (at None)
      TypeDecl: declname='CC2420ControlP__ReadRssi__readDone', quals=[] (at pp.c:7146)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__syncDone__postTask', quals=[], storage=['static'] (at pp.c:7148)
    FuncDecl: quals=None (at pp.c:7148)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__syncDone__postTask', quals=[] (at pp.c:7148)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__RSSI__read', quals=[], storage=['static'] (at pp.c:7150)
    FuncDecl: quals=None (at pp.c:7150)
      ParamList:  (at pp.c:7150)
        Decl: name='data', quals=[], storage=[] (at pp.c:7150)
          PtrDecl: quals=[] (at pp.c:7150)
            TypeDecl: declname='data', quals=[] (at pp.c:7150)
              IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__RSSI__read', quals=[] (at pp.c:7150)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__IOCFG0__write', quals=[], storage=['static'] (at pp.c:7158)
    FuncDecl: quals=None (at pp.c:7158)
      ParamList:  (at pp.c:7158)
        Decl: name='data', quals=[], storage=[] (at pp.c:7158)
          TypeDecl: declname='data', quals=[] (at pp.c:7158)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__IOCFG0__write', quals=[] (at pp.c:7158)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__ActiveMessageAddress__amAddress', quals=[], storage=['static'] (at pp.c:7160)
    FuncDecl: quals=None (at pp.c:7160)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__ActiveMessageAddress__amAddress', quals=[] (at pp.c:7160)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ControlP__ActiveMessageAddress__amGroup', quals=[], storage=['static'] (at pp.c:7165)
    FuncDecl: quals=None (at pp.c:7165)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__ActiveMessageAddress__amGroup', quals=[] (at pp.c:7165)
        IdentifierType: names=['am_group_t'] (at None)
  Decl: name='CC2420ControlP__CSN__makeOutput', quals=[], storage=['static'] (at pp.c:7167)
    FuncDecl: quals=None (at pp.c:7167)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CSN__makeOutput', quals=[] (at pp.c:7167)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CSN__set', quals=[], storage=['static'] (at pp.c:7169)
    FuncDecl: quals=None (at pp.c:7169)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CSN__set', quals=[] (at pp.c:7169)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CSN__clr', quals=[], storage=['static'] (at pp.c:7170)
    FuncDecl: quals=None (at pp.c:7170)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CSN__clr', quals=[] (at pp.c:7170)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__VREN__makeOutput', quals=[], storage=['static'] (at pp.c:7175)
    FuncDecl: quals=None (at pp.c:7175)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__VREN__makeOutput', quals=[] (at pp.c:7175)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__VREN__set', quals=[], storage=['static'] (at pp.c:7177)
    FuncDecl: quals=None (at pp.c:7177)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__VREN__set', quals=[] (at pp.c:7177)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__VREN__clr', quals=[], storage=['static'] (at pp.c:7178)
    FuncDecl: quals=None (at pp.c:7178)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__VREN__clr', quals=[] (at pp.c:7178)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__SXOSCON__strobe', quals=[], storage=['static'] (at pp.c:7180)
    FuncDecl: quals=None (at pp.c:7180)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SXOSCON__strobe', quals=[] (at pp.c:7180)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__SpiResource__release', quals=[], storage=['static'] (at pp.c:7182)
    FuncDecl: quals=None (at pp.c:7182)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SpiResource__release', quals=[] (at pp.c:7182)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__SpiResource__request', quals=[], storage=['static'] (at pp.c:7184)
    FuncDecl: quals=None (at pp.c:7184)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SpiResource__request', quals=[] (at pp.c:7184)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__SyncResource__release', quals=[], storage=['static'] (at pp.c:7186)
    FuncDecl: quals=None (at pp.c:7186)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SyncResource__release', quals=[] (at pp.c:7186)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__SyncResource__request', quals=[], storage=['static'] (at pp.c:7188)
    FuncDecl: quals=None (at pp.c:7188)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SyncResource__request', quals=[] (at pp.c:7188)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startOscillatorDone', quals=[], storage=['static'] (at pp.c:7190)
    FuncDecl: quals=None (at pp.c:7190)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startOscillatorDone', quals=[] (at pp.c:7190)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startVRegDone', quals=[], storage=['static'] (at pp.c:7192)
    FuncDecl: quals=None (at pp.c:7192)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startVRegDone', quals=[] (at pp.c:7192)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__IOCFG1__write', quals=[], storage=['static'] (at pp.c:7194)
    FuncDecl: quals=None (at pp.c:7194)
      ParamList:  (at pp.c:7194)
        Decl: name='data', quals=[], storage=[] (at pp.c:7194)
          TypeDecl: declname='data', quals=[] (at pp.c:7194)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__IOCFG1__write', quals=[] (at pp.c:7194)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__FSCTRL__write', quals=[], storage=['static'] (at pp.c:7196)
    FuncDecl: quals=None (at pp.c:7196)
      ParamList:  (at pp.c:7196)
        Decl: name='data', quals=[], storage=[] (at pp.c:7196)
          TypeDecl: declname='data', quals=[] (at pp.c:7196)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__FSCTRL__write', quals=[] (at pp.c:7196)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__SRXON__strobe', quals=[], storage=['static'] (at pp.c:7198)
    FuncDecl: quals=None (at pp.c:7198)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SRXON__strobe', quals=[] (at pp.c:7198)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__Resource__granted', quals=[], storage=['static'] (at pp.c:7200)
    FuncDecl: quals=None (at pp.c:7200)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Resource__granted', quals=[] (at pp.c:7200)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__IEEEADR__write', quals=[], storage=['static'] (at pp.c:7202)
    FuncDecl: quals=None (at pp.c:7202)
      ParamList:  (at pp.c:7202)
        Decl: name='offset', quals=[], storage=[] (at pp.c:7202)
          TypeDecl: declname='offset', quals=[] (at pp.c:7202)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7202)
          PtrDecl: quals=[] (at pp.c:7202)
            TypeDecl: declname='data', quals=[] (at pp.c:7202)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:7202)
          TypeDecl: declname='length', quals=[] (at pp.c:7202)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ControlP__IEEEADR__write', quals=[] (at pp.c:7202)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__InterruptCCA__disable', quals=[], storage=['static'] (at pp.c:7204)
    FuncDecl: quals=None (at pp.c:7204)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__InterruptCCA__disable', quals=[] (at pp.c:7204)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__InterruptCCA__enableRisingEdge', quals=[], storage=['static'] (at pp.c:7206)
    FuncDecl: quals=None (at pp.c:7206)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__InterruptCCA__enableRisingEdge', quals=[] (at pp.c:7206)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__RssiResource__release', quals=[], storage=['static'] (at pp.c:7208)
    FuncDecl: quals=None (at pp.c:7208)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RssiResource__release', quals=[] (at pp.c:7208)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__SRFOFF__strobe', quals=[], storage=['static'] (at pp.c:7210)
    FuncDecl: quals=None (at pp.c:7210)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SRFOFF__strobe', quals=[] (at pp.c:7210)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:7212)
    Enum: name='CC2420ControlP____nesc_unnamed4349' (at pp.c:7212)
      EnumeratorList:  (at pp.c:7214)
        Enumerator: name='CC2420ControlP__sync' (at pp.c:7214)
          Constant: type='int', value='10U' (at pp.c:7214)
  Typedef: name='CC2420ControlP____nesc_sillytask_sync', quals=[], storage=['typedef'] (at pp.c:7217)
    ArrayDecl:  (at pp.c:7217)
      TypeDecl: declname='CC2420ControlP____nesc_sillytask_sync', quals=[] (at pp.c:7217)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420ControlP__sync' (at pp.c:7217)
  Decl: name=None, quals=[], storage=[] (at pp.c:7218)
    Enum: name='CC2420ControlP____nesc_unnamed4350' (at pp.c:7218)
      EnumeratorList:  (at pp.c:7220)
        Enumerator: name='CC2420ControlP__syncDone' (at pp.c:7220)
          Constant: type='int', value='11U' (at pp.c:7220)
  Typedef: name='CC2420ControlP____nesc_sillytask_syncDone', quals=[], storage=['typedef'] (at pp.c:7223)
    ArrayDecl:  (at pp.c:7223)
      TypeDecl: declname='CC2420ControlP____nesc_sillytask_syncDone', quals=[] (at pp.c:7223)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420ControlP__syncDone' (at pp.c:7223)
  Typedef: name='CC2420ControlP__cc2420_control_state_t', quals=[], storage=['typedef'] (at pp.c:7232)
    TypeDecl: declname='CC2420ControlP__cc2420_control_state_t', quals=[] (at pp.c:7232)
      Enum: name='CC2420ControlP____nesc_unnamed4351' (at pp.c:7226)
        EnumeratorList:  (at pp.c:7227)
          Enumerator: name='CC2420ControlP__S_VREG_STOPPED' (at pp.c:7227)
          Enumerator: name='CC2420ControlP__S_VREG_STARTING' (at pp.c:7228)
          Enumerator: name='CC2420ControlP__S_VREG_STARTED' (at pp.c:7229)
          Enumerator: name='CC2420ControlP__S_XOSC_STARTING' (at pp.c:7230)
          Enumerator: name='CC2420ControlP__S_XOSC_STARTED' (at pp.c:7231)
  Decl: name='CC2420ControlP__m_channel', quals=[], storage=[] (at pp.c:7234)
    TypeDecl: declname='CC2420ControlP__m_channel', quals=[] (at pp.c:7234)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ControlP__m_tx_power', quals=[], storage=[] (at pp.c:7236)
    TypeDecl: declname='CC2420ControlP__m_tx_power', quals=[] (at pp.c:7236)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ControlP__m_pan', quals=[], storage=[] (at pp.c:7238)
    TypeDecl: declname='CC2420ControlP__m_pan', quals=[] (at pp.c:7238)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__m_short_addr', quals=[], storage=[] (at pp.c:7240)
    TypeDecl: declname='CC2420ControlP__m_short_addr', quals=[] (at pp.c:7240)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__m_ext_addr', quals=[], storage=[] (at pp.c:7242)
    TypeDecl: declname='CC2420ControlP__m_ext_addr', quals=[] (at pp.c:7242)
      IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420ControlP__m_sync_busy', quals=[], storage=[] (at pp.c:7244)
    TypeDecl: declname='CC2420ControlP__m_sync_busy', quals=[] (at pp.c:7244)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__autoAckEnabled', quals=[], storage=[] (at pp.c:7247)
    TypeDecl: declname='CC2420ControlP__autoAckEnabled', quals=[] (at pp.c:7247)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__hwAutoAckDefault', quals=[], storage=[] (at pp.c:7250)
    TypeDecl: declname='CC2420ControlP__hwAutoAckDefault', quals=[] (at pp.c:7250)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__addressRecognition', quals=[], storage=[] (at pp.c:7253)
    TypeDecl: declname='CC2420ControlP__addressRecognition', quals=[] (at pp.c:7253)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__hwAddressRecognition', quals=[], storage=[] (at pp.c:7256)
    TypeDecl: declname='CC2420ControlP__hwAddressRecognition', quals=[] (at pp.c:7256)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__m_state', quals=[], storage=[] (at pp.c:7258)
    TypeDecl: declname='CC2420ControlP__m_state', quals=[] (at pp.c:7258)
      IdentifierType: names=['CC2420ControlP__cc2420_control_state_t'] (at None)
    ID: name='CC2420ControlP__S_VREG_STOPPED' (at pp.c:7258)
  Decl: name='CC2420ControlP__writeFsctrl', quals=[], storage=['static'] (at pp.c:7262)
    FuncDecl: quals=None (at pp.c:7262)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeFsctrl', quals=[] (at pp.c:7262)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__writeMdmctrl0', quals=[], storage=['static'] (at pp.c:7263)
    FuncDecl: quals=None (at pp.c:7263)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeMdmctrl0', quals=[] (at pp.c:7263)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__writeId', quals=[], storage=['static'] (at pp.c:7264)
    FuncDecl: quals=None (at pp.c:7264)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeId', quals=[] (at pp.c:7264)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:7270)
    FuncDecl: quals=None (at pp.c:7270)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Init__init', quals=[] (at pp.c:7270)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:7272)
    FuncDecl: quals=None (at pp.c:7272)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Resource__request', quals=[] (at pp.c:7272)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:7280)
    FuncDecl: quals=None (at pp.c:7280)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Resource__release', quals=[] (at pp.c:7280)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startVReg', quals=[], storage=['inline', 'static'] (at pp.c:7288)
    FuncDecl: quals=None (at pp.c:7288)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startVReg', quals=[] (at pp.c:7288)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__stopVReg', quals=[], storage=['static'] (at pp.c:7290)
    FuncDecl: quals=None (at pp.c:7290)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__stopVReg', quals=[] (at pp.c:7290)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startOscillator', quals=[], storage=['inline', 'static'] (at pp.c:7298)
    FuncDecl: quals=None (at pp.c:7298)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startOscillator', quals=[] (at pp.c:7298)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__rxOn', quals=[], storage=['inline', 'static'] (at pp.c:7300)
    FuncDecl: quals=None (at pp.c:7300)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__rxOn', quals=[] (at pp.c:7300)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getExtAddr', quals=[], storage=['inline', 'static'] (at pp.c:7302)
    FuncDecl: quals=None (at pp.c:7302)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getExtAddr', quals=[] (at pp.c:7302)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getShortAddr', quals=[], storage=['static'] (at pp.c:7306)
    FuncDecl: quals=None (at pp.c:7306)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getShortAddr', quals=[] (at pp.c:7306)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getPanAddr', quals=[], storage=['inline', 'static'] (at pp.c:7314)
    FuncDecl: quals=None (at pp.c:7314)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getPanAddr', quals=[] (at pp.c:7314)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__sync', quals=[], storage=['inline', 'static'] (at pp.c:7316)
    FuncDecl: quals=None (at pp.c:7316)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__sync', quals=[] (at pp.c:7316)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[], storage=['inline', 'static'] (at pp.c:7318)
    FuncDecl: quals=None (at pp.c:7318)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[] (at pp.c:7318)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[], storage=['inline', 'static'] (at pp.c:7320)
    FuncDecl: quals=None (at pp.c:7320)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[] (at pp.c:7320)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[], storage=['inline', 'static'] (at pp.c:7327)
    FuncDecl: quals=None (at pp.c:7327)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[] (at pp.c:7327)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__SyncResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:7337)
    FuncDecl: quals=None (at pp.c:7337)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SyncResource__granted', quals=[] (at pp.c:7337)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:7339)
    FuncDecl: quals=None (at pp.c:7339)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SpiResource__granted', quals=[] (at pp.c:7339)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__RssiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:7344)
    FuncDecl: quals=None (at pp.c:7344)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RssiResource__granted', quals=[] (at pp.c:7344)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__StartupTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:7346)
    FuncDecl: quals=None (at pp.c:7346)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__StartupTimer__fired', quals=[] (at pp.c:7346)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__InterruptCCA__fired', quals=[], storage=['inline', 'static'] (at pp.c:7356)
    FuncDecl: quals=None (at pp.c:7356)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__InterruptCCA__fired', quals=[] (at pp.c:7356)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__sync__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7358)
    FuncDecl: quals=None (at pp.c:7358)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__sync__runTask', quals=[] (at pp.c:7358)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__syncDone__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7362)
    FuncDecl: quals=None (at pp.c:7362)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__syncDone__runTask', quals=[] (at pp.c:7362)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__writeFsctrl', quals=[], storage=['static'] (at pp.c:7372)
    FuncDecl: quals=None (at pp.c:7372)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeFsctrl', quals=[] (at pp.c:7372)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__writeMdmctrl0', quals=[], storage=['static'] (at pp.c:7374)
    FuncDecl: quals=None (at pp.c:7374)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeMdmctrl0', quals=[] (at pp.c:7374)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__writeId', quals=[], storage=['static'] (at pp.c:7376)
    FuncDecl: quals=None (at pp.c:7376)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeId', quals=[] (at pp.c:7376)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__ReadRssi__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:7378)
    FuncDecl: quals=None (at pp.c:7378)
      ParamList:  (at pp.c:7378)
        Decl: name='error', quals=[], storage=[] (at pp.c:7378)
          TypeDecl: declname='error', quals=[] (at pp.c:7378)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7378)
          TypeDecl: declname='data', quals=[] (at pp.c:7378)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__ReadRssi__default__readDone', quals=[] (at pp.c:7378)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Compare__setEvent', quals=[], storage=['static'] (at pp.c:7380)
    FuncDecl: quals=None (at pp.c:7380)
      ParamList:  (at pp.c:7380)
        Decl: name='time', quals=[], storage=[] (at pp.c:7380)
          TypeDecl: declname='time', quals=[] (at pp.c:7380)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__setEvent', quals=[] (at pp.c:7380)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Compare__setEventFromNow', quals=[], storage=['static'] (at pp.c:7382)
    FuncDecl: quals=None (at pp.c:7382)
      ParamList:  (at pp.c:7382)
        Decl: name='delta', quals=[], storage=[] (at pp.c:7382)
          TypeDecl: declname='delta', quals=[] (at pp.c:7382)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__setEventFromNow', quals=[] (at pp.c:7382)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Timer__get', quals=[], storage=['static'] (at pp.c:7384)
    FuncDecl: quals=None (at pp.c:7384)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Timer__get', quals=[] (at pp.c:7384)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430AlarmC__0__Alarm__fired', quals=[], storage=['static'] (at pp.c:7386)
    FuncDecl: quals=None (at pp.c:7386)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Alarm__fired', quals=[] (at pp.c:7386)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430TimerControl__enableEvents', quals=[], storage=['static'] (at pp.c:7388)
    FuncDecl: quals=None (at pp.c:7388)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__enableEvents', quals=[] (at pp.c:7388)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430TimerControl__setControlAsCompare', quals=[], storage=['static'] (at pp.c:7390)
    FuncDecl: quals=None (at pp.c:7390)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__setControlAsCompare', quals=[] (at pp.c:7390)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430TimerControl__disableEvents', quals=[], storage=['static'] (at pp.c:7401)
    FuncDecl: quals=None (at pp.c:7401)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__disableEvents', quals=[] (at pp.c:7401)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:7403)
    FuncDecl: quals=None (at pp.c:7403)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:7403)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:7405)
    FuncDecl: quals=None (at pp.c:7405)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Init__init', quals=[] (at pp.c:7405)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430AlarmC__0__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:7407)
    FuncDecl: quals=None (at pp.c:7407)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Alarm__stop', quals=[] (at pp.c:7407)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Compare__fired', quals=[], storage=['inline', 'static'] (at pp.c:7412)
    FuncDecl: quals=None (at pp.c:7412)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__fired', quals=[] (at pp.c:7412)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Alarm__startAt', quals=[], storage=['inline', 'static'] (at pp.c:7423)
    FuncDecl: quals=None (at pp.c:7423)
      ParamList:  (at pp.c:7423)
        Decl: name='t0', quals=[], storage=[] (at pp.c:7423)
          TypeDecl: declname='t0', quals=[] (at pp.c:7423)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:7423)
          TypeDecl: declname='dt', quals=[] (at pp.c:7423)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Alarm__startAt', quals=[] (at pp.c:7423)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:7425)
    FuncDecl: quals=None (at pp.c:7425)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Timer__overflow', quals=[] (at pp.c:7425)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__0__CounterFrom__get', quals=[], storage=['static'] (at pp.c:7427)
    FuncDecl: quals=None (at pp.c:7427)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__CounterFrom__get', quals=[] (at pp.c:7427)
        IdentifierType: names=['TransformCounterC__0__CounterFrom__size_type'] (at None)
  Decl: name='TransformCounterC__0__CounterFrom__isOverflowPending', quals=[], storage=['static'] (at pp.c:7434)
    FuncDecl: quals=None (at pp.c:7434)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__CounterFrom__isOverflowPending', quals=[] (at pp.c:7434)
        IdentifierType: names=['bool'] (at None)
  Decl: name='TransformCounterC__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:7445)
    FuncDecl: quals=None (at pp.c:7445)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__Counter__overflow', quals=[] (at pp.c:7445)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__0__m_upper', quals=[], storage=[] (at pp.c:7447)
    TypeDecl: declname='TransformCounterC__0__m_upper', quals=[] (at pp.c:7447)
      IdentifierType: names=['TransformCounterC__0__upper_count_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:7449)
    Enum: name='TransformCounterC__0____nesc_unnamed4352' (at pp.c:7449)
      EnumeratorList:  (at pp.c:7451)
        Enumerator: name='TransformCounterC__0__LOW_SHIFT_RIGHT' (at pp.c:7451)
          Constant: type='int', value='0' (at pp.c:7451)
        Enumerator: name='TransformCounterC__0__HIGH_SHIFT_LEFT' (at pp.c:7452)
          BinaryOp: op='-' (at pp.c:7452)
            BinaryOp: op='*' (at pp.c:7452)
              Constant: type='int', value='8' (at pp.c:7452)
              UnaryOp: op='sizeof' (at pp.c:7452)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['TransformCounterC__0__from_size_type'] (at None)
            ID: name='TransformCounterC__0__LOW_SHIFT_RIGHT' (at pp.c:7452)
        Enumerator: name='TransformCounterC__0__NUM_UPPER_BITS' (at pp.c:7453)
          BinaryOp: op='+' (at pp.c:7453)
            BinaryOp: op='-' (at pp.c:7453)
              BinaryOp: op='*' (at pp.c:7453)
                Constant: type='int', value='8' (at pp.c:7453)
                UnaryOp: op='sizeof' (at pp.c:7453)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
              BinaryOp: op='*' (at pp.c:7453)
                Constant: type='int', value='8' (at pp.c:7453)
                UnaryOp: op='sizeof' (at pp.c:7453)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__0__from_size_type'] (at None)
            Constant: type='int', value='0' (at pp.c:7453)
        Enumerator: name='TransformCounterC__0__OVERFLOW_MASK' (at pp.c:7457)
          TernaryOp:  (at pp.c:7457)
            ID: name='TransformCounterC__0__NUM_UPPER_BITS' (at pp.c:7457)
            BinaryOp: op='-' (at None)
              BinaryOp: op='<<' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__0__upper_count_type'] (at None)
                  Constant: type='int', value='2' (at pp.c:7457)
                BinaryOp: op='-' (at pp.c:7457)
                  ID: name='TransformCounterC__0__NUM_UPPER_BITS' (at pp.c:7457)
                  Constant: type='int', value='1' (at pp.c:7457)
              Constant: type='int', value='1' (at pp.c:7457)
            Constant: type='int', value='0' (at pp.c:7457)
  Decl: name='TransformCounterC__0__Counter__get', quals=[], storage=['static'] (at pp.c:7460)
    FuncDecl: quals=None (at pp.c:7460)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__Counter__get', quals=[] (at pp.c:7460)
        IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
  Decl: name='TransformCounterC__0__CounterFrom__overflow', quals=[], storage=['inline', 'static'] (at pp.c:7462)
    FuncDecl: quals=None (at pp.c:7462)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__CounterFrom__overflow', quals=[] (at pp.c:7462)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__fired', quals=[], storage=['static'] (at pp.c:7464)
    FuncDecl: quals=None (at pp.c:7464)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__fired', quals=[] (at pp.c:7464)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__AlarmFrom__startAt', quals=[], storage=['static'] (at pp.c:7466)
    FuncDecl: quals=None (at pp.c:7466)
      ParamList:  (at pp.c:7466)
        Decl: name='t0', quals=[], storage=[] (at pp.c:7466)
          TypeDecl: declname='t0', quals=[] (at pp.c:7466)
            IdentifierType: names=['TransformAlarmC__0__AlarmFrom__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:7466)
          TypeDecl: declname='dt', quals=[] (at pp.c:7466)
            IdentifierType: names=['TransformAlarmC__0__AlarmFrom__size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__0__AlarmFrom__startAt', quals=[] (at pp.c:7466)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__AlarmFrom__stop', quals=[], storage=['static'] (at pp.c:7468)
    FuncDecl: quals=None (at pp.c:7468)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__AlarmFrom__stop', quals=[] (at pp.c:7468)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Counter__get', quals=[], storage=['static'] (at pp.c:7470)
    FuncDecl: quals=None (at pp.c:7470)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Counter__get', quals=[] (at pp.c:7470)
        IdentifierType: names=['TransformAlarmC__0__Counter__size_type'] (at None)
  Decl: name='TransformAlarmC__0__m_t0', quals=[], storage=[] (at pp.c:7472)
    TypeDecl: declname='TransformAlarmC__0__m_t0', quals=[] (at pp.c:7472)
      IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Decl: name='TransformAlarmC__0__m_dt', quals=[], storage=[] (at pp.c:7473)
    TypeDecl: declname='TransformAlarmC__0__m_dt', quals=[] (at pp.c:7473)
      IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:7475)
    Enum: name='TransformAlarmC__0____nesc_unnamed4353' (at pp.c:7475)
      EnumeratorList:  (at pp.c:7477)
        Enumerator: name='TransformAlarmC__0__MAX_DELAY_LOG2' (at pp.c:7477)
          BinaryOp: op='-' (at pp.c:7477)
            BinaryOp: op='-' (at pp.c:7477)
              BinaryOp: op='*' (at pp.c:7477)
                Constant: type='int', value='8' (at pp.c:7477)
                UnaryOp: op='sizeof' (at pp.c:7477)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformAlarmC__0__from_size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:7477)
            Constant: type='int', value='0' (at pp.c:7477)
        Enumerator: name='TransformAlarmC__0__MAX_DELAY' (at pp.c:7478)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:7478)
            ID: name='TransformAlarmC__0__MAX_DELAY_LOG2' (at pp.c:7478)
  Decl: name='TransformAlarmC__0__Alarm__getNow', quals=[], storage=['inline', 'static'] (at pp.c:7481)
    FuncDecl: quals=None (at pp.c:7481)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__getNow', quals=[] (at pp.c:7481)
        IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:7483)
    FuncDecl: quals=None (at pp.c:7483)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__stop', quals=[] (at pp.c:7483)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__set_alarm', quals=[], storage=['static'] (at pp.c:7488)
    FuncDecl: quals=None (at pp.c:7488)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__set_alarm', quals=[] (at pp.c:7488)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__startAt', quals=[], storage=['static'] (at pp.c:7490)
    FuncDecl: quals=None (at pp.c:7490)
      ParamList:  (at pp.c:7490)
        Decl: name='t0', quals=[], storage=[] (at pp.c:7490)
          TypeDecl: declname='t0', quals=[] (at pp.c:7490)
            IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:7490)
          TypeDecl: declname='dt', quals=[] (at pp.c:7490)
            IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__startAt', quals=[] (at pp.c:7490)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__start', quals=[], storage=['inline', 'static'] (at pp.c:7500)
    FuncDecl: quals=None (at pp.c:7500)
      ParamList:  (at pp.c:7500)
        Decl: name='dt', quals=[], storage=[] (at pp.c:7500)
          TypeDecl: declname='dt', quals=[] (at pp.c:7500)
            IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__start', quals=[] (at pp.c:7500)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__AlarmFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:7505)
    FuncDecl: quals=None (at pp.c:7505)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__AlarmFrom__fired', quals=[] (at pp.c:7505)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:7507)
    FuncDecl: quals=None (at pp.c:7507)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Counter__overflow', quals=[] (at pp.c:7507)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__HplGeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:7509)
    FuncDecl: quals=None (at pp.c:7509)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__HplGeneralIO__makeInput', quals=[] (at pp.c:7509)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__HplGeneralIO__get', quals=[], storage=['static'] (at pp.c:7511)
    FuncDecl: quals=None (at pp.c:7511)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__HplGeneralIO__get', quals=[] (at pp.c:7511)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__3__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:7513)
    FuncDecl: quals=None (at pp.c:7513)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__GeneralIO__get', quals=[] (at pp.c:7513)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__3__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:7514)
    FuncDecl: quals=None (at pp.c:7514)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__GeneralIO__makeInput', quals=[] (at pp.c:7514)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:7516)
    FuncDecl: quals=None (at pp.c:7516)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__HplGeneralIO__makeOutput', quals=[] (at pp.c:7516)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:7518)
    FuncDecl: quals=None (at pp.c:7518)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__HplGeneralIO__set', quals=[] (at pp.c:7518)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:7523)
    FuncDecl: quals=None (at pp.c:7523)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__HplGeneralIO__clr', quals=[] (at pp.c:7523)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:7525)
    FuncDecl: quals=None (at pp.c:7525)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__GeneralIO__set', quals=[] (at pp.c:7525)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:7526)
    FuncDecl: quals=None (at pp.c:7526)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__GeneralIO__clr', quals=[] (at pp.c:7526)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7531)
    FuncDecl: quals=None (at pp.c:7531)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__GeneralIO__makeOutput', quals=[] (at pp.c:7531)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__5__HplGeneralIO__get', quals=[], storage=['static'] (at pp.c:7533)
    FuncDecl: quals=None (at pp.c:7533)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__5__HplGeneralIO__get', quals=[] (at pp.c:7533)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__5__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:7535)
    FuncDecl: quals=None (at pp.c:7535)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__5__GeneralIO__get', quals=[] (at pp.c:7535)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__6__HplGeneralIO__get', quals=[], storage=['static'] (at pp.c:7537)
    FuncDecl: quals=None (at pp.c:7537)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__HplGeneralIO__get', quals=[] (at pp.c:7537)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__6__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:7539)
    FuncDecl: quals=None (at pp.c:7539)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__GeneralIO__get', quals=[] (at pp.c:7539)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__7__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:7541)
    FuncDecl: quals=None (at pp.c:7541)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__HplGeneralIO__makeOutput', quals=[] (at pp.c:7541)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__7__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:7543)
    FuncDecl: quals=None (at pp.c:7543)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__HplGeneralIO__set', quals=[] (at pp.c:7543)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__7__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:7548)
    FuncDecl: quals=None (at pp.c:7548)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__HplGeneralIO__clr', quals=[] (at pp.c:7548)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__7__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:7550)
    FuncDecl: quals=None (at pp.c:7550)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__GeneralIO__set', quals=[] (at pp.c:7550)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__7__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:7551)
    FuncDecl: quals=None (at pp.c:7551)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__GeneralIO__clr', quals=[] (at pp.c:7551)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__7__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7556)
    FuncDecl: quals=None (at pp.c:7556)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__GeneralIO__makeOutput', quals=[] (at pp.c:7556)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__8__HplGeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:7558)
    FuncDecl: quals=None (at pp.c:7558)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__8__HplGeneralIO__makeInput', quals=[] (at pp.c:7558)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__8__HplGeneralIO__get', quals=[], storage=['static'] (at pp.c:7560)
    FuncDecl: quals=None (at pp.c:7560)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__8__HplGeneralIO__get', quals=[] (at pp.c:7560)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__8__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:7562)
    FuncDecl: quals=None (at pp.c:7562)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__8__GeneralIO__get', quals=[] (at pp.c:7562)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__8__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:7563)
    FuncDecl: quals=None (at pp.c:7563)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__8__GeneralIO__makeInput', quals=[] (at pp.c:7563)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:7565)
    FuncDecl: quals=None (at pp.c:7565)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__makeOutput', quals=[] (at pp.c:7565)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:7567)
    FuncDecl: quals=None (at pp.c:7567)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__set', quals=[] (at pp.c:7567)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:7572)
    FuncDecl: quals=None (at pp.c:7572)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__clr', quals=[] (at pp.c:7572)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:7574)
    FuncDecl: quals=None (at pp.c:7574)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__set', quals=[] (at pp.c:7574)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:7575)
    FuncDecl: quals=None (at pp.c:7575)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__clr', quals=[] (at pp.c:7575)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7580)
    FuncDecl: quals=None (at pp.c:7580)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__makeOutput', quals=[] (at pp.c:7580)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430Capture__clearOverflow', quals=[], storage=['static'] (at pp.c:7582)
    FuncDecl: quals=None (at pp.c:7582)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430Capture__clearOverflow', quals=[] (at pp.c:7582)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Capture__captured', quals=[], storage=['static'] (at pp.c:7584)
    FuncDecl: quals=None (at pp.c:7584)
      ParamList:  (at pp.c:7584)
        Decl: name='time', quals=[], storage=[] (at pp.c:7584)
          TypeDecl: declname='time', quals=[] (at pp.c:7584)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__captured', quals=[] (at pp.c:7584)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430TimerControl__setControlAsCapture', quals=[], storage=['static'] (at pp.c:7586)
    FuncDecl: quals=None (at pp.c:7586)
      ParamList:  (at pp.c:7586)
        Decl: name='cm', quals=[], storage=[] (at pp.c:7586)
          TypeDecl: declname='cm', quals=[] (at pp.c:7586)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__setControlAsCapture', quals=[] (at pp.c:7586)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430TimerControl__enableEvents', quals=[], storage=['static'] (at pp.c:7588)
    FuncDecl: quals=None (at pp.c:7588)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__enableEvents', quals=[] (at pp.c:7588)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430TimerControl__disableEvents', quals=[], storage=['static'] (at pp.c:7589)
    FuncDecl: quals=None (at pp.c:7589)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__disableEvents', quals=[] (at pp.c:7589)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:7591)
    FuncDecl: quals=None (at pp.c:7591)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:7591)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__GeneralIO__selectIOFunc', quals=[], storage=['static'] (at pp.c:7593)
    FuncDecl: quals=None (at pp.c:7593)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__GeneralIO__selectIOFunc', quals=[] (at pp.c:7593)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__GeneralIO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:7595)
    FuncDecl: quals=None (at pp.c:7595)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__GeneralIO__selectModuleFunc', quals=[] (at pp.c:7595)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__enableCapture', quals=[], storage=['static'] (at pp.c:7597)
    FuncDecl: quals=None (at pp.c:7597)
      ParamList:  (at pp.c:7597)
        Decl: name='mode', quals=[], storage=[] (at pp.c:7597)
          TypeDecl: declname='mode', quals=[] (at pp.c:7597)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='GpioCaptureC__0__enableCapture', quals=[] (at pp.c:7597)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='GpioCaptureC__0__Capture__captureRisingEdge', quals=[], storage=['inline', 'static'] (at pp.c:7599)
    FuncDecl: quals=None (at pp.c:7599)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__captureRisingEdge', quals=[] (at pp.c:7599)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='GpioCaptureC__0__Capture__captureFallingEdge', quals=[], storage=['inline', 'static'] (at pp.c:7603)
    FuncDecl: quals=None (at pp.c:7603)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__captureFallingEdge', quals=[] (at pp.c:7603)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='GpioCaptureC__0__Capture__disable', quals=[], storage=['inline', 'static'] (at pp.c:7607)
    FuncDecl: quals=None (at pp.c:7607)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__disable', quals=[] (at pp.c:7607)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430Capture__captured', quals=[], storage=['inline', 'static'] (at pp.c:7614)
    FuncDecl: quals=None (at pp.c:7614)
      ParamList:  (at pp.c:7614)
        Decl: name='time', quals=[], storage=[] (at pp.c:7614)
          TypeDecl: declname='time', quals=[] (at pp.c:7614)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430Capture__captured', quals=[] (at pp.c:7614)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__fired', quals=[], storage=['static'] (at pp.c:7616)
    FuncDecl: quals=None (at pp.c:7616)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__fired', quals=[] (at pp.c:7616)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port26__fired', quals=[], storage=['static'] (at pp.c:7618)
    FuncDecl: quals=None (at pp.c:7618)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port26__fired', quals=[] (at pp.c:7618)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port17__fired', quals=[], storage=['static'] (at pp.c:7620)
    FuncDecl: quals=None (at pp.c:7620)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port17__fired', quals=[] (at pp.c:7620)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port21__fired', quals=[], storage=['static'] (at pp.c:7622)
    FuncDecl: quals=None (at pp.c:7622)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port21__fired', quals=[] (at pp.c:7622)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port12__fired', quals=[], storage=['static'] (at pp.c:7624)
    FuncDecl: quals=None (at pp.c:7624)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port12__fired', quals=[] (at pp.c:7624)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port24__fired', quals=[], storage=['static'] (at pp.c:7626)
    FuncDecl: quals=None (at pp.c:7626)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port24__fired', quals=[] (at pp.c:7626)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port15__fired', quals=[], storage=['static'] (at pp.c:7628)
    FuncDecl: quals=None (at pp.c:7628)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port15__fired', quals=[] (at pp.c:7628)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port27__fired', quals=[], storage=['static'] (at pp.c:7630)
    FuncDecl: quals=None (at pp.c:7630)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port27__fired', quals=[] (at pp.c:7630)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__fired', quals=[], storage=['static'] (at pp.c:7632)
    FuncDecl: quals=None (at pp.c:7632)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__fired', quals=[] (at pp.c:7632)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port22__fired', quals=[], storage=['static'] (at pp.c:7634)
    FuncDecl: quals=None (at pp.c:7634)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port22__fired', quals=[] (at pp.c:7634)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port13__fired', quals=[], storage=['static'] (at pp.c:7636)
    FuncDecl: quals=None (at pp.c:7636)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port13__fired', quals=[] (at pp.c:7636)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port25__fired', quals=[], storage=['static'] (at pp.c:7638)
    FuncDecl: quals=None (at pp.c:7638)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port25__fired', quals=[] (at pp.c:7638)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port16__fired', quals=[], storage=['static'] (at pp.c:7640)
    FuncDecl: quals=None (at pp.c:7640)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port16__fired', quals=[] (at pp.c:7640)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port20__fired', quals=[], storage=['static'] (at pp.c:7642)
    FuncDecl: quals=None (at pp.c:7642)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port20__fired', quals=[] (at pp.c:7642)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port11__fired', quals=[], storage=['static'] (at pp.c:7644)
    FuncDecl: quals=None (at pp.c:7644)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port11__fired', quals=[] (at pp.c:7644)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port23__fired', quals=[], storage=['static'] (at pp.c:7646)
    FuncDecl: quals=None (at pp.c:7646)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port23__fired', quals=[] (at pp.c:7646)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_PORT1_VECTOR', quals=[], storage=[] (at pp.c:7648)
    FuncDecl: quals=None (at pp.c:7648)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_PORT1_VECTOR', quals=[] (at pp.c:7648)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port11__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7650)
    FuncDecl: quals=None (at pp.c:7650)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port11__default__fired', quals=[] (at pp.c:7650)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port12__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7651)
    FuncDecl: quals=None (at pp.c:7651)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port12__default__fired', quals=[] (at pp.c:7651)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port13__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7652)
    FuncDecl: quals=None (at pp.c:7652)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port13__default__fired', quals=[] (at pp.c:7652)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port15__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7654)
    FuncDecl: quals=None (at pp.c:7654)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port15__default__fired', quals=[] (at pp.c:7654)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port16__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7655)
    FuncDecl: quals=None (at pp.c:7655)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port16__default__fired', quals=[] (at pp.c:7655)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port17__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7656)
    FuncDecl: quals=None (at pp.c:7656)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port17__default__fired', quals=[] (at pp.c:7656)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__enable', quals=[], storage=['inline', 'static'] (at pp.c:7657)
    FuncDecl: quals=None (at pp.c:7657)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__enable', quals=[] (at pp.c:7657)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__enable', quals=[], storage=['inline', 'static'] (at pp.c:7661)
    FuncDecl: quals=None (at pp.c:7661)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__enable', quals=[] (at pp.c:7661)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__disable', quals=[], storage=['inline', 'static'] (at pp.c:7665)
    FuncDecl: quals=None (at pp.c:7665)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__disable', quals=[] (at pp.c:7665)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__disable', quals=[], storage=['inline', 'static'] (at pp.c:7669)
    FuncDecl: quals=None (at pp.c:7669)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__disable', quals=[] (at pp.c:7669)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__clear', quals=[], storage=['inline', 'static'] (at pp.c:7673)
    FuncDecl: quals=None (at pp.c:7673)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__clear', quals=[] (at pp.c:7673)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port11__clear', quals=[], storage=['inline', 'static'] (at pp.c:7674)
    FuncDecl: quals=None (at pp.c:7674)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port11__clear', quals=[] (at pp.c:7674)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port12__clear', quals=[], storage=['inline', 'static'] (at pp.c:7675)
    FuncDecl: quals=None (at pp.c:7675)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port12__clear', quals=[] (at pp.c:7675)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port13__clear', quals=[], storage=['inline', 'static'] (at pp.c:7676)
    FuncDecl: quals=None (at pp.c:7676)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port13__clear', quals=[] (at pp.c:7676)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__clear', quals=[], storage=['inline', 'static'] (at pp.c:7677)
    FuncDecl: quals=None (at pp.c:7677)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__clear', quals=[] (at pp.c:7677)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port15__clear', quals=[], storage=['inline', 'static'] (at pp.c:7678)
    FuncDecl: quals=None (at pp.c:7678)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port15__clear', quals=[] (at pp.c:7678)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port16__clear', quals=[], storage=['inline', 'static'] (at pp.c:7679)
    FuncDecl: quals=None (at pp.c:7679)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port16__clear', quals=[] (at pp.c:7679)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port17__clear', quals=[], storage=['inline', 'static'] (at pp.c:7680)
    FuncDecl: quals=None (at pp.c:7680)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port17__clear', quals=[] (at pp.c:7680)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__edge', quals=[], storage=['inline', 'static'] (at pp.c:7689)
    FuncDecl: quals=None (at pp.c:7689)
      ParamList:  (at pp.c:7689)
        Decl: name='l2h', quals=[], storage=[] (at pp.c:7689)
          TypeDecl: declname='l2h', quals=[] (at pp.c:7689)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__edge', quals=[] (at pp.c:7689)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__edge', quals=[], storage=['inline', 'static'] (at pp.c:7691)
    FuncDecl: quals=None (at pp.c:7691)
      ParamList:  (at pp.c:7691)
        Decl: name='l2h', quals=[], storage=[] (at pp.c:7691)
          TypeDecl: declname='l2h', quals=[] (at pp.c:7691)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__edge', quals=[] (at pp.c:7691)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_PORT2_VECTOR', quals=[], storage=[] (at pp.c:7693)
    FuncDecl: quals=None (at pp.c:7693)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_PORT2_VECTOR', quals=[] (at pp.c:7693)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port20__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7695)
    FuncDecl: quals=None (at pp.c:7695)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port20__default__fired', quals=[] (at pp.c:7695)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port21__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7696)
    FuncDecl: quals=None (at pp.c:7696)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port21__default__fired', quals=[] (at pp.c:7696)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port22__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7697)
    FuncDecl: quals=None (at pp.c:7697)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port22__default__fired', quals=[] (at pp.c:7697)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port23__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7698)
    FuncDecl: quals=None (at pp.c:7698)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port23__default__fired', quals=[] (at pp.c:7698)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port24__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7699)
    FuncDecl: quals=None (at pp.c:7699)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port24__default__fired', quals=[] (at pp.c:7699)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port25__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7700)
    FuncDecl: quals=None (at pp.c:7700)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port25__default__fired', quals=[] (at pp.c:7700)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port26__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7701)
    FuncDecl: quals=None (at pp.c:7701)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port26__default__fired', quals=[] (at pp.c:7701)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port27__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7702)
    FuncDecl: quals=None (at pp.c:7702)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port27__default__fired', quals=[] (at pp.c:7702)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port20__clear', quals=[], storage=['inline', 'static'] (at pp.c:7704)
    FuncDecl: quals=None (at pp.c:7704)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port20__clear', quals=[] (at pp.c:7704)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port21__clear', quals=[], storage=['inline', 'static'] (at pp.c:7705)
    FuncDecl: quals=None (at pp.c:7705)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port21__clear', quals=[] (at pp.c:7705)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port22__clear', quals=[], storage=['inline', 'static'] (at pp.c:7706)
    FuncDecl: quals=None (at pp.c:7706)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port22__clear', quals=[] (at pp.c:7706)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port23__clear', quals=[], storage=['inline', 'static'] (at pp.c:7707)
    FuncDecl: quals=None (at pp.c:7707)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port23__clear', quals=[] (at pp.c:7707)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port24__clear', quals=[], storage=['inline', 'static'] (at pp.c:7708)
    FuncDecl: quals=None (at pp.c:7708)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port24__clear', quals=[] (at pp.c:7708)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port25__clear', quals=[], storage=['inline', 'static'] (at pp.c:7709)
    FuncDecl: quals=None (at pp.c:7709)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port25__clear', quals=[] (at pp.c:7709)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port26__clear', quals=[], storage=['inline', 'static'] (at pp.c:7710)
    FuncDecl: quals=None (at pp.c:7710)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port26__clear', quals=[] (at pp.c:7710)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port27__clear', quals=[], storage=['inline', 'static'] (at pp.c:7711)
    FuncDecl: quals=None (at pp.c:7711)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port27__clear', quals=[] (at pp.c:7711)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__clear', quals=[], storage=['static'] (at pp.c:7713)
    FuncDecl: quals=None (at pp.c:7713)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__clear', quals=[] (at pp.c:7713)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__disable', quals=[], storage=['static'] (at pp.c:7715)
    FuncDecl: quals=None (at pp.c:7715)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__disable', quals=[] (at pp.c:7715)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__edge', quals=[], storage=['static'] (at pp.c:7717)
    FuncDecl: quals=None (at pp.c:7717)
      ParamList:  (at pp.c:7717)
        Decl: name='low_to_high', quals=[], storage=[] (at pp.c:7717)
          TypeDecl: declname='low_to_high', quals=[] (at pp.c:7717)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__edge', quals=[] (at pp.c:7717)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__enable', quals=[], storage=['static'] (at pp.c:7719)
    FuncDecl: quals=None (at pp.c:7719)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__enable', quals=[] (at pp.c:7719)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__Interrupt__fired', quals=[], storage=['static'] (at pp.c:7721)
    FuncDecl: quals=None (at pp.c:7721)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__Interrupt__fired', quals=[] (at pp.c:7721)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__enable', quals=[], storage=['inline', 'static'] (at pp.c:7723)
    FuncDecl: quals=None (at pp.c:7723)
      ParamList:  (at pp.c:7723)
        Decl: name='rising', quals=[], storage=[] (at pp.c:7723)
          TypeDecl: declname='rising', quals=[] (at pp.c:7723)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__enable', quals=[] (at pp.c:7723)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[], storage=['inline', 'static'] (at pp.c:7732)
    FuncDecl: quals=None (at pp.c:7732)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[] (at pp.c:7732)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__0__Interrupt__disable', quals=[], storage=['inline', 'static'] (at pp.c:7740)
    FuncDecl: quals=None (at pp.c:7740)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__Interrupt__disable', quals=[] (at pp.c:7740)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__fired', quals=[], storage=['inline', 'static'] (at pp.c:7748)
    FuncDecl: quals=None (at pp.c:7748)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__fired', quals=[] (at pp.c:7748)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__clear', quals=[], storage=['static'] (at pp.c:7750)
    FuncDecl: quals=None (at pp.c:7750)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__clear', quals=[] (at pp.c:7750)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__disable', quals=[], storage=['static'] (at pp.c:7752)
    FuncDecl: quals=None (at pp.c:7752)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__disable', quals=[] (at pp.c:7752)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__edge', quals=[], storage=['static'] (at pp.c:7754)
    FuncDecl: quals=None (at pp.c:7754)
      ParamList:  (at pp.c:7754)
        Decl: name='low_to_high', quals=[], storage=[] (at pp.c:7754)
          TypeDecl: declname='low_to_high', quals=[] (at pp.c:7754)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__edge', quals=[] (at pp.c:7754)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__enable', quals=[], storage=['static'] (at pp.c:7756)
    FuncDecl: quals=None (at pp.c:7756)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__enable', quals=[] (at pp.c:7756)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__Interrupt__fired', quals=[], storage=['static'] (at pp.c:7758)
    FuncDecl: quals=None (at pp.c:7758)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__Interrupt__fired', quals=[] (at pp.c:7758)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__enable', quals=[], storage=['inline', 'static'] (at pp.c:7760)
    FuncDecl: quals=None (at pp.c:7760)
      ParamList:  (at pp.c:7760)
        Decl: name='rising', quals=[], storage=[] (at pp.c:7760)
          TypeDecl: declname='rising', quals=[] (at pp.c:7760)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__enable', quals=[] (at pp.c:7760)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[], storage=['inline', 'static'] (at pp.c:7762)
    FuncDecl: quals=None (at pp.c:7762)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[] (at pp.c:7762)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__1__Interrupt__disable', quals=[], storage=['inline', 'static'] (at pp.c:7766)
    FuncDecl: quals=None (at pp.c:7766)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__Interrupt__disable', quals=[] (at pp.c:7766)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__fired', quals=[], storage=['inline', 'static'] (at pp.c:7774)
    FuncDecl: quals=None (at pp.c:7774)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__fired', quals=[] (at pp.c:7774)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__SpiPacket__send', quals=[], storage=['static'] (at pp.c:7776)
    FuncDecl: quals=None (at pp.c:7776)
      ParamList:  (at pp.c:7778)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:7778)
          PtrDecl: quals=[] (at pp.c:7778)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:7778)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:7780)
          PtrDecl: quals=[] (at pp.c:7780)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:7780)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7789)
          TypeDecl: declname='len', quals=[] (at pp.c:7789)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiPacket__send', quals=[] (at pp.c:7776)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__writeDone', quals=[], storage=['static'] (at pp.c:7791)
    FuncDecl: quals=None (at pp.c:7791)
      ParamList:  (at pp.c:7793)
        Decl: name='arg_0x102200328', quals=[], storage=[] (at pp.c:7793)
          TypeDecl: declname='arg_0x102200328', quals=[] (at pp.c:7793)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7795)
          PtrDecl: quals=[] (at pp.c:7795)
            TypeDecl: declname='data', quals=[] (at pp.c:7795)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:7795)
          TypeDecl: declname='length', quals=[] (at pp.c:7795)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7795)
          TypeDecl: declname='error', quals=[] (at pp.c:7795)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__writeDone', quals=[] (at pp.c:7791)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__readDone', quals=[], storage=['static'] (at pp.c:7797)
    FuncDecl: quals=None (at pp.c:7797)
      ParamList:  (at pp.c:7799)
        Decl: name='arg_0x102200328', quals=[], storage=[] (at pp.c:7799)
          TypeDecl: declname='arg_0x102200328', quals=[] (at pp.c:7799)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7801)
          PtrDecl: quals=[] (at pp.c:7801)
            TypeDecl: declname='data', quals=[] (at pp.c:7801)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:7801)
          TypeDecl: declname='length', quals=[] (at pp.c:7801)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7801)
          TypeDecl: declname='error', quals=[] (at pp.c:7801)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__readDone', quals=[] (at pp.c:7797)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__ChipSpiResource__releasing', quals=[], storage=['static'] (at pp.c:7803)
    FuncDecl: quals=None (at pp.c:7803)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__ChipSpiResource__releasing', quals=[] (at pp.c:7803)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__SpiByte__write', quals=[], storage=['static'] (at pp.c:7805)
    FuncDecl: quals=None (at pp.c:7805)
      ParamList:  (at pp.c:7805)
        Decl: name='tx', quals=[], storage=[] (at pp.c:7805)
          TypeDecl: declname='tx', quals=[] (at pp.c:7805)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiByte__write', quals=[] (at pp.c:7805)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420SpiP__WorkingState__toIdle', quals=[], storage=['static'] (at pp.c:7807)
    FuncDecl: quals=None (at pp.c:7807)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__WorkingState__toIdle', quals=[] (at pp.c:7807)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__WorkingState__isIdle', quals=[], storage=['static'] (at pp.c:7812)
    FuncDecl: quals=None (at pp.c:7812)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__WorkingState__isIdle', quals=[] (at pp.c:7812)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420SpiP__WorkingState__requestState', quals=[], storage=['static'] (at pp.c:7814)
    FuncDecl: quals=None (at pp.c:7814)
      ParamList:  (at pp.c:7814)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:7814)
          TypeDecl: declname='reqState', quals=[] (at pp.c:7814)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__WorkingState__requestState', quals=[] (at pp.c:7814)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__release', quals=[], storage=['static'] (at pp.c:7816)
    FuncDecl: quals=None (at pp.c:7816)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__release', quals=[] (at pp.c:7816)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__immediateRequest', quals=[], storage=['static'] (at pp.c:7818)
    FuncDecl: quals=None (at pp.c:7818)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__immediateRequest', quals=[] (at pp.c:7818)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__request', quals=[], storage=['static'] (at pp.c:7820)
    FuncDecl: quals=None (at pp.c:7820)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__request', quals=[] (at pp.c:7820)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__isOwner', quals=[], storage=['static'] (at pp.c:7822)
    FuncDecl: quals=None (at pp.c:7822)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__isOwner', quals=[] (at pp.c:7822)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420SpiP__Resource__granted', quals=[], storage=['static'] (at pp.c:7824)
    FuncDecl: quals=None (at pp.c:7824)
      ParamList:  (at pp.c:7826)
        Decl: name='arg_0x102202158', quals=[], storage=[] (at pp.c:7826)
          TypeDecl: declname='arg_0x102202158', quals=[] (at pp.c:7826)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__granted', quals=[] (at pp.c:7824)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__grant__postTask', quals=[], storage=['static'] (at pp.c:7828)
    FuncDecl: quals=None (at pp.c:7828)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__grant__postTask', quals=[] (at pp.c:7828)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:7830)
    Enum: name='CC2420SpiP____nesc_unnamed4354' (at pp.c:7830)
      EnumeratorList:  (at pp.c:7832)
        Enumerator: name='CC2420SpiP__grant' (at pp.c:7832)
          Constant: type='int', value='12U' (at pp.c:7832)
  Typedef: name='CC2420SpiP____nesc_sillytask_grant', quals=[], storage=['typedef'] (at pp.c:7835)
    ArrayDecl:  (at pp.c:7835)
      TypeDecl: declname='CC2420SpiP____nesc_sillytask_grant', quals=[] (at pp.c:7835)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420SpiP__grant' (at pp.c:7835)
  Decl: name=None, quals=[], storage=[] (at pp.c:7837)
    Enum: name='CC2420SpiP____nesc_unnamed4355' (at pp.c:7837)
      EnumeratorList:  (at pp.c:7838)
        Enumerator: name='CC2420SpiP__RESOURCE_COUNT' (at pp.c:7838)
          Constant: type='int', value='5U' (at pp.c:7838)
        Enumerator: name='CC2420SpiP__NO_HOLDER' (at pp.c:7839)
          Constant: type='int', value='0xFF' (at pp.c:7839)
  Decl: name=None, quals=[], storage=[] (at pp.c:7843)
    Enum: name='CC2420SpiP____nesc_unnamed4356' (at pp.c:7843)
      EnumeratorList:  (at pp.c:7844)
        Enumerator: name='CC2420SpiP__S_IDLE' (at pp.c:7844)
        Enumerator: name='CC2420SpiP__S_BUSY' (at pp.c:7845)
  Decl: name='CC2420SpiP__m_addr', quals=[], storage=[] (at pp.c:7849)
    TypeDecl: declname='CC2420SpiP__m_addr', quals=[] (at pp.c:7849)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420SpiP__m_requests', quals=[], storage=[] (at pp.c:7852)
    TypeDecl: declname='CC2420SpiP__m_requests', quals=[] (at pp.c:7852)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:7852)
  Decl: name='CC2420SpiP__m_holder', quals=[], storage=[] (at pp.c:7855)
    TypeDecl: declname='CC2420SpiP__m_holder', quals=[] (at pp.c:7855)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='CC2420SpiP__NO_HOLDER' (at pp.c:7855)
  Decl: name='CC2420SpiP__release', quals=[], storage=[] (at pp.c:7858)
    TypeDecl: declname='CC2420SpiP__release', quals=[] (at pp.c:7858)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420SpiP__attemptRelease', quals=[], storage=['static'] (at pp.c:7861)
    FuncDecl: quals=None (at pp.c:7861)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__attemptRelease', quals=[] (at pp.c:7861)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__ChipSpiResource__abortRelease', quals=[], storage=['inline', 'static'] (at pp.c:7869)
    FuncDecl: quals=None (at pp.c:7869)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__ChipSpiResource__abortRelease', quals=[] (at pp.c:7869)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[], storage=['inline', 'static'] (at pp.c:7876)
    FuncDecl: quals=None (at pp.c:7876)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[] (at pp.c:7876)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__request', quals=[], storage=['static'] (at pp.c:7881)
    FuncDecl: quals=None (at pp.c:7881)
      ParamList:  (at pp.c:7881)
        Decl: name='id', quals=[], storage=[] (at pp.c:7881)
          TypeDecl: declname='id', quals=[] (at pp.c:7881)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__request', quals=[] (at pp.c:7881)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:7883)
    FuncDecl: quals=None (at pp.c:7883)
      ParamList:  (at pp.c:7883)
        Decl: name='id', quals=[], storage=[] (at pp.c:7883)
          TypeDecl: declname='id', quals=[] (at pp.c:7883)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__immediateRequest', quals=[] (at pp.c:7883)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__release', quals=[], storage=['static'] (at pp.c:7885)
    FuncDecl: quals=None (at pp.c:7885)
      ParamList:  (at pp.c:7885)
        Decl: name='id', quals=[], storage=[] (at pp.c:7885)
          TypeDecl: declname='id', quals=[] (at pp.c:7885)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__release', quals=[] (at pp.c:7885)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:7887)
    FuncDecl: quals=None (at pp.c:7887)
      ParamList:  (at pp.c:7887)
        Decl: name='id', quals=[], storage=[] (at pp.c:7887)
          TypeDecl: declname='id', quals=[] (at pp.c:7887)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__isOwner', quals=[] (at pp.c:7887)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:7893)
    FuncDecl: quals=None (at pp.c:7893)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__granted', quals=[] (at pp.c:7893)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__beginRead', quals=[], storage=['static'] (at pp.c:7898)
    FuncDecl: quals=None (at pp.c:7898)
      ParamList:  (at pp.c:7898)
        Decl: name='addr', quals=[], storage=[] (at pp.c:7898)
          TypeDecl: declname='addr', quals=[] (at pp.c:7898)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7898)
          PtrDecl: quals=[] (at pp.c:7898)
            TypeDecl: declname='data', quals=[] (at pp.c:7898)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7899)
          TypeDecl: declname='len', quals=[] (at pp.c:7899)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__beginRead', quals=[] (at pp.c:7898)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__continueRead', quals=[], storage=['inline', 'static'] (at pp.c:7901)
    FuncDecl: quals=None (at pp.c:7901)
      ParamList:  (at pp.c:7901)
        Decl: name='addr', quals=[], storage=[] (at pp.c:7901)
          TypeDecl: declname='addr', quals=[] (at pp.c:7901)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7901)
          PtrDecl: quals=[] (at pp.c:7901)
            TypeDecl: declname='data', quals=[] (at pp.c:7901)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7902)
          TypeDecl: declname='len', quals=[] (at pp.c:7902)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__continueRead', quals=[] (at pp.c:7901)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__write', quals=[], storage=['inline', 'static'] (at pp.c:7906)
    FuncDecl: quals=None (at pp.c:7906)
      ParamList:  (at pp.c:7906)
        Decl: name='addr', quals=[], storage=[] (at pp.c:7906)
          TypeDecl: declname='addr', quals=[] (at pp.c:7906)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7906)
          PtrDecl: quals=[] (at pp.c:7906)
            TypeDecl: declname='data', quals=[] (at pp.c:7906)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7907)
          TypeDecl: declname='len', quals=[] (at pp.c:7907)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__write', quals=[] (at pp.c:7906)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Ram__write', quals=[], storage=['static'] (at pp.c:7909)
    FuncDecl: quals=None (at pp.c:7909)
      ParamList:  (at pp.c:7909)
        Decl: name='addr', quals=[], storage=[] (at pp.c:7909)
          TypeDecl: declname='addr', quals=[] (at pp.c:7909)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='offset', quals=[], storage=[] (at pp.c:7909)
          TypeDecl: declname='offset', quals=[] (at pp.c:7909)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7910)
          PtrDecl: quals=[] (at pp.c:7910)
            TypeDecl: declname='data', quals=[] (at pp.c:7910)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7911)
          TypeDecl: declname='len', quals=[] (at pp.c:7911)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Ram__write', quals=[] (at pp.c:7909)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Reg__read', quals=[], storage=['inline', 'static'] (at pp.c:7913)
    FuncDecl: quals=None (at pp.c:7913)
      ParamList:  (at pp.c:7913)
        Decl: name='addr', quals=[], storage=[] (at pp.c:7913)
          TypeDecl: declname='addr', quals=[] (at pp.c:7913)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7913)
          PtrDecl: quals=[] (at pp.c:7913)
            TypeDecl: declname='data', quals=[] (at pp.c:7913)
              IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Reg__read', quals=[] (at pp.c:7913)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Reg__write', quals=[], storage=['static'] (at pp.c:7915)
    FuncDecl: quals=None (at pp.c:7915)
      ParamList:  (at pp.c:7915)
        Decl: name='addr', quals=[], storage=[] (at pp.c:7915)
          TypeDecl: declname='addr', quals=[] (at pp.c:7915)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7915)
          TypeDecl: declname='data', quals=[] (at pp.c:7915)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Reg__write', quals=[] (at pp.c:7915)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Strobe__strobe', quals=[], storage=['static'] (at pp.c:7917)
    FuncDecl: quals=None (at pp.c:7917)
      ParamList:  (at pp.c:7917)
        Decl: name='addr', quals=[], storage=[] (at pp.c:7917)
          TypeDecl: declname='addr', quals=[] (at pp.c:7917)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Strobe__strobe', quals=[] (at pp.c:7917)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:7928)
    FuncDecl: quals=None (at pp.c:7928)
      ParamList:  (at pp.c:7928)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:7928)
          PtrDecl: quals=[] (at pp.c:7928)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:7928)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:7928)
          PtrDecl: quals=[] (at pp.c:7928)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:7928)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7929)
          TypeDecl: declname='len', quals=[] (at pp.c:7929)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7929)
          TypeDecl: declname='error', quals=[] (at pp.c:7929)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiPacket__sendDone', quals=[] (at pp.c:7928)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__attemptRelease', quals=[], storage=['static'] (at pp.c:7938)
    FuncDecl: quals=None (at pp.c:7938)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__attemptRelease', quals=[] (at pp.c:7938)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__grant__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7940)
    FuncDecl: quals=None (at pp.c:7940)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__grant__runTask', quals=[] (at pp.c:7940)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:7949)
    FuncDecl: quals=None (at pp.c:7949)
      ParamList:  (at pp.c:7949)
        Decl: name='id', quals=[], storage=[] (at pp.c:7949)
          TypeDecl: declname='id', quals=[] (at pp.c:7949)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__default__granted', quals=[] (at pp.c:7949)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:7952)
    FuncDecl: quals=None (at pp.c:7952)
      ParamList:  (at pp.c:7952)
        Decl: name='addr', quals=[], storage=[] (at pp.c:7952)
          TypeDecl: declname='addr', quals=[] (at pp.c:7952)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:7952)
          PtrDecl: quals=[] (at pp.c:7952)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:7952)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_len', quals=[], storage=[] (at pp.c:7952)
          TypeDecl: declname='rx_len', quals=[] (at pp.c:7952)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7952)
          TypeDecl: declname='error', quals=[] (at pp.c:7952)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__default__readDone', quals=[] (at pp.c:7952)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__default__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:7955)
    FuncDecl: quals=None (at pp.c:7955)
      ParamList:  (at pp.c:7955)
        Decl: name='addr', quals=[], storage=[] (at pp.c:7955)
          TypeDecl: declname='addr', quals=[] (at pp.c:7955)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:7955)
          PtrDecl: quals=[] (at pp.c:7955)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:7955)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_len', quals=[], storage=[] (at pp.c:7955)
          TypeDecl: declname='tx_len', quals=[] (at pp.c:7955)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7955)
          TypeDecl: declname='error', quals=[] (at pp.c:7955)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__default__writeDone', quals=[] (at pp.c:7955)
        IdentifierType: names=['void'] (at None)
  Decl: name='StateImplP__state', quals=[], storage=[] (at pp.c:7957)
    ArrayDecl:  (at pp.c:7957)
      TypeDecl: declname='StateImplP__state', quals=[] (at pp.c:7957)
        IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='6U' (at pp.c:7957)
  Decl: name=None, quals=[], storage=[] (at pp.c:7959)
    Enum: name='StateImplP____nesc_unnamed4357' (at pp.c:7959)
      EnumeratorList:  (at pp.c:7960)
        Enumerator: name='StateImplP__S_IDLE' (at pp.c:7960)
          Constant: type='int', value='0' (at pp.c:7960)
  Decl: name='StateImplP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:7964)
    FuncDecl: quals=None (at pp.c:7964)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='StateImplP__Init__init', quals=[] (at pp.c:7964)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='StateImplP__State__requestState', quals=[], storage=['static'] (at pp.c:7966)
    FuncDecl: quals=None (at pp.c:7966)
      ParamList:  (at pp.c:7966)
        Decl: name='id', quals=[], storage=[] (at pp.c:7966)
          TypeDecl: declname='id', quals=[] (at pp.c:7966)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:7966)
          TypeDecl: declname='reqState', quals=[] (at pp.c:7966)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__requestState', quals=[] (at pp.c:7966)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='StateImplP__State__forceState', quals=[], storage=['inline', 'static'] (at pp.c:7968)
    FuncDecl: quals=None (at pp.c:7968)
      ParamList:  (at pp.c:7968)
        Decl: name='id', quals=[], storage=[] (at pp.c:7968)
          TypeDecl: declname='id', quals=[] (at pp.c:7968)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:7968)
          TypeDecl: declname='reqState', quals=[] (at pp.c:7968)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__forceState', quals=[] (at pp.c:7968)
        IdentifierType: names=['void'] (at None)
  Decl: name='StateImplP__State__toIdle', quals=[], storage=['inline', 'static'] (at pp.c:7975)
    FuncDecl: quals=None (at pp.c:7975)
      ParamList:  (at pp.c:7975)
        Decl: name='id', quals=[], storage=[] (at pp.c:7975)
          TypeDecl: declname='id', quals=[] (at pp.c:7975)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__toIdle', quals=[] (at pp.c:7975)
        IdentifierType: names=['void'] (at None)
  Decl: name='StateImplP__State__isIdle', quals=[], storage=['inline', 'static'] (at pp.c:7983)
    FuncDecl: quals=None (at pp.c:7983)
      ParamList:  (at pp.c:7983)
        Decl: name='id', quals=[], storage=[] (at pp.c:7983)
          TypeDecl: declname='id', quals=[] (at pp.c:7983)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__isIdle', quals=[] (at pp.c:7983)
        IdentifierType: names=['bool'] (at None)
  Decl: name='StateImplP__State__isState', quals=[], storage=['static'] (at pp.c:7990)
    FuncDecl: quals=None (at pp.c:7990)
      ParamList:  (at pp.c:7990)
        Decl: name='id', quals=[], storage=[] (at pp.c:7990)
          TypeDecl: declname='id', quals=[] (at pp.c:7990)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='myState', quals=[], storage=[] (at pp.c:7990)
          TypeDecl: declname='myState', quals=[] (at pp.c:7990)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__isState', quals=[] (at pp.c:7990)
        IdentifierType: names=['bool'] (at None)
  Decl: name='StateImplP__State__getState', quals=[], storage=['static'] (at pp.c:8000)
    FuncDecl: quals=None (at pp.c:8000)
      ParamList:  (at pp.c:8000)
        Decl: name='id', quals=[], storage=[] (at pp.c:8000)
          TypeDecl: declname='id', quals=[] (at pp.c:8000)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__getState', quals=[] (at pp.c:8000)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:8002)
    FuncDecl: quals=None (at pp.c:8002)
      ParamList:  (at pp.c:8004)
        Decl: name='arg_0x1022a52f0', quals=[], storage=[] (at pp.c:8004)
          TypeDecl: declname='arg_0x1022a52f0', quals=[] (at pp.c:8004)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:8006)
          PtrDecl: quals=[] (at pp.c:8006)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:8006)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:8007)
          PtrDecl: quals=[] (at pp.c:8007)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:8007)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8013)
          TypeDecl: declname='len', quals=[] (at pp.c:8013)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8014)
          TypeDecl: declname='error', quals=[] (at pp.c:8014)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__sendDone', quals=[] (at pp.c:8002)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__getConfig', quals=[], storage=['static'] (at pp.c:8016)
    FuncDecl: quals=None (at pp.c:8016)
      ParamList:  (at pp.c:8018)
        Decl: name='arg_0x1022f92f0', quals=[], storage=[] (at pp.c:8018)
          TypeDecl: declname='arg_0x1022f92f0', quals=[] (at pp.c:8018)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:8016)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Msp430SpiConfigure__getConfig', quals=[] (at pp.c:8016)
          IdentifierType: names=['msp430_spi_union_config_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__enableRxIntr', quals=[], storage=['static'] (at pp.c:8020)
    FuncDecl: quals=None (at pp.c:8020)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__enableRxIntr', quals=[] (at pp.c:8020)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__clrRxIntr', quals=[], storage=['static'] (at pp.c:8022)
    FuncDecl: quals=None (at pp.c:8022)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__clrRxIntr', quals=[] (at pp.c:8022)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__resetUsart', quals=[], storage=['static'] (at pp.c:8024)
    FuncDecl: quals=None (at pp.c:8024)
      ParamList:  (at pp.c:8024)
        Decl: name='reset', quals=[], storage=[] (at pp.c:8024)
          TypeDecl: declname='reset', quals=[] (at pp.c:8024)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__resetUsart', quals=[] (at pp.c:8024)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__disableRxIntr', quals=[], storage=['static'] (at pp.c:8026)
    FuncDecl: quals=None (at pp.c:8026)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__disableRxIntr', quals=[] (at pp.c:8026)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__tx', quals=[], storage=['static'] (at pp.c:8028)
    FuncDecl: quals=None (at pp.c:8028)
      ParamList:  (at pp.c:8028)
        Decl: name='data', quals=[], storage=[] (at pp.c:8028)
          TypeDecl: declname='data', quals=[] (at pp.c:8028)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__tx', quals=[] (at pp.c:8028)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__setModeSpi', quals=[], storage=['static'] (at pp.c:8030)
    FuncDecl: quals=None (at pp.c:8030)
      ParamList:  (at pp.c:8030)
        Decl: name='config', quals=[], storage=[] (at pp.c:8030)
          PtrDecl: quals=[] (at pp.c:8030)
            TypeDecl: declname='config', quals=[] (at pp.c:8030)
              IdentifierType: names=['msp430_spi_union_config_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__setModeSpi', quals=[] (at pp.c:8030)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__rx', quals=[], storage=['static'] (at pp.c:8032)
    FuncDecl: quals=None (at pp.c:8032)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__rx', quals=[] (at pp.c:8032)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__isRxIntrPending', quals=[], storage=['static'] (at pp.c:8034)
    FuncDecl: quals=None (at pp.c:8034)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__isRxIntrPending', quals=[] (at pp.c:8034)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:8036)
    FuncDecl: quals=None (at pp.c:8036)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__disableSpi', quals=[] (at pp.c:8036)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__release', quals=[], storage=['static'] (at pp.c:8038)
    FuncDecl: quals=None (at pp.c:8038)
      ParamList:  (at pp.c:8040)
        Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:8040)
          TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:8040)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__release', quals=[] (at pp.c:8038)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__immediateRequest', quals=[], storage=['static'] (at pp.c:8042)
    FuncDecl: quals=None (at pp.c:8042)
      ParamList:  (at pp.c:8044)
        Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:8044)
          TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:8044)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__immediateRequest', quals=[] (at pp.c:8042)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__request', quals=[], storage=['static'] (at pp.c:8046)
    FuncDecl: quals=None (at pp.c:8046)
      ParamList:  (at pp.c:8048)
        Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:8048)
          TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:8048)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__request', quals=[] (at pp.c:8046)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__isOwner', quals=[], storage=['static'] (at pp.c:8050)
    FuncDecl: quals=None (at pp.c:8050)
      ParamList:  (at pp.c:8052)
        Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:8052)
          TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:8052)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__isOwner', quals=[] (at pp.c:8050)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__granted', quals=[], storage=['static'] (at pp.c:8054)
    FuncDecl: quals=None (at pp.c:8054)
      ParamList:  (at pp.c:8056)
        Decl: name='arg_0x1022a92f0', quals=[], storage=[] (at pp.c:8056)
          TypeDecl: declname='arg_0x1022a92f0', quals=[] (at pp.c:8056)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__granted', quals=[] (at pp.c:8054)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__signalDone_task__postTask', quals=[], storage=['static'] (at pp.c:8058)
    FuncDecl: quals=None (at pp.c:8058)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone_task__postTask', quals=[] (at pp.c:8058)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:8060)
    Enum: name='Msp430SpiNoDmaP__0____nesc_unnamed4358' (at pp.c:8060)
      EnumeratorList:  (at pp.c:8062)
        Enumerator: name='Msp430SpiNoDmaP__0__signalDone_task' (at pp.c:8062)
          Constant: type='int', value='13U' (at pp.c:8062)
  Typedef: name='Msp430SpiNoDmaP__0____nesc_sillytask_signalDone_task', quals=[], storage=['typedef'] (at pp.c:8065)
    ArrayDecl:  (at pp.c:8065)
      TypeDecl: declname='Msp430SpiNoDmaP__0____nesc_sillytask_signalDone_task', quals=[] (at pp.c:8065)
        IdentifierType: names=['int'] (at None)
      ID: name='Msp430SpiNoDmaP__0__signalDone_task' (at pp.c:8065)
  Decl: name=None, quals=[], storage=[] (at pp.c:8067)
    Enum: name='Msp430SpiNoDmaP__0____nesc_unnamed4359' (at pp.c:8067)
      EnumeratorList:  (at pp.c:8068)
        Enumerator: name='Msp430SpiNoDmaP__0__SPI_ATOMIC_SIZE' (at pp.c:8068)
          Constant: type='int', value='2' (at pp.c:8068)
  Decl: name='Msp430SpiNoDmaP__0__m_len', quals=[], storage=[] (at pp.c:8071)
    TypeDecl: declname='Msp430SpiNoDmaP__0__m_len', quals=[] (at pp.c:8071)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__m_tx_buf', quals=[], storage=[] (at pp.c:8072)
    PtrDecl: quals=[] (at pp.c:8072)
      TypeDecl: declname='Msp430SpiNoDmaP__0__m_tx_buf', quals=[] (at pp.c:8072)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__m_rx_buf', quals=[], storage=[] (at pp.c:8073)
    PtrDecl: quals=[] (at pp.c:8073)
      TypeDecl: declname='Msp430SpiNoDmaP__0__m_rx_buf', quals=[] (at pp.c:8073)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__m_pos', quals=[], storage=[] (at pp.c:8074)
    TypeDecl: declname='Msp430SpiNoDmaP__0__m_pos', quals=[] (at pp.c:8074)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__m_client', quals=[], storage=[] (at pp.c:8075)
    TypeDecl: declname='Msp430SpiNoDmaP__0__m_client', quals=[] (at pp.c:8075)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__signalDone', quals=[], storage=['inline', 'static'] (at pp.c:8077)
    FuncDecl: quals=None (at pp.c:8077)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone', quals=[] (at pp.c:8077)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:8080)
    FuncDecl: quals=None (at pp.c:8080)
      ParamList:  (at pp.c:8080)
        Decl: name='id', quals=[], storage=[] (at pp.c:8080)
          TypeDecl: declname='id', quals=[] (at pp.c:8080)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[] (at pp.c:8080)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:8084)
    FuncDecl: quals=None (at pp.c:8084)
      ParamList:  (at pp.c:8084)
        Decl: name='id', quals=[], storage=[] (at pp.c:8084)
          TypeDecl: declname='id', quals=[] (at pp.c:8084)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__request', quals=[] (at pp.c:8084)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:8088)
    FuncDecl: quals=None (at pp.c:8088)
      ParamList:  (at pp.c:8088)
        Decl: name='id', quals=[], storage=[] (at pp.c:8088)
          TypeDecl: declname='id', quals=[] (at pp.c:8088)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[] (at pp.c:8088)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:8092)
    FuncDecl: quals=None (at pp.c:8092)
      ParamList:  (at pp.c:8092)
        Decl: name='id', quals=[], storage=[] (at pp.c:8092)
          TypeDecl: declname='id', quals=[] (at pp.c:8092)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__release', quals=[] (at pp.c:8092)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[], storage=['inline', 'static'] (at pp.c:8096)
    FuncDecl: quals=None (at pp.c:8096)
      ParamList:  (at pp.c:8096)
        Decl: name='id', quals=[], storage=[] (at pp.c:8096)
          TypeDecl: declname='id', quals=[] (at pp.c:8096)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[] (at pp.c:8096)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:8100)
    FuncDecl: quals=None (at pp.c:8100)
      ParamList:  (at pp.c:8100)
        Decl: name='id', quals=[], storage=[] (at pp.c:8100)
          TypeDecl: declname='id', quals=[] (at pp.c:8100)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:8100)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:8106)
    FuncDecl: quals=None (at pp.c:8106)
      ParamList:  (at pp.c:8106)
        Decl: name='id', quals=[], storage=[] (at pp.c:8106)
          TypeDecl: declname='id', quals=[] (at pp.c:8106)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[] (at pp.c:8106)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiByte__write', quals=[], storage=['static'] (at pp.c:8110)
    FuncDecl: quals=None (at pp.c:8110)
      ParamList:  (at pp.c:8110)
        Decl: name='tx', quals=[], storage=[] (at pp.c:8110)
          TypeDecl: declname='tx', quals=[] (at pp.c:8110)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiByte__write', quals=[] (at pp.c:8110)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:8112)
    FuncDecl: quals=None (at pp.c:8112)
      ParamList:  (at pp.c:8112)
        Decl: name='id', quals=[], storage=[] (at pp.c:8112)
          TypeDecl: declname='id', quals=[] (at pp.c:8112)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[] (at pp.c:8112)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[], storage=['inline', 'static'] (at pp.c:8113)
    FuncDecl: quals=None (at pp.c:8113)
      ParamList:  (at pp.c:8113)
        Decl: name='id', quals=[], storage=[] (at pp.c:8113)
          TypeDecl: declname='id', quals=[] (at pp.c:8113)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[] (at pp.c:8113)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:8114)
    FuncDecl: quals=None (at pp.c:8114)
      ParamList:  (at pp.c:8114)
        Decl: name='id', quals=[], storage=[] (at pp.c:8114)
          TypeDecl: declname='id', quals=[] (at pp.c:8114)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[] (at pp.c:8114)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[], storage=['inline', 'static'] (at pp.c:8115)
    FuncDecl: quals=None (at pp.c:8115)
      ParamList:  (at pp.c:8115)
        Decl: name='id', quals=[], storage=[] (at pp.c:8115)
          TypeDecl: declname='id', quals=[] (at pp.c:8115)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[] (at pp.c:8115)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[], storage=['inline', 'static'] (at pp.c:8116)
    FuncDecl: quals=None (at pp.c:8116)
      ParamList:  (at pp.c:8116)
        Decl: name='id', quals=[], storage=[] (at pp.c:8116)
          TypeDecl: declname='id', quals=[] (at pp.c:8116)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:8116)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[] (at pp.c:8116)
          IdentifierType: names=['msp430_spi_union_config_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:8120)
    FuncDecl: quals=None (at pp.c:8120)
      ParamList:  (at pp.c:8120)
        Decl: name='id', quals=[], storage=[] (at pp.c:8120)
          TypeDecl: declname='id', quals=[] (at pp.c:8120)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[] (at pp.c:8120)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__continueOp', quals=[], storage=['static'] (at pp.c:8122)
    FuncDecl: quals=None (at pp.c:8122)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__continueOp', quals=[] (at pp.c:8122)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[], storage=['static'] (at pp.c:8124)
    FuncDecl: quals=None (at pp.c:8124)
      ParamList:  (at pp.c:8124)
        Decl: name='id', quals=[], storage=[] (at pp.c:8124)
          TypeDecl: declname='id', quals=[] (at pp.c:8124)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:8124)
          PtrDecl: quals=[] (at pp.c:8124)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:8124)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:8125)
          PtrDecl: quals=[] (at pp.c:8125)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:8125)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8126)
          TypeDecl: declname='len', quals=[] (at pp.c:8126)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[] (at pp.c:8124)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:8128)
    FuncDecl: quals=None (at pp.c:8128)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[] (at pp.c:8128)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:8132)
    FuncDecl: quals=None (at pp.c:8132)
      ParamList:  (at pp.c:8132)
        Decl: name='data', quals=[], storage=[] (at pp.c:8132)
          TypeDecl: declname='data', quals=[] (at pp.c:8132)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[] (at pp.c:8132)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__signalDone', quals=[], storage=['inline', 'static'] (at pp.c:8134)
    FuncDecl: quals=None (at pp.c:8134)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone', quals=[] (at pp.c:8134)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:8139)
    FuncDecl: quals=None (at pp.c:8139)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[] (at pp.c:8139)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:8141)
    FuncDecl: quals=None (at pp.c:8141)
      ParamList:  (at pp.c:8141)
        Decl: name='id', quals=[], storage=[] (at pp.c:8141)
          TypeDecl: declname='id', quals=[] (at pp.c:8141)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:8141)
          PtrDecl: quals=[] (at pp.c:8141)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:8141)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:8141)
          PtrDecl: quals=[] (at pp.c:8141)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:8141)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8141)
          TypeDecl: declname='len', quals=[] (at pp.c:8141)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8141)
          TypeDecl: declname='error', quals=[] (at pp.c:8141)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[] (at pp.c:8141)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__UCLK__selectIOFunc', quals=[], storage=['static'] (at pp.c:8143)
    FuncDecl: quals=None (at pp.c:8143)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__UCLK__selectIOFunc', quals=[] (at pp.c:8143)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__UCLK__selectModuleFunc', quals=[], storage=['static'] (at pp.c:8145)
    FuncDecl: quals=None (at pp.c:8145)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__UCLK__selectModuleFunc', quals=[] (at pp.c:8145)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Interrupts__rxDone', quals=[], storage=['static'] (at pp.c:8147)
    FuncDecl: quals=None (at pp.c:8147)
      ParamList:  (at pp.c:8147)
        Decl: name='data', quals=[], storage=[] (at pp.c:8147)
          TypeDecl: declname='data', quals=[] (at pp.c:8147)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Interrupts__rxDone', quals=[] (at pp.c:8147)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Interrupts__txDone', quals=[], storage=['static'] (at pp.c:8149)
    FuncDecl: quals=None (at pp.c:8149)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Interrupts__txDone', quals=[] (at pp.c:8149)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__URXD__selectIOFunc', quals=[], storage=['static'] (at pp.c:8151)
    FuncDecl: quals=None (at pp.c:8151)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__URXD__selectIOFunc', quals=[] (at pp.c:8151)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__UTXD__selectIOFunc', quals=[], storage=['static'] (at pp.c:8153)
    FuncDecl: quals=None (at pp.c:8153)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__UTXD__selectIOFunc', quals=[] (at pp.c:8153)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__HplI2C__clearModeI2C', quals=[], storage=['static'] (at pp.c:8155)
    FuncDecl: quals=None (at pp.c:8155)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__HplI2C__clearModeI2C', quals=[] (at pp.c:8155)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__HplI2C__isI2C', quals=[], storage=['static'] (at pp.c:8157)
    FuncDecl: quals=None (at pp.c:8157)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__HplI2C__isI2C', quals=[] (at pp.c:8157)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430Usart0P__SOMI__selectIOFunc', quals=[], storage=['static'] (at pp.c:8159)
    FuncDecl: quals=None (at pp.c:8159)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__SOMI__selectIOFunc', quals=[] (at pp.c:8159)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__SOMI__selectModuleFunc', quals=[], storage=['static'] (at pp.c:8161)
    FuncDecl: quals=None (at pp.c:8161)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__SOMI__selectModuleFunc', quals=[] (at pp.c:8161)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__I2CInterrupts__fired', quals=[], storage=['static'] (at pp.c:8163)
    FuncDecl: quals=None (at pp.c:8163)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__I2CInterrupts__fired', quals=[] (at pp.c:8163)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__SIMO__selectIOFunc', quals=[], storage=['static'] (at pp.c:8165)
    FuncDecl: quals=None (at pp.c:8165)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__SIMO__selectIOFunc', quals=[] (at pp.c:8165)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__SIMO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:8167)
    FuncDecl: quals=None (at pp.c:8167)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__SIMO__selectModuleFunc', quals=[] (at pp.c:8167)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__IE1@"0x0000"', quals=['volatile'], storage=['static'] (at pp.c:8169)
    TypeDecl: declname='HplMsp430Usart0P__IE1@"0x0000"', quals=['volatile'] (at pp.c:8169)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart0P__ME1@"0x0004"', quals=['volatile'], storage=['static'] (at pp.c:8170)
    TypeDecl: declname='HplMsp430Usart0P__ME1@"0x0004"', quals=['volatile'] (at pp.c:8170)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart0P__IFG1@"0x0002"', quals=['volatile'], storage=['static'] (at pp.c:8171)
    TypeDecl: declname='HplMsp430Usart0P__IFG1@"0x0002"', quals=['volatile'] (at pp.c:8171)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart0P__U0TCTL@"0x0071"', quals=['volatile'], storage=['static'] (at pp.c:8172)
    TypeDecl: declname='HplMsp430Usart0P__U0TCTL@"0x0071"', quals=['volatile'] (at pp.c:8172)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart0P__U0TXBUF@"0x0077"', quals=['volatile'], storage=['static'] (at pp.c:8174)
    TypeDecl: declname='HplMsp430Usart0P__U0TXBUF@"0x0077"', quals=['volatile'] (at pp.c:8174)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='sig_UART0RX_VECTOR', quals=[], storage=[] (at pp.c:8176)
    FuncDecl: quals=None (at pp.c:8176)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_UART0RX_VECTOR', quals=[] (at pp.c:8176)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_UART0TX_VECTOR', quals=[], storage=[] (at pp.c:8181)
    FuncDecl: quals=None (at pp.c:8181)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_UART0TX_VECTOR', quals=[] (at pp.c:8181)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setUbr', quals=[], storage=['inline', 'static'] (at pp.c:8183)
    FuncDecl: quals=None (at pp.c:8183)
      ParamList:  (at pp.c:8183)
        Decl: name='control', quals=[], storage=[] (at pp.c:8183)
          TypeDecl: declname='control', quals=[] (at pp.c:8183)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setUbr', quals=[] (at pp.c:8183)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setUmctl', quals=[], storage=['inline', 'static'] (at pp.c:8194)
    FuncDecl: quals=None (at pp.c:8194)
      ParamList:  (at pp.c:8194)
        Decl: name='control', quals=[], storage=[] (at pp.c:8194)
          TypeDecl: declname='control', quals=[] (at pp.c:8194)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setUmctl', quals=[] (at pp.c:8194)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__resetUsart', quals=[], storage=['inline', 'static'] (at pp.c:8202)
    FuncDecl: quals=None (at pp.c:8202)
      ParamList:  (at pp.c:8202)
        Decl: name='reset', quals=[], storage=[] (at pp.c:8202)
          TypeDecl: declname='reset', quals=[] (at pp.c:8202)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__resetUsart', quals=[] (at pp.c:8202)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableUart', quals=[], storage=['inline', 'static'] (at pp.c:8204)
    FuncDecl: quals=None (at pp.c:8204)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableUart', quals=[] (at pp.c:8204)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__enableSpi', quals=[], storage=['inline', 'static'] (at pp.c:8206)
    FuncDecl: quals=None (at pp.c:8206)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__enableSpi', quals=[] (at pp.c:8206)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:8215)
    FuncDecl: quals=None (at pp.c:8215)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableSpi', quals=[] (at pp.c:8215)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__configSpi', quals=[], storage=['inline', 'static'] (at pp.c:8224)
    FuncDecl: quals=None (at pp.c:8224)
      ParamList:  (at pp.c:8224)
        Decl: name='config', quals=[], storage=[] (at pp.c:8224)
          PtrDecl: quals=[] (at pp.c:8224)
            TypeDecl: declname='config', quals=[] (at pp.c:8224)
              IdentifierType: names=['msp430_spi_union_config_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__configSpi', quals=[] (at pp.c:8224)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setModeSpi', quals=[], storage=['static'] (at pp.c:8233)
    FuncDecl: quals=None (at pp.c:8233)
      ParamList:  (at pp.c:8233)
        Decl: name='config', quals=[], storage=[] (at pp.c:8233)
          PtrDecl: quals=[] (at pp.c:8233)
            TypeDecl: declname='config', quals=[] (at pp.c:8233)
              IdentifierType: names=['msp430_spi_union_config_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setModeSpi', quals=[] (at pp.c:8233)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[], storage=['inline', 'static'] (at pp.c:8235)
    FuncDecl: quals=None (at pp.c:8235)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[] (at pp.c:8235)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__clrRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:8246)
    FuncDecl: quals=None (at pp.c:8246)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__clrRxIntr', quals=[] (at pp.c:8246)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__clrIntr', quals=[], storage=['inline', 'static'] (at pp.c:8250)
    FuncDecl: quals=None (at pp.c:8250)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__clrIntr', quals=[] (at pp.c:8250)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:8254)
    FuncDecl: quals=None (at pp.c:8254)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableRxIntr', quals=[] (at pp.c:8254)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableIntr', quals=[], storage=['inline', 'static'] (at pp.c:8262)
    FuncDecl: quals=None (at pp.c:8262)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableIntr', quals=[] (at pp.c:8262)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__enableRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:8266)
    FuncDecl: quals=None (at pp.c:8266)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__enableRxIntr', quals=[] (at pp.c:8266)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__tx', quals=[], storage=['inline', 'static'] (at pp.c:8268)
    FuncDecl: quals=None (at pp.c:8268)
      ParamList:  (at pp.c:8268)
        Decl: name='data', quals=[], storage=[] (at pp.c:8268)
          TypeDecl: declname='data', quals=[] (at pp.c:8268)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__tx', quals=[] (at pp.c:8268)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__rx', quals=[], storage=['inline', 'static'] (at pp.c:8272)
    FuncDecl: quals=None (at pp.c:8272)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__rx', quals=[] (at pp.c:8272)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430UsartShareP__1__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:8274)
    FuncDecl: quals=None (at pp.c:8274)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__ArbiterInfo__inUse', quals=[] (at pp.c:8274)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430UsartShareP__1__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:8282)
    FuncDecl: quals=None (at pp.c:8282)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__ArbiterInfo__userId', quals=[] (at pp.c:8282)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430UsartShareP__1__Interrupts__rxDone', quals=[], storage=['static'] (at pp.c:8284)
    FuncDecl: quals=None (at pp.c:8284)
      ParamList:  (at pp.c:8286)
        Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:8286)
          TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:8286)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8288)
          TypeDecl: declname='data', quals=[] (at pp.c:8288)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__Interrupts__rxDone', quals=[] (at pp.c:8284)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__Interrupts__txDone', quals=[], storage=['static'] (at pp.c:8290)
    FuncDecl: quals=None (at pp.c:8290)
      ParamList:  (at pp.c:8292)
        Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:8292)
          TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:8292)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__Interrupts__txDone', quals=[] (at pp.c:8290)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__I2CInterrupts__fired', quals=[], storage=['static'] (at pp.c:8294)
    FuncDecl: quals=None (at pp.c:8294)
      ParamList:  (at pp.c:8296)
        Decl: name='arg_0x101d3bc58', quals=[], storage=[] (at pp.c:8296)
          TypeDecl: declname='arg_0x101d3bc58', quals=[] (at pp.c:8296)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__I2CInterrupts__fired', quals=[] (at pp.c:8294)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__RawInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:8305)
    FuncDecl: quals=None (at pp.c:8305)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__RawInterrupts__txDone', quals=[] (at pp.c:8305)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__RawInterrupts__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:8310)
    FuncDecl: quals=None (at pp.c:8310)
      ParamList:  (at pp.c:8310)
        Decl: name='data', quals=[], storage=[] (at pp.c:8310)
          TypeDecl: declname='data', quals=[] (at pp.c:8310)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__RawInterrupts__rxDone', quals=[] (at pp.c:8310)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__RawI2CInterrupts__fired', quals=[], storage=['inline', 'static'] (at pp.c:8315)
    FuncDecl: quals=None (at pp.c:8315)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__RawI2CInterrupts__fired', quals=[] (at pp.c:8315)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__Interrupts__default__txDone', quals=[], storage=['inline', 'static'] (at pp.c:8320)
    FuncDecl: quals=None (at pp.c:8320)
      ParamList:  (at pp.c:8320)
        Decl: name='id', quals=[], storage=[] (at pp.c:8320)
          TypeDecl: declname='id', quals=[] (at pp.c:8320)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__Interrupts__default__txDone', quals=[] (at pp.c:8320)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__Interrupts__default__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:8321)
    FuncDecl: quals=None (at pp.c:8321)
      ParamList:  (at pp.c:8321)
        Decl: name='id', quals=[], storage=[] (at pp.c:8321)
          TypeDecl: declname='id', quals=[] (at pp.c:8321)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8321)
          TypeDecl: declname='data', quals=[] (at pp.c:8321)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__Interrupts__default__rxDone', quals=[] (at pp.c:8321)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__1__I2CInterrupts__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8322)
    FuncDecl: quals=None (at pp.c:8322)
      ParamList:  (at pp.c:8322)
        Decl: name='id', quals=[], storage=[] (at pp.c:8322)
          TypeDecl: declname='id', quals=[] (at pp.c:8322)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__1__I2CInterrupts__default__fired', quals=[] (at pp.c:8322)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:8324)
    Enum: name='FcfsResourceQueueC__2____nesc_unnamed4360' (at pp.c:8324)
      EnumeratorList:  (at pp.c:8326)
        Enumerator: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:8326)
          Constant: type='int', value='0xFF' (at pp.c:8326)
  Decl: name='FcfsResourceQueueC__2__resQ', quals=[], storage=[] (at pp.c:8328)
    ArrayDecl:  (at pp.c:8328)
      TypeDecl: declname='FcfsResourceQueueC__2__resQ', quals=[] (at pp.c:8328)
        IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='1U' (at pp.c:8328)
  Decl: name='FcfsResourceQueueC__2__qHead', quals=[], storage=[] (at pp.c:8329)
    TypeDecl: declname='FcfsResourceQueueC__2__qHead', quals=[] (at pp.c:8329)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:8329)
  Decl: name='FcfsResourceQueueC__2__qTail', quals=[], storage=[] (at pp.c:8330)
    TypeDecl: declname='FcfsResourceQueueC__2__qTail', quals=[] (at pp.c:8330)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:8330)
  Decl: name='FcfsResourceQueueC__2__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:8332)
    FuncDecl: quals=None (at pp.c:8332)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__Init__init', quals=[] (at pp.c:8332)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[], storage=['inline', 'static'] (at pp.c:8337)
    FuncDecl: quals=None (at pp.c:8337)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[] (at pp.c:8337)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[], storage=['inline', 'static'] (at pp.c:8341)
    FuncDecl: quals=None (at pp.c:8341)
      ParamList:  (at pp.c:8341)
        Decl: name='id', quals=[], storage=[] (at pp.c:8341)
          TypeDecl: declname='id', quals=[] (at pp.c:8341)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[] (at pp.c:8341)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:8345)
    FuncDecl: quals=None (at pp.c:8345)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[] (at pp.c:8345)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:8347)
    FuncDecl: quals=None (at pp.c:8347)
      ParamList:  (at pp.c:8347)
        Decl: name='id', quals=[], storage=[] (at pp.c:8347)
          TypeDecl: declname='id', quals=[] (at pp.c:8347)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[] (at pp.c:8347)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__requested', quals=[], storage=['static'] (at pp.c:8349)
    FuncDecl: quals=None (at pp.c:8349)
      ParamList:  (at pp.c:8351)
        Decl: name='arg_0x101d807e8', quals=[], storage=[] (at pp.c:8351)
          TypeDecl: declname='arg_0x101d807e8', quals=[] (at pp.c:8351)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__requested', quals=[] (at pp.c:8349)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__immediateRequested', quals=[], storage=['static'] (at pp.c:8353)
    FuncDecl: quals=None (at pp.c:8353)
      ParamList:  (at pp.c:8355)
        Decl: name='arg_0x101d807e8', quals=[], storage=[] (at pp.c:8355)
          TypeDecl: declname='arg_0x101d807e8', quals=[] (at pp.c:8355)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__immediateRequested', quals=[] (at pp.c:8353)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__unconfigure', quals=[], storage=['static'] (at pp.c:8357)
    FuncDecl: quals=None (at pp.c:8357)
      ParamList:  (at pp.c:8359)
        Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:8359)
          TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:8359)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__unconfigure', quals=[] (at pp.c:8357)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__configure', quals=[], storage=['static'] (at pp.c:8361)
    FuncDecl: quals=None (at pp.c:8361)
      ParamList:  (at pp.c:8363)
        Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:8363)
          TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:8363)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__configure', quals=[] (at pp.c:8361)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__Queue__enqueue', quals=[], storage=['static'] (at pp.c:8365)
    FuncDecl: quals=None (at pp.c:8365)
      ParamList:  (at pp.c:8365)
        Decl: name='id', quals=[], storage=[] (at pp.c:8365)
          TypeDecl: declname='id', quals=[] (at pp.c:8365)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Queue__enqueue', quals=[] (at pp.c:8365)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Queue__isEmpty', quals=[], storage=['static'] (at pp.c:8367)
    FuncDecl: quals=None (at pp.c:8367)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__Queue__isEmpty', quals=[] (at pp.c:8367)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__1__Queue__dequeue', quals=[], storage=['static'] (at pp.c:8369)
    FuncDecl: quals=None (at pp.c:8369)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__Queue__dequeue', quals=[] (at pp.c:8369)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__requested', quals=[], storage=['static'] (at pp.c:8371)
    FuncDecl: quals=None (at pp.c:8371)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__requested', quals=[] (at pp.c:8371)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__granted', quals=[], storage=['static'] (at pp.c:8373)
    FuncDecl: quals=None (at pp.c:8373)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__granted', quals=[] (at pp.c:8373)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__immediateRequested', quals=[], storage=['static'] (at pp.c:8375)
    FuncDecl: quals=None (at pp.c:8375)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__immediateRequested', quals=[] (at pp.c:8375)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__Resource__granted', quals=[], storage=['static'] (at pp.c:8377)
    FuncDecl: quals=None (at pp.c:8377)
      ParamList:  (at pp.c:8379)
        Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:8379)
          TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:8379)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__granted', quals=[] (at pp.c:8377)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__grantedTask__postTask', quals=[], storage=['static'] (at pp.c:8381)
    FuncDecl: quals=None (at pp.c:8381)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__grantedTask__postTask', quals=[] (at pp.c:8381)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:8383)
    Enum: name='ArbiterP__1____nesc_unnamed4361' (at pp.c:8383)
      EnumeratorList:  (at pp.c:8385)
        Enumerator: name='ArbiterP__1__grantedTask' (at pp.c:8385)
          Constant: type='int', value='14U' (at pp.c:8385)
  Typedef: name='ArbiterP__1____nesc_sillytask_grantedTask', quals=[], storage=['typedef'] (at pp.c:8388)
    ArrayDecl:  (at pp.c:8388)
      TypeDecl: declname='ArbiterP__1____nesc_sillytask_grantedTask', quals=[] (at pp.c:8388)
        IdentifierType: names=['int'] (at None)
      ID: name='ArbiterP__1__grantedTask' (at pp.c:8388)
  Decl: name=None, quals=[], storage=[] (at pp.c:8390)
    Enum: name='ArbiterP__1____nesc_unnamed4362' (at pp.c:8390)
      EnumeratorList:  (at pp.c:8392)
        Enumerator: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:8392)
        Enumerator: name='ArbiterP__1__RES_GRANTING' (at pp.c:8392)
        Enumerator: name='ArbiterP__1__RES_IMM_GRANTING' (at pp.c:8392)
        Enumerator: name='ArbiterP__1__RES_BUSY' (at pp.c:8392)
  Decl: name=None, quals=[], storage=[] (at pp.c:8395)
    Enum: name='ArbiterP__1____nesc_unnamed4363' (at pp.c:8395)
      EnumeratorList:  (at pp.c:8397)
        Enumerator: name='ArbiterP__1__default_owner_id' (at pp.c:8397)
          Constant: type='int', value='1U' (at pp.c:8397)
  Decl: name=None, quals=[], storage=[] (at pp.c:8400)
    Enum: name='ArbiterP__1____nesc_unnamed4364' (at pp.c:8400)
      EnumeratorList:  (at pp.c:8402)
        Enumerator: name='ArbiterP__1__NO_RES' (at pp.c:8402)
          Constant: type='int', value='0xFF' (at pp.c:8402)
  Decl: name='ArbiterP__1__state', quals=[], storage=[] (at pp.c:8404)
    TypeDecl: declname='ArbiterP__1__state', quals=[] (at pp.c:8404)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:8404)
  Decl: name='ArbiterP__1__resId', quals=[], storage=[] (at pp.c:8405)
    TypeDecl: declname='ArbiterP__1__resId', quals=[] (at pp.c:8405)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='ArbiterP__1__default_owner_id' (at pp.c:8405)
  Decl: name='ArbiterP__1__reqResId', quals=[], storage=[] (at pp.c:8406)
    TypeDecl: declname='ArbiterP__1__reqResId', quals=[] (at pp.c:8406)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__1__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:8410)
    FuncDecl: quals=None (at pp.c:8410)
      ParamList:  (at pp.c:8410)
        Decl: name='id', quals=[], storage=[] (at pp.c:8410)
          TypeDecl: declname='id', quals=[] (at pp.c:8410)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__request', quals=[] (at pp.c:8410)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:8412)
    FuncDecl: quals=None (at pp.c:8412)
      ParamList:  (at pp.c:8412)
        Decl: name='id', quals=[], storage=[] (at pp.c:8412)
          TypeDecl: declname='id', quals=[] (at pp.c:8412)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__immediateRequest', quals=[] (at pp.c:8412)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:8414)
    FuncDecl: quals=None (at pp.c:8414)
      ParamList:  (at pp.c:8414)
        Decl: name='id', quals=[], storage=[] (at pp.c:8414)
          TypeDecl: declname='id', quals=[] (at pp.c:8414)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__release', quals=[] (at pp.c:8414)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:8416)
    FuncDecl: quals=None (at pp.c:8416)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__release', quals=[] (at pp.c:8416)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:8418)
    FuncDecl: quals=None (at pp.c:8418)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ArbiterInfo__inUse', quals=[] (at pp.c:8418)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__1__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:8420)
    FuncDecl: quals=None (at pp.c:8420)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ArbiterInfo__userId', quals=[] (at pp.c:8420)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__1__Resource__isOwner', quals=[], storage=['static'] (at pp.c:8431)
    FuncDecl: quals=None (at pp.c:8431)
      ParamList:  (at pp.c:8431)
        Decl: name='id', quals=[], storage=[] (at pp.c:8431)
          TypeDecl: declname='id', quals=[] (at pp.c:8431)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__isOwner', quals=[] (at pp.c:8431)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__1__grantedTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:8433)
    FuncDecl: quals=None (at pp.c:8433)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__grantedTask__runTask', quals=[] (at pp.c:8433)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:8435)
    FuncDecl: quals=None (at pp.c:8435)
      ParamList:  (at pp.c:8435)
        Decl: name='id', quals=[], storage=[] (at pp.c:8435)
          TypeDecl: declname='id', quals=[] (at pp.c:8435)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__default__granted', quals=[] (at pp.c:8435)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__default__requested', quals=[], storage=['inline', 'static'] (at pp.c:8437)
    FuncDecl: quals=None (at pp.c:8437)
      ParamList:  (at pp.c:8437)
        Decl: name='id', quals=[], storage=[] (at pp.c:8437)
          TypeDecl: declname='id', quals=[] (at pp.c:8437)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__default__requested', quals=[] (at pp.c:8437)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:8439)
    FuncDecl: quals=None (at pp.c:8439)
      ParamList:  (at pp.c:8439)
        Decl: name='id', quals=[], storage=[] (at pp.c:8439)
          TypeDecl: declname='id', quals=[] (at pp.c:8439)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[] (at pp.c:8439)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:8441)
    FuncDecl: quals=None (at pp.c:8441)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[] (at pp.c:8441)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[], storage=['inline', 'static'] (at pp.c:8443)
    FuncDecl: quals=None (at pp.c:8443)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[] (at pp.c:8443)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:8446)
    FuncDecl: quals=None (at pp.c:8446)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[] (at pp.c:8446)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__default__configure', quals=[], storage=['inline', 'static'] (at pp.c:8449)
    FuncDecl: quals=None (at pp.c:8449)
      ParamList:  (at pp.c:8449)
        Decl: name='id', quals=[], storage=[] (at pp.c:8449)
          TypeDecl: declname='id', quals=[] (at pp.c:8449)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__configure', quals=[] (at pp.c:8449)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:8451)
    FuncDecl: quals=None (at pp.c:8451)
      ParamList:  (at pp.c:8451)
        Decl: name='id', quals=[], storage=[] (at pp.c:8451)
          TypeDecl: declname='id', quals=[] (at pp.c:8451)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:8451)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430I2C0P__HplUsart__resetUsart', quals=[], storage=['static'] (at pp.c:8453)
    FuncDecl: quals=None (at pp.c:8453)
      ParamList:  (at pp.c:8453)
        Decl: name='reset', quals=[], storage=[] (at pp.c:8453)
          TypeDecl: declname='reset', quals=[] (at pp.c:8453)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430I2C0P__HplUsart__resetUsart', quals=[] (at pp.c:8453)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430I2C0P__U0CTL@"0x0070"', quals=['volatile'], storage=['static'] (at pp.c:8455)
    TypeDecl: declname='HplMsp430I2C0P__U0CTL@"0x0070"', quals=['volatile'] (at pp.c:8455)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430I2C0P__HplI2C__isI2C', quals=[], storage=['inline', 'static'] (at pp.c:8461)
    FuncDecl: quals=None (at pp.c:8461)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430I2C0P__HplI2C__isI2C', quals=[] (at pp.c:8461)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[], storage=['inline', 'static'] (at pp.c:8465)
    FuncDecl: quals=None (at pp.c:8465)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[] (at pp.c:8465)
        IdentifierType: names=['void'] (at None)
  Decl: name='ActiveMessageAddressC__addr', quals=[], storage=[] (at pp.c:8467)
    TypeDecl: declname='ActiveMessageAddressC__addr', quals=[] (at pp.c:8467)
      IdentifierType: names=['am_addr_t'] (at None)
    ID: name='TOS_AM_ADDRESS' (at pp.c:8467)
  Decl: name='ActiveMessageAddressC__group', quals=[], storage=[] (at pp.c:8470)
    TypeDecl: declname='ActiveMessageAddressC__group', quals=[] (at pp.c:8470)
      IdentifierType: names=['am_group_t'] (at None)
    ID: name='TOS_AM_GROUP' (at pp.c:8470)
  Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[], storage=['inline', 'static'] (at pp.c:8477)
    FuncDecl: quals=None (at pp.c:8477)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[] (at pp.c:8477)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[], storage=['inline', 'static'] (at pp.c:8479)
    FuncDecl: quals=None (at pp.c:8479)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[] (at pp.c:8479)
        IdentifierType: names=['am_group_t'] (at None)
  Decl: name='ActiveMessageAddressC__amAddress', quals=[], storage=['static'] (at pp.c:8481)
    FuncDecl: quals=None (at pp.c:8481)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__amAddress', quals=[] (at pp.c:8481)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='Ds2411P__OneWire__read', quals=[], storage=['static'] (at pp.c:8483)
    FuncDecl: quals=None (at pp.c:8483)
      ParamList:  (at pp.c:8483)
        Decl: name='cmd', quals=[], storage=[] (at pp.c:8483)
          TypeDecl: declname='cmd', quals=[] (at pp.c:8483)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:8483)
          PtrDecl: quals=[] (at pp.c:8483)
            TypeDecl: declname='buf', quals=[] (at pp.c:8483)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8483)
          TypeDecl: declname='len', quals=[] (at pp.c:8483)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Ds2411P__OneWire__read', quals=[] (at pp.c:8483)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Ds2411P__haveId', quals=[], storage=[] (at pp.c:8485)
    TypeDecl: declname='Ds2411P__haveId', quals=[] (at pp.c:8485)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:8485)
  Decl: name='Ds2411P__ds2411id', quals=[], storage=[] (at pp.c:8486)
    TypeDecl: declname='Ds2411P__ds2411id', quals=[] (at pp.c:8486)
      IdentifierType: names=['dallasid48_serial_t'] (at None)
  Decl: name='Ds2411P__readId', quals=[], storage=['inline', 'static'] (at pp.c:8488)
    FuncDecl: quals=None (at pp.c:8488)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Ds2411P__readId', quals=[] (at pp.c:8488)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Ds2411P__ReadId48__read', quals=[], storage=['inline', 'static'] (at pp.c:8490)
    FuncDecl: quals=None (at pp.c:8490)
      ParamList:  (at pp.c:8490)
        Decl: name='id', quals=[], storage=[] (at pp.c:8490)
          PtrDecl: quals=[] (at pp.c:8490)
            TypeDecl: declname='id', quals=[] (at pp.c:8490)
              IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Ds2411P__ReadId48__read', quals=[] (at pp.c:8490)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='OneWireMasterC__BusyWait__wait', quals=[], storage=['static'] (at pp.c:8492)
    FuncDecl: quals=None (at pp.c:8492)
      ParamList:  (at pp.c:8492)
        Decl: name='dt', quals=[], storage=[] (at pp.c:8492)
          TypeDecl: declname='dt', quals=[] (at pp.c:8492)
            IdentifierType: names=['OneWireMasterC__BusyWait__size_type'] (at None)
      TypeDecl: declname='OneWireMasterC__BusyWait__wait', quals=[] (at pp.c:8492)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__Pin__makeInput', quals=[], storage=['static'] (at pp.c:8494)
    FuncDecl: quals=None (at pp.c:8494)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__Pin__makeInput', quals=[] (at pp.c:8494)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__Pin__get', quals=[], storage=['static'] (at pp.c:8496)
    FuncDecl: quals=None (at pp.c:8496)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__Pin__get', quals=[] (at pp.c:8496)
        IdentifierType: names=['bool'] (at None)
  Decl: name='OneWireMasterC__Pin__makeOutput', quals=[], storage=['static'] (at pp.c:8499)
    FuncDecl: quals=None (at pp.c:8499)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__Pin__makeOutput', quals=[] (at pp.c:8499)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__Pin__clr', quals=[], storage=['static'] (at pp.c:8501)
    FuncDecl: quals=None (at pp.c:8501)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__Pin__clr', quals=[] (at pp.c:8501)
        IdentifierType: names=['void'] (at None)
  Typedef: name='OneWireMasterC__onewiretimes_t', quals=[], storage=['typedef'] (at pp.c:8511)
    TypeDecl: declname='OneWireMasterC__onewiretimes_t', quals=[] (at pp.c:8511)
      Enum: name='OneWireMasterC____nesc_unnamed4365' (at pp.c:8504)
        EnumeratorList:  (at pp.c:8505)
          Enumerator: name='OneWireMasterC__DELAY_5US' (at pp.c:8505)
            Constant: type='int', value='5' (at pp.c:8505)
          Enumerator: name='OneWireMasterC__RESET_LOW_TIME' (at pp.c:8506)
            Constant: type='int', value='560' (at pp.c:8506)
          Enumerator: name='OneWireMasterC__DELAY_60US' (at pp.c:8507)
            Constant: type='int', value='60' (at pp.c:8507)
          Enumerator: name='OneWireMasterC__PRESENCE_DETECT_LOW_TIME' (at pp.c:8508)
            Constant: type='int', value='240' (at pp.c:8508)
          Enumerator: name='OneWireMasterC__PRESENCE_RESET_HIGH_TIME' (at pp.c:8509)
            Constant: type='int', value='480' (at pp.c:8509)
          Enumerator: name='OneWireMasterC__SLOT_TIME' (at pp.c:8510)
            Constant: type='int', value='65' (at pp.c:8510)
  Decl: name='OneWireMasterC__reset', quals=[], storage=['inline', 'static'] (at pp.c:8513)
    FuncDecl: quals=None (at pp.c:8513)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__reset', quals=[] (at pp.c:8513)
        IdentifierType: names=['bool'] (at None)
  Decl: name='OneWireMasterC__writeOne', quals=[], storage=['inline', 'static'] (at pp.c:8515)
    FuncDecl: quals=None (at pp.c:8515)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__writeOne', quals=[] (at pp.c:8515)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__writeZero', quals=[], storage=['inline', 'static'] (at pp.c:8522)
    FuncDecl: quals=None (at pp.c:8522)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__writeZero', quals=[] (at pp.c:8522)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__readBit', quals=[], storage=['inline', 'static'] (at pp.c:8529)
    FuncDecl: quals=None (at pp.c:8529)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__readBit', quals=[] (at pp.c:8529)
        IdentifierType: names=['bool'] (at None)
  Decl: name='OneWireMasterC__writeByte', quals=[], storage=['inline', 'static'] (at pp.c:8540)
    FuncDecl: quals=None (at pp.c:8540)
      ParamList:  (at pp.c:8540)
        Decl: name='c', quals=[], storage=[] (at pp.c:8540)
          TypeDecl: declname='c', quals=[] (at pp.c:8540)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='OneWireMasterC__writeByte', quals=[] (at pp.c:8540)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__readByte', quals=[], storage=['inline', 'static'] (at pp.c:8542)
    FuncDecl: quals=None (at pp.c:8542)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__readByte', quals=[] (at pp.c:8542)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='OneWireMasterC__OneWire__read', quals=[], storage=['inline', 'static'] (at pp.c:8553)
    FuncDecl: quals=None (at pp.c:8553)
      ParamList:  (at pp.c:8553)
        Decl: name='cmd', quals=[], storage=[] (at pp.c:8553)
          TypeDecl: declname='cmd', quals=[] (at pp.c:8553)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:8553)
          PtrDecl: quals=[] (at pp.c:8553)
            TypeDecl: declname='buf', quals=[] (at pp.c:8553)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8553)
          TypeDecl: declname='len', quals=[] (at pp.c:8553)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='OneWireMasterC__OneWire__read', quals=[] (at pp.c:8553)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='BusyWaitCounterC__0__Counter__get', quals=[], storage=['static'] (at pp.c:8555)
    FuncDecl: quals=None (at pp.c:8555)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='BusyWaitCounterC__0__Counter__get', quals=[] (at pp.c:8555)
        IdentifierType: names=['BusyWaitCounterC__0__Counter__size_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:8557)
    Enum: name='BusyWaitCounterC__0____nesc_unnamed4366' (at pp.c:8557)
      EnumeratorList:  (at pp.c:8559)
        Enumerator: name='BusyWaitCounterC__0__HALF_MAX_SIZE_TYPE' (at pp.c:8559)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:8559)
            BinaryOp: op='-' (at pp.c:8559)
              BinaryOp: op='*' (at pp.c:8559)
                Constant: type='int', value='8' (at pp.c:8559)
                UnaryOp: op='sizeof' (at pp.c:8559)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:8559)
  Decl: name='BusyWaitCounterC__0__BusyWait__wait', quals=[], storage=['static'] (at pp.c:8562)
    FuncDecl: quals=None (at pp.c:8562)
      ParamList:  (at pp.c:8562)
        Decl: name='dt', quals=[], storage=[] (at pp.c:8562)
          TypeDecl: declname='dt', quals=[] (at pp.c:8562)
            IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
      TypeDecl: declname='BusyWaitCounterC__0__BusyWait__wait', quals=[] (at pp.c:8562)
        IdentifierType: names=['void'] (at None)
  Decl: name='BusyWaitCounterC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:8564)
    FuncDecl: quals=None (at pp.c:8564)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='BusyWaitCounterC__0__Counter__overflow', quals=[] (at pp.c:8564)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__1__Msp430Timer__get', quals=[], storage=['static'] (at pp.c:8566)
    FuncDecl: quals=None (at pp.c:8566)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Msp430Timer__get', quals=[] (at pp.c:8566)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430CounterC__1__Counter__overflow', quals=[], storage=['static'] (at pp.c:8568)
    FuncDecl: quals=None (at pp.c:8568)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Counter__overflow', quals=[] (at pp.c:8568)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__1__Counter__get', quals=[], storage=['inline', 'static'] (at pp.c:8570)
    FuncDecl: quals=None (at pp.c:8570)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Counter__get', quals=[] (at pp.c:8570)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430CounterC__1__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:8572)
    FuncDecl: quals=None (at pp.c:8572)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Msp430Timer__overflow', quals=[] (at pp.c:8572)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__HplGeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:8574)
    FuncDecl: quals=None (at pp.c:8574)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__makeInput', quals=[] (at pp.c:8574)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:8581)
    FuncDecl: quals=None (at pp.c:8581)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__makeOutput', quals=[] (at pp.c:8581)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__HplGeneralIO__get', quals=[], storage=['static'] (at pp.c:8583)
    FuncDecl: quals=None (at pp.c:8583)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__get', quals=[] (at pp.c:8583)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__11__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:8585)
    FuncDecl: quals=None (at pp.c:8585)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__clr', quals=[] (at pp.c:8585)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:8587)
    FuncDecl: quals=None (at pp.c:8587)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__clr', quals=[] (at pp.c:8587)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:8589)
    FuncDecl: quals=None (at pp.c:8589)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__get', quals=[] (at pp.c:8589)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:8590)
    FuncDecl: quals=None (at pp.c:8590)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__makeInput', quals=[] (at pp.c:8590)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:8592)
    FuncDecl: quals=None (at pp.c:8592)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__makeOutput', quals=[] (at pp.c:8592)
        IdentifierType: names=['void'] (at None)
  Decl: name='DallasId48ToIeeeEui64C__ReadId48__read', quals=[], storage=['static'] (at pp.c:8594)
    FuncDecl: quals=None (at pp.c:8594)
      ParamList:  (at pp.c:8594)
        Decl: name='id', quals=[], storage=[] (at pp.c:8594)
          PtrDecl: quals=[] (at pp.c:8594)
            TypeDecl: declname='id', quals=[] (at pp.c:8594)
              IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DallasId48ToIeeeEui64C__ReadId48__read', quals=[] (at pp.c:8594)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[], storage=['static'] (at pp.c:8596)
    FuncDecl: quals=None (at pp.c:8596)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[] (at pp.c:8596)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:8598)
    FuncDecl: quals=None (at pp.c:8598)
      ParamList:  (at pp.c:8598)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8598)
          PtrDecl: quals=[] (at pp.c:8598)
            TypeDecl: declname='msg', quals=[] (at pp.c:8598)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:8598)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:8605)
    FuncDecl: quals=None (at pp.c:8605)
      ParamList:  (at pp.c:8605)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8605)
          PtrDecl: quals=[] (at pp.c:8605)
            TypeDecl: declname='msg', quals=[] (at pp.c:8605)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:8605)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__PacketTimeStamp__clear', quals=[], storage=['static'] (at pp.c:8607)
    FuncDecl: quals=None (at pp.c:8607)
      ParamList:  (at pp.c:8609)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8609)
          PtrDecl: quals=[] (at pp.c:8609)
            TypeDecl: declname='msg', quals=[] (at pp.c:8609)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__clear', quals=[] (at pp.c:8607)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__PacketTimeStamp__set', quals=[], storage=['static'] (at pp.c:8611)
    FuncDecl: quals=None (at pp.c:8611)
      ParamList:  (at pp.c:8613)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8613)
          PtrDecl: quals=[] (at pp.c:8613)
            TypeDecl: declname='msg', quals=[] (at pp.c:8613)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:8618)
          TypeDecl: declname='value', quals=[] (at pp.c:8618)
            IdentifierType: names=['CC2420TransmitP__PacketTimeStamp__size_type'] (at None)
      TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__set', quals=[] (at pp.c:8611)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__STXONCCA__strobe', quals=[], storage=['static'] (at pp.c:8620)
    FuncDecl: quals=None (at pp.c:8620)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__STXONCCA__strobe', quals=[] (at pp.c:8620)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__CaptureSFD__captureFallingEdge', quals=[], storage=['static'] (at pp.c:8622)
    FuncDecl: quals=None (at pp.c:8622)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CaptureSFD__captureFallingEdge', quals=[] (at pp.c:8622)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__CaptureSFD__disable', quals=[], storage=['static'] (at pp.c:8624)
    FuncDecl: quals=None (at pp.c:8624)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CaptureSFD__disable', quals=[] (at pp.c:8624)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CaptureSFD__captureRisingEdge', quals=[], storage=['static'] (at pp.c:8626)
    FuncDecl: quals=None (at pp.c:8626)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CaptureSFD__captureRisingEdge', quals=[] (at pp.c:8626)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__BackoffTimer__getNow', quals=[], storage=['static'] (at pp.c:8628)
    FuncDecl: quals=None (at pp.c:8628)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__BackoffTimer__getNow', quals=[] (at pp.c:8628)
        IdentifierType: names=['CC2420TransmitP__BackoffTimer__size_type'] (at None)
  Decl: name='CC2420TransmitP__BackoffTimer__start', quals=[], storage=['static'] (at pp.c:8630)
    FuncDecl: quals=None (at pp.c:8630)
      ParamList:  (at pp.c:8630)
        Decl: name='dt', quals=[], storage=[] (at pp.c:8630)
          TypeDecl: declname='dt', quals=[] (at pp.c:8630)
            IdentifierType: names=['CC2420TransmitP__BackoffTimer__size_type'] (at None)
      TypeDecl: declname='CC2420TransmitP__BackoffTimer__start', quals=[] (at pp.c:8630)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__BackoffTimer__stop', quals=[], storage=['static'] (at pp.c:8637)
    FuncDecl: quals=None (at pp.c:8637)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__BackoffTimer__stop', quals=[] (at pp.c:8637)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO_RAM__write', quals=[], storage=['static'] (at pp.c:8639)
    FuncDecl: quals=None (at pp.c:8639)
      ParamList:  (at pp.c:8639)
        Decl: name='offset', quals=[], storage=[] (at pp.c:8639)
          TypeDecl: declname='offset', quals=[] (at pp.c:8639)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8639)
          PtrDecl: quals=[] (at pp.c:8639)
            TypeDecl: declname='data', quals=[] (at pp.c:8639)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:8639)
          TypeDecl: declname='length', quals=[] (at pp.c:8639)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO_RAM__write', quals=[] (at pp.c:8639)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__TXCTRL__write', quals=[], storage=['static'] (at pp.c:8641)
    FuncDecl: quals=None (at pp.c:8641)
      ParamList:  (at pp.c:8641)
        Decl: name='data', quals=[], storage=[] (at pp.c:8641)
          TypeDecl: declname='data', quals=[] (at pp.c:8641)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXCTRL__write', quals=[] (at pp.c:8641)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__CC2420Receive__sfd_dropped', quals=[], storage=['static'] (at pp.c:8643)
    FuncDecl: quals=None (at pp.c:8643)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CC2420Receive__sfd_dropped', quals=[] (at pp.c:8643)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CC2420Receive__sfd', quals=[], storage=['static'] (at pp.c:8645)
    FuncDecl: quals=None (at pp.c:8645)
      ParamList:  (at pp.c:8645)
        Decl: name='time', quals=[], storage=[] (at pp.c:8645)
          TypeDecl: declname='time', quals=[] (at pp.c:8645)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__CC2420Receive__sfd', quals=[] (at pp.c:8645)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__Send__sendDone', quals=[], storage=['static'] (at pp.c:8647)
    FuncDecl: quals=None (at pp.c:8647)
      ParamList:  (at pp.c:8647)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:8647)
          PtrDecl: quals=[] (at pp.c:8647)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:8647)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8647)
          TypeDecl: declname='error', quals=[] (at pp.c:8647)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__Send__sendDone', quals=[] (at pp.c:8647)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__ChipSpiResource__abortRelease', quals=[], storage=['static'] (at pp.c:8649)
    FuncDecl: quals=None (at pp.c:8649)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__ChipSpiResource__abortRelease', quals=[] (at pp.c:8649)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__ChipSpiResource__attemptRelease', quals=[], storage=['static'] (at pp.c:8657)
    FuncDecl: quals=None (at pp.c:8657)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__ChipSpiResource__attemptRelease', quals=[] (at pp.c:8657)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__SFLUSHTX__strobe', quals=[], storage=['static'] (at pp.c:8659)
    FuncDecl: quals=None (at pp.c:8659)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SFLUSHTX__strobe', quals=[] (at pp.c:8659)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__CSN__makeOutput', quals=[], storage=['static'] (at pp.c:8661)
    FuncDecl: quals=None (at pp.c:8661)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CSN__makeOutput', quals=[] (at pp.c:8661)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CSN__set', quals=[], storage=['static'] (at pp.c:8663)
    FuncDecl: quals=None (at pp.c:8663)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CSN__set', quals=[] (at pp.c:8663)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CSN__clr', quals=[], storage=['static'] (at pp.c:8664)
    FuncDecl: quals=None (at pp.c:8664)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CSN__clr', quals=[] (at pp.c:8664)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:8666)
    FuncDecl: quals=None (at pp.c:8666)
      ParamList:  (at pp.c:8666)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8666)
          PtrDecl: quals=[] (at pp.c:8666)
            TypeDecl: declname='msg', quals=[] (at pp.c:8666)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:8666)
        TypeDecl: declname='CC2420TransmitP__CC2420PacketBody__getHeader', quals=[] (at pp.c:8666)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420TransmitP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:8677)
    FuncDecl: quals=None (at pp.c:8677)
      ParamList:  (at pp.c:8677)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8677)
          PtrDecl: quals=[] (at pp.c:8677)
            TypeDecl: declname='msg', quals=[] (at pp.c:8677)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:8677)
        TypeDecl: declname='CC2420TransmitP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:8677)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420TransmitP__PacketTimeSyncOffset__get', quals=[], storage=['static'] (at pp.c:8679)
    FuncDecl: quals=None (at pp.c:8679)
      ParamList:  (at pp.c:8681)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8681)
          PtrDecl: quals=[] (at pp.c:8681)
            TypeDecl: declname='msg', quals=[] (at pp.c:8681)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__PacketTimeSyncOffset__get', quals=[] (at pp.c:8679)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TransmitP__PacketTimeSyncOffset__isSet', quals=[], storage=['static'] (at pp.c:8683)
    FuncDecl: quals=None (at pp.c:8683)
      ParamList:  (at pp.c:8685)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8685)
          PtrDecl: quals=[] (at pp.c:8685)
            TypeDecl: declname='msg', quals=[] (at pp.c:8685)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__PacketTimeSyncOffset__isSet', quals=[] (at pp.c:8683)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__SpiResource__release', quals=[], storage=['static'] (at pp.c:8687)
    FuncDecl: quals=None (at pp.c:8687)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SpiResource__release', quals=[] (at pp.c:8687)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__SpiResource__immediateRequest', quals=[], storage=['static'] (at pp.c:8689)
    FuncDecl: quals=None (at pp.c:8689)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SpiResource__immediateRequest', quals=[] (at pp.c:8689)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__SpiResource__request', quals=[], storage=['static'] (at pp.c:8691)
    FuncDecl: quals=None (at pp.c:8691)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SpiResource__request', quals=[] (at pp.c:8691)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__CCA__makeInput', quals=[], storage=['static'] (at pp.c:8693)
    FuncDecl: quals=None (at pp.c:8693)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CCA__makeInput', quals=[] (at pp.c:8693)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CCA__get', quals=[], storage=['static'] (at pp.c:8695)
    FuncDecl: quals=None (at pp.c:8695)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CCA__get', quals=[] (at pp.c:8695)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__SNOP__strobe', quals=[], storage=['static'] (at pp.c:8697)
    FuncDecl: quals=None (at pp.c:8697)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SNOP__strobe', quals=[] (at pp.c:8697)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__SFD__makeInput', quals=[], storage=['static'] (at pp.c:8699)
    FuncDecl: quals=None (at pp.c:8699)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SFD__makeInput', quals=[] (at pp.c:8699)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__SFD__get', quals=[], storage=['static'] (at pp.c:8701)
    FuncDecl: quals=None (at pp.c:8701)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SFD__get', quals=[] (at pp.c:8701)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO__write', quals=[], storage=['static'] (at pp.c:8703)
    FuncDecl: quals=None (at pp.c:8703)
      ParamList:  (at pp.c:8703)
        Decl: name='data', quals=[], storage=[] (at pp.c:8703)
          PtrDecl: quals=[] (at pp.c:8703)
            TypeDecl: declname='data', quals=[] (at pp.c:8703)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:8703)
          TypeDecl: declname='length', quals=[] (at pp.c:8703)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO__write', quals=[] (at pp.c:8703)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__STXON__strobe', quals=[], storage=['static'] (at pp.c:8705)
    FuncDecl: quals=None (at pp.c:8705)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__STXON__strobe', quals=[] (at pp.c:8705)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Typedef: name='CC2420TransmitP__cc2420_transmit_state_t', quals=[], storage=['typedef'] (at pp.c:8718)
    TypeDecl: declname='CC2420TransmitP__cc2420_transmit_state_t', quals=[] (at pp.c:8718)
      Enum: name='CC2420TransmitP____nesc_unnamed4367' (at pp.c:8708)
        EnumeratorList:  (at pp.c:8709)
          Enumerator: name='CC2420TransmitP__S_STOPPED' (at pp.c:8709)
          Enumerator: name='CC2420TransmitP__S_STARTED' (at pp.c:8710)
          Enumerator: name='CC2420TransmitP__S_LOAD' (at pp.c:8711)
          Enumerator: name='CC2420TransmitP__S_SAMPLE_CCA' (at pp.c:8712)
          Enumerator: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:8713)
          Enumerator: name='CC2420TransmitP__S_SFD' (at pp.c:8714)
          Enumerator: name='CC2420TransmitP__S_EFD' (at pp.c:8715)
          Enumerator: name='CC2420TransmitP__S_ACK_WAIT' (at pp.c:8716)
          Enumerator: name='CC2420TransmitP__S_CANCEL' (at pp.c:8717)
  Decl: name=None, quals=[], storage=[] (at pp.c:8724)
    Enum: name='CC2420TransmitP____nesc_unnamed4368' (at pp.c:8724)
      EnumeratorList:  (at pp.c:8725)
        Enumerator: name='CC2420TransmitP__CC2420_ABORT_PERIOD' (at pp.c:8725)
          Constant: type='int', value='320' (at pp.c:8725)
  Decl: name='CC2420TransmitP__m_msg', quals=[], storage=[] (at pp.c:8728)
    PtrDecl: quals=[] (at pp.c:8728)
      TypeDecl: declname='CC2420TransmitP__m_msg', quals=[] (at pp.c:8728)
        IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TransmitP__m_cca', quals=[], storage=[] (at pp.c:8730)
    TypeDecl: declname='CC2420TransmitP__m_cca', quals=[] (at pp.c:8730)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__m_tx_power', quals=[], storage=[] (at pp.c:8732)
    TypeDecl: declname='CC2420TransmitP__m_tx_power', quals=[] (at pp.c:8732)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TransmitP__m_state', quals=[], storage=[] (at pp.c:8734)
    TypeDecl: declname='CC2420TransmitP__m_state', quals=[] (at pp.c:8734)
      IdentifierType: names=['CC2420TransmitP__cc2420_transmit_state_t'] (at None)
    ID: name='CC2420TransmitP__S_STOPPED' (at pp.c:8734)
  Decl: name='CC2420TransmitP__m_receiving', quals=[], storage=[] (at pp.c:8736)
    TypeDecl: declname='CC2420TransmitP__m_receiving', quals=[] (at pp.c:8736)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:8736)
  Decl: name='CC2420TransmitP__m_prev_time', quals=[], storage=[] (at pp.c:8738)
    TypeDecl: declname='CC2420TransmitP__m_prev_time', quals=[] (at pp.c:8738)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420TransmitP__sfdHigh', quals=[], storage=[] (at pp.c:8741)
    TypeDecl: declname='CC2420TransmitP__sfdHigh', quals=[] (at pp.c:8741)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__abortSpiRelease', quals=[], storage=[] (at pp.c:8744)
    TypeDecl: declname='CC2420TransmitP__abortSpiRelease', quals=[] (at pp.c:8744)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__totalCcaChecks', quals=[], storage=[] (at pp.c:8747)
    TypeDecl: declname='CC2420TransmitP__totalCcaChecks', quals=[] (at pp.c:8747)
      IdentifierType: names=['int8_t'] (at None)
  Decl: name='CC2420TransmitP__myInitialBackoff', quals=[], storage=[] (at pp.c:8750)
    TypeDecl: declname='CC2420TransmitP__myInitialBackoff', quals=[] (at pp.c:8750)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420TransmitP__myCongestionBackoff', quals=[], storage=[] (at pp.c:8753)
    TypeDecl: declname='CC2420TransmitP__myCongestionBackoff', quals=[] (at pp.c:8753)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420TransmitP__send', quals=[], storage=['inline', 'static'] (at pp.c:8757)
    FuncDecl: quals=None (at pp.c:8757)
      ParamList:  (at pp.c:8757)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:8757)
          PtrDecl: quals=[] (at pp.c:8757)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:8757)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='cca', quals=[], storage=[] (at pp.c:8757)
          TypeDecl: declname='cca', quals=[] (at pp.c:8757)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__send', quals=[] (at pp.c:8757)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__resend', quals=[], storage=['inline', 'static'] (at pp.c:8758)
    FuncDecl: quals=None (at pp.c:8758)
      ParamList:  (at pp.c:8758)
        Decl: name='cca', quals=[], storage=[] (at pp.c:8758)
          TypeDecl: declname='cca', quals=[] (at pp.c:8758)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__resend', quals=[] (at pp.c:8758)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__loadTXFIFO', quals=[], storage=['static'] (at pp.c:8759)
    FuncDecl: quals=None (at pp.c:8759)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__loadTXFIFO', quals=[] (at pp.c:8759)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__attemptSend', quals=[], storage=['static'] (at pp.c:8760)
    FuncDecl: quals=None (at pp.c:8760)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__attemptSend', quals=[] (at pp.c:8760)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__congestionBackoff', quals=[], storage=['static'] (at pp.c:8761)
    FuncDecl: quals=None (at pp.c:8761)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__congestionBackoff', quals=[] (at pp.c:8761)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__acquireSpiResource', quals=[], storage=['static'] (at pp.c:8762)
    FuncDecl: quals=None (at pp.c:8762)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__acquireSpiResource', quals=[] (at pp.c:8762)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__releaseSpiResource', quals=[], storage=['inline', 'static'] (at pp.c:8763)
    FuncDecl: quals=None (at pp.c:8763)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__releaseSpiResource', quals=[] (at pp.c:8763)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__signalDone', quals=[], storage=['static'] (at pp.c:8764)
    FuncDecl: quals=None (at pp.c:8764)
      ParamList:  (at pp.c:8764)
        Decl: name='err', quals=[], storage=[] (at pp.c:8764)
          TypeDecl: declname='err', quals=[] (at pp.c:8764)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__signalDone', quals=[] (at pp.c:8764)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:8768)
    FuncDecl: quals=None (at pp.c:8768)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__Init__init', quals=[] (at pp.c:8768)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__StdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:8776)
    FuncDecl: quals=None (at pp.c:8776)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__StdControl__start', quals=[] (at pp.c:8776)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__StdControl__stop', quals=[], storage=['static'] (at pp.c:8787)
    FuncDecl: quals=None (at pp.c:8787)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__StdControl__stop', quals=[] (at pp.c:8787)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:8789)
    FuncDecl: quals=None (at pp.c:8789)
      ParamList:  (at pp.c:8789)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:8789)
          PtrDecl: quals=[] (at pp.c:8789)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:8789)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:8789)
          TypeDecl: declname='useCca', quals=[] (at pp.c:8789)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__Send__send', quals=[] (at pp.c:8789)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__Send__resend', quals=[], storage=['inline', 'static'] (at pp.c:8793)
    FuncDecl: quals=None (at pp.c:8793)
      ParamList:  (at pp.c:8793)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:8793)
          TypeDecl: declname='useCca', quals=[] (at pp.c:8793)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__Send__resend', quals=[] (at pp.c:8793)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[], storage=['inline', 'static'] (at pp.c:8795)
    FuncDecl: quals=None (at pp.c:8795)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[] (at pp.c:8795)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:8797)
    FuncDecl: quals=None (at pp.c:8797)
      ParamList:  (at pp.c:8797)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:8797)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:8797)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:8797)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:8805)
    FuncDecl: quals=None (at pp.c:8805)
      ParamList:  (at pp.c:8805)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:8805)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:8805)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:8805)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__getTime32', quals=[], storage=['__inline', 'static'] (at pp.c:8813)
    FuncDecl: quals=None (at pp.c:8813)
      ParamList:  (at pp.c:8813)
        Decl: name='captured_time', quals=[], storage=[] (at pp.c:8813)
          TypeDecl: declname='captured_time', quals=[] (at pp.c:8813)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__getTime32', quals=[] (at pp.c:8813)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='CC2420TransmitP__CaptureSFD__captured', quals=[], storage=['inline', 'static'] (at pp.c:8815)
    FuncDecl: quals=None (at pp.c:8815)
      ParamList:  (at pp.c:8815)
        Decl: name='time', quals=[], storage=[] (at pp.c:8815)
          TypeDecl: declname='time', quals=[] (at pp.c:8815)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__CaptureSFD__captured', quals=[] (at pp.c:8815)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__ChipSpiResource__releasing', quals=[], storage=['inline', 'static'] (at pp.c:8817)
    FuncDecl: quals=None (at pp.c:8817)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__ChipSpiResource__releasing', quals=[] (at pp.c:8817)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CC2420Receive__receive', quals=[], storage=['inline', 'static'] (at pp.c:8819)
    FuncDecl: quals=None (at pp.c:8819)
      ParamList:  (at pp.c:8819)
        Decl: name='type', quals=[], storage=[] (at pp.c:8819)
          TypeDecl: declname='type', quals=[] (at pp.c:8819)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='ack_msg', quals=[], storage=[] (at pp.c:8819)
          PtrDecl: quals=[] (at pp.c:8819)
            TypeDecl: declname='ack_msg', quals=[] (at pp.c:8819)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__CC2420Receive__receive', quals=[] (at pp.c:8819)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:8821)
    FuncDecl: quals=None (at pp.c:8821)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SpiResource__granted', quals=[] (at pp.c:8821)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:8823)
    FuncDecl: quals=None (at pp.c:8823)
      ParamList:  (at pp.c:8823)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:8823)
          PtrDecl: quals=[] (at pp.c:8823)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:8823)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_len', quals=[], storage=[] (at pp.c:8823)
          TypeDecl: declname='tx_len', quals=[] (at pp.c:8823)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8824)
          TypeDecl: declname='error', quals=[] (at pp.c:8824)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO__writeDone', quals=[] (at pp.c:8823)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO__readDone', quals=[], storage=['inline', 'static'] (at pp.c:8826)
    FuncDecl: quals=None (at pp.c:8826)
      ParamList:  (at pp.c:8826)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:8826)
          PtrDecl: quals=[] (at pp.c:8826)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:8826)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_len', quals=[], storage=[] (at pp.c:8826)
          TypeDecl: declname='tx_len', quals=[] (at pp.c:8826)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8827)
          TypeDecl: declname='error', quals=[] (at pp.c:8827)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO__readDone', quals=[] (at pp.c:8826)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__BackoffTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:8838)
    FuncDecl: quals=None (at pp.c:8838)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__BackoffTimer__fired', quals=[] (at pp.c:8838)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__send', quals=[], storage=['inline', 'static'] (at pp.c:8840)
    FuncDecl: quals=None (at pp.c:8840)
      ParamList:  (at pp.c:8840)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:8840)
          PtrDecl: quals=[] (at pp.c:8840)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:8840)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='cca', quals=[], storage=[] (at pp.c:8840)
          TypeDecl: declname='cca', quals=[] (at pp.c:8840)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__send', quals=[] (at pp.c:8840)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__resend', quals=[], storage=['inline', 'static'] (at pp.c:8842)
    FuncDecl: quals=None (at pp.c:8842)
      ParamList:  (at pp.c:8842)
        Decl: name='cca', quals=[], storage=[] (at pp.c:8842)
          TypeDecl: declname='cca', quals=[] (at pp.c:8842)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__resend', quals=[] (at pp.c:8842)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__attemptSend', quals=[], storage=['static'] (at pp.c:8844)
    FuncDecl: quals=None (at pp.c:8844)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__attemptSend', quals=[] (at pp.c:8844)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__congestionBackoff', quals=[], storage=['static'] (at pp.c:8846)
    FuncDecl: quals=None (at pp.c:8846)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__congestionBackoff', quals=[] (at pp.c:8846)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__acquireSpiResource', quals=[], storage=['static'] (at pp.c:8853)
    FuncDecl: quals=None (at pp.c:8853)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__acquireSpiResource', quals=[] (at pp.c:8853)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__releaseSpiResource', quals=[], storage=['inline', 'static'] (at pp.c:8861)
    FuncDecl: quals=None (at pp.c:8861)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__releaseSpiResource', quals=[] (at pp.c:8861)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__loadTXFIFO', quals=[], storage=['static'] (at pp.c:8863)
    FuncDecl: quals=None (at pp.c:8863)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__loadTXFIFO', quals=[] (at pp.c:8863)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__signalDone', quals=[], storage=['static'] (at pp.c:8865)
    FuncDecl: quals=None (at pp.c:8865)
      ParamList:  (at pp.c:8865)
        Decl: name='err', quals=[], storage=[] (at pp.c:8865)
          TypeDecl: declname='err', quals=[] (at pp.c:8865)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__signalDone', quals=[] (at pp.c:8865)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__FIFO__get', quals=[], storage=['static'] (at pp.c:8867)
    FuncDecl: quals=None (at pp.c:8867)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__FIFO__get', quals=[] (at pp.c:8867)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__isAddressRecognitionEnabled', quals=[], storage=['static'] (at pp.c:8869)
    FuncDecl: quals=None (at pp.c:8869)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__isAddressRecognitionEnabled', quals=[] (at pp.c:8869)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__isAutoAckEnabled', quals=[], storage=['static'] (at pp.c:8871)
    FuncDecl: quals=None (at pp.c:8871)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__isAutoAckEnabled', quals=[] (at pp.c:8871)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__isHwAutoAckDefault', quals=[], storage=['static'] (at pp.c:8873)
    FuncDecl: quals=None (at pp.c:8873)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__isHwAutoAckDefault', quals=[] (at pp.c:8873)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__getExtAddr', quals=[], storage=['static'] (at pp.c:8875)
    FuncDecl: quals=None (at pp.c:8875)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__getExtAddr', quals=[] (at pp.c:8875)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__getShortAddr', quals=[], storage=['static'] (at pp.c:8880)
    FuncDecl: quals=None (at pp.c:8880)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__getShortAddr', quals=[] (at pp.c:8880)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ReceiveP__receiveDone_task__postTask', quals=[], storage=['static'] (at pp.c:8882)
    FuncDecl: quals=None (at pp.c:8882)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__receiveDone_task__postTask', quals=[] (at pp.c:8882)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__PacketTimeStamp__clear', quals=[], storage=['static'] (at pp.c:8884)
    FuncDecl: quals=None (at pp.c:8884)
      ParamList:  (at pp.c:8886)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8886)
          PtrDecl: quals=[] (at pp.c:8886)
            TypeDecl: declname='msg', quals=[] (at pp.c:8886)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__clear', quals=[] (at pp.c:8884)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__PacketTimeStamp__set', quals=[], storage=['static'] (at pp.c:8888)
    FuncDecl: quals=None (at pp.c:8888)
      ParamList:  (at pp.c:8890)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8890)
          PtrDecl: quals=[] (at pp.c:8890)
            TypeDecl: declname='msg', quals=[] (at pp.c:8890)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:8895)
          TypeDecl: declname='value', quals=[] (at pp.c:8895)
            IdentifierType: names=['CC2420ReceiveP__PacketTimeStamp__size_type'] (at None)
      TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__set', quals=[] (at pp.c:8888)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__FIFOP__get', quals=[], storage=['static'] (at pp.c:8897)
    FuncDecl: quals=None (at pp.c:8897)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__FIFOP__get', quals=[] (at pp.c:8897)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Receive__receive', quals=[], storage=['static'] (at pp.c:8899)
    FuncDecl: quals=None (at pp.c:8899)
      ParamList:  (at pp.c:8899)
        Decl: name='type', quals=[], storage=[] (at pp.c:8899)
          TypeDecl: declname='type', quals=[] (at pp.c:8899)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='message', quals=[], storage=[] (at pp.c:8899)
          PtrDecl: quals=[] (at pp.c:8899)
            TypeDecl: declname='message', quals=[] (at pp.c:8899)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Receive__receive', quals=[] (at pp.c:8899)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__SACK__strobe', quals=[], storage=['static'] (at pp.c:8901)
    FuncDecl: quals=None (at pp.c:8901)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SACK__strobe', quals=[] (at pp.c:8901)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ReceiveP__CSN__set', quals=[], storage=['static'] (at pp.c:8903)
    FuncDecl: quals=None (at pp.c:8903)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CSN__set', quals=[] (at pp.c:8903)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CSN__clr', quals=[], storage=['static'] (at pp.c:8904)
    FuncDecl: quals=None (at pp.c:8904)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CSN__clr', quals=[] (at pp.c:8904)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:8906)
    FuncDecl: quals=None (at pp.c:8906)
      ParamList:  (at pp.c:8906)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8906)
          PtrDecl: quals=[] (at pp.c:8906)
            TypeDecl: declname='msg', quals=[] (at pp.c:8906)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:8906)
        TypeDecl: declname='CC2420ReceiveP__CC2420PacketBody__getHeader', quals=[] (at pp.c:8906)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420ReceiveP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:8917)
    FuncDecl: quals=None (at pp.c:8917)
      ParamList:  (at pp.c:8917)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8917)
          PtrDecl: quals=[] (at pp.c:8917)
            TypeDecl: declname='msg', quals=[] (at pp.c:8917)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:8917)
        TypeDecl: declname='CC2420ReceiveP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:8917)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420ReceiveP__Receive__receive', quals=[], storage=['static'] (at pp.c:8925)
    FuncDecl: quals=None (at pp.c:8925)
      ParamList:  (at pp.c:8927)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8927)
          PtrDecl: quals=[] (at pp.c:8927)
            TypeDecl: declname='msg', quals=[] (at pp.c:8927)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:8928)
          PtrDecl: quals=[] (at pp.c:8928)
            TypeDecl: declname='payload', quals=[] (at pp.c:8928)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8934)
          TypeDecl: declname='len', quals=[] (at pp.c:8934)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:8921)
        TypeDecl: declname='CC2420ReceiveP__Receive__receive', quals=[] (at pp.c:8925)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__release', quals=[], storage=['static'] (at pp.c:8936)
    FuncDecl: quals=None (at pp.c:8936)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__release', quals=[] (at pp.c:8936)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__immediateRequest', quals=[], storage=['static'] (at pp.c:8938)
    FuncDecl: quals=None (at pp.c:8938)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__immediateRequest', quals=[] (at pp.c:8938)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__request', quals=[], storage=['static'] (at pp.c:8940)
    FuncDecl: quals=None (at pp.c:8940)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__request', quals=[] (at pp.c:8940)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__isOwner', quals=[], storage=['static'] (at pp.c:8942)
    FuncDecl: quals=None (at pp.c:8942)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__isOwner', quals=[] (at pp.c:8942)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__continueRead', quals=[], storage=['static'] (at pp.c:8944)
    FuncDecl: quals=None (at pp.c:8944)
      ParamList:  (at pp.c:8944)
        Decl: name='data', quals=[], storage=[] (at pp.c:8944)
          PtrDecl: quals=[] (at pp.c:8944)
            TypeDecl: declname='data', quals=[] (at pp.c:8944)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:8944)
          TypeDecl: declname='length', quals=[] (at pp.c:8944)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__continueRead', quals=[] (at pp.c:8944)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__beginRead', quals=[], storage=['static'] (at pp.c:8946)
    FuncDecl: quals=None (at pp.c:8946)
      ParamList:  (at pp.c:8946)
        Decl: name='data', quals=[], storage=[] (at pp.c:8946)
          PtrDecl: quals=[] (at pp.c:8946)
            TypeDecl: declname='data', quals=[] (at pp.c:8946)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:8946)
          TypeDecl: declname='length', quals=[] (at pp.c:8946)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__beginRead', quals=[] (at pp.c:8946)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ReceiveP__InterruptFIFOP__disable', quals=[], storage=['static'] (at pp.c:8948)
    FuncDecl: quals=None (at pp.c:8948)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__disable', quals=[] (at pp.c:8948)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__InterruptFIFOP__enableFallingEdge', quals=[], storage=['static'] (at pp.c:8950)
    FuncDecl: quals=None (at pp.c:8950)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__enableFallingEdge', quals=[] (at pp.c:8950)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__SFLUSHRX__strobe', quals=[], storage=['static'] (at pp.c:8952)
    FuncDecl: quals=None (at pp.c:8952)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SFLUSHRX__strobe', quals=[] (at pp.c:8952)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:8954)
    Enum: name='CC2420ReceiveP____nesc_unnamed4369' (at pp.c:8954)
      EnumeratorList:  (at pp.c:8956)
        Enumerator: name='CC2420ReceiveP__receiveDone_task' (at pp.c:8956)
          Constant: type='int', value='15U' (at pp.c:8956)
  Typedef: name='CC2420ReceiveP____nesc_sillytask_receiveDone_task', quals=[], storage=['typedef'] (at pp.c:8959)
    ArrayDecl:  (at pp.c:8959)
      TypeDecl: declname='CC2420ReceiveP____nesc_sillytask_receiveDone_task', quals=[] (at pp.c:8959)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420ReceiveP__receiveDone_task' (at pp.c:8959)
  Typedef: name='CC2420ReceiveP__cc2420_receive_state_t', quals=[], storage=['typedef'] (at pp.c:8970)
    TypeDecl: declname='CC2420ReceiveP__cc2420_receive_state_t', quals=[] (at pp.c:8970)
      Enum: name='CC2420ReceiveP____nesc_unnamed4370' (at pp.c:8962)
        EnumeratorList:  (at pp.c:8963)
          Enumerator: name='CC2420ReceiveP__S_STOPPED' (at pp.c:8963)
          Enumerator: name='CC2420ReceiveP__S_STARTED' (at pp.c:8964)
          Enumerator: name='CC2420ReceiveP__S_RX_LENGTH' (at pp.c:8965)
          Enumerator: name='CC2420ReceiveP__S_RX_DEC' (at pp.c:8966)
          Enumerator: name='CC2420ReceiveP__S_RX_DEC_WAIT' (at pp.c:8967)
          Enumerator: name='CC2420ReceiveP__S_RX_FCF' (at pp.c:8968)
          Enumerator: name='CC2420ReceiveP__S_RX_PAYLOAD' (at pp.c:8969)
  Decl: name=None, quals=[], storage=[] (at pp.c:8972)
    Enum: name='CC2420ReceiveP____nesc_unnamed4371' (at pp.c:8972)
      EnumeratorList:  (at pp.c:8973)
        Enumerator: name='CC2420ReceiveP__RXFIFO_SIZE' (at pp.c:8973)
          Constant: type='int', value='128' (at pp.c:8973)
        Enumerator: name='CC2420ReceiveP__TIMESTAMP_QUEUE_SIZE' (at pp.c:8974)
          Constant: type='int', value='8' (at pp.c:8974)
        Enumerator: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:8975)
          Constant: type='int', value='7' (at pp.c:8975)
  Decl: name='CC2420ReceiveP__m_timestamp_queue', quals=[], storage=[] (at pp.c:8978)
    ArrayDecl:  (at pp.c:8978)
      TypeDecl: declname='CC2420ReceiveP__m_timestamp_queue', quals=[] (at pp.c:8978)
        IdentifierType: names=['uint32_t'] (at None)
      ID: name='CC2420ReceiveP__TIMESTAMP_QUEUE_SIZE' (at pp.c:8978)
  Decl: name='CC2420ReceiveP__m_timestamp_head', quals=[], storage=[] (at pp.c:8980)
    TypeDecl: declname='CC2420ReceiveP__m_timestamp_head', quals=[] (at pp.c:8980)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ReceiveP__m_timestamp_size', quals=[], storage=[] (at pp.c:8982)
    TypeDecl: declname='CC2420ReceiveP__m_timestamp_size', quals=[] (at pp.c:8982)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ReceiveP__m_missed_packets', quals=[], storage=[] (at pp.c:8988)
    TypeDecl: declname='CC2420ReceiveP__m_missed_packets', quals=[] (at pp.c:8988)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ReceiveP__receivingPacket', quals=[], storage=[] (at pp.c:8992)
    TypeDecl: declname='CC2420ReceiveP__receivingPacket', quals=[] (at pp.c:8992)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__rxFrameLength', quals=[], storage=[] (at pp.c:8995)
    TypeDecl: declname='CC2420ReceiveP__rxFrameLength', quals=[] (at pp.c:8995)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ReceiveP__m_bytes_left', quals=[], storage=[] (at pp.c:8997)
    TypeDecl: declname='CC2420ReceiveP__m_bytes_left', quals=[] (at pp.c:8997)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ReceiveP__m_p_rx_buf', quals=[], storage=[] (at pp.c:8999)
    PtrDecl: quals=[] (at pp.c:8999)
      TypeDecl: declname='CC2420ReceiveP__m_p_rx_buf', quals=[] (at pp.c:8999)
        IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ReceiveP__m_rx_buf', quals=[], storage=[] (at pp.c:9001)
    TypeDecl: declname='CC2420ReceiveP__m_rx_buf', quals=[] (at pp.c:9001)
      IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ReceiveP__m_state', quals=[], storage=[] (at pp.c:9003)
    TypeDecl: declname='CC2420ReceiveP__m_state', quals=[] (at pp.c:9003)
      IdentifierType: names=['CC2420ReceiveP__cc2420_receive_state_t'] (at None)
  Decl: name='CC2420ReceiveP__reset_state', quals=[], storage=['static'] (at pp.c:9007)
    FuncDecl: quals=None (at pp.c:9007)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__reset_state', quals=[] (at pp.c:9007)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__beginReceive', quals=[], storage=['static'] (at pp.c:9008)
    FuncDecl: quals=None (at pp.c:9008)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__beginReceive', quals=[] (at pp.c:9008)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__receive', quals=[], storage=['static'] (at pp.c:9009)
    FuncDecl: quals=None (at pp.c:9009)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__receive', quals=[] (at pp.c:9009)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__waitForNextPacket', quals=[], storage=['static'] (at pp.c:9010)
    FuncDecl: quals=None (at pp.c:9010)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__waitForNextPacket', quals=[] (at pp.c:9010)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__flush', quals=[], storage=['static'] (at pp.c:9011)
    FuncDecl: quals=None (at pp.c:9011)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__flush', quals=[] (at pp.c:9011)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__passesAddressCheck', quals=[], storage=['inline', 'static'] (at pp.c:9012)
    FuncDecl: quals=None (at pp.c:9012)
      ParamList:  (at pp.c:9012)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9012)
          PtrDecl: quals=[] (at pp.c:9012)
            TypeDecl: declname='msg', quals=[] (at pp.c:9012)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__passesAddressCheck', quals=[] (at pp.c:9012)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9017)
    FuncDecl: quals=None (at pp.c:9017)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__Init__init', quals=[] (at pp.c:9017)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__StdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:9023)
    FuncDecl: quals=None (at pp.c:9023)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__StdControl__start', quals=[] (at pp.c:9023)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__StdControl__stop', quals=[], storage=['static'] (at pp.c:9025)
    FuncDecl: quals=None (at pp.c:9025)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__StdControl__stop', quals=[] (at pp.c:9025)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Receive__sfd', quals=[], storage=['inline', 'static'] (at pp.c:9027)
    FuncDecl: quals=None (at pp.c:9027)
      ParamList:  (at pp.c:9027)
        Decl: name='time', quals=[], storage=[] (at pp.c:9027)
          TypeDecl: declname='time', quals=[] (at pp.c:9027)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd', quals=[] (at pp.c:9027)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[], storage=['inline', 'static'] (at pp.c:9036)
    FuncDecl: quals=None (at pp.c:9036)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[] (at pp.c:9036)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[], storage=['inline', 'static'] (at pp.c:9043)
    FuncDecl: quals=None (at pp.c:9043)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[] (at pp.c:9043)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__InterruptFIFOP__fired', quals=[], storage=['inline', 'static'] (at pp.c:9053)
    FuncDecl: quals=None (at pp.c:9053)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__fired', quals=[] (at pp.c:9053)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:9055)
    FuncDecl: quals=None (at pp.c:9055)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__granted', quals=[] (at pp.c:9055)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__readDone', quals=[], storage=['inline', 'static'] (at pp.c:9057)
    FuncDecl: quals=None (at pp.c:9057)
      ParamList:  (at pp.c:9057)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:9057)
          PtrDecl: quals=[] (at pp.c:9057)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:9057)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_len', quals=[], storage=[] (at pp.c:9057)
          TypeDecl: declname='rx_len', quals=[] (at pp.c:9057)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9058)
          TypeDecl: declname='error', quals=[] (at pp.c:9058)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__readDone', quals=[] (at pp.c:9057)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:9060)
    FuncDecl: quals=None (at pp.c:9060)
      ParamList:  (at pp.c:9060)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:9060)
          PtrDecl: quals=[] (at pp.c:9060)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:9060)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_len', quals=[], storage=[] (at pp.c:9060)
          TypeDecl: declname='tx_len', quals=[] (at pp.c:9060)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9060)
          TypeDecl: declname='error', quals=[] (at pp.c:9060)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__writeDone', quals=[] (at pp.c:9060)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__receiveDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:9068)
    FuncDecl: quals=None (at pp.c:9068)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__receiveDone_task__runTask', quals=[] (at pp.c:9068)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:9070)
    FuncDecl: quals=None (at pp.c:9070)
      ParamList:  (at pp.c:9070)
        Decl: name='error', quals=[], storage=[] (at pp.c:9070)
          TypeDecl: declname='error', quals=[] (at pp.c:9070)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__syncDone', quals=[] (at pp.c:9070)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__beginReceive', quals=[], storage=['static'] (at pp.c:9077)
    FuncDecl: quals=None (at pp.c:9077)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__beginReceive', quals=[] (at pp.c:9077)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__flush', quals=[], storage=['static'] (at pp.c:9079)
    FuncDecl: quals=None (at pp.c:9079)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__flush', quals=[] (at pp.c:9079)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__receive', quals=[], storage=['static'] (at pp.c:9081)
    FuncDecl: quals=None (at pp.c:9081)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__receive', quals=[] (at pp.c:9081)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__waitForNextPacket', quals=[], storage=['static'] (at pp.c:9091)
    FuncDecl: quals=None (at pp.c:9091)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__waitForNextPacket', quals=[] (at pp.c:9091)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__reset_state', quals=[], storage=['static'] (at pp.c:9093)
    FuncDecl: quals=None (at pp.c:9093)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__reset_state', quals=[] (at pp.c:9093)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__passesAddressCheck', quals=[], storage=['inline', 'static'] (at pp.c:9104)
    FuncDecl: quals=None (at pp.c:9104)
      ParamList:  (at pp.c:9104)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9104)
          PtrDecl: quals=[] (at pp.c:9104)
            TypeDecl: declname='msg', quals=[] (at pp.c:9104)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__passesAddressCheck', quals=[] (at pp.c:9104)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420PacketP__Acks__requestAck', quals=[], storage=['inline', 'static'] (at pp.c:9106)
    FuncDecl: quals=None (at pp.c:9106)
      ParamList:  (at pp.c:9106)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9106)
          PtrDecl: quals=[] (at pp.c:9106)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9106)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__requestAck', quals=[] (at pp.c:9106)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420PacketP__Acks__noAck', quals=[], storage=['inline', 'static'] (at pp.c:9111)
    FuncDecl: quals=None (at pp.c:9111)
      ParamList:  (at pp.c:9111)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9111)
          PtrDecl: quals=[] (at pp.c:9111)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9111)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__noAck', quals=[] (at pp.c:9111)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420PacketP__Acks__wasAcked', quals=[], storage=['inline', 'static'] (at pp.c:9116)
    FuncDecl: quals=None (at pp.c:9116)
      ParamList:  (at pp.c:9116)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9116)
          PtrDecl: quals=[] (at pp.c:9116)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9116)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__wasAcked', quals=[] (at pp.c:9116)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420PacketP__getAddressLength', quals=[], storage=['inline', 'static'] (at pp.c:9122)
    FuncDecl: quals=None (at pp.c:9122)
      ParamList:  (at pp.c:9122)
        Decl: name='type', quals=[], storage=[] (at pp.c:9122)
          TypeDecl: declname='type', quals=[] (at pp.c:9122)
            IdentifierType: names=['int'] (at None)
      TypeDecl: declname='CC2420PacketP__getAddressLength', quals=[] (at pp.c:9122)
        IdentifierType: names=['int'] (at None)
  Decl: name='CC2420PacketP__getNetwork', quals=[], storage=['static'] (at pp.c:9131)
    FuncDecl: quals=None (at pp.c:9131)
      ParamList:  (at pp.c:9131)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9131)
          PtrDecl: quals=[] (at pp.c:9131)
            TypeDecl: declname='msg', quals=[] (at pp.c:9131)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9131)
        TypeDecl: declname='CC2420PacketP__getNetwork', quals=[] (at pp.c:9131)
          IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420PacketP__CC2420Packet__getNetwork', quals=[], storage=['inline', 'static'] (at pp.c:9133)
    FuncDecl: quals=None (at pp.c:9133)
      ParamList:  (at pp.c:9133)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9133)
          PtrDecl: quals=[] (at pp.c:9133)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9133)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__CC2420Packet__getNetwork', quals=[] (at pp.c:9133)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420PacketP__CC2420Packet__setNetwork', quals=[], storage=['inline', 'static'] (at pp.c:9142)
    FuncDecl: quals=None (at pp.c:9142)
      ParamList:  (at pp.c:9142)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9142)
          PtrDecl: quals=[] (at pp.c:9142)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9142)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='networkId', quals=[], storage=[] (at pp.c:9142)
          TypeDecl: declname='networkId', quals=[] (at pp.c:9142)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420PacketP__CC2420Packet__setNetwork', quals=[] (at pp.c:9142)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__CC2420PacketBody__getHeader', quals=[], storage=['inline', 'static'] (at pp.c:9151)
    FuncDecl: quals=None (at pp.c:9151)
      ParamList:  (at pp.c:9151)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9151)
          PtrDecl: quals=[] (at pp.c:9151)
            TypeDecl: declname='msg', quals=[] (at pp.c:9151)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9151)
        TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9151)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[], storage=['inline', 'static'] (at pp.c:9153)
    FuncDecl: quals=None (at pp.c:9153)
      ParamList:  (at pp.c:9153)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9153)
          PtrDecl: quals=[] (at pp.c:9153)
            TypeDecl: declname='msg', quals=[] (at pp.c:9153)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9153)
        TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:9153)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[], storage=['static'] (at pp.c:9155)
    FuncDecl: quals=None (at pp.c:9155)
      ParamList:  (at pp.c:9155)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9155)
          PtrDecl: quals=[] (at pp.c:9155)
            TypeDecl: declname='msg', quals=[] (at pp.c:9155)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[] (at pp.c:9155)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__PacketTimeStamp32khz__set', quals=[], storage=['inline', 'static'] (at pp.c:9161)
    FuncDecl: quals=None (at pp.c:9161)
      ParamList:  (at pp.c:9161)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9161)
          PtrDecl: quals=[] (at pp.c:9161)
            TypeDecl: declname='msg', quals=[] (at pp.c:9161)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:9161)
          TypeDecl: declname='value', quals=[] (at pp.c:9161)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__set', quals=[] (at pp.c:9161)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[], storage=['inline', 'static'] (at pp.c:9163)
    FuncDecl: quals=None (at pp.c:9163)
      ParamList:  (at pp.c:9163)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9163)
          PtrDecl: quals=[] (at pp.c:9163)
            TypeDecl: declname='msg', quals=[] (at pp.c:9163)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[] (at pp.c:9163)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420PacketP__PacketTimeSyncOffset__get', quals=[], storage=['inline', 'static'] (at pp.c:9172)
    FuncDecl: quals=None (at pp.c:9172)
      ParamList:  (at pp.c:9172)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9172)
          PtrDecl: quals=[] (at pp.c:9172)
            TypeDecl: declname='msg', quals=[] (at pp.c:9172)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__get', quals=[] (at pp.c:9172)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CounterToLocalTimeC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:9174)
    FuncDecl: quals=None (at pp.c:9174)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CounterToLocalTimeC__0__Counter__overflow', quals=[] (at pp.c:9174)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Compare__setEvent', quals=[], storage=['static'] (at pp.c:9176)
    FuncDecl: quals=None (at pp.c:9176)
      ParamList:  (at pp.c:9176)
        Decl: name='time', quals=[], storage=[] (at pp.c:9176)
          TypeDecl: declname='time', quals=[] (at pp.c:9176)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__setEvent', quals=[] (at pp.c:9176)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Compare__setEventFromNow', quals=[], storage=['static'] (at pp.c:9178)
    FuncDecl: quals=None (at pp.c:9178)
      ParamList:  (at pp.c:9178)
        Decl: name='delta', quals=[], storage=[] (at pp.c:9178)
          TypeDecl: declname='delta', quals=[] (at pp.c:9178)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__setEventFromNow', quals=[] (at pp.c:9178)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Timer__get', quals=[], storage=['static'] (at pp.c:9180)
    FuncDecl: quals=None (at pp.c:9180)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Timer__get', quals=[] (at pp.c:9180)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430AlarmC__1__Alarm__fired', quals=[], storage=['static'] (at pp.c:9182)
    FuncDecl: quals=None (at pp.c:9182)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Alarm__fired', quals=[] (at pp.c:9182)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430TimerControl__enableEvents', quals=[], storage=['static'] (at pp.c:9184)
    FuncDecl: quals=None (at pp.c:9184)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__enableEvents', quals=[] (at pp.c:9184)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430TimerControl__setControlAsCompare', quals=[], storage=['static'] (at pp.c:9186)
    FuncDecl: quals=None (at pp.c:9186)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__setControlAsCompare', quals=[] (at pp.c:9186)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430TimerControl__disableEvents', quals=[], storage=['static'] (at pp.c:9197)
    FuncDecl: quals=None (at pp.c:9197)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__disableEvents', quals=[] (at pp.c:9197)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:9199)
    FuncDecl: quals=None (at pp.c:9199)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:9199)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9201)
    FuncDecl: quals=None (at pp.c:9201)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Init__init', quals=[] (at pp.c:9201)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430AlarmC__1__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:9203)
    FuncDecl: quals=None (at pp.c:9203)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Alarm__stop', quals=[] (at pp.c:9203)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Compare__fired', quals=[], storage=['inline', 'static'] (at pp.c:9208)
    FuncDecl: quals=None (at pp.c:9208)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__fired', quals=[] (at pp.c:9208)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Alarm__startAt', quals=[], storage=['inline', 'static'] (at pp.c:9219)
    FuncDecl: quals=None (at pp.c:9219)
      ParamList:  (at pp.c:9219)
        Decl: name='t0', quals=[], storage=[] (at pp.c:9219)
          TypeDecl: declname='t0', quals=[] (at pp.c:9219)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9219)
          TypeDecl: declname='dt', quals=[] (at pp.c:9219)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Alarm__startAt', quals=[] (at pp.c:9219)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:9221)
    FuncDecl: quals=None (at pp.c:9221)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Timer__overflow', quals=[] (at pp.c:9221)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__1__CounterFrom__get', quals=[], storage=['static'] (at pp.c:9223)
    FuncDecl: quals=None (at pp.c:9223)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__CounterFrom__get', quals=[] (at pp.c:9223)
        IdentifierType: names=['TransformCounterC__1__CounterFrom__size_type'] (at None)
  Decl: name='TransformCounterC__1__CounterFrom__isOverflowPending', quals=[], storage=['static'] (at pp.c:9230)
    FuncDecl: quals=None (at pp.c:9230)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__CounterFrom__isOverflowPending', quals=[] (at pp.c:9230)
        IdentifierType: names=['bool'] (at None)
  Decl: name='TransformCounterC__1__Counter__overflow', quals=[], storage=['static'] (at pp.c:9241)
    FuncDecl: quals=None (at pp.c:9241)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__Counter__overflow', quals=[] (at pp.c:9241)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__1__m_upper', quals=[], storage=[] (at pp.c:9243)
    TypeDecl: declname='TransformCounterC__1__m_upper', quals=[] (at pp.c:9243)
      IdentifierType: names=['TransformCounterC__1__upper_count_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9245)
    Enum: name='TransformCounterC__1____nesc_unnamed4372' (at pp.c:9245)
      EnumeratorList:  (at pp.c:9247)
        Enumerator: name='TransformCounterC__1__LOW_SHIFT_RIGHT' (at pp.c:9247)
          Constant: type='int', value='5' (at pp.c:9247)
        Enumerator: name='TransformCounterC__1__HIGH_SHIFT_LEFT' (at pp.c:9248)
          BinaryOp: op='-' (at pp.c:9248)
            BinaryOp: op='*' (at pp.c:9248)
              Constant: type='int', value='8' (at pp.c:9248)
              UnaryOp: op='sizeof' (at pp.c:9248)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['TransformCounterC__1__from_size_type'] (at None)
            ID: name='TransformCounterC__1__LOW_SHIFT_RIGHT' (at pp.c:9248)
        Enumerator: name='TransformCounterC__1__NUM_UPPER_BITS' (at pp.c:9249)
          BinaryOp: op='+' (at pp.c:9249)
            BinaryOp: op='-' (at pp.c:9249)
              BinaryOp: op='*' (at pp.c:9249)
                Constant: type='int', value='8' (at pp.c:9249)
                UnaryOp: op='sizeof' (at pp.c:9249)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
              BinaryOp: op='*' (at pp.c:9249)
                Constant: type='int', value='8' (at pp.c:9249)
                UnaryOp: op='sizeof' (at pp.c:9249)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__1__from_size_type'] (at None)
            Constant: type='int', value='5' (at pp.c:9249)
        Enumerator: name='TransformCounterC__1__OVERFLOW_MASK' (at pp.c:9253)
          TernaryOp:  (at pp.c:9253)
            ID: name='TransformCounterC__1__NUM_UPPER_BITS' (at pp.c:9253)
            BinaryOp: op='-' (at None)
              BinaryOp: op='<<' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__1__upper_count_type'] (at None)
                  Constant: type='int', value='2' (at pp.c:9253)
                BinaryOp: op='-' (at pp.c:9253)
                  ID: name='TransformCounterC__1__NUM_UPPER_BITS' (at pp.c:9253)
                  Constant: type='int', value='1' (at pp.c:9253)
              Constant: type='int', value='1' (at pp.c:9253)
            Constant: type='int', value='0' (at pp.c:9253)
  Decl: name='TransformCounterC__1__Counter__get', quals=[], storage=['static'] (at pp.c:9256)
    FuncDecl: quals=None (at pp.c:9256)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__Counter__get', quals=[] (at pp.c:9256)
        IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
  Decl: name='TransformCounterC__1__CounterFrom__overflow', quals=[], storage=['inline', 'static'] (at pp.c:9258)
    FuncDecl: quals=None (at pp.c:9258)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__CounterFrom__overflow', quals=[] (at pp.c:9258)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__fired', quals=[], storage=['static'] (at pp.c:9260)
    FuncDecl: quals=None (at pp.c:9260)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__fired', quals=[] (at pp.c:9260)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__AlarmFrom__startAt', quals=[], storage=['static'] (at pp.c:9262)
    FuncDecl: quals=None (at pp.c:9262)
      ParamList:  (at pp.c:9262)
        Decl: name='t0', quals=[], storage=[] (at pp.c:9262)
          TypeDecl: declname='t0', quals=[] (at pp.c:9262)
            IdentifierType: names=['TransformAlarmC__1__AlarmFrom__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9262)
          TypeDecl: declname='dt', quals=[] (at pp.c:9262)
            IdentifierType: names=['TransformAlarmC__1__AlarmFrom__size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__1__AlarmFrom__startAt', quals=[] (at pp.c:9262)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__AlarmFrom__stop', quals=[], storage=['static'] (at pp.c:9264)
    FuncDecl: quals=None (at pp.c:9264)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__AlarmFrom__stop', quals=[] (at pp.c:9264)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Counter__get', quals=[], storage=['static'] (at pp.c:9266)
    FuncDecl: quals=None (at pp.c:9266)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Counter__get', quals=[] (at pp.c:9266)
        IdentifierType: names=['TransformAlarmC__1__Counter__size_type'] (at None)
  Decl: name='TransformAlarmC__1__m_t0', quals=[], storage=[] (at pp.c:9268)
    TypeDecl: declname='TransformAlarmC__1__m_t0', quals=[] (at pp.c:9268)
      IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Decl: name='TransformAlarmC__1__m_dt', quals=[], storage=[] (at pp.c:9269)
    TypeDecl: declname='TransformAlarmC__1__m_dt', quals=[] (at pp.c:9269)
      IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9271)
    Enum: name='TransformAlarmC__1____nesc_unnamed4373' (at pp.c:9271)
      EnumeratorList:  (at pp.c:9273)
        Enumerator: name='TransformAlarmC__1__MAX_DELAY_LOG2' (at pp.c:9273)
          BinaryOp: op='-' (at pp.c:9273)
            BinaryOp: op='-' (at pp.c:9273)
              BinaryOp: op='*' (at pp.c:9273)
                Constant: type='int', value='8' (at pp.c:9273)
                UnaryOp: op='sizeof' (at pp.c:9273)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformAlarmC__1__from_size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:9273)
            Constant: type='int', value='5' (at pp.c:9273)
        Enumerator: name='TransformAlarmC__1__MAX_DELAY' (at pp.c:9274)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:9274)
            ID: name='TransformAlarmC__1__MAX_DELAY_LOG2' (at pp.c:9274)
  Decl: name='TransformAlarmC__1__Alarm__getNow', quals=[], storage=['inline', 'static'] (at pp.c:9277)
    FuncDecl: quals=None (at pp.c:9277)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__getNow', quals=[] (at pp.c:9277)
        IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__getAlarm', quals=[], storage=['inline', 'static'] (at pp.c:9282)
    FuncDecl: quals=None (at pp.c:9282)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__getAlarm', quals=[] (at pp.c:9282)
        IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:9293)
    FuncDecl: quals=None (at pp.c:9293)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__stop', quals=[] (at pp.c:9293)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__set_alarm', quals=[], storage=['static'] (at pp.c:9298)
    FuncDecl: quals=None (at pp.c:9298)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__set_alarm', quals=[] (at pp.c:9298)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__startAt', quals=[], storage=['static'] (at pp.c:9300)
    FuncDecl: quals=None (at pp.c:9300)
      ParamList:  (at pp.c:9300)
        Decl: name='t0', quals=[], storage=[] (at pp.c:9300)
          TypeDecl: declname='t0', quals=[] (at pp.c:9300)
            IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9300)
          TypeDecl: declname='dt', quals=[] (at pp.c:9300)
            IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__startAt', quals=[] (at pp.c:9300)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__AlarmFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:9302)
    FuncDecl: quals=None (at pp.c:9302)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__AlarmFrom__fired', quals=[] (at pp.c:9302)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:9304)
    FuncDecl: quals=None (at pp.c:9304)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Counter__overflow', quals=[] (at pp.c:9304)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__fired__postTask', quals=[], storage=['static'] (at pp.c:9306)
    FuncDecl: quals=None (at pp.c:9306)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__fired__postTask', quals=[] (at pp.c:9306)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__getNow', quals=[], storage=['static'] (at pp.c:9308)
    FuncDecl: quals=None (at pp.c:9308)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__getNow', quals=[] (at pp.c:9308)
        IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__startAt', quals=[], storage=['static'] (at pp.c:9310)
    FuncDecl: quals=None (at pp.c:9310)
      ParamList:  (at pp.c:9310)
        Decl: name='t0', quals=[], storage=[] (at pp.c:9310)
          TypeDecl: declname='t0', quals=[] (at pp.c:9310)
            IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9310)
          TypeDecl: declname='dt', quals=[] (at pp.c:9310)
            IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__startAt', quals=[] (at pp.c:9310)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__getAlarm', quals=[], storage=['static'] (at pp.c:9312)
    FuncDecl: quals=None (at pp.c:9312)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__getAlarm', quals=[] (at pp.c:9312)
        IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__stop', quals=[], storage=['static'] (at pp.c:9314)
    FuncDecl: quals=None (at pp.c:9314)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__stop', quals=[] (at pp.c:9314)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__fired', quals=[], storage=['static'] (at pp.c:9316)
    FuncDecl: quals=None (at pp.c:9316)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__fired', quals=[] (at pp.c:9316)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9318)
    Enum: name='AlarmToTimerC__0____nesc_unnamed4374' (at pp.c:9318)
      EnumeratorList:  (at pp.c:9320)
        Enumerator: name='AlarmToTimerC__0__fired' (at pp.c:9320)
          Constant: type='int', value='16U' (at pp.c:9320)
  Typedef: name='AlarmToTimerC__0____nesc_sillytask_fired', quals=[], storage=['typedef'] (at pp.c:9323)
    ArrayDecl:  (at pp.c:9323)
      TypeDecl: declname='AlarmToTimerC__0____nesc_sillytask_fired', quals=[] (at pp.c:9323)
        IdentifierType: names=['int'] (at None)
      ID: name='AlarmToTimerC__0__fired' (at pp.c:9323)
  Decl: name='AlarmToTimerC__0__m_dt', quals=[], storage=[] (at pp.c:9325)
    TypeDecl: declname='AlarmToTimerC__0__m_dt', quals=[] (at pp.c:9325)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name='AlarmToTimerC__0__m_oneshot', quals=[], storage=[] (at pp.c:9326)
    TypeDecl: declname='AlarmToTimerC__0__m_oneshot', quals=[] (at pp.c:9326)
      IdentifierType: names=['bool'] (at None)
  Decl: name='AlarmToTimerC__0__start', quals=[], storage=['inline', 'static'] (at pp.c:9328)
    FuncDecl: quals=None (at pp.c:9328)
      ParamList:  (at pp.c:9328)
        Decl: name='t0', quals=[], storage=[] (at pp.c:9328)
          TypeDecl: declname='t0', quals=[] (at pp.c:9328)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9328)
          TypeDecl: declname='dt', quals=[] (at pp.c:9328)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='oneshot', quals=[], storage=[] (at pp.c:9328)
          TypeDecl: declname='oneshot', quals=[] (at pp.c:9328)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__start', quals=[] (at pp.c:9328)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__stop', quals=[], storage=['inline', 'static'] (at pp.c:9330)
    FuncDecl: quals=None (at pp.c:9330)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__stop', quals=[] (at pp.c:9330)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__fired__runTask', quals=[], storage=['inline', 'static'] (at pp.c:9333)
    FuncDecl: quals=None (at pp.c:9333)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__fired__runTask', quals=[] (at pp.c:9333)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__fired', quals=[], storage=['inline', 'static'] (at pp.c:9340)
    FuncDecl: quals=None (at pp.c:9340)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__fired', quals=[] (at pp.c:9340)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__startOneShotAt', quals=[], storage=['inline', 'static'] (at pp.c:9342)
    FuncDecl: quals=None (at pp.c:9342)
      ParamList:  (at pp.c:9342)
        Decl: name='t0', quals=[], storage=[] (at pp.c:9342)
          TypeDecl: declname='t0', quals=[] (at pp.c:9342)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9342)
          TypeDecl: declname='dt', quals=[] (at pp.c:9342)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__startOneShotAt', quals=[] (at pp.c:9342)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__getNow', quals=[], storage=['inline', 'static'] (at pp.c:9345)
    FuncDecl: quals=None (at pp.c:9345)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__getNow', quals=[] (at pp.c:9345)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='VirtualizeTimerC__0__updateFromTimer__postTask', quals=[], storage=['static'] (at pp.c:9347)
    FuncDecl: quals=None (at pp.c:9347)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__updateFromTimer__postTask', quals=[] (at pp.c:9347)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='VirtualizeTimerC__0__TimerFrom__getNow', quals=[], storage=['static'] (at pp.c:9349)
    FuncDecl: quals=None (at pp.c:9349)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__getNow', quals=[] (at pp.c:9349)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='VirtualizeTimerC__0__TimerFrom__startOneShotAt', quals=[], storage=['static'] (at pp.c:9351)
    FuncDecl: quals=None (at pp.c:9351)
      ParamList:  (at pp.c:9351)
        Decl: name='t0', quals=[], storage=[] (at pp.c:9351)
          TypeDecl: declname='t0', quals=[] (at pp.c:9351)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9351)
          TypeDecl: declname='dt', quals=[] (at pp.c:9351)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__startOneShotAt', quals=[] (at pp.c:9351)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__TimerFrom__stop', quals=[], storage=['static'] (at pp.c:9353)
    FuncDecl: quals=None (at pp.c:9353)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__stop', quals=[] (at pp.c:9353)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__fired', quals=[], storage=['static'] (at pp.c:9358)
    FuncDecl: quals=None (at pp.c:9358)
      ParamList:  (at pp.c:9360)
        Decl: name='arg_0x1028742f8', quals=[], storage=[] (at pp.c:9360)
          TypeDecl: declname='arg_0x1028742f8', quals=[] (at pp.c:9360)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__fired', quals=[] (at pp.c:9358)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9362)
    Enum: name='VirtualizeTimerC__0____nesc_unnamed4375' (at pp.c:9362)
      EnumeratorList:  (at pp.c:9364)
        Enumerator: name='VirtualizeTimerC__0__updateFromTimer' (at pp.c:9364)
          Constant: type='int', value='17U' (at pp.c:9364)
  Typedef: name='VirtualizeTimerC__0____nesc_sillytask_updateFromTimer', quals=[], storage=['typedef'] (at pp.c:9367)
    ArrayDecl:  (at pp.c:9367)
      TypeDecl: declname='VirtualizeTimerC__0____nesc_sillytask_updateFromTimer', quals=[] (at pp.c:9367)
        IdentifierType: names=['int'] (at None)
      ID: name='VirtualizeTimerC__0__updateFromTimer' (at pp.c:9367)
  Decl: name=None, quals=[], storage=[] (at pp.c:9369)
    Enum: name='VirtualizeTimerC__0____nesc_unnamed4376' (at pp.c:9369)
      EnumeratorList:  (at pp.c:9371)
        Enumerator: name='VirtualizeTimerC__0__NUM_TIMERS' (at pp.c:9371)
          Constant: type='int', value='5U' (at pp.c:9371)
        Enumerator: name='VirtualizeTimerC__0__END_OF_LIST' (at pp.c:9372)
          Constant: type='int', value='255' (at pp.c:9372)
  Typedef: name='VirtualizeTimerC__0__Timer_t', quals=[], storage=['typedef'] (at pp.c:9390)
    TypeDecl: declname='VirtualizeTimerC__0__Timer_t', quals=[] (at pp.c:9390)
      Struct: name='VirtualizeTimerC__0____nesc_unnamed4377', packed=False (at pp.c:9383)
        Decl: name='t0', quals=[], storage=[] (at 0)
          TypeDecl: declname='t0', quals=[] (at pp.c:9385)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at 0)
          TypeDecl: declname='dt', quals=[] (at pp.c:9386)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='isoneshot', quals=[], storage=[] (at 0)
          TypeDecl: declname='isoneshot', quals=[] (at pp.c:9387)
            IdentifierType: names=['bool'] (at None)
          Constant: type='int', value='1' (at pp.c:9387)
        Decl: name='isrunning', quals=[], storage=[] (at 0)
          TypeDecl: declname='isrunning', quals=[] (at pp.c:9388)
            IdentifierType: names=['bool'] (at None)
          Constant: type='int', value='1' (at pp.c:9388)
        Decl: name='_reserved', quals=[], storage=[] (at 0)
          TypeDecl: declname='_reserved', quals=[] (at pp.c:9389)
            IdentifierType: names=['bool'] (at None)
          Constant: type='int', value='6' (at pp.c:9389)
  Decl: name='VirtualizeTimerC__0__m_timers', quals=[], storage=[] (at pp.c:9392)
    ArrayDecl:  (at pp.c:9392)
      TypeDecl: declname='VirtualizeTimerC__0__m_timers', quals=[] (at pp.c:9392)
        IdentifierType: names=['VirtualizeTimerC__0__Timer_t'] (at None)
      ID: name='VirtualizeTimerC__0__NUM_TIMERS' (at pp.c:9392)
  Decl: name='VirtualizeTimerC__0__fireTimers', quals=[], storage=['static'] (at pp.c:9397)
    FuncDecl: quals=None (at pp.c:9397)
      ParamList:  (at pp.c:9397)
        Decl: name='now', quals=[], storage=[] (at pp.c:9397)
          TypeDecl: declname='now', quals=[] (at pp.c:9397)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__fireTimers', quals=[] (at pp.c:9397)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[], storage=['inline', 'static'] (at pp.c:9399)
    FuncDecl: quals=None (at pp.c:9399)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[] (at pp.c:9399)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__TimerFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:9401)
    FuncDecl: quals=None (at pp.c:9401)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__fired', quals=[] (at pp.c:9401)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__startTimer', quals=[], storage=['static'] (at pp.c:9406)
    FuncDecl: quals=None (at pp.c:9406)
      ParamList:  (at pp.c:9406)
        Decl: name='num', quals=[], storage=[] (at pp.c:9406)
          TypeDecl: declname='num', quals=[] (at pp.c:9406)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='t0', quals=[], storage=[] (at pp.c:9406)
          TypeDecl: declname='t0', quals=[] (at pp.c:9406)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9406)
          TypeDecl: declname='dt', quals=[] (at pp.c:9406)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='isoneshot', quals=[], storage=[] (at pp.c:9406)
          TypeDecl: declname='isoneshot', quals=[] (at pp.c:9406)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__startTimer', quals=[] (at pp.c:9406)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__startOneShot', quals=[], storage=['inline', 'static'] (at pp.c:9408)
    FuncDecl: quals=None (at pp.c:9408)
      ParamList:  (at pp.c:9408)
        Decl: name='num', quals=[], storage=[] (at pp.c:9408)
          TypeDecl: declname='num', quals=[] (at pp.c:9408)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9408)
          TypeDecl: declname='dt', quals=[] (at pp.c:9408)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__startOneShot', quals=[] (at pp.c:9408)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__stop', quals=[], storage=['inline', 'static'] (at pp.c:9413)
    FuncDecl: quals=None (at pp.c:9413)
      ParamList:  (at pp.c:9413)
        Decl: name='num', quals=[], storage=[] (at pp.c:9413)
          TypeDecl: declname='num', quals=[] (at pp.c:9413)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__stop', quals=[] (at pp.c:9413)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__isRunning', quals=[], storage=['inline', 'static'] (at pp.c:9418)
    FuncDecl: quals=None (at pp.c:9418)
      ParamList:  (at pp.c:9418)
        Decl: name='num', quals=[], storage=[] (at pp.c:9418)
          TypeDecl: declname='num', quals=[] (at pp.c:9418)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__isRunning', quals=[] (at pp.c:9418)
        IdentifierType: names=['bool'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:9420)
    FuncDecl: quals=None (at pp.c:9420)
      ParamList:  (at pp.c:9420)
        Decl: name='num', quals=[], storage=[] (at pp.c:9420)
          TypeDecl: declname='num', quals=[] (at pp.c:9420)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__default__fired', quals=[] (at pp.c:9420)
        IdentifierType: names=['void'] (at None)
  Decl: name='CounterToLocalTimeC__1__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:9422)
    FuncDecl: quals=None (at pp.c:9422)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CounterToLocalTimeC__1__Counter__overflow', quals=[] (at pp.c:9422)
        IdentifierType: names=['void'] (at None)
  Decl: name='RandomMlcgC__seed', quals=[], storage=[] (at pp.c:9424)
    TypeDecl: declname='RandomMlcgC__seed', quals=[] (at pp.c:9424)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name='RandomMlcgC__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9427)
    FuncDecl: quals=None (at pp.c:9427)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Init__init', quals=[] (at pp.c:9427)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='RandomMlcgC__Random__rand32', quals=[], storage=['static'] (at pp.c:9429)
    FuncDecl: quals=None (at pp.c:9429)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Random__rand32', quals=[] (at pp.c:9429)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='RandomMlcgC__Random__rand16', quals=[], storage=['inline', 'static'] (at pp.c:9431)
    FuncDecl: quals=None (at pp.c:9431)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Random__rand16', quals=[] (at pp.c:9431)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='UniqueSendP__SubSend__send', quals=[], storage=['static'] (at pp.c:9433)
    FuncDecl: quals=None (at pp.c:9433)
      ParamList:  (at pp.c:9435)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9435)
          PtrDecl: quals=[] (at pp.c:9435)
            TypeDecl: declname='msg', quals=[] (at pp.c:9435)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9443)
          TypeDecl: declname='len', quals=[] (at pp.c:9443)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueSendP__SubSend__send', quals=[] (at pp.c:9433)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__SubSend__maxPayloadLength', quals=[], storage=['static'] (at pp.c:9445)
    FuncDecl: quals=None (at pp.c:9445)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__SubSend__maxPayloadLength', quals=[] (at pp.c:9445)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='UniqueSendP__Send__sendDone', quals=[], storage=['static'] (at pp.c:9447)
    FuncDecl: quals=None (at pp.c:9447)
      ParamList:  (at pp.c:9449)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9449)
          PtrDecl: quals=[] (at pp.c:9449)
            TypeDecl: declname='msg', quals=[] (at pp.c:9449)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9453)
          TypeDecl: declname='error', quals=[] (at pp.c:9453)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='UniqueSendP__Send__sendDone', quals=[] (at pp.c:9447)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueSendP__Random__rand16', quals=[], storage=['static'] (at pp.c:9455)
    FuncDecl: quals=None (at pp.c:9455)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__Random__rand16', quals=[] (at pp.c:9455)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='UniqueSendP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:9457)
    FuncDecl: quals=None (at pp.c:9457)
      ParamList:  (at pp.c:9457)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9457)
          PtrDecl: quals=[] (at pp.c:9457)
            TypeDecl: declname='msg', quals=[] (at pp.c:9457)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9457)
        TypeDecl: declname='UniqueSendP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9457)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='UniqueSendP__State__toIdle', quals=[], storage=['static'] (at pp.c:9459)
    FuncDecl: quals=None (at pp.c:9459)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__State__toIdle', quals=[] (at pp.c:9459)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueSendP__State__requestState', quals=[], storage=['static'] (at pp.c:9461)
    FuncDecl: quals=None (at pp.c:9461)
      ParamList:  (at pp.c:9461)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:9461)
          TypeDecl: declname='reqState', quals=[] (at pp.c:9461)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueSendP__State__requestState', quals=[] (at pp.c:9461)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__localSendId', quals=[], storage=[] (at pp.c:9463)
    TypeDecl: declname='UniqueSendP__localSendId', quals=[] (at pp.c:9463)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9465)
    Enum: name='UniqueSendP____nesc_unnamed4378' (at pp.c:9465)
      EnumeratorList:  (at pp.c:9466)
        Enumerator: name='UniqueSendP__S_IDLE' (at pp.c:9466)
        Enumerator: name='UniqueSendP__S_SENDING' (at pp.c:9467)
  Decl: name='UniqueSendP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9471)
    FuncDecl: quals=None (at pp.c:9471)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__Init__init', quals=[] (at pp.c:9471)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:9473)
    FuncDecl: quals=None (at pp.c:9473)
      ParamList:  (at pp.c:9473)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9473)
          PtrDecl: quals=[] (at pp.c:9473)
            TypeDecl: declname='msg', quals=[] (at pp.c:9473)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9473)
          TypeDecl: declname='len', quals=[] (at pp.c:9473)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueSendP__Send__send', quals=[] (at pp.c:9473)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:9475)
    FuncDecl: quals=None (at pp.c:9475)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__Send__maxPayloadLength', quals=[] (at pp.c:9475)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='UniqueSendP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:9484)
    FuncDecl: quals=None (at pp.c:9484)
      ParamList:  (at pp.c:9484)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9484)
          PtrDecl: quals=[] (at pp.c:9484)
            TypeDecl: declname='msg', quals=[] (at pp.c:9484)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9484)
          TypeDecl: declname='error', quals=[] (at pp.c:9484)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='UniqueSendP__SubSend__sendDone', quals=[] (at pp.c:9484)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueReceiveP__Receive__receive', quals=[], storage=['static'] (at pp.c:9492)
    FuncDecl: quals=None (at pp.c:9492)
      ParamList:  (at pp.c:9494)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9494)
          PtrDecl: quals=[] (at pp.c:9494)
            TypeDecl: declname='msg', quals=[] (at pp.c:9494)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9495)
          PtrDecl: quals=[] (at pp.c:9495)
            TypeDecl: declname='payload', quals=[] (at pp.c:9495)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9501)
          TypeDecl: declname='len', quals=[] (at pp.c:9501)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9488)
        TypeDecl: declname='UniqueReceiveP__Receive__receive', quals=[] (at pp.c:9492)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='UniqueReceiveP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:9503)
    FuncDecl: quals=None (at pp.c:9503)
      ParamList:  (at pp.c:9503)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9503)
          PtrDecl: quals=[] (at pp.c:9503)
            TypeDecl: declname='msg', quals=[] (at pp.c:9503)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9503)
        TypeDecl: declname='UniqueReceiveP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9503)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='UniqueReceiveP__DuplicateReceive__receive', quals=[], storage=['static'] (at pp.c:9511)
    FuncDecl: quals=None (at pp.c:9511)
      ParamList:  (at pp.c:9513)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9513)
          PtrDecl: quals=[] (at pp.c:9513)
            TypeDecl: declname='msg', quals=[] (at pp.c:9513)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9514)
          PtrDecl: quals=[] (at pp.c:9514)
            TypeDecl: declname='payload', quals=[] (at pp.c:9514)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9520)
          TypeDecl: declname='len', quals=[] (at pp.c:9520)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9507)
        TypeDecl: declname='UniqueReceiveP__DuplicateReceive__receive', quals=[] (at pp.c:9511)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='UniqueReceiveP__receivedMessages', quals=[], storage=[] (at pp.c:9526)
    ArrayDecl:  (at pp.c:9526)
      TypeDecl: declname='UniqueReceiveP__receivedMessages', quals=[] (at pp.c:9526)
        Struct: name='UniqueReceiveP____nesc_unnamed4379', packed=False (at pp.c:9523)
          Decl: name='source', quals=[], storage=[] (at 0)
            TypeDecl: declname='source', quals=[] (at pp.c:9524)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='dsn', quals=[], storage=[] (at 0)
            TypeDecl: declname='dsn', quals=[] (at pp.c:9525)
              IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='4' (at pp.c:9526)
  Decl: name='UniqueReceiveP__writeIndex', quals=[], storage=[] (at pp.c:9528)
    TypeDecl: declname='UniqueReceiveP__writeIndex', quals=[] (at pp.c:9528)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:9528)
  Decl: name='UniqueReceiveP__recycleSourceElement', quals=[], storage=[] (at pp.c:9531)
    TypeDecl: declname='UniqueReceiveP__recycleSourceElement', quals=[] (at pp.c:9531)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9533)
    Enum: name='UniqueReceiveP____nesc_unnamed4380' (at pp.c:9533)
      EnumeratorList:  (at pp.c:9534)
        Enumerator: name='UniqueReceiveP__INVALID_ELEMENT' (at pp.c:9534)
          Constant: type='int', value='0xFF' (at pp.c:9534)
  Decl: name='UniqueReceiveP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9538)
    FuncDecl: quals=None (at pp.c:9538)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueReceiveP__Init__init', quals=[] (at pp.c:9538)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueReceiveP__hasSeen', quals=[], storage=['inline', 'static'] (at pp.c:9548)
    FuncDecl: quals=None (at pp.c:9548)
      ParamList:  (at pp.c:9548)
        Decl: name='msgSource', quals=[], storage=[] (at pp.c:9548)
          TypeDecl: declname='msgSource', quals=[] (at pp.c:9548)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='msgDsn', quals=[], storage=[] (at pp.c:9548)
          TypeDecl: declname='msgDsn', quals=[] (at pp.c:9548)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__hasSeen', quals=[] (at pp.c:9548)
        IdentifierType: names=['bool'] (at None)
  Decl: name='UniqueReceiveP__insert', quals=[], storage=['inline', 'static'] (at pp.c:9549)
    FuncDecl: quals=None (at pp.c:9549)
      ParamList:  (at pp.c:9549)
        Decl: name='msgSource', quals=[], storage=[] (at pp.c:9549)
          TypeDecl: declname='msgSource', quals=[] (at pp.c:9549)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='msgDsn', quals=[], storage=[] (at pp.c:9549)
          TypeDecl: declname='msgDsn', quals=[] (at pp.c:9549)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__insert', quals=[] (at pp.c:9549)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueReceiveP__getSourceKey', quals=[], storage=['inline', 'static'] (at pp.c:9550)
    FuncDecl: quals=None (at pp.c:9550)
      ParamList:  (at pp.c:9550)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9550)
          PtrDecl: quals=[] (at pp.c:9550)
            TypeDecl: declname='msg', quals=[] (at pp.c:9550)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__getSourceKey', quals=[] (at pp.c:9550)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='UniqueReceiveP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:9553)
    FuncDecl: quals=None (at pp.c:9553)
      ParamList:  (at pp.c:9553)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9553)
          PtrDecl: quals=[] (at pp.c:9553)
            TypeDecl: declname='msg', quals=[] (at pp.c:9553)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9553)
          PtrDecl: quals=[] (at pp.c:9553)
            TypeDecl: declname='payload', quals=[] (at pp.c:9553)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9554)
          TypeDecl: declname='len', quals=[] (at pp.c:9554)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9553)
        TypeDecl: declname='UniqueReceiveP__SubReceive__receive', quals=[] (at pp.c:9553)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='UniqueReceiveP__hasSeen', quals=[], storage=['inline', 'static'] (at pp.c:9556)
    FuncDecl: quals=None (at pp.c:9556)
      ParamList:  (at pp.c:9556)
        Decl: name='msgSource', quals=[], storage=[] (at pp.c:9556)
          TypeDecl: declname='msgSource', quals=[] (at pp.c:9556)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='msgDsn', quals=[], storage=[] (at pp.c:9556)
          TypeDecl: declname='msgDsn', quals=[] (at pp.c:9556)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__hasSeen', quals=[] (at pp.c:9556)
        IdentifierType: names=['bool'] (at None)
  Decl: name='UniqueReceiveP__insert', quals=[], storage=['inline', 'static'] (at pp.c:9558)
    FuncDecl: quals=None (at pp.c:9558)
      ParamList:  (at pp.c:9558)
        Decl: name='msgSource', quals=[], storage=[] (at pp.c:9558)
          TypeDecl: declname='msgSource', quals=[] (at pp.c:9558)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='msgDsn', quals=[], storage=[] (at pp.c:9558)
          TypeDecl: declname='msgDsn', quals=[] (at pp.c:9558)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__insert', quals=[] (at pp.c:9558)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueReceiveP__getSourceKey', quals=[], storage=['inline', 'static'] (at pp.c:9560)
    FuncDecl: quals=None (at pp.c:9560)
      ParamList:  (at pp.c:9560)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9560)
          PtrDecl: quals=[] (at pp.c:9560)
            TypeDecl: declname='msg', quals=[] (at pp.c:9560)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__getSourceKey', quals=[] (at pp.c:9560)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='UniqueReceiveP__DuplicateReceive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:9562)
    FuncDecl: quals=None (at pp.c:9562)
      ParamList:  (at pp.c:9562)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9562)
          PtrDecl: quals=[] (at pp.c:9562)
            TypeDecl: declname='msg', quals=[] (at pp.c:9562)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9562)
          PtrDecl: quals=[] (at pp.c:9562)
            TypeDecl: declname='payload', quals=[] (at pp.c:9562)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9562)
          TypeDecl: declname='len', quals=[] (at pp.c:9562)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9562)
        TypeDecl: declname='UniqueReceiveP__DuplicateReceive__default__receive', quals=[] (at pp.c:9562)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubSend__send', quals=[], storage=['static'] (at pp.c:9564)
    FuncDecl: quals=None (at pp.c:9564)
      ParamList:  (at pp.c:9566)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9566)
          PtrDecl: quals=[] (at pp.c:9566)
            TypeDecl: declname='msg', quals=[] (at pp.c:9566)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9574)
          TypeDecl: declname='len', quals=[] (at pp.c:9574)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__SubSend__send', quals=[] (at pp.c:9564)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubSend__maxPayloadLength', quals=[], storage=['static'] (at pp.c:9576)
    FuncDecl: quals=None (at pp.c:9576)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__SubSend__maxPayloadLength', quals=[] (at pp.c:9576)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__grantTask__postTask', quals=[], storage=['static'] (at pp.c:9578)
    FuncDecl: quals=None (at pp.c:9578)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__grantTask__postTask', quals=[] (at pp.c:9578)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__CC2420Packet__setNetwork', quals=[], storage=['static'] (at pp.c:9580)
    FuncDecl: quals=None (at pp.c:9580)
      ParamList:  (at pp.c:9580)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9580)
          PtrDecl: quals=[] (at pp.c:9580)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9580)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='networkId', quals=[], storage=[] (at pp.c:9580)
          TypeDecl: declname='networkId', quals=[] (at pp.c:9580)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__CC2420Packet__setNetwork', quals=[] (at pp.c:9580)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__CC2420Packet__getNetwork', quals=[], storage=['static'] (at pp.c:9582)
    FuncDecl: quals=None (at pp.c:9582)
      ParamList:  (at pp.c:9582)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9582)
          PtrDecl: quals=[] (at pp.c:9582)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9582)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__CC2420Packet__getNetwork', quals=[] (at pp.c:9582)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__sendDone', quals=[], storage=['static'] (at pp.c:9584)
    FuncDecl: quals=None (at pp.c:9584)
      ParamList:  (at pp.c:9586)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9586)
          PtrDecl: quals=[] (at pp.c:9586)
            TypeDecl: declname='msg', quals=[] (at pp.c:9586)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9590)
          TypeDecl: declname='error', quals=[] (at pp.c:9590)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__sendDone', quals=[] (at pp.c:9584)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__Queue__enqueue', quals=[], storage=['static'] (at pp.c:9592)
    FuncDecl: quals=None (at pp.c:9592)
      ParamList:  (at pp.c:9592)
        Decl: name='id', quals=[], storage=[] (at pp.c:9592)
          TypeDecl: declname='id', quals=[] (at pp.c:9592)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Queue__enqueue', quals=[] (at pp.c:9592)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Queue__isEmpty', quals=[], storage=['static'] (at pp.c:9594)
    FuncDecl: quals=None (at pp.c:9594)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Queue__isEmpty', quals=[] (at pp.c:9594)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TinyosNetworkP__Queue__dequeue', quals=[], storage=['static'] (at pp.c:9596)
    FuncDecl: quals=None (at pp.c:9596)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Queue__dequeue', quals=[] (at pp.c:9596)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:9598)
    FuncDecl: quals=None (at pp.c:9598)
      ParamList:  (at pp.c:9598)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9598)
          PtrDecl: quals=[] (at pp.c:9598)
            TypeDecl: declname='msg', quals=[] (at pp.c:9598)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9598)
        TypeDecl: declname='CC2420TinyosNetworkP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9598)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:9609)
    FuncDecl: quals=None (at pp.c:9609)
      ParamList:  (at pp.c:9609)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9609)
          PtrDecl: quals=[] (at pp.c:9609)
            TypeDecl: declname='msg', quals=[] (at pp.c:9609)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9609)
        TypeDecl: declname='CC2420TinyosNetworkP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:9609)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareReceive__receive', quals=[], storage=['static'] (at pp.c:9617)
    FuncDecl: quals=None (at pp.c:9617)
      ParamList:  (at pp.c:9619)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9619)
          PtrDecl: quals=[] (at pp.c:9619)
            TypeDecl: declname='msg', quals=[] (at pp.c:9619)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9620)
          PtrDecl: quals=[] (at pp.c:9620)
            TypeDecl: declname='payload', quals=[] (at pp.c:9620)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9626)
          TypeDecl: declname='len', quals=[] (at pp.c:9626)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9613)
        TypeDecl: declname='CC2420TinyosNetworkP__BareReceive__receive', quals=[] (at pp.c:9617)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__granted', quals=[], storage=['static'] (at pp.c:9628)
    FuncDecl: quals=None (at pp.c:9628)
      ParamList:  (at pp.c:9630)
        Decl: name='arg_0x10297f060', quals=[], storage=[] (at pp.c:9630)
          TypeDecl: declname='arg_0x10297f060', quals=[] (at pp.c:9630)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__granted', quals=[] (at pp.c:9628)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareSend__sendDone', quals=[], storage=['static'] (at pp.c:9632)
    FuncDecl: quals=None (at pp.c:9632)
      ParamList:  (at pp.c:9634)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9634)
          PtrDecl: quals=[] (at pp.c:9634)
            TypeDecl: declname='msg', quals=[] (at pp.c:9634)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9638)
          TypeDecl: declname='error', quals=[] (at pp.c:9638)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__BareSend__sendDone', quals=[] (at pp.c:9632)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveReceive__receive', quals=[], storage=['static'] (at pp.c:9646)
    FuncDecl: quals=None (at pp.c:9646)
      ParamList:  (at pp.c:9648)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9648)
          PtrDecl: quals=[] (at pp.c:9648)
            TypeDecl: declname='msg', quals=[] (at pp.c:9648)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9649)
          PtrDecl: quals=[] (at pp.c:9649)
            TypeDecl: declname='payload', quals=[] (at pp.c:9649)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9655)
          TypeDecl: declname='len', quals=[] (at pp.c:9655)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9642)
        TypeDecl: declname='CC2420TinyosNetworkP__ActiveReceive__receive', quals=[] (at pp.c:9646)
          IdentifierType: names=['message_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9657)
    Enum: name='CC2420TinyosNetworkP____nesc_unnamed4381' (at pp.c:9657)
      EnumeratorList:  (at pp.c:9659)
        Enumerator: name='CC2420TinyosNetworkP__grantTask' (at pp.c:9659)
          Constant: type='int', value='18U' (at pp.c:9659)
  Typedef: name='CC2420TinyosNetworkP____nesc_sillytask_grantTask', quals=[], storage=['typedef'] (at pp.c:9662)
    ArrayDecl:  (at pp.c:9662)
      TypeDecl: declname='CC2420TinyosNetworkP____nesc_sillytask_grantTask', quals=[] (at pp.c:9662)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420TinyosNetworkP__grantTask' (at pp.c:9662)
  Decl: name=None, quals=[], storage=[] (at pp.c:9664)
    Enum: name='CC2420TinyosNetworkP____nesc_unnamed4382' (at pp.c:9664)
      EnumeratorList:  (at pp.c:9665)
        Enumerator: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:9665)
          Constant: type='int', value='0xff' (at pp.c:9665)
        Enumerator: name='CC2420TinyosNetworkP__TINYOS_N_NETWORKS' (at pp.c:9666)
          Constant: type='int', value='1U' (at pp.c:9666)
  Decl: name='CC2420TinyosNetworkP__m_busy_client', quals=[], storage=[] (at pp.c:9676)
    TypeDecl: declname='CC2420TinyosNetworkP__m_busy_client', quals=[] (at pp.c:9676)
      Enum: name='CC2420TinyosNetworkP____nesc_unnamed4383' (at pp.c:9673)
        EnumeratorList:  (at pp.c:9674)
          Enumerator: name='CC2420TinyosNetworkP__CLIENT_AM' (at pp.c:9674)
          Enumerator: name='CC2420TinyosNetworkP__CLIENT_BARE' (at pp.c:9675)
  Decl: name='CC2420TinyosNetworkP__resource_owner', quals=[], storage=[] (at pp.c:9678)
    TypeDecl: declname='CC2420TinyosNetworkP__resource_owner', quals=[] (at pp.c:9678)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:9678)
  Decl: name='CC2420TinyosNetworkP__next_owner', quals=[], storage=[] (at pp.c:9680)
    TypeDecl: declname='CC2420TinyosNetworkP__next_owner', quals=[] (at pp.c:9680)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__send', quals=[], storage=['static'] (at pp.c:9682)
    FuncDecl: quals=None (at pp.c:9682)
      ParamList:  (at pp.c:9682)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9682)
          PtrDecl: quals=[] (at pp.c:9682)
            TypeDecl: declname='msg', quals=[] (at pp.c:9682)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9682)
          TypeDecl: declname='len', quals=[] (at pp.c:9682)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__send', quals=[] (at pp.c:9682)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:9692)
    FuncDecl: quals=None (at pp.c:9692)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[] (at pp.c:9692)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:9694)
    FuncDecl: quals=None (at pp.c:9694)
      ParamList:  (at pp.c:9694)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9694)
          PtrDecl: quals=[] (at pp.c:9694)
            TypeDecl: declname='msg', quals=[] (at pp.c:9694)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9694)
          TypeDecl: declname='len', quals=[] (at pp.c:9694)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9694)
        TypeDecl: declname='CC2420TinyosNetworkP__BareSend__getPayload', quals=[] (at pp.c:9694)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:9704)
    FuncDecl: quals=None (at pp.c:9704)
      ParamList:  (at pp.c:9704)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9704)
          PtrDecl: quals=[] (at pp.c:9704)
            TypeDecl: declname='msg', quals=[] (at pp.c:9704)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9704)
          TypeDecl: declname='error', quals=[] (at pp.c:9704)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__SubSend__sendDone', quals=[] (at pp.c:9704)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:9713)
    FuncDecl: quals=None (at pp.c:9713)
      ParamList:  (at pp.c:9713)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9713)
          PtrDecl: quals=[] (at pp.c:9713)
            TypeDecl: declname='msg', quals=[] (at pp.c:9713)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9713)
          PtrDecl: quals=[] (at pp.c:9713)
            TypeDecl: declname='payload', quals=[] (at pp.c:9713)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9713)
          TypeDecl: declname='len', quals=[] (at pp.c:9713)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9713)
        TypeDecl: declname='CC2420TinyosNetworkP__SubReceive__receive', quals=[] (at pp.c:9713)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__grantTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:9715)
    FuncDecl: quals=None (at pp.c:9715)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__grantTask__runTask', quals=[] (at pp.c:9715)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:9717)
    FuncDecl: quals=None (at pp.c:9717)
      ParamList:  (at pp.c:9717)
        Decl: name='id', quals=[], storage=[] (at pp.c:9717)
          TypeDecl: declname='id', quals=[] (at pp.c:9717)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__request', quals=[] (at pp.c:9717)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:9719)
    FuncDecl: quals=None (at pp.c:9719)
      ParamList:  (at pp.c:9719)
        Decl: name='id', quals=[], storage=[] (at pp.c:9719)
          TypeDecl: declname='id', quals=[] (at pp.c:9719)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[] (at pp.c:9719)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:9721)
    FuncDecl: quals=None (at pp.c:9721)
      ParamList:  (at pp.c:9721)
        Decl: name='id', quals=[], storage=[] (at pp.c:9721)
          TypeDecl: declname='id', quals=[] (at pp.c:9721)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__release', quals=[] (at pp.c:9721)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:9723)
    FuncDecl: quals=None (at pp.c:9723)
      ParamList:  (at pp.c:9723)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9723)
          PtrDecl: quals=[] (at pp.c:9723)
            TypeDecl: declname='msg', quals=[] (at pp.c:9723)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9723)
          PtrDecl: quals=[] (at pp.c:9723)
            TypeDecl: declname='payload', quals=[] (at pp.c:9723)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9723)
          TypeDecl: declname='len', quals=[] (at pp.c:9723)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9723)
        TypeDecl: declname='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[] (at pp.c:9723)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:9726)
    FuncDecl: quals=None (at pp.c:9726)
      ParamList:  (at pp.c:9726)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9726)
          PtrDecl: quals=[] (at pp.c:9726)
            TypeDecl: declname='msg', quals=[] (at pp.c:9726)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9726)
          TypeDecl: declname='error', quals=[] (at pp.c:9726)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[] (at pp.c:9726)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:9735)
    FuncDecl: quals=None (at pp.c:9735)
      ParamList:  (at pp.c:9735)
        Decl: name='client', quals=[], storage=[] (at pp.c:9735)
          TypeDecl: declname='client', quals=[] (at pp.c:9735)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__default__granted', quals=[] (at pp.c:9735)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9737)
    Enum: name='FcfsResourceQueueC__0____nesc_unnamed4384' (at pp.c:9737)
      EnumeratorList:  (at pp.c:9739)
        Enumerator: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:9739)
          Constant: type='int', value='0xFF' (at pp.c:9739)
  Decl: name='FcfsResourceQueueC__0__resQ', quals=[], storage=[] (at pp.c:9741)
    ArrayDecl:  (at pp.c:9741)
      TypeDecl: declname='FcfsResourceQueueC__0__resQ', quals=[] (at pp.c:9741)
        IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='1' (at pp.c:9741)
  Decl: name='FcfsResourceQueueC__0__qHead', quals=[], storage=[] (at pp.c:9742)
    TypeDecl: declname='FcfsResourceQueueC__0__qHead', quals=[] (at pp.c:9742)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:9742)
  Decl: name='FcfsResourceQueueC__0__qTail', quals=[], storage=[] (at pp.c:9743)
    TypeDecl: declname='FcfsResourceQueueC__0__qTail', quals=[] (at pp.c:9743)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:9743)
  Decl: name='FcfsResourceQueueC__0__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9745)
    FuncDecl: quals=None (at pp.c:9745)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__Init__init', quals=[] (at pp.c:9745)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[], storage=['static'] (at pp.c:9750)
    FuncDecl: quals=None (at pp.c:9750)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[] (at pp.c:9750)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[], storage=['inline', 'static'] (at pp.c:9754)
    FuncDecl: quals=None (at pp.c:9754)
      ParamList:  (at pp.c:9754)
        Decl: name='id', quals=[], storage=[] (at pp.c:9754)
          TypeDecl: declname='id', quals=[] (at pp.c:9754)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[] (at pp.c:9754)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:9758)
    FuncDecl: quals=None (at pp.c:9758)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[] (at pp.c:9758)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:9760)
    FuncDecl: quals=None (at pp.c:9760)
      ParamList:  (at pp.c:9760)
        Decl: name='id', quals=[], storage=[] (at pp.c:9760)
          TypeDecl: declname='id', quals=[] (at pp.c:9760)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[] (at pp.c:9760)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SubSend__send', quals=[], storage=['static'] (at pp.c:9762)
    FuncDecl: quals=None (at pp.c:9762)
      ParamList:  (at pp.c:9764)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9764)
          PtrDecl: quals=[] (at pp.c:9764)
            TypeDecl: declname='msg', quals=[] (at pp.c:9764)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9772)
          TypeDecl: declname='len', quals=[] (at pp.c:9772)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubSend__send', quals=[] (at pp.c:9762)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SubSend__maxPayloadLength', quals=[], storage=['static'] (at pp.c:9774)
    FuncDecl: quals=None (at pp.c:9774)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SubSend__maxPayloadLength', quals=[] (at pp.c:9774)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__send__postTask', quals=[], storage=['static'] (at pp.c:9776)
    FuncDecl: quals=None (at pp.c:9776)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__send__postTask', quals=[] (at pp.c:9776)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__setCongestionBackoff', quals=[], storage=['static'] (at pp.c:9778)
    FuncDecl: quals=None (at pp.c:9778)
      ParamList:  (at pp.c:9778)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:9778)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:9778)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:9778)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__setInitialBackoff', quals=[], storage=['static'] (at pp.c:9780)
    FuncDecl: quals=None (at pp.c:9780)
      ParamList:  (at pp.c:9780)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:9780)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:9780)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:9780)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SystemLowPowerListening__getDelayAfterReceive', quals=[], storage=['static'] (at pp.c:9782)
    FuncDecl: quals=None (at pp.c:9782)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SystemLowPowerListening__getDelayAfterReceive', quals=[] (at pp.c:9782)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='DefaultLplP__OffTimer__startOneShot', quals=[], storage=['static'] (at pp.c:9784)
    FuncDecl: quals=None (at pp.c:9784)
      ParamList:  (at pp.c:9784)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9784)
          TypeDecl: declname='dt', quals=[] (at pp.c:9784)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='DefaultLplP__OffTimer__startOneShot', quals=[] (at pp.c:9784)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__OffTimer__stop', quals=[], storage=['static'] (at pp.c:9789)
    FuncDecl: quals=None (at pp.c:9789)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__OffTimer__stop', quals=[] (at pp.c:9789)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Send__sendDone', quals=[], storage=['static'] (at pp.c:9791)
    FuncDecl: quals=None (at pp.c:9791)
      ParamList:  (at pp.c:9793)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9793)
          PtrDecl: quals=[] (at pp.c:9793)
            TypeDecl: declname='msg', quals=[] (at pp.c:9793)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9797)
          TypeDecl: declname='error', quals=[] (at pp.c:9797)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__Send__sendDone', quals=[] (at pp.c:9791)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SendState__getState', quals=[], storage=['static'] (at pp.c:9799)
    FuncDecl: quals=None (at pp.c:9799)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendState__getState', quals=[] (at pp.c:9799)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__SendState__toIdle', quals=[], storage=['static'] (at pp.c:9801)
    FuncDecl: quals=None (at pp.c:9801)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendState__toIdle', quals=[] (at pp.c:9801)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SendState__requestState', quals=[], storage=['static'] (at pp.c:9803)
    FuncDecl: quals=None (at pp.c:9803)
      ParamList:  (at pp.c:9803)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:9803)
          TypeDecl: declname='reqState', quals=[] (at pp.c:9803)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__SendState__requestState', quals=[] (at pp.c:9803)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SendState__forceState', quals=[], storage=['static'] (at pp.c:9809)
    FuncDecl: quals=None (at pp.c:9809)
      ParamList:  (at pp.c:9809)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:9809)
          TypeDecl: declname='reqState', quals=[] (at pp.c:9809)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__SendState__forceState', quals=[] (at pp.c:9809)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Random__rand16', quals=[], storage=['static'] (at pp.c:9811)
    FuncDecl: quals=None (at pp.c:9811)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__Random__rand16', quals=[] (at pp.c:9811)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='DefaultLplP__Resend__resend', quals=[], storage=['static'] (at pp.c:9813)
    FuncDecl: quals=None (at pp.c:9813)
      ParamList:  (at pp.c:9813)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:9813)
          TypeDecl: declname='useCca', quals=[] (at pp.c:9813)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='DefaultLplP__Resend__resend', quals=[] (at pp.c:9813)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SubControl__start', quals=[], storage=['static'] (at pp.c:9815)
    FuncDecl: quals=None (at pp.c:9815)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__start', quals=[] (at pp.c:9815)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SubControl__stop', quals=[], storage=['static'] (at pp.c:9817)
    FuncDecl: quals=None (at pp.c:9817)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__stop', quals=[] (at pp.c:9817)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__Receive__receive', quals=[], storage=['static'] (at pp.c:9825)
    FuncDecl: quals=None (at pp.c:9825)
      ParamList:  (at pp.c:9827)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9827)
          PtrDecl: quals=[] (at pp.c:9827)
            TypeDecl: declname='msg', quals=[] (at pp.c:9827)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9828)
          PtrDecl: quals=[] (at pp.c:9828)
            TypeDecl: declname='payload', quals=[] (at pp.c:9828)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9834)
          TypeDecl: declname='len', quals=[] (at pp.c:9834)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9821)
        TypeDecl: declname='DefaultLplP__Receive__receive', quals=[] (at pp.c:9825)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='DefaultLplP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:9836)
    FuncDecl: quals=None (at pp.c:9836)
      ParamList:  (at pp.c:9836)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9836)
          PtrDecl: quals=[] (at pp.c:9836)
            TypeDecl: declname='msg', quals=[] (at pp.c:9836)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9836)
        TypeDecl: declname='DefaultLplP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9836)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='DefaultLplP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:9847)
    FuncDecl: quals=None (at pp.c:9847)
      ParamList:  (at pp.c:9847)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9847)
          PtrDecl: quals=[] (at pp.c:9847)
            TypeDecl: declname='msg', quals=[] (at pp.c:9847)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9847)
        TypeDecl: declname='DefaultLplP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:9847)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='DefaultLplP__RadioPowerState__getState', quals=[], storage=['static'] (at pp.c:9849)
    FuncDecl: quals=None (at pp.c:9849)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__RadioPowerState__getState', quals=[] (at pp.c:9849)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__RadioPowerState__forceState', quals=[], storage=['static'] (at pp.c:9851)
    FuncDecl: quals=None (at pp.c:9851)
      ParamList:  (at pp.c:9851)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:9851)
          TypeDecl: declname='reqState', quals=[] (at pp.c:9851)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioPowerState__forceState', quals=[] (at pp.c:9851)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__startRadio__postTask', quals=[], storage=['static'] (at pp.c:9853)
    FuncDecl: quals=None (at pp.c:9853)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__startRadio__postTask', quals=[] (at pp.c:9853)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SendDoneTimer__isRunning', quals=[], storage=['static'] (at pp.c:9855)
    FuncDecl: quals=None (at pp.c:9855)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendDoneTimer__isRunning', quals=[] (at pp.c:9855)
        IdentifierType: names=['bool'] (at None)
  Decl: name='DefaultLplP__SendDoneTimer__startOneShot', quals=[], storage=['static'] (at pp.c:9857)
    FuncDecl: quals=None (at pp.c:9857)
      ParamList:  (at pp.c:9857)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9857)
          TypeDecl: declname='dt', quals=[] (at pp.c:9857)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='DefaultLplP__SendDoneTimer__startOneShot', quals=[] (at pp.c:9857)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SendDoneTimer__stop', quals=[], storage=['static'] (at pp.c:9862)
    FuncDecl: quals=None (at pp.c:9862)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendDoneTimer__stop', quals=[] (at pp.c:9862)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__PacketAcknowledgements__requestAck', quals=[], storage=['static'] (at pp.c:9864)
    FuncDecl: quals=None (at pp.c:9864)
      ParamList:  (at pp.c:9866)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9866)
          PtrDecl: quals=[] (at pp.c:9866)
            TypeDecl: declname='msg', quals=[] (at pp.c:9866)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__PacketAcknowledgements__requestAck', quals=[] (at pp.c:9864)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__PacketAcknowledgements__noAck', quals=[], storage=['static'] (at pp.c:9868)
    FuncDecl: quals=None (at pp.c:9868)
      ParamList:  (at pp.c:9870)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9870)
          PtrDecl: quals=[] (at pp.c:9870)
            TypeDecl: declname='msg', quals=[] (at pp.c:9870)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__PacketAcknowledgements__noAck', quals=[] (at pp.c:9868)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__PacketAcknowledgements__wasAcked', quals=[], storage=['static'] (at pp.c:9872)
    FuncDecl: quals=None (at pp.c:9872)
      ParamList:  (at pp.c:9874)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9874)
          PtrDecl: quals=[] (at pp.c:9874)
            TypeDecl: declname='msg', quals=[] (at pp.c:9874)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__PacketAcknowledgements__wasAcked', quals=[] (at pp.c:9872)
        IdentifierType: names=['bool'] (at None)
  Decl: name='DefaultLplP__SplitControlState__getState', quals=[], storage=['static'] (at pp.c:9876)
    FuncDecl: quals=None (at pp.c:9876)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SplitControlState__getState', quals=[] (at pp.c:9876)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__resend__postTask', quals=[], storage=['static'] (at pp.c:9878)
    FuncDecl: quals=None (at pp.c:9878)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__resend__postTask', quals=[] (at pp.c:9878)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__PowerCycle__getSleepInterval', quals=[], storage=['static'] (at pp.c:9880)
    FuncDecl: quals=None (at pp.c:9880)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__PowerCycle__getSleepInterval', quals=[] (at pp.c:9880)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='DefaultLplP__stopRadio__postTask', quals=[], storage=['static'] (at pp.c:9882)
    FuncDecl: quals=None (at pp.c:9882)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__stopRadio__postTask', quals=[] (at pp.c:9882)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9884)
    Enum: name='DefaultLplP____nesc_unnamed4385' (at pp.c:9884)
      EnumeratorList:  (at pp.c:9886)
        Enumerator: name='DefaultLplP__send' (at pp.c:9886)
          Constant: type='int', value='19U' (at pp.c:9886)
  Typedef: name='DefaultLplP____nesc_sillytask_send', quals=[], storage=['typedef'] (at pp.c:9889)
    ArrayDecl:  (at pp.c:9889)
      TypeDecl: declname='DefaultLplP____nesc_sillytask_send', quals=[] (at pp.c:9889)
        IdentifierType: names=['int'] (at None)
      ID: name='DefaultLplP__send' (at pp.c:9889)
  Decl: name=None, quals=[], storage=[] (at pp.c:9890)
    Enum: name='DefaultLplP____nesc_unnamed4386' (at pp.c:9890)
      EnumeratorList:  (at pp.c:9892)
        Enumerator: name='DefaultLplP__resend' (at pp.c:9892)
          Constant: type='int', value='20U' (at pp.c:9892)
  Typedef: name='DefaultLplP____nesc_sillytask_resend', quals=[], storage=['typedef'] (at pp.c:9895)
    ArrayDecl:  (at pp.c:9895)
      TypeDecl: declname='DefaultLplP____nesc_sillytask_resend', quals=[] (at pp.c:9895)
        IdentifierType: names=['int'] (at None)
      ID: name='DefaultLplP__resend' (at pp.c:9895)
  Decl: name=None, quals=[], storage=[] (at pp.c:9896)
    Enum: name='DefaultLplP____nesc_unnamed4387' (at pp.c:9896)
      EnumeratorList:  (at pp.c:9898)
        Enumerator: name='DefaultLplP__startRadio' (at pp.c:9898)
          Constant: type='int', value='21U' (at pp.c:9898)
  Typedef: name='DefaultLplP____nesc_sillytask_startRadio', quals=[], storage=['typedef'] (at pp.c:9901)
    ArrayDecl:  (at pp.c:9901)
      TypeDecl: declname='DefaultLplP____nesc_sillytask_startRadio', quals=[] (at pp.c:9901)
        IdentifierType: names=['int'] (at None)
      ID: name='DefaultLplP__startRadio' (at pp.c:9901)
  Decl: name=None, quals=[], storage=[] (at pp.c:9902)
    Enum: name='DefaultLplP____nesc_unnamed4388' (at pp.c:9902)
      EnumeratorList:  (at pp.c:9904)
        Enumerator: name='DefaultLplP__stopRadio' (at pp.c:9904)
          Constant: type='int', value='22U' (at pp.c:9904)
  Typedef: name='DefaultLplP____nesc_sillytask_stopRadio', quals=[], storage=['typedef'] (at pp.c:9907)
    ArrayDecl:  (at pp.c:9907)
      TypeDecl: declname='DefaultLplP____nesc_sillytask_stopRadio', quals=[] (at pp.c:9907)
        IdentifierType: names=['int'] (at None)
      ID: name='DefaultLplP__stopRadio' (at pp.c:9907)
  Decl: name='DefaultLplP__currentSendMsg', quals=[], storage=[] (at pp.c:9909)
    PtrDecl: quals=[] (at pp.c:9909)
      TypeDecl: declname='DefaultLplP__currentSendMsg', quals=[] (at pp.c:9909)
        IdentifierType: names=['message_t'] (at None)
  Decl: name='DefaultLplP__currentSendLen', quals=[], storage=[] (at pp.c:9912)
    TypeDecl: declname='DefaultLplP__currentSendLen', quals=[] (at pp.c:9912)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__dutyCycling', quals=[], storage=[] (at pp.c:9915)
    TypeDecl: declname='DefaultLplP__dutyCycling', quals=[] (at pp.c:9915)
      IdentifierType: names=['bool'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9920)
    Enum: name='DefaultLplP____nesc_unnamed4389' (at pp.c:9920)
      EnumeratorList:  (at pp.c:9921)
        Enumerator: name='DefaultLplP__S_OFF' (at pp.c:9921)
        Enumerator: name='DefaultLplP__S_TURNING_ON' (at pp.c:9922)
        Enumerator: name='DefaultLplP__S_ON' (at pp.c:9923)
        Enumerator: name='DefaultLplP__S_TURNING_OFF' (at pp.c:9924)
  Decl: name=None, quals=[], storage=[] (at pp.c:9930)
    Enum: name='DefaultLplP____nesc_unnamed4390' (at pp.c:9930)
      EnumeratorList:  (at pp.c:9931)
        Enumerator: name='DefaultLplP__S_IDLE' (at pp.c:9931)
        Enumerator: name='DefaultLplP__S_SENDING' (at pp.c:9932)
  Decl: name=None, quals=[], storage=[] (at pp.c:9935)
    Enum: name='DefaultLplP____nesc_unnamed4391' (at pp.c:9935)
      EnumeratorList:  (at pp.c:9936)
        Enumerator: name='DefaultLplP__ONE_MESSAGE' (at pp.c:9936)
          Constant: type='int', value='0' (at pp.c:9936)
  Decl: name='DefaultLplP__initializeSend', quals=[], storage=['static'] (at pp.c:9945)
    FuncDecl: quals=None (at pp.c:9945)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__initializeSend', quals=[] (at pp.c:9945)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__startOffTimer', quals=[], storage=['inline', 'static'] (at pp.c:9946)
    FuncDecl: quals=None (at pp.c:9946)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__startOffTimer', quals=[] (at pp.c:9946)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9949)
    FuncDecl: quals=None (at pp.c:9949)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__Init__init', quals=[] (at pp.c:9949)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:9951)
    FuncDecl: quals=None (at pp.c:9951)
      ParamList:  (at pp.c:9951)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9951)
          PtrDecl: quals=[] (at pp.c:9951)
            TypeDecl: declname='msg', quals=[] (at pp.c:9951)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:9952)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:9952)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[] (at pp.c:9951)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:9959)
    FuncDecl: quals=None (at pp.c:9959)
      ParamList:  (at pp.c:9959)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9959)
          PtrDecl: quals=[] (at pp.c:9959)
            TypeDecl: declname='msg', quals=[] (at pp.c:9959)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[] (at pp.c:9959)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='DefaultLplP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:9961)
    FuncDecl: quals=None (at pp.c:9961)
      ParamList:  (at pp.c:9961)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9961)
          PtrDecl: quals=[] (at pp.c:9961)
            TypeDecl: declname='msg', quals=[] (at pp.c:9961)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9961)
          TypeDecl: declname='len', quals=[] (at pp.c:9961)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__Send__send', quals=[] (at pp.c:9961)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:9963)
    FuncDecl: quals=None (at pp.c:9963)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__Send__maxPayloadLength', quals=[] (at pp.c:9963)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:9973)
    FuncDecl: quals=None (at pp.c:9973)
      ParamList:  (at pp.c:9973)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9973)
          PtrDecl: quals=[] (at pp.c:9973)
            TypeDecl: declname='msg', quals=[] (at pp.c:9973)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:9973)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:9981)
    FuncDecl: quals=None (at pp.c:9981)
      ParamList:  (at pp.c:9981)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9981)
          PtrDecl: quals=[] (at pp.c:9981)
            TypeDecl: declname='msg', quals=[] (at pp.c:9981)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:9981)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:9989)
    FuncDecl: quals=None (at pp.c:9989)
      ParamList:  (at pp.c:9989)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9989)
          PtrDecl: quals=[] (at pp.c:9989)
            TypeDecl: declname='msg', quals=[] (at pp.c:9989)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestCca', quals=[] (at pp.c:9989)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__PowerCycle__detected', quals=[], storage=['inline', 'static'] (at pp.c:9998)
    FuncDecl: quals=None (at pp.c:9998)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__PowerCycle__detected', quals=[] (at pp.c:9998)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SubControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:10000)
    FuncDecl: quals=None (at pp.c:10000)
      ParamList:  (at pp.c:10000)
        Decl: name='error', quals=[], storage=[] (at pp.c:10000)
          TypeDecl: declname='error', quals=[] (at pp.c:10000)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__startDone', quals=[] (at pp.c:10000)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SubControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:10011)
    FuncDecl: quals=None (at pp.c:10011)
      ParamList:  (at pp.c:10011)
        Decl: name='error', quals=[], storage=[] (at pp.c:10011)
          TypeDecl: declname='error', quals=[] (at pp.c:10011)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__stopDone', quals=[] (at pp.c:10011)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10013)
    FuncDecl: quals=None (at pp.c:10013)
      ParamList:  (at pp.c:10013)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10013)
          PtrDecl: quals=[] (at pp.c:10013)
            TypeDecl: declname='msg', quals=[] (at pp.c:10013)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10013)
          TypeDecl: declname='error', quals=[] (at pp.c:10013)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubSend__sendDone', quals=[] (at pp.c:10013)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:10015)
    FuncDecl: quals=None (at pp.c:10015)
      ParamList:  (at pp.c:10015)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10015)
          PtrDecl: quals=[] (at pp.c:10015)
            TypeDecl: declname='msg', quals=[] (at pp.c:10015)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10015)
          PtrDecl: quals=[] (at pp.c:10015)
            TypeDecl: declname='payload', quals=[] (at pp.c:10015)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10016)
          TypeDecl: declname='len', quals=[] (at pp.c:10016)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10015)
        TypeDecl: declname='DefaultLplP__SubReceive__receive', quals=[] (at pp.c:10015)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='DefaultLplP__OffTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:10022)
    FuncDecl: quals=None (at pp.c:10022)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__OffTimer__fired', quals=[] (at pp.c:10022)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SendDoneTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:10024)
    FuncDecl: quals=None (at pp.c:10024)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendDoneTimer__fired', quals=[] (at pp.c:10024)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Resend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10026)
    FuncDecl: quals=None (at pp.c:10026)
      ParamList:  (at pp.c:10026)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:10026)
          PtrDecl: quals=[] (at pp.c:10026)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:10026)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10026)
          TypeDecl: declname='error', quals=[] (at pp.c:10026)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__Resend__sendDone', quals=[] (at pp.c:10026)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__send__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10032)
    FuncDecl: quals=None (at pp.c:10032)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__send__runTask', quals=[] (at pp.c:10032)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__resend__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10038)
    FuncDecl: quals=None (at pp.c:10038)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__resend__runTask', quals=[] (at pp.c:10038)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__startRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10044)
    FuncDecl: quals=None (at pp.c:10044)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__startRadio__runTask', quals=[] (at pp.c:10044)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__stopRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10050)
    FuncDecl: quals=None (at pp.c:10050)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__stopRadio__runTask', quals=[] (at pp.c:10050)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__initializeSend', quals=[], storage=['static'] (at pp.c:10059)
    FuncDecl: quals=None (at pp.c:10059)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__initializeSend', quals=[] (at pp.c:10059)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__startOffTimer', quals=[], storage=['inline', 'static'] (at pp.c:10061)
    FuncDecl: quals=None (at pp.c:10061)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__startOffTimer', quals=[] (at pp.c:10061)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SplitControl__startDone', quals=[], storage=['static'] (at pp.c:10063)
    FuncDecl: quals=None (at pp.c:10063)
      ParamList:  (at pp.c:10063)
        Decl: name='error', quals=[], storage=[] (at pp.c:10063)
          TypeDecl: declname='error', quals=[] (at pp.c:10063)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControl__startDone', quals=[] (at pp.c:10063)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SplitControl__stopDone', quals=[], storage=['static'] (at pp.c:10065)
    FuncDecl: quals=None (at pp.c:10065)
      ParamList:  (at pp.c:10065)
        Decl: name='error', quals=[], storage=[] (at pp.c:10065)
          TypeDecl: declname='error', quals=[] (at pp.c:10065)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControl__stopDone', quals=[] (at pp.c:10065)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__EnergyIndicator__isReceiving', quals=[], storage=['static'] (at pp.c:10067)
    FuncDecl: quals=None (at pp.c:10067)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__EnergyIndicator__isReceiving', quals=[] (at pp.c:10067)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__SendState__isIdle', quals=[], storage=['static'] (at pp.c:10069)
    FuncDecl: quals=None (at pp.c:10069)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__SendState__isIdle', quals=[] (at pp.c:10069)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__startRadio__postTask', quals=[], storage=['static'] (at pp.c:10071)
    FuncDecl: quals=None (at pp.c:10071)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__startRadio__postTask', quals=[] (at pp.c:10071)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__SubControl__start', quals=[], storage=['static'] (at pp.c:10073)
    FuncDecl: quals=None (at pp.c:10073)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__start', quals=[] (at pp.c:10073)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__SubControl__stop', quals=[], storage=['static'] (at pp.c:10075)
    FuncDecl: quals=None (at pp.c:10075)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__stop', quals=[] (at pp.c:10075)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__RadioPowerState__getState', quals=[], storage=['static'] (at pp.c:10077)
    FuncDecl: quals=None (at pp.c:10077)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__RadioPowerState__getState', quals=[] (at pp.c:10077)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='PowerCycleP__RadioPowerState__forceState', quals=[], storage=['static'] (at pp.c:10079)
    FuncDecl: quals=None (at pp.c:10079)
      ParamList:  (at pp.c:10079)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:10079)
          TypeDecl: declname='reqState', quals=[] (at pp.c:10079)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='PowerCycleP__RadioPowerState__forceState', quals=[] (at pp.c:10079)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__PacketIndicator__isReceiving', quals=[], storage=['static'] (at pp.c:10081)
    FuncDecl: quals=None (at pp.c:10081)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__PacketIndicator__isReceiving', quals=[] (at pp.c:10081)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__getCca__postTask', quals=[], storage=['static'] (at pp.c:10083)
    FuncDecl: quals=None (at pp.c:10083)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__getCca__postTask', quals=[] (at pp.c:10083)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__SplitControlState__isState', quals=[], storage=['static'] (at pp.c:10085)
    FuncDecl: quals=None (at pp.c:10085)
      ParamList:  (at pp.c:10085)
        Decl: name='myState', quals=[], storage=[] (at pp.c:10085)
          TypeDecl: declname='myState', quals=[] (at pp.c:10085)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControlState__isState', quals=[] (at pp.c:10085)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__SplitControlState__forceState', quals=[], storage=['static'] (at pp.c:10087)
    FuncDecl: quals=None (at pp.c:10087)
      ParamList:  (at pp.c:10087)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:10087)
          TypeDecl: declname='reqState', quals=[] (at pp.c:10087)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControlState__forceState', quals=[] (at pp.c:10087)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__OnTimer__startOneShot', quals=[], storage=['static'] (at pp.c:10089)
    FuncDecl: quals=None (at pp.c:10089)
      ParamList:  (at pp.c:10089)
        Decl: name='dt', quals=[], storage=[] (at pp.c:10089)
          TypeDecl: declname='dt', quals=[] (at pp.c:10089)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='PowerCycleP__OnTimer__startOneShot', quals=[] (at pp.c:10089)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__PowerCycle__detected', quals=[], storage=['static'] (at pp.c:10091)
    FuncDecl: quals=None (at pp.c:10091)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__PowerCycle__detected', quals=[] (at pp.c:10091)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__stopRadio__postTask', quals=[], storage=['static'] (at pp.c:10093)
    FuncDecl: quals=None (at pp.c:10093)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__stopRadio__postTask', quals=[] (at pp.c:10093)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:10095)
    Enum: name='PowerCycleP____nesc_unnamed4392' (at pp.c:10095)
      EnumeratorList:  (at pp.c:10097)
        Enumerator: name='PowerCycleP__stopRadio' (at pp.c:10097)
          Constant: type='int', value='23U' (at pp.c:10097)
  Typedef: name='PowerCycleP____nesc_sillytask_stopRadio', quals=[], storage=['typedef'] (at pp.c:10100)
    ArrayDecl:  (at pp.c:10100)
      TypeDecl: declname='PowerCycleP____nesc_sillytask_stopRadio', quals=[] (at pp.c:10100)
        IdentifierType: names=['int'] (at None)
      ID: name='PowerCycleP__stopRadio' (at pp.c:10100)
  Decl: name=None, quals=[], storage=[] (at pp.c:10101)
    Enum: name='PowerCycleP____nesc_unnamed4393' (at pp.c:10101)
      EnumeratorList:  (at pp.c:10103)
        Enumerator: name='PowerCycleP__startRadio' (at pp.c:10103)
          Constant: type='int', value='24U' (at pp.c:10103)
  Typedef: name='PowerCycleP____nesc_sillytask_startRadio', quals=[], storage=['typedef'] (at pp.c:10106)
    ArrayDecl:  (at pp.c:10106)
      TypeDecl: declname='PowerCycleP____nesc_sillytask_startRadio', quals=[] (at pp.c:10106)
        IdentifierType: names=['int'] (at None)
      ID: name='PowerCycleP__startRadio' (at pp.c:10106)
  Decl: name=None, quals=[], storage=[] (at pp.c:10107)
    Enum: name='PowerCycleP____nesc_unnamed4394' (at pp.c:10107)
      EnumeratorList:  (at pp.c:10109)
        Enumerator: name='PowerCycleP__getCca' (at pp.c:10109)
          Constant: type='int', value='25U' (at pp.c:10109)
  Typedef: name='PowerCycleP____nesc_sillytask_getCca', quals=[], storage=['typedef'] (at pp.c:10112)
    ArrayDecl:  (at pp.c:10112)
      TypeDecl: declname='PowerCycleP____nesc_sillytask_getCca', quals=[] (at pp.c:10112)
        IdentifierType: names=['int'] (at None)
      ID: name='PowerCycleP__getCca' (at pp.c:10112)
  Decl: name='PowerCycleP__sleepInterval', quals=[], storage=[] (at pp.c:10114)
    TypeDecl: declname='PowerCycleP__sleepInterval', quals=[] (at pp.c:10114)
      IdentifierType: names=['uint16_t'] (at None)
    Constant: type='int', value='0' (at pp.c:10114)
  Decl: name='PowerCycleP__ccaChecks', quals=[], storage=[] (at pp.c:10117)
    TypeDecl: declname='PowerCycleP__ccaChecks', quals=[] (at pp.c:10117)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:10122)
    Enum: name='PowerCycleP____nesc_unnamed4395' (at pp.c:10122)
      EnumeratorList:  (at pp.c:10123)
        Enumerator: name='PowerCycleP__S_OFF' (at pp.c:10123)
        Enumerator: name='PowerCycleP__S_TURNING_ON' (at pp.c:10124)
        Enumerator: name='PowerCycleP__S_ON' (at pp.c:10125)
        Enumerator: name='PowerCycleP__S_TURNING_OFF' (at pp.c:10126)
  Decl: name='PowerCycleP__finishSplitControlRequests', quals=[], storage=['static'] (at pp.c:10135)
    FuncDecl: quals=None (at pp.c:10135)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__finishSplitControlRequests', quals=[] (at pp.c:10135)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__isDutyCycling', quals=[], storage=['inline', 'static'] (at pp.c:10136)
    FuncDecl: quals=None (at pp.c:10136)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__isDutyCycling', quals=[] (at pp.c:10136)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__PowerCycle__getSleepInterval', quals=[], storage=['inline', 'static'] (at pp.c:10138)
    FuncDecl: quals=None (at pp.c:10138)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__PowerCycle__getSleepInterval', quals=[] (at pp.c:10138)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='PowerCycleP__SplitControl__start', quals=[], storage=['inline', 'static'] (at pp.c:10144)
    FuncDecl: quals=None (at pp.c:10144)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControl__start', quals=[] (at pp.c:10144)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__OnTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:10146)
    FuncDecl: quals=None (at pp.c:10146)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__OnTimer__fired', quals=[] (at pp.c:10146)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SubControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:10148)
    FuncDecl: quals=None (at pp.c:10148)
      ParamList:  (at pp.c:10148)
        Decl: name='error', quals=[], storage=[] (at pp.c:10148)
          TypeDecl: declname='error', quals=[] (at pp.c:10148)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__startDone', quals=[] (at pp.c:10148)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SubControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:10150)
    FuncDecl: quals=None (at pp.c:10150)
      ParamList:  (at pp.c:10150)
        Decl: name='error', quals=[], storage=[] (at pp.c:10150)
          TypeDecl: declname='error', quals=[] (at pp.c:10150)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__stopDone', quals=[] (at pp.c:10150)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__stopRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10152)
    FuncDecl: quals=None (at pp.c:10152)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__stopRadio__runTask', quals=[] (at pp.c:10152)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__startRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10161)
    FuncDecl: quals=None (at pp.c:10161)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__startRadio__runTask', quals=[] (at pp.c:10161)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__getCca__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10167)
    FuncDecl: quals=None (at pp.c:10167)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__getCca__runTask', quals=[] (at pp.c:10167)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__isDutyCycling', quals=[], storage=['inline', 'static'] (at pp.c:10169)
    FuncDecl: quals=None (at pp.c:10169)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__isDutyCycling', quals=[] (at pp.c:10169)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__finishSplitControlRequests', quals=[], storage=['static'] (at pp.c:10177)
    FuncDecl: quals=None (at pp.c:10177)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__finishSplitControlRequests', quals=[] (at pp.c:10177)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SystemLowPowerListeningP__remoteWakeup', quals=[], storage=[] (at pp.c:10179)
    TypeDecl: declname='SystemLowPowerListeningP__remoteWakeup', quals=[] (at pp.c:10179)
      IdentifierType: names=['uint16_t'] (at None)
    Constant: type='int', value='0' (at pp.c:10179)
  Decl: name='SystemLowPowerListeningP__delayAfterReceive', quals=[], storage=[] (at pp.c:10180)
    TypeDecl: declname='SystemLowPowerListeningP__delayAfterReceive', quals=[] (at pp.c:10180)
      IdentifierType: names=['uint16_t'] (at None)
    Constant: type='int', value='100' (at pp.c:10180)
  Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:10185)
    FuncDecl: quals=None (at pp.c:10185)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[] (at pp.c:10185)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[], storage=['inline', 'static'] (at pp.c:10186)
    FuncDecl: quals=None (at pp.c:10186)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[] (at pp.c:10186)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SubSend__send', quals=[], storage=['static'] (at pp.c:10188)
    FuncDecl: quals=None (at pp.c:10188)
      ParamList:  (at pp.c:10190)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10190)
          PtrDecl: quals=[] (at pp.c:10190)
            TypeDecl: declname='msg', quals=[] (at pp.c:10190)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10198)
          TypeDecl: declname='len', quals=[] (at pp.c:10198)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubSend__send', quals=[] (at pp.c:10188)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SubSend__maxPayloadLength', quals=[], storage=['static'] (at pp.c:10200)
    FuncDecl: quals=None (at pp.c:10200)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubSend__maxPayloadLength', quals=[] (at pp.c:10200)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ActiveMessageP__CC2420Config__getPanAddr', quals=[], storage=['static'] (at pp.c:10202)
    FuncDecl: quals=None (at pp.c:10202)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__CC2420Config__getPanAddr', quals=[] (at pp.c:10202)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__requestCca', quals=[], storage=['static'] (at pp.c:10204)
    FuncDecl: quals=None (at pp.c:10204)
      ParamList:  (at pp.c:10206)
        Decl: name='arg_0x102b20d60', quals=[], storage=[] (at pp.c:10206)
          TypeDecl: declname='arg_0x102b20d60', quals=[] (at pp.c:10206)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10208)
          PtrDecl: quals=[] (at pp.c:10208)
            TypeDecl: declname='msg', quals=[] (at pp.c:10208)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestCca', quals=[] (at pp.c:10204)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:10210)
    FuncDecl: quals=None (at pp.c:10210)
      ParamList:  (at pp.c:10212)
        Decl: name='arg_0x102b20d60', quals=[], storage=[] (at pp.c:10212)
          TypeDecl: declname='arg_0x102b20d60', quals=[] (at pp.c:10212)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10214)
          PtrDecl: quals=[] (at pp.c:10214)
            TypeDecl: declname='msg', quals=[] (at pp.c:10214)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:10210)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:10221)
    FuncDecl: quals=None (at pp.c:10221)
      ParamList:  (at pp.c:10223)
        Decl: name='arg_0x102b20d60', quals=[], storage=[] (at pp.c:10223)
          TypeDecl: declname='arg_0x102b20d60', quals=[] (at pp.c:10223)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10225)
          PtrDecl: quals=[] (at pp.c:10225)
            TypeDecl: declname='msg', quals=[] (at pp.c:10225)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:10221)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SendNotifier__aboutToSend', quals=[], storage=['static'] (at pp.c:10227)
    FuncDecl: quals=None (at pp.c:10227)
      ParamList:  (at pp.c:10229)
        Decl: name='arg_0x102b20258', quals=[], storage=[] (at pp.c:10229)
          TypeDecl: declname='arg_0x102b20258', quals=[] (at pp.c:10229)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='dest', quals=[], storage=[] (at pp.c:10231)
          TypeDecl: declname='dest', quals=[] (at pp.c:10231)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10233)
          PtrDecl: quals=[] (at pp.c:10233)
            TypeDecl: declname='msg', quals=[] (at pp.c:10233)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SendNotifier__aboutToSend', quals=[] (at pp.c:10227)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:10235)
    FuncDecl: quals=None (at pp.c:10235)
      ParamList:  (at pp.c:10237)
        Decl: name='arg_0x102b257d8', quals=[], storage=[] (at pp.c:10237)
          TypeDecl: declname='arg_0x102b257d8', quals=[] (at pp.c:10237)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10239)
          PtrDecl: quals=[] (at pp.c:10239)
            TypeDecl: declname='msg', quals=[] (at pp.c:10239)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10246)
          TypeDecl: declname='error', quals=[] (at pp.c:10246)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMSend__sendDone', quals=[] (at pp.c:10235)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Snoop__receive', quals=[], storage=['static'] (at pp.c:10254)
    FuncDecl: quals=None (at pp.c:10254)
      ParamList:  (at pp.c:10256)
        Decl: name='arg_0x102b23480', quals=[], storage=[] (at pp.c:10256)
          TypeDecl: declname='arg_0x102b23480', quals=[] (at pp.c:10256)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10258)
          PtrDecl: quals=[] (at pp.c:10258)
            TypeDecl: declname='msg', quals=[] (at pp.c:10258)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10259)
          PtrDecl: quals=[] (at pp.c:10259)
            TypeDecl: declname='payload', quals=[] (at pp.c:10259)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10265)
          TypeDecl: declname='len', quals=[] (at pp.c:10265)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10250)
        TypeDecl: declname='CC2420ActiveMessageP__Snoop__receive', quals=[] (at pp.c:10254)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__ActiveMessageAddress__amAddress', quals=[], storage=['static'] (at pp.c:10267)
    FuncDecl: quals=None (at pp.c:10267)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__ActiveMessageAddress__amAddress', quals=[] (at pp.c:10267)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:10269)
    FuncDecl: quals=None (at pp.c:10269)
      ParamList:  (at pp.c:10269)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10269)
          PtrDecl: quals=[] (at pp.c:10269)
            TypeDecl: declname='msg', quals=[] (at pp.c:10269)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10269)
        TypeDecl: declname='CC2420ActiveMessageP__CC2420PacketBody__getHeader', quals=[] (at pp.c:10269)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Receive__receive', quals=[], storage=['static'] (at pp.c:10277)
    FuncDecl: quals=None (at pp.c:10277)
      ParamList:  (at pp.c:10279)
        Decl: name='arg_0x102b24908', quals=[], storage=[] (at pp.c:10279)
          TypeDecl: declname='arg_0x102b24908', quals=[] (at pp.c:10279)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10281)
          PtrDecl: quals=[] (at pp.c:10281)
            TypeDecl: declname='msg', quals=[] (at pp.c:10281)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10282)
          PtrDecl: quals=[] (at pp.c:10282)
            TypeDecl: declname='payload', quals=[] (at pp.c:10282)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10288)
          TypeDecl: declname='len', quals=[] (at pp.c:10288)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10273)
        TypeDecl: declname='CC2420ActiveMessageP__Receive__receive', quals=[] (at pp.c:10277)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioResource__release', quals=[], storage=['static'] (at pp.c:10290)
    FuncDecl: quals=None (at pp.c:10290)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioResource__release', quals=[] (at pp.c:10290)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioResource__immediateRequest', quals=[], storage=['static'] (at pp.c:10292)
    FuncDecl: quals=None (at pp.c:10292)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioResource__immediateRequest', quals=[] (at pp.c:10292)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioResource__request', quals=[], storage=['static'] (at pp.c:10294)
    FuncDecl: quals=None (at pp.c:10294)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioResource__request', quals=[] (at pp.c:10294)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__pending_length', quals=[], storage=[] (at pp.c:10296)
    TypeDecl: declname='CC2420ActiveMessageP__pending_length', quals=[] (at pp.c:10296)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ActiveMessageP__pending_message', quals=[], storage=[] (at pp.c:10297)
    PtrDecl: quals=[] (at pp.c:10297)
      TypeDecl: declname='CC2420ActiveMessageP__pending_message', quals=[] (at pp.c:10297)
        IdentifierType: names=['message_t'] (at None)
    Cast:  (at None)
      Typename: quals=[] (at None)
        PtrDecl: quals=[] (at pp.c:10297)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      Constant: type='int', value='0' (at pp.c:10297)
  Decl: name='CC2420ActiveMessageP__RadioResource__granted', quals=[], storage=['static'] (at pp.c:10299)
    FuncDecl: quals=None (at pp.c:10299)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioResource__granted', quals=[] (at pp.c:10299)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMSend__send', quals=[], storage=['static'] (at pp.c:10301)
    FuncDecl: quals=None (at pp.c:10301)
      ParamList:  (at pp.c:10301)
        Decl: name='id', quals=[], storage=[] (at pp.c:10301)
          TypeDecl: declname='id', quals=[] (at pp.c:10301)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10301)
          TypeDecl: declname='addr', quals=[] (at pp.c:10301)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10302)
          PtrDecl: quals=[] (at pp.c:10302)
            TypeDecl: declname='msg', quals=[] (at pp.c:10302)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10303)
          TypeDecl: declname='len', quals=[] (at pp.c:10303)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMSend__send', quals=[] (at pp.c:10301)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__address', quals=[], storage=['inline', 'static'] (at pp.c:10305)
    FuncDecl: quals=None (at pp.c:10305)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__address', quals=[] (at pp.c:10305)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__destination', quals=[], storage=['static'] (at pp.c:10309)
    FuncDecl: quals=None (at pp.c:10309)
      ParamList:  (at pp.c:10309)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10309)
          PtrDecl: quals=[] (at pp.c:10309)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10309)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__destination', quals=[] (at pp.c:10309)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__source', quals=[], storage=['inline', 'static'] (at pp.c:10314)
    FuncDecl: quals=None (at pp.c:10314)
      ParamList:  (at pp.c:10314)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10314)
          PtrDecl: quals=[] (at pp.c:10314)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10314)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__source', quals=[] (at pp.c:10314)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__setDestination', quals=[], storage=['inline', 'static'] (at pp.c:10319)
    FuncDecl: quals=None (at pp.c:10319)
      ParamList:  (at pp.c:10319)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10319)
          PtrDecl: quals=[] (at pp.c:10319)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10319)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10319)
          TypeDecl: declname='addr', quals=[] (at pp.c:10319)
            IdentifierType: names=['am_addr_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setDestination', quals=[] (at pp.c:10319)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__isForMe', quals=[], storage=['inline', 'static'] (at pp.c:10329)
    FuncDecl: quals=None (at pp.c:10329)
      ParamList:  (at pp.c:10329)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10329)
          PtrDecl: quals=[] (at pp.c:10329)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10329)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__isForMe', quals=[] (at pp.c:10329)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__type', quals=[], storage=['inline', 'static'] (at pp.c:10334)
    FuncDecl: quals=None (at pp.c:10334)
      ParamList:  (at pp.c:10334)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10334)
          PtrDecl: quals=[] (at pp.c:10334)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10334)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__type', quals=[] (at pp.c:10334)
        IdentifierType: names=['am_id_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__setType', quals=[], storage=['inline', 'static'] (at pp.c:10339)
    FuncDecl: quals=None (at pp.c:10339)
      ParamList:  (at pp.c:10339)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10339)
          PtrDecl: quals=[] (at pp.c:10339)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10339)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='type', quals=[], storage=[] (at pp.c:10339)
          TypeDecl: declname='type', quals=[] (at pp.c:10339)
            IdentifierType: names=['am_id_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setType', quals=[] (at pp.c:10339)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__payloadLength', quals=[], storage=['inline', 'static'] (at pp.c:10341)
    FuncDecl: quals=None (at pp.c:10341)
      ParamList:  (at pp.c:10341)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10341)
          PtrDecl: quals=[] (at pp.c:10341)
            TypeDecl: declname='msg', quals=[] (at pp.c:10341)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__payloadLength', quals=[] (at pp.c:10341)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:10345)
    FuncDecl: quals=None (at pp.c:10345)
      ParamList:  (at pp.c:10345)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10345)
          PtrDecl: quals=[] (at pp.c:10345)
            TypeDecl: declname='msg', quals=[] (at pp.c:10345)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10345)
          TypeDecl: declname='len', quals=[] (at pp.c:10345)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[] (at pp.c:10345)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:10349)
    FuncDecl: quals=None (at pp.c:10349)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[] (at pp.c:10349)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10359)
    FuncDecl: quals=None (at pp.c:10359)
      ParamList:  (at pp.c:10359)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10359)
          PtrDecl: quals=[] (at pp.c:10359)
            TypeDecl: declname='msg', quals=[] (at pp.c:10359)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='result', quals=[], storage=[] (at pp.c:10359)
          TypeDecl: declname='result', quals=[] (at pp.c:10359)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubSend__sendDone', quals=[] (at pp.c:10359)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:10366)
    FuncDecl: quals=None (at pp.c:10366)
      ParamList:  (at pp.c:10366)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10366)
          PtrDecl: quals=[] (at pp.c:10366)
            TypeDecl: declname='msg', quals=[] (at pp.c:10366)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10366)
          PtrDecl: quals=[] (at pp.c:10366)
            TypeDecl: declname='payload', quals=[] (at pp.c:10366)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10366)
          TypeDecl: declname='len', quals=[] (at pp.c:10366)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10366)
        TypeDecl: declname='CC2420ActiveMessageP__SubReceive__receive', quals=[] (at pp.c:10366)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:10368)
    FuncDecl: quals=None (at pp.c:10368)
      ParamList:  (at pp.c:10368)
        Decl: name='error', quals=[], storage=[] (at pp.c:10368)
          TypeDecl: declname='error', quals=[] (at pp.c:10368)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[] (at pp.c:10368)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:10374)
    FuncDecl: quals=None (at pp.c:10374)
      ParamList:  (at pp.c:10374)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10374)
          PtrDecl: quals=[] (at pp.c:10374)
            TypeDecl: declname='msg', quals=[] (at pp.c:10374)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:10374)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:10379)
    FuncDecl: quals=None (at pp.c:10379)
      ParamList:  (at pp.c:10379)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10379)
          PtrDecl: quals=[] (at pp.c:10379)
            TypeDecl: declname='msg', quals=[] (at pp.c:10379)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:10379)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:10383)
    FuncDecl: quals=None (at pp.c:10383)
      ParamList:  (at pp.c:10383)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10383)
          PtrDecl: quals=[] (at pp.c:10383)
            TypeDecl: declname='msg', quals=[] (at pp.c:10383)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[] (at pp.c:10383)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Receive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:10385)
    FuncDecl: quals=None (at pp.c:10385)
      ParamList:  (at pp.c:10385)
        Decl: name='id', quals=[], storage=[] (at pp.c:10385)
          TypeDecl: declname='id', quals=[] (at pp.c:10385)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10385)
          PtrDecl: quals=[] (at pp.c:10385)
            TypeDecl: declname='msg', quals=[] (at pp.c:10385)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10385)
          PtrDecl: quals=[] (at pp.c:10385)
            TypeDecl: declname='payload', quals=[] (at pp.c:10385)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10385)
          TypeDecl: declname='len', quals=[] (at pp.c:10385)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10385)
        TypeDecl: declname='CC2420ActiveMessageP__Receive__default__receive', quals=[] (at pp.c:10385)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Snoop__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:10389)
    FuncDecl: quals=None (at pp.c:10389)
      ParamList:  (at pp.c:10389)
        Decl: name='id', quals=[], storage=[] (at pp.c:10389)
          TypeDecl: declname='id', quals=[] (at pp.c:10389)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10389)
          PtrDecl: quals=[] (at pp.c:10389)
            TypeDecl: declname='msg', quals=[] (at pp.c:10389)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10389)
          PtrDecl: quals=[] (at pp.c:10389)
            TypeDecl: declname='payload', quals=[] (at pp.c:10389)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10389)
          TypeDecl: declname='len', quals=[] (at pp.c:10389)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10389)
        TypeDecl: declname='CC2420ActiveMessageP__Snoop__default__receive', quals=[] (at pp.c:10389)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[], storage=['inline', 'static'] (at pp.c:10397)
    FuncDecl: quals=None (at pp.c:10397)
      ParamList:  (at pp.c:10397)
        Decl: name='amId', quals=[], storage=[] (at pp.c:10397)
          TypeDecl: declname='amId', quals=[] (at pp.c:10397)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10397)
          TypeDecl: declname='addr', quals=[] (at pp.c:10397)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10397)
          PtrDecl: quals=[] (at pp.c:10397)
            TypeDecl: declname='msg', quals=[] (at pp.c:10397)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[] (at pp.c:10397)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:10399)
    FuncDecl: quals=None (at pp.c:10399)
      ParamList:  (at pp.c:10399)
        Decl: name='id', quals=[], storage=[] (at pp.c:10399)
          TypeDecl: declname='id', quals=[] (at pp.c:10399)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10400)
          PtrDecl: quals=[] (at pp.c:10400)
            TypeDecl: declname='msg', quals=[] (at pp.c:10400)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[] (at pp.c:10399)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:10403)
    FuncDecl: quals=None (at pp.c:10403)
      ParamList:  (at pp.c:10403)
        Decl: name='id', quals=[], storage=[] (at pp.c:10403)
          TypeDecl: declname='id', quals=[] (at pp.c:10403)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10404)
          PtrDecl: quals=[] (at pp.c:10404)
            TypeDecl: declname='msg', quals=[] (at pp.c:10404)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[] (at pp.c:10403)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:10407)
    FuncDecl: quals=None (at pp.c:10407)
      ParamList:  (at pp.c:10407)
        Decl: name='id', quals=[], storage=[] (at pp.c:10407)
          TypeDecl: declname='id', quals=[] (at pp.c:10407)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10408)
          PtrDecl: quals=[] (at pp.c:10408)
            TypeDecl: declname='msg', quals=[] (at pp.c:10408)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[] (at pp.c:10407)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:10410)
    FuncDecl: quals=None (at pp.c:10410)
      ParamList:  (at pp.c:10412)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10412)
          PtrDecl: quals=[] (at pp.c:10412)
            TypeDecl: declname='msg', quals=[] (at pp.c:10412)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10419)
          TypeDecl: declname='error', quals=[] (at pp.c:10419)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__AMSend__sendDone', quals=[] (at pp.c:10410)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__Send__send', quals=[], storage=['static'] (at pp.c:10421)
    FuncDecl: quals=None (at pp.c:10421)
      ParamList:  (at pp.c:10423)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10423)
          PtrDecl: quals=[] (at pp.c:10423)
            TypeDecl: declname='msg', quals=[] (at pp.c:10423)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10431)
          TypeDecl: declname='len', quals=[] (at pp.c:10431)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__Send__send', quals=[] (at pp.c:10421)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueEntryP__0__AMPacket__setDestination', quals=[], storage=['static'] (at pp.c:10433)
    FuncDecl: quals=None (at pp.c:10433)
      ParamList:  (at pp.c:10435)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10435)
          PtrDecl: quals=[] (at pp.c:10435)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10435)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10439)
          TypeDecl: declname='addr', quals=[] (at pp.c:10439)
            IdentifierType: names=['am_addr_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__AMPacket__setDestination', quals=[] (at pp.c:10433)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__AMPacket__setType', quals=[], storage=['static'] (at pp.c:10441)
    FuncDecl: quals=None (at pp.c:10441)
      ParamList:  (at pp.c:10443)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10443)
          PtrDecl: quals=[] (at pp.c:10443)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10443)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='t', quals=[], storage=[] (at pp.c:10447)
          TypeDecl: declname='t', quals=[] (at pp.c:10447)
            IdentifierType: names=['am_id_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__AMPacket__setType', quals=[] (at pp.c:10441)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__AMSend__send', quals=[], storage=['inline', 'static'] (at pp.c:10449)
    FuncDecl: quals=None (at pp.c:10449)
      ParamList:  (at pp.c:10449)
        Decl: name='dest', quals=[], storage=[] (at pp.c:10449)
          TypeDecl: declname='dest', quals=[] (at pp.c:10449)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10450)
          PtrDecl: quals=[] (at pp.c:10450)
            TypeDecl: declname='msg', quals=[] (at pp.c:10450)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10451)
          TypeDecl: declname='len', quals=[] (at pp.c:10451)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__AMSend__send', quals=[] (at pp.c:10449)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueEntryP__0__Send__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10461)
    FuncDecl: quals=None (at pp.c:10461)
      ParamList:  (at pp.c:10461)
        Decl: name='m', quals=[], storage=[] (at pp.c:10461)
          PtrDecl: quals=[] (at pp.c:10461)
            TypeDecl: declname='m', quals=[] (at pp.c:10461)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10461)
          TypeDecl: declname='err', quals=[] (at pp.c:10461)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__Send__sendDone', quals=[] (at pp.c:10461)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__AMSend__send', quals=[], storage=['static'] (at pp.c:10463)
    FuncDecl: quals=None (at pp.c:10463)
      ParamList:  (at pp.c:10465)
        Decl: name='arg_0x102bbe020', quals=[], storage=[] (at pp.c:10465)
          TypeDecl: declname='arg_0x102bbe020', quals=[] (at pp.c:10465)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10467)
          TypeDecl: declname='addr', quals=[] (at pp.c:10467)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10469)
          PtrDecl: quals=[] (at pp.c:10469)
            TypeDecl: declname='msg', quals=[] (at pp.c:10469)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10478)
          TypeDecl: declname='len', quals=[] (at pp.c:10478)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__AMSend__send', quals=[] (at pp.c:10463)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__0__Send__sendDone', quals=[], storage=['static'] (at pp.c:10480)
    FuncDecl: quals=None (at pp.c:10480)
      ParamList:  (at pp.c:10482)
        Decl: name='arg_0x102bc1e18', quals=[], storage=[] (at pp.c:10482)
          TypeDecl: declname='arg_0x102bc1e18', quals=[] (at pp.c:10482)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10484)
          PtrDecl: quals=[] (at pp.c:10484)
            TypeDecl: declname='msg', quals=[] (at pp.c:10484)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10488)
          TypeDecl: declname='error', quals=[] (at pp.c:10488)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Send__sendDone', quals=[] (at pp.c:10480)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Packet__payloadLength', quals=[], storage=['static'] (at pp.c:10490)
    FuncDecl: quals=None (at pp.c:10490)
      ParamList:  (at pp.c:10492)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10492)
          PtrDecl: quals=[] (at pp.c:10492)
            TypeDecl: declname='msg', quals=[] (at pp.c:10492)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Packet__payloadLength', quals=[] (at pp.c:10490)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='AMQueueImplP__0__Packet__setPayloadLength', quals=[], storage=['static'] (at pp.c:10494)
    FuncDecl: quals=None (at pp.c:10494)
      ParamList:  (at pp.c:10496)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10496)
          PtrDecl: quals=[] (at pp.c:10496)
            TypeDecl: declname='msg', quals=[] (at pp.c:10496)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10500)
          TypeDecl: declname='len', quals=[] (at pp.c:10500)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Packet__setPayloadLength', quals=[] (at pp.c:10494)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__errorTask__postTask', quals=[], storage=['static'] (at pp.c:10502)
    FuncDecl: quals=None (at pp.c:10502)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__errorTask__postTask', quals=[] (at pp.c:10502)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__0__AMPacket__destination', quals=[], storage=['static'] (at pp.c:10504)
    FuncDecl: quals=None (at pp.c:10504)
      ParamList:  (at pp.c:10506)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10506)
          PtrDecl: quals=[] (at pp.c:10506)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10506)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__AMPacket__destination', quals=[] (at pp.c:10504)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='AMQueueImplP__0__AMPacket__type', quals=[], storage=['static'] (at pp.c:10508)
    FuncDecl: quals=None (at pp.c:10508)
      ParamList:  (at pp.c:10510)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10510)
          PtrDecl: quals=[] (at pp.c:10510)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10510)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__AMPacket__type', quals=[] (at pp.c:10508)
        IdentifierType: names=['am_id_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:10512)
    Enum: name='AMQueueImplP__0____nesc_unnamed4396' (at pp.c:10512)
      EnumeratorList:  (at pp.c:10514)
        Enumerator: name='AMQueueImplP__0__CancelTask' (at pp.c:10514)
          Constant: type='int', value='26U' (at pp.c:10514)
  Typedef: name='AMQueueImplP__0____nesc_sillytask_CancelTask', quals=[], storage=['typedef'] (at pp.c:10517)
    ArrayDecl:  (at pp.c:10517)
      TypeDecl: declname='AMQueueImplP__0____nesc_sillytask_CancelTask', quals=[] (at pp.c:10517)
        IdentifierType: names=['int'] (at None)
      ID: name='AMQueueImplP__0__CancelTask' (at pp.c:10517)
  Decl: name=None, quals=[], storage=[] (at pp.c:10519)
    Enum: name='AMQueueImplP__0____nesc_unnamed4397' (at pp.c:10519)
      EnumeratorList:  (at pp.c:10521)
        Enumerator: name='AMQueueImplP__0__errorTask' (at pp.c:10521)
          Constant: type='int', value='27U' (at pp.c:10521)
  Typedef: name='AMQueueImplP__0____nesc_sillytask_errorTask', quals=[], storage=['typedef'] (at pp.c:10524)
    ArrayDecl:  (at pp.c:10524)
      TypeDecl: declname='AMQueueImplP__0____nesc_sillytask_errorTask', quals=[] (at pp.c:10524)
        IdentifierType: names=['int'] (at None)
      ID: name='AMQueueImplP__0__errorTask' (at pp.c:10524)
  Typedef: name='AMQueueImplP__0__queue_entry_t', quals=[], storage=['typedef'] (at pp.c:10529)
    TypeDecl: declname='AMQueueImplP__0__queue_entry_t', quals=[] (at pp.c:10529)
      Struct: name='AMQueueImplP__0____nesc_unnamed4398', packed=False (at pp.c:10527)
        Decl: name='msg', quals=[], storage=[] (at 0)
          PtrDecl: quals=[] (at pp.c:10528)
            TypeDecl: declname='msg', quals=[] (at pp.c:10528)
              IdentifierType: names=['message_t'] (at None)
  Decl: name='AMQueueImplP__0__current', quals=[], storage=[] (at pp.c:10531)
    TypeDecl: declname='AMQueueImplP__0__current', quals=[] (at pp.c:10531)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='1' (at pp.c:10531)
  Decl: name='AMQueueImplP__0__queue', quals=[], storage=[] (at pp.c:10532)
    ArrayDecl:  (at pp.c:10532)
      TypeDecl: declname='AMQueueImplP__0__queue', quals=[] (at pp.c:10532)
        IdentifierType: names=['AMQueueImplP__0__queue_entry_t'] (at None)
      Constant: type='int', value='1' (at pp.c:10532)
  Decl: name='AMQueueImplP__0__cancelMask', quals=[], storage=[] (at pp.c:10533)
    ArrayDecl:  (at pp.c:10533)
      TypeDecl: declname='AMQueueImplP__0__cancelMask', quals=[] (at pp.c:10533)
        IdentifierType: names=['uint8_t'] (at None)
      BinaryOp: op='+' (at pp.c:10533)
        BinaryOp: op='/' (at pp.c:10533)
          Constant: type='int', value='1' (at pp.c:10533)
          Constant: type='int', value='8' (at pp.c:10533)
        Constant: type='int', value='1' (at pp.c:10533)
  Decl: name='AMQueueImplP__0__tryToSend', quals=[], storage=['inline', 'static'] (at pp.c:10535)
    FuncDecl: quals=None (at pp.c:10535)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__tryToSend', quals=[] (at pp.c:10535)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__nextPacket', quals=[], storage=['inline', 'static'] (at pp.c:10537)
    FuncDecl: quals=None (at pp.c:10537)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__nextPacket', quals=[] (at pp.c:10537)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:10539)
    FuncDecl: quals=None (at pp.c:10539)
      ParamList:  (at pp.c:10539)
        Decl: name='clientId', quals=[], storage=[] (at pp.c:10539)
          TypeDecl: declname='clientId', quals=[] (at pp.c:10539)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10539)
          PtrDecl: quals=[] (at pp.c:10539)
            TypeDecl: declname='msg', quals=[] (at pp.c:10539)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10540)
          TypeDecl: declname='len', quals=[] (at pp.c:10540)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Send__send', quals=[] (at pp.c:10539)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__0__CancelTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10542)
    FuncDecl: quals=None (at pp.c:10542)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__CancelTask__runTask', quals=[] (at pp.c:10542)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__sendDone', quals=[], storage=['static'] (at pp.c:10544)
    FuncDecl: quals=None (at pp.c:10544)
      ParamList:  (at pp.c:10544)
        Decl: name='last', quals=[], storage=[] (at pp.c:10544)
          TypeDecl: declname='last', quals=[] (at pp.c:10544)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10544)
          PtrDecl: quals=[] (at pp.c:10544)
            TypeDecl: declname='msg', quals=[] (at pp.c:10544)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10544)
          TypeDecl: declname='err', quals=[] (at pp.c:10544)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__sendDone', quals=[] (at pp.c:10544)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__errorTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10550)
    FuncDecl: quals=None (at pp.c:10550)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__errorTask__runTask', quals=[] (at pp.c:10550)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__tryToSend', quals=[], storage=['inline', 'static'] (at pp.c:10555)
    FuncDecl: quals=None (at pp.c:10555)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__tryToSend', quals=[] (at pp.c:10555)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:10557)
    FuncDecl: quals=None (at pp.c:10557)
      ParamList:  (at pp.c:10557)
        Decl: name='id', quals=[], storage=[] (at pp.c:10557)
          TypeDecl: declname='id', quals=[] (at pp.c:10557)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10557)
          PtrDecl: quals=[] (at pp.c:10557)
            TypeDecl: declname='msg', quals=[] (at pp.c:10557)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10557)
          TypeDecl: declname='err', quals=[] (at pp.c:10557)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__AMSend__sendDone', quals=[] (at pp.c:10557)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Send__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10559)
    FuncDecl: quals=None (at pp.c:10559)
      ParamList:  (at pp.c:10559)
        Decl: name='id', quals=[], storage=[] (at pp.c:10559)
          TypeDecl: declname='id', quals=[] (at pp.c:10559)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10559)
          PtrDecl: quals=[] (at pp.c:10559)
            TypeDecl: declname='msg', quals=[] (at pp.c:10559)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10559)
          TypeDecl: declname='err', quals=[] (at pp.c:10559)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Send__default__sendDone', quals=[] (at pp.c:10559)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__SubAMSend__send', quals=[], storage=['static'] (at pp.c:10561)
    FuncDecl: quals=None (at pp.c:10561)
      ParamList:  (at pp.c:10561)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10561)
          TypeDecl: declname='addr', quals=[] (at pp.c:10561)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10563)
          PtrDecl: quals=[] (at pp.c:10563)
            TypeDecl: declname='msg', quals=[] (at pp.c:10563)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10572)
          TypeDecl: declname='len', quals=[] (at pp.c:10572)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__SubAMSend__send', quals=[] (at pp.c:10561)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LplAMSenderP__0__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:10574)
    FuncDecl: quals=None (at pp.c:10574)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LplAMSenderP__0__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[] (at pp.c:10574)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='LplAMSenderP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:10576)
    FuncDecl: quals=None (at pp.c:10576)
      ParamList:  (at pp.c:10578)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10578)
          PtrDecl: quals=[] (at pp.c:10578)
            TypeDecl: declname='msg', quals=[] (at pp.c:10578)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10585)
          TypeDecl: declname='error', quals=[] (at pp.c:10585)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__AMSend__sendDone', quals=[] (at pp.c:10576)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__Lpl__setRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:10587)
    FuncDecl: quals=None (at pp.c:10587)
      ParamList:  (at pp.c:10589)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10589)
          PtrDecl: quals=[] (at pp.c:10589)
            TypeDecl: declname='msg', quals=[] (at pp.c:10589)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:10592)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:10592)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__Lpl__setRemoteWakeupInterval', quals=[] (at pp.c:10587)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__AMSend__send', quals=[], storage=['inline', 'static'] (at pp.c:10594)
    FuncDecl: quals=None (at pp.c:10594)
      ParamList:  (at pp.c:10594)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10594)
          TypeDecl: declname='addr', quals=[] (at pp.c:10594)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10594)
          PtrDecl: quals=[] (at pp.c:10594)
            TypeDecl: declname='msg', quals=[] (at pp.c:10594)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10594)
          TypeDecl: declname='len', quals=[] (at pp.c:10594)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__AMSend__send', quals=[] (at pp.c:10594)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LplAMSenderP__0__SubAMSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10600)
    FuncDecl: quals=None (at pp.c:10600)
      ParamList:  (at pp.c:10600)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10600)
          PtrDecl: quals=[] (at pp.c:10600)
            TypeDecl: declname='msg', quals=[] (at pp.c:10600)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10600)
          TypeDecl: declname='error', quals=[] (at pp.c:10600)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__SubAMSend__sendDone', quals=[] (at pp.c:10600)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__1__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:10602)
    FuncDecl: quals=None (at pp.c:10602)
      ParamList:  (at pp.c:10604)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10604)
          PtrDecl: quals=[] (at pp.c:10604)
            TypeDecl: declname='msg', quals=[] (at pp.c:10604)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10611)
          TypeDecl: declname='error', quals=[] (at pp.c:10611)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__1__AMSend__sendDone', quals=[] (at pp.c:10602)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__1__Send__send', quals=[], storage=['static'] (at pp.c:10613)
    FuncDecl: quals=None (at pp.c:10613)
      ParamList:  (at pp.c:10615)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10615)
          PtrDecl: quals=[] (at pp.c:10615)
            TypeDecl: declname='msg', quals=[] (at pp.c:10615)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10623)
          TypeDecl: declname='len', quals=[] (at pp.c:10623)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__1__Send__send', quals=[] (at pp.c:10613)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueEntryP__1__AMPacket__setDestination', quals=[], storage=['static'] (at pp.c:10625)
    FuncDecl: quals=None (at pp.c:10625)
      ParamList:  (at pp.c:10627)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10627)
          PtrDecl: quals=[] (at pp.c:10627)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10627)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10631)
          TypeDecl: declname='addr', quals=[] (at pp.c:10631)
            IdentifierType: names=['am_addr_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__1__AMPacket__setDestination', quals=[] (at pp.c:10625)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__1__AMPacket__setType', quals=[], storage=['static'] (at pp.c:10633)
    FuncDecl: quals=None (at pp.c:10633)
      ParamList:  (at pp.c:10635)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10635)
          PtrDecl: quals=[] (at pp.c:10635)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10635)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='t', quals=[], storage=[] (at pp.c:10639)
          TypeDecl: declname='t', quals=[] (at pp.c:10639)
            IdentifierType: names=['am_id_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__1__AMPacket__setType', quals=[] (at pp.c:10633)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__1__AMSend__send', quals=[], storage=['static'] (at pp.c:10641)
    FuncDecl: quals=None (at pp.c:10641)
      ParamList:  (at pp.c:10641)
        Decl: name='dest', quals=[], storage=[] (at pp.c:10641)
          TypeDecl: declname='dest', quals=[] (at pp.c:10641)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10642)
          PtrDecl: quals=[] (at pp.c:10642)
            TypeDecl: declname='msg', quals=[] (at pp.c:10642)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10643)
          TypeDecl: declname='len', quals=[] (at pp.c:10643)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__1__AMSend__send', quals=[] (at pp.c:10641)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueEntryP__1__Send__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10653)
    FuncDecl: quals=None (at pp.c:10653)
      ParamList:  (at pp.c:10653)
        Decl: name='m', quals=[], storage=[] (at pp.c:10653)
          PtrDecl: quals=[] (at pp.c:10653)
            TypeDecl: declname='m', quals=[] (at pp.c:10653)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10653)
          TypeDecl: declname='err', quals=[] (at pp.c:10653)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__1__Send__sendDone', quals=[] (at pp.c:10653)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__AMSend__send', quals=[], storage=['static'] (at pp.c:10655)
    FuncDecl: quals=None (at pp.c:10655)
      ParamList:  (at pp.c:10657)
        Decl: name='arg_0x102bbe020', quals=[], storage=[] (at pp.c:10657)
          TypeDecl: declname='arg_0x102bbe020', quals=[] (at pp.c:10657)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10659)
          TypeDecl: declname='addr', quals=[] (at pp.c:10659)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10661)
          PtrDecl: quals=[] (at pp.c:10661)
            TypeDecl: declname='msg', quals=[] (at pp.c:10661)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10670)
          TypeDecl: declname='len', quals=[] (at pp.c:10670)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__AMSend__send', quals=[] (at pp.c:10655)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__1__Send__sendDone', quals=[], storage=['static'] (at pp.c:10672)
    FuncDecl: quals=None (at pp.c:10672)
      ParamList:  (at pp.c:10674)
        Decl: name='arg_0x102bc1e18', quals=[], storage=[] (at pp.c:10674)
          TypeDecl: declname='arg_0x102bc1e18', quals=[] (at pp.c:10674)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10676)
          PtrDecl: quals=[] (at pp.c:10676)
            TypeDecl: declname='msg', quals=[] (at pp.c:10676)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10680)
          TypeDecl: declname='error', quals=[] (at pp.c:10680)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__Send__sendDone', quals=[] (at pp.c:10672)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__Packet__payloadLength', quals=[], storage=['static'] (at pp.c:10682)
    FuncDecl: quals=None (at pp.c:10682)
      ParamList:  (at pp.c:10684)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10684)
          PtrDecl: quals=[] (at pp.c:10684)
            TypeDecl: declname='msg', quals=[] (at pp.c:10684)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__Packet__payloadLength', quals=[] (at pp.c:10682)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='AMQueueImplP__1__Packet__setPayloadLength', quals=[], storage=['static'] (at pp.c:10686)
    FuncDecl: quals=None (at pp.c:10686)
      ParamList:  (at pp.c:10688)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10688)
          PtrDecl: quals=[] (at pp.c:10688)
            TypeDecl: declname='msg', quals=[] (at pp.c:10688)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10692)
          TypeDecl: declname='len', quals=[] (at pp.c:10692)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__Packet__setPayloadLength', quals=[] (at pp.c:10686)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__errorTask__postTask', quals=[], storage=['static'] (at pp.c:10694)
    FuncDecl: quals=None (at pp.c:10694)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__1__errorTask__postTask', quals=[] (at pp.c:10694)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__1__AMPacket__destination', quals=[], storage=['static'] (at pp.c:10696)
    FuncDecl: quals=None (at pp.c:10696)
      ParamList:  (at pp.c:10698)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10698)
          PtrDecl: quals=[] (at pp.c:10698)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10698)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__AMPacket__destination', quals=[] (at pp.c:10696)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='AMQueueImplP__1__AMPacket__type', quals=[], storage=['static'] (at pp.c:10700)
    FuncDecl: quals=None (at pp.c:10700)
      ParamList:  (at pp.c:10702)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10702)
          PtrDecl: quals=[] (at pp.c:10702)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10702)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__AMPacket__type', quals=[] (at pp.c:10700)
        IdentifierType: names=['am_id_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:10704)
    Enum: name='AMQueueImplP__1____nesc_unnamed4399' (at pp.c:10704)
      EnumeratorList:  (at pp.c:10706)
        Enumerator: name='AMQueueImplP__1__CancelTask' (at pp.c:10706)
          Constant: type='int', value='28U' (at pp.c:10706)
  Typedef: name='AMQueueImplP__1____nesc_sillytask_CancelTask', quals=[], storage=['typedef'] (at pp.c:10709)
    ArrayDecl:  (at pp.c:10709)
      TypeDecl: declname='AMQueueImplP__1____nesc_sillytask_CancelTask', quals=[] (at pp.c:10709)
        IdentifierType: names=['int'] (at None)
      ID: name='AMQueueImplP__1__CancelTask' (at pp.c:10709)
  Decl: name=None, quals=[], storage=[] (at pp.c:10711)
    Enum: name='AMQueueImplP__1____nesc_unnamed4400' (at pp.c:10711)
      EnumeratorList:  (at pp.c:10713)
        Enumerator: name='AMQueueImplP__1__errorTask' (at pp.c:10713)
          Constant: type='int', value='29U' (at pp.c:10713)
  Typedef: name='AMQueueImplP__1____nesc_sillytask_errorTask', quals=[], storage=['typedef'] (at pp.c:10716)
    ArrayDecl:  (at pp.c:10716)
      TypeDecl: declname='AMQueueImplP__1____nesc_sillytask_errorTask', quals=[] (at pp.c:10716)
        IdentifierType: names=['int'] (at None)
      ID: name='AMQueueImplP__1__errorTask' (at pp.c:10716)
  Typedef: name='AMQueueImplP__1__queue_entry_t', quals=[], storage=['typedef'] (at pp.c:10721)
    TypeDecl: declname='AMQueueImplP__1__queue_entry_t', quals=[] (at pp.c:10721)
      Struct: name='AMQueueImplP__1____nesc_unnamed4401', packed=False (at pp.c:10719)
        Decl: name='msg', quals=[], storage=[] (at 0)
          PtrDecl: quals=[] (at pp.c:10720)
            TypeDecl: declname='msg', quals=[] (at pp.c:10720)
              IdentifierType: names=['message_t'] (at None)
  Decl: name='AMQueueImplP__1__current', quals=[], storage=[] (at pp.c:10723)
    TypeDecl: declname='AMQueueImplP__1__current', quals=[] (at pp.c:10723)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='1' (at pp.c:10723)
  Decl: name='AMQueueImplP__1__queue', quals=[], storage=[] (at pp.c:10724)
    ArrayDecl:  (at pp.c:10724)
      TypeDecl: declname='AMQueueImplP__1__queue', quals=[] (at pp.c:10724)
        IdentifierType: names=['AMQueueImplP__1__queue_entry_t'] (at None)
      Constant: type='int', value='1' (at pp.c:10724)
  Decl: name='AMQueueImplP__1__cancelMask', quals=[], storage=[] (at pp.c:10725)
    ArrayDecl:  (at pp.c:10725)
      TypeDecl: declname='AMQueueImplP__1__cancelMask', quals=[] (at pp.c:10725)
        IdentifierType: names=['uint8_t'] (at None)
      BinaryOp: op='+' (at pp.c:10725)
        BinaryOp: op='/' (at pp.c:10725)
          Constant: type='int', value='1' (at pp.c:10725)
          Constant: type='int', value='8' (at pp.c:10725)
        Constant: type='int', value='1' (at pp.c:10725)
  Decl: name='AMQueueImplP__1__tryToSend', quals=[], storage=['inline', 'static'] (at pp.c:10727)
    FuncDecl: quals=None (at pp.c:10727)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__1__tryToSend', quals=[] (at pp.c:10727)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__nextPacket', quals=[], storage=['inline', 'static'] (at pp.c:10729)
    FuncDecl: quals=None (at pp.c:10729)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__1__nextPacket', quals=[] (at pp.c:10729)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:10731)
    FuncDecl: quals=None (at pp.c:10731)
      ParamList:  (at pp.c:10731)
        Decl: name='clientId', quals=[], storage=[] (at pp.c:10731)
          TypeDecl: declname='clientId', quals=[] (at pp.c:10731)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10731)
          PtrDecl: quals=[] (at pp.c:10731)
            TypeDecl: declname='msg', quals=[] (at pp.c:10731)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10732)
          TypeDecl: declname='len', quals=[] (at pp.c:10732)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__Send__send', quals=[] (at pp.c:10731)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__1__CancelTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10734)
    FuncDecl: quals=None (at pp.c:10734)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__1__CancelTask__runTask', quals=[] (at pp.c:10734)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__sendDone', quals=[], storage=['static'] (at pp.c:10736)
    FuncDecl: quals=None (at pp.c:10736)
      ParamList:  (at pp.c:10736)
        Decl: name='last', quals=[], storage=[] (at pp.c:10736)
          TypeDecl: declname='last', quals=[] (at pp.c:10736)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10736)
          PtrDecl: quals=[] (at pp.c:10736)
            TypeDecl: declname='msg', quals=[] (at pp.c:10736)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10736)
          TypeDecl: declname='err', quals=[] (at pp.c:10736)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__sendDone', quals=[] (at pp.c:10736)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__errorTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10742)
    FuncDecl: quals=None (at pp.c:10742)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__1__errorTask__runTask', quals=[] (at pp.c:10742)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__tryToSend', quals=[], storage=['inline', 'static'] (at pp.c:10747)
    FuncDecl: quals=None (at pp.c:10747)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__1__tryToSend', quals=[] (at pp.c:10747)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__AMSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10749)
    FuncDecl: quals=None (at pp.c:10749)
      ParamList:  (at pp.c:10749)
        Decl: name='id', quals=[], storage=[] (at pp.c:10749)
          TypeDecl: declname='id', quals=[] (at pp.c:10749)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10749)
          PtrDecl: quals=[] (at pp.c:10749)
            TypeDecl: declname='msg', quals=[] (at pp.c:10749)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10749)
          TypeDecl: declname='err', quals=[] (at pp.c:10749)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__AMSend__sendDone', quals=[] (at pp.c:10749)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__1__Send__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10751)
    FuncDecl: quals=None (at pp.c:10751)
      ParamList:  (at pp.c:10751)
        Decl: name='id', quals=[], storage=[] (at pp.c:10751)
          TypeDecl: declname='id', quals=[] (at pp.c:10751)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10751)
          PtrDecl: quals=[] (at pp.c:10751)
            TypeDecl: declname='msg', quals=[] (at pp.c:10751)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10751)
          TypeDecl: declname='err', quals=[] (at pp.c:10751)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__1__Send__default__sendDone', quals=[] (at pp.c:10751)
        IdentifierType: names=['void'] (at None)
  FuncDef:  (at pp.c:10753)
    Decl: name='__nesc_enable_interrupt', quals=[], storage=['inline', 'static'] (at pp.c:10753)
      FuncDecl: quals=None (at pp.c:10753)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_enable_interrupt', quals=[] (at pp.c:10753)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10754)
      Assignment: op='|=' (at pp.c:10755)
        ID: name='_R2' (at pp.c:10755)
        Constant: type='int', value='0x0008' (at pp.c:10755)
  FuncDef:  (at pp.c:10758)
    Decl: name='Msp430TimerCapComP__2__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10758)
      FuncDecl: quals=None (at pp.c:10758)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Timer__overflow', quals=[] (at pp.c:10758)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10759)
  FuncDef:  (at pp.c:10763)
    Decl: name='Msp430TimerCapComP__1__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10763)
      FuncDecl: quals=None (at pp.c:10763)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Timer__overflow', quals=[] (at pp.c:10763)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10764)
  FuncDef:  (at pp.c:10768)
    Decl: name='Msp430TimerCapComP__0__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10768)
      FuncDecl: quals=None (at pp.c:10768)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Timer__overflow', quals=[] (at pp.c:10768)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10769)
  FuncDef:  (at pp.c:10773)
    Decl: name='BusyWaitCounterC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10773)
      FuncDecl: quals=None (at pp.c:10773)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='BusyWaitCounterC__0__Counter__overflow', quals=[] (at pp.c:10773)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10774)
  FuncDef:  (at pp.c:10778)
    Decl: name='Msp430CounterC__1__Counter__overflow', quals=[], storage=['static', 'inline'] (at pp.c:10778)
      FuncDecl: quals=None (at pp.c:10778)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__1__Counter__overflow', quals=[] (at pp.c:10778)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10778)
      FuncCall:  (at None)
        ID: name='BusyWaitCounterC__0__Counter__overflow' (at pp.c:10780)
  FuncDef:  (at pp.c:10785)
    Decl: name='Msp430CounterC__1__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10785)
      FuncDecl: quals=None (at pp.c:10785)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__1__Msp430Timer__overflow', quals=[] (at pp.c:10785)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10786)
      FuncCall:  (at None)
        ID: name='Msp430CounterC__1__Counter__overflow' (at pp.c:10787)
  FuncDef:  (at pp.c:10791)
    Decl: name='Msp430TimerP__0__Timer__overflow', quals=[], storage=['static', 'inline'] (at pp.c:10791)
      FuncDecl: quals=None (at pp.c:10791)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__0__Timer__overflow', quals=[] (at pp.c:10791)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10791)
      FuncCall:  (at None)
        ID: name='Msp430CounterC__1__Msp430Timer__overflow' (at pp.c:10793)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__0__Timer__overflow' (at pp.c:10795)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__1__Timer__overflow' (at pp.c:10797)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__2__Timer__overflow' (at pp.c:10799)
  FuncDef:  (at pp.c:10804)
    Decl: name='Msp430TimerP__0__Overflow__fired', quals=[], storage=['inline', 'static'] (at pp.c:10804)
      FuncDecl: quals=None (at pp.c:10804)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__0__Overflow__fired', quals=[] (at pp.c:10804)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10805)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__0__Timer__overflow' (at pp.c:10806)
  FuncDef:  (at pp.c:10813)
    Decl: name='Msp430TimerP__0__Event__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:10813)
      FuncDecl: quals=None (at pp.c:10813)
        ParamList:  (at pp.c:10813)
          Decl: name='n', quals=[], storage=[] (at pp.c:10813)
            TypeDecl: declname='n', quals=[] (at pp.c:10813)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerP__0__Event__default__fired', quals=[] (at pp.c:10813)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10814)
  FuncDef:  (at pp.c:10818)
    Decl: name='Msp430TimerP__0__Event__fired', quals=[], storage=['static', 'inline'] (at pp.c:10818)
      FuncDecl: quals=None (at pp.c:10818)
        ParamList:  (at pp.c:10818)
          Decl: name='arg_0x1015d0de0', quals=[], storage=[] (at pp.c:10818)
            TypeDecl: declname='arg_0x1015d0de0', quals=[] (at pp.c:10818)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerP__0__Event__fired', quals=[] (at pp.c:10818)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10818)
      Switch:  (at pp.c:10820)
        ID: name='arg_0x1015d0de0' (at pp.c:10820)
        Compound:  (at pp.c:10820)
          Case:  (at pp.c:10822)
            Constant: type='int', value='0' (at pp.c:10822)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__0__Event__fired' (at pp.c:10824)
          Break:  (at pp.c:10826)
          Case:  (at pp.c:10828)
            Constant: type='int', value='1' (at pp.c:10828)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__1__Event__fired' (at pp.c:10830)
          Break:  (at pp.c:10832)
          Case:  (at pp.c:10834)
            Constant: type='int', value='2' (at pp.c:10834)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__2__Event__fired' (at pp.c:10836)
          Break:  (at pp.c:10838)
          Case:  (at pp.c:10840)
            Constant: type='int', value='5' (at pp.c:10840)
            FuncCall:  (at None)
              ID: name='Msp430TimerP__0__Overflow__fired' (at pp.c:10842)
          Break:  (at pp.c:10844)
          Default:  (at pp.c:10846)
            FuncCall:  (at None)
              ID: name='Msp430TimerP__0__Event__default__fired' (at pp.c:10848)
              ExprList:  (at pp.c:10848)
                ID: name='arg_0x1015d0de0' (at pp.c:10848)
          Break:  (at pp.c:10850)
  FuncDef:  (at pp.c:10857)
    Decl: name='Msp430TimerP__0__VectorTimerX0__fired', quals=[], storage=['inline', 'static'] (at pp.c:10857)
      FuncDecl: quals=None (at pp.c:10857)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__0__VectorTimerX0__fired', quals=[] (at pp.c:10857)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10858)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__0__Event__fired' (at pp.c:10859)
        ExprList:  (at pp.c:10859)
          Constant: type='int', value='0' (at pp.c:10859)
  FuncDef:  (at pp.c:10863)
    Decl: name='Msp430TimerCommonP__VectorTimerA0__fired', quals=[], storage=['static', 'inline'] (at pp.c:10863)
      FuncDecl: quals=None (at pp.c:10863)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCommonP__VectorTimerA0__fired', quals=[] (at pp.c:10863)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10863)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__0__VectorTimerX0__fired' (at pp.c:10865)
  FuncDef:  (at pp.c:10870)
    Decl: name='Msp430TimerCapComP__0__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:10870)
      FuncDecl: quals=None (at pp.c:10870)
        ParamList:  (at pp.c:10870)
          Decl: name='x', quals=[], storage=[] (at pp.c:10870)
            TypeDecl: declname='x', quals=[] (at pp.c:10870)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__int2CC', quals=[] (at pp.c:10870)
          IdentifierType: names=['Msp430TimerCapComP__0__cc_t'] (at None)
    Compound:  (at pp.c:10872)
      Decl: name='c', quals=[], storage=[] (at pp.c:10881)
        TypeDecl: declname='c', quals=[] (at pp.c:10881)
          Union: name='Msp430TimerCapComP__0____nesc_unnamed4402', packed=False (at pp.c:10874)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:10876)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:10878)
                IdentifierType: names=['Msp430TimerCapComP__0__cc_t'] (at None)
        ExprList:  (at pp.c:10881)
          Assignment: op='=' (at pp.c:10881)
            StructRef: type='.' (at pp.c:10881)
              ID: name='f' (at pp.c:10881)
            ID: name='x' (at pp.c:10881)
      Return:  (at pp.c:10884)
        StructRef: type='.' (at pp.c:10884)
          ID: name='c' (at pp.c:10884)
          ID: name='t' (at pp.c:10884)
  FuncDef:  (at pp.c:10888)
    Decl: name='Msp430TimerCapComP__0__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:10888)
      FuncDecl: quals=None (at pp.c:10888)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Control__getControl', quals=[] (at pp.c:10888)
          IdentifierType: names=['Msp430TimerCapComP__0__cc_t'] (at None)
    Compound:  (at pp.c:10889)
      Return:  (at pp.c:10890)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__0__int2CC' (at pp.c:10890)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:10890)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='354U' (at pp.c:10890)
  FuncDef:  (at pp.c:10894)
    Decl: name='Msp430TimerCapComP__0__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:10894)
      FuncDecl: quals=None (at pp.c:10894)
        ParamList:  (at pp.c:10894)
          Decl: name='n', quals=[], storage=[] (at pp.c:10894)
            TypeDecl: declname='n', quals=[] (at pp.c:10894)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Capture__default__captured', quals=[] (at pp.c:10894)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10895)
  FuncDef:  (at pp.c:10899)
    Decl: name='Msp430TimerCapComP__0__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:10899)
      FuncDecl: quals=None (at pp.c:10899)
        ParamList:  (at pp.c:10899)
          Decl: name='time', quals=[], storage=[] (at pp.c:10899)
            TypeDecl: declname='time', quals=[] (at pp.c:10899)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Capture__captured', quals=[] (at pp.c:10899)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10899)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__0__Capture__default__captured' (at pp.c:10901)
        ExprList:  (at pp.c:10901)
          ID: name='time' (at pp.c:10901)
  FuncDef:  (at pp.c:10906)
    Decl: name='Msp430TimerCapComP__0__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:10906)
      FuncDecl: quals=None (at pp.c:10906)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Capture__getEvent', quals=[] (at pp.c:10906)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:10907)
      Return:  (at pp.c:10908)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:10908)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='370U' (at pp.c:10908)
  FuncDef:  (at pp.c:10912)
    Decl: name='Msp430TimerCapComP__0__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:10912)
      FuncDecl: quals=None (at pp.c:10912)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Compare__default__fired', quals=[] (at pp.c:10912)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10913)
  FuncDef:  (at pp.c:10917)
    Decl: name='Msp430TimerCapComP__0__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:10917)
      FuncDecl: quals=None (at pp.c:10917)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Compare__fired', quals=[] (at pp.c:10917)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10917)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__0__Compare__default__fired' (at pp.c:10919)
  FuncDef:  (at pp.c:10924)
    Decl: name='Msp430TimerCapComP__1__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:10924)
      FuncDecl: quals=None (at pp.c:10924)
        ParamList:  (at pp.c:10924)
          Decl: name='x', quals=[], storage=[] (at pp.c:10924)
            TypeDecl: declname='x', quals=[] (at pp.c:10924)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__int2CC', quals=[] (at pp.c:10924)
          IdentifierType: names=['Msp430TimerCapComP__1__cc_t'] (at None)
    Compound:  (at pp.c:10926)
      Decl: name='c', quals=[], storage=[] (at pp.c:10935)
        TypeDecl: declname='c', quals=[] (at pp.c:10935)
          Union: name='Msp430TimerCapComP__1____nesc_unnamed4403', packed=False (at pp.c:10928)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:10930)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:10932)
                IdentifierType: names=['Msp430TimerCapComP__1__cc_t'] (at None)
        ExprList:  (at pp.c:10935)
          Assignment: op='=' (at pp.c:10935)
            StructRef: type='.' (at pp.c:10935)
              ID: name='f' (at pp.c:10935)
            ID: name='x' (at pp.c:10935)
      Return:  (at pp.c:10938)
        StructRef: type='.' (at pp.c:10938)
          ID: name='c' (at pp.c:10938)
          ID: name='t' (at pp.c:10938)
  FuncDef:  (at pp.c:10942)
    Decl: name='Msp430TimerCapComP__1__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:10942)
      FuncDecl: quals=None (at pp.c:10942)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Control__getControl', quals=[] (at pp.c:10942)
          IdentifierType: names=['Msp430TimerCapComP__1__cc_t'] (at None)
    Compound:  (at pp.c:10943)
      Return:  (at pp.c:10944)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__1__int2CC' (at pp.c:10944)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:10944)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='356U' (at pp.c:10944)
  FuncDef:  (at pp.c:10948)
    Decl: name='Msp430TimerCapComP__1__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:10948)
      FuncDecl: quals=None (at pp.c:10948)
        ParamList:  (at pp.c:10948)
          Decl: name='n', quals=[], storage=[] (at pp.c:10948)
            TypeDecl: declname='n', quals=[] (at pp.c:10948)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Capture__default__captured', quals=[] (at pp.c:10948)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10949)
  FuncDef:  (at pp.c:10953)
    Decl: name='Msp430TimerCapComP__1__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:10953)
      FuncDecl: quals=None (at pp.c:10953)
        ParamList:  (at pp.c:10953)
          Decl: name='time', quals=[], storage=[] (at pp.c:10953)
            TypeDecl: declname='time', quals=[] (at pp.c:10953)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Capture__captured', quals=[] (at pp.c:10953)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10953)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__1__Capture__default__captured' (at pp.c:10955)
        ExprList:  (at pp.c:10955)
          ID: name='time' (at pp.c:10955)
  FuncDef:  (at pp.c:10960)
    Decl: name='Msp430TimerCapComP__1__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:10960)
      FuncDecl: quals=None (at pp.c:10960)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Capture__getEvent', quals=[] (at pp.c:10960)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:10961)
      Return:  (at pp.c:10962)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:10962)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='372U' (at pp.c:10962)
  FuncDef:  (at pp.c:10966)
    Decl: name='Msp430TimerCapComP__1__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:10966)
      FuncDecl: quals=None (at pp.c:10966)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Compare__default__fired', quals=[] (at pp.c:10966)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10967)
  FuncDef:  (at pp.c:10971)
    Decl: name='Msp430TimerCapComP__1__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:10971)
      FuncDecl: quals=None (at pp.c:10971)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Compare__fired', quals=[] (at pp.c:10971)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10971)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__1__Compare__default__fired' (at pp.c:10973)
  FuncDef:  (at pp.c:10978)
    Decl: name='Msp430TimerCapComP__2__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:10978)
      FuncDecl: quals=None (at pp.c:10978)
        ParamList:  (at pp.c:10978)
          Decl: name='x', quals=[], storage=[] (at pp.c:10978)
            TypeDecl: declname='x', quals=[] (at pp.c:10978)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__int2CC', quals=[] (at pp.c:10978)
          IdentifierType: names=['Msp430TimerCapComP__2__cc_t'] (at None)
    Compound:  (at pp.c:10980)
      Decl: name='c', quals=[], storage=[] (at pp.c:10989)
        TypeDecl: declname='c', quals=[] (at pp.c:10989)
          Union: name='Msp430TimerCapComP__2____nesc_unnamed4404', packed=False (at pp.c:10982)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:10984)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:10986)
                IdentifierType: names=['Msp430TimerCapComP__2__cc_t'] (at None)
        ExprList:  (at pp.c:10989)
          Assignment: op='=' (at pp.c:10989)
            StructRef: type='.' (at pp.c:10989)
              ID: name='f' (at pp.c:10989)
            ID: name='x' (at pp.c:10989)
      Return:  (at pp.c:10992)
        StructRef: type='.' (at pp.c:10992)
          ID: name='c' (at pp.c:10992)
          ID: name='t' (at pp.c:10992)
  FuncDef:  (at pp.c:10996)
    Decl: name='Msp430TimerCapComP__2__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:10996)
      FuncDecl: quals=None (at pp.c:10996)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Control__getControl', quals=[] (at pp.c:10996)
          IdentifierType: names=['Msp430TimerCapComP__2__cc_t'] (at None)
    Compound:  (at pp.c:10997)
      Return:  (at pp.c:10998)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__2__int2CC' (at pp.c:10998)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:10998)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='358U' (at pp.c:10998)
  FuncDef:  (at pp.c:11002)
    Decl: name='Msp430TimerCapComP__2__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:11002)
      FuncDecl: quals=None (at pp.c:11002)
        ParamList:  (at pp.c:11002)
          Decl: name='n', quals=[], storage=[] (at pp.c:11002)
            TypeDecl: declname='n', quals=[] (at pp.c:11002)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Capture__default__captured', quals=[] (at pp.c:11002)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11003)
  FuncDef:  (at pp.c:11007)
    Decl: name='Msp430TimerCapComP__2__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:11007)
      FuncDecl: quals=None (at pp.c:11007)
        ParamList:  (at pp.c:11007)
          Decl: name='time', quals=[], storage=[] (at pp.c:11007)
            TypeDecl: declname='time', quals=[] (at pp.c:11007)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Capture__captured', quals=[] (at pp.c:11007)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11007)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__2__Capture__default__captured' (at pp.c:11009)
        ExprList:  (at pp.c:11009)
          ID: name='time' (at pp.c:11009)
  FuncDef:  (at pp.c:11014)
    Decl: name='Msp430TimerCapComP__2__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:11014)
      FuncDecl: quals=None (at pp.c:11014)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Capture__getEvent', quals=[] (at pp.c:11014)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11015)
      Return:  (at pp.c:11016)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11016)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='374U' (at pp.c:11016)
  FuncDef:  (at pp.c:11020)
    Decl: name='Msp430TimerCapComP__2__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:11020)
      FuncDecl: quals=None (at pp.c:11020)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Compare__default__fired', quals=[] (at pp.c:11020)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11021)
  FuncDef:  (at pp.c:11025)
    Decl: name='Msp430TimerCapComP__2__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:11025)
      FuncDecl: quals=None (at pp.c:11025)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Compare__fired', quals=[] (at pp.c:11025)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11025)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__2__Compare__default__fired' (at pp.c:11027)
  FuncDef:  (at pp.c:11032)
    Decl: name='Msp430TimerP__0__VectorTimerX1__fired', quals=[], storage=['inline', 'static'] (at pp.c:11032)
      FuncDecl: quals=None (at pp.c:11032)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__0__VectorTimerX1__fired', quals=[] (at pp.c:11032)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11033)
      Decl: name='n', quals=[], storage=[] (at pp.c:11034)
        TypeDecl: declname='n', quals=[] (at pp.c:11034)
          IdentifierType: names=['uint8_t'] (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11034)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='302U' (at pp.c:11034)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__0__Event__fired' (at pp.c:11037)
        ExprList:  (at pp.c:11037)
          BinaryOp: op='>>' (at pp.c:11037)
            ID: name='n' (at pp.c:11037)
            Constant: type='int', value='1' (at pp.c:11037)
  FuncDef:  (at pp.c:11041)
    Decl: name='Msp430TimerCommonP__VectorTimerA1__fired', quals=[], storage=['static', 'inline'] (at pp.c:11041)
      FuncDecl: quals=None (at pp.c:11041)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCommonP__VectorTimerA1__fired', quals=[] (at pp.c:11041)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11041)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__0__VectorTimerX1__fired' (at pp.c:11043)
  FuncDef:  (at pp.c:11048)
    Decl: name='Msp430TimerP__1__VectorTimerX0__fired', quals=[], storage=['inline', 'static'] (at pp.c:11048)
      FuncDecl: quals=None (at pp.c:11048)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__VectorTimerX0__fired', quals=[] (at pp.c:11048)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11049)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__1__Event__fired' (at pp.c:11050)
        ExprList:  (at pp.c:11050)
          Constant: type='int', value='0' (at pp.c:11050)
  FuncDef:  (at pp.c:11054)
    Decl: name='Msp430TimerCommonP__VectorTimerB0__fired', quals=[], storage=['static', 'inline'] (at pp.c:11054)
      FuncDecl: quals=None (at pp.c:11054)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCommonP__VectorTimerB0__fired', quals=[] (at pp.c:11054)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11054)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__1__VectorTimerX0__fired' (at pp.c:11056)
  FuncDef:  (at pp.c:11061)
    Decl: name='Msp430TimerCapComP__9__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11061)
      FuncDecl: quals=None (at pp.c:11061)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Timer__overflow', quals=[] (at pp.c:11061)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11062)
  FuncDef:  (at pp.c:11066)
    Decl: name='Msp430TimerCapComP__8__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11066)
      FuncDecl: quals=None (at pp.c:11066)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Timer__overflow', quals=[] (at pp.c:11066)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11067)
  FuncDef:  (at pp.c:11071)
    Decl: name='Msp430TimerCapComP__7__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11071)
      FuncDecl: quals=None (at pp.c:11071)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Timer__overflow', quals=[] (at pp.c:11071)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11072)
  FuncDef:  (at pp.c:11076)
    Decl: name='Msp430TimerCapComP__6__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11076)
      FuncDecl: quals=None (at pp.c:11076)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Timer__overflow', quals=[] (at pp.c:11076)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11077)
  FuncDef:  (at pp.c:11081)
    Decl: name='Msp430TimerCapComP__5__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11081)
      FuncDecl: quals=None (at pp.c:11081)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Timer__overflow', quals=[] (at pp.c:11081)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11082)
  FuncDef:  (at pp.c:11086)
    Decl: name='Msp430TimerCapComP__4__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11086)
      FuncDecl: quals=None (at pp.c:11086)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Timer__overflow', quals=[] (at pp.c:11086)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11087)
  FuncDef:  (at pp.c:11091)
    Decl: name='Msp430TimerCapComP__3__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11091)
      FuncDecl: quals=None (at pp.c:11091)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Timer__overflow', quals=[] (at pp.c:11091)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11092)
  FuncDef:  (at pp.c:11096)
    Decl: name='Msp430UartP__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11096)
      FuncDecl: quals=None (at pp.c:11096)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UartP__0__Counter__overflow', quals=[] (at pp.c:11096)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11098)
  FuncDef:  (at pp.c:11102)
    Decl: name='TransformAlarmC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11102)
      FuncDecl: quals=None (at pp.c:11102)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Counter__overflow', quals=[] (at pp.c:11102)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11103)
  FuncDef:  (at pp.c:11107)
    Decl: name='CounterToLocalTimeC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11107)
      FuncDecl: quals=None (at pp.c:11107)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CounterToLocalTimeC__0__Counter__overflow', quals=[] (at pp.c:11107)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11108)
  FuncDef:  (at pp.c:11112)
    Decl: name='TransformCounterC__0__Counter__overflow', quals=[], storage=['static', 'inline'] (at pp.c:11112)
      FuncDecl: quals=None (at pp.c:11112)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__0__Counter__overflow', quals=[] (at pp.c:11112)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11112)
      FuncCall:  (at None)
        ID: name='CounterToLocalTimeC__0__Counter__overflow' (at pp.c:11114)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__Counter__overflow' (at pp.c:11116)
  FuncDef:  (at pp.c:11121)
    Decl: name='TransformCounterC__0__CounterFrom__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11121)
      FuncDecl: quals=None (at pp.c:11121)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__0__CounterFrom__overflow', quals=[] (at pp.c:11121)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11122)
      Compound:  (at pp.c:11124)
        UnaryOp: op='p++' (at pp.c:11125)
          ID: name='TransformCounterC__0__m_upper' (at pp.c:11125)
        If:  (at pp.c:11126)
          BinaryOp: op='==' (at pp.c:11126)
            BinaryOp: op='&' (at pp.c:11126)
              ID: name='TransformCounterC__0__m_upper' (at pp.c:11126)
              ID: name='TransformCounterC__0__OVERFLOW_MASK' (at pp.c:11126)
            Constant: type='int', value='0' (at pp.c:11126)
          Compound:  (at pp.c:11126)
            FuncCall:  (at None)
              ID: name='TransformCounterC__0__Counter__overflow' (at pp.c:11127)
  FuncDef:  (at pp.c:11133)
    Decl: name='CounterToLocalTimeC__1__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11133)
      FuncDecl: quals=None (at pp.c:11133)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CounterToLocalTimeC__1__Counter__overflow', quals=[] (at pp.c:11133)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11134)
  FuncDef:  (at pp.c:11138)
    Decl: name='TransformAlarmC__1__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11138)
      FuncDecl: quals=None (at pp.c:11138)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Counter__overflow', quals=[] (at pp.c:11138)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11139)
  FuncDef:  (at pp.c:11143)
    Decl: name='TransformCounterC__1__Counter__overflow', quals=[], storage=['static', 'inline'] (at pp.c:11143)
      FuncDecl: quals=None (at pp.c:11143)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__1__Counter__overflow', quals=[] (at pp.c:11143)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11143)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__Counter__overflow' (at pp.c:11145)
      FuncCall:  (at None)
        ID: name='CounterToLocalTimeC__1__Counter__overflow' (at pp.c:11147)
  FuncDef:  (at pp.c:11152)
    Decl: name='TransformCounterC__1__CounterFrom__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11152)
      FuncDecl: quals=None (at pp.c:11152)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__1__CounterFrom__overflow', quals=[] (at pp.c:11152)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11153)
      Compound:  (at pp.c:11155)
        UnaryOp: op='p++' (at pp.c:11156)
          ID: name='TransformCounterC__1__m_upper' (at pp.c:11156)
        If:  (at pp.c:11157)
          BinaryOp: op='==' (at pp.c:11157)
            BinaryOp: op='&' (at pp.c:11157)
              ID: name='TransformCounterC__1__m_upper' (at pp.c:11157)
              ID: name='TransformCounterC__1__OVERFLOW_MASK' (at pp.c:11157)
            Constant: type='int', value='0' (at pp.c:11157)
          Compound:  (at pp.c:11157)
            FuncCall:  (at None)
              ID: name='TransformCounterC__1__Counter__overflow' (at pp.c:11158)
  FuncDef:  (at pp.c:11164)
    Decl: name='Msp430CounterC__0__Counter__overflow', quals=[], storage=['static', 'inline'] (at pp.c:11164)
      FuncDecl: quals=None (at pp.c:11164)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Counter__overflow', quals=[] (at pp.c:11164)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11164)
      FuncCall:  (at None)
        ID: name='TransformCounterC__1__CounterFrom__overflow' (at pp.c:11166)
      FuncCall:  (at None)
        ID: name='TransformCounterC__0__CounterFrom__overflow' (at pp.c:11168)
      FuncCall:  (at None)
        ID: name='Msp430UartP__0__Counter__overflow' (at pp.c:11170)
  FuncDef:  (at pp.c:11175)
    Decl: name='Msp430CounterC__0__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11175)
      FuncDecl: quals=None (at pp.c:11175)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Msp430Timer__overflow', quals=[] (at pp.c:11175)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11176)
      FuncCall:  (at None)
        ID: name='Msp430CounterC__0__Counter__overflow' (at pp.c:11177)
  FuncDef:  (at pp.c:11181)
    Decl: name='Msp430AlarmC__1__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11181)
      FuncDecl: quals=None (at pp.c:11181)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430Timer__overflow', quals=[] (at pp.c:11181)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11182)
  FuncDef:  (at pp.c:11186)
    Decl: name='Msp430AlarmC__0__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:11186)
      FuncDecl: quals=None (at pp.c:11186)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430Timer__overflow', quals=[] (at pp.c:11186)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11187)
  FuncDef:  (at pp.c:11191)
    Decl: name='Msp430TimerP__1__Timer__overflow', quals=[], storage=['static', 'inline'] (at pp.c:11191)
      FuncDecl: quals=None (at pp.c:11191)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Timer__overflow', quals=[] (at pp.c:11191)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11191)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430Timer__overflow' (at pp.c:11193)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430Timer__overflow' (at pp.c:11195)
      FuncCall:  (at None)
        ID: name='Msp430CounterC__0__Msp430Timer__overflow' (at pp.c:11197)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Timer__overflow' (at pp.c:11199)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Timer__overflow' (at pp.c:11201)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Timer__overflow' (at pp.c:11203)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__6__Timer__overflow' (at pp.c:11205)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__7__Timer__overflow' (at pp.c:11207)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__8__Timer__overflow' (at pp.c:11209)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__9__Timer__overflow' (at pp.c:11211)
  FuncDef:  (at pp.c:11216)
    Decl: name='Msp430TimerP__1__Overflow__fired', quals=[], storage=['inline', 'static'] (at pp.c:11216)
      FuncDecl: quals=None (at pp.c:11216)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Overflow__fired', quals=[] (at pp.c:11216)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11217)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__1__Timer__overflow' (at pp.c:11218)
  FuncDef:  (at pp.c:11222)
    Decl: name='CC2420ControlP__SpiResource__request', quals=[], storage=['static', 'inline'] (at pp.c:11222)
      FuncDecl: quals=None (at pp.c:11222)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SpiResource__request', quals=[] (at pp.c:11222)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11222)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11224)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11224)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11228)
        ID: name='__nesc_result' (at pp.c:11228)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__request' (at pp.c:11228)
          ExprList:  (at pp.c:11228)
            ID: name='CC2420SpiC__0__CLIENT_ID' (at pp.c:11228)
      Return:  (at pp.c:11232)
        ID: name='__nesc_result' (at pp.c:11232)
  FuncDef:  (at pp.c:11237)
    Decl: name='CC2420ControlP__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:11237)
      FuncDecl: quals=None (at pp.c:11237)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__Resource__request', quals=[] (at pp.c:11237)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11239)
      Return:  (at pp.c:11240)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__SpiResource__request' (at pp.c:11240)
  FuncDef:  (at pp.c:11244)
    Decl: name='CC2420CsmaP__Resource__request', quals=[], storage=['static', 'inline'] (at pp.c:11244)
      FuncDecl: quals=None (at pp.c:11244)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__Resource__request', quals=[] (at pp.c:11244)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11244)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11246)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11246)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11250)
        ID: name='__nesc_result' (at pp.c:11250)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__Resource__request' (at pp.c:11250)
      Return:  (at pp.c:11254)
        ID: name='__nesc_result' (at pp.c:11254)
  FuncDef:  (at pp.c:11259)
    Decl: name='CC2420CsmaP__CC2420Power__startVRegDone', quals=[], storage=['inline', 'static'] (at pp.c:11259)
      FuncDecl: quals=None (at pp.c:11259)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__startVRegDone', quals=[] (at pp.c:11259)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11261)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__Resource__request' (at pp.c:11262)
  FuncDef:  (at pp.c:11266)
    Decl: name='CC2420ControlP__CC2420Power__startVRegDone', quals=[], storage=['static', 'inline'] (at pp.c:11266)
      FuncDecl: quals=None (at pp.c:11266)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__startVRegDone', quals=[] (at pp.c:11266)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11266)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Power__startVRegDone' (at pp.c:11268)
  FuncDef:  (at pp.c:11273)
    Decl: name='Msp430GpioC__7__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:11273)
      FuncDecl: quals=None (at pp.c:11273)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__7__HplGeneralIO__set', quals=[] (at pp.c:11273)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11273)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__30__IO__set' (at pp.c:11275)
  FuncDef:  (at pp.c:11280)
    Decl: name='Msp430GpioC__7__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:11280)
      FuncDecl: quals=None (at pp.c:11280)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__7__GeneralIO__set', quals=[] (at pp.c:11280)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11282)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__7__HplGeneralIO__set' (at pp.c:11284)
  FuncDef:  (at pp.c:11288)
    Decl: name='CC2420ControlP__RSTN__set', quals=[], storage=['static', 'inline'] (at pp.c:11288)
      FuncDecl: quals=None (at pp.c:11288)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__RSTN__set', quals=[] (at pp.c:11288)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11288)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__7__GeneralIO__set' (at pp.c:11290)
  FuncDef:  (at pp.c:11295)
    Decl: name='Msp430GpioC__7__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:11295)
      FuncDecl: quals=None (at pp.c:11295)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__7__HplGeneralIO__clr', quals=[] (at pp.c:11295)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11295)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__30__IO__clr' (at pp.c:11297)
  FuncDef:  (at pp.c:11302)
    Decl: name='Msp430GpioC__7__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:11302)
      FuncDecl: quals=None (at pp.c:11302)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__7__GeneralIO__clr', quals=[] (at pp.c:11302)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11304)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__7__HplGeneralIO__clr' (at pp.c:11306)
  FuncDef:  (at pp.c:11310)
    Decl: name='CC2420ControlP__RSTN__clr', quals=[], storage=['static', 'inline'] (at pp.c:11310)
      FuncDecl: quals=None (at pp.c:11310)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__RSTN__clr', quals=[] (at pp.c:11310)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11310)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__7__GeneralIO__clr' (at pp.c:11312)
  FuncDef:  (at pp.c:11317)
    Decl: name='CC2420ControlP__StartupTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:11317)
      FuncDecl: quals=None (at pp.c:11317)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__StartupTimer__fired', quals=[] (at pp.c:11317)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11319)
      If:  (at pp.c:11320)
        BinaryOp: op='==' (at pp.c:11320)
          ID: name='CC2420ControlP__m_state' (at pp.c:11320)
          ID: name='CC2420ControlP__S_VREG_STARTING' (at pp.c:11320)
        Compound:  (at pp.c:11320)
          Assignment: op='=' (at pp.c:11321)
            ID: name='CC2420ControlP__m_state' (at pp.c:11321)
            ID: name='CC2420ControlP__S_VREG_STARTED' (at pp.c:11321)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__RSTN__clr' (at pp.c:11322)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__RSTN__set' (at pp.c:11323)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__CC2420Power__startVRegDone' (at pp.c:11324)
  FuncDef:  (at pp.c:11329)
    Decl: name='CC2420TransmitP__SpiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:11329)
      FuncDecl: quals=None (at pp.c:11329)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SpiResource__release', quals=[] (at pp.c:11329)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11329)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11331)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11331)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11335)
        ID: name='__nesc_result' (at pp.c:11335)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__release' (at pp.c:11335)
          ExprList:  (at pp.c:11335)
            ID: name='CC2420SpiC__3__CLIENT_ID' (at pp.c:11335)
      Return:  (at pp.c:11339)
        ID: name='__nesc_result' (at pp.c:11339)
  FuncDef:  (at pp.c:11344)
    Decl: name='CC2420TransmitP__releaseSpiResource', quals=[], storage=['inline', 'static'] (at pp.c:11344)
      FuncDecl: quals=None (at pp.c:11344)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__releaseSpiResource', quals=[] (at pp.c:11344)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11346)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__SpiResource__release' (at pp.c:11347)
      Return:  (at pp.c:11348)
        ID: name='SUCCESS' (at pp.c:11348)
  FuncDef:  (at pp.c:11352)
    Decl: name='GpioCaptureC__0__Capture__captureRisingEdge', quals=[], storage=['inline', 'static'] (at pp.c:11352)
      FuncDecl: quals=None (at pp.c:11352)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Capture__captureRisingEdge', quals=[] (at pp.c:11352)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11354)
      Return:  (at pp.c:11355)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__enableCapture' (at pp.c:11355)
          ExprList:  (at pp.c:11355)
            ID: name='MSP430TIMER_CM_RISING' (at pp.c:11355)
  FuncDef:  (at pp.c:11359)
    Decl: name='CC2420TransmitP__CaptureSFD__captureRisingEdge', quals=[], storage=['static', 'inline'] (at pp.c:11359)
      FuncDecl: quals=None (at pp.c:11359)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CaptureSFD__captureRisingEdge', quals=[] (at pp.c:11359)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11359)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11361)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11361)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11365)
        ID: name='__nesc_result' (at pp.c:11365)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Capture__captureRisingEdge' (at pp.c:11365)
      Return:  (at pp.c:11369)
        ID: name='__nesc_result' (at pp.c:11369)
  FuncDef:  (at pp.c:11374)
    Decl: name='CC2420TransmitP__SFLUSHTX__strobe', quals=[], storage=['static', 'inline'] (at pp.c:11374)
      FuncDecl: quals=None (at pp.c:11374)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SFLUSHTX__strobe', quals=[] (at pp.c:11374)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:11374)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11376)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11376)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11380)
        ID: name='__nesc_result' (at pp.c:11380)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:11380)
          ExprList:  (at pp.c:11380)
            ID: name='CC2420_SFLUSHTX' (at pp.c:11380)
      Return:  (at pp.c:11384)
        ID: name='__nesc_result' (at pp.c:11384)
  FuncDef:  (at pp.c:11389)
    Decl: name='TransformAlarmC__0__Counter__get', quals=[], storage=['static', 'inline'] (at pp.c:11389)
      FuncDecl: quals=None (at pp.c:11389)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Counter__get', quals=[] (at pp.c:11389)
          IdentifierType: names=['TransformAlarmC__0__Counter__size_type'] (at None)
    Compound:  (at pp.c:11389)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11391)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11391)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11395)
        ID: name='__nesc_result' (at pp.c:11395)
        FuncCall:  (at None)
          ID: name='TransformCounterC__0__Counter__get' (at pp.c:11395)
      Return:  (at pp.c:11399)
        ID: name='__nesc_result' (at pp.c:11399)
  FuncDef:  (at pp.c:11404)
    Decl: name='TransformAlarmC__0__Alarm__getNow', quals=[], storage=['inline', 'static'] (at pp.c:11404)
      FuncDecl: quals=None (at pp.c:11404)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Alarm__getNow', quals=[] (at pp.c:11404)
          IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
    Compound:  (at pp.c:11405)
      Return:  (at pp.c:11406)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__0__Counter__get' (at pp.c:11406)
  FuncDef:  (at pp.c:11410)
    Decl: name='TransformAlarmC__0__Alarm__start', quals=[], storage=['inline', 'static'] (at pp.c:11410)
      FuncDecl: quals=None (at pp.c:11410)
        ParamList:  (at pp.c:11410)
          Decl: name='dt', quals=[], storage=[] (at pp.c:11410)
            TypeDecl: declname='dt', quals=[] (at pp.c:11410)
              IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Alarm__start', quals=[] (at pp.c:11410)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11411)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__Alarm__startAt' (at pp.c:11412)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='TransformAlarmC__0__Alarm__getNow' (at pp.c:11412)
          ID: name='dt' (at pp.c:11412)
  FuncDef:  (at pp.c:11416)
    Decl: name='CC2420TransmitP__BackoffTimer__start', quals=[], storage=['static', 'inline'] (at pp.c:11416)
      FuncDecl: quals=None (at pp.c:11416)
        ParamList:  (at pp.c:11416)
          Decl: name='dt', quals=[], storage=[] (at pp.c:11416)
            TypeDecl: declname='dt', quals=[] (at pp.c:11416)
              IdentifierType: names=['CC2420TransmitP__BackoffTimer__size_type'] (at None)
        TypeDecl: declname='CC2420TransmitP__BackoffTimer__start', quals=[] (at pp.c:11416)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11416)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__Alarm__start' (at pp.c:11418)
        ExprList:  (at pp.c:11418)
          ID: name='dt' (at pp.c:11418)
  FuncDef:  (at pp.c:11423)
    Decl: name='HplMsp430GeneralIOP__4__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:11423)
      FuncDecl: quals=None (at pp.c:11423)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__4__IO__getRaw', quals=[] (at pp.c:11423)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:11425)
      Return:  (at pp.c:11427)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:11427)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='32U' (at pp.c:11427)
          BinaryOp: op='<<' (at pp.c:11427)
            Constant: type='int', value='0x01' (at pp.c:11427)
            Constant: type='int', value='4' (at pp.c:11427)
  FuncDef:  (at pp.c:11431)
    Decl: name='HplMsp430GeneralIOP__4__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:11431)
      FuncDecl: quals=None (at pp.c:11431)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__4__IO__get', quals=[] (at pp.c:11431)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11433)
      Return:  (at pp.c:11435)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='HplMsp430GeneralIOP__4__IO__getRaw' (at pp.c:11435)
          Constant: type='int', value='0' (at pp.c:11435)
  FuncDef:  (at pp.c:11439)
    Decl: name='Msp430GpioC__3__HplGeneralIO__get', quals=[], storage=['static', 'inline'] (at pp.c:11439)
      FuncDecl: quals=None (at pp.c:11439)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__3__HplGeneralIO__get', quals=[] (at pp.c:11439)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11439)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11441)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11441)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11445)
        ID: name='__nesc_result' (at pp.c:11445)
        FuncCall:  (at None)
          ID: name='HplMsp430GeneralIOP__4__IO__get' (at pp.c:11445)
      Return:  (at pp.c:11449)
        ID: name='__nesc_result' (at pp.c:11449)
  FuncDef:  (at pp.c:11454)
    Decl: name='Msp430GpioC__3__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:11454)
      FuncDecl: quals=None (at pp.c:11454)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__3__GeneralIO__get', quals=[] (at pp.c:11454)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11456)
      Return:  (at pp.c:11458)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__3__HplGeneralIO__get' (at pp.c:11458)
  FuncDef:  (at pp.c:11462)
    Decl: name='CC2420TransmitP__CCA__get', quals=[], storage=['static', 'inline'] (at pp.c:11462)
      FuncDecl: quals=None (at pp.c:11462)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CCA__get', quals=[] (at pp.c:11462)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11462)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11464)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11464)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11468)
        ID: name='__nesc_result' (at pp.c:11468)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__3__GeneralIO__get' (at pp.c:11468)
      Return:  (at pp.c:11472)
        ID: name='__nesc_result' (at pp.c:11472)
  FuncDef:  (at pp.c:11477)
    Decl: name='CC2420TransmitP__BackoffTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:11477)
      FuncDecl: quals=None (at pp.c:11477)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__BackoffTimer__fired', quals=[] (at pp.c:11477)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11479)
      Compound:  (at pp.c:11482)
        Switch:  (at pp.c:11483)
          ID: name='CC2420TransmitP__m_state' (at pp.c:11483)
          Compound:  (at pp.c:11483)
            Case:  (at pp.c:11485)
              ID: name='CC2420TransmitP__S_SAMPLE_CCA' (at pp.c:11485)
              If:  (at pp.c:11488)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CCA__get' (at pp.c:11488)
                Compound:  (at pp.c:11488)
                  Assignment: op='=' (at pp.c:11489)
                    ID: name='CC2420TransmitP__m_state' (at pp.c:11489)
                    ID: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:11489)
                  FuncCall:  (at None)
                    ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:11490)
                    ExprList:  (at pp.c:11490)
                      ID: name='CC2420_TIME_ACK_TURNAROUND' (at pp.c:11490)
                Compound:  (at pp.c:11492)
                  FuncCall:  (at None)
                    ID: name='CC2420TransmitP__congestionBackoff' (at pp.c:11493)
            Break:  (at pp.c:11495)
            Case:  (at pp.c:11497)
              ID: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:11497)
              Case:  (at pp.c:11498)
                ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:11498)
                If:  (at pp.c:11499)
                  BinaryOp: op='==' (at None)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__acquireSpiResource' (at pp.c:11499)
                    ID: name='SUCCESS' (at pp.c:11499)
                  Compound:  (at pp.c:11499)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__attemptSend' (at pp.c:11500)
            Break:  (at pp.c:11502)
            Case:  (at pp.c:11504)
              ID: name='CC2420TransmitP__S_ACK_WAIT' (at pp.c:11504)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__signalDone' (at pp.c:11505)
                ExprList:  (at pp.c:11505)
                  ID: name='SUCCESS' (at pp.c:11505)
            Break:  (at pp.c:11506)
            Case:  (at pp.c:11508)
              ID: name='CC2420TransmitP__S_SFD' (at pp.c:11508)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__SFLUSHTX__strobe' (at pp.c:11511)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CaptureSFD__captureRisingEdge' (at pp.c:11512)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:11513)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__signalDone' (at pp.c:11514)
              ExprList:  (at pp.c:11514)
                ID: name='ERETRY' (at pp.c:11514)
            Break:  (at pp.c:11515)
            Default:  (at pp.c:11517)
              Break:  (at pp.c:11518)
  FuncDef:  (at pp.c:11524)
    Decl: name='TransformAlarmC__0__Alarm__fired', quals=[], storage=['static', 'inline'] (at pp.c:11524)
      FuncDecl: quals=None (at pp.c:11524)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Alarm__fired', quals=[] (at pp.c:11524)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11524)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__BackoffTimer__fired' (at pp.c:11526)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__StartupTimer__fired' (at pp.c:11528)
  FuncDef:  (at pp.c:11533)
    Decl: name='TransformAlarmC__0__AlarmFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:11533)
      FuncDecl: quals=None (at pp.c:11533)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__AlarmFrom__fired', quals=[] (at pp.c:11533)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11534)
      Compound:  (at pp.c:11536)
        If:  (at pp.c:11537)
          BinaryOp: op='==' (at pp.c:11537)
            ID: name='TransformAlarmC__0__m_dt' (at pp.c:11537)
            Constant: type='int', value='0' (at pp.c:11537)
          Compound:  (at pp.c:11538)
            FuncCall:  (at None)
              ID: name='TransformAlarmC__0__Alarm__fired' (at pp.c:11539)
          Compound:  (at pp.c:11542)
            FuncCall:  (at None)
              ID: name='TransformAlarmC__0__set_alarm' (at pp.c:11543)
  FuncDef:  (at pp.c:11549)
    Decl: name='Msp430AlarmC__0__Alarm__fired', quals=[], storage=['static', 'inline'] (at pp.c:11549)
      FuncDecl: quals=None (at pp.c:11549)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Alarm__fired', quals=[] (at pp.c:11549)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11549)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__AlarmFrom__fired' (at pp.c:11551)
  FuncDef:  (at pp.c:11556)
    Decl: name='Msp430TimerCapComP__3__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:11556)
      FuncDecl: quals=None (at pp.c:11556)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Control__disableEvents', quals=[] (at pp.c:11556)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11557)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11558)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='386U' (at pp.c:11558)
        UnaryOp: op='~' (at pp.c:11558)
          Constant: type='int', value='0x0010' (at pp.c:11558)
  FuncDef:  (at pp.c:11562)
    Decl: name='Msp430AlarmC__0__Msp430TimerControl__disableEvents', quals=[], storage=['static', 'inline'] (at pp.c:11562)
      FuncDecl: quals=None (at pp.c:11562)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__disableEvents', quals=[] (at pp.c:11562)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11562)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Control__disableEvents' (at pp.c:11564)
  FuncDef:  (at pp.c:11569)
    Decl: name='Msp430AlarmC__0__Msp430Compare__fired', quals=[], storage=['inline', 'static'] (at pp.c:11569)
      FuncDecl: quals=None (at pp.c:11569)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__fired', quals=[] (at pp.c:11569)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11570)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430TimerControl__disableEvents' (at pp.c:11571)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Alarm__fired' (at pp.c:11572)
  FuncDef:  (at pp.c:11576)
    Decl: name='Msp430TimerCapComP__3__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:11576)
      FuncDecl: quals=None (at pp.c:11576)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Compare__fired', quals=[] (at pp.c:11576)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11576)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430Compare__fired' (at pp.c:11578)
  FuncDef:  (at pp.c:11583)
    Decl: name='Msp430TimerCapComP__3__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:11583)
      FuncDecl: quals=None (at pp.c:11583)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Capture__getEvent', quals=[] (at pp.c:11583)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11584)
      Return:  (at pp.c:11585)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11585)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='402U' (at pp.c:11585)
  FuncDef:  (at pp.c:11589)
    Decl: name='Msp430TimerCapComP__3__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:11589)
      FuncDecl: quals=None (at pp.c:11589)
        ParamList:  (at pp.c:11589)
          Decl: name='n', quals=[], storage=[] (at pp.c:11589)
            TypeDecl: declname='n', quals=[] (at pp.c:11589)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Capture__default__captured', quals=[] (at pp.c:11589)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11590)
  FuncDef:  (at pp.c:11594)
    Decl: name='Msp430TimerCapComP__3__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:11594)
      FuncDecl: quals=None (at pp.c:11594)
        ParamList:  (at pp.c:11594)
          Decl: name='time', quals=[], storage=[] (at pp.c:11594)
            TypeDecl: declname='time', quals=[] (at pp.c:11594)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Capture__captured', quals=[] (at pp.c:11594)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11594)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Capture__default__captured' (at pp.c:11596)
        ExprList:  (at pp.c:11596)
          ID: name='time' (at pp.c:11596)
  FuncDef:  (at pp.c:11601)
    Decl: name='Msp430TimerCapComP__3__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:11601)
      FuncDecl: quals=None (at pp.c:11601)
        ParamList:  (at pp.c:11601)
          Decl: name='x', quals=[], storage=[] (at pp.c:11601)
            TypeDecl: declname='x', quals=[] (at pp.c:11601)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__int2CC', quals=[] (at pp.c:11601)
          IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
    Compound:  (at pp.c:11603)
      Decl: name='c', quals=[], storage=[] (at pp.c:11612)
        TypeDecl: declname='c', quals=[] (at pp.c:11612)
          Union: name='Msp430TimerCapComP__3____nesc_unnamed4405', packed=False (at pp.c:11605)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:11607)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:11609)
                IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
        ExprList:  (at pp.c:11612)
          Assignment: op='=' (at pp.c:11612)
            StructRef: type='.' (at pp.c:11612)
              ID: name='f' (at pp.c:11612)
            ID: name='x' (at pp.c:11612)
      Return:  (at pp.c:11615)
        StructRef: type='.' (at pp.c:11615)
          ID: name='c' (at pp.c:11615)
          ID: name='t' (at pp.c:11615)
  FuncDef:  (at pp.c:11619)
    Decl: name='Msp430TimerCapComP__3__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:11619)
      FuncDecl: quals=None (at pp.c:11619)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Control__getControl', quals=[] (at pp.c:11619)
          IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
    Compound:  (at pp.c:11620)
      Return:  (at pp.c:11621)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__3__int2CC' (at pp.c:11621)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:11621)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='386U' (at pp.c:11621)
  FuncDef:  (at pp.c:11625)
    Decl: name='Msp430TimerCapComP__3__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:11625)
      FuncDecl: quals=None (at pp.c:11625)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Event__fired', quals=[] (at pp.c:11625)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11626)
      If:  (at pp.c:11627)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__3__Control__getControl' (at pp.c:11627)
          ID: name='cap' (at pp.c:11627)
        Compound:  (at pp.c:11627)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__3__Capture__captured' (at pp.c:11628)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__3__Capture__getEvent' (at pp.c:11628)
        Compound:  (at pp.c:11630)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__3__Compare__fired' (at pp.c:11632)
  FuncDef:  (at pp.c:11637)
    Decl: name='Msp430CounterC__0__Msp430Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:11637)
      FuncDecl: quals=None (at pp.c:11637)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Msp430Timer__get', quals=[] (at pp.c:11637)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11637)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11639)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11639)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11643)
        ID: name='__nesc_result' (at pp.c:11643)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__get' (at pp.c:11643)
      Return:  (at pp.c:11647)
        ID: name='__nesc_result' (at pp.c:11647)
  FuncDef:  (at pp.c:11652)
    Decl: name='Msp430CounterC__0__Counter__get', quals=[], storage=['inline', 'static'] (at pp.c:11652)
      FuncDecl: quals=None (at pp.c:11652)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Counter__get', quals=[] (at pp.c:11652)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11653)
      Return:  (at pp.c:11654)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Msp430Timer__get' (at pp.c:11654)
  FuncDef:  (at pp.c:11658)
    Decl: name='TransformCounterC__0__CounterFrom__get', quals=[], storage=['static', 'inline'] (at pp.c:11658)
      FuncDecl: quals=None (at pp.c:11658)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__0__CounterFrom__get', quals=[] (at pp.c:11658)
          IdentifierType: names=['TransformCounterC__0__CounterFrom__size_type'] (at None)
    Compound:  (at pp.c:11658)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11660)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11660)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11664)
        ID: name='__nesc_result' (at pp.c:11664)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Counter__get' (at pp.c:11664)
      Return:  (at pp.c:11668)
        ID: name='__nesc_result' (at pp.c:11668)
  FuncDef:  (at pp.c:11673)
    Decl: name='Msp430TimerP__1__Timer__isOverflowPending', quals=[], storage=['inline', 'static'] (at pp.c:11673)
      FuncDecl: quals=None (at pp.c:11673)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Timer__isOverflowPending', quals=[] (at pp.c:11673)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11674)
      Return:  (at pp.c:11675)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:11675)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint16_t'] (at None)
              Constant: type='int', value='384U' (at pp.c:11675)
          Constant: type='int', value='1U' (at pp.c:11675)
  FuncDef:  (at pp.c:11679)
    Decl: name='Msp430CounterC__0__Msp430Timer__isOverflowPending', quals=[], storage=['static', 'inline'] (at pp.c:11679)
      FuncDecl: quals=None (at pp.c:11679)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Msp430Timer__isOverflowPending', quals=[] (at pp.c:11679)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11679)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11681)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11681)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11685)
        ID: name='__nesc_result' (at pp.c:11685)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__isOverflowPending' (at pp.c:11685)
      Return:  (at pp.c:11689)
        ID: name='__nesc_result' (at pp.c:11689)
  FuncDef:  (at pp.c:11694)
    Decl: name='Msp430CounterC__0__Counter__isOverflowPending', quals=[], storage=['inline', 'static'] (at pp.c:11694)
      FuncDecl: quals=None (at pp.c:11694)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Counter__isOverflowPending', quals=[] (at pp.c:11694)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11695)
      Return:  (at pp.c:11696)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Msp430Timer__isOverflowPending' (at pp.c:11696)
  FuncDef:  (at pp.c:11700)
    Decl: name='TransformCounterC__0__CounterFrom__isOverflowPending', quals=[], storage=['static', 'inline'] (at pp.c:11700)
      FuncDecl: quals=None (at pp.c:11700)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__0__CounterFrom__isOverflowPending', quals=[] (at pp.c:11700)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11700)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11702)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11702)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11706)
        ID: name='__nesc_result' (at pp.c:11706)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Counter__isOverflowPending' (at pp.c:11706)
      Return:  (at pp.c:11710)
        ID: name='__nesc_result' (at pp.c:11710)
  FuncDef:  (at pp.c:11715)
    Decl: name='Msp430TimerCapComP__3__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:11715)
      FuncDecl: quals=None (at pp.c:11715)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Control__enableEvents', quals=[] (at pp.c:11715)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11716)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11717)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='386U' (at pp.c:11717)
        Constant: type='int', value='0x0010' (at pp.c:11717)
  FuncDef:  (at pp.c:11721)
    Decl: name='Msp430AlarmC__0__Msp430TimerControl__enableEvents', quals=[], storage=['static', 'inline'] (at pp.c:11721)
      FuncDecl: quals=None (at pp.c:11721)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__enableEvents', quals=[] (at pp.c:11721)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11721)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Control__enableEvents' (at pp.c:11723)
  FuncDef:  (at pp.c:11728)
    Decl: name='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:11728)
      FuncDecl: quals=None (at pp.c:11728)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[] (at pp.c:11728)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11729)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11730)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='386U' (at pp.c:11730)
        UnaryOp: op='~' (at pp.c:11730)
          Constant: type='int', value='0x0001' (at pp.c:11730)
  FuncDef:  (at pp.c:11734)
    Decl: name='Msp430AlarmC__0__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static', 'inline'] (at pp.c:11734)
      FuncDecl: quals=None (at pp.c:11734)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:11734)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11734)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Control__clearPendingInterrupt' (at pp.c:11736)
  FuncDef:  (at pp.c:11741)
    Decl: name='Msp430TimerCapComP__3__Compare__setEvent', quals=[], storage=['inline', 'static'] (at pp.c:11741)
      FuncDecl: quals=None (at pp.c:11741)
        ParamList:  (at pp.c:11741)
          Decl: name='x', quals=[], storage=[] (at pp.c:11741)
            TypeDecl: declname='x', quals=[] (at pp.c:11741)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEvent', quals=[] (at pp.c:11741)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11742)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11743)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='402U' (at pp.c:11743)
        ID: name='x' (at pp.c:11743)
  FuncDef:  (at pp.c:11747)
    Decl: name='Msp430AlarmC__0__Msp430Compare__setEvent', quals=[], storage=['static', 'inline'] (at pp.c:11747)
      FuncDecl: quals=None (at pp.c:11747)
        ParamList:  (at pp.c:11747)
          Decl: name='time', quals=[], storage=[] (at pp.c:11747)
            TypeDecl: declname='time', quals=[] (at pp.c:11747)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__setEvent', quals=[] (at pp.c:11747)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11747)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Compare__setEvent' (at pp.c:11749)
        ExprList:  (at pp.c:11749)
          ID: name='time' (at pp.c:11749)
  FuncDef:  (at pp.c:11754)
    Decl: name='Msp430TimerCapComP__3__Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:11754)
      FuncDecl: quals=None (at pp.c:11754)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Timer__get', quals=[] (at pp.c:11754)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11754)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11756)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11756)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11760)
        ID: name='__nesc_result' (at pp.c:11760)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__get' (at pp.c:11760)
      Return:  (at pp.c:11764)
        ID: name='__nesc_result' (at pp.c:11764)
  FuncDef:  (at pp.c:11769)
    Decl: name='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[], storage=['inline', 'static'] (at pp.c:11769)
      FuncDecl: quals=None (at pp.c:11769)
        ParamList:  (at pp.c:11769)
          Decl: name='x', quals=[], storage=[] (at pp.c:11769)
            TypeDecl: declname='x', quals=[] (at pp.c:11769)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[] (at pp.c:11769)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11770)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11771)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='402U' (at pp.c:11771)
        BinaryOp: op='+' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__3__Timer__get' (at pp.c:11771)
          ID: name='x' (at pp.c:11771)
  FuncDef:  (at pp.c:11775)
    Decl: name='Msp430AlarmC__0__Msp430Compare__setEventFromNow', quals=[], storage=['static', 'inline'] (at pp.c:11775)
      FuncDecl: quals=None (at pp.c:11775)
        ParamList:  (at pp.c:11775)
          Decl: name='delta', quals=[], storage=[] (at pp.c:11775)
            TypeDecl: declname='delta', quals=[] (at pp.c:11775)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__setEventFromNow', quals=[] (at pp.c:11775)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11775)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Compare__setEventFromNow' (at pp.c:11777)
        ExprList:  (at pp.c:11777)
          ID: name='delta' (at pp.c:11777)
  FuncDef:  (at pp.c:11782)
    Decl: name='Msp430AlarmC__0__Msp430Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:11782)
      FuncDecl: quals=None (at pp.c:11782)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430Timer__get', quals=[] (at pp.c:11782)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11782)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11784)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11784)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11788)
        ID: name='__nesc_result' (at pp.c:11788)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__get' (at pp.c:11788)
      Return:  (at pp.c:11792)
        ID: name='__nesc_result' (at pp.c:11792)
  FuncDef:  (at pp.c:11797)
    Decl: name='Msp430AlarmC__0__Alarm__startAt', quals=[], storage=['inline', 'static'] (at pp.c:11797)
      FuncDecl: quals=None (at pp.c:11797)
        ParamList:  (at pp.c:11797)
          Decl: name='t0', quals=[], storage=[] (at pp.c:11797)
            TypeDecl: declname='t0', quals=[] (at pp.c:11797)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:11797)
            TypeDecl: declname='dt', quals=[] (at pp.c:11797)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Alarm__startAt', quals=[] (at pp.c:11797)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11798)
      Compound:  (at pp.c:11800)
        Decl: name='now', quals=[], storage=[] (at pp.c:11801)
          TypeDecl: declname='now', quals=[] (at pp.c:11801)
            IdentifierType: names=['uint16_t'] (at None)
          FuncCall:  (at None)
            ID: name='Msp430AlarmC__0__Msp430Timer__get' (at pp.c:11801)
        Decl: name='elapsed', quals=[], storage=[] (at pp.c:11802)
          TypeDecl: declname='elapsed', quals=[] (at pp.c:11802)
            IdentifierType: names=['uint16_t'] (at None)
          BinaryOp: op='-' (at pp.c:11802)
            ID: name='now' (at pp.c:11802)
            ID: name='t0' (at pp.c:11802)
        If:  (at pp.c:11805)
          BinaryOp: op='>=' (at pp.c:11805)
            ID: name='elapsed' (at pp.c:11805)
            ID: name='dt' (at pp.c:11805)
          Compound:  (at pp.c:11806)
            FuncCall:  (at None)
              ID: name='Msp430AlarmC__0__Msp430Compare__setEventFromNow' (at pp.c:11807)
              ExprList:  (at pp.c:11807)
                Constant: type='int', value='2' (at pp.c:11807)
          Compound:  (at pp.c:11810)
            Decl: name='remaining', quals=[], storage=[] (at pp.c:11811)
              TypeDecl: declname='remaining', quals=[] (at pp.c:11811)
                IdentifierType: names=['uint16_t'] (at None)
              BinaryOp: op='-' (at pp.c:11811)
                ID: name='dt' (at pp.c:11811)
                ID: name='elapsed' (at pp.c:11811)
            If:  (at pp.c:11814)
              BinaryOp: op='<=' (at pp.c:11814)
                ID: name='remaining' (at pp.c:11814)
                Constant: type='int', value='2' (at pp.c:11814)
              Compound:  (at pp.c:11814)
                FuncCall:  (at None)
                  ID: name='Msp430AlarmC__0__Msp430Compare__setEventFromNow' (at pp.c:11815)
                  ExprList:  (at pp.c:11815)
                    Constant: type='int', value='2' (at pp.c:11815)
              Compound:  (at pp.c:11817)
                FuncCall:  (at None)
                  ID: name='Msp430AlarmC__0__Msp430Compare__setEvent' (at pp.c:11819)
                  ExprList:  (at pp.c:11819)
                    BinaryOp: op='+' (at pp.c:11819)
                      ID: name='now' (at pp.c:11819)
                      ID: name='remaining' (at pp.c:11819)
        FuncCall:  (at None)
          ID: name='Msp430AlarmC__0__Msp430TimerControl__clearPendingInterrupt' (at pp.c:11823)
        FuncCall:  (at None)
          ID: name='Msp430AlarmC__0__Msp430TimerControl__enableEvents' (at pp.c:11824)
  FuncDef:  (at pp.c:11829)
    Decl: name='TransformAlarmC__0__AlarmFrom__startAt', quals=[], storage=['static', 'inline'] (at pp.c:11829)
      FuncDecl: quals=None (at pp.c:11829)
        ParamList:  (at pp.c:11829)
          Decl: name='t0', quals=[], storage=[] (at pp.c:11829)
            TypeDecl: declname='t0', quals=[] (at pp.c:11829)
              IdentifierType: names=['TransformAlarmC__0__AlarmFrom__size_type'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:11829)
            TypeDecl: declname='dt', quals=[] (at pp.c:11829)
              IdentifierType: names=['TransformAlarmC__0__AlarmFrom__size_type'] (at None)
        TypeDecl: declname='TransformAlarmC__0__AlarmFrom__startAt', quals=[] (at pp.c:11829)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11829)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Alarm__startAt' (at pp.c:11831)
        ExprList:  (at pp.c:11831)
          ID: name='t0' (at pp.c:11831)
          ID: name='dt' (at pp.c:11831)
  FuncDef:  (at pp.c:11836)
    Decl: name='__nesc_ntoh_leuint8', quals=[], storage=['__inline', 'static'] (at pp.c:11836)
      FuncDecl: quals=None (at pp.c:11836)
        ParamList:  (at pp.c:11836)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:11836)
            PtrDecl: quals=[] (at pp.c:11836)
              TypeDecl: declname='source', quals=['const'] (at pp.c:11836)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_leuint8', quals=[] (at pp.c:11836)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:11838)
      Decl: name='base', quals=['const'], storage=[] (at pp.c:11839)
        PtrDecl: quals=[] (at pp.c:11839)
          TypeDecl: declname='base', quals=['const'] (at pp.c:11839)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='source' (at pp.c:11839)
      Return:  (at pp.c:11842)
        ArrayRef:  (at pp.c:11842)
          ID: name='base' (at pp.c:11842)
          Constant: type='int', value='0' (at pp.c:11842)
  FuncDef:  (at pp.c:11846)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:11846)
      FuncDecl: quals=None (at pp.c:11846)
        ParamList:  (at pp.c:11846)
          Decl: name='id', quals=[], storage=[] (at pp.c:11846)
            TypeDecl: declname='id', quals=[] (at pp.c:11846)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11847)
            PtrDecl: quals=[] (at pp.c:11847)
              TypeDecl: declname='msg', quals=[] (at pp.c:11847)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[] (at pp.c:11846)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11849)
  FuncDef:  (at pp.c:11853)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static', 'inline'] (at pp.c:11853)
      FuncDecl: quals=None (at pp.c:11853)
        ParamList:  (at pp.c:11853)
          Decl: name='arg_0x102b20d60', quals=[], storage=[] (at pp.c:11853)
            TypeDecl: declname='arg_0x102b20d60', quals=[] (at pp.c:11853)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11853)
            PtrDecl: quals=[] (at pp.c:11853)
              TypeDecl: declname='msg', quals=[] (at pp.c:11853)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:11853)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11853)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff' (at pp.c:11855)
        ExprList:  (at pp.c:11855)
          ID: name='arg_0x102b20d60' (at pp.c:11855)
          ID: name='msg' (at pp.c:11855)
  FuncDef:  (at pp.c:11860)
    Decl: name='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:11860)
      FuncDecl: quals=None (at pp.c:11860)
        ParamList:  (at pp.c:11860)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11860)
            PtrDecl: quals=[] (at pp.c:11860)
              TypeDecl: declname='msg', quals=[] (at pp.c:11860)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:11860)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11862)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__requestCongestionBackoff' (at pp.c:11863)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint8' (at pp.c:11863)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:11863)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['cc2420_header_t'] (at None)
                    BinaryOp: op='-' (at None)
                      BinaryOp: op='+' (at None)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            PtrDecl: quals=[] (at pp.c:11863)
                              TypeDecl: declname=None, quals=[] (at None)
                                IdentifierType: names=['uint8_t'] (at None)
                          ID: name='msg' (at pp.c:11863)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            TypeDecl: declname=None, quals=[] (at None)
                              IdentifierType: names=['size_t'] (at None)
                          UnaryOp: op='&' (at None)
                            StructRef: type='->' (at None)
                              Cast:  (at None)
                                Typename: quals=[] (at None)
                                  PtrDecl: quals=[] (at pp.c:11863)
                                    TypeDecl: declname=None, quals=[] (at None)
                                      IdentifierType: names=['message_t'] (at None)
                                Constant: type='int', value='0' (at pp.c:11863)
                              ID: name='data' (at pp.c:11863)
                      UnaryOp: op='sizeof' (at pp.c:11863)
                        Typename: quals=[] (at None)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['cc2420_header_t'] (at None)
                  ID: name='type' (at pp.c:11863)
                ID: name='nxdata' (at pp.c:11863)
          ID: name='msg' (at pp.c:11863)
  FuncDef:  (at pp.c:11867)
    Decl: name='__nesc_ntoh_uint16', quals=[], storage=['__inline', 'static'] (at pp.c:11867)
      FuncDecl: quals=None (at pp.c:11867)
        ParamList:  (at pp.c:11867)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:11867)
            PtrDecl: quals=[] (at pp.c:11867)
              TypeDecl: declname='source', quals=['const'] (at pp.c:11867)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_uint16', quals=[] (at pp.c:11867)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11869)
      Decl: name='base', quals=['const'], storage=[] (at pp.c:11870)
        PtrDecl: quals=[] (at pp.c:11870)
          TypeDecl: declname='base', quals=['const'] (at pp.c:11870)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='source' (at pp.c:11870)
      Return:  (at pp.c:11873)
        BinaryOp: op='|' (at None)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
              ArrayRef:  (at pp.c:11873)
                ID: name='base' (at pp.c:11873)
                Constant: type='int', value='0' (at pp.c:11873)
            Constant: type='int', value='8' (at pp.c:11873)
          ArrayRef:  (at pp.c:11873)
            ID: name='base' (at pp.c:11873)
            Constant: type='int', value='1' (at pp.c:11873)
  FuncDef:  (at pp.c:11877)
    Decl: name='RandomMlcgC__Random__rand16', quals=[], storage=['inline', 'static'] (at pp.c:11877)
      FuncDecl: quals=None (at pp.c:11877)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RandomMlcgC__Random__rand16', quals=[] (at pp.c:11877)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11879)
      Return:  (at pp.c:11880)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['uint16_t'] (at None)
          FuncCall:  (at None)
            ID: name='RandomMlcgC__Random__rand32' (at pp.c:11880)
  FuncDef:  (at pp.c:11884)
    Decl: name='DefaultLplP__Random__rand16', quals=[], storage=['static', 'inline'] (at pp.c:11884)
      FuncDecl: quals=None (at pp.c:11884)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__Random__rand16', quals=[] (at pp.c:11884)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11884)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11886)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11886)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11890)
        ID: name='__nesc_result' (at pp.c:11890)
        FuncCall:  (at None)
          ID: name='RandomMlcgC__Random__rand16' (at pp.c:11890)
      Return:  (at pp.c:11894)
        ID: name='__nesc_result' (at pp.c:11894)
  FuncDef:  (at pp.c:11899)
    Decl: name='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:11899)
      FuncDecl: quals=None (at pp.c:11899)
        ParamList:  (at pp.c:11899)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:11899)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:11899)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:11899)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11901)
      Assignment: op='=' (at pp.c:11902)
        ID: name='CC2420TransmitP__myCongestionBackoff' (at pp.c:11902)
        BinaryOp: op='+' (at pp.c:11902)
          ID: name='backoffTime' (at pp.c:11902)
          Constant: type='int', value='1' (at pp.c:11902)
  FuncDef:  (at pp.c:11906)
    Decl: name='CC2420CsmaP__SubBackoff__setCongestionBackoff', quals=[], storage=['static', 'inline'] (at pp.c:11906)
      FuncDecl: quals=None (at pp.c:11906)
        ParamList:  (at pp.c:11906)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:11906)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:11906)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubBackoff__setCongestionBackoff', quals=[] (at pp.c:11906)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11906)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__RadioBackoff__setCongestionBackoff' (at pp.c:11908)
        ExprList:  (at pp.c:11908)
          ID: name='backoffTime' (at pp.c:11908)
  FuncDef:  (at pp.c:11913)
    Decl: name='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:11913)
      FuncDecl: quals=None (at pp.c:11913)
        ParamList:  (at pp.c:11913)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:11913)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:11913)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:11913)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11915)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__setCongestionBackoff' (at pp.c:11916)
        ExprList:  (at pp.c:11916)
          ID: name='backoffTime' (at pp.c:11916)
  FuncDef:  (at pp.c:11920)
    Decl: name='DefaultLplP__RadioBackoff__setCongestionBackoff', quals=[], storage=['static', 'inline'] (at pp.c:11920)
      FuncDecl: quals=None (at pp.c:11920)
        ParamList:  (at pp.c:11920)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:11920)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:11920)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:11920)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11920)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__RadioBackoff__setCongestionBackoff' (at pp.c:11922)
        ExprList:  (at pp.c:11922)
          ID: name='backoffTime' (at pp.c:11922)
  FuncDef:  (at pp.c:11927)
    Decl: name='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[], storage=['inline', 'static'] (at pp.c:11927)
      FuncDecl: quals=None (at pp.c:11927)
        ParamList:  (at pp.c:11927)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11927)
            PtrDecl: quals=[] (at pp.c:11927)
              TypeDecl: declname='msg', quals=[] (at pp.c:11927)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:11927)
          TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:11927)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:11929)
      Return:  (at pp.c:11930)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:11930)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['cc2420_metadata_t'] (at None)
          StructRef: type='->' (at pp.c:11930)
            ID: name='msg' (at pp.c:11930)
            ID: name='metadata' (at pp.c:11930)
  FuncDef:  (at pp.c:11934)
    Decl: name='DefaultLplP__CC2420PacketBody__getMetadata', quals=[], storage=['static', 'inline'] (at pp.c:11934)
      FuncDecl: quals=None (at pp.c:11934)
        ParamList:  (at pp.c:11934)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11934)
            PtrDecl: quals=[] (at pp.c:11934)
              TypeDecl: declname='msg', quals=[] (at pp.c:11934)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:11934)
          TypeDecl: declname='DefaultLplP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:11934)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:11934)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11936)
        PtrDecl: quals=[] (at pp.c:11936)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11936)
            Struct: name='cc2420_metadata_t', packed=False (at pp.c:11936)
      Assignment: op='=' (at pp.c:11940)
        ID: name='__nesc_result' (at pp.c:11940)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:11940)
          ExprList:  (at pp.c:11940)
            ID: name='msg' (at pp.c:11940)
      Return:  (at pp.c:11944)
        ID: name='__nesc_result' (at pp.c:11944)
  FuncDef:  (at pp.c:11949)
    Decl: name='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:11949)
      FuncDecl: quals=None (at pp.c:11949)
        ParamList:  (at pp.c:11949)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11949)
            PtrDecl: quals=[] (at pp.c:11949)
              TypeDecl: declname='msg', quals=[] (at pp.c:11949)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:11949)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11951)
      If:  (at pp.c:11953)
        BinaryOp: op='>' (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_uint16' (at pp.c:11953)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  FuncCall:  (at None)
                    ID: name='DefaultLplP__CC2420PacketBody__getMetadata' (at pp.c:11955)
                    ExprList:  (at pp.c:11955)
                      ID: name='msg' (at pp.c:11955)
                  ID: name='rxInterval' (at pp.c:11955)
                ID: name='nxdata' (at pp.c:11955)
          ID: name='DefaultLplP__ONE_MESSAGE' (at pp.c:11956)
        Compound:  (at pp.c:11956)
          FuncCall:  (at None)
            ID: name='DefaultLplP__RadioBackoff__setCongestionBackoff' (at pp.c:11957)
            ExprList:  (at None)
              BinaryOp: op='+' (at None)
                BinaryOp: op='%' (at None)
                  FuncCall:  (at None)
                    ID: name='DefaultLplP__Random__rand16' (at pp.c:11957)
                  BinaryOp: op='*' (at pp.c:11958)
                    Constant: type='int', value='0x3' (at pp.c:11958)
                    ID: name='CC2420_BACKOFF_PERIOD' (at pp.c:11958)
                ID: name='CC2420_MIN_BACKOFF' (at pp.c:11958)
  FuncDef:  (at pp.c:11963)
    Decl: name='CC2420CsmaP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static', 'inline'] (at pp.c:11963)
      FuncDecl: quals=None (at pp.c:11963)
        ParamList:  (at pp.c:11963)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11963)
            PtrDecl: quals=[] (at pp.c:11963)
              TypeDecl: declname='msg', quals=[] (at pp.c:11963)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:11963)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11963)
      FuncCall:  (at None)
        ID: name='DefaultLplP__RadioBackoff__requestCongestionBackoff' (at pp.c:11965)
        ExprList:  (at pp.c:11965)
          ID: name='msg' (at pp.c:11965)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff' (at pp.c:11967)
        ExprList:  (at pp.c:11967)
          ID: name='msg' (at pp.c:11967)
  FuncDef:  (at pp.c:11972)
    Decl: name='CC2420CsmaP__Random__rand16', quals=[], storage=['static', 'inline'] (at pp.c:11972)
      FuncDecl: quals=None (at pp.c:11972)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__Random__rand16', quals=[] (at pp.c:11972)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11972)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11974)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11974)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11978)
        ID: name='__nesc_result' (at pp.c:11978)
        FuncCall:  (at None)
          ID: name='RandomMlcgC__Random__rand16' (at pp.c:11978)
      Return:  (at pp.c:11982)
        ID: name='__nesc_result' (at pp.c:11982)
  FuncDef:  (at pp.c:11987)
    Decl: name='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:11987)
      FuncDecl: quals=None (at pp.c:11987)
        ParamList:  (at pp.c:11987)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11987)
            PtrDecl: quals=[] (at pp.c:11987)
              TypeDecl: declname='msg', quals=[] (at pp.c:11987)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:11987)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11989)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__setCongestionBackoff' (at pp.c:11990)
        ExprList:  (at None)
          BinaryOp: op='+' (at None)
            BinaryOp: op='%' (at None)
              FuncCall:  (at None)
                ID: name='CC2420CsmaP__Random__rand16' (at pp.c:11990)
              BinaryOp: op='*' (at pp.c:11991)
                Constant: type='int', value='0x7' (at pp.c:11991)
                ID: name='CC2420_BACKOFF_PERIOD' (at pp.c:11991)
            ID: name='CC2420_MIN_BACKOFF' (at pp.c:11991)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__RadioBackoff__requestCongestionBackoff' (at pp.c:11993)
        ExprList:  (at pp.c:11993)
          ID: name='msg' (at pp.c:11993)
  FuncDef:  (at pp.c:11997)
    Decl: name='CC2420TransmitP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static', 'inline'] (at pp.c:11997)
      FuncDecl: quals=None (at pp.c:11997)
        ParamList:  (at pp.c:11997)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11997)
            PtrDecl: quals=[] (at pp.c:11997)
              TypeDecl: declname='msg', quals=[] (at pp.c:11997)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:11997)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11997)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__requestCongestionBackoff' (at pp.c:11999)
        ExprList:  (at pp.c:11999)
          ID: name='msg' (at pp.c:11999)
  FuncDef:  (at pp.c:12004)
    Decl: name='CC2420TransmitP__SpiResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:12004)
      FuncDecl: quals=None (at pp.c:12004)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SpiResource__immediateRequest', quals=[] (at pp.c:12004)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12004)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12006)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12006)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12010)
        ID: name='__nesc_result' (at pp.c:12010)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__immediateRequest' (at pp.c:12010)
          ExprList:  (at pp.c:12010)
            ID: name='CC2420SpiC__3__CLIENT_ID' (at pp.c:12010)
      Return:  (at pp.c:12014)
        ID: name='__nesc_result' (at pp.c:12014)
  FuncDef:  (at pp.c:12019)
    Decl: name='CC2420SpiP__WorkingState__requestState', quals=[], storage=['static', 'inline'] (at pp.c:12019)
      FuncDecl: quals=None (at pp.c:12019)
        ParamList:  (at pp.c:12019)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:12019)
            TypeDecl: declname='reqState', quals=[] (at pp.c:12019)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__WorkingState__requestState', quals=[] (at pp.c:12019)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12019)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12021)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12021)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12025)
        ID: name='__nesc_result' (at pp.c:12025)
        FuncCall:  (at None)
          ID: name='StateImplP__State__requestState' (at pp.c:12025)
          ExprList:  (at pp.c:12025)
            Constant: type='int', value='0U' (at pp.c:12025)
            ID: name='reqState' (at pp.c:12025)
      Return:  (at pp.c:12029)
        ID: name='__nesc_result' (at pp.c:12029)
  FuncDef:  (at pp.c:12034)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:12034)
      FuncDecl: quals=None (at pp.c:12034)
        ParamList:  (at pp.c:12034)
          Decl: name='id', quals=[], storage=[] (at pp.c:12034)
            TypeDecl: declname='id', quals=[] (at pp.c:12034)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[] (at pp.c:12034)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12036)
      Return:  (at pp.c:12038)
        ID: name='FAIL' (at pp.c:12038)
  FuncDef:  (at pp.c:12042)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__isOwner', quals=[], storage=['static', 'inline'] (at pp.c:12042)
      FuncDecl: quals=None (at pp.c:12042)
        ParamList:  (at pp.c:12042)
          Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:12042)
            TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:12042)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__isOwner', quals=[] (at pp.c:12042)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12042)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12044)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12044)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:12048)
        ID: name='arg_0x1022fa0c8' (at pp.c:12048)
        Compound:  (at pp.c:12048)
          Case:  (at pp.c:12050)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:12050)
            Assignment: op='=' (at pp.c:12052)
              ID: name='__nesc_result' (at pp.c:12052)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__isOwner' (at pp.c:12052)
                ExprList:  (at pp.c:12052)
                  ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:12052)
          Break:  (at pp.c:12054)
          Default:  (at pp.c:12056)
            Assignment: op='=' (at pp.c:12058)
              ID: name='__nesc_result' (at pp.c:12058)
              FuncCall:  (at None)
                ID: name='Msp430SpiNoDmaP__0__UsartResource__default__isOwner' (at pp.c:12058)
                ExprList:  (at pp.c:12058)
                  ID: name='arg_0x1022fa0c8' (at pp.c:12058)
          Break:  (at pp.c:12060)
      Return:  (at pp.c:12066)
        ID: name='__nesc_result' (at pp.c:12066)
  FuncDef:  (at pp.c:12071)
    Decl: name='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:12071)
      FuncDecl: quals=None (at pp.c:12071)
        ParamList:  (at pp.c:12071)
          Decl: name='id', quals=[], storage=[] (at pp.c:12071)
            TypeDecl: declname='id', quals=[] (at pp.c:12071)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[] (at pp.c:12071)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:12073)
      Return:  (at pp.c:12074)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__UsartResource__isOwner' (at pp.c:12074)
          ExprList:  (at pp.c:12074)
            ID: name='id' (at pp.c:12074)
  FuncDef:  (at pp.c:12078)
    Decl: name='CC2420SpiP__SpiResource__isOwner', quals=[], storage=['static', 'inline'] (at pp.c:12078)
      FuncDecl: quals=None (at pp.c:12078)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiResource__isOwner', quals=[] (at pp.c:12078)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12078)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12080)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12080)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12084)
        ID: name='__nesc_result' (at pp.c:12084)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Resource__isOwner' (at pp.c:12084)
          ExprList:  (at pp.c:12084)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:12084)
      Return:  (at pp.c:12088)
        ID: name='__nesc_result' (at pp.c:12088)
  FuncDef:  (at pp.c:12093)
    Decl: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[], storage=['inline', 'static'] (at pp.c:12093)
      FuncDecl: quals=None (at pp.c:12093)
        ParamList:  (at pp.c:12093)
          Decl: name='id', quals=[], storage=[] (at pp.c:12093)
            TypeDecl: declname='id', quals=[] (at pp.c:12093)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:12093)
          TypeDecl: declname='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[] (at pp.c:12093)
            IdentifierType: names=['msp430_spi_union_config_t'] (at None)
    Compound:  (at pp.c:12095)
      Return:  (at pp.c:12096)
        UnaryOp: op='&' (at pp.c:12096)
          ID: name='msp430_spi_default_config' (at pp.c:12096)
  FuncDef:  (at pp.c:12100)
    Decl: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__getConfig', quals=[], storage=['static', 'inline'] (at pp.c:12100)
      FuncDecl: quals=None (at pp.c:12100)
        ParamList:  (at pp.c:12100)
          Decl: name='arg_0x1022f92f0', quals=[], storage=[] (at pp.c:12100)
            TypeDecl: declname='arg_0x1022f92f0', quals=[] (at pp.c:12100)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:12100)
          TypeDecl: declname='Msp430SpiNoDmaP__0__Msp430SpiConfigure__getConfig', quals=[] (at pp.c:12100)
            IdentifierType: names=['msp430_spi_union_config_t'] (at None)
    Compound:  (at pp.c:12100)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12102)
        PtrDecl: quals=[] (at pp.c:12102)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12102)
            Union: name='__nesc_unnamed4282', packed=False (at pp.c:12102)
      Assignment: op='=' (at pp.c:12106)
        ID: name='__nesc_result' (at pp.c:12106)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig' (at pp.c:12106)
          ExprList:  (at pp.c:12106)
            ID: name='arg_0x1022f92f0' (at pp.c:12106)
      Return:  (at pp.c:12110)
        ID: name='__nesc_result' (at pp.c:12110)
  FuncDef:  (at pp.c:12115)
    Decl: name='Msp430SpiNoDmaP__0__Usart__setModeSpi', quals=[], storage=['static', 'inline'] (at pp.c:12115)
      FuncDecl: quals=None (at pp.c:12115)
        ParamList:  (at pp.c:12115)
          Decl: name='config', quals=[], storage=[] (at pp.c:12115)
            PtrDecl: quals=[] (at pp.c:12115)
              TypeDecl: declname='config', quals=[] (at pp.c:12115)
                IdentifierType: names=['msp430_spi_union_config_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__setModeSpi', quals=[] (at pp.c:12115)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12115)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__setModeSpi' (at pp.c:12117)
        ExprList:  (at pp.c:12117)
          ID: name='config' (at pp.c:12117)
  FuncDef:  (at pp.c:12122)
    Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[], storage=['inline', 'static'] (at pp.c:12122)
      FuncDecl: quals=None (at pp.c:12122)
        ParamList:  (at pp.c:12122)
          Decl: name='id', quals=[], storage=[] (at pp.c:12122)
            TypeDecl: declname='id', quals=[] (at pp.c:12122)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[] (at pp.c:12122)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12124)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__setModeSpi' (at pp.c:12125)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__getConfig' (at pp.c:12125)
            ExprList:  (at pp.c:12125)
              ID: name='id' (at pp.c:12125)
  FuncDef:  (at pp.c:12129)
    Decl: name='ArbiterP__1__ResourceConfigure__default__configure', quals=[], storage=['inline', 'static'] (at pp.c:12129)
      FuncDecl: quals=None (at pp.c:12129)
        ParamList:  (at pp.c:12129)
          Decl: name='id', quals=[], storage=[] (at pp.c:12129)
            TypeDecl: declname='id', quals=[] (at pp.c:12129)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__configure', quals=[] (at pp.c:12129)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12131)
  FuncDef:  (at pp.c:12135)
    Decl: name='ArbiterP__1__ResourceConfigure__configure', quals=[], storage=['static', 'inline'] (at pp.c:12135)
      FuncDecl: quals=None (at pp.c:12135)
        ParamList:  (at pp.c:12135)
          Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:12135)
            TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:12135)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceConfigure__configure', quals=[] (at pp.c:12135)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12135)
      Switch:  (at pp.c:12137)
        ID: name='arg_0x101d7d9b8' (at pp.c:12137)
        Compound:  (at pp.c:12137)
          Case:  (at pp.c:12139)
            ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:12139)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__ResourceConfigure__configure' (at pp.c:12141)
              ExprList:  (at pp.c:12141)
                ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:12141)
          Break:  (at pp.c:12143)
          Default:  (at pp.c:12145)
            FuncCall:  (at None)
              ID: name='ArbiterP__1__ResourceConfigure__default__configure' (at pp.c:12147)
              ExprList:  (at pp.c:12147)
                ID: name='arg_0x101d7d9b8' (at pp.c:12147)
          Break:  (at pp.c:12149)
  FuncDef:  (at pp.c:12156)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:12156)
      FuncDecl: quals=None (at pp.c:12156)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[] (at pp.c:12156)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12158)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__release' (at pp.c:12159)
  FuncDef:  (at pp.c:12163)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__immediateRequested', quals=[], storage=['static', 'inline'] (at pp.c:12163)
      FuncDecl: quals=None (at pp.c:12163)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__immediateRequested', quals=[] (at pp.c:12163)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12163)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested' (at pp.c:12165)
  FuncDef:  (at pp.c:12170)
    Decl: name='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:12170)
      FuncDecl: quals=None (at pp.c:12170)
        ParamList:  (at pp.c:12170)
          Decl: name='id', quals=[], storage=[] (at pp.c:12170)
            TypeDecl: declname='id', quals=[] (at pp.c:12170)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[] (at pp.c:12170)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12172)
  FuncDef:  (at pp.c:12176)
    Decl: name='ArbiterP__1__ResourceRequested__immediateRequested', quals=[], storage=['static', 'inline'] (at pp.c:12176)
      FuncDecl: quals=None (at pp.c:12176)
        ParamList:  (at pp.c:12176)
          Decl: name='arg_0x101d807e8', quals=[], storage=[] (at pp.c:12176)
            TypeDecl: declname='arg_0x101d807e8', quals=[] (at pp.c:12176)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceRequested__immediateRequested', quals=[] (at pp.c:12176)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12176)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceRequested__default__immediateRequested' (at pp.c:12178)
        ExprList:  (at pp.c:12178)
          ID: name='arg_0x101d807e8' (at pp.c:12178)
  FuncDef:  (at pp.c:12183)
    Decl: name='ArbiterP__1__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:12183)
      FuncDecl: quals=None (at pp.c:12183)
        ParamList:  (at pp.c:12183)
          Decl: name='id', quals=[], storage=[] (at pp.c:12183)
            TypeDecl: declname='id', quals=[] (at pp.c:12183)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__immediateRequest', quals=[] (at pp.c:12183)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12185)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceRequested__immediateRequested' (at pp.c:12186)
        ExprList:  (at pp.c:12186)
          ID: name='ArbiterP__1__resId' (at pp.c:12186)
      Compound:  (at pp.c:12189)
        If:  (at pp.c:12190)
          BinaryOp: op='==' (at pp.c:12190)
            ID: name='ArbiterP__1__state' (at pp.c:12190)
            ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:12190)
          Compound:  (at pp.c:12190)
            Assignment: op='=' (at pp.c:12191)
              ID: name='ArbiterP__1__state' (at pp.c:12191)
              ID: name='ArbiterP__1__RES_IMM_GRANTING' (at pp.c:12191)
            Assignment: op='=' (at pp.c:12192)
              ID: name='ArbiterP__1__reqResId' (at pp.c:12192)
              ID: name='id' (at pp.c:12192)
          Compound:  (at pp.c:12194)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12195)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12195)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='FAIL' (at pp.c:12197)
            Return:  (at pp.c:12200)
              ID: name='__nesc_temp' (at pp.c:12200)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__immediateRequested' (at pp.c:12204)
      If:  (at pp.c:12205)
        BinaryOp: op='==' (at pp.c:12205)
          ID: name='ArbiterP__1__resId' (at pp.c:12205)
          ID: name='id' (at pp.c:12205)
        Compound:  (at pp.c:12205)
          FuncCall:  (at None)
            ID: name='ArbiterP__1__ResourceConfigure__configure' (at pp.c:12206)
            ExprList:  (at pp.c:12206)
              ID: name='ArbiterP__1__resId' (at pp.c:12206)
          Return:  (at pp.c:12207)
            ID: name='SUCCESS' (at pp.c:12207)
      Assignment: op='=' (at pp.c:12211)
        ID: name='ArbiterP__1__state' (at pp.c:12211)
        ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:12211)
      Return:  (at pp.c:12212)
        ID: name='FAIL' (at pp.c:12212)
  FuncDef:  (at pp.c:12216)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:12216)
      FuncDecl: quals=None (at pp.c:12216)
        ParamList:  (at pp.c:12216)
          Decl: name='id', quals=[], storage=[] (at pp.c:12216)
            TypeDecl: declname='id', quals=[] (at pp.c:12216)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[] (at pp.c:12216)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12218)
      Return:  (at pp.c:12220)
        ID: name='FAIL' (at pp.c:12220)
  FuncDef:  (at pp.c:12224)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:12224)
      FuncDecl: quals=None (at pp.c:12224)
        ParamList:  (at pp.c:12224)
          Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:12224)
            TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:12224)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__immediateRequest', quals=[] (at pp.c:12224)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12224)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12226)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12226)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:12230)
        ID: name='arg_0x1022fa0c8' (at pp.c:12230)
        Compound:  (at pp.c:12230)
          Case:  (at pp.c:12232)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:12232)
            Assignment: op='=' (at pp.c:12234)
              ID: name='__nesc_result' (at pp.c:12234)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__immediateRequest' (at pp.c:12234)
                ExprList:  (at pp.c:12234)
                  ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:12234)
          Break:  (at pp.c:12236)
          Default:  (at pp.c:12238)
            Assignment: op='=' (at pp.c:12240)
              ID: name='__nesc_result' (at pp.c:12240)
              FuncCall:  (at None)
                ID: name='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest' (at pp.c:12240)
                ExprList:  (at pp.c:12240)
                  ID: name='arg_0x1022fa0c8' (at pp.c:12240)
          Break:  (at pp.c:12242)
      Return:  (at pp.c:12248)
        ID: name='__nesc_result' (at pp.c:12248)
  FuncDef:  (at pp.c:12253)
    Decl: name='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:12253)
      FuncDecl: quals=None (at pp.c:12253)
        ParamList:  (at pp.c:12253)
          Decl: name='id', quals=[], storage=[] (at pp.c:12253)
            TypeDecl: declname='id', quals=[] (at pp.c:12253)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[] (at pp.c:12253)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12255)
      Return:  (at pp.c:12256)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__UsartResource__immediateRequest' (at pp.c:12256)
          ExprList:  (at pp.c:12256)
            ID: name='id' (at pp.c:12256)
  FuncDef:  (at pp.c:12260)
    Decl: name='CC2420SpiP__SpiResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:12260)
      FuncDecl: quals=None (at pp.c:12260)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiResource__immediateRequest', quals=[] (at pp.c:12260)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12260)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12262)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12262)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12266)
        ID: name='__nesc_result' (at pp.c:12266)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Resource__immediateRequest' (at pp.c:12266)
          ExprList:  (at pp.c:12266)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:12266)
      Return:  (at pp.c:12270)
        ID: name='__nesc_result' (at pp.c:12270)
  FuncDef:  (at pp.c:12275)
    Decl: name='SchedulerBasicP__isWaiting', quals=[], storage=['inline', 'static'] (at pp.c:12275)
      FuncDecl: quals=None (at pp.c:12275)
        ParamList:  (at pp.c:12275)
          Decl: name='id', quals=[], storage=[] (at pp.c:12275)
            TypeDecl: declname='id', quals=[] (at pp.c:12275)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SchedulerBasicP__isWaiting', quals=[] (at pp.c:12275)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12276)
      Return:  (at pp.c:12277)
        BinaryOp: op='||' (at pp.c:12277)
          BinaryOp: op='!=' (at pp.c:12277)
            ArrayRef:  (at pp.c:12277)
              ID: name='SchedulerBasicP__m_next' (at pp.c:12277)
              ID: name='id' (at pp.c:12277)
            ID: name='SchedulerBasicP__NO_TASK' (at pp.c:12277)
          BinaryOp: op='==' (at pp.c:12277)
            ID: name='SchedulerBasicP__m_tail' (at pp.c:12277)
            ID: name='id' (at pp.c:12277)
  FuncDef:  (at pp.c:12280)
    Decl: name='SchedulerBasicP__pushTask', quals=[], storage=['inline', 'static'] (at pp.c:12280)
      FuncDecl: quals=None (at pp.c:12280)
        ParamList:  (at pp.c:12280)
          Decl: name='id', quals=[], storage=[] (at pp.c:12280)
            TypeDecl: declname='id', quals=[] (at pp.c:12280)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SchedulerBasicP__pushTask', quals=[] (at pp.c:12280)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12281)
      If:  (at pp.c:12282)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='SchedulerBasicP__isWaiting' (at pp.c:12282)
            ExprList:  (at pp.c:12282)
              ID: name='id' (at pp.c:12282)
        Compound:  (at pp.c:12283)
          If:  (at pp.c:12284)
            BinaryOp: op='==' (at pp.c:12284)
              ID: name='SchedulerBasicP__m_head' (at pp.c:12284)
              ID: name='SchedulerBasicP__NO_TASK' (at pp.c:12284)
            Compound:  (at pp.c:12285)
              Assignment: op='=' (at pp.c:12286)
                ID: name='SchedulerBasicP__m_head' (at pp.c:12286)
                ID: name='id' (at pp.c:12286)
              Assignment: op='=' (at pp.c:12287)
                ID: name='SchedulerBasicP__m_tail' (at pp.c:12287)
                ID: name='id' (at pp.c:12287)
            Compound:  (at pp.c:12290)
              Assignment: op='=' (at pp.c:12291)
                ArrayRef:  (at pp.c:12291)
                  ID: name='SchedulerBasicP__m_next' (at pp.c:12291)
                  ID: name='SchedulerBasicP__m_tail' (at pp.c:12291)
                ID: name='id' (at pp.c:12291)
              Assignment: op='=' (at pp.c:12292)
                ID: name='SchedulerBasicP__m_tail' (at pp.c:12292)
                ID: name='id' (at pp.c:12292)
          Return:  (at pp.c:12294)
            ID: name='TRUE' (at pp.c:12294)
        Compound:  (at pp.c:12297)
          Return:  (at pp.c:12298)
            ID: name='FALSE' (at pp.c:12298)
  FuncDef:  (at pp.c:12303)
    Decl: name='HplMsp430Usart0P__Usart__resetUsart', quals=[], storage=['inline', 'static'] (at pp.c:12303)
      FuncDecl: quals=None (at pp.c:12303)
        ParamList:  (at pp.c:12303)
          Decl: name='reset', quals=[], storage=[] (at pp.c:12303)
            TypeDecl: declname='reset', quals=[] (at pp.c:12303)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__resetUsart', quals=[] (at pp.c:12303)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12305)
      If:  (at pp.c:12306)
        ID: name='reset' (at pp.c:12306)
        Compound:  (at pp.c:12306)
          Assignment: op='=' (at pp.c:12307)
            ID: name='U0CTL' (at pp.c:12307)
            Constant: type='int', value='0x01' (at pp.c:12307)
        Compound:  (at pp.c:12309)
          Assignment: op='&=' (at pp.c:12310)
            ID: name='U0CTL' (at pp.c:12310)
            UnaryOp: op='~' (at pp.c:12310)
              Constant: type='int', value='0x01' (at pp.c:12310)
  FuncDef:  (at pp.c:12315)
    Decl: name='HplMsp430I2C0P__HplUsart__resetUsart', quals=[], storage=['static', 'inline'] (at pp.c:12315)
      FuncDecl: quals=None (at pp.c:12315)
        ParamList:  (at pp.c:12315)
          Decl: name='reset', quals=[], storage=[] (at pp.c:12315)
            TypeDecl: declname='reset', quals=[] (at pp.c:12315)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='HplMsp430I2C0P__HplUsart__resetUsart', quals=[] (at pp.c:12315)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12315)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__resetUsart' (at pp.c:12317)
        ExprList:  (at pp.c:12317)
          ID: name='reset' (at pp.c:12317)
  FuncDef:  (at pp.c:12322)
    Decl: name='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[], storage=['inline', 'static'] (at pp.c:12322)
      FuncDecl: quals=None (at pp.c:12322)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[] (at pp.c:12322)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12324)
      Compound:  (at pp.c:12327)
        Assignment: op='&=' (at pp.c:12328)
          ID: name='HplMsp430I2C0P__U0CTL' (at pp.c:12328)
          UnaryOp: op='~' (at pp.c:12328)
            BinaryOp: op='|' (at pp.c:12328)
              BinaryOp: op='|' (at pp.c:12328)
                Constant: type='int', value='0x20' (at pp.c:12328)
                Constant: type='int', value='0x04' (at pp.c:12328)
              Constant: type='int', value='0x01' (at pp.c:12328)
        FuncCall:  (at None)
          ID: name='HplMsp430I2C0P__HplUsart__resetUsart' (at pp.c:12329)
          ExprList:  (at pp.c:12329)
            ID: name='TRUE' (at pp.c:12329)
  FuncDef:  (at pp.c:12334)
    Decl: name='HplMsp430Usart0P__HplI2C__clearModeI2C', quals=[], storage=['static', 'inline'] (at pp.c:12334)
      FuncDecl: quals=None (at pp.c:12334)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__HplI2C__clearModeI2C', quals=[] (at pp.c:12334)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12334)
      FuncCall:  (at None)
        ID: name='HplMsp430I2C0P__HplI2C__clearModeI2C' (at pp.c:12336)
  FuncDef:  (at pp.c:12341)
    Decl: name='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:12341)
      FuncDecl: quals=None (at pp.c:12341)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[] (at pp.c:12341)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12343)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12346)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:12346)
        UnaryOp: op='~' (at pp.c:12346)
          BinaryOp: op='<<' (at pp.c:12346)
            Constant: type='int', value='0x01' (at pp.c:12346)
            Constant: type='int', value='5' (at pp.c:12346)
  FuncDef:  (at pp.c:12350)
    Decl: name='HplMsp430Usart0P__URXD__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:12350)
      FuncDecl: quals=None (at pp.c:12350)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__URXD__selectIOFunc', quals=[] (at pp.c:12350)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12350)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__21__IO__selectIOFunc' (at pp.c:12352)
  FuncDef:  (at pp.c:12357)
    Decl: name='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:12357)
      FuncDecl: quals=None (at pp.c:12357)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[] (at pp.c:12357)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12359)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12362)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:12362)
        UnaryOp: op='~' (at pp.c:12362)
          BinaryOp: op='<<' (at pp.c:12362)
            Constant: type='int', value='0x01' (at pp.c:12362)
            Constant: type='int', value='4' (at pp.c:12362)
  FuncDef:  (at pp.c:12366)
    Decl: name='HplMsp430Usart0P__UTXD__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:12366)
      FuncDecl: quals=None (at pp.c:12366)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__UTXD__selectIOFunc', quals=[] (at pp.c:12366)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12366)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__20__IO__selectIOFunc' (at pp.c:12368)
  FuncDef:  (at pp.c:12373)
    Decl: name='HplMsp430Usart0P__Usart__disableUart', quals=[], storage=['inline', 'static'] (at pp.c:12373)
      FuncDecl: quals=None (at pp.c:12373)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__disableUart', quals=[] (at pp.c:12373)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12375)
      Compound:  (at pp.c:12378)
        Assignment: op='&=' (at pp.c:12379)
          ID: name='HplMsp430Usart0P__ME1' (at pp.c:12379)
          UnaryOp: op='~' (at pp.c:12379)
            BinaryOp: op='|' (at pp.c:12379)
              BinaryOp: op='<<' (at pp.c:12379)
                Constant: type='int', value='1' (at pp.c:12379)
                Constant: type='int', value='7' (at pp.c:12379)
              BinaryOp: op='<<' (at pp.c:12379)
                Constant: type='int', value='1' (at pp.c:12379)
                Constant: type='int', value='6' (at pp.c:12379)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__UTXD__selectIOFunc' (at pp.c:12380)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__URXD__selectIOFunc' (at pp.c:12381)
  FuncDef:  (at pp.c:12386)
    Decl: name='HplMsp430Usart0P__Usart__setUmctl', quals=[], storage=['inline', 'static'] (at pp.c:12386)
      FuncDecl: quals=None (at pp.c:12386)
        ParamList:  (at pp.c:12386)
          Decl: name='control', quals=[], storage=[] (at pp.c:12386)
            TypeDecl: declname='control', quals=[] (at pp.c:12386)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__setUmctl', quals=[] (at pp.c:12386)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12388)
      Assignment: op='=' (at pp.c:12389)
        ID: name='U0MCTL' (at pp.c:12389)
        ID: name='control' (at pp.c:12389)
  FuncDef:  (at pp.c:12393)
    Decl: name='HplMsp430Usart0P__Usart__setUbr', quals=[], storage=['inline', 'static'] (at pp.c:12393)
      FuncDecl: quals=None (at pp.c:12393)
        ParamList:  (at pp.c:12393)
          Decl: name='control', quals=[], storage=[] (at pp.c:12393)
            TypeDecl: declname='control', quals=[] (at pp.c:12393)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__setUbr', quals=[] (at pp.c:12393)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12395)
      Compound:  (at pp.c:12398)
        Assignment: op='=' (at pp.c:12399)
          ID: name='U0BR0' (at pp.c:12399)
          BinaryOp: op='&' (at pp.c:12399)
            ID: name='control' (at pp.c:12399)
            Constant: type='int', value='0x00FF' (at pp.c:12399)
        Assignment: op='=' (at pp.c:12400)
          ID: name='U0BR1' (at pp.c:12400)
          BinaryOp: op='&' (at pp.c:12400)
            BinaryOp: op='>>' (at pp.c:12400)
              ID: name='control' (at pp.c:12400)
              Constant: type='int', value='8' (at pp.c:12400)
            Constant: type='int', value='0x00FF' (at pp.c:12400)
  FuncDef:  (at pp.c:12405)
    Decl: name='HplMsp430Usart0P__configSpi', quals=[], storage=['inline', 'static'] (at pp.c:12405)
      FuncDecl: quals=None (at pp.c:12405)
        ParamList:  (at pp.c:12405)
          Decl: name='config', quals=[], storage=[] (at pp.c:12405)
            PtrDecl: quals=[] (at pp.c:12405)
              TypeDecl: declname='config', quals=[] (at pp.c:12405)
                IdentifierType: names=['msp430_spi_union_config_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__configSpi', quals=[] (at pp.c:12405)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12407)
      Assignment: op='=' (at pp.c:12409)
        ID: name='U0CTL' (at pp.c:12409)
        BinaryOp: op='|' (at pp.c:12409)
          BinaryOp: op='|' (at pp.c:12409)
            StructRef: type='.' (at pp.c:12409)
              StructRef: type='->' (at pp.c:12409)
                ID: name='config' (at pp.c:12409)
                ID: name='spiRegisters' (at pp.c:12409)
              ID: name='uctl' (at pp.c:12409)
            Constant: type='int', value='0x04' (at pp.c:12409)
          Constant: type='int', value='0x01' (at pp.c:12409)
      Assignment: op='=' (at pp.c:12410)
        ID: name='HplMsp430Usart0P__U0TCTL' (at pp.c:12410)
        StructRef: type='.' (at pp.c:12410)
          StructRef: type='->' (at pp.c:12410)
            ID: name='config' (at pp.c:12410)
            ID: name='spiRegisters' (at pp.c:12410)
          ID: name='utctl' (at pp.c:12410)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__setUbr' (at pp.c:12412)
        ExprList:  (at pp.c:12412)
          StructRef: type='.' (at pp.c:12412)
            StructRef: type='->' (at pp.c:12412)
              ID: name='config' (at pp.c:12412)
              ID: name='spiRegisters' (at pp.c:12412)
            ID: name='ubr' (at pp.c:12412)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__setUmctl' (at pp.c:12413)
        ExprList:  (at pp.c:12413)
          Constant: type='int', value='0x00' (at pp.c:12413)
  FuncDef:  (at pp.c:12417)
    Decl: name='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:12417)
      FuncDecl: quals=None (at pp.c:12417)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[] (at pp.c:12417)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12419)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12422)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:12422)
        BinaryOp: op='<<' (at pp.c:12422)
          Constant: type='int', value='0x01' (at pp.c:12422)
          Constant: type='int', value='3' (at pp.c:12422)
  FuncDef:  (at pp.c:12426)
    Decl: name='HplMsp430Usart0P__UCLK__selectModuleFunc', quals=[], storage=['static', 'inline'] (at pp.c:12426)
      FuncDecl: quals=None (at pp.c:12426)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__UCLK__selectModuleFunc', quals=[] (at pp.c:12426)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12426)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__19__IO__selectModuleFunc' (at pp.c:12428)
  FuncDef:  (at pp.c:12433)
    Decl: name='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:12433)
      FuncDecl: quals=None (at pp.c:12433)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[] (at pp.c:12433)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12435)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12438)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:12438)
        BinaryOp: op='<<' (at pp.c:12438)
          Constant: type='int', value='0x01' (at pp.c:12438)
          Constant: type='int', value='2' (at pp.c:12438)
  FuncDef:  (at pp.c:12442)
    Decl: name='HplMsp430Usart0P__SOMI__selectModuleFunc', quals=[], storage=['static', 'inline'] (at pp.c:12442)
      FuncDecl: quals=None (at pp.c:12442)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__SOMI__selectModuleFunc', quals=[] (at pp.c:12442)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12442)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__18__IO__selectModuleFunc' (at pp.c:12444)
  FuncDef:  (at pp.c:12449)
    Decl: name='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:12449)
      FuncDecl: quals=None (at pp.c:12449)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[] (at pp.c:12449)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12451)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12454)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:12454)
        BinaryOp: op='<<' (at pp.c:12454)
          Constant: type='int', value='0x01' (at pp.c:12454)
          Constant: type='int', value='1' (at pp.c:12454)
  FuncDef:  (at pp.c:12458)
    Decl: name='HplMsp430Usart0P__SIMO__selectModuleFunc', quals=[], storage=['static', 'inline'] (at pp.c:12458)
      FuncDecl: quals=None (at pp.c:12458)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__SIMO__selectModuleFunc', quals=[] (at pp.c:12458)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12458)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__17__IO__selectModuleFunc' (at pp.c:12460)
  FuncDef:  (at pp.c:12465)
    Decl: name='HplMsp430Usart0P__Usart__enableSpi', quals=[], storage=['inline', 'static'] (at pp.c:12465)
      FuncDecl: quals=None (at pp.c:12465)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__enableSpi', quals=[] (at pp.c:12465)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12467)
      Compound:  (at pp.c:12470)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__SIMO__selectModuleFunc' (at pp.c:12471)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__SOMI__selectModuleFunc' (at pp.c:12472)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__UCLK__selectModuleFunc' (at pp.c:12473)
      Assignment: op='|=' (at pp.c:12475)
        ID: name='HplMsp430Usart0P__ME1' (at pp.c:12475)
        BinaryOp: op='<<' (at pp.c:12475)
          Constant: type='int', value='1' (at pp.c:12475)
          Constant: type='int', value='6' (at pp.c:12475)
  FuncDef:  (at pp.c:12479)
    Decl: name='HplMsp430Usart0P__Usart__clrIntr', quals=[], storage=['inline', 'static'] (at pp.c:12479)
      FuncDecl: quals=None (at pp.c:12479)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__clrIntr', quals=[] (at pp.c:12479)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12481)
      Assignment: op='&=' (at pp.c:12482)
        ID: name='HplMsp430Usart0P__IFG1' (at pp.c:12482)
        UnaryOp: op='~' (at pp.c:12482)
          BinaryOp: op='|' (at pp.c:12482)
            BinaryOp: op='<<' (at pp.c:12482)
              Constant: type='int', value='1' (at pp.c:12482)
              Constant: type='int', value='7' (at pp.c:12482)
            BinaryOp: op='<<' (at pp.c:12482)
              Constant: type='int', value='1' (at pp.c:12482)
              Constant: type='int', value='6' (at pp.c:12482)
  FuncDef:  (at pp.c:12493)
    Decl: name='HplMsp430Usart0P__Usart__disableIntr', quals=[], storage=['inline', 'static'] (at pp.c:12493)
      FuncDecl: quals=None (at pp.c:12493)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__disableIntr', quals=[] (at pp.c:12493)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12495)
      Assignment: op='&=' (at pp.c:12496)
        ID: name='HplMsp430Usart0P__IE1' (at pp.c:12496)
        UnaryOp: op='~' (at pp.c:12496)
          BinaryOp: op='|' (at pp.c:12496)
            BinaryOp: op='<<' (at pp.c:12496)
              Constant: type='int', value='1' (at pp.c:12496)
              Constant: type='int', value='7' (at pp.c:12496)
            BinaryOp: op='<<' (at pp.c:12496)
              Constant: type='int', value='1' (at pp.c:12496)
              Constant: type='int', value='6' (at pp.c:12496)
  FuncDef:  (at pp.c:12500)
    Decl: name='StateImplP__State__toIdle', quals=[], storage=['inline', 'static'] (at pp.c:12500)
      FuncDecl: quals=None (at pp.c:12500)
        ParamList:  (at pp.c:12500)
          Decl: name='id', quals=[], storage=[] (at pp.c:12500)
            TypeDecl: declname='id', quals=[] (at pp.c:12500)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__toIdle', quals=[] (at pp.c:12500)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12502)
      Compound:  (at pp.c:12503)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:12503)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:12503)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:12503)
        Assignment: op='=' (at pp.c:12505)
          ArrayRef:  (at pp.c:12505)
            ID: name='StateImplP__state' (at pp.c:12505)
            ID: name='id' (at pp.c:12505)
          ID: name='StateImplP__S_IDLE' (at pp.c:12505)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:12507)
          ExprList:  (at pp.c:12507)
            ID: name='__nesc_atomic' (at pp.c:12507)
  FuncDef:  (at pp.c:12511)
    Decl: name='CC2420SpiP__WorkingState__toIdle', quals=[], storage=['static', 'inline'] (at pp.c:12511)
      FuncDecl: quals=None (at pp.c:12511)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__WorkingState__toIdle', quals=[] (at pp.c:12511)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12511)
      FuncCall:  (at None)
        ID: name='StateImplP__State__toIdle' (at pp.c:12513)
        ExprList:  (at pp.c:12513)
          Constant: type='int', value='0U' (at pp.c:12513)
  FuncDef:  (at pp.c:12518)
    Decl: name='CC2420TransmitP__SpiResource__request', quals=[], storage=['static', 'inline'] (at pp.c:12518)
      FuncDecl: quals=None (at pp.c:12518)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SpiResource__request', quals=[] (at pp.c:12518)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12518)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12520)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12520)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12524)
        ID: name='__nesc_result' (at pp.c:12524)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__request' (at pp.c:12524)
          ExprList:  (at pp.c:12524)
            ID: name='CC2420SpiC__3__CLIENT_ID' (at pp.c:12524)
      Return:  (at pp.c:12528)
        ID: name='__nesc_result' (at pp.c:12528)
  FuncDef:  (at pp.c:12533)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[], storage=['inline', 'static'] (at pp.c:12533)
      FuncDecl: quals=None (at pp.c:12533)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[] (at pp.c:12533)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12535)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__release' (at pp.c:12536)
  FuncDef:  (at pp.c:12540)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__requested', quals=[], storage=['static', 'inline'] (at pp.c:12540)
      FuncDecl: quals=None (at pp.c:12540)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__requested', quals=[] (at pp.c:12540)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12540)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__default__requested' (at pp.c:12542)
  FuncDef:  (at pp.c:12547)
    Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[], storage=['inline', 'static'] (at pp.c:12547)
      FuncDecl: quals=None (at pp.c:12547)
        ParamList:  (at pp.c:12547)
          Decl: name='id', quals=[], storage=[] (at pp.c:12547)
            TypeDecl: declname='id', quals=[] (at pp.c:12547)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[] (at pp.c:12547)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12549)
      Compound:  (at pp.c:12552)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12553)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12553)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='||' (at pp.c:12555)
            BinaryOp: op='!=' (at pp.c:12555)
              ArrayRef:  (at pp.c:12555)
                ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:12555)
                ID: name='id' (at pp.c:12555)
              ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12555)
            BinaryOp: op='==' (at pp.c:12555)
              ID: name='FcfsResourceQueueC__2__qTail' (at pp.c:12555)
              ID: name='id' (at pp.c:12555)
        Return:  (at pp.c:12558)
          ID: name='__nesc_temp' (at pp.c:12558)
  FuncDef:  (at pp.c:12563)
    Decl: name='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:12563)
      FuncDecl: quals=None (at pp.c:12563)
        ParamList:  (at pp.c:12563)
          Decl: name='id', quals=[], storage=[] (at pp.c:12563)
            TypeDecl: declname='id', quals=[] (at pp.c:12563)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[] (at pp.c:12563)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12565)
      Compound:  (at pp.c:12568)
        If:  (at pp.c:12569)
          UnaryOp: op='!' (at None)
            FuncCall:  (at None)
              ID: name='FcfsResourceQueueC__2__FcfsQueue__isEnqueued' (at pp.c:12569)
              ExprList:  (at pp.c:12569)
                ID: name='id' (at pp.c:12569)
          Compound:  (at pp.c:12569)
            If:  (at pp.c:12570)
              BinaryOp: op='==' (at pp.c:12570)
                ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12570)
                ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12570)
              Compound:  (at pp.c:12570)
                Assignment: op='=' (at pp.c:12571)
                  ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12571)
                  ID: name='id' (at pp.c:12571)
              Compound:  (at pp.c:12573)
                Assignment: op='=' (at pp.c:12575)
                  ArrayRef:  (at pp.c:12575)
                    ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:12575)
                    ID: name='FcfsResourceQueueC__2__qTail' (at pp.c:12575)
                  ID: name='id' (at pp.c:12575)
            Assignment: op='=' (at pp.c:12578)
              ID: name='FcfsResourceQueueC__2__qTail' (at pp.c:12578)
              ID: name='id' (at pp.c:12578)
            Compound:  (at pp.c:12579)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12580)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12580)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='SUCCESS' (at pp.c:12582)
              Return:  (at pp.c:12585)
                ID: name='__nesc_temp' (at pp.c:12585)
        Compound:  (at pp.c:12589)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12590)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12590)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='EBUSY' (at pp.c:12592)
          Return:  (at pp.c:12595)
            ID: name='__nesc_temp' (at pp.c:12595)
  FuncDef:  (at pp.c:12601)
    Decl: name='ArbiterP__1__Queue__enqueue', quals=[], storage=['static', 'inline'] (at pp.c:12601)
      FuncDecl: quals=None (at pp.c:12601)
        ParamList:  (at pp.c:12601)
          Decl: name='id', quals=[], storage=[] (at pp.c:12601)
            TypeDecl: declname='id', quals=[] (at pp.c:12601)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Queue__enqueue', quals=[] (at pp.c:12601)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12601)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12603)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12603)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12607)
        ID: name='__nesc_result' (at pp.c:12607)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__2__FcfsQueue__enqueue' (at pp.c:12607)
          ExprList:  (at pp.c:12607)
            ID: name='id' (at pp.c:12607)
      Return:  (at pp.c:12611)
        ID: name='__nesc_result' (at pp.c:12611)
  FuncDef:  (at pp.c:12616)
    Decl: name='ArbiterP__1__ResourceRequested__default__requested', quals=[], storage=['inline', 'static'] (at pp.c:12616)
      FuncDecl: quals=None (at pp.c:12616)
        ParamList:  (at pp.c:12616)
          Decl: name='id', quals=[], storage=[] (at pp.c:12616)
            TypeDecl: declname='id', quals=[] (at pp.c:12616)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceRequested__default__requested', quals=[] (at pp.c:12616)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12618)
  FuncDef:  (at pp.c:12622)
    Decl: name='ArbiterP__1__ResourceRequested__requested', quals=[], storage=['static', 'inline'] (at pp.c:12622)
      FuncDecl: quals=None (at pp.c:12622)
        ParamList:  (at pp.c:12622)
          Decl: name='arg_0x101d807e8', quals=[], storage=[] (at pp.c:12622)
            TypeDecl: declname='arg_0x101d807e8', quals=[] (at pp.c:12622)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceRequested__requested', quals=[] (at pp.c:12622)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12622)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceRequested__default__requested' (at pp.c:12624)
        ExprList:  (at pp.c:12624)
          ID: name='arg_0x101d807e8' (at pp.c:12624)
  FuncDef:  (at pp.c:12629)
    Decl: name='ArbiterP__1__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:12629)
      FuncDecl: quals=None (at pp.c:12629)
        ParamList:  (at pp.c:12629)
          Decl: name='id', quals=[], storage=[] (at pp.c:12629)
            TypeDecl: declname='id', quals=[] (at pp.c:12629)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__request', quals=[] (at pp.c:12629)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12631)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceRequested__requested' (at pp.c:12632)
        ExprList:  (at pp.c:12632)
          ID: name='ArbiterP__1__resId' (at pp.c:12632)
      Compound:  (at pp.c:12635)
        If:  (at pp.c:12636)
          BinaryOp: op='==' (at pp.c:12636)
            ID: name='ArbiterP__1__state' (at pp.c:12636)
            ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:12636)
          Compound:  (at pp.c:12636)
            Assignment: op='=' (at pp.c:12637)
              ID: name='ArbiterP__1__state' (at pp.c:12637)
              ID: name='ArbiterP__1__RES_GRANTING' (at pp.c:12637)
            Assignment: op='=' (at pp.c:12638)
              ID: name='ArbiterP__1__reqResId' (at pp.c:12638)
              ID: name='id' (at pp.c:12638)
          Compound:  (at pp.c:12640)
            If:  (at pp.c:12642)
              BinaryOp: op='==' (at pp.c:12642)
                ID: name='ArbiterP__1__reqResId' (at pp.c:12642)
                ID: name='id' (at pp.c:12642)
              Compound:  (at pp.c:12642)
                Compound:  (at pp.c:12643)
                  Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12644)
                    TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12644)
                      IdentifierType: names=['char', 'unsigned'] (at None)
                    ID: name='SUCCESS' (at pp.c:12646)
                  Return:  (at pp.c:12649)
                    ID: name='__nesc_temp' (at pp.c:12649)
              Compound:  (at pp.c:12654)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12655)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12655)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__1__Queue__enqueue' (at pp.c:12657)
                    ExprList:  (at pp.c:12657)
                      ID: name='id' (at pp.c:12657)
                Return:  (at pp.c:12660)
                  ID: name='__nesc_temp' (at pp.c:12660)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__requested' (at pp.c:12665)
      Return:  (at pp.c:12666)
        ID: name='SUCCESS' (at pp.c:12666)
  FuncDef:  (at pp.c:12670)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[], storage=['inline', 'static'] (at pp.c:12670)
      FuncDecl: quals=None (at pp.c:12670)
        ParamList:  (at pp.c:12670)
          Decl: name='id', quals=[], storage=[] (at pp.c:12670)
            TypeDecl: declname='id', quals=[] (at pp.c:12670)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[] (at pp.c:12670)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12672)
      Return:  (at pp.c:12674)
        ID: name='FAIL' (at pp.c:12674)
  FuncDef:  (at pp.c:12678)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__request', quals=[], storage=['static', 'inline'] (at pp.c:12678)
      FuncDecl: quals=None (at pp.c:12678)
        ParamList:  (at pp.c:12678)
          Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:12678)
            TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:12678)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__request', quals=[] (at pp.c:12678)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12678)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12680)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12680)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:12684)
        ID: name='arg_0x1022fa0c8' (at pp.c:12684)
        Compound:  (at pp.c:12684)
          Case:  (at pp.c:12686)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:12686)
            Assignment: op='=' (at pp.c:12688)
              ID: name='__nesc_result' (at pp.c:12688)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__request' (at pp.c:12688)
                ExprList:  (at pp.c:12688)
                  ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:12688)
          Break:  (at pp.c:12690)
          Default:  (at pp.c:12692)
            Assignment: op='=' (at pp.c:12694)
              ID: name='__nesc_result' (at pp.c:12694)
              FuncCall:  (at None)
                ID: name='Msp430SpiNoDmaP__0__UsartResource__default__request' (at pp.c:12694)
                ExprList:  (at pp.c:12694)
                  ID: name='arg_0x1022fa0c8' (at pp.c:12694)
          Break:  (at pp.c:12696)
      Return:  (at pp.c:12702)
        ID: name='__nesc_result' (at pp.c:12702)
  FuncDef:  (at pp.c:12707)
    Decl: name='Msp430SpiNoDmaP__0__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:12707)
      FuncDecl: quals=None (at pp.c:12707)
        ParamList:  (at pp.c:12707)
          Decl: name='id', quals=[], storage=[] (at pp.c:12707)
            TypeDecl: declname='id', quals=[] (at pp.c:12707)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__request', quals=[] (at pp.c:12707)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12709)
      Return:  (at pp.c:12710)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__UsartResource__request' (at pp.c:12710)
          ExprList:  (at pp.c:12710)
            ID: name='id' (at pp.c:12710)
  FuncDef:  (at pp.c:12714)
    Decl: name='CC2420SpiP__SpiResource__request', quals=[], storage=['static', 'inline'] (at pp.c:12714)
      FuncDecl: quals=None (at pp.c:12714)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiResource__request', quals=[] (at pp.c:12714)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12714)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12716)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12716)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12720)
        ID: name='__nesc_result' (at pp.c:12720)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Resource__request' (at pp.c:12720)
          ExprList:  (at pp.c:12720)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:12720)
      Return:  (at pp.c:12724)
        ID: name='__nesc_result' (at pp.c:12724)
  FuncDef:  (at pp.c:12729)
    Decl: name='HplMsp430Usart0P__Usart__tx', quals=[], storage=['inline', 'static'] (at pp.c:12729)
      FuncDecl: quals=None (at pp.c:12729)
        ParamList:  (at pp.c:12729)
          Decl: name='data', quals=[], storage=[] (at pp.c:12729)
            TypeDecl: declname='data', quals=[] (at pp.c:12729)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__tx', quals=[] (at pp.c:12729)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12731)
      Assignment: op='=' (at pp.c:12732)
        ID: name='HplMsp430Usart0P__U0TXBUF' (at pp.c:12732)
        ID: name='data' (at pp.c:12732)
  FuncDef:  (at pp.c:12736)
    Decl: name='Msp430SpiNoDmaP__0__Usart__tx', quals=[], storage=['static', 'inline'] (at pp.c:12736)
      FuncDecl: quals=None (at pp.c:12736)
        ParamList:  (at pp.c:12736)
          Decl: name='data', quals=[], storage=[] (at pp.c:12736)
            TypeDecl: declname='data', quals=[] (at pp.c:12736)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__tx', quals=[] (at pp.c:12736)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12736)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__tx' (at pp.c:12738)
        ExprList:  (at pp.c:12738)
          ID: name='data' (at pp.c:12738)
  FuncDef:  (at pp.c:12743)
    Decl: name='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[], storage=['inline', 'static'] (at pp.c:12743)
      FuncDecl: quals=None (at pp.c:12743)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[] (at pp.c:12743)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12745)
      If:  (at pp.c:12746)
        BinaryOp: op='&' (at pp.c:12746)
          ID: name='HplMsp430Usart0P__IFG1' (at pp.c:12746)
          BinaryOp: op='<<' (at pp.c:12746)
            Constant: type='int', value='1' (at pp.c:12746)
            Constant: type='int', value='6' (at pp.c:12746)
        Compound:  (at pp.c:12746)
          Return:  (at pp.c:12747)
            ID: name='TRUE' (at pp.c:12747)
      Return:  (at pp.c:12749)
        ID: name='FALSE' (at pp.c:12749)
  FuncDef:  (at pp.c:12753)
    Decl: name='Msp430SpiNoDmaP__0__Usart__isRxIntrPending', quals=[], storage=['static', 'inline'] (at pp.c:12753)
      FuncDecl: quals=None (at pp.c:12753)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__isRxIntrPending', quals=[] (at pp.c:12753)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12753)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12755)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12755)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12759)
        ID: name='__nesc_result' (at pp.c:12759)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__Usart__isRxIntrPending' (at pp.c:12759)
      Return:  (at pp.c:12763)
        ID: name='__nesc_result' (at pp.c:12763)
  FuncDef:  (at pp.c:12768)
    Decl: name='HplMsp430Usart0P__Usart__clrRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:12768)
      FuncDecl: quals=None (at pp.c:12768)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__clrRxIntr', quals=[] (at pp.c:12768)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12770)
      Assignment: op='&=' (at pp.c:12771)
        ID: name='HplMsp430Usart0P__IFG1' (at pp.c:12771)
        UnaryOp: op='~' (at pp.c:12771)
          BinaryOp: op='<<' (at pp.c:12771)
            Constant: type='int', value='1' (at pp.c:12771)
            Constant: type='int', value='6' (at pp.c:12771)
  FuncDef:  (at pp.c:12775)
    Decl: name='Msp430SpiNoDmaP__0__Usart__clrRxIntr', quals=[], storage=['static', 'inline'] (at pp.c:12775)
      FuncDecl: quals=None (at pp.c:12775)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__clrRxIntr', quals=[] (at pp.c:12775)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12775)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__clrRxIntr' (at pp.c:12777)
  FuncDef:  (at pp.c:12782)
    Decl: name='HplMsp430Usart0P__Usart__rx', quals=[], storage=['inline', 'static'] (at pp.c:12782)
      FuncDecl: quals=None (at pp.c:12782)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__rx', quals=[] (at pp.c:12782)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:12784)
      Return:  (at pp.c:12785)
        ID: name='U0RXBUF' (at pp.c:12785)
  FuncDef:  (at pp.c:12789)
    Decl: name='Msp430SpiNoDmaP__0__Usart__rx', quals=[], storage=['static', 'inline'] (at pp.c:12789)
      FuncDecl: quals=None (at pp.c:12789)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__rx', quals=[] (at pp.c:12789)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:12789)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12791)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12791)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12795)
        ID: name='__nesc_result' (at pp.c:12795)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__Usart__rx' (at pp.c:12795)
      Return:  (at pp.c:12799)
        ID: name='__nesc_result' (at pp.c:12799)
  FuncDef:  (at pp.c:12804)
    Decl: name='CC2420SpiP__ChipSpiResource__abortRelease', quals=[], storage=['inline', 'static'] (at pp.c:12804)
      FuncDecl: quals=None (at pp.c:12804)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__ChipSpiResource__abortRelease', quals=[] (at pp.c:12804)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12806)
      Assignment: op='=' (at pp.c:12809)
        ID: name='CC2420SpiP__release' (at pp.c:12809)
        ID: name='FALSE' (at pp.c:12809)
  FuncDef:  (at pp.c:12813)
    Decl: name='CC2420TransmitP__ChipSpiResource__abortRelease', quals=[], storage=['static', 'inline'] (at pp.c:12813)
      FuncDecl: quals=None (at pp.c:12813)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__ChipSpiResource__abortRelease', quals=[] (at pp.c:12813)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12813)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__ChipSpiResource__abortRelease' (at pp.c:12815)
  FuncDef:  (at pp.c:12820)
    Decl: name='CC2420TransmitP__ChipSpiResource__releasing', quals=[], storage=['inline', 'static'] (at pp.c:12820)
      FuncDecl: quals=None (at pp.c:12820)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__ChipSpiResource__releasing', quals=[] (at pp.c:12820)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12822)
      If:  (at pp.c:12823)
        ID: name='CC2420TransmitP__abortSpiRelease' (at pp.c:12823)
        Compound:  (at pp.c:12823)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__ChipSpiResource__abortRelease' (at pp.c:12824)
  FuncDef:  (at pp.c:12829)
    Decl: name='CC2420SpiP__ChipSpiResource__releasing', quals=[], storage=['static', 'inline'] (at pp.c:12829)
      FuncDecl: quals=None (at pp.c:12829)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__ChipSpiResource__releasing', quals=[] (at pp.c:12829)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12829)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__ChipSpiResource__releasing' (at pp.c:12831)
  FuncDef:  (at pp.c:12836)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:12836)
      FuncDecl: quals=None (at pp.c:12836)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[] (at pp.c:12836)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12838)
  FuncDef:  (at pp.c:12842)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__granted', quals=[], storage=['static', 'inline'] (at pp.c:12842)
      FuncDecl: quals=None (at pp.c:12842)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__granted', quals=[] (at pp.c:12842)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12842)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__default__granted' (at pp.c:12844)
  FuncDef:  (at pp.c:12849)
    Decl: name='Msp430SpiNoDmaP__0__Usart__resetUsart', quals=[], storage=['static', 'inline'] (at pp.c:12849)
      FuncDecl: quals=None (at pp.c:12849)
        ParamList:  (at pp.c:12849)
          Decl: name='reset', quals=[], storage=[] (at pp.c:12849)
            TypeDecl: declname='reset', quals=[] (at pp.c:12849)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__resetUsart', quals=[] (at pp.c:12849)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12849)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__resetUsart' (at pp.c:12851)
        ExprList:  (at pp.c:12851)
          ID: name='reset' (at pp.c:12851)
  FuncDef:  (at pp.c:12856)
    Decl: name='Msp430SpiNoDmaP__0__Usart__disableSpi', quals=[], storage=['static', 'inline'] (at pp.c:12856)
      FuncDecl: quals=None (at pp.c:12856)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__disableSpi', quals=[] (at pp.c:12856)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12856)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__disableSpi' (at pp.c:12858)
  FuncDef:  (at pp.c:12863)
    Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:12863)
      FuncDecl: quals=None (at pp.c:12863)
        ParamList:  (at pp.c:12863)
          Decl: name='id', quals=[], storage=[] (at pp.c:12863)
            TypeDecl: declname='id', quals=[] (at pp.c:12863)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:12863)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12865)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__resetUsart' (at pp.c:12866)
        ExprList:  (at pp.c:12866)
          ID: name='TRUE' (at pp.c:12866)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__disableSpi' (at pp.c:12867)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__resetUsart' (at pp.c:12868)
        ExprList:  (at pp.c:12868)
          ID: name='FALSE' (at pp.c:12868)
  FuncDef:  (at pp.c:12872)
    Decl: name='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:12872)
      FuncDecl: quals=None (at pp.c:12872)
        ParamList:  (at pp.c:12872)
          Decl: name='id', quals=[], storage=[] (at pp.c:12872)
            TypeDecl: declname='id', quals=[] (at pp.c:12872)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:12872)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12874)
  FuncDef:  (at pp.c:12878)
    Decl: name='ArbiterP__1__ResourceConfigure__unconfigure', quals=[], storage=['static', 'inline'] (at pp.c:12878)
      FuncDecl: quals=None (at pp.c:12878)
        ParamList:  (at pp.c:12878)
          Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:12878)
            TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:12878)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceConfigure__unconfigure', quals=[] (at pp.c:12878)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12878)
      Switch:  (at pp.c:12880)
        ID: name='arg_0x101d7d9b8' (at pp.c:12880)
        Compound:  (at pp.c:12880)
          Case:  (at pp.c:12882)
            ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:12882)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure' (at pp.c:12884)
              ExprList:  (at pp.c:12884)
                ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:12884)
          Break:  (at pp.c:12886)
          Default:  (at pp.c:12888)
            FuncCall:  (at None)
              ID: name='ArbiterP__1__ResourceConfigure__default__unconfigure' (at pp.c:12890)
              ExprList:  (at pp.c:12890)
                ID: name='arg_0x101d7d9b8' (at pp.c:12890)
          Break:  (at pp.c:12892)
  FuncDef:  (at pp.c:12899)
    Decl: name='ArbiterP__1__grantedTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:12899)
      FuncDecl: quals=None (at pp.c:12899)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__grantedTask__postTask', quals=[] (at pp.c:12899)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12899)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12901)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12901)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12905)
        ID: name='__nesc_result' (at pp.c:12905)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:12905)
          ExprList:  (at pp.c:12905)
            ID: name='ArbiterP__1__grantedTask' (at pp.c:12905)
      Return:  (at pp.c:12909)
        ID: name='__nesc_result' (at pp.c:12909)
  FuncDef:  (at pp.c:12914)
    Decl: name='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:12914)
      FuncDecl: quals=None (at pp.c:12914)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[] (at pp.c:12914)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:12916)
      Compound:  (at pp.c:12919)
        If:  (at pp.c:12920)
          BinaryOp: op='!=' (at pp.c:12920)
            ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12920)
            ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12920)
          Compound:  (at pp.c:12920)
            Decl: name='id', quals=[], storage=[] (at pp.c:12921)
              TypeDecl: declname='id', quals=[] (at pp.c:12921)
                IdentifierType: names=['uint8_t'] (at None)
              ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12921)
            Assignment: op='=' (at pp.c:12924)
              ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12924)
              ArrayRef:  (at pp.c:12924)
                ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:12924)
                ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12924)
            If:  (at pp.c:12925)
              BinaryOp: op='==' (at pp.c:12925)
                ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12925)
                ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12925)
              Compound:  (at pp.c:12925)
                Assignment: op='=' (at pp.c:12926)
                  ID: name='FcfsResourceQueueC__2__qTail' (at pp.c:12926)
                  ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12926)
            Assignment: op='=' (at pp.c:12929)
              ArrayRef:  (at pp.c:12929)
                ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:12929)
                ID: name='id' (at pp.c:12929)
              ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12929)
            Compound:  (at pp.c:12930)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12931)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12931)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='id' (at pp.c:12933)
              Return:  (at pp.c:12936)
                ID: name='__nesc_temp' (at pp.c:12936)
        Compound:  (at pp.c:12940)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12941)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12941)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12943)
          Return:  (at pp.c:12946)
            ID: name='__nesc_temp' (at pp.c:12946)
  FuncDef:  (at pp.c:12952)
    Decl: name='ArbiterP__1__Queue__dequeue', quals=[], storage=['static', 'inline'] (at pp.c:12952)
      FuncDecl: quals=None (at pp.c:12952)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__Queue__dequeue', quals=[] (at pp.c:12952)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:12952)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12954)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12954)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12958)
        ID: name='__nesc_result' (at pp.c:12958)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__2__FcfsQueue__dequeue' (at pp.c:12958)
      Return:  (at pp.c:12962)
        ID: name='__nesc_result' (at pp.c:12962)
  FuncDef:  (at pp.c:12967)
    Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[], storage=['inline', 'static'] (at pp.c:12967)
      FuncDecl: quals=None (at pp.c:12967)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[] (at pp.c:12967)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12969)
      Compound:  (at pp.c:12972)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12973)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12973)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='==' (at pp.c:12975)
            ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12975)
            ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12975)
        Return:  (at pp.c:12978)
          ID: name='__nesc_temp' (at pp.c:12978)
  FuncDef:  (at pp.c:12983)
    Decl: name='ArbiterP__1__Queue__isEmpty', quals=[], storage=['static', 'inline'] (at pp.c:12983)
      FuncDecl: quals=None (at pp.c:12983)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__Queue__isEmpty', quals=[] (at pp.c:12983)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12983)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12985)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12985)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12989)
        ID: name='__nesc_result' (at pp.c:12989)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__2__FcfsQueue__isEmpty' (at pp.c:12989)
      Return:  (at pp.c:12993)
        ID: name='__nesc_result' (at pp.c:12993)
  FuncDef:  (at pp.c:12998)
    Decl: name='ArbiterP__1__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:12998)
      FuncDecl: quals=None (at pp.c:12998)
        ParamList:  (at pp.c:12998)
          Decl: name='id', quals=[], storage=[] (at pp.c:12998)
            TypeDecl: declname='id', quals=[] (at pp.c:12998)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__release', quals=[] (at pp.c:12998)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13000)
      Compound:  (at pp.c:13003)
        If:  (at pp.c:13004)
          BinaryOp: op='&&' (at pp.c:13004)
            BinaryOp: op='==' (at pp.c:13004)
              ID: name='ArbiterP__1__state' (at pp.c:13004)
              ID: name='ArbiterP__1__RES_BUSY' (at pp.c:13004)
            BinaryOp: op='==' (at pp.c:13004)
              ID: name='ArbiterP__1__resId' (at pp.c:13004)
              ID: name='id' (at pp.c:13004)
          Compound:  (at pp.c:13004)
            If:  (at pp.c:13005)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='ArbiterP__1__Queue__isEmpty' (at pp.c:13005)
                ID: name='FALSE' (at pp.c:13005)
              Compound:  (at pp.c:13005)
                Assignment: op='=' (at pp.c:13006)
                  ID: name='ArbiterP__1__reqResId' (at pp.c:13006)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__1__Queue__dequeue' (at pp.c:13006)
                Assignment: op='=' (at pp.c:13007)
                  ID: name='ArbiterP__1__resId' (at pp.c:13007)
                  ID: name='ArbiterP__1__NO_RES' (at pp.c:13007)
                Assignment: op='=' (at pp.c:13008)
                  ID: name='ArbiterP__1__state' (at pp.c:13008)
                  ID: name='ArbiterP__1__RES_GRANTING' (at pp.c:13008)
                FuncCall:  (at None)
                  ID: name='ArbiterP__1__grantedTask__postTask' (at pp.c:13009)
                FuncCall:  (at None)
                  ID: name='ArbiterP__1__ResourceConfigure__unconfigure' (at pp.c:13010)
                  ExprList:  (at pp.c:13010)
                    ID: name='id' (at pp.c:13010)
              Compound:  (at pp.c:13012)
                Assignment: op='=' (at pp.c:13013)
                  ID: name='ArbiterP__1__resId' (at pp.c:13013)
                  ID: name='ArbiterP__1__default_owner_id' (at pp.c:13013)
                Assignment: op='=' (at pp.c:13014)
                  ID: name='ArbiterP__1__state' (at pp.c:13014)
                  ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:13014)
                FuncCall:  (at None)
                  ID: name='ArbiterP__1__ResourceConfigure__unconfigure' (at pp.c:13015)
                  ExprList:  (at pp.c:13015)
                    ID: name='id' (at pp.c:13015)
                FuncCall:  (at None)
                  ID: name='ArbiterP__1__ResourceDefaultOwner__granted' (at pp.c:13016)
            Compound:  (at pp.c:13018)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:13019)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:13019)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='SUCCESS' (at pp.c:13021)
              Return:  (at pp.c:13024)
                ID: name='__nesc_temp' (at pp.c:13024)
      Return:  (at pp.c:13029)
        ID: name='FAIL' (at pp.c:13029)
  FuncDef:  (at pp.c:13033)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[], storage=['inline', 'static'] (at pp.c:13033)
      FuncDecl: quals=None (at pp.c:13033)
        ParamList:  (at pp.c:13033)
          Decl: name='id', quals=[], storage=[] (at pp.c:13033)
            TypeDecl: declname='id', quals=[] (at pp.c:13033)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[] (at pp.c:13033)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13035)
      Return:  (at pp.c:13037)
        ID: name='FAIL' (at pp.c:13037)
  FuncDef:  (at pp.c:13041)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__release', quals=[], storage=['static', 'inline'] (at pp.c:13041)
      FuncDecl: quals=None (at pp.c:13041)
        ParamList:  (at pp.c:13041)
          Decl: name='arg_0x1022fa0c8', quals=[], storage=[] (at pp.c:13041)
            TypeDecl: declname='arg_0x1022fa0c8', quals=[] (at pp.c:13041)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__release', quals=[] (at pp.c:13041)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13041)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13043)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13043)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:13047)
        ID: name='arg_0x1022fa0c8' (at pp.c:13047)
        Compound:  (at pp.c:13047)
          Case:  (at pp.c:13049)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:13049)
            Assignment: op='=' (at pp.c:13051)
              ID: name='__nesc_result' (at pp.c:13051)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__release' (at pp.c:13051)
                ExprList:  (at pp.c:13051)
                  ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:13051)
          Break:  (at pp.c:13053)
          Default:  (at pp.c:13055)
            Assignment: op='=' (at pp.c:13057)
              ID: name='__nesc_result' (at pp.c:13057)
              FuncCall:  (at None)
                ID: name='Msp430SpiNoDmaP__0__UsartResource__default__release' (at pp.c:13057)
                ExprList:  (at pp.c:13057)
                  ID: name='arg_0x1022fa0c8' (at pp.c:13057)
          Break:  (at pp.c:13059)
      Return:  (at pp.c:13065)
        ID: name='__nesc_result' (at pp.c:13065)
  FuncDef:  (at pp.c:13070)
    Decl: name='Msp430SpiNoDmaP__0__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:13070)
      FuncDecl: quals=None (at pp.c:13070)
        ParamList:  (at pp.c:13070)
          Decl: name='id', quals=[], storage=[] (at pp.c:13070)
            TypeDecl: declname='id', quals=[] (at pp.c:13070)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__release', quals=[] (at pp.c:13070)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13072)
      Return:  (at pp.c:13073)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__UsartResource__release' (at pp.c:13073)
          ExprList:  (at pp.c:13073)
            ID: name='id' (at pp.c:13073)
  FuncDef:  (at pp.c:13077)
    Decl: name='CC2420SpiP__SpiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:13077)
      FuncDecl: quals=None (at pp.c:13077)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiResource__release', quals=[] (at pp.c:13077)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13077)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13079)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13079)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13083)
        ID: name='__nesc_result' (at pp.c:13083)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Resource__release' (at pp.c:13083)
          ExprList:  (at pp.c:13083)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:13083)
      Return:  (at pp.c:13087)
        ID: name='__nesc_result' (at pp.c:13087)
  FuncDef:  (at pp.c:13092)
    Decl: name='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:13092)
      FuncDecl: quals=None (at pp.c:13092)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[] (at pp.c:13092)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13094)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13097)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:13097)
        UnaryOp: op='~' (at pp.c:13097)
          BinaryOp: op='<<' (at pp.c:13097)
            Constant: type='int', value='0x01' (at pp.c:13097)
            Constant: type='int', value='1' (at pp.c:13097)
  FuncDef:  (at pp.c:13101)
    Decl: name='HplMsp430Usart0P__SIMO__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:13101)
      FuncDecl: quals=None (at pp.c:13101)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__SIMO__selectIOFunc', quals=[] (at pp.c:13101)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13101)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__17__IO__selectIOFunc' (at pp.c:13103)
  FuncDef:  (at pp.c:13108)
    Decl: name='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:13108)
      FuncDecl: quals=None (at pp.c:13108)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[] (at pp.c:13108)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13110)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13113)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:13113)
        UnaryOp: op='~' (at pp.c:13113)
          BinaryOp: op='<<' (at pp.c:13113)
            Constant: type='int', value='0x01' (at pp.c:13113)
            Constant: type='int', value='2' (at pp.c:13113)
  FuncDef:  (at pp.c:13117)
    Decl: name='HplMsp430Usart0P__SOMI__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:13117)
      FuncDecl: quals=None (at pp.c:13117)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__SOMI__selectIOFunc', quals=[] (at pp.c:13117)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13117)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__18__IO__selectIOFunc' (at pp.c:13119)
  FuncDef:  (at pp.c:13124)
    Decl: name='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:13124)
      FuncDecl: quals=None (at pp.c:13124)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[] (at pp.c:13124)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13126)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13129)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:13129)
        UnaryOp: op='~' (at pp.c:13129)
          BinaryOp: op='<<' (at pp.c:13129)
            Constant: type='int', value='0x01' (at pp.c:13129)
            Constant: type='int', value='3' (at pp.c:13129)
  FuncDef:  (at pp.c:13133)
    Decl: name='HplMsp430Usart0P__UCLK__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:13133)
      FuncDecl: quals=None (at pp.c:13133)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__UCLK__selectIOFunc', quals=[] (at pp.c:13133)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13133)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__19__IO__selectIOFunc' (at pp.c:13135)
  FuncDef:  (at pp.c:13140)
    Decl: name='CC2420TransmitP__STXONCCA__strobe', quals=[], storage=['static', 'inline'] (at pp.c:13140)
      FuncDecl: quals=None (at pp.c:13140)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__STXONCCA__strobe', quals=[] (at pp.c:13140)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:13140)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13142)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13142)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13146)
        ID: name='__nesc_result' (at pp.c:13146)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:13146)
          ExprList:  (at pp.c:13146)
            ID: name='CC2420_STXONCCA' (at pp.c:13146)
      Return:  (at pp.c:13150)
        ID: name='__nesc_result' (at pp.c:13150)
  FuncDef:  (at pp.c:13154)
    Decl: name='CC2420TransmitP__STXON__strobe', quals=[], storage=['static', 'inline'] (at pp.c:13154)
      FuncDecl: quals=None (at pp.c:13154)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__STXON__strobe', quals=[] (at pp.c:13154)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:13154)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13156)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13156)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13160)
        ID: name='__nesc_result' (at pp.c:13160)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:13160)
          ExprList:  (at pp.c:13160)
            ID: name='CC2420_STXON' (at pp.c:13160)
      Return:  (at pp.c:13164)
        ID: name='__nesc_result' (at pp.c:13164)
  FuncDef:  (at pp.c:13168)
    Decl: name='CC2420TransmitP__SNOP__strobe', quals=[], storage=['static', 'inline'] (at pp.c:13168)
      FuncDecl: quals=None (at pp.c:13168)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SNOP__strobe', quals=[] (at pp.c:13168)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:13168)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13170)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13170)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13174)
        ID: name='__nesc_result' (at pp.c:13174)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:13174)
          ExprList:  (at pp.c:13174)
            ID: name='CC2420_SNOP' (at pp.c:13174)
      Return:  (at pp.c:13178)
        ID: name='__nesc_result' (at pp.c:13178)
  FuncDef:  (at pp.c:13183)
    Decl: name='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[], storage=['inline', 'static'] (at pp.c:13183)
      FuncDecl: quals=None (at pp.c:13183)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[] (at pp.c:13183)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13185)
      Return:  (at pp.c:13186)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__attemptRelease' (at pp.c:13186)
  FuncDef:  (at pp.c:13190)
    Decl: name='CC2420TransmitP__ChipSpiResource__attemptRelease', quals=[], storage=['static', 'inline'] (at pp.c:13190)
      FuncDecl: quals=None (at pp.c:13190)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__ChipSpiResource__attemptRelease', quals=[] (at pp.c:13190)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13190)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13192)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13192)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13196)
        ID: name='__nesc_result' (at pp.c:13196)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__ChipSpiResource__attemptRelease' (at pp.c:13196)
      Return:  (at pp.c:13200)
        ID: name='__nesc_result' (at pp.c:13200)
  FuncDef:  (at pp.c:13205)
    Decl: name='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:13205)
      FuncDecl: quals=None (at pp.c:13205)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[] (at pp.c:13205)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13207)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13210)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='31U' (at pp.c:13210)
        BinaryOp: op='<<' (at pp.c:13210)
          Constant: type='int', value='0x01' (at pp.c:13210)
          Constant: type='int', value='1' (at pp.c:13210)
  FuncDef:  (at pp.c:13214)
    Decl: name='GpioCaptureC__0__GeneralIO__selectModuleFunc', quals=[], storage=['static', 'inline'] (at pp.c:13214)
      FuncDecl: quals=None (at pp.c:13214)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__GeneralIO__selectModuleFunc', quals=[] (at pp.c:13214)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13214)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__25__IO__selectModuleFunc' (at pp.c:13216)
  FuncDef:  (at pp.c:13221)
    Decl: name='Msp430TimerCapComP__4__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:13221)
      FuncDecl: quals=None (at pp.c:13221)
        ParamList:  (at pp.c:13221)
          Decl: name='x', quals=[], storage=[] (at pp.c:13221)
            TypeDecl: declname='x', quals=[] (at pp.c:13221)
              IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__CC2int', quals=[] (at pp.c:13221)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13223)
      Decl: name='c', quals=[], storage=[] (at pp.c:13232)
        TypeDecl: declname='c', quals=[] (at pp.c:13232)
          Union: name='Msp430TimerCapComP__4____nesc_unnamed4406', packed=False (at pp.c:13225)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:13227)
                IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:13229)
                IdentifierType: names=['uint16_t'] (at None)
        ExprList:  (at pp.c:13232)
          Assignment: op='=' (at pp.c:13232)
            StructRef: type='.' (at pp.c:13232)
              ID: name='f' (at pp.c:13232)
            ID: name='x' (at pp.c:13232)
      Return:  (at pp.c:13235)
        StructRef: type='.' (at pp.c:13235)
          ID: name='c' (at pp.c:13235)
          ID: name='t' (at pp.c:13235)
  FuncDef:  (at pp.c:13239)
    Decl: name='Msp430TimerCapComP__4__captureControl', quals=[], storage=['inline', 'static'] (at pp.c:13239)
      FuncDecl: quals=None (at pp.c:13239)
        ParamList:  (at pp.c:13239)
          Decl: name='l_cm', quals=[], storage=[] (at pp.c:13239)
            TypeDecl: declname='l_cm', quals=[] (at pp.c:13239)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__captureControl', quals=[] (at pp.c:13239)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13240)
      Decl: name='x', quals=[], storage=[] (at pp.c:13241)
        TypeDecl: declname='x', quals=[] (at pp.c:13241)
          IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
        ExprList:  (at pp.c:13242)
          Assignment: op='=' (at pp.c:13242)
            StructRef: type='.' (at pp.c:13242)
              ID: name='cm' (at pp.c:13242)
            BinaryOp: op='&' (at pp.c:13242)
              ID: name='l_cm' (at pp.c:13242)
              Constant: type='int', value='0x03' (at pp.c:13242)
          Assignment: op='=' (at pp.c:13243)
            StructRef: type='.' (at pp.c:13243)
              ID: name='ccis' (at pp.c:13243)
            Constant: type='int', value='0' (at pp.c:13243)
          Assignment: op='=' (at pp.c:13244)
            StructRef: type='.' (at pp.c:13244)
              ID: name='clld' (at pp.c:13244)
            Constant: type='int', value='0' (at pp.c:13244)
          Assignment: op='=' (at pp.c:13245)
            StructRef: type='.' (at pp.c:13245)
              ID: name='cap' (at pp.c:13245)
            Constant: type='int', value='1' (at pp.c:13245)
          Assignment: op='=' (at pp.c:13246)
            StructRef: type='.' (at pp.c:13246)
              ID: name='scs' (at pp.c:13246)
            Constant: type='int', value='0' (at pp.c:13246)
          Assignment: op='=' (at pp.c:13247)
            StructRef: type='.' (at pp.c:13247)
              ID: name='ccie' (at pp.c:13247)
            Constant: type='int', value='0' (at pp.c:13247)
      Return:  (at pp.c:13249)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__4__CC2int' (at pp.c:13249)
          ExprList:  (at pp.c:13249)
            ID: name='x' (at pp.c:13249)
  FuncDef:  (at pp.c:13253)
    Decl: name='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[], storage=['inline', 'static'] (at pp.c:13253)
      FuncDecl: quals=None (at pp.c:13253)
        ParamList:  (at pp.c:13253)
          Decl: name='cm', quals=[], storage=[] (at pp.c:13253)
            TypeDecl: declname='cm', quals=[] (at pp.c:13253)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[] (at pp.c:13253)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13254)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13255)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='388U' (at pp.c:13255)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__4__captureControl' (at pp.c:13255)
          ExprList:  (at pp.c:13255)
            ID: name='cm' (at pp.c:13255)
  FuncDef:  (at pp.c:13259)
    Decl: name='GpioCaptureC__0__Msp430TimerControl__setControlAsCapture', quals=[], storage=['static', 'inline'] (at pp.c:13259)
      FuncDecl: quals=None (at pp.c:13259)
        ParamList:  (at pp.c:13259)
          Decl: name='cm', quals=[], storage=[] (at pp.c:13259)
            TypeDecl: declname='cm', quals=[] (at pp.c:13259)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__setControlAsCapture', quals=[] (at pp.c:13259)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13259)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Control__setControlAsCapture' (at pp.c:13261)
        ExprList:  (at pp.c:13261)
          ID: name='cm' (at pp.c:13261)
  FuncDef:  (at pp.c:13266)
    Decl: name='Msp430TimerCapComP__4__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:13266)
      FuncDecl: quals=None (at pp.c:13266)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Control__enableEvents', quals=[] (at pp.c:13266)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13267)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13268)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='388U' (at pp.c:13268)
        Constant: type='int', value='0x0010' (at pp.c:13268)
  FuncDef:  (at pp.c:13272)
    Decl: name='GpioCaptureC__0__Msp430TimerControl__enableEvents', quals=[], storage=['static', 'inline'] (at pp.c:13272)
      FuncDecl: quals=None (at pp.c:13272)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__enableEvents', quals=[] (at pp.c:13272)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13272)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Control__enableEvents' (at pp.c:13274)
  FuncDef:  (at pp.c:13279)
    Decl: name='Msp430TimerCapComP__4__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:13279)
      FuncDecl: quals=None (at pp.c:13279)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Compare__default__fired', quals=[] (at pp.c:13279)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13280)
  FuncDef:  (at pp.c:13284)
    Decl: name='Msp430TimerCapComP__4__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:13284)
      FuncDecl: quals=None (at pp.c:13284)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Compare__fired', quals=[] (at pp.c:13284)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13284)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Compare__default__fired' (at pp.c:13286)
  FuncDef:  (at pp.c:13291)
    Decl: name='Msp430TimerCapComP__4__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:13291)
      FuncDecl: quals=None (at pp.c:13291)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Capture__getEvent', quals=[] (at pp.c:13291)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13292)
      Return:  (at pp.c:13293)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13293)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='404U' (at pp.c:13293)
  FuncDef:  (at pp.c:13297)
    Decl: name='__nesc_ntoh_leuint16', quals=[], storage=['__inline', 'static'] (at pp.c:13297)
      FuncDecl: quals=None (at pp.c:13297)
        ParamList:  (at pp.c:13297)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:13297)
            PtrDecl: quals=[] (at pp.c:13297)
              TypeDecl: declname='source', quals=['const'] (at pp.c:13297)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_leuint16', quals=[] (at pp.c:13297)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13299)
      Decl: name='base', quals=['const'], storage=[] (at pp.c:13300)
        PtrDecl: quals=[] (at pp.c:13300)
          TypeDecl: declname='base', quals=['const'] (at pp.c:13300)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='source' (at pp.c:13300)
      Return:  (at pp.c:13303)
        BinaryOp: op='|' (at None)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
              ArrayRef:  (at pp.c:13303)
                ID: name='base' (at pp.c:13303)
                Constant: type='int', value='1' (at pp.c:13303)
            Constant: type='int', value='8' (at pp.c:13303)
          ArrayRef:  (at pp.c:13303)
            ID: name='base' (at pp.c:13303)
            Constant: type='int', value='0' (at pp.c:13303)
  FuncDef:  (at pp.c:13307)
    Decl: name='__nesc_hton_uint32', quals=[], storage=['__inline', 'static'] (at pp.c:13307)
      FuncDecl: quals=None (at pp.c:13307)
        ParamList:  (at pp.c:13307)
          Decl: name='target', quals=[], storage=[] (at pp.c:13307)
            PtrDecl: quals=[] (at pp.c:13307)
              TypeDecl: declname='target', quals=[] (at pp.c:13307)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:13307)
            TypeDecl: declname='value', quals=[] (at pp.c:13307)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='__nesc_hton_uint32', quals=[] (at pp.c:13307)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:13309)
      Decl: name='base', quals=[], storage=[] (at pp.c:13310)
        PtrDecl: quals=[] (at pp.c:13310)
          TypeDecl: declname='base', quals=[] (at pp.c:13310)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='target' (at pp.c:13310)
      Assignment: op='=' (at pp.c:13313)
        ArrayRef:  (at pp.c:13313)
          ID: name='base' (at pp.c:13313)
          Constant: type='int', value='3' (at pp.c:13313)
        ID: name='value' (at pp.c:13313)
      Assignment: op='=' (at pp.c:13314)
        ArrayRef:  (at pp.c:13314)
          ID: name='base' (at pp.c:13314)
          Constant: type='int', value='2' (at pp.c:13314)
        BinaryOp: op='>>' (at pp.c:13314)
          ID: name='value' (at pp.c:13314)
          Constant: type='int', value='8' (at pp.c:13314)
      Assignment: op='=' (at pp.c:13315)
        ArrayRef:  (at pp.c:13315)
          ID: name='base' (at pp.c:13315)
          Constant: type='int', value='1' (at pp.c:13315)
        BinaryOp: op='>>' (at pp.c:13315)
          ID: name='value' (at pp.c:13315)
          Constant: type='int', value='16' (at pp.c:13315)
      Assignment: op='=' (at pp.c:13316)
        ArrayRef:  (at pp.c:13316)
          ID: name='base' (at pp.c:13316)
          Constant: type='int', value='0' (at pp.c:13316)
        BinaryOp: op='>>' (at pp.c:13316)
          ID: name='value' (at pp.c:13316)
          Constant: type='int', value='24' (at pp.c:13316)
      Return:  (at pp.c:13317)
        ID: name='value' (at pp.c:13317)
  FuncDef:  (at pp.c:13321)
    Decl: name='__nesc_ntoh_uint32', quals=[], storage=['__inline', 'static'] (at pp.c:13321)
      FuncDecl: quals=None (at pp.c:13321)
        ParamList:  (at pp.c:13321)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:13321)
            PtrDecl: quals=[] (at pp.c:13321)
              TypeDecl: declname='source', quals=['const'] (at pp.c:13321)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_uint32', quals=[] (at pp.c:13321)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:13323)
      Decl: name='base', quals=['const'], storage=[] (at pp.c:13324)
        PtrDecl: quals=[] (at pp.c:13324)
          TypeDecl: declname='base', quals=['const'] (at pp.c:13324)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='source' (at pp.c:13324)
      Return:  (at pp.c:13327)
        BinaryOp: op='|' (at None)
          BinaryOp: op='|' (at None)
            BinaryOp: op='|' (at None)
              BinaryOp: op='<<' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint32_t'] (at None)
                  ArrayRef:  (at pp.c:13327)
                    ID: name='base' (at pp.c:13327)
                    Constant: type='int', value='0' (at pp.c:13327)
                Constant: type='int', value='24' (at pp.c:13327)
              BinaryOp: op='<<' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint32_t'] (at None)
                  ArrayRef:  (at pp.c:13328)
                    ID: name='base' (at pp.c:13328)
                    Constant: type='int', value='1' (at pp.c:13328)
                Constant: type='int', value='16' (at pp.c:13328)
            BinaryOp: op='<<' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['uint32_t'] (at None)
                ArrayRef:  (at pp.c:13329)
                  ID: name='base' (at pp.c:13329)
                  Constant: type='int', value='2' (at pp.c:13329)
              Constant: type='int', value='8' (at pp.c:13329)
          ArrayRef:  (at pp.c:13329)
            ID: name='base' (at pp.c:13329)
            Constant: type='int', value='3' (at pp.c:13329)
  FuncDef:  (at pp.c:13333)
    Decl: name='CC2420TransmitP__PacketTimeStamp__clear', quals=[], storage=['static', 'inline'] (at pp.c:13333)
      FuncDecl: quals=None (at pp.c:13333)
        ParamList:  (at pp.c:13333)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13333)
            PtrDecl: quals=[] (at pp.c:13333)
              TypeDecl: declname='msg', quals=[] (at pp.c:13333)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__clear', quals=[] (at pp.c:13333)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13333)
      FuncCall:  (at None)
        ID: name='CC2420PacketP__PacketTimeStamp32khz__clear' (at pp.c:13335)
        ExprList:  (at pp.c:13335)
          ID: name='msg' (at pp.c:13335)
  FuncDef:  (at pp.c:13340)
    Decl: name='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[], storage=['inline', 'static'] (at pp.c:13340)
      FuncDecl: quals=None (at pp.c:13340)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[] (at pp.c:13340)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13342)
      If:  (at pp.c:13343)
        ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:13343)
        Compound:  (at pp.c:13343)
          UnaryOp: op='p--' (at pp.c:13344)
            ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:13344)
  FuncDef:  (at pp.c:13349)
    Decl: name='CC2420TransmitP__CC2420Receive__sfd_dropped', quals=[], storage=['static', 'inline'] (at pp.c:13349)
      FuncDecl: quals=None (at pp.c:13349)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CC2420Receive__sfd_dropped', quals=[] (at pp.c:13349)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13349)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CC2420Receive__sfd_dropped' (at pp.c:13351)
  FuncDef:  (at pp.c:13356)
    Decl: name='HplMsp430GeneralIOP__25__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:13356)
      FuncDecl: quals=None (at pp.c:13356)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__25__IO__getRaw', quals=[] (at pp.c:13356)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:13358)
      Return:  (at pp.c:13360)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:13360)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='28U' (at pp.c:13360)
          BinaryOp: op='<<' (at pp.c:13360)
            Constant: type='int', value='0x01' (at pp.c:13360)
            Constant: type='int', value='1' (at pp.c:13360)
  FuncDef:  (at pp.c:13364)
    Decl: name='HplMsp430GeneralIOP__25__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:13364)
      FuncDecl: quals=None (at pp.c:13364)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__25__IO__get', quals=[] (at pp.c:13364)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:13366)
      Return:  (at pp.c:13368)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='HplMsp430GeneralIOP__25__IO__getRaw' (at pp.c:13368)
          Constant: type='int', value='0' (at pp.c:13368)
  FuncDef:  (at pp.c:13372)
    Decl: name='Msp430GpioC__8__HplGeneralIO__get', quals=[], storage=['static', 'inline'] (at pp.c:13372)
      FuncDecl: quals=None (at pp.c:13372)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__8__HplGeneralIO__get', quals=[] (at pp.c:13372)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:13372)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13374)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13374)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13378)
        ID: name='__nesc_result' (at pp.c:13378)
        FuncCall:  (at None)
          ID: name='HplMsp430GeneralIOP__25__IO__get' (at pp.c:13378)
      Return:  (at pp.c:13382)
        ID: name='__nesc_result' (at pp.c:13382)
  FuncDef:  (at pp.c:13387)
    Decl: name='Msp430GpioC__8__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:13387)
      FuncDecl: quals=None (at pp.c:13387)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__8__GeneralIO__get', quals=[] (at pp.c:13387)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:13389)
      Return:  (at pp.c:13391)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__8__HplGeneralIO__get' (at pp.c:13391)
  FuncDef:  (at pp.c:13395)
    Decl: name='CC2420TransmitP__SFD__get', quals=[], storage=['static', 'inline'] (at pp.c:13395)
      FuncDecl: quals=None (at pp.c:13395)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SFD__get', quals=[] (at pp.c:13395)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:13395)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13397)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13397)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13401)
        ID: name='__nesc_result' (at pp.c:13401)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__8__GeneralIO__get' (at pp.c:13401)
      Return:  (at pp.c:13405)
        ID: name='__nesc_result' (at pp.c:13405)
  FuncDef:  (at pp.c:13410)
    Decl: name='CC2420ReceiveP__CC2420Receive__sfd', quals=[], storage=['inline', 'static'] (at pp.c:13410)
      FuncDecl: quals=None (at pp.c:13410)
        ParamList:  (at pp.c:13410)
          Decl: name='time', quals=[], storage=[] (at pp.c:13410)
            TypeDecl: declname='time', quals=[] (at pp.c:13410)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd', quals=[] (at pp.c:13410)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13412)
      If:  (at pp.c:13413)
        BinaryOp: op='<' (at pp.c:13413)
          ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:13413)
          ID: name='CC2420ReceiveP__TIMESTAMP_QUEUE_SIZE' (at pp.c:13413)
        Compound:  (at pp.c:13413)
          Decl: name='tail', quals=[], storage=[] (at pp.c:13414)
            TypeDecl: declname='tail', quals=[] (at pp.c:13414)
              IdentifierType: names=['uint8_t'] (at None)
            BinaryOp: op='%' (at pp.c:13414)
              BinaryOp: op='+' (at pp.c:13414)
                ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:13414)
                ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:13414)
              ID: name='CC2420ReceiveP__TIMESTAMP_QUEUE_SIZE' (at pp.c:13415)
          Assignment: op='=' (at pp.c:13418)
            ArrayRef:  (at pp.c:13418)
              ID: name='CC2420ReceiveP__m_timestamp_queue' (at pp.c:13418)
              ID: name='tail' (at pp.c:13418)
            ID: name='time' (at pp.c:13418)
          UnaryOp: op='p++' (at pp.c:13419)
            ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:13419)
  FuncDef:  (at pp.c:13424)
    Decl: name='CC2420TransmitP__CC2420Receive__sfd', quals=[], storage=['static', 'inline'] (at pp.c:13424)
      FuncDecl: quals=None (at pp.c:13424)
        ParamList:  (at pp.c:13424)
          Decl: name='time', quals=[], storage=[] (at pp.c:13424)
            TypeDecl: declname='time', quals=[] (at pp.c:13424)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__CC2420Receive__sfd', quals=[] (at pp.c:13424)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13424)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CC2420Receive__sfd' (at pp.c:13426)
        ExprList:  (at pp.c:13426)
          ID: name='time' (at pp.c:13426)
  FuncDef:  (at pp.c:13431)
    Decl: name='GpioCaptureC__0__Capture__captureFallingEdge', quals=[], storage=['inline', 'static'] (at pp.c:13431)
      FuncDecl: quals=None (at pp.c:13431)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Capture__captureFallingEdge', quals=[] (at pp.c:13431)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13433)
      Return:  (at pp.c:13434)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__enableCapture' (at pp.c:13434)
          ExprList:  (at pp.c:13434)
            ID: name='MSP430TIMER_CM_FALLING' (at pp.c:13434)
  FuncDef:  (at pp.c:13438)
    Decl: name='CC2420TransmitP__CaptureSFD__captureFallingEdge', quals=[], storage=['static', 'inline'] (at pp.c:13438)
      FuncDecl: quals=None (at pp.c:13438)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CaptureSFD__captureFallingEdge', quals=[] (at pp.c:13438)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13438)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13440)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13440)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13444)
        ID: name='__nesc_result' (at pp.c:13444)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Capture__captureFallingEdge' (at pp.c:13444)
      Return:  (at pp.c:13448)
        ID: name='__nesc_result' (at pp.c:13448)
  FuncDef:  (at pp.c:13453)
    Decl: name='CC2420PacketP__CC2420PacketBody__getHeader', quals=[], storage=['inline', 'static'] (at pp.c:13453)
      FuncDecl: quals=None (at pp.c:13453)
        ParamList:  (at pp.c:13453)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13453)
            PtrDecl: quals=[] (at pp.c:13453)
              TypeDecl: declname='msg', quals=[] (at pp.c:13453)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:13453)
          TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getHeader', quals=[] (at pp.c:13453)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:13455)
      Return:  (at pp.c:13456)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:13456)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['cc2420_header_t'] (at None)
          BinaryOp: op='-' (at None)
            BinaryOp: op='+' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  PtrDecl: quals=[] (at pp.c:13456)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint8_t'] (at None)
                ID: name='msg' (at pp.c:13456)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['size_t'] (at None)
                UnaryOp: op='&' (at None)
                  StructRef: type='->' (at None)
                    Cast:  (at None)
                      Typename: quals=[] (at None)
                        PtrDecl: quals=[] (at pp.c:13456)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['message_t'] (at None)
                      Constant: type='int', value='0' (at pp.c:13456)
                    ID: name='data' (at pp.c:13456)
            UnaryOp: op='sizeof' (at pp.c:13456)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['cc2420_header_t'] (at None)
  FuncDef:  (at pp.c:13460)
    Decl: name='CC2420TransmitP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:13460)
      FuncDecl: quals=None (at pp.c:13460)
        ParamList:  (at pp.c:13460)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13460)
            PtrDecl: quals=[] (at pp.c:13460)
              TypeDecl: declname='msg', quals=[] (at pp.c:13460)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:13460)
          TypeDecl: declname='CC2420TransmitP__CC2420PacketBody__getHeader', quals=[] (at pp.c:13460)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:13460)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13462)
        PtrDecl: quals=[] (at pp.c:13462)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13462)
            Struct: name='cc2420_header_t', packed=False (at pp.c:13462)
      Assignment: op='=' (at pp.c:13466)
        ID: name='__nesc_result' (at pp.c:13466)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:13466)
          ExprList:  (at pp.c:13466)
            ID: name='msg' (at pp.c:13466)
      Return:  (at pp.c:13470)
        ID: name='__nesc_result' (at pp.c:13470)
  FuncDef:  (at pp.c:13475)
    Decl: name='Msp430AlarmC__0__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:13475)
      FuncDecl: quals=None (at pp.c:13475)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Alarm__stop', quals=[] (at pp.c:13475)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13476)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430TimerControl__disableEvents' (at pp.c:13477)
  FuncDef:  (at pp.c:13481)
    Decl: name='TransformAlarmC__0__AlarmFrom__stop', quals=[], storage=['static', 'inline'] (at pp.c:13481)
      FuncDecl: quals=None (at pp.c:13481)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__AlarmFrom__stop', quals=[] (at pp.c:13481)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13481)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Alarm__stop' (at pp.c:13483)
  FuncDef:  (at pp.c:13488)
    Decl: name='TransformAlarmC__0__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:13488)
      FuncDecl: quals=None (at pp.c:13488)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Alarm__stop', quals=[] (at pp.c:13488)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13489)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__AlarmFrom__stop' (at pp.c:13490)
  FuncDef:  (at pp.c:13494)
    Decl: name='CC2420TransmitP__BackoffTimer__stop', quals=[], storage=['static', 'inline'] (at pp.c:13494)
      FuncDecl: quals=None (at pp.c:13494)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__BackoffTimer__stop', quals=[] (at pp.c:13494)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13494)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__Alarm__stop' (at pp.c:13496)
  FuncDef:  (at pp.c:13501)
    Decl: name='Msp430GpioC__4__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:13501)
      FuncDecl: quals=None (at pp.c:13501)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__4__HplGeneralIO__set', quals=[] (at pp.c:13501)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13501)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__26__IO__set' (at pp.c:13503)
  FuncDef:  (at pp.c:13508)
    Decl: name='Msp430GpioC__4__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:13508)
      FuncDecl: quals=None (at pp.c:13508)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__4__GeneralIO__set', quals=[] (at pp.c:13508)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13510)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__HplGeneralIO__set' (at pp.c:13512)
  FuncDef:  (at pp.c:13516)
    Decl: name='CC2420TransmitP__CSN__set', quals=[], storage=['static', 'inline'] (at pp.c:13516)
      FuncDecl: quals=None (at pp.c:13516)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CSN__set', quals=[] (at pp.c:13516)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13516)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__GeneralIO__set' (at pp.c:13518)
  FuncDef:  (at pp.c:13523)
    Decl: name='CC2420TransmitP__TXFIFO_RAM__write', quals=[], storage=['static', 'inline'] (at pp.c:13523)
      FuncDecl: quals=None (at pp.c:13523)
        ParamList:  (at pp.c:13523)
          Decl: name='offset', quals=[], storage=[] (at pp.c:13523)
            TypeDecl: declname='offset', quals=[] (at pp.c:13523)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:13523)
            PtrDecl: quals=[] (at pp.c:13523)
              TypeDecl: declname='data', quals=[] (at pp.c:13523)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:13523)
            TypeDecl: declname='length', quals=[] (at pp.c:13523)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__TXFIFO_RAM__write', quals=[] (at pp.c:13523)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:13523)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13525)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13525)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13529)
        ID: name='__nesc_result' (at pp.c:13529)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Ram__write' (at pp.c:13529)
          ExprList:  (at pp.c:13529)
            ID: name='CC2420_RAM_TXFIFO' (at pp.c:13529)
            ID: name='offset' (at pp.c:13529)
            ID: name='data' (at pp.c:13529)
            ID: name='length' (at pp.c:13529)
      Return:  (at pp.c:13533)
        ID: name='__nesc_result' (at pp.c:13533)
  FuncDef:  (at pp.c:13538)
    Decl: name='Msp430GpioC__4__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:13538)
      FuncDecl: quals=None (at pp.c:13538)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__4__HplGeneralIO__clr', quals=[] (at pp.c:13538)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13538)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__26__IO__clr' (at pp.c:13540)
  FuncDef:  (at pp.c:13545)
    Decl: name='Msp430GpioC__4__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:13545)
      FuncDecl: quals=None (at pp.c:13545)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__4__GeneralIO__clr', quals=[] (at pp.c:13545)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13547)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__HplGeneralIO__clr' (at pp.c:13549)
  FuncDef:  (at pp.c:13553)
    Decl: name='CC2420TransmitP__CSN__clr', quals=[], storage=['static', 'inline'] (at pp.c:13553)
      FuncDecl: quals=None (at pp.c:13553)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CSN__clr', quals=[] (at pp.c:13553)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13553)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__GeneralIO__clr' (at pp.c:13555)
  FuncDef:  (at pp.c:13560)
    Decl: name='CC2420PacketP__PacketTimeSyncOffset__get', quals=[], storage=['inline', 'static'] (at pp.c:13560)
      FuncDecl: quals=None (at pp.c:13560)
        ParamList:  (at pp.c:13560)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13560)
            PtrDecl: quals=[] (at pp.c:13560)
              TypeDecl: declname='msg', quals=[] (at pp.c:13560)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__get', quals=[] (at pp.c:13560)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:13561)
      Return:  (at pp.c:13562)
        BinaryOp: op='-' (at None)
          BinaryOp: op='-' (at None)
            BinaryOp: op='+' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint8' (at pp.c:13562)
                ExprList:  (at None)
                  StructRef: type='.' (at None)
                    StructRef: type='->' (at None)
                      FuncCall:  (at None)
                        ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:13562)
                        ExprList:  (at pp.c:13562)
                          ID: name='msg' (at pp.c:13562)
                      ID: name='length' (at pp.c:13562)
                    ID: name='nxdata' (at pp.c:13562)
              BinaryOp: op='-' (at pp.c:13563)
                UnaryOp: op='sizeof' (at pp.c:13563)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['cc2420_header_t'] (at None)
                ID: name='MAC_HEADER_SIZE' (at pp.c:13563)
            ID: name='MAC_FOOTER_SIZE' (at pp.c:13564)
          UnaryOp: op='sizeof' (at pp.c:13565)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['timesync_radio_t'] (at None)
  FuncDef:  (at pp.c:13569)
    Decl: name='CC2420TransmitP__PacketTimeSyncOffset__get', quals=[], storage=['static', 'inline'] (at pp.c:13569)
      FuncDecl: quals=None (at pp.c:13569)
        ParamList:  (at pp.c:13569)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13569)
            PtrDecl: quals=[] (at pp.c:13569)
              TypeDecl: declname='msg', quals=[] (at pp.c:13569)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__PacketTimeSyncOffset__get', quals=[] (at pp.c:13569)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:13569)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13571)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13571)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13575)
        ID: name='__nesc_result' (at pp.c:13575)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__PacketTimeSyncOffset__get' (at pp.c:13575)
          ExprList:  (at pp.c:13575)
            ID: name='msg' (at pp.c:13575)
      Return:  (at pp.c:13579)
        ID: name='__nesc_result' (at pp.c:13579)
  FuncDef:  (at pp.c:13584)
    Decl: name='__nesc_ntoh_uint8', quals=[], storage=['__inline', 'static'] (at pp.c:13584)
      FuncDecl: quals=None (at pp.c:13584)
        ParamList:  (at pp.c:13584)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:13584)
            PtrDecl: quals=[] (at pp.c:13584)
              TypeDecl: declname='source', quals=['const'] (at pp.c:13584)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_uint8', quals=[] (at pp.c:13584)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:13586)
      Decl: name='base', quals=['const'], storage=[] (at pp.c:13587)
        PtrDecl: quals=[] (at pp.c:13587)
          TypeDecl: declname='base', quals=['const'] (at pp.c:13587)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='source' (at pp.c:13587)
      Return:  (at pp.c:13590)
        ArrayRef:  (at pp.c:13590)
          ID: name='base' (at pp.c:13590)
          Constant: type='int', value='0' (at pp.c:13590)
  FuncDef:  (at pp.c:13594)
    Decl: name='__nesc_ntoh_int8', quals=[], storage=['__inline', 'static'] (at pp.c:13594)
      FuncDecl: quals=None (at pp.c:13594)
        ParamList:  (at pp.c:13594)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:13594)
            PtrDecl: quals=[] (at pp.c:13594)
              TypeDecl: declname='source', quals=['const'] (at pp.c:13594)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_int8', quals=[] (at pp.c:13594)
          IdentifierType: names=['int8_t'] (at None)
    Compound:  (at pp.c:13596)
      Return:  (at pp.c:13598)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_uint8' (at pp.c:13598)
          ExprList:  (at pp.c:13598)
            ID: name='source' (at pp.c:13598)
  FuncDef:  (at pp.c:13602)
    Decl: name='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[], storage=['inline', 'static'] (at pp.c:13602)
      FuncDecl: quals=None (at pp.c:13602)
        ParamList:  (at pp.c:13602)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13602)
            PtrDecl: quals=[] (at pp.c:13602)
              TypeDecl: declname='msg', quals=[] (at pp.c:13602)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[] (at pp.c:13602)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:13603)
      Return:  (at pp.c:13604)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_int8' (at pp.c:13604)
          ExprList:  (at None)
            StructRef: type='.' (at None)
              StructRef: type='->' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:13604)
                  ExprList:  (at pp.c:13604)
                    ID: name='msg' (at pp.c:13604)
                ID: name='timesync' (at pp.c:13604)
              ID: name='nxdata' (at pp.c:13604)
  FuncDef:  (at pp.c:13608)
    Decl: name='CC2420TransmitP__PacketTimeSyncOffset__isSet', quals=[], storage=['static', 'inline'] (at pp.c:13608)
      FuncDecl: quals=None (at pp.c:13608)
        ParamList:  (at pp.c:13608)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13608)
            PtrDecl: quals=[] (at pp.c:13608)
              TypeDecl: declname='msg', quals=[] (at pp.c:13608)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__PacketTimeSyncOffset__isSet', quals=[] (at pp.c:13608)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:13608)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13610)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13610)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13614)
        ID: name='__nesc_result' (at pp.c:13614)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__PacketTimeSyncOffset__isSet' (at pp.c:13614)
          ExprList:  (at pp.c:13614)
            ID: name='msg' (at pp.c:13614)
      Return:  (at pp.c:13618)
        ID: name='__nesc_result' (at pp.c:13618)
  FuncDef:  (at pp.c:13623)
    Decl: name='CC2420PacketP__PacketTimeStamp32khz__set', quals=[], storage=['inline', 'static'] (at pp.c:13623)
      FuncDecl: quals=None (at pp.c:13623)
        ParamList:  (at pp.c:13623)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13623)
            PtrDecl: quals=[] (at pp.c:13623)
              TypeDecl: declname='msg', quals=[] (at pp.c:13623)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:13623)
            TypeDecl: declname='value', quals=[] (at pp.c:13623)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__set', quals=[] (at pp.c:13623)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13624)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint32' (at pp.c:13625)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:13625)
                ExprList:  (at pp.c:13625)
                  ID: name='msg' (at pp.c:13625)
              ID: name='timestamp' (at pp.c:13625)
            ID: name='nxdata' (at pp.c:13625)
          ID: name='value' (at pp.c:13625)
  FuncDef:  (at pp.c:13629)
    Decl: name='CC2420TransmitP__PacketTimeStamp__set', quals=[], storage=['static', 'inline'] (at pp.c:13629)
      FuncDecl: quals=None (at pp.c:13629)
        ParamList:  (at pp.c:13629)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13629)
            PtrDecl: quals=[] (at pp.c:13629)
              TypeDecl: declname='msg', quals=[] (at pp.c:13629)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:13629)
            TypeDecl: declname='value', quals=[] (at pp.c:13629)
              IdentifierType: names=['CC2420TransmitP__PacketTimeStamp__size_type'] (at None)
        TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__set', quals=[] (at pp.c:13629)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13629)
      FuncCall:  (at None)
        ID: name='CC2420PacketP__PacketTimeStamp32khz__set' (at pp.c:13631)
        ExprList:  (at pp.c:13631)
          ID: name='msg' (at pp.c:13631)
          ID: name='value' (at pp.c:13631)
  FuncDef:  (at pp.c:13636)
    Decl: name='CC2420TransmitP__BackoffTimer__getNow', quals=[], storage=['static', 'inline'] (at pp.c:13636)
      FuncDecl: quals=None (at pp.c:13636)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__BackoffTimer__getNow', quals=[] (at pp.c:13636)
          IdentifierType: names=['CC2420TransmitP__BackoffTimer__size_type'] (at None)
    Compound:  (at pp.c:13636)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13638)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13638)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13642)
        ID: name='__nesc_result' (at pp.c:13642)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__0__Alarm__getNow' (at pp.c:13642)
      Return:  (at pp.c:13646)
        ID: name='__nesc_result' (at pp.c:13646)
  FuncDef:  (at pp.c:13651)
    Decl: name='CC2420TransmitP__getTime32', quals=[], storage=['__inline', 'static'] (at pp.c:13651)
      FuncDecl: quals=None (at pp.c:13651)
        ParamList:  (at pp.c:13651)
          Decl: name='captured_time', quals=[], storage=[] (at pp.c:13651)
            TypeDecl: declname='captured_time', quals=[] (at pp.c:13651)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__getTime32', quals=[] (at pp.c:13651)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:13652)
      Decl: name='now', quals=[], storage=[] (at pp.c:13653)
        TypeDecl: declname='now', quals=[] (at pp.c:13653)
          IdentifierType: names=['uint32_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__BackoffTimer__getNow' (at pp.c:13653)
      Return:  (at pp.c:13656)
        BinaryOp: op='-' (at pp.c:13656)
          ID: name='now' (at pp.c:13656)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint16_t'] (at None)
            BinaryOp: op='-' (at pp.c:13656)
              ID: name='now' (at pp.c:13656)
              ID: name='captured_time' (at pp.c:13656)
  FuncDef:  (at pp.c:13660)
    Decl: name='CC2420TransmitP__CaptureSFD__captured', quals=[], storage=['inline', 'static'] (at pp.c:13660)
      FuncDecl: quals=None (at pp.c:13660)
        ParamList:  (at pp.c:13660)
          Decl: name='time', quals=[], storage=[] (at pp.c:13660)
            TypeDecl: declname='time', quals=[] (at pp.c:13660)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__CaptureSFD__captured', quals=[] (at pp.c:13660)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13662)
      Decl: name='__nesc_temp45', quals=[], storage=[] (at pp.c:13663)
        PtrDecl: quals=[] (at pp.c:13663)
          TypeDecl: declname='__nesc_temp45', quals=[] (at pp.c:13663)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='__nesc_temp44', quals=[], storage=[] (at pp.c:13664)
        PtrDecl: quals=[] (at pp.c:13664)
          TypeDecl: declname='__nesc_temp44', quals=[] (at pp.c:13664)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='time32', quals=[], storage=[] (at pp.c:13666)
        TypeDecl: declname='time32', quals=[] (at pp.c:13666)
          IdentifierType: names=['uint32_t'] (at None)
      Decl: name='sfd_state', quals=[], storage=[] (at pp.c:13667)
        TypeDecl: declname='sfd_state', quals=[] (at pp.c:13667)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:13667)
      Compound:  (at pp.c:13671)
        Assignment: op='=' (at pp.c:13672)
          ID: name='time32' (at pp.c:13672)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__getTime32' (at pp.c:13672)
            ExprList:  (at pp.c:13672)
              ID: name='time' (at pp.c:13672)
        Switch:  (at pp.c:13673)
          ID: name='CC2420TransmitP__m_state' (at pp.c:13673)
          Compound:  (at pp.c:13673)
            Case:  (at pp.c:13675)
              ID: name='CC2420TransmitP__S_SFD' (at pp.c:13675)
              Assignment: op='=' (at pp.c:13676)
                ID: name='CC2420TransmitP__m_state' (at pp.c:13676)
                ID: name='CC2420TransmitP__S_EFD' (at pp.c:13676)
            Assignment: op='=' (at pp.c:13677)
              ID: name='CC2420TransmitP__sfdHigh' (at pp.c:13677)
              ID: name='TRUE' (at pp.c:13677)
            Assignment: op='=' (at pp.c:13680)
              ID: name='CC2420TransmitP__m_receiving' (at pp.c:13680)
              ID: name='FALSE' (at pp.c:13680)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CaptureSFD__captureFallingEdge' (at pp.c:13681)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__PacketTimeStamp__set' (at pp.c:13682)
              ExprList:  (at pp.c:13682)
                ID: name='CC2420TransmitP__m_msg' (at pp.c:13682)
                ID: name='time32' (at pp.c:13682)
            If:  (at pp.c:13683)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__PacketTimeSyncOffset__isSet' (at pp.c:13683)
                ExprList:  (at pp.c:13683)
                  ID: name='CC2420TransmitP__m_msg' (at pp.c:13683)
              Compound:  (at pp.c:13683)
                Decl: name='absOffset', quals=[], storage=[] (at pp.c:13684)
                  TypeDecl: declname='absOffset', quals=[] (at pp.c:13684)
                    IdentifierType: names=['uint8_t'] (at None)
                  BinaryOp: op='+' (at pp.c:13684)
                    BinaryOp: op='-' (at pp.c:13684)
                      UnaryOp: op='sizeof' (at pp.c:13684)
                        Typename: quals=[] (at None)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['message_header_t'] (at None)
                      UnaryOp: op='sizeof' (at pp.c:13684)
                        Typename: quals=[] (at None)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['cc2420_header_t'] (at None)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__PacketTimeSyncOffset__get' (at pp.c:13684)
                      ExprList:  (at pp.c:13684)
                        ID: name='CC2420TransmitP__m_msg' (at pp.c:13684)
                Decl: name='timesync', quals=[], storage=[] (at pp.c:13685)
                  PtrDecl: quals=[] (at pp.c:13685)
                    TypeDecl: declname='timesync', quals=[] (at pp.c:13685)
                      IdentifierType: names=['timesync_radio_t'] (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:13685)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['timesync_radio_t'] (at None)
                    BinaryOp: op='+' (at None)
                      Cast:  (at None)
                        Typename: quals=[] (at None)
                          PtrDecl: quals=[] (at pp.c:13685)
                            TypeDecl: declname=None, quals=[] (at None)
                              IdentifierType: names=['nx_uint8_t'] (at None)
                        ID: name='CC2420TransmitP__m_msg' (at pp.c:13685)
                      ID: name='absOffset' (at pp.c:13685)
                ExprList:  (at pp.c:13687)
                  Assignment: op='=' (at pp.c:13687)
                    ID: name='__nesc_temp44' (at pp.c:13687)
                    StructRef: type='.' (at pp.c:13687)
                      UnaryOp: op='*' (at pp.c:13687)
                        ID: name='timesync' (at pp.c:13687)
                      ID: name='nxdata' (at pp.c:13687)
                  FuncCall:  (at None)
                    ID: name='__nesc_hton_uint32' (at pp.c:13687)
                    ExprList:  (at pp.c:13687)
                      ID: name='__nesc_temp44' (at pp.c:13687)
                      BinaryOp: op='-' (at None)
                        FuncCall:  (at None)
                          ID: name='__nesc_ntoh_uint32' (at pp.c:13687)
                          ExprList:  (at pp.c:13687)
                            ID: name='__nesc_temp44' (at pp.c:13687)
                        ID: name='time32' (at pp.c:13687)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CSN__clr' (at pp.c:13688)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__TXFIFO_RAM__write' (at pp.c:13689)
                  ExprList:  (at pp.c:13689)
                    ID: name='absOffset' (at pp.c:13689)
                    Cast:  (at None)
                      Typename: quals=[] (at None)
                        PtrDecl: quals=[] (at pp.c:13689)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['uint8_t'] (at None)
                      ID: name='timesync' (at pp.c:13689)
                    UnaryOp: op='sizeof' (at pp.c:13689)
                      Typename: quals=[] (at None)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['timesync_radio_t'] (at None)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CSN__set' (at pp.c:13690)
                ExprList:  (at pp.c:13692)
                  Assignment: op='=' (at pp.c:13692)
                    ID: name='__nesc_temp45' (at pp.c:13692)
                    StructRef: type='.' (at pp.c:13692)
                      UnaryOp: op='*' (at pp.c:13692)
                        ID: name='timesync' (at pp.c:13692)
                      ID: name='nxdata' (at pp.c:13692)
                  FuncCall:  (at None)
                    ID: name='__nesc_hton_uint32' (at pp.c:13692)
                    ExprList:  (at pp.c:13692)
                      ID: name='__nesc_temp45' (at pp.c:13692)
                      BinaryOp: op='+' (at None)
                        FuncCall:  (at None)
                          ID: name='__nesc_ntoh_uint32' (at pp.c:13692)
                          ExprList:  (at pp.c:13692)
                            ID: name='__nesc_temp45' (at pp.c:13692)
                        ID: name='time32' (at pp.c:13692)
            If:  (at pp.c:13695)
              BinaryOp: op='&' (at None)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint16' (at pp.c:13695)
                  ExprList:  (at None)
                    StructRef: type='.' (at None)
                      StructRef: type='->' (at None)
                        FuncCall:  (at None)
                          ID: name='CC2420TransmitP__CC2420PacketBody__getHeader' (at pp.c:13695)
                          ExprList:  (at pp.c:13695)
                            ID: name='CC2420TransmitP__m_msg' (at pp.c:13695)
                        ID: name='fcf' (at pp.c:13695)
                      ID: name='nxdata' (at pp.c:13695)
                BinaryOp: op='<<' (at pp.c:13695)
                  Constant: type='int', value='1' (at pp.c:13695)
                  ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:13695)
              Compound:  (at pp.c:13695)
                Assignment: op='=' (at pp.c:13697)
                  ID: name='CC2420TransmitP__abortSpiRelease' (at pp.c:13697)
                  ID: name='TRUE' (at pp.c:13697)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:13699)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__BackoffTimer__stop' (at pp.c:13700)
            If:  (at pp.c:13702)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__SFD__get' (at pp.c:13702)
              Compound:  (at pp.c:13702)
                Break:  (at pp.c:13703)
            Case:  (at pp.c:13707)
              ID: name='CC2420TransmitP__S_EFD' (at pp.c:13707)
              Assignment: op='=' (at pp.c:13708)
                ID: name='CC2420TransmitP__sfdHigh' (at pp.c:13708)
                ID: name='FALSE' (at pp.c:13708)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CaptureSFD__captureRisingEdge' (at pp.c:13709)
            If:  (at pp.c:13711)
              BinaryOp: op='&' (at None)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint16' (at pp.c:13711)
                  ExprList:  (at None)
                    StructRef: type='.' (at None)
                      StructRef: type='->' (at None)
                        FuncCall:  (at None)
                          ID: name='CC2420TransmitP__CC2420PacketBody__getHeader' (at pp.c:13711)
                          ExprList:  (at pp.c:13711)
                            ID: name='CC2420TransmitP__m_msg' (at pp.c:13711)
                        ID: name='fcf' (at pp.c:13711)
                      ID: name='nxdata' (at pp.c:13711)
                BinaryOp: op='<<' (at pp.c:13711)
                  Constant: type='int', value='1' (at pp.c:13711)
                  ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:13711)
              Compound:  (at pp.c:13711)
                Assignment: op='=' (at pp.c:13712)
                  ID: name='CC2420TransmitP__m_state' (at pp.c:13712)
                  ID: name='CC2420TransmitP__S_ACK_WAIT' (at pp.c:13712)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:13713)
                  ExprList:  (at pp.c:13713)
                    ID: name='CC2420_ACK_WAIT_DELAY' (at pp.c:13713)
              Compound:  (at pp.c:13717)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__signalDone' (at pp.c:13718)
                  ExprList:  (at pp.c:13718)
                    ID: name='SUCCESS' (at pp.c:13718)
            If:  (at pp.c:13721)
              UnaryOp: op='!' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__SFD__get' (at pp.c:13721)
              Compound:  (at pp.c:13721)
                Break:  (at pp.c:13722)
            Default:  (at pp.c:13726)
              If:  (at pp.c:13728)
                BinaryOp: op='&&' (at pp.c:13728)
                  UnaryOp: op='!' (at pp.c:13728)
                    ID: name='CC2420TransmitP__m_receiving' (at pp.c:13728)
                  BinaryOp: op='==' (at pp.c:13728)
                    ID: name='CC2420TransmitP__sfdHigh' (at pp.c:13728)
                    ID: name='FALSE' (at pp.c:13728)
                Compound:  (at pp.c:13728)
                  Assignment: op='=' (at pp.c:13729)
                    ID: name='CC2420TransmitP__sfdHigh' (at pp.c:13729)
                    ID: name='TRUE' (at pp.c:13729)
                  FuncCall:  (at None)
                    ID: name='CC2420TransmitP__CaptureSFD__captureFallingEdge' (at pp.c:13730)
                  Assignment: op='=' (at pp.c:13732)
                    ID: name='sfd_state' (at pp.c:13732)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__SFD__get' (at pp.c:13732)
                  FuncCall:  (at None)
                    ID: name='CC2420TransmitP__CC2420Receive__sfd' (at pp.c:13733)
                    ExprList:  (at pp.c:13733)
                      ID: name='time32' (at pp.c:13733)
                  Assignment: op='=' (at pp.c:13734)
                    ID: name='CC2420TransmitP__m_receiving' (at pp.c:13734)
                    ID: name='TRUE' (at pp.c:13734)
                  Assignment: op='=' (at pp.c:13735)
                    ID: name='CC2420TransmitP__m_prev_time' (at pp.c:13735)
                    ID: name='time' (at pp.c:13735)
                  If:  (at pp.c:13736)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__SFD__get' (at pp.c:13736)
                    Compound:  (at pp.c:13736)
                      Return:  (at pp.c:13738)
            If:  (at pp.c:13744)
              BinaryOp: op='==' (at pp.c:13744)
                ID: name='CC2420TransmitP__sfdHigh' (at pp.c:13744)
                ID: name='TRUE' (at pp.c:13744)
              Compound:  (at pp.c:13744)
                Assignment: op='=' (at pp.c:13745)
                  ID: name='CC2420TransmitP__sfdHigh' (at pp.c:13745)
                  ID: name='FALSE' (at pp.c:13745)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CaptureSFD__captureRisingEdge' (at pp.c:13746)
                Assignment: op='=' (at pp.c:13747)
                  ID: name='CC2420TransmitP__m_receiving' (at pp.c:13747)
                  ID: name='FALSE' (at pp.c:13747)
                If:  (at pp.c:13756)
                  BinaryOp: op='&&' (at pp.c:13756)
                    BinaryOp: op='==' (at pp.c:13756)
                      ID: name='sfd_state' (at pp.c:13756)
                      Constant: type='int', value='0' (at pp.c:13756)
                    BinaryOp: op='<' (at pp.c:13756)
                      BinaryOp: op='-' (at pp.c:13756)
                        ID: name='time' (at pp.c:13756)
                        ID: name='CC2420TransmitP__m_prev_time' (at pp.c:13756)
                      Constant: type='int', value='10' (at pp.c:13756)
                  Compound:  (at pp.c:13756)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__CC2420Receive__sfd_dropped' (at pp.c:13757)
                    If:  (at pp.c:13758)
                      ID: name='CC2420TransmitP__m_msg' (at pp.c:13758)
                      Compound:  (at pp.c:13758)
                        FuncCall:  (at None)
                          ID: name='CC2420TransmitP__PacketTimeStamp__clear' (at pp.c:13759)
                          ExprList:  (at pp.c:13759)
                            ID: name='CC2420TransmitP__m_msg' (at pp.c:13759)
                Break:  (at pp.c:13763)
  FuncDef:  (at pp.c:13770)
    Decl: name='GpioCaptureC__0__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:13770)
      FuncDecl: quals=None (at pp.c:13770)
        ParamList:  (at pp.c:13770)
          Decl: name='time', quals=[], storage=[] (at pp.c:13770)
            TypeDecl: declname='time', quals=[] (at pp.c:13770)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Capture__captured', quals=[] (at pp.c:13770)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13770)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CaptureSFD__captured' (at pp.c:13772)
        ExprList:  (at pp.c:13772)
          ID: name='time' (at pp.c:13772)
  FuncDef:  (at pp.c:13777)
    Decl: name='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[], storage=['inline', 'static'] (at pp.c:13777)
      FuncDecl: quals=None (at pp.c:13777)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[] (at pp.c:13777)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13778)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13779)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='388U' (at pp.c:13779)
        UnaryOp: op='~' (at pp.c:13779)
          Constant: type='int', value='0x0002' (at pp.c:13779)
  FuncDef:  (at pp.c:13783)
    Decl: name='GpioCaptureC__0__Msp430Capture__clearOverflow', quals=[], storage=['static', 'inline'] (at pp.c:13783)
      FuncDecl: quals=None (at pp.c:13783)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430Capture__clearOverflow', quals=[] (at pp.c:13783)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13783)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Capture__clearOverflow' (at pp.c:13785)
  FuncDef:  (at pp.c:13790)
    Decl: name='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:13790)
      FuncDecl: quals=None (at pp.c:13790)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[] (at pp.c:13790)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13791)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13792)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='388U' (at pp.c:13792)
        UnaryOp: op='~' (at pp.c:13792)
          Constant: type='int', value='0x0001' (at pp.c:13792)
  FuncDef:  (at pp.c:13796)
    Decl: name='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static', 'inline'] (at pp.c:13796)
      FuncDecl: quals=None (at pp.c:13796)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:13796)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13796)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Control__clearPendingInterrupt' (at pp.c:13798)
  FuncDef:  (at pp.c:13803)
    Decl: name='GpioCaptureC__0__Msp430Capture__captured', quals=[], storage=['inline', 'static'] (at pp.c:13803)
      FuncDecl: quals=None (at pp.c:13803)
        ParamList:  (at pp.c:13803)
          Decl: name='time', quals=[], storage=[] (at pp.c:13803)
            TypeDecl: declname='time', quals=[] (at pp.c:13803)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430Capture__captured', quals=[] (at pp.c:13803)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13805)
      FuncCall:  (at None)
        ID: name='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt' (at pp.c:13806)
      FuncCall:  (at None)
        ID: name='GpioCaptureC__0__Msp430Capture__clearOverflow' (at pp.c:13807)
      FuncCall:  (at None)
        ID: name='GpioCaptureC__0__Capture__captured' (at pp.c:13808)
        ExprList:  (at pp.c:13808)
          ID: name='time' (at pp.c:13808)
  FuncDef:  (at pp.c:13812)
    Decl: name='Msp430TimerCapComP__4__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:13812)
      FuncDecl: quals=None (at pp.c:13812)
        ParamList:  (at pp.c:13812)
          Decl: name='time', quals=[], storage=[] (at pp.c:13812)
            TypeDecl: declname='time', quals=[] (at pp.c:13812)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Capture__captured', quals=[] (at pp.c:13812)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13812)
      FuncCall:  (at None)
        ID: name='GpioCaptureC__0__Msp430Capture__captured' (at pp.c:13814)
        ExprList:  (at pp.c:13814)
          ID: name='time' (at pp.c:13814)
  FuncDef:  (at pp.c:13819)
    Decl: name='Msp430TimerCapComP__4__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:13819)
      FuncDecl: quals=None (at pp.c:13819)
        ParamList:  (at pp.c:13819)
          Decl: name='x', quals=[], storage=[] (at pp.c:13819)
            TypeDecl: declname='x', quals=[] (at pp.c:13819)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__int2CC', quals=[] (at pp.c:13819)
          IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
    Compound:  (at pp.c:13821)
      Decl: name='c', quals=[], storage=[] (at pp.c:13830)
        TypeDecl: declname='c', quals=[] (at pp.c:13830)
          Union: name='Msp430TimerCapComP__4____nesc_unnamed4407', packed=False (at pp.c:13823)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:13825)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:13827)
                IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
        ExprList:  (at pp.c:13830)
          Assignment: op='=' (at pp.c:13830)
            StructRef: type='.' (at pp.c:13830)
              ID: name='f' (at pp.c:13830)
            ID: name='x' (at pp.c:13830)
      Return:  (at pp.c:13833)
        StructRef: type='.' (at pp.c:13833)
          ID: name='c' (at pp.c:13833)
          ID: name='t' (at pp.c:13833)
  FuncDef:  (at pp.c:13837)
    Decl: name='Msp430TimerCapComP__4__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:13837)
      FuncDecl: quals=None (at pp.c:13837)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Control__getControl', quals=[] (at pp.c:13837)
          IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
    Compound:  (at pp.c:13838)
      Return:  (at pp.c:13839)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__4__int2CC' (at pp.c:13839)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:13839)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='388U' (at pp.c:13839)
  FuncDef:  (at pp.c:13843)
    Decl: name='Msp430TimerCapComP__4__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:13843)
      FuncDecl: quals=None (at pp.c:13843)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Event__fired', quals=[] (at pp.c:13843)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13844)
      If:  (at pp.c:13845)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__4__Control__getControl' (at pp.c:13845)
          ID: name='cap' (at pp.c:13845)
        Compound:  (at pp.c:13845)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__4__Capture__captured' (at pp.c:13846)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__4__Capture__getEvent' (at pp.c:13846)
        Compound:  (at pp.c:13848)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__4__Compare__fired' (at pp.c:13850)
  FuncDef:  (at pp.c:13855)
    Decl: name='AlarmToTimerC__0__fired__postTask', quals=[], storage=['static', 'inline'] (at pp.c:13855)
      FuncDecl: quals=None (at pp.c:13855)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__fired__postTask', quals=[] (at pp.c:13855)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13855)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13857)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13857)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13861)
        ID: name='__nesc_result' (at pp.c:13861)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:13861)
          ExprList:  (at pp.c:13861)
            ID: name='AlarmToTimerC__0__fired' (at pp.c:13861)
      Return:  (at pp.c:13865)
        ID: name='__nesc_result' (at pp.c:13865)
  FuncDef:  (at pp.c:13870)
    Decl: name='AlarmToTimerC__0__Alarm__fired', quals=[], storage=['inline', 'static'] (at pp.c:13870)
      FuncDecl: quals=None (at pp.c:13870)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Alarm__fired', quals=[] (at pp.c:13870)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13871)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__fired__postTask' (at pp.c:13873)
  FuncDef:  (at pp.c:13877)
    Decl: name='TransformAlarmC__1__Alarm__fired', quals=[], storage=['static', 'inline'] (at pp.c:13877)
      FuncDecl: quals=None (at pp.c:13877)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Alarm__fired', quals=[] (at pp.c:13877)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13877)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Alarm__fired' (at pp.c:13879)
  FuncDef:  (at pp.c:13884)
    Decl: name='TransformAlarmC__1__AlarmFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:13884)
      FuncDecl: quals=None (at pp.c:13884)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__AlarmFrom__fired', quals=[] (at pp.c:13884)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13885)
      Compound:  (at pp.c:13887)
        If:  (at pp.c:13888)
          BinaryOp: op='==' (at pp.c:13888)
            ID: name='TransformAlarmC__1__m_dt' (at pp.c:13888)
            Constant: type='int', value='0' (at pp.c:13888)
          Compound:  (at pp.c:13889)
            FuncCall:  (at None)
              ID: name='TransformAlarmC__1__Alarm__fired' (at pp.c:13890)
          Compound:  (at pp.c:13893)
            FuncCall:  (at None)
              ID: name='TransformAlarmC__1__set_alarm' (at pp.c:13894)
  FuncDef:  (at pp.c:13900)
    Decl: name='Msp430AlarmC__1__Alarm__fired', quals=[], storage=['static', 'inline'] (at pp.c:13900)
      FuncDecl: quals=None (at pp.c:13900)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Alarm__fired', quals=[] (at pp.c:13900)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13900)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__AlarmFrom__fired' (at pp.c:13902)
  FuncDef:  (at pp.c:13907)
    Decl: name='Msp430TimerCapComP__5__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:13907)
      FuncDecl: quals=None (at pp.c:13907)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Control__disableEvents', quals=[] (at pp.c:13907)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13908)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13909)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='390U' (at pp.c:13909)
        UnaryOp: op='~' (at pp.c:13909)
          Constant: type='int', value='0x0010' (at pp.c:13909)
  FuncDef:  (at pp.c:13913)
    Decl: name='Msp430AlarmC__1__Msp430TimerControl__disableEvents', quals=[], storage=['static', 'inline'] (at pp.c:13913)
      FuncDecl: quals=None (at pp.c:13913)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__disableEvents', quals=[] (at pp.c:13913)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13913)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Control__disableEvents' (at pp.c:13915)
  FuncDef:  (at pp.c:13920)
    Decl: name='Msp430AlarmC__1__Msp430Compare__fired', quals=[], storage=['inline', 'static'] (at pp.c:13920)
      FuncDecl: quals=None (at pp.c:13920)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__fired', quals=[] (at pp.c:13920)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13921)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430TimerControl__disableEvents' (at pp.c:13922)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Alarm__fired' (at pp.c:13923)
  FuncDef:  (at pp.c:13927)
    Decl: name='Msp430TimerCapComP__5__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:13927)
      FuncDecl: quals=None (at pp.c:13927)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Compare__fired', quals=[] (at pp.c:13927)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13927)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430Compare__fired' (at pp.c:13929)
  FuncDef:  (at pp.c:13934)
    Decl: name='Msp430TimerCapComP__5__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:13934)
      FuncDecl: quals=None (at pp.c:13934)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Capture__getEvent', quals=[] (at pp.c:13934)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13935)
      Return:  (at pp.c:13936)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13936)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='406U' (at pp.c:13936)
  FuncDef:  (at pp.c:13940)
    Decl: name='Msp430TimerCapComP__5__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:13940)
      FuncDecl: quals=None (at pp.c:13940)
        ParamList:  (at pp.c:13940)
          Decl: name='n', quals=[], storage=[] (at pp.c:13940)
            TypeDecl: declname='n', quals=[] (at pp.c:13940)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Capture__default__captured', quals=[] (at pp.c:13940)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13941)
  FuncDef:  (at pp.c:13945)
    Decl: name='Msp430TimerCapComP__5__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:13945)
      FuncDecl: quals=None (at pp.c:13945)
        ParamList:  (at pp.c:13945)
          Decl: name='time', quals=[], storage=[] (at pp.c:13945)
            TypeDecl: declname='time', quals=[] (at pp.c:13945)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Capture__captured', quals=[] (at pp.c:13945)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13945)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Capture__default__captured' (at pp.c:13947)
        ExprList:  (at pp.c:13947)
          ID: name='time' (at pp.c:13947)
  FuncDef:  (at pp.c:13952)
    Decl: name='Msp430TimerCapComP__5__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:13952)
      FuncDecl: quals=None (at pp.c:13952)
        ParamList:  (at pp.c:13952)
          Decl: name='x', quals=[], storage=[] (at pp.c:13952)
            TypeDecl: declname='x', quals=[] (at pp.c:13952)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__int2CC', quals=[] (at pp.c:13952)
          IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
    Compound:  (at pp.c:13954)
      Decl: name='c', quals=[], storage=[] (at pp.c:13963)
        TypeDecl: declname='c', quals=[] (at pp.c:13963)
          Union: name='Msp430TimerCapComP__5____nesc_unnamed4408', packed=False (at pp.c:13956)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:13958)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:13960)
                IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
        ExprList:  (at pp.c:13963)
          Assignment: op='=' (at pp.c:13963)
            StructRef: type='.' (at pp.c:13963)
              ID: name='f' (at pp.c:13963)
            ID: name='x' (at pp.c:13963)
      Return:  (at pp.c:13966)
        StructRef: type='.' (at pp.c:13966)
          ID: name='c' (at pp.c:13966)
          ID: name='t' (at pp.c:13966)
  FuncDef:  (at pp.c:13970)
    Decl: name='Msp430TimerCapComP__5__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:13970)
      FuncDecl: quals=None (at pp.c:13970)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Control__getControl', quals=[] (at pp.c:13970)
          IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
    Compound:  (at pp.c:13971)
      Return:  (at pp.c:13972)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__5__int2CC' (at pp.c:13972)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:13972)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='390U' (at pp.c:13972)
  FuncDef:  (at pp.c:13976)
    Decl: name='Msp430TimerCapComP__5__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:13976)
      FuncDecl: quals=None (at pp.c:13976)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Event__fired', quals=[] (at pp.c:13976)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13977)
      If:  (at pp.c:13978)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__5__Control__getControl' (at pp.c:13978)
          ID: name='cap' (at pp.c:13978)
        Compound:  (at pp.c:13978)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__5__Capture__captured' (at pp.c:13979)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__5__Capture__getEvent' (at pp.c:13979)
        Compound:  (at pp.c:13981)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__5__Compare__fired' (at pp.c:13983)
  FuncDef:  (at pp.c:13988)
    Decl: name='TransformCounterC__1__CounterFrom__get', quals=[], storage=['static', 'inline'] (at pp.c:13988)
      FuncDecl: quals=None (at pp.c:13988)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__1__CounterFrom__get', quals=[] (at pp.c:13988)
          IdentifierType: names=['TransformCounterC__1__CounterFrom__size_type'] (at None)
    Compound:  (at pp.c:13988)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13990)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13990)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13994)
        ID: name='__nesc_result' (at pp.c:13994)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Counter__get' (at pp.c:13994)
      Return:  (at pp.c:13998)
        ID: name='__nesc_result' (at pp.c:13998)
  FuncDef:  (at pp.c:14009)
    Decl: name='TransformCounterC__1__CounterFrom__isOverflowPending', quals=[], storage=['static', 'inline'] (at pp.c:14009)
      FuncDecl: quals=None (at pp.c:14009)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__1__CounterFrom__isOverflowPending', quals=[] (at pp.c:14009)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:14009)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14011)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14011)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14015)
        ID: name='__nesc_result' (at pp.c:14015)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Counter__isOverflowPending' (at pp.c:14015)
      Return:  (at pp.c:14019)
        ID: name='__nesc_result' (at pp.c:14019)
  FuncDef:  (at pp.c:14024)
    Decl: name='Msp430TimerCapComP__5__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:14024)
      FuncDecl: quals=None (at pp.c:14024)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Control__enableEvents', quals=[] (at pp.c:14024)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14025)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14026)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='390U' (at pp.c:14026)
        Constant: type='int', value='0x0010' (at pp.c:14026)
  FuncDef:  (at pp.c:14030)
    Decl: name='Msp430AlarmC__1__Msp430TimerControl__enableEvents', quals=[], storage=['static', 'inline'] (at pp.c:14030)
      FuncDecl: quals=None (at pp.c:14030)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__enableEvents', quals=[] (at pp.c:14030)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14030)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Control__enableEvents' (at pp.c:14032)
  FuncDef:  (at pp.c:14037)
    Decl: name='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:14037)
      FuncDecl: quals=None (at pp.c:14037)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[] (at pp.c:14037)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14038)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14039)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='390U' (at pp.c:14039)
        UnaryOp: op='~' (at pp.c:14039)
          Constant: type='int', value='0x0001' (at pp.c:14039)
  FuncDef:  (at pp.c:14043)
    Decl: name='Msp430AlarmC__1__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static', 'inline'] (at pp.c:14043)
      FuncDecl: quals=None (at pp.c:14043)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:14043)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14043)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Control__clearPendingInterrupt' (at pp.c:14045)
  FuncDef:  (at pp.c:14050)
    Decl: name='Msp430TimerCapComP__5__Compare__setEvent', quals=[], storage=['inline', 'static'] (at pp.c:14050)
      FuncDecl: quals=None (at pp.c:14050)
        ParamList:  (at pp.c:14050)
          Decl: name='x', quals=[], storage=[] (at pp.c:14050)
            TypeDecl: declname='x', quals=[] (at pp.c:14050)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEvent', quals=[] (at pp.c:14050)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14051)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14052)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='406U' (at pp.c:14052)
        ID: name='x' (at pp.c:14052)
  FuncDef:  (at pp.c:14056)
    Decl: name='Msp430AlarmC__1__Msp430Compare__setEvent', quals=[], storage=['static', 'inline'] (at pp.c:14056)
      FuncDecl: quals=None (at pp.c:14056)
        ParamList:  (at pp.c:14056)
          Decl: name='time', quals=[], storage=[] (at pp.c:14056)
            TypeDecl: declname='time', quals=[] (at pp.c:14056)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__setEvent', quals=[] (at pp.c:14056)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14056)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Compare__setEvent' (at pp.c:14058)
        ExprList:  (at pp.c:14058)
          ID: name='time' (at pp.c:14058)
  FuncDef:  (at pp.c:14063)
    Decl: name='Msp430TimerCapComP__5__Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:14063)
      FuncDecl: quals=None (at pp.c:14063)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Timer__get', quals=[] (at pp.c:14063)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:14063)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14065)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14065)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14069)
        ID: name='__nesc_result' (at pp.c:14069)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__get' (at pp.c:14069)
      Return:  (at pp.c:14073)
        ID: name='__nesc_result' (at pp.c:14073)
  FuncDef:  (at pp.c:14078)
    Decl: name='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[], storage=['inline', 'static'] (at pp.c:14078)
      FuncDecl: quals=None (at pp.c:14078)
        ParamList:  (at pp.c:14078)
          Decl: name='x', quals=[], storage=[] (at pp.c:14078)
            TypeDecl: declname='x', quals=[] (at pp.c:14078)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[] (at pp.c:14078)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14079)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14080)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='406U' (at pp.c:14080)
        BinaryOp: op='+' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__5__Timer__get' (at pp.c:14080)
          ID: name='x' (at pp.c:14080)
  FuncDef:  (at pp.c:14084)
    Decl: name='Msp430AlarmC__1__Msp430Compare__setEventFromNow', quals=[], storage=['static', 'inline'] (at pp.c:14084)
      FuncDecl: quals=None (at pp.c:14084)
        ParamList:  (at pp.c:14084)
          Decl: name='delta', quals=[], storage=[] (at pp.c:14084)
            TypeDecl: declname='delta', quals=[] (at pp.c:14084)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__setEventFromNow', quals=[] (at pp.c:14084)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14084)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Compare__setEventFromNow' (at pp.c:14086)
        ExprList:  (at pp.c:14086)
          ID: name='delta' (at pp.c:14086)
  FuncDef:  (at pp.c:14091)
    Decl: name='Msp430AlarmC__1__Msp430Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:14091)
      FuncDecl: quals=None (at pp.c:14091)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430Timer__get', quals=[] (at pp.c:14091)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:14091)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14093)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14093)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14097)
        ID: name='__nesc_result' (at pp.c:14097)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__get' (at pp.c:14097)
      Return:  (at pp.c:14101)
        ID: name='__nesc_result' (at pp.c:14101)
  FuncDef:  (at pp.c:14106)
    Decl: name='Msp430AlarmC__1__Alarm__startAt', quals=[], storage=['inline', 'static'] (at pp.c:14106)
      FuncDecl: quals=None (at pp.c:14106)
        ParamList:  (at pp.c:14106)
          Decl: name='t0', quals=[], storage=[] (at pp.c:14106)
            TypeDecl: declname='t0', quals=[] (at pp.c:14106)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:14106)
            TypeDecl: declname='dt', quals=[] (at pp.c:14106)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Alarm__startAt', quals=[] (at pp.c:14106)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14107)
      Compound:  (at pp.c:14109)
        Decl: name='now', quals=[], storage=[] (at pp.c:14110)
          TypeDecl: declname='now', quals=[] (at pp.c:14110)
            IdentifierType: names=['uint16_t'] (at None)
          FuncCall:  (at None)
            ID: name='Msp430AlarmC__1__Msp430Timer__get' (at pp.c:14110)
        Decl: name='elapsed', quals=[], storage=[] (at pp.c:14111)
          TypeDecl: declname='elapsed', quals=[] (at pp.c:14111)
            IdentifierType: names=['uint16_t'] (at None)
          BinaryOp: op='-' (at pp.c:14111)
            ID: name='now' (at pp.c:14111)
            ID: name='t0' (at pp.c:14111)
        If:  (at pp.c:14114)
          BinaryOp: op='>=' (at pp.c:14114)
            ID: name='elapsed' (at pp.c:14114)
            ID: name='dt' (at pp.c:14114)
          Compound:  (at pp.c:14115)
            FuncCall:  (at None)
              ID: name='Msp430AlarmC__1__Msp430Compare__setEventFromNow' (at pp.c:14116)
              ExprList:  (at pp.c:14116)
                Constant: type='int', value='2' (at pp.c:14116)
          Compound:  (at pp.c:14119)
            Decl: name='remaining', quals=[], storage=[] (at pp.c:14120)
              TypeDecl: declname='remaining', quals=[] (at pp.c:14120)
                IdentifierType: names=['uint16_t'] (at None)
              BinaryOp: op='-' (at pp.c:14120)
                ID: name='dt' (at pp.c:14120)
                ID: name='elapsed' (at pp.c:14120)
            If:  (at pp.c:14123)
              BinaryOp: op='<=' (at pp.c:14123)
                ID: name='remaining' (at pp.c:14123)
                Constant: type='int', value='2' (at pp.c:14123)
              Compound:  (at pp.c:14123)
                FuncCall:  (at None)
                  ID: name='Msp430AlarmC__1__Msp430Compare__setEventFromNow' (at pp.c:14124)
                  ExprList:  (at pp.c:14124)
                    Constant: type='int', value='2' (at pp.c:14124)
              Compound:  (at pp.c:14126)
                FuncCall:  (at None)
                  ID: name='Msp430AlarmC__1__Msp430Compare__setEvent' (at pp.c:14128)
                  ExprList:  (at pp.c:14128)
                    BinaryOp: op='+' (at pp.c:14128)
                      ID: name='now' (at pp.c:14128)
                      ID: name='remaining' (at pp.c:14128)
        FuncCall:  (at None)
          ID: name='Msp430AlarmC__1__Msp430TimerControl__clearPendingInterrupt' (at pp.c:14132)
        FuncCall:  (at None)
          ID: name='Msp430AlarmC__1__Msp430TimerControl__enableEvents' (at pp.c:14133)
  FuncDef:  (at pp.c:14138)
    Decl: name='TransformAlarmC__1__AlarmFrom__startAt', quals=[], storage=['static', 'inline'] (at pp.c:14138)
      FuncDecl: quals=None (at pp.c:14138)
        ParamList:  (at pp.c:14138)
          Decl: name='t0', quals=[], storage=[] (at pp.c:14138)
            TypeDecl: declname='t0', quals=[] (at pp.c:14138)
              IdentifierType: names=['TransformAlarmC__1__AlarmFrom__size_type'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:14138)
            TypeDecl: declname='dt', quals=[] (at pp.c:14138)
              IdentifierType: names=['TransformAlarmC__1__AlarmFrom__size_type'] (at None)
        TypeDecl: declname='TransformAlarmC__1__AlarmFrom__startAt', quals=[] (at pp.c:14138)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14138)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Alarm__startAt' (at pp.c:14140)
        ExprList:  (at pp.c:14140)
          ID: name='t0' (at pp.c:14140)
          ID: name='dt' (at pp.c:14140)
  FuncDef:  (at pp.c:14145)
    Decl: name='Msp430TimerCapComP__6__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:14145)
      FuncDecl: quals=None (at pp.c:14145)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Compare__default__fired', quals=[] (at pp.c:14145)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14146)
  FuncDef:  (at pp.c:14150)
    Decl: name='Msp430TimerCapComP__6__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:14150)
      FuncDecl: quals=None (at pp.c:14150)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Compare__fired', quals=[] (at pp.c:14150)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14150)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__6__Compare__default__fired' (at pp.c:14152)
  FuncDef:  (at pp.c:14157)
    Decl: name='Msp430TimerCapComP__6__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:14157)
      FuncDecl: quals=None (at pp.c:14157)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Capture__getEvent', quals=[] (at pp.c:14157)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:14158)
      Return:  (at pp.c:14159)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14159)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='408U' (at pp.c:14159)
  FuncDef:  (at pp.c:14163)
    Decl: name='Msp430TimerCapComP__6__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:14163)
      FuncDecl: quals=None (at pp.c:14163)
        ParamList:  (at pp.c:14163)
          Decl: name='n', quals=[], storage=[] (at pp.c:14163)
            TypeDecl: declname='n', quals=[] (at pp.c:14163)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Capture__default__captured', quals=[] (at pp.c:14163)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14164)
  FuncDef:  (at pp.c:14168)
    Decl: name='Msp430TimerCapComP__6__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:14168)
      FuncDecl: quals=None (at pp.c:14168)
        ParamList:  (at pp.c:14168)
          Decl: name='time', quals=[], storage=[] (at pp.c:14168)
            TypeDecl: declname='time', quals=[] (at pp.c:14168)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Capture__captured', quals=[] (at pp.c:14168)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14168)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__6__Capture__default__captured' (at pp.c:14170)
        ExprList:  (at pp.c:14170)
          ID: name='time' (at pp.c:14170)
  FuncDef:  (at pp.c:14175)
    Decl: name='Msp430TimerCapComP__6__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:14175)
      FuncDecl: quals=None (at pp.c:14175)
        ParamList:  (at pp.c:14175)
          Decl: name='x', quals=[], storage=[] (at pp.c:14175)
            TypeDecl: declname='x', quals=[] (at pp.c:14175)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__int2CC', quals=[] (at pp.c:14175)
          IdentifierType: names=['Msp430TimerCapComP__6__cc_t'] (at None)
    Compound:  (at pp.c:14177)
      Decl: name='c', quals=[], storage=[] (at pp.c:14186)
        TypeDecl: declname='c', quals=[] (at pp.c:14186)
          Union: name='Msp430TimerCapComP__6____nesc_unnamed4409', packed=False (at pp.c:14179)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:14181)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:14183)
                IdentifierType: names=['Msp430TimerCapComP__6__cc_t'] (at None)
        ExprList:  (at pp.c:14186)
          Assignment: op='=' (at pp.c:14186)
            StructRef: type='.' (at pp.c:14186)
              ID: name='f' (at pp.c:14186)
            ID: name='x' (at pp.c:14186)
      Return:  (at pp.c:14189)
        StructRef: type='.' (at pp.c:14189)
          ID: name='c' (at pp.c:14189)
          ID: name='t' (at pp.c:14189)
  FuncDef:  (at pp.c:14193)
    Decl: name='Msp430TimerCapComP__6__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:14193)
      FuncDecl: quals=None (at pp.c:14193)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Control__getControl', quals=[] (at pp.c:14193)
          IdentifierType: names=['Msp430TimerCapComP__6__cc_t'] (at None)
    Compound:  (at pp.c:14194)
      Return:  (at pp.c:14195)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__6__int2CC' (at pp.c:14195)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:14195)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='392U' (at pp.c:14195)
  FuncDef:  (at pp.c:14199)
    Decl: name='Msp430TimerCapComP__6__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:14199)
      FuncDecl: quals=None (at pp.c:14199)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Event__fired', quals=[] (at pp.c:14199)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14200)
      If:  (at pp.c:14201)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__6__Control__getControl' (at pp.c:14201)
          ID: name='cap' (at pp.c:14201)
        Compound:  (at pp.c:14201)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__6__Capture__captured' (at pp.c:14202)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__6__Capture__getEvent' (at pp.c:14202)
        Compound:  (at pp.c:14204)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__6__Compare__fired' (at pp.c:14206)
  FuncDef:  (at pp.c:14213)
    Decl: name='Msp430TimerCapComP__7__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:14213)
      FuncDecl: quals=None (at pp.c:14213)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Compare__default__fired', quals=[] (at pp.c:14213)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14214)
  FuncDef:  (at pp.c:14218)
    Decl: name='Msp430TimerCapComP__7__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:14218)
      FuncDecl: quals=None (at pp.c:14218)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Compare__fired', quals=[] (at pp.c:14218)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14218)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__7__Compare__default__fired' (at pp.c:14220)
  FuncDef:  (at pp.c:14225)
    Decl: name='Msp430TimerCapComP__7__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:14225)
      FuncDecl: quals=None (at pp.c:14225)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Capture__getEvent', quals=[] (at pp.c:14225)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:14226)
      Return:  (at pp.c:14227)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14227)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='410U' (at pp.c:14227)
  FuncDef:  (at pp.c:14231)
    Decl: name='Msp430TimerCapComP__7__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:14231)
      FuncDecl: quals=None (at pp.c:14231)
        ParamList:  (at pp.c:14231)
          Decl: name='n', quals=[], storage=[] (at pp.c:14231)
            TypeDecl: declname='n', quals=[] (at pp.c:14231)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Capture__default__captured', quals=[] (at pp.c:14231)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14232)
  FuncDef:  (at pp.c:14236)
    Decl: name='Msp430TimerCapComP__7__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:14236)
      FuncDecl: quals=None (at pp.c:14236)
        ParamList:  (at pp.c:14236)
          Decl: name='time', quals=[], storage=[] (at pp.c:14236)
            TypeDecl: declname='time', quals=[] (at pp.c:14236)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Capture__captured', quals=[] (at pp.c:14236)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14236)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__7__Capture__default__captured' (at pp.c:14238)
        ExprList:  (at pp.c:14238)
          ID: name='time' (at pp.c:14238)
  FuncDef:  (at pp.c:14243)
    Decl: name='Msp430TimerCapComP__7__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:14243)
      FuncDecl: quals=None (at pp.c:14243)
        ParamList:  (at pp.c:14243)
          Decl: name='x', quals=[], storage=[] (at pp.c:14243)
            TypeDecl: declname='x', quals=[] (at pp.c:14243)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__int2CC', quals=[] (at pp.c:14243)
          IdentifierType: names=['Msp430TimerCapComP__7__cc_t'] (at None)
    Compound:  (at pp.c:14245)
      Decl: name='c', quals=[], storage=[] (at pp.c:14254)
        TypeDecl: declname='c', quals=[] (at pp.c:14254)
          Union: name='Msp430TimerCapComP__7____nesc_unnamed4410', packed=False (at pp.c:14247)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:14249)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:14251)
                IdentifierType: names=['Msp430TimerCapComP__7__cc_t'] (at None)
        ExprList:  (at pp.c:14254)
          Assignment: op='=' (at pp.c:14254)
            StructRef: type='.' (at pp.c:14254)
              ID: name='f' (at pp.c:14254)
            ID: name='x' (at pp.c:14254)
      Return:  (at pp.c:14257)
        StructRef: type='.' (at pp.c:14257)
          ID: name='c' (at pp.c:14257)
          ID: name='t' (at pp.c:14257)
  FuncDef:  (at pp.c:14261)
    Decl: name='Msp430TimerCapComP__7__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:14261)
      FuncDecl: quals=None (at pp.c:14261)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Control__getControl', quals=[] (at pp.c:14261)
          IdentifierType: names=['Msp430TimerCapComP__7__cc_t'] (at None)
    Compound:  (at pp.c:14262)
      Return:  (at pp.c:14263)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__7__int2CC' (at pp.c:14263)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:14263)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='394U' (at pp.c:14263)
  FuncDef:  (at pp.c:14267)
    Decl: name='Msp430TimerCapComP__7__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:14267)
      FuncDecl: quals=None (at pp.c:14267)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Event__fired', quals=[] (at pp.c:14267)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14268)
      If:  (at pp.c:14269)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__7__Control__getControl' (at pp.c:14269)
          ID: name='cap' (at pp.c:14269)
        Compound:  (at pp.c:14269)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__7__Capture__captured' (at pp.c:14270)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__7__Capture__getEvent' (at pp.c:14270)
        Compound:  (at pp.c:14272)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__7__Compare__fired' (at pp.c:14274)
  FuncDef:  (at pp.c:14281)
    Decl: name='Msp430TimerCapComP__8__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:14281)
      FuncDecl: quals=None (at pp.c:14281)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Compare__default__fired', quals=[] (at pp.c:14281)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14282)
  FuncDef:  (at pp.c:14286)
    Decl: name='Msp430TimerCapComP__8__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:14286)
      FuncDecl: quals=None (at pp.c:14286)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Compare__fired', quals=[] (at pp.c:14286)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14286)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__8__Compare__default__fired' (at pp.c:14288)
  FuncDef:  (at pp.c:14293)
    Decl: name='Msp430TimerCapComP__8__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:14293)
      FuncDecl: quals=None (at pp.c:14293)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Capture__getEvent', quals=[] (at pp.c:14293)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:14294)
      Return:  (at pp.c:14295)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14295)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='412U' (at pp.c:14295)
  FuncDef:  (at pp.c:14299)
    Decl: name='Msp430TimerCapComP__8__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:14299)
      FuncDecl: quals=None (at pp.c:14299)
        ParamList:  (at pp.c:14299)
          Decl: name='n', quals=[], storage=[] (at pp.c:14299)
            TypeDecl: declname='n', quals=[] (at pp.c:14299)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Capture__default__captured', quals=[] (at pp.c:14299)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14300)
  FuncDef:  (at pp.c:14304)
    Decl: name='Msp430TimerCapComP__8__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:14304)
      FuncDecl: quals=None (at pp.c:14304)
        ParamList:  (at pp.c:14304)
          Decl: name='time', quals=[], storage=[] (at pp.c:14304)
            TypeDecl: declname='time', quals=[] (at pp.c:14304)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Capture__captured', quals=[] (at pp.c:14304)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14304)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__8__Capture__default__captured' (at pp.c:14306)
        ExprList:  (at pp.c:14306)
          ID: name='time' (at pp.c:14306)
  FuncDef:  (at pp.c:14311)
    Decl: name='Msp430TimerCapComP__8__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:14311)
      FuncDecl: quals=None (at pp.c:14311)
        ParamList:  (at pp.c:14311)
          Decl: name='x', quals=[], storage=[] (at pp.c:14311)
            TypeDecl: declname='x', quals=[] (at pp.c:14311)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__int2CC', quals=[] (at pp.c:14311)
          IdentifierType: names=['Msp430TimerCapComP__8__cc_t'] (at None)
    Compound:  (at pp.c:14313)
      Decl: name='c', quals=[], storage=[] (at pp.c:14322)
        TypeDecl: declname='c', quals=[] (at pp.c:14322)
          Union: name='Msp430TimerCapComP__8____nesc_unnamed4411', packed=False (at pp.c:14315)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:14317)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:14319)
                IdentifierType: names=['Msp430TimerCapComP__8__cc_t'] (at None)
        ExprList:  (at pp.c:14322)
          Assignment: op='=' (at pp.c:14322)
            StructRef: type='.' (at pp.c:14322)
              ID: name='f' (at pp.c:14322)
            ID: name='x' (at pp.c:14322)
      Return:  (at pp.c:14325)
        StructRef: type='.' (at pp.c:14325)
          ID: name='c' (at pp.c:14325)
          ID: name='t' (at pp.c:14325)
  FuncDef:  (at pp.c:14329)
    Decl: name='Msp430TimerCapComP__8__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:14329)
      FuncDecl: quals=None (at pp.c:14329)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Control__getControl', quals=[] (at pp.c:14329)
          IdentifierType: names=['Msp430TimerCapComP__8__cc_t'] (at None)
    Compound:  (at pp.c:14330)
      Return:  (at pp.c:14331)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__8__int2CC' (at pp.c:14331)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:14331)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='396U' (at pp.c:14331)
  FuncDef:  (at pp.c:14335)
    Decl: name='Msp430TimerCapComP__8__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:14335)
      FuncDecl: quals=None (at pp.c:14335)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Event__fired', quals=[] (at pp.c:14335)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14336)
      If:  (at pp.c:14337)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__8__Control__getControl' (at pp.c:14337)
          ID: name='cap' (at pp.c:14337)
        Compound:  (at pp.c:14337)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__8__Capture__captured' (at pp.c:14338)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__8__Capture__getEvent' (at pp.c:14338)
        Compound:  (at pp.c:14340)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__8__Compare__fired' (at pp.c:14342)
  FuncDef:  (at pp.c:14349)
    Decl: name='Msp430TimerCapComP__9__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:14349)
      FuncDecl: quals=None (at pp.c:14349)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Compare__default__fired', quals=[] (at pp.c:14349)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14350)
  FuncDef:  (at pp.c:14354)
    Decl: name='Msp430TimerCapComP__9__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:14354)
      FuncDecl: quals=None (at pp.c:14354)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Compare__fired', quals=[] (at pp.c:14354)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14354)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__9__Compare__default__fired' (at pp.c:14356)
  FuncDef:  (at pp.c:14361)
    Decl: name='Msp430TimerCapComP__9__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:14361)
      FuncDecl: quals=None (at pp.c:14361)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Capture__getEvent', quals=[] (at pp.c:14361)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:14362)
      Return:  (at pp.c:14363)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14363)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='414U' (at pp.c:14363)
  FuncDef:  (at pp.c:14367)
    Decl: name='Msp430TimerCapComP__9__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:14367)
      FuncDecl: quals=None (at pp.c:14367)
        ParamList:  (at pp.c:14367)
          Decl: name='n', quals=[], storage=[] (at pp.c:14367)
            TypeDecl: declname='n', quals=[] (at pp.c:14367)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Capture__default__captured', quals=[] (at pp.c:14367)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14368)
  FuncDef:  (at pp.c:14372)
    Decl: name='Msp430TimerCapComP__9__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:14372)
      FuncDecl: quals=None (at pp.c:14372)
        ParamList:  (at pp.c:14372)
          Decl: name='time', quals=[], storage=[] (at pp.c:14372)
            TypeDecl: declname='time', quals=[] (at pp.c:14372)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Capture__captured', quals=[] (at pp.c:14372)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14372)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__9__Capture__default__captured' (at pp.c:14374)
        ExprList:  (at pp.c:14374)
          ID: name='time' (at pp.c:14374)
  FuncDef:  (at pp.c:14379)
    Decl: name='Msp430TimerCapComP__9__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:14379)
      FuncDecl: quals=None (at pp.c:14379)
        ParamList:  (at pp.c:14379)
          Decl: name='x', quals=[], storage=[] (at pp.c:14379)
            TypeDecl: declname='x', quals=[] (at pp.c:14379)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__int2CC', quals=[] (at pp.c:14379)
          IdentifierType: names=['Msp430TimerCapComP__9__cc_t'] (at None)
    Compound:  (at pp.c:14381)
      Decl: name='c', quals=[], storage=[] (at pp.c:14390)
        TypeDecl: declname='c', quals=[] (at pp.c:14390)
          Union: name='Msp430TimerCapComP__9____nesc_unnamed4412', packed=False (at pp.c:14383)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:14385)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:14387)
                IdentifierType: names=['Msp430TimerCapComP__9__cc_t'] (at None)
        ExprList:  (at pp.c:14390)
          Assignment: op='=' (at pp.c:14390)
            StructRef: type='.' (at pp.c:14390)
              ID: name='f' (at pp.c:14390)
            ID: name='x' (at pp.c:14390)
      Return:  (at pp.c:14393)
        StructRef: type='.' (at pp.c:14393)
          ID: name='c' (at pp.c:14393)
          ID: name='t' (at pp.c:14393)
  FuncDef:  (at pp.c:14397)
    Decl: name='Msp430TimerCapComP__9__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:14397)
      FuncDecl: quals=None (at pp.c:14397)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Control__getControl', quals=[] (at pp.c:14397)
          IdentifierType: names=['Msp430TimerCapComP__9__cc_t'] (at None)
    Compound:  (at pp.c:14398)
      Return:  (at pp.c:14399)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__9__int2CC' (at pp.c:14399)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:14399)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='398U' (at pp.c:14399)
  FuncDef:  (at pp.c:14403)
    Decl: name='Msp430TimerCapComP__9__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:14403)
      FuncDecl: quals=None (at pp.c:14403)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Event__fired', quals=[] (at pp.c:14403)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14404)
      If:  (at pp.c:14405)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__9__Control__getControl' (at pp.c:14405)
          ID: name='cap' (at pp.c:14405)
        Compound:  (at pp.c:14405)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__9__Capture__captured' (at pp.c:14406)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__9__Capture__getEvent' (at pp.c:14406)
        Compound:  (at pp.c:14408)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__9__Compare__fired' (at pp.c:14410)
  FuncDef:  (at pp.c:14415)
    Decl: name='Msp430TimerP__1__VectorTimerX1__fired', quals=[], storage=['inline', 'static'] (at pp.c:14415)
      FuncDecl: quals=None (at pp.c:14415)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__VectorTimerX1__fired', quals=[] (at pp.c:14415)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14416)
      Decl: name='n', quals=[], storage=[] (at pp.c:14417)
        TypeDecl: declname='n', quals=[] (at pp.c:14417)
          IdentifierType: names=['uint8_t'] (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14417)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='286U' (at pp.c:14417)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__1__Event__fired' (at pp.c:14420)
        ExprList:  (at pp.c:14420)
          BinaryOp: op='>>' (at pp.c:14420)
            ID: name='n' (at pp.c:14420)
            Constant: type='int', value='1' (at pp.c:14420)
  FuncDef:  (at pp.c:14424)
    Decl: name='Msp430TimerCommonP__VectorTimerB1__fired', quals=[], storage=['static', 'inline'] (at pp.c:14424)
      FuncDecl: quals=None (at pp.c:14424)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCommonP__VectorTimerB1__fired', quals=[] (at pp.c:14424)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14424)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__1__VectorTimerX1__fired' (at pp.c:14426)
  FuncDef:  (at pp.c:14431)
    Decl: name='SchedulerBasicP__Scheduler__init', quals=[], storage=['inline', 'static'] (at pp.c:14431)
      FuncDecl: quals=None (at pp.c:14431)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SchedulerBasicP__Scheduler__init', quals=[] (at pp.c:14431)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14432)
      Compound:  (at pp.c:14434)
        FuncCall:  (at None)
          ID: name='memset' (at pp.c:14435)
          ExprList:  (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:14435)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['void'] (at None)
              ID: name='SchedulerBasicP__m_next' (at pp.c:14435)
            ID: name='SchedulerBasicP__NO_TASK' (at pp.c:14435)
            UnaryOp: op='sizeof' (at pp.c:14435)
              ID: name='SchedulerBasicP__m_next' (at pp.c:14435)
        Assignment: op='=' (at pp.c:14436)
          ID: name='SchedulerBasicP__m_head' (at pp.c:14436)
          ID: name='SchedulerBasicP__NO_TASK' (at pp.c:14436)
        Assignment: op='=' (at pp.c:14437)
          ID: name='SchedulerBasicP__m_tail' (at pp.c:14437)
          ID: name='SchedulerBasicP__NO_TASK' (at pp.c:14437)
  FuncDef:  (at pp.c:14442)
    Decl: name='RealMainP__Scheduler__init', quals=[], storage=['static', 'inline'] (at pp.c:14442)
      FuncDecl: quals=None (at pp.c:14442)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__Scheduler__init', quals=[] (at pp.c:14442)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14442)
      FuncCall:  (at None)
        ID: name='SchedulerBasicP__Scheduler__init' (at pp.c:14444)
  FuncDef:  (at pp.c:14449)
    Decl: name='HplMsp430GeneralIOP__38__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:14449)
      FuncDecl: quals=None (at pp.c:14449)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__38__IO__set', quals=[] (at pp.c:14449)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14451)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14454)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='49U' (at pp.c:14454)
        BinaryOp: op='<<' (at pp.c:14454)
          Constant: type='int', value='0x01' (at pp.c:14454)
          Constant: type='int', value='6' (at pp.c:14454)
  FuncDef:  (at pp.c:14458)
    Decl: name='Msp430GpioC__2__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:14458)
      FuncDecl: quals=None (at pp.c:14458)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__set', quals=[] (at pp.c:14458)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14458)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__38__IO__set' (at pp.c:14460)
  FuncDef:  (at pp.c:14465)
    Decl: name='Msp430GpioC__2__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:14465)
      FuncDecl: quals=None (at pp.c:14465)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__GeneralIO__set', quals=[] (at pp.c:14465)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14467)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__HplGeneralIO__set' (at pp.c:14469)
  FuncDef:  (at pp.c:14473)
    Decl: name='LedsP__Led2__set', quals=[], storage=['static', 'inline'] (at pp.c:14473)
      FuncDecl: quals=None (at pp.c:14473)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led2__set', quals=[] (at pp.c:14473)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14473)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__GeneralIO__set' (at pp.c:14475)
  FuncDef:  (at pp.c:14480)
    Decl: name='HplMsp430GeneralIOP__37__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:14480)
      FuncDecl: quals=None (at pp.c:14480)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__37__IO__set', quals=[] (at pp.c:14480)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14482)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14485)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='49U' (at pp.c:14485)
        BinaryOp: op='<<' (at pp.c:14485)
          Constant: type='int', value='0x01' (at pp.c:14485)
          Constant: type='int', value='5' (at pp.c:14485)
  FuncDef:  (at pp.c:14489)
    Decl: name='Msp430GpioC__1__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:14489)
      FuncDecl: quals=None (at pp.c:14489)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__1__HplGeneralIO__set', quals=[] (at pp.c:14489)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14489)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__37__IO__set' (at pp.c:14491)
  FuncDef:  (at pp.c:14496)
    Decl: name='Msp430GpioC__1__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:14496)
      FuncDecl: quals=None (at pp.c:14496)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__1__GeneralIO__set', quals=[] (at pp.c:14496)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14498)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__1__HplGeneralIO__set' (at pp.c:14500)
  FuncDef:  (at pp.c:14504)
    Decl: name='LedsP__Led1__set', quals=[], storage=['static', 'inline'] (at pp.c:14504)
      FuncDecl: quals=None (at pp.c:14504)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led1__set', quals=[] (at pp.c:14504)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14504)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__1__GeneralIO__set' (at pp.c:14506)
  FuncDef:  (at pp.c:14511)
    Decl: name='Msp430GpioC__0__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:14511)
      FuncDecl: quals=None (at pp.c:14511)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__set', quals=[] (at pp.c:14511)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14511)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__36__IO__set' (at pp.c:14513)
  FuncDef:  (at pp.c:14518)
    Decl: name='Msp430GpioC__0__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:14518)
      FuncDecl: quals=None (at pp.c:14518)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__GeneralIO__set', quals=[] (at pp.c:14518)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14520)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__HplGeneralIO__set' (at pp.c:14522)
  FuncDef:  (at pp.c:14526)
    Decl: name='LedsP__Led0__set', quals=[], storage=['static', 'inline'] (at pp.c:14526)
      FuncDecl: quals=None (at pp.c:14526)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led0__set', quals=[] (at pp.c:14526)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14526)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__GeneralIO__set' (at pp.c:14528)
  FuncDef:  (at pp.c:14533)
    Decl: name='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14533)
      FuncDecl: quals=None (at pp.c:14533)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[] (at pp.c:14533)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14535)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14538)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='50U' (at pp.c:14538)
        BinaryOp: op='<<' (at pp.c:14538)
          Constant: type='int', value='0x01' (at pp.c:14538)
          Constant: type='int', value='6' (at pp.c:14538)
  FuncDef:  (at pp.c:14542)
    Decl: name='Msp430GpioC__2__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14542)
      FuncDecl: quals=None (at pp.c:14542)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__makeOutput', quals=[] (at pp.c:14542)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14542)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__38__IO__makeOutput' (at pp.c:14544)
  FuncDef:  (at pp.c:14549)
    Decl: name='Msp430GpioC__2__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14549)
      FuncDecl: quals=None (at pp.c:14549)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__GeneralIO__makeOutput', quals=[] (at pp.c:14549)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14551)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__HplGeneralIO__makeOutput' (at pp.c:14553)
  FuncDef:  (at pp.c:14557)
    Decl: name='LedsP__Led2__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14557)
      FuncDecl: quals=None (at pp.c:14557)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led2__makeOutput', quals=[] (at pp.c:14557)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14557)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__GeneralIO__makeOutput' (at pp.c:14559)
  FuncDef:  (at pp.c:14564)
    Decl: name='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14564)
      FuncDecl: quals=None (at pp.c:14564)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[] (at pp.c:14564)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14566)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14569)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='50U' (at pp.c:14569)
        BinaryOp: op='<<' (at pp.c:14569)
          Constant: type='int', value='0x01' (at pp.c:14569)
          Constant: type='int', value='5' (at pp.c:14569)
  FuncDef:  (at pp.c:14573)
    Decl: name='Msp430GpioC__1__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14573)
      FuncDecl: quals=None (at pp.c:14573)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__1__HplGeneralIO__makeOutput', quals=[] (at pp.c:14573)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14573)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__37__IO__makeOutput' (at pp.c:14575)
  FuncDef:  (at pp.c:14580)
    Decl: name='Msp430GpioC__1__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14580)
      FuncDecl: quals=None (at pp.c:14580)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__1__GeneralIO__makeOutput', quals=[] (at pp.c:14580)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14582)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__1__HplGeneralIO__makeOutput' (at pp.c:14584)
  FuncDef:  (at pp.c:14588)
    Decl: name='LedsP__Led1__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14588)
      FuncDecl: quals=None (at pp.c:14588)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led1__makeOutput', quals=[] (at pp.c:14588)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14588)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__1__GeneralIO__makeOutput' (at pp.c:14590)
  FuncDef:  (at pp.c:14595)
    Decl: name='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14595)
      FuncDecl: quals=None (at pp.c:14595)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[] (at pp.c:14595)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14597)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14600)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='50U' (at pp.c:14600)
        BinaryOp: op='<<' (at pp.c:14600)
          Constant: type='int', value='0x01' (at pp.c:14600)
          Constant: type='int', value='4' (at pp.c:14600)
  FuncDef:  (at pp.c:14604)
    Decl: name='Msp430GpioC__0__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14604)
      FuncDecl: quals=None (at pp.c:14604)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__makeOutput', quals=[] (at pp.c:14604)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14604)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__36__IO__makeOutput' (at pp.c:14606)
  FuncDef:  (at pp.c:14611)
    Decl: name='Msp430GpioC__0__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14611)
      FuncDecl: quals=None (at pp.c:14611)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__GeneralIO__makeOutput', quals=[] (at pp.c:14611)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14613)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__HplGeneralIO__makeOutput' (at pp.c:14615)
  FuncDef:  (at pp.c:14619)
    Decl: name='LedsP__Led0__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14619)
      FuncDecl: quals=None (at pp.c:14619)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led0__makeOutput', quals=[] (at pp.c:14619)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14619)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__GeneralIO__makeOutput' (at pp.c:14621)
  FuncDef:  (at pp.c:14626)
    Decl: name='LedsP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:14626)
      FuncDecl: quals=None (at pp.c:14626)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Init__init', quals=[] (at pp.c:14626)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14628)
      Compound:  (at pp.c:14631)
        FuncCall:  (at None)
          ID: name='LedsP__Led0__makeOutput' (at pp.c:14633)
        FuncCall:  (at None)
          ID: name='LedsP__Led1__makeOutput' (at pp.c:14634)
        FuncCall:  (at None)
          ID: name='LedsP__Led2__makeOutput' (at pp.c:14635)
        FuncCall:  (at None)
          ID: name='LedsP__Led0__set' (at pp.c:14636)
        FuncCall:  (at None)
          ID: name='LedsP__Led1__set' (at pp.c:14637)
        FuncCall:  (at None)
          ID: name='LedsP__Led2__set' (at pp.c:14638)
      Return:  (at pp.c:14640)
        ID: name='SUCCESS' (at pp.c:14640)
  FuncDef:  (at pp.c:14644)
    Decl: name='PlatformP__LedsInit__init', quals=[], storage=['static', 'inline'] (at pp.c:14644)
      FuncDecl: quals=None (at pp.c:14644)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PlatformP__LedsInit__init', quals=[] (at pp.c:14644)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14644)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14646)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14646)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14650)
        ID: name='__nesc_result' (at pp.c:14650)
        FuncCall:  (at None)
          ID: name='LedsP__Init__init' (at pp.c:14650)
      Return:  (at pp.c:14654)
        ID: name='__nesc_result' (at pp.c:14654)
  FuncDef:  (at pp.c:14659)
    Decl: name='TOSH_SET_SIMO0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14659)
      FuncDecl: quals=None (at pp.c:14659)
        TypeDecl: declname='TOSH_SET_SIMO0_PIN', quals=[] (at pp.c:14659)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14661)
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static'] (at pp.c:14663)
        TypeDecl: declname='r@"0x0019"', quals=['volatile'] (at pp.c:14663)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14666)
        ID: name='r' (at pp.c:14666)
        BinaryOp: op='<<' (at pp.c:14666)
          Constant: type='int', value='1' (at pp.c:14666)
          Constant: type='int', value='1' (at pp.c:14666)
  FuncDef:  (at pp.c:14670)
    Decl: name='TOSH_SET_UCLK0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14670)
      FuncDecl: quals=None (at pp.c:14670)
        TypeDecl: declname='TOSH_SET_UCLK0_PIN', quals=[] (at pp.c:14670)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14672)
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static'] (at pp.c:14674)
        TypeDecl: declname='r@"0x0019"', quals=['volatile'] (at pp.c:14674)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14677)
        ID: name='r' (at pp.c:14677)
        BinaryOp: op='<<' (at pp.c:14677)
          Constant: type='int', value='1' (at pp.c:14677)
          Constant: type='int', value='3' (at pp.c:14677)
  FuncDef:  (at pp.c:14681)
    Decl: name='TOSH_SET_FLASH_CS_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14681)
      FuncDecl: quals=None (at pp.c:14681)
        TypeDecl: declname='TOSH_SET_FLASH_CS_PIN', quals=[] (at pp.c:14681)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14683)
      Decl: name='r@"0x001D"', quals=['volatile'], storage=['static'] (at pp.c:14685)
        TypeDecl: declname='r@"0x001D"', quals=['volatile'] (at pp.c:14685)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14688)
        ID: name='r' (at pp.c:14688)
        BinaryOp: op='<<' (at pp.c:14688)
          Constant: type='int', value='1' (at pp.c:14688)
          Constant: type='int', value='4' (at pp.c:14688)
  FuncDef:  (at pp.c:14692)
    Decl: name='TOSH_CLR_UCLK0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14692)
      FuncDecl: quals=None (at pp.c:14692)
        TypeDecl: declname='TOSH_CLR_UCLK0_PIN', quals=[] (at pp.c:14692)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14694)
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static'] (at pp.c:14696)
        TypeDecl: declname='r@"0x0019"', quals=['volatile'] (at pp.c:14696)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='&=' (at pp.c:14699)
        ID: name='r' (at pp.c:14699)
        UnaryOp: op='~' (at pp.c:14699)
          BinaryOp: op='<<' (at pp.c:14699)
            Constant: type='int', value='1' (at pp.c:14699)
            Constant: type='int', value='3' (at pp.c:14699)
  FuncDef:  (at pp.c:14703)
    Decl: name='TOSH_CLR_FLASH_CS_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14703)
      FuncDecl: quals=None (at pp.c:14703)
        TypeDecl: declname='TOSH_CLR_FLASH_CS_PIN', quals=[] (at pp.c:14703)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14705)
      Decl: name='r@"0x001D"', quals=['volatile'], storage=['static'] (at pp.c:14707)
        TypeDecl: declname='r@"0x001D"', quals=['volatile'] (at pp.c:14707)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='&=' (at pp.c:14710)
        ID: name='r' (at pp.c:14710)
        UnaryOp: op='~' (at pp.c:14710)
          BinaryOp: op='<<' (at pp.c:14710)
            Constant: type='int', value='1' (at pp.c:14710)
            Constant: type='int', value='4' (at pp.c:14710)
  FuncDef:  (at pp.c:14714)
    Decl: name='MotePlatformC__TOSH_wait', quals=[], storage=['__inline', 'static'] (at pp.c:14714)
      FuncDecl: quals=None (at pp.c:14714)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='MotePlatformC__TOSH_wait', quals=[] (at pp.c:14714)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14716)
  FuncDef:  (at pp.c:14720)
    Decl: name='TOSH_SET_FLASH_HOLD_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14720)
      FuncDecl: quals=None (at pp.c:14720)
        TypeDecl: declname='TOSH_SET_FLASH_HOLD_PIN', quals=[] (at pp.c:14720)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14722)
      Decl: name='r@"0x001D"', quals=['volatile'], storage=['static'] (at pp.c:14724)
        TypeDecl: declname='r@"0x001D"', quals=['volatile'] (at pp.c:14724)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14727)
        ID: name='r' (at pp.c:14727)
        BinaryOp: op='<<' (at pp.c:14727)
          Constant: type='int', value='1' (at pp.c:14727)
          Constant: type='int', value='7' (at pp.c:14727)
  FuncDef:  (at pp.c:14731)
    Decl: name='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:14731)
      FuncDecl: quals=None (at pp.c:14731)
        TypeDecl: declname='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[] (at pp.c:14731)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14733)
      Decl: name='r@"0x001E"', quals=['volatile'], storage=['static'] (at pp.c:14735)
        TypeDecl: declname='r@"0x001E"', quals=['volatile'] (at pp.c:14735)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14738)
        ID: name='r' (at pp.c:14738)
        BinaryOp: op='<<' (at pp.c:14738)
          Constant: type='int', value='1' (at pp.c:14738)
          Constant: type='int', value='4' (at pp.c:14738)
  FuncDef:  (at pp.c:14742)
    Decl: name='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:14742)
      FuncDecl: quals=None (at pp.c:14742)
        TypeDecl: declname='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[] (at pp.c:14742)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14744)
      Decl: name='r@"0x001E"', quals=['volatile'], storage=['static'] (at pp.c:14746)
        TypeDecl: declname='r@"0x001E"', quals=['volatile'] (at pp.c:14746)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14749)
        ID: name='r' (at pp.c:14749)
        BinaryOp: op='<<' (at pp.c:14749)
          Constant: type='int', value='1' (at pp.c:14749)
          Constant: type='int', value='7' (at pp.c:14749)
  FuncDef:  (at pp.c:14753)
    Decl: name='TOSH_MAKE_UCLK0_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:14753)
      FuncDecl: quals=None (at pp.c:14753)
        TypeDecl: declname='TOSH_MAKE_UCLK0_OUTPUT', quals=[] (at pp.c:14753)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14755)
      Decl: name='r@"0x001A"', quals=['volatile'], storage=['static'] (at pp.c:14757)
        TypeDecl: declname='r@"0x001A"', quals=['volatile'] (at pp.c:14757)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14760)
        ID: name='r' (at pp.c:14760)
        BinaryOp: op='<<' (at pp.c:14760)
          Constant: type='int', value='1' (at pp.c:14760)
          Constant: type='int', value='3' (at pp.c:14760)
  FuncDef:  (at pp.c:14764)
    Decl: name='TOSH_MAKE_SIMO0_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:14764)
      FuncDecl: quals=None (at pp.c:14764)
        TypeDecl: declname='TOSH_MAKE_SIMO0_OUTPUT', quals=[] (at pp.c:14764)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14766)
      Decl: name='r@"0x001A"', quals=['volatile'], storage=['static'] (at pp.c:14768)
        TypeDecl: declname='r@"0x001A"', quals=['volatile'] (at pp.c:14768)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14771)
        ID: name='r' (at pp.c:14771)
        BinaryOp: op='<<' (at pp.c:14771)
          Constant: type='int', value='1' (at pp.c:14771)
          Constant: type='int', value='1' (at pp.c:14771)
  FuncDef:  (at pp.c:14775)
    Decl: name='MotePlatformC__TOSH_FLASH_M25P_DP', quals=[], storage=['inline', 'static'] (at pp.c:14775)
      FuncDecl: quals=None (at pp.c:14775)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='MotePlatformC__TOSH_FLASH_M25P_DP', quals=[] (at pp.c:14775)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14777)
      FuncCall:  (at None)
        ID: name='TOSH_MAKE_SIMO0_OUTPUT' (at pp.c:14779)
      FuncCall:  (at None)
        ID: name='TOSH_MAKE_UCLK0_OUTPUT' (at pp.c:14780)
      FuncCall:  (at None)
        ID: name='TOSH_MAKE_FLASH_HOLD_OUTPUT' (at pp.c:14781)
      FuncCall:  (at None)
        ID: name='TOSH_MAKE_FLASH_CS_OUTPUT' (at pp.c:14782)
      FuncCall:  (at None)
        ID: name='TOSH_SET_FLASH_HOLD_PIN' (at pp.c:14783)
      FuncCall:  (at None)
        ID: name='TOSH_SET_FLASH_CS_PIN' (at pp.c:14784)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_wait' (at pp.c:14786)
      FuncCall:  (at None)
        ID: name='TOSH_CLR_FLASH_CS_PIN' (at pp.c:14789)
      FuncCall:  (at None)
        ID: name='TOSH_CLR_UCLK0_PIN' (at pp.c:14790)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14792)
        ExprList:  (at pp.c:14792)
          ID: name='TRUE' (at pp.c:14792)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14793)
        ExprList:  (at pp.c:14793)
          ID: name='FALSE' (at pp.c:14793)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14794)
        ExprList:  (at pp.c:14794)
          ID: name='TRUE' (at pp.c:14794)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14795)
        ExprList:  (at pp.c:14795)
          ID: name='TRUE' (at pp.c:14795)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14796)
        ExprList:  (at pp.c:14796)
          ID: name='TRUE' (at pp.c:14796)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14797)
        ExprList:  (at pp.c:14797)
          ID: name='FALSE' (at pp.c:14797)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14798)
        ExprList:  (at pp.c:14798)
          ID: name='FALSE' (at pp.c:14798)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14799)
        ExprList:  (at pp.c:14799)
          ID: name='TRUE' (at pp.c:14799)
      FuncCall:  (at None)
        ID: name='TOSH_SET_FLASH_CS_PIN' (at pp.c:14801)
      FuncCall:  (at None)
        ID: name='TOSH_SET_UCLK0_PIN' (at pp.c:14802)
      FuncCall:  (at None)
        ID: name='TOSH_SET_SIMO0_PIN' (at pp.c:14803)
  FuncDef:  (at pp.c:14807)
    Decl: name='MotePlatformC__uwait', quals=[], storage=['__inline', 'static'] (at pp.c:14807)
      FuncDecl: quals=None (at pp.c:14807)
        ParamList:  (at pp.c:14807)
          Decl: name='u', quals=[], storage=[] (at pp.c:14807)
            TypeDecl: declname='u', quals=[] (at pp.c:14807)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='MotePlatformC__uwait', quals=[] (at pp.c:14807)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14809)
      Decl: name='t0', quals=[], storage=[] (at pp.c:14810)
        TypeDecl: declname='t0', quals=[] (at pp.c:14810)
          IdentifierType: names=['uint16_t'] (at None)
        ID: name='TA0R' (at pp.c:14810)
      While:  (at pp.c:14813)
        BinaryOp: op='<=' (at pp.c:14813)
          BinaryOp: op='-' (at pp.c:14813)
            ID: name='TA0R' (at pp.c:14813)
            ID: name='t0' (at pp.c:14813)
          ID: name='u' (at pp.c:14813)
  FuncDef:  (at pp.c:14817)
    Decl: name='MotePlatformC__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:14817)
      FuncDecl: quals=None (at pp.c:14817)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='MotePlatformC__Init__init', quals=[] (at pp.c:14817)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14819)
      Compound:  (at pp.c:14822)
        Assignment: op='=' (at pp.c:14823)
          ID: name='P1SEL' (at pp.c:14823)
          Constant: type='int', value='0' (at pp.c:14823)
        Assignment: op='=' (at pp.c:14824)
          ID: name='P2SEL' (at pp.c:14824)
          Constant: type='int', value='0' (at pp.c:14824)
        Assignment: op='=' (at pp.c:14825)
          ID: name='P3SEL' (at pp.c:14825)
          Constant: type='int', value='0' (at pp.c:14825)
        Assignment: op='=' (at pp.c:14826)
          ID: name='P4SEL' (at pp.c:14826)
          Constant: type='int', value='0' (at pp.c:14826)
        Assignment: op='=' (at pp.c:14827)
          ID: name='P5SEL' (at pp.c:14827)
          Constant: type='int', value='0' (at pp.c:14827)
        Assignment: op='=' (at pp.c:14828)
          ID: name='P6SEL' (at pp.c:14828)
          Constant: type='int', value='0' (at pp.c:14828)
        Assignment: op='=' (at pp.c:14830)
          ID: name='P1OUT' (at pp.c:14830)
          Constant: type='int', value='0x00' (at pp.c:14830)
        Assignment: op='=' (at pp.c:14831)
          ID: name='P1DIR' (at pp.c:14831)
          Constant: type='int', value='0xe0' (at pp.c:14831)
        Assignment: op='=' (at pp.c:14833)
          ID: name='P2OUT' (at pp.c:14833)
          Constant: type='int', value='0x30' (at pp.c:14833)
        Assignment: op='=' (at pp.c:14834)
          ID: name='P2DIR' (at pp.c:14834)
          Constant: type='int', value='0x7b' (at pp.c:14834)
        Assignment: op='=' (at pp.c:14836)
          ID: name='P3OUT' (at pp.c:14836)
          Constant: type='int', value='0x00' (at pp.c:14836)
        Assignment: op='=' (at pp.c:14837)
          ID: name='P3DIR' (at pp.c:14837)
          Constant: type='int', value='0xf1' (at pp.c:14837)
        Assignment: op='=' (at pp.c:14839)
          ID: name='P4OUT' (at pp.c:14839)
          Constant: type='int', value='0xdd' (at pp.c:14839)
        Assignment: op='=' (at pp.c:14840)
          ID: name='P4DIR' (at pp.c:14840)
          Constant: type='int', value='0xfd' (at pp.c:14840)
        Assignment: op='=' (at pp.c:14842)
          ID: name='P5OUT' (at pp.c:14842)
          Constant: type='int', value='0xff' (at pp.c:14842)
        Assignment: op='=' (at pp.c:14843)
          ID: name='P5DIR' (at pp.c:14843)
          Constant: type='int', value='0xff' (at pp.c:14843)
        Assignment: op='=' (at pp.c:14845)
          ID: name='P6OUT' (at pp.c:14845)
          Constant: type='int', value='0x00' (at pp.c:14845)
        Assignment: op='=' (at pp.c:14846)
          ID: name='P6DIR' (at pp.c:14846)
          Constant: type='int', value='0xff' (at pp.c:14846)
        Assignment: op='=' (at pp.c:14848)
          ID: name='P1IE' (at pp.c:14848)
          Constant: type='int', value='0' (at pp.c:14848)
        Assignment: op='=' (at pp.c:14849)
          ID: name='P2IE' (at pp.c:14849)
          Constant: type='int', value='0' (at pp.c:14849)
        FuncCall:  (at None)
          ID: name='MotePlatformC__uwait' (at pp.c:14856)
          ExprList:  (at pp.c:14856)
            BinaryOp: op='*' (at pp.c:14856)
              Constant: type='int', value='1024' (at pp.c:14856)
              Constant: type='int', value='10' (at pp.c:14856)
        FuncCall:  (at None)
          ID: name='MotePlatformC__TOSH_FLASH_M25P_DP' (at pp.c:14858)
      Return:  (at pp.c:14861)
        ID: name='SUCCESS' (at pp.c:14861)
  FuncDef:  (at pp.c:14865)
    Decl: name='PlatformP__MoteInit__init', quals=[], storage=['static', 'inline'] (at pp.c:14865)
      FuncDecl: quals=None (at pp.c:14865)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PlatformP__MoteInit__init', quals=[] (at pp.c:14865)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14865)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14867)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14867)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14871)
        ID: name='__nesc_result' (at pp.c:14871)
        FuncCall:  (at None)
          ID: name='MotePlatformC__Init__init' (at pp.c:14871)
      Return:  (at pp.c:14875)
        ID: name='__nesc_result' (at pp.c:14875)
  FuncDef:  (at pp.c:14880)
    Decl: name='Msp430ClockP__startTimerB', quals=[], storage=['inline', 'static'] (at pp.c:14880)
      FuncDecl: quals=None (at pp.c:14880)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__startTimerB', quals=[] (at pp.c:14880)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14881)
      Assignment: op='=' (at pp.c:14883)
        ID: name='Msp430ClockP__TBCTL' (at pp.c:14883)
        BinaryOp: op='|' (at pp.c:14883)
          Constant: type='int', value='0x0020' (at pp.c:14883)
          BinaryOp: op='&' (at pp.c:14883)
            ID: name='Msp430ClockP__TBCTL' (at pp.c:14883)
            UnaryOp: op='~' (at pp.c:14883)
              BinaryOp: op='|' (at pp.c:14883)
                Constant: type='int', value='0x0020' (at pp.c:14883)
                Constant: type='int', value='0x0010' (at pp.c:14883)
  FuncDef:  (at pp.c:14887)
    Decl: name='Msp430ClockP__startTimerA', quals=[], storage=['inline', 'static'] (at pp.c:14887)
      FuncDecl: quals=None (at pp.c:14887)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__startTimerA', quals=[] (at pp.c:14887)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14888)
      Assignment: op='=' (at pp.c:14890)
        ID: name='Msp430ClockP__TA0CTL' (at pp.c:14890)
        BinaryOp: op='|' (at pp.c:14890)
          Constant: type='int', value='0x0020' (at pp.c:14890)
          BinaryOp: op='&' (at pp.c:14890)
            ID: name='Msp430ClockP__TA0CTL' (at pp.c:14890)
            UnaryOp: op='~' (at pp.c:14890)
              BinaryOp: op='|' (at pp.c:14890)
                Constant: type='int', value='0x0020' (at pp.c:14890)
                Constant: type='int', value='0x0010' (at pp.c:14890)
  FuncDef:  (at pp.c:14894)
    Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[], storage=['inline', 'static'] (at pp.c:14894)
      FuncDecl: quals=None (at pp.c:14894)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[] (at pp.c:14894)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14895)
      Assignment: op='=' (at pp.c:14896)
        ID: name='TBR' (at pp.c:14896)
        Constant: type='int', value='0' (at pp.c:14896)
      Assignment: op='=' (at pp.c:14906)
        ID: name='Msp430ClockP__TBCTL' (at pp.c:14906)
        BinaryOp: op='|' (at pp.c:14906)
          Constant: type='int', value='0x0100' (at pp.c:14906)
          Constant: type='int', value='0x0002' (at pp.c:14906)
  FuncDef:  (at pp.c:14910)
    Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[], storage=['inline', 'static'] (at pp.c:14910)
      FuncDecl: quals=None (at pp.c:14910)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[] (at pp.c:14910)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14911)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerB' (at pp.c:14912)
  FuncDef:  (at pp.c:14916)
    Decl: name='Msp430ClockP__Msp430ClockInit__initTimerB', quals=[], storage=['static', 'inline'] (at pp.c:14916)
      FuncDecl: quals=None (at pp.c:14916)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initTimerB', quals=[] (at pp.c:14916)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14916)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__default__initTimerB' (at pp.c:14918)
  FuncDef:  (at pp.c:14923)
    Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[], storage=['inline', 'static'] (at pp.c:14923)
      FuncDecl: quals=None (at pp.c:14923)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[] (at pp.c:14923)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14924)
      Assignment: op='=' (at pp.c:14925)
        ID: name='TA0R' (at pp.c:14925)
        Constant: type='int', value='0' (at pp.c:14925)
      Assignment: op='=' (at pp.c:14935)
        ID: name='Msp430ClockP__TA0CTL' (at pp.c:14935)
        BinaryOp: op='|' (at pp.c:14935)
          Constant: type='int', value='0x0200' (at pp.c:14935)
          Constant: type='int', value='0x0002' (at pp.c:14935)
  FuncDef:  (at pp.c:14939)
    Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[], storage=['inline', 'static'] (at pp.c:14939)
      FuncDecl: quals=None (at pp.c:14939)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[] (at pp.c:14939)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14940)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerA' (at pp.c:14941)
  FuncDef:  (at pp.c:14945)
    Decl: name='Msp430ClockP__Msp430ClockInit__initTimerA', quals=[], storage=['static', 'inline'] (at pp.c:14945)
      FuncDecl: quals=None (at pp.c:14945)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initTimerA', quals=[] (at pp.c:14945)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14945)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__default__initTimerA' (at pp.c:14947)
  FuncDef:  (at pp.c:14952)
    Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[], storage=['inline', 'static'] (at pp.c:14952)
      FuncDecl: quals=None (at pp.c:14952)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[] (at pp.c:14952)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14953)
      Assignment: op='=' (at pp.c:14959)
        ID: name='BCSCTL1' (at pp.c:14959)
        BinaryOp: op='|' (at pp.c:14959)
          Constant: type='int', value='0x80' (at pp.c:14959)
          BinaryOp: op='&' (at pp.c:14959)
            ID: name='BCSCTL1' (at pp.c:14959)
            BinaryOp: op='|' (at pp.c:14959)
              BinaryOp: op='|' (at pp.c:14959)
                Constant: type='int', value='0x04' (at pp.c:14959)
                Constant: type='int', value='0x02' (at pp.c:14959)
              Constant: type='int', value='0x01' (at pp.c:14959)
      Assignment: op='=' (at pp.c:14967)
        ID: name='BCSCTL2' (at pp.c:14967)
        Constant: type='int', value='0x04' (at pp.c:14967)
      Assignment: op='&=' (at pp.c:14970)
        ID: name='Msp430ClockP__IE1' (at pp.c:14970)
        UnaryOp: op='~' (at pp.c:14970)
          BinaryOp: op='<<' (at pp.c:14970)
            Constant: type='int', value='1' (at pp.c:14970)
            Constant: type='int', value='1' (at pp.c:14970)
  FuncDef:  (at pp.c:14974)
    Decl: name='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[], storage=['inline', 'static'] (at pp.c:14974)
      FuncDecl: quals=None (at pp.c:14974)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[] (at pp.c:14974)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14975)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__defaultInitClocks' (at pp.c:14976)
  FuncDef:  (at pp.c:14980)
    Decl: name='Msp430ClockP__Msp430ClockInit__initClocks', quals=[], storage=['static', 'inline'] (at pp.c:14980)
      FuncDecl: quals=None (at pp.c:14980)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initClocks', quals=[] (at pp.c:14980)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14980)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__default__initClocks' (at pp.c:14982)
  FuncDef:  (at pp.c:14987)
    Decl: name='Msp430ClockP__test_calib_busywait_delta', quals=[], storage=['inline', 'static'] (at pp.c:14987)
      FuncDecl: quals=None (at pp.c:14987)
        ParamList:  (at pp.c:14987)
          Decl: name='calib', quals=[], storage=[] (at pp.c:14987)
            TypeDecl: declname='calib', quals=[] (at pp.c:14987)
              IdentifierType: names=['int'] (at None)
        TypeDecl: declname='Msp430ClockP__test_calib_busywait_delta', quals=[] (at pp.c:14987)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:14988)
      Decl: name='aclk_count', quals=[], storage=[] (at pp.c:14989)
        TypeDecl: declname='aclk_count', quals=[] (at pp.c:14989)
          IdentifierType: names=['int8_t'] (at None)
        Constant: type='int', value='2' (at pp.c:14989)
      Decl: name='dco_prev', quals=[], storage=[] (at pp.c:14990)
        TypeDecl: declname='dco_prev', quals=[] (at pp.c:14990)
          IdentifierType: names=['uint16_t'] (at None)
        Constant: type='int', value='0' (at pp.c:14990)
      Decl: name='dco_curr', quals=[], storage=[] (at pp.c:14991)
        TypeDecl: declname='dco_curr', quals=[] (at pp.c:14991)
          IdentifierType: names=['uint16_t'] (at None)
        Constant: type='int', value='0' (at pp.c:14991)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__set_dco_calib' (at pp.c:14993)
        ExprList:  (at pp.c:14993)
          ID: name='calib' (at pp.c:14993)
      While:  (at pp.c:14995)
        BinaryOp: op='>' (at pp.c:14995)
          UnaryOp: op='p--' (at pp.c:14995)
            ID: name='aclk_count' (at pp.c:14995)
          Constant: type='int', value='0' (at pp.c:14995)
        Compound:  (at pp.c:14996)
          Assignment: op='=' (at pp.c:14997)
            ID: name='TBCCR0' (at pp.c:14997)
            BinaryOp: op='+' (at pp.c:14997)
              ID: name='TBR' (at pp.c:14997)
              ID: name='Msp430ClockP__ACLK_CALIB_PERIOD' (at pp.c:14997)
          Assignment: op='&=' (at pp.c:14998)
            ID: name='TBCCTL0' (at pp.c:14998)
            UnaryOp: op='~' (at pp.c:14998)
              Constant: type='int', value='0x0001' (at pp.c:14998)
          While:  (at pp.c:14999)
            BinaryOp: op='==' (at pp.c:14999)
              BinaryOp: op='&' (at pp.c:14999)
                ID: name='TBCCTL0' (at pp.c:14999)
                Constant: type='int', value='0x0001' (at pp.c:14999)
              Constant: type='int', value='0' (at pp.c:14999)
          Assignment: op='=' (at pp.c:15000)
            ID: name='dco_prev' (at pp.c:15000)
            ID: name='dco_curr' (at pp.c:15000)
          Assignment: op='=' (at pp.c:15001)
            ID: name='dco_curr' (at pp.c:15001)
            ID: name='TA0R' (at pp.c:15001)
      Return:  (at pp.c:15004)
        BinaryOp: op='-' (at pp.c:15004)
          ID: name='dco_curr' (at pp.c:15004)
          ID: name='dco_prev' (at pp.c:15004)
  FuncDef:  (at pp.c:15010)
    Decl: name='Msp430ClockP__busyCalibrateDco', quals=[], storage=['inline', 'static'] (at pp.c:15010)
      FuncDecl: quals=None (at pp.c:15010)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__busyCalibrateDco', quals=[] (at pp.c:15010)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15011)
      Decl: name='calib', quals=[], storage=[] (at pp.c:15013)
        TypeDecl: declname='calib', quals=[] (at pp.c:15013)
          IdentifierType: names=['int'] (at None)
      Decl: name='step', quals=[], storage=[] (at pp.c:15014)
        TypeDecl: declname='step', quals=[] (at pp.c:15014)
          IdentifierType: names=['int'] (at None)
      For:  (at pp.c:15021)
        ExprList:  (at pp.c:15021)
          Assignment: op='=' (at pp.c:15021)
            ID: name='calib' (at pp.c:15021)
            Constant: type='int', value='0' (at pp.c:15021)
          Assignment: op='=' (at pp.c:15021)
            ID: name='step' (at pp.c:15021)
            Constant: type='int', value='0x800' (at pp.c:15021)
        BinaryOp: op='!=' (at pp.c:15021)
          ID: name='step' (at pp.c:15021)
          Constant: type='int', value='0' (at pp.c:15021)
        Assignment: op='>>=' (at pp.c:15021)
          ID: name='step' (at pp.c:15021)
          Constant: type='int', value='1' (at pp.c:15021)
        Compound:  (at pp.c:15022)
          If:  (at pp.c:15024)
            BinaryOp: op='<=' (at None)
              FuncCall:  (at None)
                ID: name='Msp430ClockP__test_calib_busywait_delta' (at pp.c:15024)
                ExprList:  (at pp.c:15024)
                  BinaryOp: op='|' (at pp.c:15024)
                    ID: name='calib' (at pp.c:15024)
                    ID: name='step' (at pp.c:15024)
              ID: name='Msp430ClockP__TARGET_DCO_DELTA' (at pp.c:15024)
            Compound:  (at pp.c:15024)
              Assignment: op='|=' (at pp.c:15025)
                ID: name='calib' (at pp.c:15025)
                ID: name='step' (at pp.c:15025)
      If:  (at pp.c:15029)
        BinaryOp: op='==' (at pp.c:15029)
          BinaryOp: op='&' (at pp.c:15029)
            ID: name='calib' (at pp.c:15029)
            Constant: type='int', value='0x0e0' (at pp.c:15029)
          Constant: type='int', value='0x0e0' (at pp.c:15029)
        Compound:  (at pp.c:15029)
          Assignment: op='&=' (at pp.c:15030)
            ID: name='calib' (at pp.c:15030)
            UnaryOp: op='~' (at pp.c:15030)
              Constant: type='int', value='0x01f' (at pp.c:15030)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__set_dco_calib' (at pp.c:15032)
        ExprList:  (at pp.c:15032)
          ID: name='calib' (at pp.c:15032)
  FuncDef:  (at pp.c:15036)
    Decl: name='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[], storage=['inline', 'static'] (at pp.c:15036)
      FuncDecl: quals=None (at pp.c:15036)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[] (at pp.c:15036)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15037)
      Assignment: op='=' (at pp.c:15041)
        ID: name='Msp430ClockP__TA0CTL' (at pp.c:15041)
        BinaryOp: op='|' (at pp.c:15041)
          Constant: type='int', value='0x0200' (at pp.c:15041)
          Constant: type='int', value='0x0020' (at pp.c:15041)
      Assignment: op='=' (at pp.c:15042)
        ID: name='Msp430ClockP__TBCTL' (at pp.c:15042)
        BinaryOp: op='|' (at pp.c:15042)
          Constant: type='int', value='0x0100' (at pp.c:15042)
          Constant: type='int', value='0x0020' (at pp.c:15042)
      Assignment: op='=' (at pp.c:15043)
        ID: name='BCSCTL1' (at pp.c:15043)
        BinaryOp: op='|' (at pp.c:15043)
          Constant: type='int', value='0x80' (at pp.c:15043)
          Constant: type='int', value='0x04' (at pp.c:15043)
      Assignment: op='=' (at pp.c:15044)
        ID: name='BCSCTL2' (at pp.c:15044)
        Constant: type='int', value='0' (at pp.c:15044)
      Assignment: op='=' (at pp.c:15045)
        ID: name='TBCCTL0' (at pp.c:15045)
        Constant: type='int', value='0x4000' (at pp.c:15045)
  FuncDef:  (at pp.c:15049)
    Decl: name='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[], storage=['inline', 'static'] (at pp.c:15049)
      FuncDecl: quals=None (at pp.c:15049)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[] (at pp.c:15049)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15050)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate' (at pp.c:15051)
  FuncDef:  (at pp.c:15055)
    Decl: name='Msp430ClockP__Msp430ClockInit__setupDcoCalibrate', quals=[], storage=['static', 'inline'] (at pp.c:15055)
      FuncDecl: quals=None (at pp.c:15055)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__setupDcoCalibrate', quals=[] (at pp.c:15055)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15055)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate' (at pp.c:15057)
  FuncDef:  (at pp.c:15062)
    Decl: name='Msp430ClockP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:15062)
      FuncDecl: quals=None (at pp.c:15062)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Init__init', quals=[] (at pp.c:15062)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15063)
      Assignment: op='=' (at pp.c:15065)
        ID: name='Msp430ClockP__TA0CTL' (at pp.c:15065)
        Constant: type='int', value='0x0004' (at pp.c:15065)
      Assignment: op='=' (at pp.c:15066)
        ID: name='Msp430ClockP__TA0IV' (at pp.c:15066)
        Constant: type='int', value='0' (at pp.c:15066)
      Assignment: op='=' (at pp.c:15067)
        ID: name='Msp430ClockP__TBCTL' (at pp.c:15067)
        Constant: type='int', value='0x0004' (at pp.c:15067)
      Assignment: op='=' (at pp.c:15068)
        ID: name='Msp430ClockP__TBIV' (at pp.c:15068)
        Constant: type='int', value='0' (at pp.c:15068)
      Compound:  (at pp.c:15071)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__Msp430ClockInit__setupDcoCalibrate' (at pp.c:15072)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__busyCalibrateDco' (at pp.c:15073)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__Msp430ClockInit__initClocks' (at pp.c:15074)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__Msp430ClockInit__initTimerA' (at pp.c:15075)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__Msp430ClockInit__initTimerB' (at pp.c:15076)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__startTimerA' (at pp.c:15077)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__startTimerB' (at pp.c:15078)
      Return:  (at pp.c:15081)
        ID: name='SUCCESS' (at pp.c:15081)
  FuncDef:  (at pp.c:15085)
    Decl: name='PlatformP__MoteClockInit__init', quals=[], storage=['static', 'inline'] (at pp.c:15085)
      FuncDecl: quals=None (at pp.c:15085)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PlatformP__MoteClockInit__init', quals=[] (at pp.c:15085)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15085)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15087)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15087)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15091)
        ID: name='__nesc_result' (at pp.c:15091)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__Init__init' (at pp.c:15091)
      Return:  (at pp.c:15095)
        ID: name='__nesc_result' (at pp.c:15095)
  FuncDef:  (at pp.c:15100)
    Decl: name='PlatformP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:15100)
      FuncDecl: quals=None (at pp.c:15100)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PlatformP__Init__init', quals=[] (at pp.c:15100)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15102)
      FuncCall:  (at None)
        ID: name='PlatformP__MoteClockInit__init' (at pp.c:15103)
      FuncCall:  (at None)
        ID: name='PlatformP__MoteInit__init' (at pp.c:15104)
      FuncCall:  (at None)
        ID: name='PlatformP__LedsInit__init' (at pp.c:15105)
      Return:  (at pp.c:15106)
        ID: name='SUCCESS' (at pp.c:15106)
  FuncDef:  (at pp.c:15110)
    Decl: name='RealMainP__PlatformInit__init', quals=[], storage=['static', 'inline'] (at pp.c:15110)
      FuncDecl: quals=None (at pp.c:15110)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__PlatformInit__init', quals=[] (at pp.c:15110)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15110)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15112)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15112)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15116)
        ID: name='__nesc_result' (at pp.c:15116)
        FuncCall:  (at None)
          ID: name='PlatformP__Init__init' (at pp.c:15116)
      Return:  (at pp.c:15120)
        ID: name='__nesc_result' (at pp.c:15120)
  FuncDef:  (at pp.c:15125)
    Decl: name='TOSH_CLR_SIMO0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:15125)
      FuncDecl: quals=None (at pp.c:15125)
        TypeDecl: declname='TOSH_CLR_SIMO0_PIN', quals=[] (at pp.c:15125)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15127)
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static'] (at pp.c:15129)
        TypeDecl: declname='r@"0x0019"', quals=['volatile'] (at pp.c:15129)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='&=' (at pp.c:15132)
        ID: name='r' (at pp.c:15132)
        UnaryOp: op='~' (at pp.c:15132)
          BinaryOp: op='<<' (at pp.c:15132)
            Constant: type='int', value='1' (at pp.c:15132)
            Constant: type='int', value='1' (at pp.c:15132)
  FuncDef:  (at pp.c:15136)
    Decl: name='RealMainP__Scheduler__runNextTask', quals=[], storage=['static', 'inline'] (at pp.c:15136)
      FuncDecl: quals=None (at pp.c:15136)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__Scheduler__runNextTask', quals=[] (at pp.c:15136)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:15136)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15138)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15138)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15142)
        ID: name='__nesc_result' (at pp.c:15142)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__Scheduler__runNextTask' (at pp.c:15142)
      Return:  (at pp.c:15146)
        ID: name='__nesc_result' (at pp.c:15146)
  FuncDef:  (at pp.c:15151)
    Decl: name='AMQueueEntryP__1__AMSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:15151)
      FuncDecl: quals=None (at pp.c:15151)
        ParamList:  (at pp.c:15151)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15151)
            PtrDecl: quals=[] (at pp.c:15151)
              TypeDecl: declname='msg', quals=[] (at pp.c:15151)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:15151)
            TypeDecl: declname='error', quals=[] (at pp.c:15151)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__1__AMSend__sendDone', quals=[] (at pp.c:15151)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15151)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__SerialSampleMsgSend__sendDone' (at pp.c:15153)
        ExprList:  (at pp.c:15153)
          ID: name='msg' (at pp.c:15153)
          ID: name='error' (at pp.c:15153)
  FuncDef:  (at pp.c:15158)
    Decl: name='AMQueueEntryP__1__Send__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:15158)
      FuncDecl: quals=None (at pp.c:15158)
        ParamList:  (at pp.c:15158)
          Decl: name='m', quals=[], storage=[] (at pp.c:15158)
            PtrDecl: quals=[] (at pp.c:15158)
              TypeDecl: declname='m', quals=[] (at pp.c:15158)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:15158)
            TypeDecl: declname='err', quals=[] (at pp.c:15158)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__1__Send__sendDone', quals=[] (at pp.c:15158)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15160)
      FuncCall:  (at None)
        ID: name='AMQueueEntryP__1__AMSend__sendDone' (at pp.c:15161)
        ExprList:  (at pp.c:15161)
          ID: name='m' (at pp.c:15161)
          ID: name='err' (at pp.c:15161)
  FuncDef:  (at pp.c:15165)
    Decl: name='AMQueueImplP__1__Send__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:15165)
      FuncDecl: quals=None (at pp.c:15165)
        ParamList:  (at pp.c:15165)
          Decl: name='id', quals=[], storage=[] (at pp.c:15165)
            TypeDecl: declname='id', quals=[] (at pp.c:15165)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15165)
            PtrDecl: quals=[] (at pp.c:15165)
              TypeDecl: declname='msg', quals=[] (at pp.c:15165)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:15165)
            TypeDecl: declname='err', quals=[] (at pp.c:15165)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__1__Send__default__sendDone', quals=[] (at pp.c:15165)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15167)
  FuncDef:  (at pp.c:15171)
    Decl: name='AMQueueImplP__1__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:15171)
      FuncDecl: quals=None (at pp.c:15171)
        ParamList:  (at pp.c:15171)
          Decl: name='arg_0x102bc1e18', quals=[], storage=[] (at pp.c:15171)
            TypeDecl: declname='arg_0x102bc1e18', quals=[] (at pp.c:15171)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15171)
            PtrDecl: quals=[] (at pp.c:15171)
              TypeDecl: declname='msg', quals=[] (at pp.c:15171)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:15171)
            TypeDecl: declname='error', quals=[] (at pp.c:15171)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__1__Send__sendDone', quals=[] (at pp.c:15171)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15171)
      Switch:  (at pp.c:15173)
        ID: name='arg_0x102bc1e18' (at pp.c:15173)
        Compound:  (at pp.c:15173)
          Case:  (at pp.c:15175)
            Constant: type='int', value='0U' (at pp.c:15175)
            FuncCall:  (at None)
              ID: name='AMQueueEntryP__1__Send__sendDone' (at pp.c:15177)
              ExprList:  (at pp.c:15177)
                ID: name='msg' (at pp.c:15177)
                ID: name='error' (at pp.c:15177)
          Break:  (at pp.c:15179)
          Default:  (at pp.c:15181)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__1__Send__default__sendDone' (at pp.c:15183)
              ExprList:  (at pp.c:15183)
                ID: name='arg_0x102bc1e18' (at pp.c:15183)
                ID: name='msg' (at pp.c:15183)
                ID: name='error' (at pp.c:15183)
          Break:  (at pp.c:15185)
  FuncDef:  (at pp.c:15192)
    Decl: name='AMQueueImplP__1__CancelTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:15192)
      FuncDecl: quals=None (at pp.c:15192)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__1__CancelTask__runTask', quals=[] (at pp.c:15192)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15194)
      Decl: name='i', quals=[], storage=[] (at pp.c:15195)
        TypeDecl: declname='i', quals=[] (at pp.c:15195)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='j', quals=[], storage=[] (at pp.c:15197)
        TypeDecl: declname='j', quals=[] (at pp.c:15197)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='mask', quals=[], storage=[] (at pp.c:15199)
        TypeDecl: declname='mask', quals=[] (at pp.c:15199)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='last', quals=[], storage=[] (at pp.c:15201)
        TypeDecl: declname='last', quals=[] (at pp.c:15201)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='msg', quals=[], storage=[] (at pp.c:15202)
        PtrDecl: quals=[] (at pp.c:15202)
          TypeDecl: declname='msg', quals=[] (at pp.c:15202)
            IdentifierType: names=['message_t'] (at None)
      For:  (at pp.c:15205)
        Assignment: op='=' (at pp.c:15205)
          ID: name='i' (at pp.c:15205)
          Constant: type='int', value='0' (at pp.c:15205)
        BinaryOp: op='<' (at pp.c:15205)
          ID: name='i' (at pp.c:15205)
          BinaryOp: op='+' (at pp.c:15205)
            BinaryOp: op='/' (at pp.c:15205)
              Constant: type='int', value='1' (at pp.c:15205)
              Constant: type='int', value='8' (at pp.c:15205)
            Constant: type='int', value='1' (at pp.c:15205)
        UnaryOp: op='p++' (at pp.c:15205)
          ID: name='i' (at pp.c:15205)
        Compound:  (at pp.c:15205)
          If:  (at pp.c:15206)
            ArrayRef:  (at pp.c:15206)
              ID: name='AMQueueImplP__1__cancelMask' (at pp.c:15206)
              ID: name='i' (at pp.c:15206)
            Compound:  (at pp.c:15206)
              For:  (at pp.c:15207)
                ExprList:  (at pp.c:15207)
                  Assignment: op='=' (at pp.c:15207)
                    ID: name='mask' (at pp.c:15207)
                    Constant: type='int', value='1' (at pp.c:15207)
                  Assignment: op='=' (at pp.c:15207)
                    ID: name='j' (at pp.c:15207)
                    Constant: type='int', value='0' (at pp.c:15207)
                BinaryOp: op='<' (at pp.c:15207)
                  ID: name='j' (at pp.c:15207)
                  Constant: type='int', value='8' (at pp.c:15207)
                UnaryOp: op='p++' (at pp.c:15207)
                  ID: name='j' (at pp.c:15207)
                Compound:  (at pp.c:15207)
                  If:  (at pp.c:15208)
                    BinaryOp: op='&' (at pp.c:15208)
                      ArrayRef:  (at pp.c:15208)
                        ID: name='AMQueueImplP__1__cancelMask' (at pp.c:15208)
                        ID: name='i' (at pp.c:15208)
                      ID: name='mask' (at pp.c:15208)
                    Compound:  (at pp.c:15208)
                      Assignment: op='=' (at pp.c:15209)
                        ID: name='last' (at pp.c:15209)
                        BinaryOp: op='+' (at pp.c:15209)
                          BinaryOp: op='*' (at pp.c:15209)
                            ID: name='i' (at pp.c:15209)
                            Constant: type='int', value='8' (at pp.c:15209)
                          ID: name='j' (at pp.c:15209)
                      Assignment: op='=' (at pp.c:15210)
                        ID: name='msg' (at pp.c:15210)
                        StructRef: type='.' (at pp.c:15210)
                          ArrayRef:  (at pp.c:15210)
                            ID: name='AMQueueImplP__1__queue' (at pp.c:15210)
                            ID: name='last' (at pp.c:15210)
                          ID: name='msg' (at pp.c:15210)
                      Assignment: op='=' (at pp.c:15211)
                        StructRef: type='.' (at pp.c:15211)
                          ArrayRef:  (at pp.c:15211)
                            ID: name='AMQueueImplP__1__queue' (at pp.c:15211)
                            ID: name='last' (at pp.c:15211)
                          ID: name='msg' (at pp.c:15211)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            PtrDecl: quals=[] (at pp.c:15211)
                              TypeDecl: declname=None, quals=[] (at None)
                                IdentifierType: names=['void'] (at None)
                          Constant: type='int', value='0' (at pp.c:15211)
                      Assignment: op='&=' (at pp.c:15212)
                        ArrayRef:  (at pp.c:15212)
                          ID: name='AMQueueImplP__1__cancelMask' (at pp.c:15212)
                          ID: name='i' (at pp.c:15212)
                        UnaryOp: op='~' (at pp.c:15212)
                          ID: name='mask' (at pp.c:15212)
                      FuncCall:  (at None)
                        ID: name='AMQueueImplP__1__Send__sendDone' (at pp.c:15213)
                        ExprList:  (at pp.c:15213)
                          ID: name='last' (at pp.c:15213)
                          ID: name='msg' (at pp.c:15213)
                          ID: name='ECANCEL' (at pp.c:15213)
                  Assignment: op='<<=' (at pp.c:15215)
                    ID: name='mask' (at pp.c:15215)
                    Constant: type='int', value='1' (at pp.c:15215)
  FuncDef:  (at pp.c:15222)
    Decl: name='QueueC__0__printQueue', quals=[], storage=['inline', 'static'] (at pp.c:15222)
      FuncDecl: quals=None (at pp.c:15222)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='QueueC__0__printQueue', quals=[] (at pp.c:15222)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15224)
  FuncDef:  (at pp.c:15228)
    Decl: name='QueueC__0__Queue__empty', quals=[], storage=['inline', 'static'] (at pp.c:15228)
      FuncDecl: quals=None (at pp.c:15228)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='QueueC__0__Queue__empty', quals=[] (at pp.c:15228)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:15230)
      Return:  (at pp.c:15231)
        BinaryOp: op='==' (at pp.c:15231)
          ID: name='QueueC__0__size' (at pp.c:15231)
          Constant: type='int', value='0' (at pp.c:15231)
  FuncDef:  (at pp.c:15242)
    Decl: name='QueueC__0__Queue__head', quals=[], storage=['inline', 'static'] (at pp.c:15242)
      FuncDecl: quals=None (at pp.c:15242)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='QueueC__0__Queue__head', quals=[] (at pp.c:15242)
          IdentifierType: names=['QueueC__0__queue_t'] (at None)
    Compound:  (at pp.c:15244)
      Return:  (at pp.c:15245)
        ArrayRef:  (at pp.c:15245)
          ID: name='QueueC__0__queue' (at pp.c:15245)
          ID: name='QueueC__0__head' (at pp.c:15245)
  FuncDef:  (at pp.c:15249)
    Decl: name='QueueC__0__Queue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:15249)
      FuncDecl: quals=None (at pp.c:15249)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='QueueC__0__Queue__dequeue', quals=[] (at pp.c:15249)
          IdentifierType: names=['QueueC__0__queue_t'] (at None)
    Compound:  (at pp.c:15251)
      Decl: name='t', quals=[], storage=[] (at pp.c:15252)
        TypeDecl: declname='t', quals=[] (at pp.c:15252)
          IdentifierType: names=['QueueC__0__queue_t'] (at None)
        FuncCall:  (at None)
          ID: name='QueueC__0__Queue__head' (at pp.c:15252)
      If:  (at pp.c:15256)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='QueueC__0__Queue__empty' (at pp.c:15256)
        Compound:  (at pp.c:15256)
          UnaryOp: op='p++' (at pp.c:15257)
            ID: name='QueueC__0__head' (at pp.c:15257)
          If:  (at pp.c:15258)
            BinaryOp: op='==' (at pp.c:15258)
              ID: name='QueueC__0__head' (at pp.c:15258)
              Constant: type='int', value='50' (at pp.c:15258)
            Compound:  (at pp.c:15258)
              Assignment: op='=' (at pp.c:15260)
                ID: name='QueueC__0__head' (at pp.c:15260)
                Constant: type='int', value='0' (at pp.c:15260)
          UnaryOp: op='p--' (at pp.c:15263)
            ID: name='QueueC__0__size' (at pp.c:15263)
          FuncCall:  (at None)
            ID: name='QueueC__0__printQueue' (at pp.c:15264)
      Return:  (at pp.c:15266)
        ID: name='t' (at pp.c:15266)
  FuncDef:  (at pp.c:15270)
    Decl: name='LowPowerSensingBaseC__MsgQueue__dequeue', quals=[], storage=['static', 'inline'] (at pp.c:15270)
      FuncDecl: quals=None (at pp.c:15270)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__MsgQueue__dequeue', quals=[] (at pp.c:15270)
          IdentifierType: names=['LowPowerSensingBaseC__MsgQueue__t'] (at None)
    Compound:  (at pp.c:15270)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15272)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15272)
          Struct: name='message_t', packed=False (at pp.c:15272)
      Assignment: op='=' (at pp.c:15276)
        ID: name='__nesc_result' (at pp.c:15276)
        FuncCall:  (at None)
          ID: name='QueueC__0__Queue__dequeue' (at pp.c:15276)
      Return:  (at pp.c:15280)
        ID: name='__nesc_result' (at pp.c:15280)
  FuncDef:  (at pp.c:15285)
    Decl: name='__nesc_hton_uint16', quals=[], storage=['__inline', 'static'] (at pp.c:15285)
      FuncDecl: quals=None (at pp.c:15285)
        ParamList:  (at pp.c:15285)
          Decl: name='target', quals=[], storage=[] (at pp.c:15285)
            PtrDecl: quals=[] (at pp.c:15285)
              TypeDecl: declname='target', quals=[] (at pp.c:15285)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:15285)
            TypeDecl: declname='value', quals=[] (at pp.c:15285)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='__nesc_hton_uint16', quals=[] (at pp.c:15285)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:15287)
      Decl: name='base', quals=[], storage=[] (at pp.c:15288)
        PtrDecl: quals=[] (at pp.c:15288)
          TypeDecl: declname='base', quals=[] (at pp.c:15288)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='target' (at pp.c:15288)
      Assignment: op='=' (at pp.c:15291)
        ArrayRef:  (at pp.c:15291)
          ID: name='base' (at pp.c:15291)
          Constant: type='int', value='1' (at pp.c:15291)
        ID: name='value' (at pp.c:15291)
      Assignment: op='=' (at pp.c:15292)
        ArrayRef:  (at pp.c:15292)
          ID: name='base' (at pp.c:15292)
          Constant: type='int', value='0' (at pp.c:15292)
        BinaryOp: op='>>' (at pp.c:15292)
          ID: name='value' (at pp.c:15292)
          Constant: type='int', value='8' (at pp.c:15292)
      Return:  (at pp.c:15293)
        ID: name='value' (at pp.c:15293)
  FuncDef:  (at pp.c:15297)
    Decl: name='SerialActiveMessageP__0__getHeader', quals=[], storage=['inline', 'static'] (at pp.c:15297)
      FuncDecl: quals=None (at pp.c:15297)
        ParamList:  (at pp.c:15297)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15297)
            PtrDecl: quals=[] (at pp.c:15297)
              TypeDecl: declname='msg', quals=[] (at pp.c:15297)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:15297)
          TypeDecl: declname='SerialActiveMessageP__0__getHeader', quals=[] (at pp.c:15297)
            IdentifierType: names=['serial_header_t'] (at None)
    Compound:  (at pp.c:15299)
      Return:  (at pp.c:15300)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:15300)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['serial_header_t'] (at None)
          BinaryOp: op='-' (at None)
            BinaryOp: op='+' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  PtrDecl: quals=[] (at pp.c:15300)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint8_t'] (at None)
                ID: name='msg' (at pp.c:15300)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['size_t'] (at None)
                UnaryOp: op='&' (at None)
                  StructRef: type='->' (at None)
                    Cast:  (at None)
                      Typename: quals=[] (at None)
                        PtrDecl: quals=[] (at pp.c:15300)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['message_t'] (at None)
                      Constant: type='int', value='0' (at pp.c:15300)
                    ID: name='data' (at pp.c:15300)
            UnaryOp: op='sizeof' (at pp.c:15300)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['serial_header_t'] (at None)
  FuncDef:  (at pp.c:15304)
    Decl: name='SerialActiveMessageP__0__AMPacket__setDestination', quals=[], storage=['inline', 'static'] (at pp.c:15304)
      FuncDecl: quals=None (at pp.c:15304)
        ParamList:  (at pp.c:15304)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15304)
            PtrDecl: quals=[] (at pp.c:15304)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15304)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:15304)
            TypeDecl: declname='addr', quals=[] (at pp.c:15304)
              IdentifierType: names=['am_addr_t'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__AMPacket__setDestination', quals=[] (at pp.c:15304)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15306)
      Decl: name='header', quals=[], storage=[] (at pp.c:15307)
        PtrDecl: quals=[] (at pp.c:15307)
          TypeDecl: declname='header', quals=[] (at pp.c:15307)
            IdentifierType: names=['serial_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__getHeader' (at pp.c:15307)
          ExprList:  (at pp.c:15307)
            ID: name='amsg' (at pp.c:15307)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint16' (at pp.c:15310)
        ExprList:  (at pp.c:15310)
          StructRef: type='.' (at pp.c:15310)
            StructRef: type='->' (at pp.c:15310)
              ID: name='header' (at pp.c:15310)
              ID: name='dest' (at pp.c:15310)
            ID: name='nxdata' (at pp.c:15310)
          ID: name='addr' (at pp.c:15310)
  FuncDef:  (at pp.c:15314)
    Decl: name='AMQueueEntryP__1__AMPacket__setDestination', quals=[], storage=['static', 'inline'] (at pp.c:15314)
      FuncDecl: quals=None (at pp.c:15314)
        ParamList:  (at pp.c:15314)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15314)
            PtrDecl: quals=[] (at pp.c:15314)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15314)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:15314)
            TypeDecl: declname='addr', quals=[] (at pp.c:15314)
              IdentifierType: names=['am_addr_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__1__AMPacket__setDestination', quals=[] (at pp.c:15314)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15314)
      FuncCall:  (at None)
        ID: name='SerialActiveMessageP__0__AMPacket__setDestination' (at pp.c:15316)
        ExprList:  (at pp.c:15316)
          ID: name='amsg' (at pp.c:15316)
          ID: name='addr' (at pp.c:15316)
  FuncDef:  (at pp.c:15321)
    Decl: name='__nesc_hton_uint8', quals=[], storage=['__inline', 'static'] (at pp.c:15321)
      FuncDecl: quals=None (at pp.c:15321)
        ParamList:  (at pp.c:15321)
          Decl: name='target', quals=[], storage=[] (at pp.c:15321)
            PtrDecl: quals=[] (at pp.c:15321)
              TypeDecl: declname='target', quals=[] (at pp.c:15321)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:15321)
            TypeDecl: declname='value', quals=[] (at pp.c:15321)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='__nesc_hton_uint8', quals=[] (at pp.c:15321)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15323)
      Decl: name='base', quals=[], storage=[] (at pp.c:15324)
        PtrDecl: quals=[] (at pp.c:15324)
          TypeDecl: declname='base', quals=[] (at pp.c:15324)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='target' (at pp.c:15324)
      Assignment: op='=' (at pp.c:15327)
        ArrayRef:  (at pp.c:15327)
          ID: name='base' (at pp.c:15327)
          Constant: type='int', value='0' (at pp.c:15327)
        ID: name='value' (at pp.c:15327)
      Return:  (at pp.c:15328)
        ID: name='value' (at pp.c:15328)
  FuncDef:  (at pp.c:15332)
    Decl: name='SerialActiveMessageP__0__AMPacket__setType', quals=[], storage=['inline', 'static'] (at pp.c:15332)
      FuncDecl: quals=None (at pp.c:15332)
        ParamList:  (at pp.c:15332)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15332)
            PtrDecl: quals=[] (at pp.c:15332)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15332)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='type', quals=[], storage=[] (at pp.c:15332)
            TypeDecl: declname='type', quals=[] (at pp.c:15332)
              IdentifierType: names=['am_id_t'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__AMPacket__setType', quals=[] (at pp.c:15332)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15334)
      Decl: name='header', quals=[], storage=[] (at pp.c:15335)
        PtrDecl: quals=[] (at pp.c:15335)
          TypeDecl: declname='header', quals=[] (at pp.c:15335)
            IdentifierType: names=['serial_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__getHeader' (at pp.c:15335)
          ExprList:  (at pp.c:15335)
            ID: name='amsg' (at pp.c:15335)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:15338)
        ExprList:  (at pp.c:15338)
          StructRef: type='.' (at pp.c:15338)
            StructRef: type='->' (at pp.c:15338)
              ID: name='header' (at pp.c:15338)
              ID: name='type' (at pp.c:15338)
            ID: name='nxdata' (at pp.c:15338)
          ID: name='type' (at pp.c:15338)
  FuncDef:  (at pp.c:15342)
    Decl: name='AMQueueEntryP__1__AMPacket__setType', quals=[], storage=['static', 'inline'] (at pp.c:15342)
      FuncDecl: quals=None (at pp.c:15342)
        ParamList:  (at pp.c:15342)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15342)
            PtrDecl: quals=[] (at pp.c:15342)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15342)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='t', quals=[], storage=[] (at pp.c:15342)
            TypeDecl: declname='t', quals=[] (at pp.c:15342)
              IdentifierType: names=['am_id_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__1__AMPacket__setType', quals=[] (at pp.c:15342)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15342)
      FuncCall:  (at None)
        ID: name='SerialActiveMessageP__0__AMPacket__setType' (at pp.c:15344)
        ExprList:  (at pp.c:15344)
          ID: name='amsg' (at pp.c:15344)
          ID: name='t' (at pp.c:15344)
  FuncDef:  (at pp.c:15349)
    Decl: name='AMQueueImplP__1__AMSend__send', quals=[], storage=['static', 'inline'] (at pp.c:15349)
      FuncDecl: quals=None (at pp.c:15349)
        ParamList:  (at pp.c:15349)
          Decl: name='arg_0x102bbe020', quals=[], storage=[] (at pp.c:15349)
            TypeDecl: declname='arg_0x102bbe020', quals=[] (at pp.c:15349)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:15349)
            TypeDecl: declname='addr', quals=[] (at pp.c:15349)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15349)
            PtrDecl: quals=[] (at pp.c:15349)
              TypeDecl: declname='msg', quals=[] (at pp.c:15349)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15349)
            TypeDecl: declname='len', quals=[] (at pp.c:15349)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueImplP__1__AMSend__send', quals=[] (at pp.c:15349)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15349)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15351)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15351)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15355)
        ID: name='__nesc_result' (at pp.c:15355)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__AMSend__send' (at pp.c:15355)
          ExprList:  (at pp.c:15355)
            ID: name='arg_0x102bbe020' (at pp.c:15355)
            ID: name='addr' (at pp.c:15355)
            ID: name='msg' (at pp.c:15355)
            ID: name='len' (at pp.c:15355)
      Return:  (at pp.c:15359)
        ID: name='__nesc_result' (at pp.c:15359)
  FuncDef:  (at pp.c:15364)
    Decl: name='AMQueueImplP__1__AMPacket__type', quals=[], storage=['static', 'inline'] (at pp.c:15364)
      FuncDecl: quals=None (at pp.c:15364)
        ParamList:  (at pp.c:15364)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15364)
            PtrDecl: quals=[] (at pp.c:15364)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15364)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='AMQueueImplP__1__AMPacket__type', quals=[] (at pp.c:15364)
          IdentifierType: names=['am_id_t'] (at None)
    Compound:  (at pp.c:15364)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15366)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15366)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15370)
        ID: name='__nesc_result' (at pp.c:15370)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__AMPacket__type' (at pp.c:15370)
          ExprList:  (at pp.c:15370)
            ID: name='amsg' (at pp.c:15370)
      Return:  (at pp.c:15374)
        ID: name='__nesc_result' (at pp.c:15374)
  FuncDef:  (at pp.c:15379)
    Decl: name='SerialActiveMessageP__0__Packet__setPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:15379)
      FuncDecl: quals=None (at pp.c:15379)
        ParamList:  (at pp.c:15379)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15379)
            PtrDecl: quals=[] (at pp.c:15379)
              TypeDecl: declname='msg', quals=[] (at pp.c:15379)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15379)
            TypeDecl: declname='len', quals=[] (at pp.c:15379)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__Packet__setPayloadLength', quals=[] (at pp.c:15379)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15381)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:15382)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='SerialActiveMessageP__0__getHeader' (at pp.c:15382)
                ExprList:  (at pp.c:15382)
                  ID: name='msg' (at pp.c:15382)
              ID: name='length' (at pp.c:15382)
            ID: name='nxdata' (at pp.c:15382)
          ID: name='len' (at pp.c:15382)
  FuncDef:  (at pp.c:15386)
    Decl: name='AMQueueImplP__1__Packet__setPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:15386)
      FuncDecl: quals=None (at pp.c:15386)
        ParamList:  (at pp.c:15386)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15386)
            PtrDecl: quals=[] (at pp.c:15386)
              TypeDecl: declname='msg', quals=[] (at pp.c:15386)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15386)
            TypeDecl: declname='len', quals=[] (at pp.c:15386)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueImplP__1__Packet__setPayloadLength', quals=[] (at pp.c:15386)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15386)
      FuncCall:  (at None)
        ID: name='SerialActiveMessageP__0__Packet__setPayloadLength' (at pp.c:15388)
        ExprList:  (at pp.c:15388)
          ID: name='msg' (at pp.c:15388)
          ID: name='len' (at pp.c:15388)
  FuncDef:  (at pp.c:15393)
    Decl: name='AMQueueImplP__1__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:15393)
      FuncDecl: quals=None (at pp.c:15393)
        ParamList:  (at pp.c:15393)
          Decl: name='clientId', quals=[], storage=[] (at pp.c:15393)
            TypeDecl: declname='clientId', quals=[] (at pp.c:15393)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15393)
            PtrDecl: quals=[] (at pp.c:15393)
              TypeDecl: declname='msg', quals=[] (at pp.c:15393)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15394)
            TypeDecl: declname='len', quals=[] (at pp.c:15394)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueImplP__1__Send__send', quals=[] (at pp.c:15393)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15396)
      If:  (at pp.c:15397)
        BinaryOp: op='>=' (at pp.c:15397)
          ID: name='clientId' (at pp.c:15397)
          Constant: type='int', value='1' (at pp.c:15397)
        Compound:  (at pp.c:15397)
          Return:  (at pp.c:15398)
            ID: name='FAIL' (at pp.c:15398)
      If:  (at pp.c:15400)
        BinaryOp: op='!=' (at pp.c:15400)
          StructRef: type='.' (at pp.c:15400)
            ArrayRef:  (at pp.c:15400)
              ID: name='AMQueueImplP__1__queue' (at pp.c:15400)
              ID: name='clientId' (at pp.c:15400)
            ID: name='msg' (at pp.c:15400)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:15400)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['void'] (at None)
            Constant: type='int', value='0' (at pp.c:15400)
        Compound:  (at pp.c:15400)
          Return:  (at pp.c:15401)
            ID: name='EBUSY' (at pp.c:15401)
      Assignment: op='=' (at pp.c:15405)
        StructRef: type='.' (at pp.c:15405)
          ArrayRef:  (at pp.c:15405)
            ID: name='AMQueueImplP__1__queue' (at pp.c:15405)
            ID: name='clientId' (at pp.c:15405)
          ID: name='msg' (at pp.c:15405)
        ID: name='msg' (at pp.c:15405)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__1__Packet__setPayloadLength' (at pp.c:15406)
        ExprList:  (at pp.c:15406)
          ID: name='msg' (at pp.c:15406)
          ID: name='len' (at pp.c:15406)
      If:  (at pp.c:15408)
        BinaryOp: op='>=' (at pp.c:15408)
          ID: name='AMQueueImplP__1__current' (at pp.c:15408)
          Constant: type='int', value='1' (at pp.c:15408)
        Compound:  (at pp.c:15408)
          Decl: name='err', quals=[], storage=[] (at pp.c:15409)
            TypeDecl: declname='err', quals=[] (at pp.c:15409)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='amId', quals=[], storage=[] (at pp.c:15410)
            TypeDecl: declname='amId', quals=[] (at pp.c:15410)
              IdentifierType: names=['am_id_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__1__AMPacket__type' (at pp.c:15410)
              ExprList:  (at pp.c:15410)
                ID: name='msg' (at pp.c:15410)
          Decl: name='dest', quals=[], storage=[] (at pp.c:15411)
            TypeDecl: declname='dest', quals=[] (at pp.c:15411)
              IdentifierType: names=['am_addr_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__1__AMPacket__destination' (at pp.c:15411)
              ExprList:  (at pp.c:15411)
                ID: name='msg' (at pp.c:15411)
          Assignment: op='=' (at pp.c:15414)
            ID: name='AMQueueImplP__1__current' (at pp.c:15414)
            ID: name='clientId' (at pp.c:15414)
          Assignment: op='=' (at pp.c:15416)
            ID: name='err' (at pp.c:15416)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__1__AMSend__send' (at pp.c:15416)
              ExprList:  (at pp.c:15416)
                ID: name='amId' (at pp.c:15416)
                ID: name='dest' (at pp.c:15416)
                ID: name='msg' (at pp.c:15416)
                ID: name='len' (at pp.c:15416)
          If:  (at pp.c:15417)
            BinaryOp: op='!=' (at pp.c:15417)
              ID: name='err' (at pp.c:15417)
              ID: name='SUCCESS' (at pp.c:15417)
            Compound:  (at pp.c:15417)
              Assignment: op='=' (at pp.c:15419)
                ID: name='AMQueueImplP__1__current' (at pp.c:15419)
                Constant: type='int', value='1' (at pp.c:15419)
              Assignment: op='=' (at pp.c:15420)
                StructRef: type='.' (at pp.c:15420)
                  ArrayRef:  (at pp.c:15420)
                    ID: name='AMQueueImplP__1__queue' (at pp.c:15420)
                    ID: name='clientId' (at pp.c:15420)
                  ID: name='msg' (at pp.c:15420)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:15420)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['void'] (at None)
                  Constant: type='int', value='0' (at pp.c:15420)
          Return:  (at pp.c:15423)
            ID: name='err' (at pp.c:15423)
        Compound:  (at pp.c:15425)
      Return:  (at pp.c:15428)
        ID: name='SUCCESS' (at pp.c:15428)
  FuncDef:  (at pp.c:15432)
    Decl: name='AMQueueEntryP__1__Send__send', quals=[], storage=['static', 'inline'] (at pp.c:15432)
      FuncDecl: quals=None (at pp.c:15432)
        ParamList:  (at pp.c:15432)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15432)
            PtrDecl: quals=[] (at pp.c:15432)
              TypeDecl: declname='msg', quals=[] (at pp.c:15432)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15432)
            TypeDecl: declname='len', quals=[] (at pp.c:15432)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__1__Send__send', quals=[] (at pp.c:15432)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15432)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15434)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15434)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15438)
        ID: name='__nesc_result' (at pp.c:15438)
        FuncCall:  (at None)
          ID: name='AMQueueImplP__1__Send__send' (at pp.c:15438)
          ExprList:  (at pp.c:15438)
            Constant: type='int', value='0U' (at pp.c:15438)
            ID: name='msg' (at pp.c:15438)
            ID: name='len' (at pp.c:15438)
      Return:  (at pp.c:15442)
        ID: name='__nesc_result' (at pp.c:15442)
  FuncDef:  (at pp.c:15447)
    Decl: name='SerialActiveMessageP__0__Packet__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:15447)
      FuncDecl: quals=None (at pp.c:15447)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__Packet__maxPayloadLength', quals=[] (at pp.c:15447)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15449)
      Return:  (at pp.c:15450)
        Constant: type='int', value='28' (at pp.c:15450)
  FuncDef:  (at pp.c:15454)
    Decl: name='SerialP__SendBytePacket__startSend', quals=[], storage=['inline', 'static'] (at pp.c:15454)
      FuncDecl: quals=None (at pp.c:15454)
        ParamList:  (at pp.c:15454)
          Decl: name='b', quals=[], storage=[] (at pp.c:15454)
            TypeDecl: declname='b', quals=[] (at pp.c:15454)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialP__SendBytePacket__startSend', quals=[] (at pp.c:15454)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15456)
      Decl: name='not_busy', quals=[], storage=[] (at pp.c:15457)
        TypeDecl: declname='not_busy', quals=[] (at pp.c:15457)
          IdentifierType: names=['bool'] (at None)
        ID: name='FALSE' (at pp.c:15457)
      Compound:  (at pp.c:15460)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:15460)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:15460)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:15460)
        Compound:  (at pp.c:15462)
          If:  (at pp.c:15463)
            BinaryOp: op='==' (at pp.c:15463)
              StructRef: type='.' (at pp.c:15463)
                ArrayRef:  (at pp.c:15463)
                  ID: name='SerialP__txBuf' (at pp.c:15463)
                  ID: name='SerialP__TX_DATA_INDEX' (at pp.c:15463)
                ID: name='state' (at pp.c:15463)
              ID: name='SerialP__BUFFER_AVAILABLE' (at pp.c:15463)
            Compound:  (at pp.c:15463)
              Assignment: op='=' (at pp.c:15464)
                StructRef: type='.' (at pp.c:15464)
                  ArrayRef:  (at pp.c:15464)
                    ID: name='SerialP__txBuf' (at pp.c:15464)
                    ID: name='SerialP__TX_DATA_INDEX' (at pp.c:15464)
                  ID: name='state' (at pp.c:15464)
                ID: name='SerialP__BUFFER_FILLING' (at pp.c:15464)
              Assignment: op='=' (at pp.c:15465)
                StructRef: type='.' (at pp.c:15465)
                  ArrayRef:  (at pp.c:15465)
                    ID: name='SerialP__txBuf' (at pp.c:15465)
                    ID: name='SerialP__TX_DATA_INDEX' (at pp.c:15465)
                  ID: name='buf' (at pp.c:15465)
                ID: name='b' (at pp.c:15465)
              Assignment: op='=' (at pp.c:15466)
                ID: name='not_busy' (at pp.c:15466)
                ID: name='TRUE' (at pp.c:15466)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:15470)
          ExprList:  (at pp.c:15470)
            ID: name='__nesc_atomic' (at pp.c:15470)
      If:  (at pp.c:15471)
        ID: name='not_busy' (at pp.c:15471)
        Compound:  (at pp.c:15471)
          FuncCall:  (at None)
            ID: name='SerialP__MaybeScheduleTx' (at pp.c:15472)
          Return:  (at pp.c:15473)
            ID: name='SUCCESS' (at pp.c:15473)
      Return:  (at pp.c:15475)
        ID: name='EBUSY' (at pp.c:15475)
  FuncDef:  (at pp.c:15479)
    Decl: name='SerialDispatcherP__0__SendBytePacket__startSend', quals=[], storage=['static', 'inline'] (at pp.c:15479)
      FuncDecl: quals=None (at pp.c:15479)
        ParamList:  (at pp.c:15479)
          Decl: name='first_byte', quals=[], storage=[] (at pp.c:15479)
            TypeDecl: declname='first_byte', quals=[] (at pp.c:15479)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__SendBytePacket__startSend', quals=[] (at pp.c:15479)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15479)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15481)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15481)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15485)
        ID: name='__nesc_result' (at pp.c:15485)
        FuncCall:  (at None)
          ID: name='SerialP__SendBytePacket__startSend' (at pp.c:15485)
          ExprList:  (at pp.c:15485)
            ID: name='first_byte' (at pp.c:15485)
      Return:  (at pp.c:15489)
        ID: name='__nesc_result' (at pp.c:15489)
  FuncDef:  (at pp.c:15494)
    Decl: name='SerialPacketInfoActiveMessageP__Info__dataLinkLength', quals=[], storage=['inline', 'static'] (at pp.c:15494)
      FuncDecl: quals=None (at pp.c:15494)
        ParamList:  (at pp.c:15494)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15494)
            PtrDecl: quals=[] (at pp.c:15494)
              TypeDecl: declname='msg', quals=[] (at pp.c:15494)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='upperLen', quals=[], storage=[] (at pp.c:15494)
            TypeDecl: declname='upperLen', quals=[] (at pp.c:15494)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialPacketInfoActiveMessageP__Info__dataLinkLength', quals=[] (at pp.c:15494)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15496)
      Return:  (at pp.c:15497)
        BinaryOp: op='+' (at pp.c:15497)
          ID: name='upperLen' (at pp.c:15497)
          UnaryOp: op='sizeof' (at pp.c:15497)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['serial_header_t'] (at None)
  FuncDef:  (at pp.c:15501)
    Decl: name='SerialDispatcherP__0__PacketInfo__default__dataLinkLength', quals=[], storage=['inline', 'static'] (at pp.c:15501)
      FuncDecl: quals=None (at pp.c:15501)
        ParamList:  (at pp.c:15501)
          Decl: name='id', quals=[], storage=[] (at pp.c:15501)
            TypeDecl: declname='id', quals=[] (at pp.c:15501)
              IdentifierType: names=['uart_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15501)
            PtrDecl: quals=[] (at pp.c:15501)
              TypeDecl: declname='msg', quals=[] (at pp.c:15501)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='upperLen', quals=[], storage=[] (at pp.c:15502)
            TypeDecl: declname='upperLen', quals=[] (at pp.c:15502)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__PacketInfo__default__dataLinkLength', quals=[] (at pp.c:15501)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15504)
      Return:  (at pp.c:15505)
        Constant: type='int', value='0' (at pp.c:15505)
  FuncDef:  (at pp.c:15509)
    Decl: name='SerialDispatcherP__0__PacketInfo__dataLinkLength', quals=[], storage=['static', 'inline'] (at pp.c:15509)
      FuncDecl: quals=None (at pp.c:15509)
        ParamList:  (at pp.c:15509)
          Decl: name='arg_0x101acdaa8', quals=[], storage=[] (at pp.c:15509)
            TypeDecl: declname='arg_0x101acdaa8', quals=[] (at pp.c:15509)
              IdentifierType: names=['uart_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15509)
            PtrDecl: quals=[] (at pp.c:15509)
              TypeDecl: declname='msg', quals=[] (at pp.c:15509)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='upperLen', quals=[], storage=[] (at pp.c:15509)
            TypeDecl: declname='upperLen', quals=[] (at pp.c:15509)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__PacketInfo__dataLinkLength', quals=[] (at pp.c:15509)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15509)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15511)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15511)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:15515)
        ID: name='arg_0x101acdaa8' (at pp.c:15515)
        Compound:  (at pp.c:15515)
          Case:  (at pp.c:15517)
            ID: name='TOS_SERIAL_ACTIVE_MESSAGE_ID' (at pp.c:15517)
            Assignment: op='=' (at pp.c:15519)
              ID: name='__nesc_result' (at pp.c:15519)
              FuncCall:  (at None)
                ID: name='SerialPacketInfoActiveMessageP__Info__dataLinkLength' (at pp.c:15519)
                ExprList:  (at pp.c:15519)
                  ID: name='msg' (at pp.c:15519)
                  ID: name='upperLen' (at pp.c:15519)
          Break:  (at pp.c:15521)
          Default:  (at pp.c:15523)
            Assignment: op='=' (at pp.c:15525)
              ID: name='__nesc_result' (at pp.c:15525)
              FuncCall:  (at None)
                ID: name='SerialDispatcherP__0__PacketInfo__default__dataLinkLength' (at pp.c:15525)
                ExprList:  (at pp.c:15525)
                  ID: name='arg_0x101acdaa8' (at pp.c:15525)
                  ID: name='msg' (at pp.c:15525)
                  ID: name='upperLen' (at pp.c:15525)
          Break:  (at pp.c:15527)
      Return:  (at pp.c:15533)
        ID: name='__nesc_result' (at pp.c:15533)
  FuncDef:  (at pp.c:15538)
    Decl: name='SerialPacketInfoActiveMessageP__Info__offset', quals=[], storage=['inline', 'static'] (at pp.c:15538)
      FuncDecl: quals=None (at pp.c:15538)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialPacketInfoActiveMessageP__Info__offset', quals=[] (at pp.c:15538)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15540)
      Return:  (at pp.c:15541)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['uint8_t'] (at None)
          BinaryOp: op='-' (at pp.c:15541)
            UnaryOp: op='sizeof' (at pp.c:15541)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['message_header_t'] (at None)
            UnaryOp: op='sizeof' (at pp.c:15541)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['serial_header_t'] (at None)
  FuncDef:  (at pp.c:15545)
    Decl: name='SerialDispatcherP__0__PacketInfo__default__offset', quals=[], storage=['inline', 'static'] (at pp.c:15545)
      FuncDecl: quals=None (at pp.c:15545)
        ParamList:  (at pp.c:15545)
          Decl: name='id', quals=[], storage=[] (at pp.c:15545)
            TypeDecl: declname='id', quals=[] (at pp.c:15545)
              IdentifierType: names=['uart_id_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__PacketInfo__default__offset', quals=[] (at pp.c:15545)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15547)
      Return:  (at pp.c:15548)
        Constant: type='int', value='0' (at pp.c:15548)
  FuncDef:  (at pp.c:15552)
    Decl: name='SerialDispatcherP__0__PacketInfo__offset', quals=[], storage=['static', 'inline'] (at pp.c:15552)
      FuncDecl: quals=None (at pp.c:15552)
        ParamList:  (at pp.c:15552)
          Decl: name='arg_0x101acdaa8', quals=[], storage=[] (at pp.c:15552)
            TypeDecl: declname='arg_0x101acdaa8', quals=[] (at pp.c:15552)
              IdentifierType: names=['uart_id_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__PacketInfo__offset', quals=[] (at pp.c:15552)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15552)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15554)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15554)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:15558)
        ID: name='arg_0x101acdaa8' (at pp.c:15558)
        Compound:  (at pp.c:15558)
          Case:  (at pp.c:15560)
            ID: name='TOS_SERIAL_ACTIVE_MESSAGE_ID' (at pp.c:15560)
            Assignment: op='=' (at pp.c:15562)
              ID: name='__nesc_result' (at pp.c:15562)
              FuncCall:  (at None)
                ID: name='SerialPacketInfoActiveMessageP__Info__offset' (at pp.c:15562)
          Break:  (at pp.c:15564)
          Default:  (at pp.c:15566)
            Assignment: op='=' (at pp.c:15568)
              ID: name='__nesc_result' (at pp.c:15568)
              FuncCall:  (at None)
                ID: name='SerialDispatcherP__0__PacketInfo__default__offset' (at pp.c:15568)
                ExprList:  (at pp.c:15568)
                  ID: name='arg_0x101acdaa8' (at pp.c:15568)
          Break:  (at pp.c:15570)
      Return:  (at pp.c:15576)
        ID: name='__nesc_result' (at pp.c:15576)
  FuncDef:  (at pp.c:15581)
    Decl: name='SerialDispatcherP__0__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:15581)
      FuncDecl: quals=None (at pp.c:15581)
        ParamList:  (at pp.c:15581)
          Decl: name='id', quals=[], storage=[] (at pp.c:15581)
            TypeDecl: declname='id', quals=[] (at pp.c:15581)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15581)
            PtrDecl: quals=[] (at pp.c:15581)
              TypeDecl: declname='msg', quals=[] (at pp.c:15581)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15581)
            TypeDecl: declname='len', quals=[] (at pp.c:15581)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__Send__send', quals=[] (at pp.c:15581)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15583)
      If:  (at pp.c:15584)
        BinaryOp: op='!=' (at pp.c:15584)
          ID: name='SerialDispatcherP__0__sendState' (at pp.c:15584)
          ID: name='SerialDispatcherP__0__SEND_STATE_IDLE' (at pp.c:15584)
        Compound:  (at pp.c:15584)
          Return:  (at pp.c:15585)
            ID: name='EBUSY' (at pp.c:15585)
      Compound:  (at pp.c:15588)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:15588)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:15588)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:15588)
        Compound:  (at pp.c:15590)
          Assignment: op='=' (at pp.c:15591)
            ID: name='SerialDispatcherP__0__sendIndex' (at pp.c:15591)
            FuncCall:  (at None)
              ID: name='SerialDispatcherP__0__PacketInfo__offset' (at pp.c:15591)
              ExprList:  (at pp.c:15591)
                ID: name='id' (at pp.c:15591)
          If:  (at pp.c:15592)
            BinaryOp: op='>' (at pp.c:15592)
              ID: name='SerialDispatcherP__0__sendIndex' (at pp.c:15592)
              UnaryOp: op='sizeof' (at pp.c:15592)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['message_header_t'] (at None)
            Compound:  (at pp.c:15592)
              Compound:  (at pp.c:15593)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:15594)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:15594)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='ESIZE' (at pp.c:15596)
                Compound:  (at pp.c:15598)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:15600)
                    ExprList:  (at pp.c:15600)
                      ID: name='__nesc_atomic' (at pp.c:15600)
                  Return:  (at pp.c:15602)
                    ID: name='__nesc_temp' (at pp.c:15602)
          Assignment: op='=' (at pp.c:15607)
            ID: name='SerialDispatcherP__0__sendError' (at pp.c:15607)
            ID: name='SUCCESS' (at pp.c:15607)
          Assignment: op='=' (at pp.c:15608)
            ID: name='SerialDispatcherP__0__sendBuffer' (at pp.c:15608)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:15608)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              ID: name='msg' (at pp.c:15608)
          Assignment: op='=' (at pp.c:15609)
            ID: name='SerialDispatcherP__0__sendState' (at pp.c:15609)
            ID: name='SerialDispatcherP__0__SEND_STATE_DATA' (at pp.c:15609)
          Assignment: op='=' (at pp.c:15610)
            ID: name='SerialDispatcherP__0__sendId' (at pp.c:15610)
            ID: name='id' (at pp.c:15610)
          Assignment: op='=' (at pp.c:15611)
            ID: name='SerialDispatcherP__0__sendCancelled' (at pp.c:15611)
            ID: name='FALSE' (at pp.c:15611)
          Assignment: op='=' (at pp.c:15618)
            ID: name='SerialDispatcherP__0__sendLen' (at pp.c:15618)
            BinaryOp: op='+' (at None)
              FuncCall:  (at None)
                ID: name='SerialDispatcherP__0__PacketInfo__dataLinkLength' (at pp.c:15618)
                ExprList:  (at pp.c:15618)
                  ID: name='id' (at pp.c:15618)
                  ID: name='msg' (at pp.c:15618)
                  ID: name='len' (at pp.c:15618)
              ID: name='SerialDispatcherP__0__sendIndex' (at pp.c:15618)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:15621)
          ExprList:  (at pp.c:15621)
            ID: name='__nesc_atomic' (at pp.c:15621)
      If:  (at pp.c:15622)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='SerialDispatcherP__0__SendBytePacket__startSend' (at pp.c:15622)
            ExprList:  (at pp.c:15622)
              ID: name='id' (at pp.c:15622)
          ID: name='SUCCESS' (at pp.c:15622)
        Compound:  (at pp.c:15622)
          Return:  (at pp.c:15623)
            ID: name='SUCCESS' (at pp.c:15623)
        Compound:  (at pp.c:15625)
          Assignment: op='=' (at pp.c:15626)
            ID: name='SerialDispatcherP__0__sendState' (at pp.c:15626)
            ID: name='SerialDispatcherP__0__SEND_STATE_IDLE' (at pp.c:15626)
          Return:  (at pp.c:15627)
            ID: name='FAIL' (at pp.c:15627)
  FuncDef:  (at pp.c:15632)
    Decl: name='SerialActiveMessageP__0__SubSend__send', quals=[], storage=['static', 'inline'] (at pp.c:15632)
      FuncDecl: quals=None (at pp.c:15632)
        ParamList:  (at pp.c:15632)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15632)
            PtrDecl: quals=[] (at pp.c:15632)
              TypeDecl: declname='msg', quals=[] (at pp.c:15632)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15632)
            TypeDecl: declname='len', quals=[] (at pp.c:15632)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__SubSend__send', quals=[] (at pp.c:15632)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15632)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15634)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15634)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15638)
        ID: name='__nesc_result' (at pp.c:15638)
        FuncCall:  (at None)
          ID: name='SerialDispatcherP__0__Send__send' (at pp.c:15638)
          ExprList:  (at pp.c:15638)
            ID: name='TOS_SERIAL_ACTIVE_MESSAGE_ID' (at pp.c:15638)
            ID: name='msg' (at pp.c:15638)
            ID: name='len' (at pp.c:15638)
      Return:  (at pp.c:15642)
        ID: name='__nesc_result' (at pp.c:15642)
  FuncDef:  (at pp.c:15647)
    Decl: name='SerialP__RunTx__postTask', quals=[], storage=['static', 'inline'] (at pp.c:15647)
      FuncDecl: quals=None (at pp.c:15647)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__RunTx__postTask', quals=[] (at pp.c:15647)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15647)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15649)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15649)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15653)
        ID: name='__nesc_result' (at pp.c:15653)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:15653)
          ExprList:  (at pp.c:15653)
            ID: name='SerialP__RunTx' (at pp.c:15653)
      Return:  (at pp.c:15657)
        ID: name='__nesc_result' (at pp.c:15657)
  FuncDef:  (at pp.c:15662)
    Decl: name='AMQueueImplP__1__errorTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:15662)
      FuncDecl: quals=None (at pp.c:15662)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__1__errorTask__runTask', quals=[] (at pp.c:15662)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15664)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__1__sendDone' (at pp.c:15665)
        ExprList:  (at pp.c:15665)
          ID: name='AMQueueImplP__1__current' (at pp.c:15665)
          StructRef: type='.' (at pp.c:15665)
            ArrayRef:  (at pp.c:15665)
              ID: name='AMQueueImplP__1__queue' (at pp.c:15665)
              ID: name='AMQueueImplP__1__current' (at pp.c:15665)
            ID: name='msg' (at pp.c:15665)
          ID: name='FAIL' (at pp.c:15665)
  FuncDef:  (at pp.c:15669)
    Decl: name='AMQueueImplP__1__errorTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:15669)
      FuncDecl: quals=None (at pp.c:15669)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__1__errorTask__postTask', quals=[] (at pp.c:15669)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15669)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15671)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15671)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15675)
        ID: name='__nesc_result' (at pp.c:15675)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:15675)
          ExprList:  (at pp.c:15675)
            ID: name='AMQueueImplP__1__errorTask' (at pp.c:15675)
      Return:  (at pp.c:15679)
        ID: name='__nesc_result' (at pp.c:15679)
  FuncDef:  (at pp.c:15684)
    Decl: name='SerialActiveMessageP__0__Packet__payloadLength', quals=[], storage=['inline', 'static'] (at pp.c:15684)
      FuncDecl: quals=None (at pp.c:15684)
        ParamList:  (at pp.c:15684)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15684)
            PtrDecl: quals=[] (at pp.c:15684)
              TypeDecl: declname='msg', quals=[] (at pp.c:15684)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__Packet__payloadLength', quals=[] (at pp.c:15684)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15686)
      Decl: name='header', quals=[], storage=[] (at pp.c:15687)
        PtrDecl: quals=[] (at pp.c:15687)
          TypeDecl: declname='header', quals=[] (at pp.c:15687)
            IdentifierType: names=['serial_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__getHeader' (at pp.c:15687)
          ExprList:  (at pp.c:15687)
            ID: name='msg' (at pp.c:15687)
      Return:  (at pp.c:15690)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_uint8' (at pp.c:15690)
          ExprList:  (at pp.c:15690)
            StructRef: type='.' (at pp.c:15690)
              StructRef: type='->' (at pp.c:15690)
                ID: name='header' (at pp.c:15690)
                ID: name='length' (at pp.c:15690)
              ID: name='nxdata' (at pp.c:15690)
  FuncDef:  (at pp.c:15694)
    Decl: name='AMQueueImplP__1__Packet__payloadLength', quals=[], storage=['static', 'inline'] (at pp.c:15694)
      FuncDecl: quals=None (at pp.c:15694)
        ParamList:  (at pp.c:15694)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15694)
            PtrDecl: quals=[] (at pp.c:15694)
              TypeDecl: declname='msg', quals=[] (at pp.c:15694)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='AMQueueImplP__1__Packet__payloadLength', quals=[] (at pp.c:15694)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15694)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15696)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15696)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15700)
        ID: name='__nesc_result' (at pp.c:15700)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__Packet__payloadLength' (at pp.c:15700)
          ExprList:  (at pp.c:15700)
            ID: name='msg' (at pp.c:15700)
      Return:  (at pp.c:15704)
        ID: name='__nesc_result' (at pp.c:15704)
  FuncDef:  (at pp.c:15709)
    Decl: name='AMQueueImplP__1__nextPacket', quals=[], storage=['inline', 'static'] (at pp.c:15709)
      FuncDecl: quals=None (at pp.c:15709)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__1__nextPacket', quals=[] (at pp.c:15709)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15711)
      Decl: name='i', quals=[], storage=[] (at pp.c:15712)
        TypeDecl: declname='i', quals=[] (at pp.c:15712)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='=' (at pp.c:15715)
        ID: name='AMQueueImplP__1__current' (at pp.c:15715)
        BinaryOp: op='%' (at pp.c:15715)
          BinaryOp: op='+' (at pp.c:15715)
            ID: name='AMQueueImplP__1__current' (at pp.c:15715)
            Constant: type='int', value='1' (at pp.c:15715)
          Constant: type='int', value='1' (at pp.c:15715)
      For:  (at pp.c:15716)
        Assignment: op='=' (at pp.c:15716)
          ID: name='i' (at pp.c:15716)
          Constant: type='int', value='0' (at pp.c:15716)
        BinaryOp: op='<' (at pp.c:15716)
          ID: name='i' (at pp.c:15716)
          Constant: type='int', value='1' (at pp.c:15716)
        UnaryOp: op='p++' (at pp.c:15716)
          ID: name='i' (at pp.c:15716)
        Compound:  (at pp.c:15716)
          If:  (at pp.c:15717)
            BinaryOp: op='||' (at pp.c:15717)
              BinaryOp: op='==' (at pp.c:15717)
                StructRef: type='.' (at pp.c:15717)
                  ArrayRef:  (at pp.c:15717)
                    ID: name='AMQueueImplP__1__queue' (at pp.c:15717)
                    ID: name='AMQueueImplP__1__current' (at pp.c:15717)
                  ID: name='msg' (at pp.c:15717)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:15717)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['void'] (at None)
                  Constant: type='int', value='0' (at pp.c:15717)
              BinaryOp: op='&' (at pp.c:15718)
                ArrayRef:  (at pp.c:15718)
                  ID: name='AMQueueImplP__1__cancelMask' (at pp.c:15718)
                  BinaryOp: op='/' (at pp.c:15718)
                    ID: name='AMQueueImplP__1__current' (at pp.c:15718)
                    Constant: type='int', value='8' (at pp.c:15718)
                BinaryOp: op='<<' (at pp.c:15718)
                  Constant: type='int', value='1' (at pp.c:15718)
                  BinaryOp: op='%' (at pp.c:15718)
                    ID: name='AMQueueImplP__1__current' (at pp.c:15718)
                    Constant: type='int', value='8' (at pp.c:15718)
            Compound:  (at pp.c:15719)
              Assignment: op='=' (at pp.c:15720)
                ID: name='AMQueueImplP__1__current' (at pp.c:15720)
                BinaryOp: op='%' (at pp.c:15720)
                  BinaryOp: op='+' (at pp.c:15720)
                    ID: name='AMQueueImplP__1__current' (at pp.c:15720)
                    Constant: type='int', value='1' (at pp.c:15720)
                  Constant: type='int', value='1' (at pp.c:15720)
            Compound:  (at pp.c:15722)
              Break:  (at pp.c:15723)
      If:  (at pp.c:15726)
        BinaryOp: op='>=' (at pp.c:15726)
          ID: name='i' (at pp.c:15726)
          Constant: type='int', value='1' (at pp.c:15726)
        Compound:  (at pp.c:15726)
          Assignment: op='=' (at pp.c:15728)
            ID: name='AMQueueImplP__1__current' (at pp.c:15728)
            Constant: type='int', value='1' (at pp.c:15728)
  FuncDef:  (at pp.c:15733)
    Decl: name='AMQueueImplP__1__tryToSend', quals=[], storage=['inline', 'static'] (at pp.c:15733)
      FuncDecl: quals=None (at pp.c:15733)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__1__tryToSend', quals=[] (at pp.c:15733)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15735)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__1__nextPacket' (at pp.c:15736)
      If:  (at pp.c:15737)
        BinaryOp: op='<' (at pp.c:15737)
          ID: name='AMQueueImplP__1__current' (at pp.c:15737)
          Constant: type='int', value='1' (at pp.c:15737)
        Compound:  (at pp.c:15737)
          Decl: name='nextErr', quals=[], storage=[] (at pp.c:15738)
            TypeDecl: declname='nextErr', quals=[] (at pp.c:15738)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='nextMsg', quals=[], storage=[] (at pp.c:15739)
            PtrDecl: quals=[] (at pp.c:15739)
              TypeDecl: declname='nextMsg', quals=[] (at pp.c:15739)
                IdentifierType: names=['message_t'] (at None)
            StructRef: type='.' (at pp.c:15739)
              ArrayRef:  (at pp.c:15739)
                ID: name='AMQueueImplP__1__queue' (at pp.c:15739)
                ID: name='AMQueueImplP__1__current' (at pp.c:15739)
              ID: name='msg' (at pp.c:15739)
          Decl: name='nextId', quals=[], storage=[] (at pp.c:15740)
            TypeDecl: declname='nextId', quals=[] (at pp.c:15740)
              IdentifierType: names=['am_id_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__1__AMPacket__type' (at pp.c:15740)
              ExprList:  (at pp.c:15740)
                ID: name='nextMsg' (at pp.c:15740)
          Decl: name='nextDest', quals=[], storage=[] (at pp.c:15741)
            TypeDecl: declname='nextDest', quals=[] (at pp.c:15741)
              IdentifierType: names=['am_addr_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__1__AMPacket__destination' (at pp.c:15741)
              ExprList:  (at pp.c:15741)
                ID: name='nextMsg' (at pp.c:15741)
          Decl: name='len', quals=[], storage=[] (at pp.c:15742)
            TypeDecl: declname='len', quals=[] (at pp.c:15742)
              IdentifierType: names=['uint8_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__1__Packet__payloadLength' (at pp.c:15742)
              ExprList:  (at pp.c:15742)
                ID: name='nextMsg' (at pp.c:15742)
          Assignment: op='=' (at pp.c:15745)
            ID: name='nextErr' (at pp.c:15745)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__1__AMSend__send' (at pp.c:15745)
              ExprList:  (at pp.c:15745)
                ID: name='nextId' (at pp.c:15745)
                ID: name='nextDest' (at pp.c:15745)
                ID: name='nextMsg' (at pp.c:15745)
                ID: name='len' (at pp.c:15745)
          If:  (at pp.c:15746)
            BinaryOp: op='!=' (at pp.c:15746)
              ID: name='nextErr' (at pp.c:15746)
              ID: name='SUCCESS' (at pp.c:15746)
            Compound:  (at pp.c:15746)
              FuncCall:  (at None)
                ID: name='AMQueueImplP__1__errorTask__postTask' (at pp.c:15747)
  FuncDef:  (at pp.c:15753)
    Decl: name='LedsP__Leds__led0Off', quals=[], storage=['inline', 'static'] (at pp.c:15753)
      FuncDecl: quals=None (at pp.c:15753)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Leds__led0Off', quals=[] (at pp.c:15753)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15755)
      FuncCall:  (at None)
        ID: name='LedsP__Led0__set' (at pp.c:15756)
  FuncDef:  (at pp.c:15763)
    Decl: name='LowPowerSensingBaseC__Leds__led0Off', quals=[], storage=['static', 'inline'] (at pp.c:15763)
      FuncDecl: quals=None (at pp.c:15763)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__Leds__led0Off', quals=[] (at pp.c:15763)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15763)
      FuncCall:  (at None)
        ID: name='LedsP__Leds__led0Off' (at pp.c:15765)
  FuncDef:  (at pp.c:15770)
    Decl: name='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:15770)
      FuncDecl: quals=None (at pp.c:15770)
        ParamList:  (at pp.c:15770)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15770)
            PtrDecl: quals=[] (at pp.c:15770)
              TypeDecl: declname='msg', quals=[] (at pp.c:15770)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:15770)
            TypeDecl: declname='error', quals=[] (at pp.c:15770)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__sendDone', quals=[] (at pp.c:15770)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15772)
      If:  (at pp.c:15773)
        BinaryOp: op='==' (at pp.c:15773)
          ID: name='error' (at pp.c:15773)
          ID: name='SUCCESS' (at pp.c:15773)
        Compound:  (at pp.c:15773)
          FuncCall:  (at None)
            ID: name='LowPowerSensingBaseC__Leds__led0Off' (at pp.c:15774)
  FuncDef:  (at pp.c:15779)
    Decl: name='LplAMSenderP__0__AMSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:15779)
      FuncDecl: quals=None (at pp.c:15779)
        ParamList:  (at pp.c:15779)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15779)
            PtrDecl: quals=[] (at pp.c:15779)
              TypeDecl: declname='msg', quals=[] (at pp.c:15779)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:15779)
            TypeDecl: declname='error', quals=[] (at pp.c:15779)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LplAMSenderP__0__AMSend__sendDone', quals=[] (at pp.c:15779)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15779)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__sendDone' (at pp.c:15781)
        ExprList:  (at pp.c:15781)
          ID: name='msg' (at pp.c:15781)
          ID: name='error' (at pp.c:15781)
  FuncDef:  (at pp.c:15786)
    Decl: name='LplAMSenderP__0__SubAMSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:15786)
      FuncDecl: quals=None (at pp.c:15786)
        ParamList:  (at pp.c:15786)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15786)
            PtrDecl: quals=[] (at pp.c:15786)
              TypeDecl: declname='msg', quals=[] (at pp.c:15786)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:15786)
            TypeDecl: declname='error', quals=[] (at pp.c:15786)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LplAMSenderP__0__SubAMSend__sendDone', quals=[] (at pp.c:15786)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15788)
      FuncCall:  (at None)
        ID: name='LplAMSenderP__0__AMSend__sendDone' (at pp.c:15790)
        ExprList:  (at pp.c:15790)
          ID: name='msg' (at pp.c:15790)
          ID: name='error' (at pp.c:15790)
  FuncDef:  (at pp.c:15794)
    Decl: name='AMQueueEntryP__0__AMSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:15794)
      FuncDecl: quals=None (at pp.c:15794)
        ParamList:  (at pp.c:15794)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15794)
            PtrDecl: quals=[] (at pp.c:15794)
              TypeDecl: declname='msg', quals=[] (at pp.c:15794)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:15794)
            TypeDecl: declname='error', quals=[] (at pp.c:15794)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__AMSend__sendDone', quals=[] (at pp.c:15794)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15794)
      FuncCall:  (at None)
        ID: name='LplAMSenderP__0__SubAMSend__sendDone' (at pp.c:15796)
        ExprList:  (at pp.c:15796)
          ID: name='msg' (at pp.c:15796)
          ID: name='error' (at pp.c:15796)
  FuncDef:  (at pp.c:15801)
    Decl: name='AMQueueEntryP__0__Send__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:15801)
      FuncDecl: quals=None (at pp.c:15801)
        ParamList:  (at pp.c:15801)
          Decl: name='m', quals=[], storage=[] (at pp.c:15801)
            PtrDecl: quals=[] (at pp.c:15801)
              TypeDecl: declname='m', quals=[] (at pp.c:15801)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:15801)
            TypeDecl: declname='err', quals=[] (at pp.c:15801)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__Send__sendDone', quals=[] (at pp.c:15801)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15803)
      FuncCall:  (at None)
        ID: name='AMQueueEntryP__0__AMSend__sendDone' (at pp.c:15804)
        ExprList:  (at pp.c:15804)
          ID: name='m' (at pp.c:15804)
          ID: name='err' (at pp.c:15804)
  FuncDef:  (at pp.c:15808)
    Decl: name='AMQueueImplP__0__Send__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:15808)
      FuncDecl: quals=None (at pp.c:15808)
        ParamList:  (at pp.c:15808)
          Decl: name='id', quals=[], storage=[] (at pp.c:15808)
            TypeDecl: declname='id', quals=[] (at pp.c:15808)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15808)
            PtrDecl: quals=[] (at pp.c:15808)
              TypeDecl: declname='msg', quals=[] (at pp.c:15808)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:15808)
            TypeDecl: declname='err', quals=[] (at pp.c:15808)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__Send__default__sendDone', quals=[] (at pp.c:15808)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15810)
  FuncDef:  (at pp.c:15814)
    Decl: name='AMQueueImplP__0__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:15814)
      FuncDecl: quals=None (at pp.c:15814)
        ParamList:  (at pp.c:15814)
          Decl: name='arg_0x102bc1e18', quals=[], storage=[] (at pp.c:15814)
            TypeDecl: declname='arg_0x102bc1e18', quals=[] (at pp.c:15814)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15814)
            PtrDecl: quals=[] (at pp.c:15814)
              TypeDecl: declname='msg', quals=[] (at pp.c:15814)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:15814)
            TypeDecl: declname='error', quals=[] (at pp.c:15814)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__Send__sendDone', quals=[] (at pp.c:15814)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15814)
      Switch:  (at pp.c:15816)
        ID: name='arg_0x102bc1e18' (at pp.c:15816)
        Compound:  (at pp.c:15816)
          Case:  (at pp.c:15818)
            Constant: type='int', value='0U' (at pp.c:15818)
            FuncCall:  (at None)
              ID: name='AMQueueEntryP__0__Send__sendDone' (at pp.c:15820)
              ExprList:  (at pp.c:15820)
                ID: name='msg' (at pp.c:15820)
                ID: name='error' (at pp.c:15820)
          Break:  (at pp.c:15822)
          Default:  (at pp.c:15824)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__Send__default__sendDone' (at pp.c:15826)
              ExprList:  (at pp.c:15826)
                ID: name='arg_0x102bc1e18' (at pp.c:15826)
                ID: name='msg' (at pp.c:15826)
                ID: name='error' (at pp.c:15826)
          Break:  (at pp.c:15828)
  FuncDef:  (at pp.c:15835)
    Decl: name='AMQueueImplP__0__CancelTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:15835)
      FuncDecl: quals=None (at pp.c:15835)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__0__CancelTask__runTask', quals=[] (at pp.c:15835)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15837)
      Decl: name='i', quals=[], storage=[] (at pp.c:15838)
        TypeDecl: declname='i', quals=[] (at pp.c:15838)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='j', quals=[], storage=[] (at pp.c:15840)
        TypeDecl: declname='j', quals=[] (at pp.c:15840)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='mask', quals=[], storage=[] (at pp.c:15842)
        TypeDecl: declname='mask', quals=[] (at pp.c:15842)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='last', quals=[], storage=[] (at pp.c:15844)
        TypeDecl: declname='last', quals=[] (at pp.c:15844)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='msg', quals=[], storage=[] (at pp.c:15845)
        PtrDecl: quals=[] (at pp.c:15845)
          TypeDecl: declname='msg', quals=[] (at pp.c:15845)
            IdentifierType: names=['message_t'] (at None)
      For:  (at pp.c:15848)
        Assignment: op='=' (at pp.c:15848)
          ID: name='i' (at pp.c:15848)
          Constant: type='int', value='0' (at pp.c:15848)
        BinaryOp: op='<' (at pp.c:15848)
          ID: name='i' (at pp.c:15848)
          BinaryOp: op='+' (at pp.c:15848)
            BinaryOp: op='/' (at pp.c:15848)
              Constant: type='int', value='1' (at pp.c:15848)
              Constant: type='int', value='8' (at pp.c:15848)
            Constant: type='int', value='1' (at pp.c:15848)
        UnaryOp: op='p++' (at pp.c:15848)
          ID: name='i' (at pp.c:15848)
        Compound:  (at pp.c:15848)
          If:  (at pp.c:15849)
            ArrayRef:  (at pp.c:15849)
              ID: name='AMQueueImplP__0__cancelMask' (at pp.c:15849)
              ID: name='i' (at pp.c:15849)
            Compound:  (at pp.c:15849)
              For:  (at pp.c:15850)
                ExprList:  (at pp.c:15850)
                  Assignment: op='=' (at pp.c:15850)
                    ID: name='mask' (at pp.c:15850)
                    Constant: type='int', value='1' (at pp.c:15850)
                  Assignment: op='=' (at pp.c:15850)
                    ID: name='j' (at pp.c:15850)
                    Constant: type='int', value='0' (at pp.c:15850)
                BinaryOp: op='<' (at pp.c:15850)
                  ID: name='j' (at pp.c:15850)
                  Constant: type='int', value='8' (at pp.c:15850)
                UnaryOp: op='p++' (at pp.c:15850)
                  ID: name='j' (at pp.c:15850)
                Compound:  (at pp.c:15850)
                  If:  (at pp.c:15851)
                    BinaryOp: op='&' (at pp.c:15851)
                      ArrayRef:  (at pp.c:15851)
                        ID: name='AMQueueImplP__0__cancelMask' (at pp.c:15851)
                        ID: name='i' (at pp.c:15851)
                      ID: name='mask' (at pp.c:15851)
                    Compound:  (at pp.c:15851)
                      Assignment: op='=' (at pp.c:15852)
                        ID: name='last' (at pp.c:15852)
                        BinaryOp: op='+' (at pp.c:15852)
                          BinaryOp: op='*' (at pp.c:15852)
                            ID: name='i' (at pp.c:15852)
                            Constant: type='int', value='8' (at pp.c:15852)
                          ID: name='j' (at pp.c:15852)
                      Assignment: op='=' (at pp.c:15853)
                        ID: name='msg' (at pp.c:15853)
                        StructRef: type='.' (at pp.c:15853)
                          ArrayRef:  (at pp.c:15853)
                            ID: name='AMQueueImplP__0__queue' (at pp.c:15853)
                            ID: name='last' (at pp.c:15853)
                          ID: name='msg' (at pp.c:15853)
                      Assignment: op='=' (at pp.c:15854)
                        StructRef: type='.' (at pp.c:15854)
                          ArrayRef:  (at pp.c:15854)
                            ID: name='AMQueueImplP__0__queue' (at pp.c:15854)
                            ID: name='last' (at pp.c:15854)
                          ID: name='msg' (at pp.c:15854)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            PtrDecl: quals=[] (at pp.c:15854)
                              TypeDecl: declname=None, quals=[] (at None)
                                IdentifierType: names=['void'] (at None)
                          Constant: type='int', value='0' (at pp.c:15854)
                      Assignment: op='&=' (at pp.c:15855)
                        ArrayRef:  (at pp.c:15855)
                          ID: name='AMQueueImplP__0__cancelMask' (at pp.c:15855)
                          ID: name='i' (at pp.c:15855)
                        UnaryOp: op='~' (at pp.c:15855)
                          ID: name='mask' (at pp.c:15855)
                      FuncCall:  (at None)
                        ID: name='AMQueueImplP__0__Send__sendDone' (at pp.c:15856)
                        ExprList:  (at pp.c:15856)
                          ID: name='last' (at pp.c:15856)
                          ID: name='msg' (at pp.c:15856)
                          ID: name='ECANCEL' (at pp.c:15856)
                  Assignment: op='<<=' (at pp.c:15858)
                    ID: name='mask' (at pp.c:15858)
                    Constant: type='int', value='1' (at pp.c:15858)
  FuncDef:  (at pp.c:15865)
    Decl: name='AMQueueImplP__0__errorTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:15865)
      FuncDecl: quals=None (at pp.c:15865)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__0__errorTask__runTask', quals=[] (at pp.c:15865)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15867)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__sendDone' (at pp.c:15868)
        ExprList:  (at pp.c:15868)
          ID: name='AMQueueImplP__0__current' (at pp.c:15868)
          StructRef: type='.' (at pp.c:15868)
            ArrayRef:  (at pp.c:15868)
              ID: name='AMQueueImplP__0__queue' (at pp.c:15868)
              ID: name='AMQueueImplP__0__current' (at pp.c:15868)
            ID: name='msg' (at pp.c:15868)
          ID: name='FAIL' (at pp.c:15868)
  FuncDef:  (at pp.c:15872)
    Decl: name='AMQueueImplP__0__errorTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:15872)
      FuncDecl: quals=None (at pp.c:15872)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__0__errorTask__postTask', quals=[] (at pp.c:15872)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15872)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15874)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15874)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15878)
        ID: name='__nesc_result' (at pp.c:15878)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:15878)
          ExprList:  (at pp.c:15878)
            ID: name='AMQueueImplP__0__errorTask' (at pp.c:15878)
      Return:  (at pp.c:15882)
        ID: name='__nesc_result' (at pp.c:15882)
  FuncDef:  (at pp.c:15887)
    Decl: name='AMQueueImplP__0__AMSend__send', quals=[], storage=['static', 'inline'] (at pp.c:15887)
      FuncDecl: quals=None (at pp.c:15887)
        ParamList:  (at pp.c:15887)
          Decl: name='arg_0x102bbe020', quals=[], storage=[] (at pp.c:15887)
            TypeDecl: declname='arg_0x102bbe020', quals=[] (at pp.c:15887)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:15887)
            TypeDecl: declname='addr', quals=[] (at pp.c:15887)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15887)
            PtrDecl: quals=[] (at pp.c:15887)
              TypeDecl: declname='msg', quals=[] (at pp.c:15887)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15887)
            TypeDecl: declname='len', quals=[] (at pp.c:15887)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__AMSend__send', quals=[] (at pp.c:15887)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15887)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15889)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15889)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15893)
        ID: name='__nesc_result' (at pp.c:15893)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__AMSend__send' (at pp.c:15893)
          ExprList:  (at pp.c:15893)
            ID: name='arg_0x102bbe020' (at pp.c:15893)
            ID: name='addr' (at pp.c:15893)
            ID: name='msg' (at pp.c:15893)
            ID: name='len' (at pp.c:15893)
      Return:  (at pp.c:15897)
        ID: name='__nesc_result' (at pp.c:15897)
  FuncDef:  (at pp.c:15902)
    Decl: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:15902)
      FuncDecl: quals=None (at pp.c:15902)
        ParamList:  (at pp.c:15902)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15902)
            PtrDecl: quals=[] (at pp.c:15902)
              TypeDecl: declname='msg', quals=[] (at pp.c:15902)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:15902)
          TypeDecl: declname='CC2420ActiveMessageP__CC2420PacketBody__getHeader', quals=[] (at pp.c:15902)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:15902)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15904)
        PtrDecl: quals=[] (at pp.c:15904)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15904)
            Struct: name='cc2420_header_t', packed=False (at pp.c:15904)
      Assignment: op='=' (at pp.c:15908)
        ID: name='__nesc_result' (at pp.c:15908)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:15908)
          ExprList:  (at pp.c:15908)
            ID: name='msg' (at pp.c:15908)
      Return:  (at pp.c:15912)
        ID: name='__nesc_result' (at pp.c:15912)
  FuncDef:  (at pp.c:15917)
    Decl: name='CC2420ActiveMessageP__Packet__payloadLength', quals=[], storage=['inline', 'static'] (at pp.c:15917)
      FuncDecl: quals=None (at pp.c:15917)
        ParamList:  (at pp.c:15917)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15917)
            PtrDecl: quals=[] (at pp.c:15917)
              TypeDecl: declname='msg', quals=[] (at pp.c:15917)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__Packet__payloadLength', quals=[] (at pp.c:15917)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15919)
      Return:  (at pp.c:15920)
        BinaryOp: op='-' (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint8' (at pp.c:15920)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  FuncCall:  (at None)
                    ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:15920)
                    ExprList:  (at pp.c:15920)
                      ID: name='msg' (at pp.c:15920)
                  ID: name='length' (at pp.c:15920)
                ID: name='nxdata' (at pp.c:15920)
          ID: name='CC2420_SIZE' (at pp.c:15920)
  FuncDef:  (at pp.c:15924)
    Decl: name='AMQueueImplP__0__Packet__payloadLength', quals=[], storage=['static', 'inline'] (at pp.c:15924)
      FuncDecl: quals=None (at pp.c:15924)
        ParamList:  (at pp.c:15924)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15924)
            PtrDecl: quals=[] (at pp.c:15924)
              TypeDecl: declname='msg', quals=[] (at pp.c:15924)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__Packet__payloadLength', quals=[] (at pp.c:15924)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15924)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15926)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15926)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15930)
        ID: name='__nesc_result' (at pp.c:15930)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__Packet__payloadLength' (at pp.c:15930)
          ExprList:  (at pp.c:15930)
            ID: name='msg' (at pp.c:15930)
      Return:  (at pp.c:15934)
        ID: name='__nesc_result' (at pp.c:15934)
  FuncDef:  (at pp.c:15939)
    Decl: name='AMQueueImplP__0__AMPacket__destination', quals=[], storage=['static', 'inline'] (at pp.c:15939)
      FuncDecl: quals=None (at pp.c:15939)
        ParamList:  (at pp.c:15939)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15939)
            PtrDecl: quals=[] (at pp.c:15939)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15939)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__AMPacket__destination', quals=[] (at pp.c:15939)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:15939)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15941)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15941)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15945)
        ID: name='__nesc_result' (at pp.c:15945)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__AMPacket__destination' (at pp.c:15945)
          ExprList:  (at pp.c:15945)
            ID: name='amsg' (at pp.c:15945)
      Return:  (at pp.c:15949)
        ID: name='__nesc_result' (at pp.c:15949)
  FuncDef:  (at pp.c:15954)
    Decl: name='CC2420ActiveMessageP__AMPacket__type', quals=[], storage=['inline', 'static'] (at pp.c:15954)
      FuncDecl: quals=None (at pp.c:15954)
        ParamList:  (at pp.c:15954)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15954)
            PtrDecl: quals=[] (at pp.c:15954)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15954)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__type', quals=[] (at pp.c:15954)
          IdentifierType: names=['am_id_t'] (at None)
    Compound:  (at pp.c:15956)
      Decl: name='header', quals=[], storage=[] (at pp.c:15957)
        PtrDecl: quals=[] (at pp.c:15957)
          TypeDecl: declname='header', quals=[] (at pp.c:15957)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:15957)
          ExprList:  (at pp.c:15957)
            ID: name='amsg' (at pp.c:15957)
      Return:  (at pp.c:15960)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_leuint8' (at pp.c:15960)
          ExprList:  (at pp.c:15960)
            StructRef: type='.' (at pp.c:15960)
              StructRef: type='->' (at pp.c:15960)
                ID: name='header' (at pp.c:15960)
                ID: name='type' (at pp.c:15960)
              ID: name='nxdata' (at pp.c:15960)
  FuncDef:  (at pp.c:15964)
    Decl: name='AMQueueImplP__0__AMPacket__type', quals=[], storage=['static', 'inline'] (at pp.c:15964)
      FuncDecl: quals=None (at pp.c:15964)
        ParamList:  (at pp.c:15964)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15964)
            PtrDecl: quals=[] (at pp.c:15964)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15964)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__AMPacket__type', quals=[] (at pp.c:15964)
          IdentifierType: names=['am_id_t'] (at None)
    Compound:  (at pp.c:15964)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15966)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15966)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15970)
        ID: name='__nesc_result' (at pp.c:15970)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__AMPacket__type' (at pp.c:15970)
          ExprList:  (at pp.c:15970)
            ID: name='amsg' (at pp.c:15970)
      Return:  (at pp.c:15974)
        ID: name='__nesc_result' (at pp.c:15974)
  FuncDef:  (at pp.c:15979)
    Decl: name='AMQueueImplP__0__nextPacket', quals=[], storage=['inline', 'static'] (at pp.c:15979)
      FuncDecl: quals=None (at pp.c:15979)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__0__nextPacket', quals=[] (at pp.c:15979)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15981)
      Decl: name='i', quals=[], storage=[] (at pp.c:15982)
        TypeDecl: declname='i', quals=[] (at pp.c:15982)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='=' (at pp.c:15985)
        ID: name='AMQueueImplP__0__current' (at pp.c:15985)
        BinaryOp: op='%' (at pp.c:15985)
          BinaryOp: op='+' (at pp.c:15985)
            ID: name='AMQueueImplP__0__current' (at pp.c:15985)
            Constant: type='int', value='1' (at pp.c:15985)
          Constant: type='int', value='1' (at pp.c:15985)
      For:  (at pp.c:15986)
        Assignment: op='=' (at pp.c:15986)
          ID: name='i' (at pp.c:15986)
          Constant: type='int', value='0' (at pp.c:15986)
        BinaryOp: op='<' (at pp.c:15986)
          ID: name='i' (at pp.c:15986)
          Constant: type='int', value='1' (at pp.c:15986)
        UnaryOp: op='p++' (at pp.c:15986)
          ID: name='i' (at pp.c:15986)
        Compound:  (at pp.c:15986)
          If:  (at pp.c:15987)
            BinaryOp: op='||' (at pp.c:15987)
              BinaryOp: op='==' (at pp.c:15987)
                StructRef: type='.' (at pp.c:15987)
                  ArrayRef:  (at pp.c:15987)
                    ID: name='AMQueueImplP__0__queue' (at pp.c:15987)
                    ID: name='AMQueueImplP__0__current' (at pp.c:15987)
                  ID: name='msg' (at pp.c:15987)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:15987)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['void'] (at None)
                  Constant: type='int', value='0' (at pp.c:15987)
              BinaryOp: op='&' (at pp.c:15988)
                ArrayRef:  (at pp.c:15988)
                  ID: name='AMQueueImplP__0__cancelMask' (at pp.c:15988)
                  BinaryOp: op='/' (at pp.c:15988)
                    ID: name='AMQueueImplP__0__current' (at pp.c:15988)
                    Constant: type='int', value='8' (at pp.c:15988)
                BinaryOp: op='<<' (at pp.c:15988)
                  Constant: type='int', value='1' (at pp.c:15988)
                  BinaryOp: op='%' (at pp.c:15988)
                    ID: name='AMQueueImplP__0__current' (at pp.c:15988)
                    Constant: type='int', value='8' (at pp.c:15988)
            Compound:  (at pp.c:15989)
              Assignment: op='=' (at pp.c:15990)
                ID: name='AMQueueImplP__0__current' (at pp.c:15990)
                BinaryOp: op='%' (at pp.c:15990)
                  BinaryOp: op='+' (at pp.c:15990)
                    ID: name='AMQueueImplP__0__current' (at pp.c:15990)
                    Constant: type='int', value='1' (at pp.c:15990)
                  Constant: type='int', value='1' (at pp.c:15990)
            Compound:  (at pp.c:15992)
              Break:  (at pp.c:15993)
      If:  (at pp.c:15996)
        BinaryOp: op='>=' (at pp.c:15996)
          ID: name='i' (at pp.c:15996)
          Constant: type='int', value='1' (at pp.c:15996)
        Compound:  (at pp.c:15996)
          Assignment: op='=' (at pp.c:15998)
            ID: name='AMQueueImplP__0__current' (at pp.c:15998)
            Constant: type='int', value='1' (at pp.c:15998)
  FuncDef:  (at pp.c:16003)
    Decl: name='AMQueueImplP__0__tryToSend', quals=[], storage=['inline', 'static'] (at pp.c:16003)
      FuncDecl: quals=None (at pp.c:16003)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__0__tryToSend', quals=[] (at pp.c:16003)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16005)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__nextPacket' (at pp.c:16006)
      If:  (at pp.c:16007)
        BinaryOp: op='<' (at pp.c:16007)
          ID: name='AMQueueImplP__0__current' (at pp.c:16007)
          Constant: type='int', value='1' (at pp.c:16007)
        Compound:  (at pp.c:16007)
          Decl: name='nextErr', quals=[], storage=[] (at pp.c:16008)
            TypeDecl: declname='nextErr', quals=[] (at pp.c:16008)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='nextMsg', quals=[], storage=[] (at pp.c:16009)
            PtrDecl: quals=[] (at pp.c:16009)
              TypeDecl: declname='nextMsg', quals=[] (at pp.c:16009)
                IdentifierType: names=['message_t'] (at None)
            StructRef: type='.' (at pp.c:16009)
              ArrayRef:  (at pp.c:16009)
                ID: name='AMQueueImplP__0__queue' (at pp.c:16009)
                ID: name='AMQueueImplP__0__current' (at pp.c:16009)
              ID: name='msg' (at pp.c:16009)
          Decl: name='nextId', quals=[], storage=[] (at pp.c:16010)
            TypeDecl: declname='nextId', quals=[] (at pp.c:16010)
              IdentifierType: names=['am_id_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMPacket__type' (at pp.c:16010)
              ExprList:  (at pp.c:16010)
                ID: name='nextMsg' (at pp.c:16010)
          Decl: name='nextDest', quals=[], storage=[] (at pp.c:16011)
            TypeDecl: declname='nextDest', quals=[] (at pp.c:16011)
              IdentifierType: names=['am_addr_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMPacket__destination' (at pp.c:16011)
              ExprList:  (at pp.c:16011)
                ID: name='nextMsg' (at pp.c:16011)
          Decl: name='len', quals=[], storage=[] (at pp.c:16012)
            TypeDecl: declname='len', quals=[] (at pp.c:16012)
              IdentifierType: names=['uint8_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__Packet__payloadLength' (at pp.c:16012)
              ExprList:  (at pp.c:16012)
                ID: name='nextMsg' (at pp.c:16012)
          Assignment: op='=' (at pp.c:16015)
            ID: name='nextErr' (at pp.c:16015)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMSend__send' (at pp.c:16015)
              ExprList:  (at pp.c:16015)
                ID: name='nextId' (at pp.c:16015)
                ID: name='nextDest' (at pp.c:16015)
                ID: name='nextMsg' (at pp.c:16015)
                ID: name='len' (at pp.c:16015)
          If:  (at pp.c:16016)
            BinaryOp: op='!=' (at pp.c:16016)
              ID: name='nextErr' (at pp.c:16016)
              ID: name='SUCCESS' (at pp.c:16016)
            Compound:  (at pp.c:16016)
              FuncCall:  (at None)
                ID: name='AMQueueImplP__0__errorTask__postTask' (at pp.c:16017)
  FuncDef:  (at pp.c:16023)
    Decl: name='CC2420CsmaP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:16023)
      FuncDecl: quals=None (at pp.c:16023)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__Send__maxPayloadLength', quals=[] (at pp.c:16023)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16025)
      Return:  (at pp.c:16026)
        Constant: type='int', value='28' (at pp.c:16026)
  FuncDef:  (at pp.c:16030)
    Decl: name='DefaultLplP__SubSend__maxPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:16030)
      FuncDecl: quals=None (at pp.c:16030)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SubSend__maxPayloadLength', quals=[] (at pp.c:16030)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16030)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16032)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16032)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16036)
        ID: name='__nesc_result' (at pp.c:16036)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__Send__maxPayloadLength' (at pp.c:16036)
      Return:  (at pp.c:16040)
        ID: name='__nesc_result' (at pp.c:16040)
  FuncDef:  (at pp.c:16045)
    Decl: name='DefaultLplP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:16045)
      FuncDecl: quals=None (at pp.c:16045)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__Send__maxPayloadLength', quals=[] (at pp.c:16045)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16047)
      Return:  (at pp.c:16048)
        FuncCall:  (at None)
          ID: name='DefaultLplP__SubSend__maxPayloadLength' (at pp.c:16048)
  FuncDef:  (at pp.c:16052)
    Decl: name='UniqueSendP__SubSend__maxPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:16052)
      FuncDecl: quals=None (at pp.c:16052)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueSendP__SubSend__maxPayloadLength', quals=[] (at pp.c:16052)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16052)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16054)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16054)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16058)
        ID: name='__nesc_result' (at pp.c:16058)
        FuncCall:  (at None)
          ID: name='DefaultLplP__Send__maxPayloadLength' (at pp.c:16058)
      Return:  (at pp.c:16062)
        ID: name='__nesc_result' (at pp.c:16062)
  FuncDef:  (at pp.c:16067)
    Decl: name='UniqueSendP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:16067)
      FuncDecl: quals=None (at pp.c:16067)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueSendP__Send__maxPayloadLength', quals=[] (at pp.c:16067)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16069)
      Return:  (at pp.c:16070)
        FuncCall:  (at None)
          ID: name='UniqueSendP__SubSend__maxPayloadLength' (at pp.c:16070)
  FuncDef:  (at pp.c:16074)
    Decl: name='CC2420TinyosNetworkP__SubSend__maxPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:16074)
      FuncDecl: quals=None (at pp.c:16074)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__SubSend__maxPayloadLength', quals=[] (at pp.c:16074)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16074)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16076)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16076)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16080)
        ID: name='__nesc_result' (at pp.c:16080)
        FuncCall:  (at None)
          ID: name='UniqueSendP__Send__maxPayloadLength' (at pp.c:16080)
      Return:  (at pp.c:16084)
        ID: name='__nesc_result' (at pp.c:16084)
  FuncDef:  (at pp.c:16089)
    Decl: name='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:16089)
      FuncDecl: quals=None (at pp.c:16089)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[] (at pp.c:16089)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16091)
      Return:  (at pp.c:16092)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__SubSend__maxPayloadLength' (at pp.c:16092)
  FuncDef:  (at pp.c:16096)
    Decl: name='CC2420ActiveMessageP__SubSend__maxPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:16096)
      FuncDecl: quals=None (at pp.c:16096)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubSend__maxPayloadLength', quals=[] (at pp.c:16096)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16096)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16098)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16098)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16102)
        ID: name='__nesc_result' (at pp.c:16102)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength' (at pp.c:16102)
      Return:  (at pp.c:16106)
        ID: name='__nesc_result' (at pp.c:16106)
  FuncDef:  (at pp.c:16111)
    Decl: name='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:16111)
      FuncDecl: quals=None (at pp.c:16111)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[] (at pp.c:16111)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16113)
      Return:  (at pp.c:16114)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__SubSend__maxPayloadLength' (at pp.c:16114)
  FuncDef:  (at pp.c:16118)
    Decl: name='CC2420ControlP__CC2420Config__getPanAddr', quals=[], storage=['inline', 'static'] (at pp.c:16118)
      FuncDecl: quals=None (at pp.c:16118)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__getPanAddr', quals=[] (at pp.c:16118)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:16120)
      Compound:  (at pp.c:16121)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16121)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16121)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:16121)
        Compound:  (at pp.c:16123)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:16124)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:16124)
              IdentifierType: names=['int', 'unsigned'] (at None)
            ID: name='CC2420ControlP__m_pan' (at pp.c:16126)
          Compound:  (at pp.c:16128)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:16130)
              ExprList:  (at pp.c:16130)
                ID: name='__nesc_atomic' (at pp.c:16130)
            Return:  (at pp.c:16132)
              ID: name='__nesc_temp' (at pp.c:16132)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:16136)
          ExprList:  (at pp.c:16136)
            ID: name='__nesc_atomic' (at pp.c:16136)
  FuncDef:  (at pp.c:16140)
    Decl: name='CC2420ActiveMessageP__CC2420Config__getPanAddr', quals=[], storage=['static', 'inline'] (at pp.c:16140)
      FuncDecl: quals=None (at pp.c:16140)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__CC2420Config__getPanAddr', quals=[] (at pp.c:16140)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:16140)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16142)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16142)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16146)
        ID: name='__nesc_result' (at pp.c:16146)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__getPanAddr' (at pp.c:16146)
      Return:  (at pp.c:16150)
        ID: name='__nesc_result' (at pp.c:16150)
  FuncDef:  (at pp.c:16155)
    Decl: name='CC2420TinyosNetworkP__Queue__isEmpty', quals=[], storage=['static', 'inline'] (at pp.c:16155)
      FuncDecl: quals=None (at pp.c:16155)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Queue__isEmpty', quals=[] (at pp.c:16155)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16155)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16157)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16157)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16161)
        ID: name='__nesc_result' (at pp.c:16161)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__0__FcfsQueue__isEmpty' (at pp.c:16161)
      Return:  (at pp.c:16165)
        ID: name='__nesc_result' (at pp.c:16165)
  FuncDef:  (at pp.c:16170)
    Decl: name='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:16170)
      FuncDecl: quals=None (at pp.c:16170)
        ParamList:  (at pp.c:16170)
          Decl: name='id', quals=[], storage=[] (at pp.c:16170)
            TypeDecl: declname='id', quals=[] (at pp.c:16170)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[] (at pp.c:16170)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16172)
      If:  (at pp.c:16173)
        BinaryOp: op='==' (at pp.c:16173)
          ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:16173)
          ID: name='id' (at pp.c:16173)
        Compound:  (at pp.c:16173)
          Return:  (at pp.c:16175)
            ID: name='EALREADY' (at pp.c:16175)
      If:  (at pp.c:16177)
        BinaryOp: op='>' (at pp.c:16177)
          ID: name='CC2420TinyosNetworkP__TINYOS_N_NETWORKS' (at pp.c:16177)
          Constant: type='int', value='1' (at pp.c:16177)
        Compound:  (at pp.c:16177)
          If:  (at pp.c:16178)
            BinaryOp: op='&&' (at pp.c:16178)
              BinaryOp: op='==' (at pp.c:16178)
                ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:16178)
                ID: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:16178)
              FuncCall:  (at None)
                ID: name='CC2420TinyosNetworkP__Queue__isEmpty' (at pp.c:16178)
            Compound:  (at pp.c:16178)
              Assignment: op='=' (at pp.c:16179)
                ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:16179)
                ID: name='id' (at pp.c:16179)
              Return:  (at pp.c:16180)
                ID: name='SUCCESS' (at pp.c:16180)
          Return:  (at pp.c:16182)
            ID: name='FAIL' (at pp.c:16182)
        Compound:  (at pp.c:16186)
          Assignment: op='=' (at pp.c:16187)
            ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:16187)
            ID: name='id' (at pp.c:16187)
          Return:  (at pp.c:16188)
            ID: name='SUCCESS' (at pp.c:16188)
  FuncDef:  (at pp.c:16193)
    Decl: name='CC2420ActiveMessageP__RadioResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:16193)
      FuncDecl: quals=None (at pp.c:16193)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioResource__immediateRequest', quals=[] (at pp.c:16193)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16193)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16195)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16195)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16199)
        ID: name='__nesc_result' (at pp.c:16199)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__Resource__immediateRequest' (at pp.c:16199)
          ExprList:  (at pp.c:16199)
            ID: name='CC2420ActiveMessageC__CC2420_AM_SEND_ID' (at pp.c:16199)
      Return:  (at pp.c:16203)
        ID: name='__nesc_result' (at pp.c:16203)
  FuncDef:  (at pp.c:16208)
    Decl: name='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[], storage=['inline', 'static'] (at pp.c:16208)
      FuncDecl: quals=None (at pp.c:16208)
        ParamList:  (at pp.c:16208)
          Decl: name='amId', quals=[], storage=[] (at pp.c:16208)
            TypeDecl: declname='amId', quals=[] (at pp.c:16208)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:16208)
            TypeDecl: declname='addr', quals=[] (at pp.c:16208)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16208)
            PtrDecl: quals=[] (at pp.c:16208)
              TypeDecl: declname='msg', quals=[] (at pp.c:16208)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[] (at pp.c:16208)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16210)
  FuncDef:  (at pp.c:16214)
    Decl: name='CC2420ActiveMessageP__SendNotifier__aboutToSend', quals=[], storage=['static', 'inline'] (at pp.c:16214)
      FuncDecl: quals=None (at pp.c:16214)
        ParamList:  (at pp.c:16214)
          Decl: name='arg_0x102b20258', quals=[], storage=[] (at pp.c:16214)
            TypeDecl: declname='arg_0x102b20258', quals=[] (at pp.c:16214)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='dest', quals=[], storage=[] (at pp.c:16214)
            TypeDecl: declname='dest', quals=[] (at pp.c:16214)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16214)
            PtrDecl: quals=[] (at pp.c:16214)
              TypeDecl: declname='msg', quals=[] (at pp.c:16214)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SendNotifier__aboutToSend', quals=[] (at pp.c:16214)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16214)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SendNotifier__default__aboutToSend' (at pp.c:16216)
        ExprList:  (at pp.c:16216)
          ID: name='arg_0x102b20258' (at pp.c:16216)
          ID: name='dest' (at pp.c:16216)
          ID: name='msg' (at pp.c:16216)
  FuncDef:  (at pp.c:16221)
    Decl: name='CC2420ActiveMessageP__SubSend__send', quals=[], storage=['static', 'inline'] (at pp.c:16221)
      FuncDecl: quals=None (at pp.c:16221)
        ParamList:  (at pp.c:16221)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16221)
            PtrDecl: quals=[] (at pp.c:16221)
              TypeDecl: declname='msg', quals=[] (at pp.c:16221)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:16221)
            TypeDecl: declname='len', quals=[] (at pp.c:16221)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubSend__send', quals=[] (at pp.c:16221)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16221)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16223)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16223)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16227)
        ID: name='__nesc_result' (at pp.c:16227)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__ActiveSend__send' (at pp.c:16227)
          ExprList:  (at pp.c:16227)
            ID: name='msg' (at pp.c:16227)
            ID: name='len' (at pp.c:16227)
      Return:  (at pp.c:16231)
        ID: name='__nesc_result' (at pp.c:16231)
  FuncDef:  (at pp.c:16236)
    Decl: name='CC2420PacketP__CC2420Packet__setNetwork', quals=[], storage=['inline', 'static'] (at pp.c:16236)
      FuncDecl: quals=None (at pp.c:16236)
        ParamList:  (at pp.c:16236)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:16236)
            PtrDecl: quals=[] (at pp.c:16236)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:16236)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='networkId', quals=[], storage=[] (at pp.c:16236)
            TypeDecl: declname='networkId', quals=[] (at pp.c:16236)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420PacketP__CC2420Packet__setNetwork', quals=[] (at pp.c:16236)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16238)
      Compound:  (at pp.c:16240)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16240)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16240)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:16240)
        Assignment: op='=' (at None)
          UnaryOp: op='*' (at None)
            FuncCall:  (at None)
              ID: name='CC2420PacketP__getNetwork' (at pp.c:16241)
              ExprList:  (at pp.c:16241)
                ID: name='p_msg' (at pp.c:16241)
          ID: name='networkId' (at pp.c:16241)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:16243)
          ExprList:  (at pp.c:16243)
            ID: name='__nesc_atomic' (at pp.c:16243)
  FuncDef:  (at pp.c:16247)
    Decl: name='CC2420TinyosNetworkP__CC2420Packet__setNetwork', quals=[], storage=['static', 'inline'] (at pp.c:16247)
      FuncDecl: quals=None (at pp.c:16247)
        ParamList:  (at pp.c:16247)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:16247)
            PtrDecl: quals=[] (at pp.c:16247)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:16247)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='networkId', quals=[], storage=[] (at pp.c:16247)
            TypeDecl: declname='networkId', quals=[] (at pp.c:16247)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__CC2420Packet__setNetwork', quals=[] (at pp.c:16247)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16247)
      FuncCall:  (at None)
        ID: name='CC2420PacketP__CC2420Packet__setNetwork' (at pp.c:16249)
        ExprList:  (at pp.c:16249)
          ID: name='p_msg' (at pp.c:16249)
          ID: name='networkId' (at pp.c:16249)
  FuncDef:  (at pp.c:16254)
    Decl: name='CC2420PacketP__getAddressLength', quals=[], storage=['inline', 'static'] (at pp.c:16254)
      FuncDecl: quals=None (at pp.c:16254)
        ParamList:  (at pp.c:16254)
          Decl: name='type', quals=[], storage=[] (at pp.c:16254)
            TypeDecl: declname='type', quals=[] (at pp.c:16254)
              IdentifierType: names=['int'] (at None)
        TypeDecl: declname='CC2420PacketP__getAddressLength', quals=[] (at pp.c:16254)
          IdentifierType: names=['int'] (at None)
    Compound:  (at pp.c:16256)
      Switch:  (at pp.c:16257)
        ID: name='type' (at pp.c:16257)
        Compound:  (at pp.c:16257)
          Case:  (at pp.c:16258)
            ID: name='IEEE154_ADDR_SHORT' (at pp.c:16258)
            Return:  (at pp.c:16258)
              Constant: type='int', value='2' (at pp.c:16258)
          Case:  (at pp.c:16259)
            ID: name='IEEE154_ADDR_EXT' (at pp.c:16259)
            Return:  (at pp.c:16259)
              Constant: type='int', value='8' (at pp.c:16259)
          Case:  (at pp.c:16260)
            ID: name='IEEE154_ADDR_NONE' (at pp.c:16260)
            Return:  (at pp.c:16260)
              Constant: type='int', value='0' (at pp.c:16260)
          Default:  (at pp.c:16261)
            Return:  (at pp.c:16261)
              UnaryOp: op='-' (at pp.c:16261)
                Constant: type='int', value='100' (at pp.c:16261)
  FuncDef:  (at pp.c:16266)
    Decl: name='__nesc_hton_leuint8', quals=[], storage=['__inline', 'static'] (at pp.c:16266)
      FuncDecl: quals=None (at pp.c:16266)
        ParamList:  (at pp.c:16266)
          Decl: name='target', quals=[], storage=[] (at pp.c:16266)
            PtrDecl: quals=[] (at pp.c:16266)
              TypeDecl: declname='target', quals=[] (at pp.c:16266)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:16266)
            TypeDecl: declname='value', quals=[] (at pp.c:16266)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='__nesc_hton_leuint8', quals=[] (at pp.c:16266)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16268)
      Decl: name='base', quals=[], storage=[] (at pp.c:16269)
        PtrDecl: quals=[] (at pp.c:16269)
          TypeDecl: declname='base', quals=[] (at pp.c:16269)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='target' (at pp.c:16269)
      Assignment: op='=' (at pp.c:16272)
        ArrayRef:  (at pp.c:16272)
          ID: name='base' (at pp.c:16272)
          Constant: type='int', value='0' (at pp.c:16272)
        ID: name='value' (at pp.c:16272)
      Return:  (at pp.c:16273)
        ID: name='value' (at pp.c:16273)
  FuncDef:  (at pp.c:16277)
    Decl: name='DefaultLplP__startRadio__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16277)
      FuncDecl: quals=None (at pp.c:16277)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__startRadio__postTask', quals=[] (at pp.c:16277)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16277)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16279)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16279)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16283)
        ID: name='__nesc_result' (at pp.c:16283)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16283)
          ExprList:  (at pp.c:16283)
            ID: name='DefaultLplP__startRadio' (at pp.c:16283)
      Return:  (at pp.c:16287)
        ID: name='__nesc_result' (at pp.c:16287)
  FuncDef:  (at pp.c:16292)
    Decl: name='DefaultLplP__RadioPowerState__getState', quals=[], storage=['static', 'inline'] (at pp.c:16292)
      FuncDecl: quals=None (at pp.c:16292)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__RadioPowerState__getState', quals=[] (at pp.c:16292)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16292)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16294)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16294)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16298)
        ID: name='__nesc_result' (at pp.c:16298)
        FuncCall:  (at None)
          ID: name='StateImplP__State__getState' (at pp.c:16298)
          ExprList:  (at pp.c:16298)
            Constant: type='int', value='3U' (at pp.c:16298)
      Return:  (at pp.c:16302)
        ID: name='__nesc_result' (at pp.c:16302)
  FuncDef:  (at pp.c:16307)
    Decl: name='VirtualizeTimerC__0__Timer__stop', quals=[], storage=['inline', 'static'] (at pp.c:16307)
      FuncDecl: quals=None (at pp.c:16307)
        ParamList:  (at pp.c:16307)
          Decl: name='num', quals=[], storage=[] (at pp.c:16307)
            TypeDecl: declname='num', quals=[] (at pp.c:16307)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__stop', quals=[] (at pp.c:16307)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16308)
      Assignment: op='=' (at pp.c:16309)
        StructRef: type='.' (at pp.c:16309)
          ArrayRef:  (at pp.c:16309)
            ID: name='VirtualizeTimerC__0__m_timers' (at pp.c:16309)
            ID: name='num' (at pp.c:16309)
          ID: name='isrunning' (at pp.c:16309)
        ID: name='FALSE' (at pp.c:16309)
  FuncDef:  (at pp.c:16313)
    Decl: name='DefaultLplP__SendDoneTimer__stop', quals=[], storage=['static', 'inline'] (at pp.c:16313)
      FuncDecl: quals=None (at pp.c:16313)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SendDoneTimer__stop', quals=[] (at pp.c:16313)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16313)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__stop' (at pp.c:16315)
        ExprList:  (at pp.c:16315)
          Constant: type='int', value='4U' (at pp.c:16315)
  FuncDef:  (at pp.c:16319)
    Decl: name='DefaultLplP__OffTimer__stop', quals=[], storage=['static', 'inline'] (at pp.c:16319)
      FuncDecl: quals=None (at pp.c:16319)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__OffTimer__stop', quals=[] (at pp.c:16319)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16319)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__stop' (at pp.c:16321)
        ExprList:  (at pp.c:16321)
          Constant: type='int', value='3U' (at pp.c:16321)
  FuncDef:  (at pp.c:16326)
    Decl: name='DefaultLplP__SendState__requestState', quals=[], storage=['static', 'inline'] (at pp.c:16326)
      FuncDecl: quals=None (at pp.c:16326)
        ParamList:  (at pp.c:16326)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:16326)
            TypeDecl: declname='reqState', quals=[] (at pp.c:16326)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DefaultLplP__SendState__requestState', quals=[] (at pp.c:16326)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16326)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16328)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16328)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16332)
        ID: name='__nesc_result' (at pp.c:16332)
        FuncCall:  (at None)
          ID: name='StateImplP__State__requestState' (at pp.c:16332)
          ExprList:  (at pp.c:16332)
            Constant: type='int', value='5U' (at pp.c:16332)
            ID: name='reqState' (at pp.c:16332)
      Return:  (at pp.c:16336)
        ID: name='__nesc_result' (at pp.c:16336)
  FuncDef:  (at pp.c:16341)
    Decl: name='DefaultLplP__SplitControlState__getState', quals=[], storage=['static', 'inline'] (at pp.c:16341)
      FuncDecl: quals=None (at pp.c:16341)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SplitControlState__getState', quals=[] (at pp.c:16341)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16341)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16343)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16343)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16347)
        ID: name='__nesc_result' (at pp.c:16347)
        FuncCall:  (at None)
          ID: name='StateImplP__State__getState' (at pp.c:16347)
          ExprList:  (at pp.c:16347)
            Constant: type='int', value='4U' (at pp.c:16347)
      Return:  (at pp.c:16351)
        ID: name='__nesc_result' (at pp.c:16351)
  FuncDef:  (at pp.c:16356)
    Decl: name='DefaultLplP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:16356)
      FuncDecl: quals=None (at pp.c:16356)
        ParamList:  (at pp.c:16356)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16356)
            PtrDecl: quals=[] (at pp.c:16356)
              TypeDecl: declname='msg', quals=[] (at pp.c:16356)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:16356)
            TypeDecl: declname='len', quals=[] (at pp.c:16356)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DefaultLplP__Send__send', quals=[] (at pp.c:16356)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16358)
      If:  (at pp.c:16359)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SplitControlState__getState' (at pp.c:16359)
          ID: name='DefaultLplP__S_OFF' (at pp.c:16359)
        Compound:  (at pp.c:16359)
          Return:  (at pp.c:16361)
            ID: name='EOFF' (at pp.c:16361)
      If:  (at pp.c:16364)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendState__requestState' (at pp.c:16364)
            ExprList:  (at pp.c:16364)
              ID: name='S_LPL_SENDING' (at pp.c:16364)
          ID: name='SUCCESS' (at pp.c:16364)
        Compound:  (at pp.c:16364)
          Assignment: op='=' (at pp.c:16365)
            ID: name='DefaultLplP__currentSendMsg' (at pp.c:16365)
            ID: name='msg' (at pp.c:16365)
          Assignment: op='=' (at pp.c:16366)
            ID: name='DefaultLplP__currentSendLen' (at pp.c:16366)
            ID: name='len' (at pp.c:16366)
          FuncCall:  (at None)
            ID: name='DefaultLplP__OffTimer__stop' (at pp.c:16369)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendDoneTimer__stop' (at pp.c:16370)
          If:  (at pp.c:16372)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='DefaultLplP__RadioPowerState__getState' (at pp.c:16372)
              ID: name='DefaultLplP__S_ON' (at pp.c:16372)
            Compound:  (at pp.c:16372)
              FuncCall:  (at None)
                ID: name='DefaultLplP__initializeSend' (at pp.c:16373)
              Return:  (at pp.c:16374)
                ID: name='SUCCESS' (at pp.c:16374)
            Compound:  (at pp.c:16376)
              FuncCall:  (at None)
                ID: name='DefaultLplP__startRadio__postTask' (at pp.c:16377)
          Return:  (at pp.c:16380)
            ID: name='SUCCESS' (at pp.c:16380)
      Return:  (at pp.c:16383)
        ID: name='EBUSY' (at pp.c:16383)
  FuncDef:  (at pp.c:16387)
    Decl: name='UniqueSendP__SubSend__send', quals=[], storage=['static', 'inline'] (at pp.c:16387)
      FuncDecl: quals=None (at pp.c:16387)
        ParamList:  (at pp.c:16387)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16387)
            PtrDecl: quals=[] (at pp.c:16387)
              TypeDecl: declname='msg', quals=[] (at pp.c:16387)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:16387)
            TypeDecl: declname='len', quals=[] (at pp.c:16387)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='UniqueSendP__SubSend__send', quals=[] (at pp.c:16387)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16387)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16389)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16389)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16393)
        ID: name='__nesc_result' (at pp.c:16393)
        FuncCall:  (at None)
          ID: name='DefaultLplP__Send__send' (at pp.c:16393)
          ExprList:  (at pp.c:16393)
            ID: name='msg' (at pp.c:16393)
            ID: name='len' (at pp.c:16393)
      Return:  (at pp.c:16397)
        ID: name='__nesc_result' (at pp.c:16397)
  FuncDef:  (at pp.c:16402)
    Decl: name='UniqueSendP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:16402)
      FuncDecl: quals=None (at pp.c:16402)
        ParamList:  (at pp.c:16402)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16402)
            PtrDecl: quals=[] (at pp.c:16402)
              TypeDecl: declname='msg', quals=[] (at pp.c:16402)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:16402)
          TypeDecl: declname='UniqueSendP__CC2420PacketBody__getHeader', quals=[] (at pp.c:16402)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:16402)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16404)
        PtrDecl: quals=[] (at pp.c:16404)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16404)
            Struct: name='cc2420_header_t', packed=False (at pp.c:16404)
      Assignment: op='=' (at pp.c:16408)
        ID: name='__nesc_result' (at pp.c:16408)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:16408)
          ExprList:  (at pp.c:16408)
            ID: name='msg' (at pp.c:16408)
      Return:  (at pp.c:16412)
        ID: name='__nesc_result' (at pp.c:16412)
  FuncDef:  (at pp.c:16417)
    Decl: name='UniqueSendP__State__requestState', quals=[], storage=['static', 'inline'] (at pp.c:16417)
      FuncDecl: quals=None (at pp.c:16417)
        ParamList:  (at pp.c:16417)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:16417)
            TypeDecl: declname='reqState', quals=[] (at pp.c:16417)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='UniqueSendP__State__requestState', quals=[] (at pp.c:16417)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16417)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16419)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16419)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16423)
        ID: name='__nesc_result' (at pp.c:16423)
        FuncCall:  (at None)
          ID: name='StateImplP__State__requestState' (at pp.c:16423)
          ExprList:  (at pp.c:16423)
            Constant: type='int', value='2U' (at pp.c:16423)
            ID: name='reqState' (at pp.c:16423)
      Return:  (at pp.c:16427)
        ID: name='__nesc_result' (at pp.c:16427)
  FuncDef:  (at pp.c:16432)
    Decl: name='UniqueSendP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:16432)
      FuncDecl: quals=None (at pp.c:16432)
        ParamList:  (at pp.c:16432)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16432)
            PtrDecl: quals=[] (at pp.c:16432)
              TypeDecl: declname='msg', quals=[] (at pp.c:16432)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:16432)
            TypeDecl: declname='len', quals=[] (at pp.c:16432)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='UniqueSendP__Send__send', quals=[] (at pp.c:16432)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16434)
      Decl: name='error', quals=[], storage=[] (at pp.c:16435)
        TypeDecl: declname='error', quals=[] (at pp.c:16435)
          IdentifierType: names=['error_t'] (at None)
      If:  (at pp.c:16438)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='UniqueSendP__State__requestState' (at pp.c:16438)
            ExprList:  (at pp.c:16438)
              ID: name='UniqueSendP__S_SENDING' (at pp.c:16438)
          ID: name='SUCCESS' (at pp.c:16438)
        Compound:  (at pp.c:16438)
          FuncCall:  (at None)
            ID: name='__nesc_hton_leuint8' (at pp.c:16439)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  FuncCall:  (at None)
                    ID: name='UniqueSendP__CC2420PacketBody__getHeader' (at pp.c:16439)
                    ExprList:  (at pp.c:16439)
                      ID: name='msg' (at pp.c:16439)
                  ID: name='dsn' (at pp.c:16439)
                ID: name='nxdata' (at pp.c:16439)
              UnaryOp: op='p++' (at pp.c:16439)
                ID: name='UniqueSendP__localSendId' (at pp.c:16439)
          If:  (at pp.c:16441)
            BinaryOp: op='!=' (at pp.c:16441)
              Assignment: op='=' (at pp.c:16441)
                ID: name='error' (at pp.c:16441)
                FuncCall:  (at None)
                  ID: name='UniqueSendP__SubSend__send' (at pp.c:16441)
                  ExprList:  (at pp.c:16441)
                    ID: name='msg' (at pp.c:16441)
                    ID: name='len' (at pp.c:16441)
              ID: name='SUCCESS' (at pp.c:16441)
            Compound:  (at pp.c:16441)
              FuncCall:  (at None)
                ID: name='UniqueSendP__State__toIdle' (at pp.c:16442)
          Return:  (at pp.c:16445)
            ID: name='error' (at pp.c:16445)
      Return:  (at pp.c:16448)
        ID: name='EBUSY' (at pp.c:16448)
  FuncDef:  (at pp.c:16452)
    Decl: name='CC2420TinyosNetworkP__SubSend__send', quals=[], storage=['static', 'inline'] (at pp.c:16452)
      FuncDecl: quals=None (at pp.c:16452)
        ParamList:  (at pp.c:16452)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16452)
            PtrDecl: quals=[] (at pp.c:16452)
              TypeDecl: declname='msg', quals=[] (at pp.c:16452)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:16452)
            TypeDecl: declname='len', quals=[] (at pp.c:16452)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__SubSend__send', quals=[] (at pp.c:16452)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16452)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16454)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16454)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16458)
        ID: name='__nesc_result' (at pp.c:16458)
        FuncCall:  (at None)
          ID: name='UniqueSendP__Send__send' (at pp.c:16458)
          ExprList:  (at pp.c:16458)
            ID: name='msg' (at pp.c:16458)
            ID: name='len' (at pp.c:16458)
      Return:  (at pp.c:16462)
        ID: name='__nesc_result' (at pp.c:16462)
  FuncDef:  (at pp.c:16467)
    Decl: name='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:16467)
      FuncDecl: quals=None (at pp.c:16467)
        ParamList:  (at pp.c:16467)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16467)
            PtrDecl: quals=[] (at pp.c:16467)
              TypeDecl: declname='msg', quals=[] (at pp.c:16467)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[] (at pp.c:16467)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:16469)
      Return:  (at pp.c:16470)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_uint16' (at pp.c:16470)
          ExprList:  (at None)
            StructRef: type='.' (at None)
              StructRef: type='->' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__CC2420PacketBody__getMetadata' (at pp.c:16470)
                  ExprList:  (at pp.c:16470)
                    ID: name='msg' (at pp.c:16470)
                ID: name='rxInterval' (at pp.c:16470)
              ID: name='nxdata' (at pp.c:16470)
  FuncDef:  (at pp.c:16474)
    Decl: name='DefaultLplP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:16474)
      FuncDecl: quals=None (at pp.c:16474)
        ParamList:  (at pp.c:16474)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16474)
            PtrDecl: quals=[] (at pp.c:16474)
              TypeDecl: declname='msg', quals=[] (at pp.c:16474)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:16474)
          TypeDecl: declname='DefaultLplP__CC2420PacketBody__getHeader', quals=[] (at pp.c:16474)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:16474)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16476)
        PtrDecl: quals=[] (at pp.c:16476)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16476)
            Struct: name='cc2420_header_t', packed=False (at pp.c:16476)
      Assignment: op='=' (at pp.c:16480)
        ID: name='__nesc_result' (at pp.c:16480)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:16480)
          ExprList:  (at pp.c:16480)
            ID: name='msg' (at pp.c:16480)
      Return:  (at pp.c:16484)
        ID: name='__nesc_result' (at pp.c:16484)
  FuncDef:  (at pp.c:16489)
    Decl: name='__nesc_hton_leuint16', quals=[], storage=['__inline', 'static'] (at pp.c:16489)
      FuncDecl: quals=None (at pp.c:16489)
        ParamList:  (at pp.c:16489)
          Decl: name='target', quals=[], storage=[] (at pp.c:16489)
            PtrDecl: quals=[] (at pp.c:16489)
              TypeDecl: declname='target', quals=[] (at pp.c:16489)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:16489)
            TypeDecl: declname='value', quals=[] (at pp.c:16489)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='__nesc_hton_leuint16', quals=[] (at pp.c:16489)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:16491)
      Decl: name='base', quals=[], storage=[] (at pp.c:16492)
        PtrDecl: quals=[] (at pp.c:16492)
          TypeDecl: declname='base', quals=[] (at pp.c:16492)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='target' (at pp.c:16492)
      Assignment: op='=' (at pp.c:16495)
        ArrayRef:  (at pp.c:16495)
          ID: name='base' (at pp.c:16495)
          Constant: type='int', value='0' (at pp.c:16495)
        ID: name='value' (at pp.c:16495)
      Assignment: op='=' (at pp.c:16496)
        ArrayRef:  (at pp.c:16496)
          ID: name='base' (at pp.c:16496)
          Constant: type='int', value='1' (at pp.c:16496)
        BinaryOp: op='>>' (at pp.c:16496)
          ID: name='value' (at pp.c:16496)
          Constant: type='int', value='8' (at pp.c:16496)
      Return:  (at pp.c:16497)
        ID: name='value' (at pp.c:16497)
  FuncDef:  (at pp.c:16501)
    Decl: name='CC2420PacketP__Acks__noAck', quals=[], storage=['inline', 'static'] (at pp.c:16501)
      FuncDecl: quals=None (at pp.c:16501)
        ParamList:  (at pp.c:16501)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:16501)
            PtrDecl: quals=[] (at pp.c:16501)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:16501)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__Acks__noAck', quals=[] (at pp.c:16501)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16503)
      Decl: name='__nesc_temp47', quals=[], storage=[] (at pp.c:16504)
        PtrDecl: quals=[] (at pp.c:16504)
          TypeDecl: declname='__nesc_temp47', quals=[] (at pp.c:16504)
            IdentifierType: names=['char', 'unsigned'] (at None)
      ExprList:  (at pp.c:16507)
        Assignment: op='=' (at pp.c:16507)
          ID: name='__nesc_temp47' (at pp.c:16507)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:16507)
                ExprList:  (at pp.c:16507)
                  ID: name='p_msg' (at pp.c:16507)
              ID: name='fcf' (at pp.c:16507)
            ID: name='nxdata' (at pp.c:16507)
        FuncCall:  (at None)
          ID: name='__nesc_hton_leuint16' (at pp.c:16507)
          ExprList:  (at pp.c:16507)
            ID: name='__nesc_temp47' (at pp.c:16507)
            BinaryOp: op='&' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:16507)
                ExprList:  (at pp.c:16507)
                  ID: name='__nesc_temp47' (at pp.c:16507)
              UnaryOp: op='~' (at pp.c:16507)
                BinaryOp: op='<<' (at pp.c:16507)
                  Constant: type='int', value='1' (at pp.c:16507)
                  ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:16507)
      Return:  (at pp.c:16508)
        ID: name='SUCCESS' (at pp.c:16508)
  FuncDef:  (at pp.c:16512)
    Decl: name='DefaultLplP__PacketAcknowledgements__noAck', quals=[], storage=['static', 'inline'] (at pp.c:16512)
      FuncDecl: quals=None (at pp.c:16512)
        ParamList:  (at pp.c:16512)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16512)
            PtrDecl: quals=[] (at pp.c:16512)
              TypeDecl: declname='msg', quals=[] (at pp.c:16512)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__PacketAcknowledgements__noAck', quals=[] (at pp.c:16512)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16512)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16514)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16514)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16518)
        ID: name='__nesc_result' (at pp.c:16518)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__Acks__noAck' (at pp.c:16518)
          ExprList:  (at pp.c:16518)
            ID: name='msg' (at pp.c:16518)
      Return:  (at pp.c:16522)
        ID: name='__nesc_result' (at pp.c:16522)
  FuncDef:  (at pp.c:16527)
    Decl: name='CC2420PacketP__Acks__requestAck', quals=[], storage=['inline', 'static'] (at pp.c:16527)
      FuncDecl: quals=None (at pp.c:16527)
        ParamList:  (at pp.c:16527)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:16527)
            PtrDecl: quals=[] (at pp.c:16527)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:16527)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__Acks__requestAck', quals=[] (at pp.c:16527)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16529)
      Decl: name='__nesc_temp46', quals=[], storage=[] (at pp.c:16530)
        PtrDecl: quals=[] (at pp.c:16530)
          TypeDecl: declname='__nesc_temp46', quals=[] (at pp.c:16530)
            IdentifierType: names=['char', 'unsigned'] (at None)
      ExprList:  (at pp.c:16533)
        Assignment: op='=' (at pp.c:16533)
          ID: name='__nesc_temp46' (at pp.c:16533)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:16533)
                ExprList:  (at pp.c:16533)
                  ID: name='p_msg' (at pp.c:16533)
              ID: name='fcf' (at pp.c:16533)
            ID: name='nxdata' (at pp.c:16533)
        FuncCall:  (at None)
          ID: name='__nesc_hton_leuint16' (at pp.c:16533)
          ExprList:  (at pp.c:16533)
            ID: name='__nesc_temp46' (at pp.c:16533)
            BinaryOp: op='|' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:16533)
                ExprList:  (at pp.c:16533)
                  ID: name='__nesc_temp46' (at pp.c:16533)
              BinaryOp: op='<<' (at pp.c:16533)
                Constant: type='int', value='1' (at pp.c:16533)
                ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:16533)
      Return:  (at pp.c:16534)
        ID: name='SUCCESS' (at pp.c:16534)
  FuncDef:  (at pp.c:16538)
    Decl: name='DefaultLplP__PacketAcknowledgements__requestAck', quals=[], storage=['static', 'inline'] (at pp.c:16538)
      FuncDecl: quals=None (at pp.c:16538)
        ParamList:  (at pp.c:16538)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16538)
            PtrDecl: quals=[] (at pp.c:16538)
              TypeDecl: declname='msg', quals=[] (at pp.c:16538)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__PacketAcknowledgements__requestAck', quals=[] (at pp.c:16538)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16538)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16540)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16540)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16544)
        ID: name='__nesc_result' (at pp.c:16544)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__Acks__requestAck' (at pp.c:16544)
          ExprList:  (at pp.c:16544)
            ID: name='msg' (at pp.c:16544)
      Return:  (at pp.c:16548)
        ID: name='__nesc_result' (at pp.c:16548)
  FuncDef:  (at pp.c:16553)
    Decl: name='TransformAlarmC__1__Counter__get', quals=[], storage=['static', 'inline'] (at pp.c:16553)
      FuncDecl: quals=None (at pp.c:16553)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Counter__get', quals=[] (at pp.c:16553)
          IdentifierType: names=['TransformAlarmC__1__Counter__size_type'] (at None)
    Compound:  (at pp.c:16553)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16555)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16555)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16559)
        ID: name='__nesc_result' (at pp.c:16559)
        FuncCall:  (at None)
          ID: name='TransformCounterC__1__Counter__get' (at pp.c:16559)
      Return:  (at pp.c:16563)
        ID: name='__nesc_result' (at pp.c:16563)
  FuncDef:  (at pp.c:16568)
    Decl: name='TransformAlarmC__1__Alarm__getNow', quals=[], storage=['inline', 'static'] (at pp.c:16568)
      FuncDecl: quals=None (at pp.c:16568)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Alarm__getNow', quals=[] (at pp.c:16568)
          IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
    Compound:  (at pp.c:16569)
      Return:  (at pp.c:16570)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__1__Counter__get' (at pp.c:16570)
  FuncDef:  (at pp.c:16574)
    Decl: name='AlarmToTimerC__0__Alarm__getNow', quals=[], storage=['static', 'inline'] (at pp.c:16574)
      FuncDecl: quals=None (at pp.c:16574)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Alarm__getNow', quals=[] (at pp.c:16574)
          IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
    Compound:  (at pp.c:16574)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16576)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16576)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16580)
        ID: name='__nesc_result' (at pp.c:16580)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__1__Alarm__getNow' (at pp.c:16580)
      Return:  (at pp.c:16584)
        ID: name='__nesc_result' (at pp.c:16584)
  FuncDef:  (at pp.c:16589)
    Decl: name='AlarmToTimerC__0__Timer__getNow', quals=[], storage=['inline', 'static'] (at pp.c:16589)
      FuncDecl: quals=None (at pp.c:16589)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Timer__getNow', quals=[] (at pp.c:16589)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:16590)
      Return:  (at pp.c:16592)
        FuncCall:  (at None)
          ID: name='AlarmToTimerC__0__Alarm__getNow' (at pp.c:16592)
  FuncDef:  (at pp.c:16596)
    Decl: name='VirtualizeTimerC__0__TimerFrom__getNow', quals=[], storage=['static', 'inline'] (at pp.c:16596)
      FuncDecl: quals=None (at pp.c:16596)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__getNow', quals=[] (at pp.c:16596)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:16596)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16598)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16598)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16602)
        ID: name='__nesc_result' (at pp.c:16602)
        FuncCall:  (at None)
          ID: name='AlarmToTimerC__0__Timer__getNow' (at pp.c:16602)
      Return:  (at pp.c:16606)
        ID: name='__nesc_result' (at pp.c:16606)
  FuncDef:  (at pp.c:16611)
    Decl: name='VirtualizeTimerC__0__Timer__startOneShot', quals=[], storage=['inline', 'static'] (at pp.c:16611)
      FuncDecl: quals=None (at pp.c:16611)
        ParamList:  (at pp.c:16611)
          Decl: name='num', quals=[], storage=[] (at pp.c:16611)
            TypeDecl: declname='num', quals=[] (at pp.c:16611)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:16611)
            TypeDecl: declname='dt', quals=[] (at pp.c:16611)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__startOneShot', quals=[] (at pp.c:16611)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16612)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__startTimer' (at pp.c:16613)
        ExprList:  (at pp.c:16613)
          ID: name='num' (at pp.c:16613)
          FuncCall:  (at None)
            ID: name='VirtualizeTimerC__0__TimerFrom__getNow' (at pp.c:16613)
          ID: name='dt' (at pp.c:16613)
          ID: name='TRUE' (at pp.c:16613)
  FuncDef:  (at pp.c:16617)
    Decl: name='DefaultLplP__SendDoneTimer__startOneShot', quals=[], storage=['static', 'inline'] (at pp.c:16617)
      FuncDecl: quals=None (at pp.c:16617)
        ParamList:  (at pp.c:16617)
          Decl: name='dt', quals=[], storage=[] (at pp.c:16617)
            TypeDecl: declname='dt', quals=[] (at pp.c:16617)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='DefaultLplP__SendDoneTimer__startOneShot', quals=[] (at pp.c:16617)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16617)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__startOneShot' (at pp.c:16619)
        ExprList:  (at pp.c:16619)
          Constant: type='int', value='4U' (at pp.c:16619)
          ID: name='dt' (at pp.c:16619)
  FuncDef:  (at pp.c:16624)
    Decl: name='VirtualizeTimerC__0__updateFromTimer__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16624)
      FuncDecl: quals=None (at pp.c:16624)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__updateFromTimer__postTask', quals=[] (at pp.c:16624)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16624)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16626)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16626)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16630)
        ID: name='__nesc_result' (at pp.c:16630)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16630)
          ExprList:  (at pp.c:16630)
            ID: name='VirtualizeTimerC__0__updateFromTimer' (at pp.c:16630)
      Return:  (at pp.c:16634)
        ID: name='__nesc_result' (at pp.c:16634)
  FuncDef:  (at pp.c:16639)
    Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[], storage=['inline', 'static'] (at pp.c:16639)
      FuncDecl: quals=None (at pp.c:16639)
        ParamList:  (at pp.c:16639)
          Decl: name='id', quals=[], storage=[] (at pp.c:16639)
            TypeDecl: declname='id', quals=[] (at pp.c:16639)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[] (at pp.c:16639)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16641)
      Compound:  (at pp.c:16644)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:16645)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:16645)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='||' (at pp.c:16647)
            BinaryOp: op='!=' (at pp.c:16647)
              ArrayRef:  (at pp.c:16647)
                ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:16647)
                ID: name='id' (at pp.c:16647)
              ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:16647)
            BinaryOp: op='==' (at pp.c:16647)
              ID: name='FcfsResourceQueueC__0__qTail' (at pp.c:16647)
              ID: name='id' (at pp.c:16647)
        Return:  (at pp.c:16650)
          ID: name='__nesc_temp' (at pp.c:16650)
  FuncDef:  (at pp.c:16655)
    Decl: name='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:16655)
      FuncDecl: quals=None (at pp.c:16655)
        ParamList:  (at pp.c:16655)
          Decl: name='id', quals=[], storage=[] (at pp.c:16655)
            TypeDecl: declname='id', quals=[] (at pp.c:16655)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[] (at pp.c:16655)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16657)
      Compound:  (at pp.c:16658)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16658)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16658)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:16658)
        Compound:  (at pp.c:16660)
          If:  (at pp.c:16661)
            UnaryOp: op='!' (at None)
              FuncCall:  (at None)
                ID: name='FcfsResourceQueueC__0__FcfsQueue__isEnqueued' (at pp.c:16661)
                ExprList:  (at pp.c:16661)
                  ID: name='id' (at pp.c:16661)
            Compound:  (at pp.c:16661)
              If:  (at pp.c:16662)
                BinaryOp: op='==' (at pp.c:16662)
                  ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:16662)
                  ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:16662)
                Compound:  (at pp.c:16662)
                  Assignment: op='=' (at pp.c:16663)
                    ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:16663)
                    ID: name='id' (at pp.c:16663)
                Compound:  (at pp.c:16665)
                  Assignment: op='=' (at pp.c:16667)
                    ArrayRef:  (at pp.c:16667)
                      ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:16667)
                      ID: name='FcfsResourceQueueC__0__qTail' (at pp.c:16667)
                    ID: name='id' (at pp.c:16667)
              Assignment: op='=' (at pp.c:16670)
                ID: name='FcfsResourceQueueC__0__qTail' (at pp.c:16670)
                ID: name='id' (at pp.c:16670)
              Compound:  (at pp.c:16671)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:16672)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:16672)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='SUCCESS' (at pp.c:16674)
                Compound:  (at pp.c:16676)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:16678)
                    ExprList:  (at pp.c:16678)
                      ID: name='__nesc_atomic' (at pp.c:16678)
                  Return:  (at pp.c:16680)
                    ID: name='__nesc_temp' (at pp.c:16680)
          Compound:  (at pp.c:16685)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:16686)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:16686)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='EBUSY' (at pp.c:16688)
            Compound:  (at pp.c:16690)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_end' (at pp.c:16692)
                ExprList:  (at pp.c:16692)
                  ID: name='__nesc_atomic' (at pp.c:16692)
              Return:  (at pp.c:16694)
                ID: name='__nesc_temp' (at pp.c:16694)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:16699)
          ExprList:  (at pp.c:16699)
            ID: name='__nesc_atomic' (at pp.c:16699)
  FuncDef:  (at pp.c:16703)
    Decl: name='CC2420TinyosNetworkP__Queue__enqueue', quals=[], storage=['static', 'inline'] (at pp.c:16703)
      FuncDecl: quals=None (at pp.c:16703)
        ParamList:  (at pp.c:16703)
          Decl: name='id', quals=[], storage=[] (at pp.c:16703)
            TypeDecl: declname='id', quals=[] (at pp.c:16703)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Queue__enqueue', quals=[] (at pp.c:16703)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16703)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16705)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16705)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16709)
        ID: name='__nesc_result' (at pp.c:16709)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__0__FcfsQueue__enqueue' (at pp.c:16709)
          ExprList:  (at pp.c:16709)
            ID: name='id' (at pp.c:16709)
      Return:  (at pp.c:16713)
        ID: name='__nesc_result' (at pp.c:16713)
  FuncDef:  (at pp.c:16718)
    Decl: name='CC2420TinyosNetworkP__grantTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16718)
      FuncDecl: quals=None (at pp.c:16718)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__grantTask__postTask', quals=[] (at pp.c:16718)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16718)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16720)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16720)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16724)
        ID: name='__nesc_result' (at pp.c:16724)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16724)
          ExprList:  (at pp.c:16724)
            ID: name='CC2420TinyosNetworkP__grantTask' (at pp.c:16724)
      Return:  (at pp.c:16728)
        ID: name='__nesc_result' (at pp.c:16728)
  FuncDef:  (at pp.c:16733)
    Decl: name='CC2420TinyosNetworkP__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:16733)
      FuncDecl: quals=None (at pp.c:16733)
        ParamList:  (at pp.c:16733)
          Decl: name='id', quals=[], storage=[] (at pp.c:16733)
            TypeDecl: declname='id', quals=[] (at pp.c:16733)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Resource__request', quals=[] (at pp.c:16733)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16735)
      FuncCall:  (at None)
        ID: name='CC2420TinyosNetworkP__grantTask__postTask' (at pp.c:16737)
      If:  (at pp.c:16739)
        BinaryOp: op='>' (at pp.c:16739)
          ID: name='CC2420TinyosNetworkP__TINYOS_N_NETWORKS' (at pp.c:16739)
          Constant: type='int', value='1' (at pp.c:16739)
        Compound:  (at pp.c:16739)
          Return:  (at pp.c:16740)
            FuncCall:  (at None)
              ID: name='CC2420TinyosNetworkP__Queue__enqueue' (at pp.c:16740)
              ExprList:  (at pp.c:16740)
                ID: name='id' (at pp.c:16740)
        Compound:  (at pp.c:16744)
          If:  (at pp.c:16745)
            BinaryOp: op='==' (at pp.c:16745)
              ID: name='id' (at pp.c:16745)
              ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:16745)
            Compound:  (at pp.c:16745)
              Return:  (at pp.c:16746)
                ID: name='EALREADY' (at pp.c:16746)
            Compound:  (at pp.c:16750)
              Assignment: op='=' (at pp.c:16751)
                ID: name='CC2420TinyosNetworkP__next_owner' (at pp.c:16751)
                ID: name='id' (at pp.c:16751)
              Return:  (at pp.c:16752)
                ID: name='SUCCESS' (at pp.c:16752)
  FuncDef:  (at pp.c:16758)
    Decl: name='CC2420ActiveMessageP__RadioResource__request', quals=[], storage=['static', 'inline'] (at pp.c:16758)
      FuncDecl: quals=None (at pp.c:16758)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioResource__request', quals=[] (at pp.c:16758)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16758)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16760)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16760)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16764)
        ID: name='__nesc_result' (at pp.c:16764)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__Resource__request' (at pp.c:16764)
          ExprList:  (at pp.c:16764)
            ID: name='CC2420ActiveMessageC__CC2420_AM_SEND_ID' (at pp.c:16764)
      Return:  (at pp.c:16768)
        ID: name='__nesc_result' (at pp.c:16768)
  FuncDef:  (at pp.c:16773)
    Decl: name='PowerCycleP__stopRadio__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16773)
      FuncDecl: quals=None (at pp.c:16773)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__stopRadio__postTask', quals=[] (at pp.c:16773)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16773)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16775)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16775)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16779)
        ID: name='__nesc_result' (at pp.c:16779)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16779)
          ExprList:  (at pp.c:16779)
            ID: name='PowerCycleP__stopRadio' (at pp.c:16779)
      Return:  (at pp.c:16783)
        ID: name='__nesc_result' (at pp.c:16783)
  FuncDef:  (at pp.c:16788)
    Decl: name='StateImplP__State__isIdle', quals=[], storage=['inline', 'static'] (at pp.c:16788)
      FuncDecl: quals=None (at pp.c:16788)
        ParamList:  (at pp.c:16788)
          Decl: name='id', quals=[], storage=[] (at pp.c:16788)
            TypeDecl: declname='id', quals=[] (at pp.c:16788)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__isIdle', quals=[] (at pp.c:16788)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16790)
      Return:  (at pp.c:16791)
        FuncCall:  (at None)
          ID: name='StateImplP__State__isState' (at pp.c:16791)
          ExprList:  (at pp.c:16791)
            ID: name='id' (at pp.c:16791)
            ID: name='StateImplP__S_IDLE' (at pp.c:16791)
  FuncDef:  (at pp.c:16795)
    Decl: name='PowerCycleP__SendState__isIdle', quals=[], storage=['static', 'inline'] (at pp.c:16795)
      FuncDecl: quals=None (at pp.c:16795)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__SendState__isIdle', quals=[] (at pp.c:16795)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16795)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16797)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16797)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16801)
        ID: name='__nesc_result' (at pp.c:16801)
        FuncCall:  (at None)
          ID: name='StateImplP__State__isIdle' (at pp.c:16801)
          ExprList:  (at pp.c:16801)
            Constant: type='int', value='5U' (at pp.c:16801)
      Return:  (at pp.c:16805)
        ID: name='__nesc_result' (at pp.c:16805)
  FuncDef:  (at pp.c:16810)
    Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[], storage=['inline', 'static'] (at pp.c:16810)
      FuncDecl: quals=None (at pp.c:16810)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[] (at pp.c:16810)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:16812)
      Return:  (at pp.c:16814)
        ID: name='SystemLowPowerListeningP__delayAfterReceive' (at pp.c:16814)
  FuncDef:  (at pp.c:16818)
    Decl: name='DefaultLplP__SystemLowPowerListening__getDelayAfterReceive', quals=[], storage=['static', 'inline'] (at pp.c:16818)
      FuncDecl: quals=None (at pp.c:16818)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SystemLowPowerListening__getDelayAfterReceive', quals=[] (at pp.c:16818)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:16818)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16820)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16820)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16824)
        ID: name='__nesc_result' (at pp.c:16824)
        FuncCall:  (at None)
          ID: name='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive' (at pp.c:16824)
      Return:  (at pp.c:16828)
        ID: name='__nesc_result' (at pp.c:16828)
  FuncDef:  (at pp.c:16833)
    Decl: name='DefaultLplP__startOffTimer', quals=[], storage=['inline', 'static'] (at pp.c:16833)
      FuncDecl: quals=None (at pp.c:16833)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__startOffTimer', quals=[] (at pp.c:16833)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16835)
      FuncCall:  (at None)
        ID: name='DefaultLplP__OffTimer__startOneShot' (at pp.c:16836)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SystemLowPowerListening__getDelayAfterReceive' (at pp.c:16836)
  FuncDef:  (at pp.c:16840)
    Decl: name='DefaultLplP__PowerCycle__detected', quals=[], storage=['inline', 'static'] (at pp.c:16840)
      FuncDecl: quals=None (at pp.c:16840)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__PowerCycle__detected', quals=[] (at pp.c:16840)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16842)
      FuncCall:  (at None)
        ID: name='DefaultLplP__startOffTimer' (at pp.c:16849)
  FuncDef:  (at pp.c:16853)
    Decl: name='PowerCycleP__PowerCycle__detected', quals=[], storage=['static', 'inline'] (at pp.c:16853)
      FuncDecl: quals=None (at pp.c:16853)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__PowerCycle__detected', quals=[] (at pp.c:16853)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16853)
      FuncCall:  (at None)
        ID: name='DefaultLplP__PowerCycle__detected' (at pp.c:16855)
  FuncDef:  (at pp.c:16860)
    Decl: name='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[], storage=['inline', 'static'] (at pp.c:16860)
      FuncDecl: quals=None (at pp.c:16860)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[] (at pp.c:16860)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16862)
      Return:  (at pp.c:16863)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CCA__get' (at pp.c:16863)
  FuncDef:  (at pp.c:16867)
    Decl: name='PowerCycleP__EnergyIndicator__isReceiving', quals=[], storage=['static', 'inline'] (at pp.c:16867)
      FuncDecl: quals=None (at pp.c:16867)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__EnergyIndicator__isReceiving', quals=[] (at pp.c:16867)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16867)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16869)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16869)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16873)
        ID: name='__nesc_result' (at pp.c:16873)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__EnergyIndicator__isReceiving' (at pp.c:16873)
      Return:  (at pp.c:16877)
        ID: name='__nesc_result' (at pp.c:16877)
  FuncDef:  (at pp.c:16882)
    Decl: name='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[], storage=['inline', 'static'] (at pp.c:16882)
      FuncDecl: quals=None (at pp.c:16882)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[] (at pp.c:16882)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16884)
      Decl: name='receiving', quals=[], storage=[] (at pp.c:16885)
        TypeDecl: declname='receiving', quals=[] (at pp.c:16885)
          IdentifierType: names=['bool'] (at None)
      Compound:  (at pp.c:16889)
        Assignment: op='=' (at pp.c:16890)
          ID: name='receiving' (at pp.c:16890)
          ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:16890)
      Return:  (at pp.c:16892)
        ID: name='receiving' (at pp.c:16892)
  FuncDef:  (at pp.c:16896)
    Decl: name='PowerCycleP__PacketIndicator__isReceiving', quals=[], storage=['static', 'inline'] (at pp.c:16896)
      FuncDecl: quals=None (at pp.c:16896)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__PacketIndicator__isReceiving', quals=[] (at pp.c:16896)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16896)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16898)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16898)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16902)
        ID: name='__nesc_result' (at pp.c:16902)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__PacketIndicator__isReceiving' (at pp.c:16902)
      Return:  (at pp.c:16906)
        ID: name='__nesc_result' (at pp.c:16906)
  FuncDef:  (at pp.c:16911)
    Decl: name='PowerCycleP__startRadio__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16911)
      FuncDecl: quals=None (at pp.c:16911)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__startRadio__postTask', quals=[] (at pp.c:16911)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16911)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16913)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16913)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16917)
        ID: name='__nesc_result' (at pp.c:16917)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16917)
          ExprList:  (at pp.c:16917)
            ID: name='PowerCycleP__startRadio' (at pp.c:16917)
      Return:  (at pp.c:16921)
        ID: name='__nesc_result' (at pp.c:16921)
  FuncDef:  (at pp.c:16926)
    Decl: name='PowerCycleP__SplitControlState__isState', quals=[], storage=['static', 'inline'] (at pp.c:16926)
      FuncDecl: quals=None (at pp.c:16926)
        ParamList:  (at pp.c:16926)
          Decl: name='myState', quals=[], storage=[] (at pp.c:16926)
            TypeDecl: declname='myState', quals=[] (at pp.c:16926)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='PowerCycleP__SplitControlState__isState', quals=[] (at pp.c:16926)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16926)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16928)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16928)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16932)
        ID: name='__nesc_result' (at pp.c:16932)
        FuncCall:  (at None)
          ID: name='StateImplP__State__isState' (at pp.c:16932)
          ExprList:  (at pp.c:16932)
            Constant: type='int', value='4U' (at pp.c:16932)
            ID: name='myState' (at pp.c:16932)
      Return:  (at pp.c:16936)
        ID: name='__nesc_result' (at pp.c:16936)
  FuncDef:  (at pp.c:16941)
    Decl: name='PowerCycleP__isDutyCycling', quals=[], storage=['inline', 'static'] (at pp.c:16941)
      FuncDecl: quals=None (at pp.c:16941)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__isDutyCycling', quals=[] (at pp.c:16941)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16943)
      Return:  (at pp.c:16944)
        BinaryOp: op='&&' (at pp.c:16944)
          BinaryOp: op='>' (at pp.c:16944)
            ID: name='PowerCycleP__sleepInterval' (at pp.c:16944)
            Constant: type='int', value='0' (at pp.c:16944)
          FuncCall:  (at None)
            ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:16944)
            ExprList:  (at pp.c:16944)
              ID: name='PowerCycleP__S_ON' (at pp.c:16944)
  FuncDef:  (at pp.c:16948)
    Decl: name='PowerCycleP__getCca__runTask', quals=[], storage=['inline', 'static'] (at pp.c:16948)
      FuncDecl: quals=None (at pp.c:16948)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__getCca__runTask', quals=[] (at pp.c:16948)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16950)
      Decl: name='detects', quals=[], storage=[] (at pp.c:16951)
        TypeDecl: declname='detects', quals=[] (at pp.c:16951)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:16951)
      If:  (at pp.c:16954)
        FuncCall:  (at None)
          ID: name='PowerCycleP__isDutyCycling' (at pp.c:16954)
        Compound:  (at pp.c:16954)
          UnaryOp: op='p++' (at pp.c:16956)
            ID: name='PowerCycleP__ccaChecks' (at pp.c:16956)
          If:  (at pp.c:16957)
            BinaryOp: op='==' (at pp.c:16957)
              ID: name='PowerCycleP__ccaChecks' (at pp.c:16957)
              Constant: type='int', value='1' (at pp.c:16957)
            Compound:  (at pp.c:16957)
              FuncCall:  (at None)
                ID: name='PowerCycleP__startRadio__postTask' (at pp.c:16959)
              Return:  (at pp.c:16960)
          Compound:  (at pp.c:16963)
            Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16963)
              TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16963)
                IdentifierType: names=['__nesc_atomic_t'] (at None)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_start' (at pp.c:16963)
            Compound:  (at pp.c:16965)
              For:  (at pp.c:16966)
                BinaryOp: op='&&' (at pp.c:16966)
                  BinaryOp: op='<' (at pp.c:16966)
                    ID: name='PowerCycleP__ccaChecks' (at pp.c:16966)
                    Constant: type='int', value='400' (at pp.c:16966)
                  FuncCall:  (at None)
                    ID: name='PowerCycleP__SendState__isIdle' (at pp.c:16966)
                UnaryOp: op='p++' (at pp.c:16966)
                  ID: name='PowerCycleP__ccaChecks' (at pp.c:16966)
                Compound:  (at pp.c:16966)
                  If:  (at pp.c:16967)
                    FuncCall:  (at None)
                      ID: name='PowerCycleP__PacketIndicator__isReceiving' (at pp.c:16967)
                    Compound:  (at pp.c:16967)
                      FuncCall:  (at None)
                        ID: name='PowerCycleP__PowerCycle__detected' (at pp.c:16968)
                      Compound:  (at pp.c:16969)
                        FuncCall:  (at None)
                          ID: name='__nesc_atomic_end' (at pp.c:16971)
                          ExprList:  (at pp.c:16971)
                            ID: name='__nesc_atomic' (at pp.c:16971)
                        Return:  (at pp.c:16973)
                  If:  (at pp.c:16976)
                    FuncCall:  (at None)
                      ID: name='PowerCycleP__EnergyIndicator__isReceiving' (at pp.c:16976)
                    Compound:  (at pp.c:16976)
                      UnaryOp: op='p++' (at pp.c:16977)
                        ID: name='detects' (at pp.c:16977)
                      If:  (at pp.c:16978)
                        BinaryOp: op='>' (at pp.c:16978)
                          ID: name='detects' (at pp.c:16978)
                          Constant: type='int', value='3' (at pp.c:16978)
                        Compound:  (at pp.c:16978)
                          FuncCall:  (at None)
                            ID: name='PowerCycleP__PowerCycle__detected' (at pp.c:16979)
                          Compound:  (at pp.c:16980)
                            FuncCall:  (at None)
                              ID: name='__nesc_atomic_end' (at pp.c:16982)
                              ExprList:  (at pp.c:16982)
                                ID: name='__nesc_atomic' (at pp.c:16982)
                            Return:  (at pp.c:16984)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:16991)
              ExprList:  (at pp.c:16991)
                ID: name='__nesc_atomic' (at pp.c:16991)
          If:  (at pp.c:16993)
            FuncCall:  (at None)
              ID: name='PowerCycleP__SendState__isIdle' (at pp.c:16993)
            Compound:  (at pp.c:16993)
              FuncCall:  (at None)
                ID: name='PowerCycleP__stopRadio__postTask' (at pp.c:16994)
  FuncDef:  (at pp.c:17000)
    Decl: name='PowerCycleP__SubControl__start', quals=[], storage=['static', 'inline'] (at pp.c:17000)
      FuncDecl: quals=None (at pp.c:17000)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__SubControl__start', quals=[] (at pp.c:17000)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17000)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17002)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17002)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17006)
        ID: name='__nesc_result' (at pp.c:17006)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControl__start' (at pp.c:17006)
      Return:  (at pp.c:17010)
        ID: name='__nesc_result' (at pp.c:17010)
  FuncDef:  (at pp.c:17015)
    Decl: name='PowerCycleP__startRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:17015)
      FuncDecl: quals=None (at pp.c:17015)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__startRadio__runTask', quals=[] (at pp.c:17015)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17017)
      If:  (at pp.c:17018)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='PowerCycleP__SubControl__start' (at pp.c:17018)
          ID: name='SUCCESS' (at pp.c:17018)
        Compound:  (at pp.c:17018)
          FuncCall:  (at None)
            ID: name='PowerCycleP__startRadio__postTask' (at pp.c:17019)
  FuncDef:  (at pp.c:17024)
    Decl: name='CC2420CsmaP__SplitControlState__requestState', quals=[], storage=['static', 'inline'] (at pp.c:17024)
      FuncDecl: quals=None (at pp.c:17024)
        ParamList:  (at pp.c:17024)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:17024)
            TypeDecl: declname='reqState', quals=[] (at pp.c:17024)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControlState__requestState', quals=[] (at pp.c:17024)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17024)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17026)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17026)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17030)
        ID: name='__nesc_result' (at pp.c:17030)
        FuncCall:  (at None)
          ID: name='StateImplP__State__requestState' (at pp.c:17030)
          ExprList:  (at pp.c:17030)
            Constant: type='int', value='1U' (at pp.c:17030)
            ID: name='reqState' (at pp.c:17030)
      Return:  (at pp.c:17034)
        ID: name='__nesc_result' (at pp.c:17034)
  FuncDef:  (at pp.c:17039)
    Decl: name='CC2420ControlP__StartupTimer__start', quals=[], storage=['static', 'inline'] (at pp.c:17039)
      FuncDecl: quals=None (at pp.c:17039)
        ParamList:  (at pp.c:17039)
          Decl: name='dt', quals=[], storage=[] (at pp.c:17039)
            TypeDecl: declname='dt', quals=[] (at pp.c:17039)
              IdentifierType: names=['CC2420ControlP__StartupTimer__size_type'] (at None)
        TypeDecl: declname='CC2420ControlP__StartupTimer__start', quals=[] (at pp.c:17039)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17039)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__Alarm__start' (at pp.c:17041)
        ExprList:  (at pp.c:17041)
          ID: name='dt' (at pp.c:17041)
  FuncDef:  (at pp.c:17046)
    Decl: name='HplMsp430GeneralIOP__29__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:17046)
      FuncDecl: quals=None (at pp.c:17046)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__29__IO__set', quals=[] (at pp.c:17046)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17048)
      Compound:  (at pp.c:17050)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17050)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17050)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17050)
        Assignment: op='|=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:17052)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:17052)
          BinaryOp: op='<<' (at pp.c:17052)
            Constant: type='int', value='0x01' (at pp.c:17052)
            Constant: type='int', value='5' (at pp.c:17052)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17054)
          ExprList:  (at pp.c:17054)
            ID: name='__nesc_atomic' (at pp.c:17054)
  FuncDef:  (at pp.c:17058)
    Decl: name='Msp430GpioC__9__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:17058)
      FuncDecl: quals=None (at pp.c:17058)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__set', quals=[] (at pp.c:17058)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17058)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__29__IO__set' (at pp.c:17060)
  FuncDef:  (at pp.c:17065)
    Decl: name='Msp430GpioC__9__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:17065)
      FuncDecl: quals=None (at pp.c:17065)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__GeneralIO__set', quals=[] (at pp.c:17065)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17067)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__HplGeneralIO__set' (at pp.c:17069)
  FuncDef:  (at pp.c:17073)
    Decl: name='CC2420ControlP__VREN__set', quals=[], storage=['static', 'inline'] (at pp.c:17073)
      FuncDecl: quals=None (at pp.c:17073)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__VREN__set', quals=[] (at pp.c:17073)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17073)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__GeneralIO__set' (at pp.c:17075)
  FuncDef:  (at pp.c:17080)
    Decl: name='CC2420ControlP__CC2420Power__startVReg', quals=[], storage=['inline', 'static'] (at pp.c:17080)
      FuncDecl: quals=None (at pp.c:17080)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__startVReg', quals=[] (at pp.c:17080)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17082)
      Compound:  (at pp.c:17083)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17083)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17083)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17083)
        Compound:  (at pp.c:17085)
          If:  (at pp.c:17086)
            BinaryOp: op='!=' (at pp.c:17086)
              ID: name='CC2420ControlP__m_state' (at pp.c:17086)
              ID: name='CC2420ControlP__S_VREG_STOPPED' (at pp.c:17086)
            Compound:  (at pp.c:17086)
              Compound:  (at pp.c:17087)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17088)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17088)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:17090)
                Compound:  (at pp.c:17092)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17094)
                    ExprList:  (at pp.c:17094)
                      ID: name='__nesc_atomic' (at pp.c:17094)
                  Return:  (at pp.c:17096)
                    ID: name='__nesc_temp' (at pp.c:17096)
          Assignment: op='=' (at pp.c:17101)
            ID: name='CC2420ControlP__m_state' (at pp.c:17101)
            ID: name='CC2420ControlP__S_VREG_STARTING' (at pp.c:17101)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17104)
          ExprList:  (at pp.c:17104)
            ID: name='__nesc_atomic' (at pp.c:17104)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__VREN__set' (at pp.c:17105)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__StartupTimer__start' (at pp.c:17106)
        ExprList:  (at pp.c:17106)
          ID: name='CC2420_TIME_VREN' (at pp.c:17106)
      Return:  (at pp.c:17107)
        ID: name='SUCCESS' (at pp.c:17107)
  FuncDef:  (at pp.c:17111)
    Decl: name='CC2420CsmaP__CC2420Power__startVReg', quals=[], storage=['static', 'inline'] (at pp.c:17111)
      FuncDecl: quals=None (at pp.c:17111)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__startVReg', quals=[] (at pp.c:17111)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17111)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17113)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17113)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17117)
        ID: name='__nesc_result' (at pp.c:17117)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Power__startVReg' (at pp.c:17117)
      Return:  (at pp.c:17121)
        ID: name='__nesc_result' (at pp.c:17121)
  FuncDef:  (at pp.c:17126)
    Decl: name='PowerCycleP__SubControl__stop', quals=[], storage=['static', 'inline'] (at pp.c:17126)
      FuncDecl: quals=None (at pp.c:17126)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__SubControl__stop', quals=[] (at pp.c:17126)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17126)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17128)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17128)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17132)
        ID: name='__nesc_result' (at pp.c:17132)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControl__stop' (at pp.c:17132)
      Return:  (at pp.c:17136)
        ID: name='__nesc_result' (at pp.c:17136)
  FuncDef:  (at pp.c:17141)
    Decl: name='PowerCycleP__stopRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:17141)
      FuncDecl: quals=None (at pp.c:17141)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__stopRadio__runTask', quals=[] (at pp.c:17141)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17143)
      Decl: name='error', quals=[], storage=[] (at pp.c:17144)
        TypeDecl: declname='error', quals=[] (at pp.c:17144)
          IdentifierType: names=['error_t'] (at None)
        FuncCall:  (at None)
          ID: name='PowerCycleP__SubControl__stop' (at pp.c:17144)
      If:  (at pp.c:17147)
        BinaryOp: op='!=' (at pp.c:17147)
          ID: name='error' (at pp.c:17147)
          ID: name='SUCCESS' (at pp.c:17147)
        Compound:  (at pp.c:17147)
          FuncCall:  (at None)
            ID: name='PowerCycleP__finishSplitControlRequests' (at pp.c:17149)
          FuncCall:  (at None)
            ID: name='PowerCycleP__OnTimer__startOneShot' (at pp.c:17150)
            ExprList:  (at pp.c:17150)
              ID: name='PowerCycleP__sleepInterval' (at pp.c:17150)
  FuncDef:  (at pp.c:17155)
    Decl: name='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:17155)
      FuncDecl: quals=None (at pp.c:17155)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[] (at pp.c:17155)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17157)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:17160)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='31U' (at pp.c:17160)
        UnaryOp: op='~' (at pp.c:17160)
          BinaryOp: op='<<' (at pp.c:17160)
            Constant: type='int', value='0x01' (at pp.c:17160)
            Constant: type='int', value='1' (at pp.c:17160)
  FuncDef:  (at pp.c:17164)
    Decl: name='GpioCaptureC__0__GeneralIO__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:17164)
      FuncDecl: quals=None (at pp.c:17164)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__GeneralIO__selectIOFunc', quals=[] (at pp.c:17164)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17164)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__25__IO__selectIOFunc' (at pp.c:17166)
  FuncDef:  (at pp.c:17171)
    Decl: name='Msp430TimerCapComP__4__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:17171)
      FuncDecl: quals=None (at pp.c:17171)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Control__disableEvents', quals=[] (at pp.c:17171)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17172)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:17173)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='388U' (at pp.c:17173)
        UnaryOp: op='~' (at pp.c:17173)
          Constant: type='int', value='0x0010' (at pp.c:17173)
  FuncDef:  (at pp.c:17177)
    Decl: name='GpioCaptureC__0__Msp430TimerControl__disableEvents', quals=[], storage=['static', 'inline'] (at pp.c:17177)
      FuncDecl: quals=None (at pp.c:17177)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__disableEvents', quals=[] (at pp.c:17177)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17177)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Control__disableEvents' (at pp.c:17179)
  FuncDef:  (at pp.c:17184)
    Decl: name='GpioCaptureC__0__Capture__disable', quals=[], storage=['inline', 'static'] (at pp.c:17184)
      FuncDecl: quals=None (at pp.c:17184)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Capture__disable', quals=[] (at pp.c:17184)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17186)
      Compound:  (at pp.c:17189)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430TimerControl__disableEvents' (at pp.c:17190)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__GeneralIO__selectIOFunc' (at pp.c:17191)
  FuncDef:  (at pp.c:17196)
    Decl: name='CC2420TransmitP__CaptureSFD__disable', quals=[], storage=['static', 'inline'] (at pp.c:17196)
      FuncDecl: quals=None (at pp.c:17196)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CaptureSFD__disable', quals=[] (at pp.c:17196)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17196)
      FuncCall:  (at None)
        ID: name='GpioCaptureC__0__Capture__disable' (at pp.c:17198)
  FuncDef:  (at pp.c:17203)
    Decl: name='HplMsp430InterruptP__Port10__clear', quals=[], storage=['inline', 'static'] (at pp.c:17203)
      FuncDecl: quals=None (at pp.c:17203)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port10__clear', quals=[] (at pp.c:17203)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17205)
      Assignment: op='&=' (at pp.c:17207)
        ID: name='P1IFG' (at pp.c:17207)
        UnaryOp: op='~' (at pp.c:17207)
          BinaryOp: op='<<' (at pp.c:17207)
            Constant: type='int', value='1' (at pp.c:17207)
            Constant: type='int', value='0' (at pp.c:17207)
  FuncDef:  (at pp.c:17211)
    Decl: name='Msp430InterruptC__1__HplInterrupt__clear', quals=[], storage=['static', 'inline'] (at pp.c:17211)
      FuncDecl: quals=None (at pp.c:17211)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__clear', quals=[] (at pp.c:17211)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17211)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port10__clear' (at pp.c:17213)
  FuncDef:  (at pp.c:17218)
    Decl: name='HplMsp430InterruptP__Port10__disable', quals=[], storage=['inline', 'static'] (at pp.c:17218)
      FuncDecl: quals=None (at pp.c:17218)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port10__disable', quals=[] (at pp.c:17218)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17220)
      Assignment: op='&=' (at pp.c:17222)
        ID: name='P1IE' (at pp.c:17222)
        UnaryOp: op='~' (at pp.c:17222)
          BinaryOp: op='<<' (at pp.c:17222)
            Constant: type='int', value='1' (at pp.c:17222)
            Constant: type='int', value='0' (at pp.c:17222)
  FuncDef:  (at pp.c:17226)
    Decl: name='Msp430InterruptC__1__HplInterrupt__disable', quals=[], storage=['static', 'inline'] (at pp.c:17226)
      FuncDecl: quals=None (at pp.c:17226)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__disable', quals=[] (at pp.c:17226)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17226)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port10__disable' (at pp.c:17228)
  FuncDef:  (at pp.c:17233)
    Decl: name='Msp430InterruptC__1__Interrupt__disable', quals=[], storage=['inline', 'static'] (at pp.c:17233)
      FuncDecl: quals=None (at pp.c:17233)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__Interrupt__disable', quals=[] (at pp.c:17233)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17235)
      Compound:  (at pp.c:17238)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__HplInterrupt__disable' (at pp.c:17239)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__HplInterrupt__clear' (at pp.c:17240)
      Return:  (at pp.c:17242)
        ID: name='SUCCESS' (at pp.c:17242)
  FuncDef:  (at pp.c:17246)
    Decl: name='CC2420ReceiveP__InterruptFIFOP__disable', quals=[], storage=['static', 'inline'] (at pp.c:17246)
      FuncDecl: quals=None (at pp.c:17246)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__disable', quals=[] (at pp.c:17246)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17246)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17248)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17248)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17252)
        ID: name='__nesc_result' (at pp.c:17252)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__Interrupt__disable' (at pp.c:17252)
      Return:  (at pp.c:17256)
        ID: name='__nesc_result' (at pp.c:17256)
  FuncDef:  (at pp.c:17261)
    Decl: name='HplMsp430GeneralIOP__29__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:17261)
      FuncDecl: quals=None (at pp.c:17261)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__29__IO__clr', quals=[] (at pp.c:17261)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17263)
      Compound:  (at pp.c:17265)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17265)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17265)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17265)
        Assignment: op='&=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:17267)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:17267)
          UnaryOp: op='~' (at pp.c:17267)
            BinaryOp: op='<<' (at pp.c:17267)
              Constant: type='int', value='0x01' (at pp.c:17267)
              Constant: type='int', value='5' (at pp.c:17267)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17269)
          ExprList:  (at pp.c:17269)
            ID: name='__nesc_atomic' (at pp.c:17269)
  FuncDef:  (at pp.c:17273)
    Decl: name='Msp430GpioC__9__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:17273)
      FuncDecl: quals=None (at pp.c:17273)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__clr', quals=[] (at pp.c:17273)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17273)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__29__IO__clr' (at pp.c:17275)
  FuncDef:  (at pp.c:17280)
    Decl: name='Msp430GpioC__9__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:17280)
      FuncDecl: quals=None (at pp.c:17280)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__GeneralIO__clr', quals=[] (at pp.c:17280)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17282)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__HplGeneralIO__clr' (at pp.c:17284)
  FuncDef:  (at pp.c:17288)
    Decl: name='CC2420ControlP__VREN__clr', quals=[], storage=['static', 'inline'] (at pp.c:17288)
      FuncDecl: quals=None (at pp.c:17288)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__VREN__clr', quals=[] (at pp.c:17288)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17288)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__GeneralIO__clr' (at pp.c:17290)
  FuncDef:  (at pp.c:17295)
    Decl: name='LowPowerSensingBaseC__RadioAMControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:17295)
      FuncDecl: quals=None (at pp.c:17295)
        ParamList:  (at pp.c:17295)
          Decl: name='error', quals=[], storage=[] (at pp.c:17295)
            TypeDecl: declname='error', quals=[] (at pp.c:17295)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__RadioAMControl__stopDone', quals=[] (at pp.c:17295)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17297)
  FuncDef:  (at pp.c:17301)
    Decl: name='PowerCycleP__SplitControl__stopDone', quals=[], storage=['static', 'inline'] (at pp.c:17301)
      FuncDecl: quals=None (at pp.c:17301)
        ParamList:  (at pp.c:17301)
          Decl: name='error', quals=[], storage=[] (at pp.c:17301)
            TypeDecl: declname='error', quals=[] (at pp.c:17301)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PowerCycleP__SplitControl__stopDone', quals=[] (at pp.c:17301)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17301)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__RadioAMControl__stopDone' (at pp.c:17303)
        ExprList:  (at pp.c:17303)
          ID: name='error' (at pp.c:17303)
  FuncDef:  (at pp.c:17308)
    Decl: name='SerialP__startDoneTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:17308)
      FuncDecl: quals=None (at pp.c:17308)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__startDoneTask__postTask', quals=[] (at pp.c:17308)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17308)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17310)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17310)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17314)
        ID: name='__nesc_result' (at pp.c:17314)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:17314)
          ExprList:  (at pp.c:17314)
            ID: name='SerialP__startDoneTask' (at pp.c:17314)
      Return:  (at pp.c:17318)
        ID: name='__nesc_result' (at pp.c:17318)
  FuncDef:  (at pp.c:17323)
    Decl: name='SerialP__SplitControl__start', quals=[], storage=['inline', 'static'] (at pp.c:17323)
      FuncDecl: quals=None (at pp.c:17323)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SplitControl__start', quals=[] (at pp.c:17323)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17325)
      FuncCall:  (at None)
        ID: name='SerialP__startDoneTask__postTask' (at pp.c:17326)
      Return:  (at pp.c:17327)
        ID: name='SUCCESS' (at pp.c:17327)
  FuncDef:  (at pp.c:17331)
    Decl: name='LowPowerSensingBaseC__SerialAMControl__start', quals=[], storage=['static', 'inline'] (at pp.c:17331)
      FuncDecl: quals=None (at pp.c:17331)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__SerialAMControl__start', quals=[] (at pp.c:17331)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17331)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17333)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17333)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17337)
        ID: name='__nesc_result' (at pp.c:17337)
        FuncCall:  (at None)
          ID: name='SerialP__SplitControl__start' (at pp.c:17337)
      Return:  (at pp.c:17341)
        ID: name='__nesc_result' (at pp.c:17341)
  FuncDef:  (at pp.c:17346)
    Decl: name='LowPowerSensingBaseC__RadioAMControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:17346)
      FuncDecl: quals=None (at pp.c:17346)
        ParamList:  (at pp.c:17346)
          Decl: name='error', quals=[], storage=[] (at pp.c:17346)
            TypeDecl: declname='error', quals=[] (at pp.c:17346)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__RadioAMControl__startDone', quals=[] (at pp.c:17346)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17348)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__SerialAMControl__start' (at pp.c:17349)
  FuncDef:  (at pp.c:17353)
    Decl: name='PowerCycleP__SplitControl__startDone', quals=[], storage=['static', 'inline'] (at pp.c:17353)
      FuncDecl: quals=None (at pp.c:17353)
        ParamList:  (at pp.c:17353)
          Decl: name='error', quals=[], storage=[] (at pp.c:17353)
            TypeDecl: declname='error', quals=[] (at pp.c:17353)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PowerCycleP__SplitControl__startDone', quals=[] (at pp.c:17353)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17353)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__RadioAMControl__startDone' (at pp.c:17355)
        ExprList:  (at pp.c:17355)
          ID: name='error' (at pp.c:17355)
  FuncDef:  (at pp.c:17360)
    Decl: name='DefaultLplP__stopRadio__postTask', quals=[], storage=['static', 'inline'] (at pp.c:17360)
      FuncDecl: quals=None (at pp.c:17360)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__stopRadio__postTask', quals=[] (at pp.c:17360)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17360)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17362)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17362)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17366)
        ID: name='__nesc_result' (at pp.c:17366)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:17366)
          ExprList:  (at pp.c:17366)
            ID: name='DefaultLplP__stopRadio' (at pp.c:17366)
      Return:  (at pp.c:17370)
        ID: name='__nesc_result' (at pp.c:17370)
  FuncDef:  (at pp.c:17375)
    Decl: name='DefaultLplP__SubControl__stop', quals=[], storage=['static', 'inline'] (at pp.c:17375)
      FuncDecl: quals=None (at pp.c:17375)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SubControl__stop', quals=[] (at pp.c:17375)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17375)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17377)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17377)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17381)
        ID: name='__nesc_result' (at pp.c:17381)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControl__stop' (at pp.c:17381)
      Return:  (at pp.c:17385)
        ID: name='__nesc_result' (at pp.c:17385)
  FuncDef:  (at pp.c:17390)
    Decl: name='DefaultLplP__SendState__getState', quals=[], storage=['static', 'inline'] (at pp.c:17390)
      FuncDecl: quals=None (at pp.c:17390)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SendState__getState', quals=[] (at pp.c:17390)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:17390)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17392)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17392)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17396)
        ID: name='__nesc_result' (at pp.c:17396)
        FuncCall:  (at None)
          ID: name='StateImplP__State__getState' (at pp.c:17396)
          ExprList:  (at pp.c:17396)
            Constant: type='int', value='5U' (at pp.c:17396)
      Return:  (at pp.c:17400)
        ID: name='__nesc_result' (at pp.c:17400)
  FuncDef:  (at pp.c:17405)
    Decl: name='DefaultLplP__stopRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:17405)
      FuncDecl: quals=None (at pp.c:17405)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__stopRadio__runTask', quals=[] (at pp.c:17405)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17407)
      If:  (at pp.c:17408)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendState__getState' (at pp.c:17408)
          ID: name='S_LPL_NOT_SENDING' (at pp.c:17408)
        Compound:  (at pp.c:17408)
          If:  (at pp.c:17409)
            BinaryOp: op='!=' (at None)
              FuncCall:  (at None)
                ID: name='DefaultLplP__SubControl__stop' (at pp.c:17409)
              ID: name='SUCCESS' (at pp.c:17409)
            Compound:  (at pp.c:17409)
              FuncCall:  (at None)
                ID: name='DefaultLplP__stopRadio__postTask' (at pp.c:17410)
  FuncDef:  (at pp.c:17416)
    Decl: name='DefaultLplP__SubControl__start', quals=[], storage=['static', 'inline'] (at pp.c:17416)
      FuncDecl: quals=None (at pp.c:17416)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SubControl__start', quals=[] (at pp.c:17416)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17416)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17418)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17418)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17422)
        ID: name='__nesc_result' (at pp.c:17422)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControl__start' (at pp.c:17422)
      Return:  (at pp.c:17426)
        ID: name='__nesc_result' (at pp.c:17426)
  FuncDef:  (at pp.c:17431)
    Decl: name='DefaultLplP__startRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:17431)
      FuncDecl: quals=None (at pp.c:17431)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__startRadio__runTask', quals=[] (at pp.c:17431)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17433)
      If:  (at pp.c:17434)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SubControl__start' (at pp.c:17434)
          ID: name='SUCCESS' (at pp.c:17434)
        Compound:  (at pp.c:17434)
          FuncCall:  (at None)
            ID: name='DefaultLplP__startRadio__postTask' (at pp.c:17435)
  FuncDef:  (at pp.c:17440)
    Decl: name='DefaultLplP__resend__postTask', quals=[], storage=['static', 'inline'] (at pp.c:17440)
      FuncDecl: quals=None (at pp.c:17440)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__resend__postTask', quals=[] (at pp.c:17440)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17440)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17442)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17442)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17446)
        ID: name='__nesc_result' (at pp.c:17446)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:17446)
          ExprList:  (at pp.c:17446)
            ID: name='DefaultLplP__resend' (at pp.c:17446)
      Return:  (at pp.c:17450)
        ID: name='__nesc_result' (at pp.c:17450)
  FuncDef:  (at pp.c:17455)
    Decl: name='CC2420TransmitP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static', 'inline'] (at pp.c:17455)
      FuncDecl: quals=None (at pp.c:17455)
        ParamList:  (at pp.c:17455)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17455)
            PtrDecl: quals=[] (at pp.c:17455)
              TypeDecl: declname='msg', quals=[] (at pp.c:17455)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:17455)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17455)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__requestInitialBackoff' (at pp.c:17457)
        ExprList:  (at pp.c:17457)
          ID: name='msg' (at pp.c:17457)
  FuncDef:  (at pp.c:17462)
    Decl: name='CC2420TransmitP__resend', quals=[], storage=['inline', 'static'] (at pp.c:17462)
      FuncDecl: quals=None (at pp.c:17462)
        ParamList:  (at pp.c:17462)
          Decl: name='cca', quals=[], storage=[] (at pp.c:17462)
            TypeDecl: declname='cca', quals=[] (at pp.c:17462)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='CC2420TransmitP__resend', quals=[] (at pp.c:17462)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17464)
      Compound:  (at pp.c:17466)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17466)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17466)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17466)
        Compound:  (at pp.c:17468)
          If:  (at pp.c:17469)
            BinaryOp: op='==' (at pp.c:17469)
              ID: name='CC2420TransmitP__m_state' (at pp.c:17469)
              ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:17469)
            Compound:  (at pp.c:17469)
              Compound:  (at pp.c:17470)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17471)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17471)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='ECANCEL' (at pp.c:17473)
                Compound:  (at pp.c:17475)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17477)
                    ExprList:  (at pp.c:17477)
                      ID: name='__nesc_atomic' (at pp.c:17477)
                  Return:  (at pp.c:17479)
                    ID: name='__nesc_temp' (at pp.c:17479)
          If:  (at pp.c:17484)
            BinaryOp: op='!=' (at pp.c:17484)
              ID: name='CC2420TransmitP__m_state' (at pp.c:17484)
              ID: name='CC2420TransmitP__S_STARTED' (at pp.c:17484)
            Compound:  (at pp.c:17484)
              Compound:  (at pp.c:17485)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17486)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17486)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:17488)
                Compound:  (at pp.c:17490)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17492)
                    ExprList:  (at pp.c:17492)
                      ID: name='__nesc_atomic' (at pp.c:17492)
                  Return:  (at pp.c:17494)
                    ID: name='__nesc_temp' (at pp.c:17494)
          Assignment: op='=' (at pp.c:17499)
            ID: name='CC2420TransmitP__m_cca' (at pp.c:17499)
            ID: name='cca' (at pp.c:17499)
          Assignment: op='=' (at pp.c:17500)
            ID: name='CC2420TransmitP__m_state' (at pp.c:17500)
            TernaryOp:  (at pp.c:17500)
              ID: name='cca' (at pp.c:17500)
              ID: name='CC2420TransmitP__S_SAMPLE_CCA' (at pp.c:17500)
              ID: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:17500)
          Assignment: op='=' (at pp.c:17501)
            ID: name='CC2420TransmitP__totalCcaChecks' (at pp.c:17501)
            Constant: type='int', value='0' (at pp.c:17501)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17504)
          ExprList:  (at pp.c:17504)
            ID: name='__nesc_atomic' (at pp.c:17504)
      If:  (at pp.c:17506)
        ID: name='CC2420TransmitP__m_cca' (at pp.c:17506)
        Compound:  (at pp.c:17506)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__RadioBackoff__requestInitialBackoff' (at pp.c:17507)
            ExprList:  (at pp.c:17507)
              ID: name='CC2420TransmitP__m_msg' (at pp.c:17507)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:17508)
            ExprList:  (at pp.c:17508)
              ID: name='CC2420TransmitP__myInitialBackoff' (at pp.c:17508)
        Compound:  (at pp.c:17510)
          If:  (at pp.c:17512)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__acquireSpiResource' (at pp.c:17512)
              ID: name='SUCCESS' (at pp.c:17512)
            Compound:  (at pp.c:17512)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__attemptSend' (at pp.c:17513)
      Return:  (at pp.c:17516)
        ID: name='SUCCESS' (at pp.c:17516)
  FuncDef:  (at pp.c:17520)
    Decl: name='CC2420TransmitP__Send__resend', quals=[], storage=['inline', 'static'] (at pp.c:17520)
      FuncDecl: quals=None (at pp.c:17520)
        ParamList:  (at pp.c:17520)
          Decl: name='useCca', quals=[], storage=[] (at pp.c:17520)
            TypeDecl: declname='useCca', quals=[] (at pp.c:17520)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='CC2420TransmitP__Send__resend', quals=[] (at pp.c:17520)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17522)
      Return:  (at pp.c:17523)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__resend' (at pp.c:17523)
          ExprList:  (at pp.c:17523)
            ID: name='useCca' (at pp.c:17523)
  FuncDef:  (at pp.c:17527)
    Decl: name='DefaultLplP__Resend__resend', quals=[], storage=['static', 'inline'] (at pp.c:17527)
      FuncDecl: quals=None (at pp.c:17527)
        ParamList:  (at pp.c:17527)
          Decl: name='useCca', quals=[], storage=[] (at pp.c:17527)
            TypeDecl: declname='useCca', quals=[] (at pp.c:17527)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='DefaultLplP__Resend__resend', quals=[] (at pp.c:17527)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17527)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17529)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17529)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17533)
        ID: name='__nesc_result' (at pp.c:17533)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__Send__resend' (at pp.c:17533)
          ExprList:  (at pp.c:17533)
            ID: name='useCca' (at pp.c:17533)
      Return:  (at pp.c:17537)
        ID: name='__nesc_result' (at pp.c:17537)
  FuncDef:  (at pp.c:17542)
    Decl: name='DefaultLplP__resend__runTask', quals=[], storage=['inline', 'static'] (at pp.c:17542)
      FuncDecl: quals=None (at pp.c:17542)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__resend__runTask', quals=[] (at pp.c:17542)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17544)
      If:  (at pp.c:17545)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__Resend__resend' (at pp.c:17545)
            ExprList:  (at pp.c:17545)
              ID: name='TRUE' (at pp.c:17545)
          ID: name='SUCCESS' (at pp.c:17545)
        Compound:  (at pp.c:17545)
          FuncCall:  (at None)
            ID: name='DefaultLplP__resend__postTask' (at pp.c:17546)
  FuncDef:  (at pp.c:17551)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:17551)
      FuncDecl: quals=None (at pp.c:17551)
        ParamList:  (at pp.c:17551)
          Decl: name='id', quals=[], storage=[] (at pp.c:17551)
            TypeDecl: declname='id', quals=[] (at pp.c:17551)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17552)
            PtrDecl: quals=[] (at pp.c:17552)
              TypeDecl: declname='msg', quals=[] (at pp.c:17552)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[] (at pp.c:17551)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17554)
  FuncDef:  (at pp.c:17558)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static', 'inline'] (at pp.c:17558)
      FuncDecl: quals=None (at pp.c:17558)
        ParamList:  (at pp.c:17558)
          Decl: name='arg_0x102b20d60', quals=[], storage=[] (at pp.c:17558)
            TypeDecl: declname='arg_0x102b20d60', quals=[] (at pp.c:17558)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17558)
            PtrDecl: quals=[] (at pp.c:17558)
              TypeDecl: declname='msg', quals=[] (at pp.c:17558)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:17558)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17558)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff' (at pp.c:17560)
        ExprList:  (at pp.c:17560)
          ID: name='arg_0x102b20d60' (at pp.c:17560)
          ID: name='msg' (at pp.c:17560)
  FuncDef:  (at pp.c:17565)
    Decl: name='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:17565)
      FuncDecl: quals=None (at pp.c:17565)
        ParamList:  (at pp.c:17565)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17565)
            PtrDecl: quals=[] (at pp.c:17565)
              TypeDecl: declname='msg', quals=[] (at pp.c:17565)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:17565)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17567)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__requestInitialBackoff' (at pp.c:17568)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint8' (at pp.c:17568)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:17568)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['cc2420_header_t'] (at None)
                    BinaryOp: op='-' (at None)
                      BinaryOp: op='+' (at None)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            PtrDecl: quals=[] (at pp.c:17568)
                              TypeDecl: declname=None, quals=[] (at None)
                                IdentifierType: names=['uint8_t'] (at None)
                          ID: name='msg' (at pp.c:17568)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            TypeDecl: declname=None, quals=[] (at None)
                              IdentifierType: names=['size_t'] (at None)
                          UnaryOp: op='&' (at None)
                            StructRef: type='->' (at None)
                              Cast:  (at None)
                                Typename: quals=[] (at None)
                                  PtrDecl: quals=[] (at pp.c:17568)
                                    TypeDecl: declname=None, quals=[] (at None)
                                      IdentifierType: names=['message_t'] (at None)
                                Constant: type='int', value='0' (at pp.c:17568)
                              ID: name='data' (at pp.c:17568)
                      UnaryOp: op='sizeof' (at pp.c:17568)
                        Typename: quals=[] (at None)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['cc2420_header_t'] (at None)
                  ID: name='type' (at pp.c:17568)
                ID: name='nxdata' (at pp.c:17568)
          ID: name='msg' (at pp.c:17568)
  FuncDef:  (at pp.c:17572)
    Decl: name='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:17572)
      FuncDecl: quals=None (at pp.c:17572)
        ParamList:  (at pp.c:17572)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:17572)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:17572)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:17572)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17574)
      Assignment: op='=' (at pp.c:17575)
        ID: name='CC2420TransmitP__myInitialBackoff' (at pp.c:17575)
        BinaryOp: op='+' (at pp.c:17575)
          ID: name='backoffTime' (at pp.c:17575)
          Constant: type='int', value='1' (at pp.c:17575)
  FuncDef:  (at pp.c:17579)
    Decl: name='CC2420CsmaP__SubBackoff__setInitialBackoff', quals=[], storage=['static', 'inline'] (at pp.c:17579)
      FuncDecl: quals=None (at pp.c:17579)
        ParamList:  (at pp.c:17579)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:17579)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:17579)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubBackoff__setInitialBackoff', quals=[] (at pp.c:17579)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17579)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__RadioBackoff__setInitialBackoff' (at pp.c:17581)
        ExprList:  (at pp.c:17581)
          ID: name='backoffTime' (at pp.c:17581)
  FuncDef:  (at pp.c:17586)
    Decl: name='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:17586)
      FuncDecl: quals=None (at pp.c:17586)
        ParamList:  (at pp.c:17586)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:17586)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:17586)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:17586)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17588)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__setInitialBackoff' (at pp.c:17589)
        ExprList:  (at pp.c:17589)
          ID: name='backoffTime' (at pp.c:17589)
  FuncDef:  (at pp.c:17593)
    Decl: name='DefaultLplP__RadioBackoff__setInitialBackoff', quals=[], storage=['static', 'inline'] (at pp.c:17593)
      FuncDecl: quals=None (at pp.c:17593)
        ParamList:  (at pp.c:17593)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:17593)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:17593)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:17593)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17593)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__RadioBackoff__setInitialBackoff' (at pp.c:17595)
        ExprList:  (at pp.c:17595)
          ID: name='backoffTime' (at pp.c:17595)
  FuncDef:  (at pp.c:17600)
    Decl: name='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:17600)
      FuncDecl: quals=None (at pp.c:17600)
        ParamList:  (at pp.c:17600)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17600)
            PtrDecl: quals=[] (at pp.c:17600)
              TypeDecl: declname='msg', quals=[] (at pp.c:17600)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:17600)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17602)
      If:  (at pp.c:17604)
        BinaryOp: op='>' (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_uint16' (at pp.c:17604)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  FuncCall:  (at None)
                    ID: name='DefaultLplP__CC2420PacketBody__getMetadata' (at pp.c:17606)
                    ExprList:  (at pp.c:17606)
                      ID: name='msg' (at pp.c:17606)
                  ID: name='rxInterval' (at pp.c:17606)
                ID: name='nxdata' (at pp.c:17606)
          ID: name='DefaultLplP__ONE_MESSAGE' (at pp.c:17607)
        Compound:  (at pp.c:17607)
          FuncCall:  (at None)
            ID: name='DefaultLplP__RadioBackoff__setInitialBackoff' (at pp.c:17608)
            ExprList:  (at None)
              BinaryOp: op='+' (at None)
                BinaryOp: op='%' (at None)
                  FuncCall:  (at None)
                    ID: name='DefaultLplP__Random__rand16' (at pp.c:17608)
                  BinaryOp: op='*' (at pp.c:17609)
                    Constant: type='int', value='0x4' (at pp.c:17609)
                    ID: name='CC2420_BACKOFF_PERIOD' (at pp.c:17609)
                ID: name='CC2420_MIN_BACKOFF' (at pp.c:17609)
  FuncDef:  (at pp.c:17614)
    Decl: name='CC2420CsmaP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static', 'inline'] (at pp.c:17614)
      FuncDecl: quals=None (at pp.c:17614)
        ParamList:  (at pp.c:17614)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17614)
            PtrDecl: quals=[] (at pp.c:17614)
              TypeDecl: declname='msg', quals=[] (at pp.c:17614)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:17614)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17614)
      FuncCall:  (at None)
        ID: name='DefaultLplP__RadioBackoff__requestInitialBackoff' (at pp.c:17616)
        ExprList:  (at pp.c:17616)
          ID: name='msg' (at pp.c:17616)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff' (at pp.c:17618)
        ExprList:  (at pp.c:17618)
          ID: name='msg' (at pp.c:17618)
  FuncDef:  (at pp.c:17623)
    Decl: name='DefaultLplP__send__postTask', quals=[], storage=['static', 'inline'] (at pp.c:17623)
      FuncDecl: quals=None (at pp.c:17623)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__send__postTask', quals=[] (at pp.c:17623)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17623)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17625)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17625)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17629)
        ID: name='__nesc_result' (at pp.c:17629)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:17629)
          ExprList:  (at pp.c:17629)
            ID: name='DefaultLplP__send' (at pp.c:17629)
      Return:  (at pp.c:17633)
        ID: name='__nesc_result' (at pp.c:17633)
  FuncDef:  (at pp.c:17638)
    Decl: name='__nesc_hton_int8', quals=[], storage=['__inline', 'static'] (at pp.c:17638)
      FuncDecl: quals=None (at pp.c:17638)
        ParamList:  (at pp.c:17638)
          Decl: name='target', quals=[], storage=[] (at pp.c:17638)
            PtrDecl: quals=[] (at pp.c:17638)
              TypeDecl: declname='target', quals=[] (at pp.c:17638)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:17638)
            TypeDecl: declname='value', quals=[] (at pp.c:17638)
              IdentifierType: names=['int8_t'] (at None)
        TypeDecl: declname='__nesc_hton_int8', quals=[] (at pp.c:17638)
          IdentifierType: names=['int8_t'] (at None)
    Compound:  (at pp.c:17640)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:17642)
        ExprList:  (at pp.c:17642)
          ID: name='target' (at pp.c:17642)
          ID: name='value' (at pp.c:17642)
      Return:  (at pp.c:17644)
        ID: name='value' (at pp.c:17644)
  FuncDef:  (at pp.c:17648)
    Decl: name='CC2420TransmitP__send', quals=[], storage=['inline', 'static'] (at pp.c:17648)
      FuncDecl: quals=None (at pp.c:17648)
        ParamList:  (at pp.c:17648)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:17648)
            PtrDecl: quals=[] (at pp.c:17648)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:17648)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='cca', quals=[], storage=[] (at pp.c:17648)
            TypeDecl: declname='cca', quals=[] (at pp.c:17648)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='CC2420TransmitP__send', quals=[] (at pp.c:17648)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17650)
      Compound:  (at pp.c:17651)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17651)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17651)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17651)
        Compound:  (at pp.c:17653)
          If:  (at pp.c:17654)
            BinaryOp: op='==' (at pp.c:17654)
              ID: name='CC2420TransmitP__m_state' (at pp.c:17654)
              ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:17654)
            Compound:  (at pp.c:17654)
              Compound:  (at pp.c:17655)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17656)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17656)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='ECANCEL' (at pp.c:17658)
                Compound:  (at pp.c:17660)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17662)
                    ExprList:  (at pp.c:17662)
                      ID: name='__nesc_atomic' (at pp.c:17662)
                  Return:  (at pp.c:17664)
                    ID: name='__nesc_temp' (at pp.c:17664)
          If:  (at pp.c:17669)
            BinaryOp: op='!=' (at pp.c:17669)
              ID: name='CC2420TransmitP__m_state' (at pp.c:17669)
              ID: name='CC2420TransmitP__S_STARTED' (at pp.c:17669)
            Compound:  (at pp.c:17669)
              Compound:  (at pp.c:17670)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17671)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17671)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:17673)
                Compound:  (at pp.c:17675)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17677)
                    ExprList:  (at pp.c:17677)
                      ID: name='__nesc_atomic' (at pp.c:17677)
                  Return:  (at pp.c:17679)
                    ID: name='__nesc_temp' (at pp.c:17679)
          Assignment: op='=' (at pp.c:17685)
            ID: name='CC2420TransmitP__m_state' (at pp.c:17685)
            ID: name='CC2420TransmitP__S_LOAD' (at pp.c:17685)
          Assignment: op='=' (at pp.c:17686)
            ID: name='CC2420TransmitP__m_cca' (at pp.c:17686)
            ID: name='cca' (at pp.c:17686)
          Assignment: op='=' (at pp.c:17687)
            ID: name='CC2420TransmitP__m_msg' (at pp.c:17687)
            ID: name='p_msg' (at pp.c:17687)
          Assignment: op='=' (at pp.c:17688)
            ID: name='CC2420TransmitP__totalCcaChecks' (at pp.c:17688)
            Constant: type='int', value='0' (at pp.c:17688)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17691)
          ExprList:  (at pp.c:17691)
            ID: name='__nesc_atomic' (at pp.c:17691)
      If:  (at pp.c:17693)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__acquireSpiResource' (at pp.c:17693)
          ID: name='SUCCESS' (at pp.c:17693)
        Compound:  (at pp.c:17693)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__loadTXFIFO' (at pp.c:17694)
      Return:  (at pp.c:17697)
        ID: name='SUCCESS' (at pp.c:17697)
  FuncDef:  (at pp.c:17701)
    Decl: name='CC2420TransmitP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:17701)
      FuncDecl: quals=None (at pp.c:17701)
        ParamList:  (at pp.c:17701)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:17701)
            PtrDecl: quals=[] (at pp.c:17701)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:17701)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='useCca', quals=[], storage=[] (at pp.c:17701)
            TypeDecl: declname='useCca', quals=[] (at pp.c:17701)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='CC2420TransmitP__Send__send', quals=[] (at pp.c:17701)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17703)
      Return:  (at pp.c:17704)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__send' (at pp.c:17704)
          ExprList:  (at pp.c:17704)
            ID: name='p_msg' (at pp.c:17704)
            ID: name='useCca' (at pp.c:17704)
  FuncDef:  (at pp.c:17708)
    Decl: name='CC2420CsmaP__CC2420Transmit__send', quals=[], storage=['static', 'inline'] (at pp.c:17708)
      FuncDecl: quals=None (at pp.c:17708)
        ParamList:  (at pp.c:17708)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:17708)
            PtrDecl: quals=[] (at pp.c:17708)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:17708)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='useCca', quals=[], storage=[] (at pp.c:17708)
            TypeDecl: declname='useCca', quals=[] (at pp.c:17708)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Transmit__send', quals=[] (at pp.c:17708)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17708)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17710)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17710)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17714)
        ID: name='__nesc_result' (at pp.c:17714)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__Send__send' (at pp.c:17714)
          ExprList:  (at pp.c:17714)
            ID: name='p_msg' (at pp.c:17714)
            ID: name='useCca' (at pp.c:17714)
      Return:  (at pp.c:17718)
        ID: name='__nesc_result' (at pp.c:17718)
  FuncDef:  (at pp.c:17723)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:17723)
      FuncDecl: quals=None (at pp.c:17723)
        ParamList:  (at pp.c:17723)
          Decl: name='id', quals=[], storage=[] (at pp.c:17723)
            TypeDecl: declname='id', quals=[] (at pp.c:17723)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17724)
            PtrDecl: quals=[] (at pp.c:17724)
              TypeDecl: declname='msg', quals=[] (at pp.c:17724)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[] (at pp.c:17723)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17726)
  FuncDef:  (at pp.c:17730)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__requestCca', quals=[], storage=['static', 'inline'] (at pp.c:17730)
      FuncDecl: quals=None (at pp.c:17730)
        ParamList:  (at pp.c:17730)
          Decl: name='arg_0x102b20d60', quals=[], storage=[] (at pp.c:17730)
            TypeDecl: declname='arg_0x102b20d60', quals=[] (at pp.c:17730)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17730)
            PtrDecl: quals=[] (at pp.c:17730)
              TypeDecl: declname='msg', quals=[] (at pp.c:17730)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestCca', quals=[] (at pp.c:17730)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17730)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__default__requestCca' (at pp.c:17732)
        ExprList:  (at pp.c:17732)
          ID: name='arg_0x102b20d60' (at pp.c:17732)
          ID: name='msg' (at pp.c:17732)
  FuncDef:  (at pp.c:17737)
    Decl: name='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:17737)
      FuncDecl: quals=None (at pp.c:17737)
        ParamList:  (at pp.c:17737)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17737)
            PtrDecl: quals=[] (at pp.c:17737)
              TypeDecl: declname='msg', quals=[] (at pp.c:17737)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[] (at pp.c:17737)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17739)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__requestCca' (at pp.c:17741)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint8' (at pp.c:17741)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:17741)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['cc2420_header_t'] (at None)
                    BinaryOp: op='-' (at None)
                      BinaryOp: op='+' (at None)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            PtrDecl: quals=[] (at pp.c:17741)
                              TypeDecl: declname=None, quals=[] (at None)
                                IdentifierType: names=['uint8_t'] (at None)
                          ID: name='msg' (at pp.c:17741)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            TypeDecl: declname=None, quals=[] (at None)
                              IdentifierType: names=['size_t'] (at None)
                          UnaryOp: op='&' (at None)
                            StructRef: type='->' (at None)
                              Cast:  (at None)
                                Typename: quals=[] (at None)
                                  PtrDecl: quals=[] (at pp.c:17741)
                                    TypeDecl: declname=None, quals=[] (at None)
                                      IdentifierType: names=['message_t'] (at None)
                                Constant: type='int', value='0' (at pp.c:17741)
                              ID: name='data' (at pp.c:17741)
                      UnaryOp: op='sizeof' (at pp.c:17741)
                        Typename: quals=[] (at None)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['cc2420_header_t'] (at None)
                  ID: name='type' (at pp.c:17741)
                ID: name='nxdata' (at pp.c:17741)
          ID: name='msg' (at pp.c:17741)
  FuncDef:  (at pp.c:17745)
    Decl: name='DefaultLplP__RadioBackoff__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:17745)
      FuncDecl: quals=None (at pp.c:17745)
        ParamList:  (at pp.c:17745)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17745)
            PtrDecl: quals=[] (at pp.c:17745)
              TypeDecl: declname='msg', quals=[] (at pp.c:17745)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioBackoff__requestCca', quals=[] (at pp.c:17745)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17747)
  FuncDef:  (at pp.c:17751)
    Decl: name='CC2420CsmaP__RadioBackoff__requestCca', quals=[], storage=['static', 'inline'] (at pp.c:17751)
      FuncDecl: quals=None (at pp.c:17751)
        ParamList:  (at pp.c:17751)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17751)
            PtrDecl: quals=[] (at pp.c:17751)
              TypeDecl: declname='msg', quals=[] (at pp.c:17751)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestCca', quals=[] (at pp.c:17751)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17751)
      FuncCall:  (at None)
        ID: name='DefaultLplP__RadioBackoff__requestCca' (at pp.c:17753)
        ExprList:  (at pp.c:17753)
          ID: name='msg' (at pp.c:17753)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SubBackoff__requestCca' (at pp.c:17755)
        ExprList:  (at pp.c:17755)
          ID: name='msg' (at pp.c:17755)
  FuncDef:  (at pp.c:17760)
    Decl: name='StateImplP__State__forceState', quals=[], storage=['inline', 'static'] (at pp.c:17760)
      FuncDecl: quals=None (at pp.c:17760)
        ParamList:  (at pp.c:17760)
          Decl: name='id', quals=[], storage=[] (at pp.c:17760)
            TypeDecl: declname='id', quals=[] (at pp.c:17760)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:17760)
            TypeDecl: declname='reqState', quals=[] (at pp.c:17760)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__forceState', quals=[] (at pp.c:17760)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17762)
      Compound:  (at pp.c:17763)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17763)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17763)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17763)
        Assignment: op='=' (at pp.c:17765)
          ArrayRef:  (at pp.c:17765)
            ID: name='StateImplP__state' (at pp.c:17765)
            ID: name='id' (at pp.c:17765)
          ID: name='reqState' (at pp.c:17765)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17767)
          ExprList:  (at pp.c:17767)
            ID: name='__nesc_atomic' (at pp.c:17767)
  FuncDef:  (at pp.c:17771)
    Decl: name='CC2420CsmaP__SplitControlState__forceState', quals=[], storage=['static', 'inline'] (at pp.c:17771)
      FuncDecl: quals=None (at pp.c:17771)
        ParamList:  (at pp.c:17771)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:17771)
            TypeDecl: declname='reqState', quals=[] (at pp.c:17771)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControlState__forceState', quals=[] (at pp.c:17771)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17771)
      FuncCall:  (at None)
        ID: name='StateImplP__State__forceState' (at pp.c:17773)
        ExprList:  (at pp.c:17773)
          Constant: type='int', value='1U' (at pp.c:17773)
          ID: name='reqState' (at pp.c:17773)
  FuncDef:  (at pp.c:17778)
    Decl: name='CC2420CsmaP__SplitControlState__isState', quals=[], storage=['static', 'inline'] (at pp.c:17778)
      FuncDecl: quals=None (at pp.c:17778)
        ParamList:  (at pp.c:17778)
          Decl: name='myState', quals=[], storage=[] (at pp.c:17778)
            TypeDecl: declname='myState', quals=[] (at pp.c:17778)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControlState__isState', quals=[] (at pp.c:17778)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:17778)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17780)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17780)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17784)
        ID: name='__nesc_result' (at pp.c:17784)
        FuncCall:  (at None)
          ID: name='StateImplP__State__isState' (at pp.c:17784)
          ExprList:  (at pp.c:17784)
            Constant: type='int', value='1U' (at pp.c:17784)
            ID: name='myState' (at pp.c:17784)
      Return:  (at pp.c:17788)
        ID: name='__nesc_result' (at pp.c:17788)
  FuncDef:  (at pp.c:17793)
    Decl: name='CC2420CsmaP__CC2420PacketBody__getMetadata', quals=[], storage=['static', 'inline'] (at pp.c:17793)
      FuncDecl: quals=None (at pp.c:17793)
        ParamList:  (at pp.c:17793)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17793)
            PtrDecl: quals=[] (at pp.c:17793)
              TypeDecl: declname='msg', quals=[] (at pp.c:17793)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17793)
          TypeDecl: declname='CC2420CsmaP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:17793)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:17793)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17795)
        PtrDecl: quals=[] (at pp.c:17795)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17795)
            Struct: name='cc2420_metadata_t', packed=False (at pp.c:17795)
      Assignment: op='=' (at pp.c:17799)
        ID: name='__nesc_result' (at pp.c:17799)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:17799)
          ExprList:  (at pp.c:17799)
            ID: name='msg' (at pp.c:17799)
      Return:  (at pp.c:17803)
        ID: name='__nesc_result' (at pp.c:17803)
  FuncDef:  (at pp.c:17808)
    Decl: name='CC2420CsmaP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:17808)
      FuncDecl: quals=None (at pp.c:17808)
        ParamList:  (at pp.c:17808)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17808)
            PtrDecl: quals=[] (at pp.c:17808)
              TypeDecl: declname='msg', quals=[] (at pp.c:17808)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17808)
          TypeDecl: declname='CC2420CsmaP__CC2420PacketBody__getHeader', quals=[] (at pp.c:17808)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:17808)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17810)
        PtrDecl: quals=[] (at pp.c:17810)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17810)
            Struct: name='cc2420_header_t', packed=False (at pp.c:17810)
      Assignment: op='=' (at pp.c:17814)
        ID: name='__nesc_result' (at pp.c:17814)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:17814)
          ExprList:  (at pp.c:17814)
            ID: name='msg' (at pp.c:17814)
      Return:  (at pp.c:17818)
        ID: name='__nesc_result' (at pp.c:17818)
  FuncDef:  (at pp.c:17823)
    Decl: name='CC2420CsmaP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:17823)
      FuncDecl: quals=None (at pp.c:17823)
        ParamList:  (at pp.c:17823)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:17823)
            PtrDecl: quals=[] (at pp.c:17823)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:17823)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17823)
            TypeDecl: declname='len', quals=[] (at pp.c:17823)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__Send__send', quals=[] (at pp.c:17823)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17825)
      Decl: name='__nesc_temp43', quals=[], storage=[] (at pp.c:17826)
        PtrDecl: quals=[] (at pp.c:17826)
          TypeDecl: declname='__nesc_temp43', quals=[] (at pp.c:17826)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='__nesc_temp42', quals=[], storage=[] (at pp.c:17827)
        PtrDecl: quals=[] (at pp.c:17827)
          TypeDecl: declname='__nesc_temp42', quals=[] (at pp.c:17827)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='header', quals=[], storage=[] (at pp.c:17829)
        PtrDecl: quals=[] (at pp.c:17829)
          TypeDecl: declname='header', quals=[] (at pp.c:17829)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__CC2420PacketBody__getHeader' (at pp.c:17829)
          ExprList:  (at pp.c:17829)
            ID: name='p_msg' (at pp.c:17829)
      Decl: name='metadata', quals=[], storage=[] (at pp.c:17830)
        PtrDecl: quals=[] (at pp.c:17830)
          TypeDecl: declname='metadata', quals=[] (at pp.c:17830)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__CC2420PacketBody__getMetadata' (at pp.c:17830)
          ExprList:  (at pp.c:17830)
            ID: name='p_msg' (at pp.c:17830)
      Compound:  (at pp.c:17832)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17832)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17832)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17832)
        Compound:  (at pp.c:17834)
          If:  (at pp.c:17835)
            UnaryOp: op='!' (at None)
              FuncCall:  (at None)
                ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:17835)
                ExprList:  (at pp.c:17835)
                  ID: name='CC2420CsmaP__S_STARTED' (at pp.c:17835)
            Compound:  (at pp.c:17835)
              Compound:  (at pp.c:17836)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17837)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17837)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:17839)
                Compound:  (at pp.c:17841)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17843)
                    ExprList:  (at pp.c:17843)
                      ID: name='__nesc_atomic' (at pp.c:17843)
                  Return:  (at pp.c:17845)
                    ID: name='__nesc_temp' (at pp.c:17845)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:17850)
            ExprList:  (at pp.c:17850)
              ID: name='CC2420CsmaP__S_TRANSMITTING' (at pp.c:17850)
          Assignment: op='=' (at pp.c:17851)
            ID: name='CC2420CsmaP__m_msg' (at pp.c:17851)
            ID: name='p_msg' (at pp.c:17851)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17854)
          ExprList:  (at pp.c:17854)
            ID: name='__nesc_atomic' (at pp.c:17854)
      ExprList:  (at pp.c:17863)
        Assignment: op='=' (at pp.c:17863)
          ID: name='__nesc_temp42' (at pp.c:17863)
          StructRef: type='.' (at pp.c:17863)
            StructRef: type='->' (at pp.c:17863)
              ID: name='header' (at pp.c:17863)
              ID: name='fcf' (at pp.c:17863)
            ID: name='nxdata' (at pp.c:17863)
        FuncCall:  (at None)
          ID: name='__nesc_hton_leuint16' (at pp.c:17863)
          ExprList:  (at pp.c:17863)
            ID: name='__nesc_temp42' (at pp.c:17863)
            BinaryOp: op='&' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:17863)
                ExprList:  (at pp.c:17863)
                  ID: name='__nesc_temp42' (at pp.c:17863)
              BinaryOp: op='|' (at pp.c:17863)
                BinaryOp: op='|' (at pp.c:17863)
                  BinaryOp: op='<<' (at pp.c:17863)
                    Constant: type='int', value='1' (at pp.c:17863)
                    ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:17863)
                  BinaryOp: op='<<' (at pp.c:17864)
                    Constant: type='int', value='0x3' (at pp.c:17864)
                    ID: name='IEEE154_FCF_SRC_ADDR_MODE' (at pp.c:17864)
                BinaryOp: op='<<' (at pp.c:17865)
                  Constant: type='int', value='0x3' (at pp.c:17865)
                  ID: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:17865)
      ExprList:  (at pp.c:17867)
        Assignment: op='=' (at pp.c:17867)
          ID: name='__nesc_temp43' (at pp.c:17867)
          StructRef: type='.' (at pp.c:17867)
            StructRef: type='->' (at pp.c:17867)
              ID: name='header' (at pp.c:17867)
              ID: name='fcf' (at pp.c:17867)
            ID: name='nxdata' (at pp.c:17867)
        FuncCall:  (at None)
          ID: name='__nesc_hton_leuint16' (at pp.c:17867)
          ExprList:  (at pp.c:17867)
            ID: name='__nesc_temp43' (at pp.c:17867)
            BinaryOp: op='|' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:17867)
                ExprList:  (at pp.c:17867)
                  ID: name='__nesc_temp43' (at pp.c:17867)
              BinaryOp: op='|' (at pp.c:17867)
                BinaryOp: op='<<' (at pp.c:17867)
                  ID: name='IEEE154_TYPE_DATA' (at pp.c:17867)
                  ID: name='IEEE154_FCF_FRAME_TYPE' (at pp.c:17867)
                BinaryOp: op='<<' (at pp.c:17868)
                  Constant: type='int', value='1' (at pp.c:17868)
                  ID: name='IEEE154_FCF_INTRAPAN' (at pp.c:17868)
      FuncCall:  (at None)
        ID: name='__nesc_hton_int8' (at pp.c:17870)
        ExprList:  (at pp.c:17870)
          StructRef: type='.' (at pp.c:17870)
            StructRef: type='->' (at pp.c:17870)
              ID: name='metadata' (at pp.c:17870)
              ID: name='ack' (at pp.c:17870)
            ID: name='nxdata' (at pp.c:17870)
          ID: name='FALSE' (at pp.c:17870)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:17871)
        ExprList:  (at pp.c:17871)
          StructRef: type='.' (at pp.c:17871)
            StructRef: type='->' (at pp.c:17871)
              ID: name='metadata' (at pp.c:17871)
              ID: name='rssi' (at pp.c:17871)
            ID: name='nxdata' (at pp.c:17871)
          Constant: type='int', value='0' (at pp.c:17871)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:17872)
        ExprList:  (at pp.c:17872)
          StructRef: type='.' (at pp.c:17872)
            StructRef: type='->' (at pp.c:17872)
              ID: name='metadata' (at pp.c:17872)
              ID: name='lqi' (at pp.c:17872)
            ID: name='nxdata' (at pp.c:17872)
          Constant: type='int', value='0' (at pp.c:17872)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint32' (at pp.c:17874)
        ExprList:  (at pp.c:17874)
          StructRef: type='.' (at pp.c:17874)
            StructRef: type='->' (at pp.c:17874)
              ID: name='metadata' (at pp.c:17874)
              ID: name='timestamp' (at pp.c:17874)
            ID: name='nxdata' (at pp.c:17874)
          ID: name='CC2420_INVALID_TIMESTAMP' (at pp.c:17874)
      Assignment: op='=' (at pp.c:17876)
        ID: name='CC2420CsmaP__ccaOn' (at pp.c:17876)
        ID: name='TRUE' (at pp.c:17876)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__RadioBackoff__requestCca' (at pp.c:17877)
        ExprList:  (at pp.c:17877)
          ID: name='CC2420CsmaP__m_msg' (at pp.c:17877)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Transmit__send' (at pp.c:17879)
        ExprList:  (at pp.c:17879)
          ID: name='CC2420CsmaP__m_msg' (at pp.c:17879)
          ID: name='CC2420CsmaP__ccaOn' (at pp.c:17879)
      Return:  (at pp.c:17880)
        ID: name='SUCCESS' (at pp.c:17880)
  FuncDef:  (at pp.c:17884)
    Decl: name='DefaultLplP__SubSend__send', quals=[], storage=['static', 'inline'] (at pp.c:17884)
      FuncDecl: quals=None (at pp.c:17884)
        ParamList:  (at pp.c:17884)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17884)
            PtrDecl: quals=[] (at pp.c:17884)
              TypeDecl: declname='msg', quals=[] (at pp.c:17884)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17884)
            TypeDecl: declname='len', quals=[] (at pp.c:17884)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DefaultLplP__SubSend__send', quals=[] (at pp.c:17884)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17884)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17886)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17886)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17890)
        ID: name='__nesc_result' (at pp.c:17890)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__Send__send' (at pp.c:17890)
          ExprList:  (at pp.c:17890)
            ID: name='msg' (at pp.c:17890)
            ID: name='len' (at pp.c:17890)
      Return:  (at pp.c:17894)
        ID: name='__nesc_result' (at pp.c:17894)
  FuncDef:  (at pp.c:17899)
    Decl: name='DefaultLplP__send__runTask', quals=[], storage=['inline', 'static'] (at pp.c:17899)
      FuncDecl: quals=None (at pp.c:17899)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__send__runTask', quals=[] (at pp.c:17899)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17901)
      If:  (at pp.c:17902)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SubSend__send' (at pp.c:17902)
            ExprList:  (at pp.c:17902)
              ID: name='DefaultLplP__currentSendMsg' (at pp.c:17902)
              ID: name='DefaultLplP__currentSendLen' (at pp.c:17902)
          ID: name='SUCCESS' (at pp.c:17902)
        Compound:  (at pp.c:17902)
          FuncCall:  (at None)
            ID: name='DefaultLplP__send__postTask' (at pp.c:17903)
  FuncDef:  (at pp.c:17908)
    Decl: name='CC2420TransmitP__TXCTRL__write', quals=[], storage=['static', 'inline'] (at pp.c:17908)
      FuncDecl: quals=None (at pp.c:17908)
        ParamList:  (at pp.c:17908)
          Decl: name='data', quals=[], storage=[] (at pp.c:17908)
            TypeDecl: declname='data', quals=[] (at pp.c:17908)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__TXCTRL__write', quals=[] (at pp.c:17908)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:17908)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17910)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17910)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17914)
        ID: name='__nesc_result' (at pp.c:17914)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:17914)
          ExprList:  (at pp.c:17914)
            ID: name='CC2420_TXCTRL' (at pp.c:17914)
            ID: name='data' (at pp.c:17914)
      Return:  (at pp.c:17918)
        ID: name='__nesc_result' (at pp.c:17918)
  FuncDef:  (at pp.c:17923)
    Decl: name='CC2420SpiP__SpiPacket__send', quals=[], storage=['static', 'inline'] (at pp.c:17923)
      FuncDecl: quals=None (at pp.c:17923)
        ParamList:  (at pp.c:17923)
          Decl: name='txBuf', quals=[], storage=[] (at pp.c:17923)
            PtrDecl: quals=[] (at pp.c:17923)
              TypeDecl: declname='txBuf', quals=[] (at pp.c:17923)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rxBuf', quals=[], storage=[] (at pp.c:17923)
            PtrDecl: quals=[] (at pp.c:17923)
              TypeDecl: declname='rxBuf', quals=[] (at pp.c:17923)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17923)
            TypeDecl: declname='len', quals=[] (at pp.c:17923)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiPacket__send', quals=[] (at pp.c:17923)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17923)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17925)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17925)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17929)
        ID: name='__nesc_result' (at pp.c:17929)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__SpiPacket__send' (at pp.c:17929)
          ExprList:  (at pp.c:17929)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:17929)
            ID: name='txBuf' (at pp.c:17929)
            ID: name='rxBuf' (at pp.c:17929)
            ID: name='len' (at pp.c:17929)
      Return:  (at pp.c:17933)
        ID: name='__nesc_result' (at pp.c:17933)
  FuncDef:  (at pp.c:17938)
    Decl: name='CC2420SpiP__SpiByte__write', quals=[], storage=['static', 'inline'] (at pp.c:17938)
      FuncDecl: quals=None (at pp.c:17938)
        ParamList:  (at pp.c:17938)
          Decl: name='tx', quals=[], storage=[] (at pp.c:17938)
            TypeDecl: declname='tx', quals=[] (at pp.c:17938)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiByte__write', quals=[] (at pp.c:17938)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:17938)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17940)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17940)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17944)
        ID: name='__nesc_result' (at pp.c:17944)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__SpiByte__write' (at pp.c:17944)
          ExprList:  (at pp.c:17944)
            ID: name='tx' (at pp.c:17944)
      Return:  (at pp.c:17948)
        ID: name='__nesc_result' (at pp.c:17948)
  FuncDef:  (at pp.c:17953)
    Decl: name='CC2420SpiP__WorkingState__isIdle', quals=[], storage=['static', 'inline'] (at pp.c:17953)
      FuncDecl: quals=None (at pp.c:17953)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__WorkingState__isIdle', quals=[] (at pp.c:17953)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:17953)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17955)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17955)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17959)
        ID: name='__nesc_result' (at pp.c:17959)
        FuncCall:  (at None)
          ID: name='StateImplP__State__isIdle' (at pp.c:17959)
          ExprList:  (at pp.c:17959)
            Constant: type='int', value='0U' (at pp.c:17959)
      Return:  (at pp.c:17963)
        ID: name='__nesc_result' (at pp.c:17963)
  FuncDef:  (at pp.c:17968)
    Decl: name='CC2420SpiP__Fifo__write', quals=[], storage=['inline', 'static'] (at pp.c:17968)
      FuncDecl: quals=None (at pp.c:17968)
        ParamList:  (at pp.c:17968)
          Decl: name='addr', quals=[], storage=[] (at pp.c:17968)
            TypeDecl: declname='addr', quals=[] (at pp.c:17968)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:17968)
            PtrDecl: quals=[] (at pp.c:17968)
              TypeDecl: declname='data', quals=[] (at pp.c:17968)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17969)
            TypeDecl: declname='len', quals=[] (at pp.c:17969)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__write', quals=[] (at pp.c:17968)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:17971)
      Decl: name='status', quals=[], storage=[] (at pp.c:17973)
        TypeDecl: declname='status', quals=[] (at pp.c:17973)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:17973)
      Compound:  (at pp.c:17975)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17975)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17975)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17975)
        Compound:  (at pp.c:17977)
          If:  (at pp.c:17978)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:17978)
            Compound:  (at pp.c:17978)
              Compound:  (at pp.c:17979)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17980)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17980)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='status' (at pp.c:17982)
                Compound:  (at pp.c:17984)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17986)
                    ExprList:  (at pp.c:17986)
                      ID: name='__nesc_atomic' (at pp.c:17986)
                  Return:  (at pp.c:17988)
                    ID: name='__nesc_temp' (at pp.c:17988)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17994)
          ExprList:  (at pp.c:17994)
            ID: name='__nesc_atomic' (at pp.c:17994)
      Assignment: op='=' (at pp.c:17996)
        ID: name='CC2420SpiP__m_addr' (at pp.c:17996)
        ID: name='addr' (at pp.c:17996)
      Assignment: op='=' (at pp.c:17998)
        ID: name='status' (at pp.c:17998)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:17998)
          ExprList:  (at pp.c:17998)
            ID: name='CC2420SpiP__m_addr' (at pp.c:17998)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__SpiPacket__send' (at pp.c:17999)
        ExprList:  (at pp.c:17999)
          ID: name='data' (at pp.c:17999)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:17999)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['void'] (at None)
            Constant: type='int', value='0' (at pp.c:17999)
          ID: name='len' (at pp.c:17999)
      Return:  (at pp.c:18001)
        ID: name='status' (at pp.c:18001)
  FuncDef:  (at pp.c:18005)
    Decl: name='CC2420TransmitP__TXFIFO__write', quals=[], storage=['static', 'inline'] (at pp.c:18005)
      FuncDecl: quals=None (at pp.c:18005)
        ParamList:  (at pp.c:18005)
          Decl: name='data', quals=[], storage=[] (at pp.c:18005)
            PtrDecl: quals=[] (at pp.c:18005)
              TypeDecl: declname='data', quals=[] (at pp.c:18005)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:18005)
            TypeDecl: declname='length', quals=[] (at pp.c:18005)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__TXFIFO__write', quals=[] (at pp.c:18005)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:18005)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18007)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18007)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18011)
        ID: name='__nesc_result' (at pp.c:18011)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Fifo__write' (at pp.c:18011)
          ExprList:  (at pp.c:18011)
            ID: name='CC2420_TXFIFO' (at pp.c:18011)
            ID: name='data' (at pp.c:18011)
            ID: name='length' (at pp.c:18011)
      Return:  (at pp.c:18015)
        ID: name='__nesc_result' (at pp.c:18015)
  FuncDef:  (at pp.c:18020)
    Decl: name='HplMsp430Usart0P__Usart__enableRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:18020)
      FuncDecl: quals=None (at pp.c:18020)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__enableRxIntr', quals=[] (at pp.c:18020)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18022)
      Compound:  (at pp.c:18023)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18023)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18023)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18023)
        Compound:  (at pp.c:18025)
          Assignment: op='&=' (at pp.c:18026)
            ID: name='HplMsp430Usart0P__IFG1' (at pp.c:18026)
            UnaryOp: op='~' (at pp.c:18026)
              BinaryOp: op='<<' (at pp.c:18026)
                Constant: type='int', value='1' (at pp.c:18026)
                Constant: type='int', value='6' (at pp.c:18026)
          Assignment: op='|=' (at pp.c:18027)
            ID: name='HplMsp430Usart0P__IE1' (at pp.c:18027)
            BinaryOp: op='<<' (at pp.c:18027)
              Constant: type='int', value='1' (at pp.c:18027)
              Constant: type='int', value='6' (at pp.c:18027)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:18030)
          ExprList:  (at pp.c:18030)
            ID: name='__nesc_atomic' (at pp.c:18030)
  FuncDef:  (at pp.c:18034)
    Decl: name='Msp430SpiNoDmaP__0__Usart__enableRxIntr', quals=[], storage=['static', 'inline'] (at pp.c:18034)
      FuncDecl: quals=None (at pp.c:18034)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__enableRxIntr', quals=[] (at pp.c:18034)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18034)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__enableRxIntr' (at pp.c:18036)
  FuncDef:  (at pp.c:18041)
    Decl: name='Msp430SpiNoDmaP__0__signalDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:18041)
      FuncDecl: quals=None (at pp.c:18041)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone_task__postTask', quals=[] (at pp.c:18041)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18041)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18043)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18043)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18047)
        ID: name='__nesc_result' (at pp.c:18047)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:18047)
          ExprList:  (at pp.c:18047)
            ID: name='Msp430SpiNoDmaP__0__signalDone_task' (at pp.c:18047)
      Return:  (at pp.c:18051)
        ID: name='__nesc_result' (at pp.c:18051)
  FuncDef:  (at pp.c:18056)
    Decl: name='CC2420TinyosNetworkP__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:18056)
      FuncDecl: quals=None (at pp.c:18056)
        ParamList:  (at pp.c:18056)
          Decl: name='id', quals=[], storage=[] (at pp.c:18056)
            TypeDecl: declname='id', quals=[] (at pp.c:18056)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Resource__release', quals=[] (at pp.c:18056)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18058)
      If:  (at pp.c:18059)
        BinaryOp: op='>' (at pp.c:18059)
          ID: name='CC2420TinyosNetworkP__TINYOS_N_NETWORKS' (at pp.c:18059)
          Constant: type='int', value='1' (at pp.c:18059)
        Compound:  (at pp.c:18059)
          FuncCall:  (at None)
            ID: name='CC2420TinyosNetworkP__grantTask__postTask' (at pp.c:18060)
      Assignment: op='=' (at pp.c:18062)
        ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:18062)
        ID: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:18062)
      Return:  (at pp.c:18063)
        ID: name='SUCCESS' (at pp.c:18063)
  FuncDef:  (at pp.c:18067)
    Decl: name='CC2420TinyosNetworkP__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:18067)
      FuncDecl: quals=None (at pp.c:18067)
        ParamList:  (at pp.c:18067)
          Decl: name='client', quals=[], storage=[] (at pp.c:18067)
            TypeDecl: declname='client', quals=[] (at pp.c:18067)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Resource__default__granted', quals=[] (at pp.c:18067)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18069)
      FuncCall:  (at None)
        ID: name='CC2420TinyosNetworkP__Resource__release' (at pp.c:18070)
        ExprList:  (at pp.c:18070)
          ID: name='client' (at pp.c:18070)
  FuncDef:  (at pp.c:18074)
    Decl: name='CC2420TinyosNetworkP__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:18074)
      FuncDecl: quals=None (at pp.c:18074)
        ParamList:  (at pp.c:18074)
          Decl: name='arg_0x10297f060', quals=[], storage=[] (at pp.c:18074)
            TypeDecl: declname='arg_0x10297f060', quals=[] (at pp.c:18074)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Resource__granted', quals=[] (at pp.c:18074)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18074)
      Switch:  (at pp.c:18076)
        ID: name='arg_0x10297f060' (at pp.c:18076)
        Compound:  (at pp.c:18076)
          Case:  (at pp.c:18078)
            ID: name='CC2420ActiveMessageC__CC2420_AM_SEND_ID' (at pp.c:18078)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__RadioResource__granted' (at pp.c:18080)
          Break:  (at pp.c:18082)
          Default:  (at pp.c:18084)
            FuncCall:  (at None)
              ID: name='CC2420TinyosNetworkP__Resource__default__granted' (at pp.c:18086)
              ExprList:  (at pp.c:18086)
                ID: name='arg_0x10297f060' (at pp.c:18086)
          Break:  (at pp.c:18088)
  FuncDef:  (at pp.c:18095)
    Decl: name='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:18095)
      FuncDecl: quals=None (at pp.c:18095)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[] (at pp.c:18095)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:18097)
      Compound:  (at pp.c:18098)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18098)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18098)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18098)
        Compound:  (at pp.c:18100)
          If:  (at pp.c:18101)
            BinaryOp: op='!=' (at pp.c:18101)
              ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:18101)
              ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:18101)
            Compound:  (at pp.c:18101)
              Decl: name='id', quals=[], storage=[] (at pp.c:18102)
                TypeDecl: declname='id', quals=[] (at pp.c:18102)
                  IdentifierType: names=['uint8_t'] (at None)
                ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:18102)
              Assignment: op='=' (at pp.c:18105)
                ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:18105)
                ArrayRef:  (at pp.c:18105)
                  ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:18105)
                  ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:18105)
              If:  (at pp.c:18106)
                BinaryOp: op='==' (at pp.c:18106)
                  ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:18106)
                  ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:18106)
                Compound:  (at pp.c:18106)
                  Assignment: op='=' (at pp.c:18107)
                    ID: name='FcfsResourceQueueC__0__qTail' (at pp.c:18107)
                    ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:18107)
              Assignment: op='=' (at pp.c:18110)
                ArrayRef:  (at pp.c:18110)
                  ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:18110)
                  ID: name='id' (at pp.c:18110)
                ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:18110)
              Compound:  (at pp.c:18111)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:18112)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:18112)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='id' (at pp.c:18114)
                Compound:  (at pp.c:18116)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:18118)
                    ExprList:  (at pp.c:18118)
                      ID: name='__nesc_atomic' (at pp.c:18118)
                  Return:  (at pp.c:18120)
                    ID: name='__nesc_temp' (at pp.c:18120)
          Compound:  (at pp.c:18125)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:18126)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:18126)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:18128)
            Compound:  (at pp.c:18130)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_end' (at pp.c:18132)
                ExprList:  (at pp.c:18132)
                  ID: name='__nesc_atomic' (at pp.c:18132)
              Return:  (at pp.c:18134)
                ID: name='__nesc_temp' (at pp.c:18134)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:18139)
          ExprList:  (at pp.c:18139)
            ID: name='__nesc_atomic' (at pp.c:18139)
  FuncDef:  (at pp.c:18143)
    Decl: name='CC2420TinyosNetworkP__Queue__dequeue', quals=[], storage=['static', 'inline'] (at pp.c:18143)
      FuncDecl: quals=None (at pp.c:18143)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Queue__dequeue', quals=[] (at pp.c:18143)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:18143)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18145)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18145)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18149)
        ID: name='__nesc_result' (at pp.c:18149)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__0__FcfsQueue__dequeue' (at pp.c:18149)
      Return:  (at pp.c:18153)
        ID: name='__nesc_result' (at pp.c:18153)
  FuncDef:  (at pp.c:18158)
    Decl: name='CC2420TinyosNetworkP__grantTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:18158)
      FuncDecl: quals=None (at pp.c:18158)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__grantTask__runTask', quals=[] (at pp.c:18158)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18160)
      If:  (at pp.c:18163)
        BinaryOp: op='>' (at pp.c:18163)
          ID: name='CC2420TinyosNetworkP__TINYOS_N_NETWORKS' (at pp.c:18163)
          Constant: type='int', value='1' (at pp.c:18163)
        Compound:  (at pp.c:18163)
          If:  (at pp.c:18164)
            BinaryOp: op='&&' (at pp.c:18164)
              BinaryOp: op='==' (at pp.c:18164)
                ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:18164)
                ID: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:18164)
              UnaryOp: op='!' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420TinyosNetworkP__Queue__isEmpty' (at pp.c:18164)
            Compound:  (at pp.c:18164)
              Assignment: op='=' (at pp.c:18165)
                ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:18165)
                FuncCall:  (at None)
                  ID: name='CC2420TinyosNetworkP__Queue__dequeue' (at pp.c:18165)
              If:  (at pp.c:18167)
                BinaryOp: op='!=' (at pp.c:18167)
                  ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:18167)
                  ID: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:18167)
                Compound:  (at pp.c:18167)
                  FuncCall:  (at None)
                    ID: name='CC2420TinyosNetworkP__Resource__granted' (at pp.c:18168)
                    ExprList:  (at pp.c:18168)
                      ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:18168)
        Compound:  (at pp.c:18174)
          If:  (at pp.c:18175)
            BinaryOp: op='!=' (at pp.c:18175)
              ID: name='CC2420TinyosNetworkP__next_owner' (at pp.c:18175)
              ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:18175)
            Compound:  (at pp.c:18175)
              Assignment: op='=' (at pp.c:18176)
                ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:18176)
                ID: name='CC2420TinyosNetworkP__next_owner' (at pp.c:18176)
              FuncCall:  (at None)
                ID: name='CC2420TinyosNetworkP__Resource__granted' (at pp.c:18177)
                ExprList:  (at pp.c:18177)
                  ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:18177)
  FuncDef:  (at pp.c:18183)
    Decl: name='AlarmToTimerC__0__Alarm__startAt', quals=[], storage=['static', 'inline'] (at pp.c:18183)
      FuncDecl: quals=None (at pp.c:18183)
        ParamList:  (at pp.c:18183)
          Decl: name='t0', quals=[], storage=[] (at pp.c:18183)
            TypeDecl: declname='t0', quals=[] (at pp.c:18183)
              IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:18183)
            TypeDecl: declname='dt', quals=[] (at pp.c:18183)
              IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Alarm__startAt', quals=[] (at pp.c:18183)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18183)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__Alarm__startAt' (at pp.c:18185)
        ExprList:  (at pp.c:18185)
          ID: name='t0' (at pp.c:18185)
          ID: name='dt' (at pp.c:18185)
  FuncDef:  (at pp.c:18190)
    Decl: name='AlarmToTimerC__0__start', quals=[], storage=['inline', 'static'] (at pp.c:18190)
      FuncDecl: quals=None (at pp.c:18190)
        ParamList:  (at pp.c:18190)
          Decl: name='t0', quals=[], storage=[] (at pp.c:18190)
            TypeDecl: declname='t0', quals=[] (at pp.c:18190)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:18190)
            TypeDecl: declname='dt', quals=[] (at pp.c:18190)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='oneshot', quals=[], storage=[] (at pp.c:18190)
            TypeDecl: declname='oneshot', quals=[] (at pp.c:18190)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__start', quals=[] (at pp.c:18190)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18191)
      Assignment: op='=' (at pp.c:18192)
        ID: name='AlarmToTimerC__0__m_dt' (at pp.c:18192)
        ID: name='dt' (at pp.c:18192)
      Assignment: op='=' (at pp.c:18193)
        ID: name='AlarmToTimerC__0__m_oneshot' (at pp.c:18193)
        ID: name='oneshot' (at pp.c:18193)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Alarm__startAt' (at pp.c:18194)
        ExprList:  (at pp.c:18194)
          ID: name='t0' (at pp.c:18194)
          ID: name='dt' (at pp.c:18194)
  FuncDef:  (at pp.c:18198)
    Decl: name='AlarmToTimerC__0__Timer__startOneShotAt', quals=[], storage=['inline', 'static'] (at pp.c:18198)
      FuncDecl: quals=None (at pp.c:18198)
        ParamList:  (at pp.c:18198)
          Decl: name='t0', quals=[], storage=[] (at pp.c:18198)
            TypeDecl: declname='t0', quals=[] (at pp.c:18198)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:18198)
            TypeDecl: declname='dt', quals=[] (at pp.c:18198)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Timer__startOneShotAt', quals=[] (at pp.c:18198)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18199)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__start' (at pp.c:18201)
        ExprList:  (at pp.c:18201)
          ID: name='t0' (at pp.c:18201)
          ID: name='dt' (at pp.c:18201)
          ID: name='TRUE' (at pp.c:18201)
  FuncDef:  (at pp.c:18205)
    Decl: name='VirtualizeTimerC__0__TimerFrom__startOneShotAt', quals=[], storage=['static', 'inline'] (at pp.c:18205)
      FuncDecl: quals=None (at pp.c:18205)
        ParamList:  (at pp.c:18205)
          Decl: name='t0', quals=[], storage=[] (at pp.c:18205)
            TypeDecl: declname='t0', quals=[] (at pp.c:18205)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:18205)
            TypeDecl: declname='dt', quals=[] (at pp.c:18205)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__startOneShotAt', quals=[] (at pp.c:18205)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18205)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Timer__startOneShotAt' (at pp.c:18207)
        ExprList:  (at pp.c:18207)
          ID: name='t0' (at pp.c:18207)
          ID: name='dt' (at pp.c:18207)
  FuncDef:  (at pp.c:18212)
    Decl: name='Msp430AlarmC__1__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:18212)
      FuncDecl: quals=None (at pp.c:18212)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Alarm__stop', quals=[] (at pp.c:18212)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18213)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430TimerControl__disableEvents' (at pp.c:18214)
  FuncDef:  (at pp.c:18218)
    Decl: name='TransformAlarmC__1__AlarmFrom__stop', quals=[], storage=['static', 'inline'] (at pp.c:18218)
      FuncDecl: quals=None (at pp.c:18218)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__AlarmFrom__stop', quals=[] (at pp.c:18218)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18218)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Alarm__stop' (at pp.c:18220)
  FuncDef:  (at pp.c:18225)
    Decl: name='TransformAlarmC__1__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:18225)
      FuncDecl: quals=None (at pp.c:18225)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Alarm__stop', quals=[] (at pp.c:18225)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18226)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__AlarmFrom__stop' (at pp.c:18227)
  FuncDef:  (at pp.c:18231)
    Decl: name='AlarmToTimerC__0__Alarm__stop', quals=[], storage=['static', 'inline'] (at pp.c:18231)
      FuncDecl: quals=None (at pp.c:18231)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Alarm__stop', quals=[] (at pp.c:18231)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18231)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__Alarm__stop' (at pp.c:18233)
  FuncDef:  (at pp.c:18238)
    Decl: name='AlarmToTimerC__0__Timer__stop', quals=[], storage=['inline', 'static'] (at pp.c:18238)
      FuncDecl: quals=None (at pp.c:18238)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Timer__stop', quals=[] (at pp.c:18238)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18239)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Alarm__stop' (at pp.c:18241)
  FuncDef:  (at pp.c:18245)
    Decl: name='VirtualizeTimerC__0__TimerFrom__stop', quals=[], storage=['static', 'inline'] (at pp.c:18245)
      FuncDecl: quals=None (at pp.c:18245)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__stop', quals=[] (at pp.c:18245)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18245)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Timer__stop' (at pp.c:18247)
  FuncDef:  (at pp.c:18252)
    Decl: name='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[], storage=['inline', 'static'] (at pp.c:18252)
      FuncDecl: quals=None (at pp.c:18252)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[] (at pp.c:18252)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18253)
      Decl: name='now', quals=[], storage=[] (at pp.c:18258)
        TypeDecl: declname='now', quals=[] (at pp.c:18258)
          IdentifierType: names=['uint32_t'] (at None)
        FuncCall:  (at None)
          ID: name='VirtualizeTimerC__0__TimerFrom__getNow' (at pp.c:18258)
      Decl: name='min_remaining', quals=[], storage=[] (at pp.c:18259)
        TypeDecl: declname='min_remaining', quals=[] (at pp.c:18259)
          IdentifierType: names=['int32_t'] (at None)
        BinaryOp: op='-' (at pp.c:18259)
          BinaryOp: op='<<' (at pp.c:18259)
            Constant: type='int', value='1UL' (at pp.c:18259)
            Constant: type='int', value='31' (at pp.c:18259)
          Constant: type='int', value='1' (at pp.c:18259)
      Decl: name='min_remaining_isset', quals=[], storage=[] (at pp.c:18260)
        TypeDecl: declname='min_remaining_isset', quals=[] (at pp.c:18260)
          IdentifierType: names=['bool'] (at None)
        ID: name='FALSE' (at pp.c:18260)
      Decl: name='num', quals=[], storage=[] (at pp.c:18261)
        TypeDecl: declname='num', quals=[] (at pp.c:18261)
          IdentifierType: names=['uint8_t'] (at None)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__TimerFrom__stop' (at pp.c:18263)
      For:  (at pp.c:18265)
        Assignment: op='=' (at pp.c:18265)
          ID: name='num' (at pp.c:18265)
          Constant: type='int', value='0' (at pp.c:18265)
        BinaryOp: op='<' (at pp.c:18265)
          ID: name='num' (at pp.c:18265)
          ID: name='VirtualizeTimerC__0__NUM_TIMERS' (at pp.c:18265)
        UnaryOp: op='p++' (at pp.c:18265)
          ID: name='num' (at pp.c:18265)
        Compound:  (at pp.c:18266)
          Decl: name='timer', quals=[], storage=[] (at pp.c:18267)
            PtrDecl: quals=[] (at pp.c:18267)
              TypeDecl: declname='timer', quals=[] (at pp.c:18267)
                IdentifierType: names=['VirtualizeTimerC__0__Timer_t'] (at None)
            UnaryOp: op='&' (at pp.c:18267)
              ArrayRef:  (at pp.c:18267)
                ID: name='VirtualizeTimerC__0__m_timers' (at pp.c:18267)
                ID: name='num' (at pp.c:18267)
          If:  (at pp.c:18269)
            StructRef: type='->' (at pp.c:18269)
              ID: name='timer' (at pp.c:18269)
              ID: name='isrunning' (at pp.c:18269)
            Compound:  (at pp.c:18270)
              Decl: name='elapsed', quals=[], storage=[] (at pp.c:18271)
                TypeDecl: declname='elapsed', quals=[] (at pp.c:18271)
                  IdentifierType: names=['uint32_t'] (at None)
                BinaryOp: op='-' (at pp.c:18271)
                  ID: name='now' (at pp.c:18271)
                  StructRef: type='->' (at pp.c:18271)
                    ID: name='timer' (at pp.c:18271)
                    ID: name='t0' (at pp.c:18271)
              Decl: name='remaining', quals=[], storage=[] (at pp.c:18272)
                TypeDecl: declname='remaining', quals=[] (at pp.c:18272)
                  IdentifierType: names=['int32_t'] (at None)
                BinaryOp: op='-' (at pp.c:18272)
                  StructRef: type='->' (at pp.c:18272)
                    ID: name='timer' (at pp.c:18272)
                    ID: name='dt' (at pp.c:18272)
                  ID: name='elapsed' (at pp.c:18272)
              If:  (at pp.c:18274)
                BinaryOp: op='<' (at pp.c:18274)
                  ID: name='remaining' (at pp.c:18274)
                  ID: name='min_remaining' (at pp.c:18274)
                Compound:  (at pp.c:18275)
                  Assignment: op='=' (at pp.c:18276)
                    ID: name='min_remaining' (at pp.c:18276)
                    ID: name='remaining' (at pp.c:18276)
                  Assignment: op='=' (at pp.c:18277)
                    ID: name='min_remaining_isset' (at pp.c:18277)
                    ID: name='TRUE' (at pp.c:18277)
      If:  (at pp.c:18282)
        ID: name='min_remaining_isset' (at pp.c:18282)
        Compound:  (at pp.c:18283)
          If:  (at pp.c:18284)
            BinaryOp: op='<=' (at pp.c:18284)
              ID: name='min_remaining' (at pp.c:18284)
              Constant: type='int', value='0' (at pp.c:18284)
            Compound:  (at pp.c:18284)
              FuncCall:  (at None)
                ID: name='VirtualizeTimerC__0__fireTimers' (at pp.c:18285)
                ExprList:  (at pp.c:18285)
                  ID: name='now' (at pp.c:18285)
            Compound:  (at pp.c:18287)
              FuncCall:  (at None)
                ID: name='VirtualizeTimerC__0__TimerFrom__startOneShotAt' (at pp.c:18289)
                ExprList:  (at pp.c:18289)
                  ID: name='now' (at pp.c:18289)
                  ID: name='min_remaining' (at pp.c:18289)
  FuncDef:  (at pp.c:18295)
    Decl: name='PowerCycleP__getCca__postTask', quals=[], storage=['static', 'inline'] (at pp.c:18295)
      FuncDecl: quals=None (at pp.c:18295)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__getCca__postTask', quals=[] (at pp.c:18295)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18295)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18297)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18297)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18301)
        ID: name='__nesc_result' (at pp.c:18301)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:18301)
          ExprList:  (at pp.c:18301)
            ID: name='PowerCycleP__getCca' (at pp.c:18301)
      Return:  (at pp.c:18305)
        ID: name='__nesc_result' (at pp.c:18305)
  FuncDef:  (at pp.c:18310)
    Decl: name='PowerCycleP__RadioPowerState__getState', quals=[], storage=['static', 'inline'] (at pp.c:18310)
      FuncDecl: quals=None (at pp.c:18310)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__RadioPowerState__getState', quals=[] (at pp.c:18310)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:18310)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18312)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18312)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18316)
        ID: name='__nesc_result' (at pp.c:18316)
        FuncCall:  (at None)
          ID: name='StateImplP__State__getState' (at pp.c:18316)
          ExprList:  (at pp.c:18316)
            Constant: type='int', value='3U' (at pp.c:18316)
      Return:  (at pp.c:18320)
        ID: name='__nesc_result' (at pp.c:18320)
  FuncDef:  (at pp.c:18325)
    Decl: name='PowerCycleP__OnTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:18325)
      FuncDecl: quals=None (at pp.c:18325)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__OnTimer__fired', quals=[] (at pp.c:18325)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18327)
      If:  (at pp.c:18328)
        FuncCall:  (at None)
          ID: name='PowerCycleP__isDutyCycling' (at pp.c:18328)
        Compound:  (at pp.c:18328)
          If:  (at pp.c:18329)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='PowerCycleP__RadioPowerState__getState' (at pp.c:18329)
              ID: name='PowerCycleP__S_OFF' (at pp.c:18329)
            Compound:  (at pp.c:18329)
              Assignment: op='=' (at pp.c:18330)
                ID: name='PowerCycleP__ccaChecks' (at pp.c:18330)
                Constant: type='int', value='0' (at pp.c:18330)
              FuncCall:  (at None)
                ID: name='PowerCycleP__getCca__postTask' (at pp.c:18336)
            Compound:  (at pp.c:18338)
              FuncCall:  (at None)
                ID: name='PowerCycleP__OnTimer__startOneShot' (at pp.c:18340)
                ExprList:  (at pp.c:18340)
                  ID: name='PowerCycleP__sleepInterval' (at pp.c:18340)
  FuncDef:  (at pp.c:18346)
    Decl: name='PowerCycleP__PowerCycle__getSleepInterval', quals=[], storage=['inline', 'static'] (at pp.c:18346)
      FuncDecl: quals=None (at pp.c:18346)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__PowerCycle__getSleepInterval', quals=[] (at pp.c:18346)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:18348)
      Return:  (at pp.c:18349)
        ID: name='PowerCycleP__sleepInterval' (at pp.c:18349)
  FuncDef:  (at pp.c:18353)
    Decl: name='DefaultLplP__PowerCycle__getSleepInterval', quals=[], storage=['static', 'inline'] (at pp.c:18353)
      FuncDecl: quals=None (at pp.c:18353)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__PowerCycle__getSleepInterval', quals=[] (at pp.c:18353)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:18353)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18355)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18355)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18359)
        ID: name='__nesc_result' (at pp.c:18359)
        FuncCall:  (at None)
          ID: name='PowerCycleP__PowerCycle__getSleepInterval' (at pp.c:18359)
      Return:  (at pp.c:18363)
        ID: name='__nesc_result' (at pp.c:18363)
  FuncDef:  (at pp.c:18368)
    Decl: name='DefaultLplP__OffTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:18368)
      FuncDecl: quals=None (at pp.c:18368)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__OffTimer__fired', quals=[] (at pp.c:18368)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18370)
      If:  (at pp.c:18376)
        BinaryOp: op='||' (at None)
          BinaryOp: op='==' (at None)
            FuncCall:  (at None)
              ID: name='DefaultLplP__SplitControlState__getState' (at pp.c:18378)
            ID: name='DefaultLplP__S_OFF' (at pp.c:18378)
          BinaryOp: op='&&' (at None)
            BinaryOp: op='&&' (at None)
              BinaryOp: op='>' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__PowerCycle__getSleepInterval' (at pp.c:18379)
                Constant: type='int', value='0' (at pp.c:18379)
              BinaryOp: op='!=' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__SplitControlState__getState' (at pp.c:18380)
                ID: name='DefaultLplP__S_OFF' (at pp.c:18380)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='DefaultLplP__SendState__getState' (at pp.c:18381)
              ID: name='S_LPL_NOT_SENDING' (at pp.c:18381)
        Compound:  (at pp.c:18381)
          FuncCall:  (at None)
            ID: name='DefaultLplP__stopRadio__postTask' (at pp.c:18382)
  FuncDef:  (at pp.c:18387)
    Decl: name='DefaultLplP__SendState__forceState', quals=[], storage=['static', 'inline'] (at pp.c:18387)
      FuncDecl: quals=None (at pp.c:18387)
        ParamList:  (at pp.c:18387)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:18387)
            TypeDecl: declname='reqState', quals=[] (at pp.c:18387)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DefaultLplP__SendState__forceState', quals=[] (at pp.c:18387)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18387)
      FuncCall:  (at None)
        ID: name='StateImplP__State__forceState' (at pp.c:18389)
        ExprList:  (at pp.c:18389)
          Constant: type='int', value='5U' (at pp.c:18389)
          ID: name='reqState' (at pp.c:18389)
  FuncDef:  (at pp.c:18394)
    Decl: name='DefaultLplP__SendDoneTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:18394)
      FuncDecl: quals=None (at pp.c:18394)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SendDoneTimer__fired', quals=[] (at pp.c:18394)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18396)
      If:  (at pp.c:18397)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendState__getState' (at pp.c:18397)
          ID: name='S_LPL_SENDING' (at pp.c:18397)
        Compound:  (at pp.c:18397)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendState__forceState' (at pp.c:18399)
            ExprList:  (at pp.c:18399)
              ID: name='S_LPL_CLEAN_UP' (at pp.c:18399)
  FuncDef:  (at pp.c:18404)
    Decl: name='VirtualizeTimerC__0__Timer__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:18404)
      FuncDecl: quals=None (at pp.c:18404)
        ParamList:  (at pp.c:18404)
          Decl: name='num', quals=[], storage=[] (at pp.c:18404)
            TypeDecl: declname='num', quals=[] (at pp.c:18404)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__default__fired', quals=[] (at pp.c:18404)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18405)
  FuncDef:  (at pp.c:18409)
    Decl: name='VirtualizeTimerC__0__Timer__fired', quals=[], storage=['static', 'inline'] (at pp.c:18409)
      FuncDecl: quals=None (at pp.c:18409)
        ParamList:  (at pp.c:18409)
          Decl: name='arg_0x1028742f8', quals=[], storage=[] (at pp.c:18409)
            TypeDecl: declname='arg_0x1028742f8', quals=[] (at pp.c:18409)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__fired', quals=[] (at pp.c:18409)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18409)
      Switch:  (at pp.c:18411)
        ID: name='arg_0x1028742f8' (at pp.c:18411)
        Compound:  (at pp.c:18411)
          Case:  (at pp.c:18413)
            Constant: type='int', value='1U' (at pp.c:18413)
            FuncCall:  (at None)
              ID: name='PowerCycleP__OnTimer__fired' (at pp.c:18415)
          Break:  (at pp.c:18417)
          Case:  (at pp.c:18419)
            Constant: type='int', value='3U' (at pp.c:18419)
            FuncCall:  (at None)
              ID: name='DefaultLplP__OffTimer__fired' (at pp.c:18421)
          Break:  (at pp.c:18423)
          Case:  (at pp.c:18425)
            Constant: type='int', value='4U' (at pp.c:18425)
            FuncCall:  (at None)
              ID: name='DefaultLplP__SendDoneTimer__fired' (at pp.c:18427)
          Break:  (at pp.c:18429)
          Default:  (at pp.c:18431)
            FuncCall:  (at None)
              ID: name='VirtualizeTimerC__0__Timer__default__fired' (at pp.c:18433)
              ExprList:  (at pp.c:18433)
                ID: name='arg_0x1028742f8' (at pp.c:18433)
          Break:  (at pp.c:18435)
  FuncDef:  (at pp.c:18442)
    Decl: name='VirtualizeTimerC__0__TimerFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:18442)
      FuncDecl: quals=None (at pp.c:18442)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__fired', quals=[] (at pp.c:18442)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18443)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__fireTimers' (at pp.c:18444)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='VirtualizeTimerC__0__TimerFrom__getNow' (at pp.c:18444)
  FuncDef:  (at pp.c:18448)
    Decl: name='AlarmToTimerC__0__Timer__fired', quals=[], storage=['static', 'inline'] (at pp.c:18448)
      FuncDecl: quals=None (at pp.c:18448)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Timer__fired', quals=[] (at pp.c:18448)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18448)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__TimerFrom__fired' (at pp.c:18450)
  FuncDef:  (at pp.c:18455)
    Decl: name='TransformAlarmC__1__Alarm__getAlarm', quals=[], storage=['inline', 'static'] (at pp.c:18455)
      FuncDecl: quals=None (at pp.c:18455)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Alarm__getAlarm', quals=[] (at pp.c:18455)
          IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
    Compound:  (at pp.c:18456)
      Compound:  (at pp.c:18457)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18457)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18457)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18457)
        Compound:  (at pp.c:18459)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:18460)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:18460)
              IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
            BinaryOp: op='+' (at pp.c:18462)
              ID: name='TransformAlarmC__1__m_t0' (at pp.c:18462)
              ID: name='TransformAlarmC__1__m_dt' (at pp.c:18462)
          Compound:  (at pp.c:18464)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:18466)
              ExprList:  (at pp.c:18466)
                ID: name='__nesc_atomic' (at pp.c:18466)
            Return:  (at pp.c:18468)
              ID: name='__nesc_temp' (at pp.c:18468)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:18472)
          ExprList:  (at pp.c:18472)
            ID: name='__nesc_atomic' (at pp.c:18472)
  FuncDef:  (at pp.c:18476)
    Decl: name='AlarmToTimerC__0__Alarm__getAlarm', quals=[], storage=['static', 'inline'] (at pp.c:18476)
      FuncDecl: quals=None (at pp.c:18476)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Alarm__getAlarm', quals=[] (at pp.c:18476)
          IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
    Compound:  (at pp.c:18476)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18478)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18478)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18482)
        ID: name='__nesc_result' (at pp.c:18482)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__1__Alarm__getAlarm' (at pp.c:18482)
      Return:  (at pp.c:18486)
        ID: name='__nesc_result' (at pp.c:18486)
  FuncDef:  (at pp.c:18491)
    Decl: name='AlarmToTimerC__0__fired__runTask', quals=[], storage=['inline', 'static'] (at pp.c:18491)
      FuncDecl: quals=None (at pp.c:18491)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__fired__runTask', quals=[] (at pp.c:18491)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18492)
      If:  (at pp.c:18493)
        BinaryOp: op='==' (at pp.c:18493)
          ID: name='AlarmToTimerC__0__m_oneshot' (at pp.c:18493)
          ID: name='FALSE' (at pp.c:18493)
        Compound:  (at pp.c:18493)
          FuncCall:  (at None)
            ID: name='AlarmToTimerC__0__start' (at pp.c:18494)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='AlarmToTimerC__0__Alarm__getAlarm' (at pp.c:18494)
              ID: name='AlarmToTimerC__0__m_dt' (at pp.c:18494)
              ID: name='FALSE' (at pp.c:18494)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Timer__fired' (at pp.c:18497)
  FuncDef:  (at pp.c:18501)
    Decl: name='CC2420TinyosNetworkP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:18501)
      FuncDecl: quals=None (at pp.c:18501)
        ParamList:  (at pp.c:18501)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18501)
            PtrDecl: quals=[] (at pp.c:18501)
              TypeDecl: declname='msg', quals=[] (at pp.c:18501)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18501)
          TypeDecl: declname='CC2420TinyosNetworkP__CC2420PacketBody__getHeader', quals=[] (at pp.c:18501)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:18501)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18503)
        PtrDecl: quals=[] (at pp.c:18503)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18503)
            Struct: name='cc2420_header_t', packed=False (at pp.c:18503)
      Assignment: op='=' (at pp.c:18507)
        ID: name='__nesc_result' (at pp.c:18507)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:18507)
          ExprList:  (at pp.c:18507)
            ID: name='msg' (at pp.c:18507)
      Return:  (at pp.c:18511)
        ID: name='__nesc_result' (at pp.c:18511)
  FuncDef:  (at pp.c:18516)
    Decl: name='CC2420TinyosNetworkP__BareSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:18516)
      FuncDecl: quals=None (at pp.c:18516)
        ParamList:  (at pp.c:18516)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18516)
            PtrDecl: quals=[] (at pp.c:18516)
              TypeDecl: declname='msg', quals=[] (at pp.c:18516)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18516)
            TypeDecl: declname='len', quals=[] (at pp.c:18516)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18516)
          TypeDecl: declname='CC2420TinyosNetworkP__BareSend__getPayload', quals=[] (at pp.c:18516)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18518)
      Decl: name='hdr', quals=[], storage=[] (at pp.c:18520)
        PtrDecl: quals=[] (at pp.c:18520)
          TypeDecl: declname='hdr', quals=[] (at pp.c:18520)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__CC2420PacketBody__getHeader' (at pp.c:18520)
          ExprList:  (at pp.c:18520)
            ID: name='msg' (at pp.c:18520)
      Return:  (at pp.c:18523)
        ID: name='hdr' (at pp.c:18523)
  FuncDef:  (at pp.c:18527)
    Decl: name='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:18527)
      FuncDecl: quals=None (at pp.c:18527)
        ParamList:  (at pp.c:18527)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18527)
            PtrDecl: quals=[] (at pp.c:18527)
              TypeDecl: declname='msg', quals=[] (at pp.c:18527)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18527)
            PtrDecl: quals=[] (at pp.c:18527)
              TypeDecl: declname='payload', quals=[] (at pp.c:18527)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18527)
            TypeDecl: declname='len', quals=[] (at pp.c:18527)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18527)
          TypeDecl: declname='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[] (at pp.c:18527)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18529)
      Return:  (at pp.c:18530)
        ID: name='msg' (at pp.c:18530)
  FuncDef:  (at pp.c:18534)
    Decl: name='CC2420TinyosNetworkP__BareReceive__receive', quals=[], storage=['static', 'inline'] (at pp.c:18534)
      FuncDecl: quals=None (at pp.c:18534)
        ParamList:  (at pp.c:18534)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18534)
            PtrDecl: quals=[] (at pp.c:18534)
              TypeDecl: declname='msg', quals=[] (at pp.c:18534)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18534)
            PtrDecl: quals=[] (at pp.c:18534)
              TypeDecl: declname='payload', quals=[] (at pp.c:18534)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18534)
            TypeDecl: declname='len', quals=[] (at pp.c:18534)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18534)
          TypeDecl: declname='CC2420TinyosNetworkP__BareReceive__receive', quals=[] (at pp.c:18534)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18534)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18536)
        PtrDecl: quals=[] (at pp.c:18536)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18536)
            Struct: name='message_t', packed=False (at pp.c:18536)
      Assignment: op='=' (at pp.c:18540)
        ID: name='__nesc_result' (at pp.c:18540)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__BareReceive__default__receive' (at pp.c:18540)
          ExprList:  (at pp.c:18540)
            ID: name='msg' (at pp.c:18540)
            ID: name='payload' (at pp.c:18540)
            ID: name='len' (at pp.c:18540)
      Return:  (at pp.c:18544)
        ID: name='__nesc_result' (at pp.c:18544)
  FuncDef:  (at pp.c:18549)
    Decl: name='CC2420ActiveMessageP__Snoop__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:18549)
      FuncDecl: quals=None (at pp.c:18549)
        ParamList:  (at pp.c:18549)
          Decl: name='id', quals=[], storage=[] (at pp.c:18549)
            TypeDecl: declname='id', quals=[] (at pp.c:18549)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18549)
            PtrDecl: quals=[] (at pp.c:18549)
              TypeDecl: declname='msg', quals=[] (at pp.c:18549)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18549)
            PtrDecl: quals=[] (at pp.c:18549)
              TypeDecl: declname='payload', quals=[] (at pp.c:18549)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18549)
            TypeDecl: declname='len', quals=[] (at pp.c:18549)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18549)
          TypeDecl: declname='CC2420ActiveMessageP__Snoop__default__receive', quals=[] (at pp.c:18549)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18551)
      Return:  (at pp.c:18552)
        ID: name='msg' (at pp.c:18552)
  FuncDef:  (at pp.c:18556)
    Decl: name='CC2420ActiveMessageP__Snoop__receive', quals=[], storage=['static', 'inline'] (at pp.c:18556)
      FuncDecl: quals=None (at pp.c:18556)
        ParamList:  (at pp.c:18556)
          Decl: name='arg_0x102b23480', quals=[], storage=[] (at pp.c:18556)
            TypeDecl: declname='arg_0x102b23480', quals=[] (at pp.c:18556)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18556)
            PtrDecl: quals=[] (at pp.c:18556)
              TypeDecl: declname='msg', quals=[] (at pp.c:18556)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18556)
            PtrDecl: quals=[] (at pp.c:18556)
              TypeDecl: declname='payload', quals=[] (at pp.c:18556)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18556)
            TypeDecl: declname='len', quals=[] (at pp.c:18556)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18556)
          TypeDecl: declname='CC2420ActiveMessageP__Snoop__receive', quals=[] (at pp.c:18556)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18556)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18558)
        PtrDecl: quals=[] (at pp.c:18558)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18558)
            Struct: name='message_t', packed=False (at pp.c:18558)
      Assignment: op='=' (at pp.c:18562)
        ID: name='__nesc_result' (at pp.c:18562)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__Snoop__default__receive' (at pp.c:18562)
          ExprList:  (at pp.c:18562)
            ID: name='arg_0x102b23480' (at pp.c:18562)
            ID: name='msg' (at pp.c:18562)
            ID: name='payload' (at pp.c:18562)
            ID: name='len' (at pp.c:18562)
      Return:  (at pp.c:18566)
        ID: name='__nesc_result' (at pp.c:18566)
  FuncDef:  (at pp.c:18571)
    Decl: name='LowPowerSensingBaseC__SerialSampleMsgSend__send', quals=[], storage=['static', 'inline'] (at pp.c:18571)
      FuncDecl: quals=None (at pp.c:18571)
        ParamList:  (at pp.c:18571)
          Decl: name='addr', quals=[], storage=[] (at pp.c:18571)
            TypeDecl: declname='addr', quals=[] (at pp.c:18571)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18571)
            PtrDecl: quals=[] (at pp.c:18571)
              TypeDecl: declname='msg', quals=[] (at pp.c:18571)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18571)
            TypeDecl: declname='len', quals=[] (at pp.c:18571)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__SerialSampleMsgSend__send', quals=[] (at pp.c:18571)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18571)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18573)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18573)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18577)
        ID: name='__nesc_result' (at pp.c:18577)
        FuncCall:  (at None)
          ID: name='AMQueueEntryP__1__AMSend__send' (at pp.c:18577)
          ExprList:  (at pp.c:18577)
            ID: name='addr' (at pp.c:18577)
            ID: name='msg' (at pp.c:18577)
            ID: name='len' (at pp.c:18577)
      Return:  (at pp.c:18581)
        ID: name='__nesc_result' (at pp.c:18581)
  FuncDef:  (at pp.c:18586)
    Decl: name='SerialActiveMessageP__0__AMPacket__destination', quals=[], storage=['inline', 'static'] (at pp.c:18586)
      FuncDecl: quals=None (at pp.c:18586)
        ParamList:  (at pp.c:18586)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:18586)
            PtrDecl: quals=[] (at pp.c:18586)
              TypeDecl: declname='amsg', quals=[] (at pp.c:18586)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__AMPacket__destination', quals=[] (at pp.c:18586)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:18588)
      Decl: name='header', quals=[], storage=[] (at pp.c:18589)
        PtrDecl: quals=[] (at pp.c:18589)
          TypeDecl: declname='header', quals=[] (at pp.c:18589)
            IdentifierType: names=['serial_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__getHeader' (at pp.c:18589)
          ExprList:  (at pp.c:18589)
            ID: name='amsg' (at pp.c:18589)
      Return:  (at pp.c:18592)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_uint16' (at pp.c:18592)
          ExprList:  (at pp.c:18592)
            StructRef: type='.' (at pp.c:18592)
              StructRef: type='->' (at pp.c:18592)
                ID: name='header' (at pp.c:18592)
                ID: name='dest' (at pp.c:18592)
              ID: name='nxdata' (at pp.c:18592)
  FuncDef:  (at pp.c:18596)
    Decl: name='LowPowerSensingBaseC__SerialAMPacket__destination', quals=[], storage=['static', 'inline'] (at pp.c:18596)
      FuncDecl: quals=None (at pp.c:18596)
        ParamList:  (at pp.c:18596)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:18596)
            PtrDecl: quals=[] (at pp.c:18596)
              TypeDecl: declname='amsg', quals=[] (at pp.c:18596)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__SerialAMPacket__destination', quals=[] (at pp.c:18596)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:18596)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18598)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18598)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18602)
        ID: name='__nesc_result' (at pp.c:18602)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__AMPacket__destination' (at pp.c:18602)
          ExprList:  (at pp.c:18602)
            ID: name='amsg' (at pp.c:18602)
      Return:  (at pp.c:18606)
        ID: name='__nesc_result' (at pp.c:18606)
  FuncDef:  (at pp.c:18611)
    Decl: name='CC2420ActiveMessageP__AMPacket__source', quals=[], storage=['inline', 'static'] (at pp.c:18611)
      FuncDecl: quals=None (at pp.c:18611)
        ParamList:  (at pp.c:18611)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:18611)
            PtrDecl: quals=[] (at pp.c:18611)
              TypeDecl: declname='amsg', quals=[] (at pp.c:18611)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__source', quals=[] (at pp.c:18611)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:18613)
      Decl: name='header', quals=[], storage=[] (at pp.c:18614)
        PtrDecl: quals=[] (at pp.c:18614)
          TypeDecl: declname='header', quals=[] (at pp.c:18614)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:18614)
          ExprList:  (at pp.c:18614)
            ID: name='amsg' (at pp.c:18614)
      Return:  (at pp.c:18617)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_leuint16' (at pp.c:18617)
          ExprList:  (at pp.c:18617)
            StructRef: type='.' (at pp.c:18617)
              StructRef: type='->' (at pp.c:18617)
                ID: name='header' (at pp.c:18617)
                ID: name='src' (at pp.c:18617)
              ID: name='nxdata' (at pp.c:18617)
  FuncDef:  (at pp.c:18621)
    Decl: name='LowPowerSensingBaseC__RadioAMPacket__source', quals=[], storage=['static', 'inline'] (at pp.c:18621)
      FuncDecl: quals=None (at pp.c:18621)
        ParamList:  (at pp.c:18621)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:18621)
            PtrDecl: quals=[] (at pp.c:18621)
              TypeDecl: declname='amsg', quals=[] (at pp.c:18621)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__RadioAMPacket__source', quals=[] (at pp.c:18621)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:18621)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18623)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18623)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18627)
        ID: name='__nesc_result' (at pp.c:18627)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__AMPacket__source' (at pp.c:18627)
          ExprList:  (at pp.c:18627)
            ID: name='amsg' (at pp.c:18627)
      Return:  (at pp.c:18631)
        ID: name='__nesc_result' (at pp.c:18631)
  FuncDef:  (at pp.c:18636)
    Decl: name='QueueC__0__Queue__maxSize', quals=[], storage=['inline', 'static'] (at pp.c:18636)
      FuncDecl: quals=None (at pp.c:18636)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='QueueC__0__Queue__maxSize', quals=[] (at pp.c:18636)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:18638)
      Return:  (at pp.c:18639)
        Constant: type='int', value='50' (at pp.c:18639)
  FuncDef:  (at pp.c:18643)
    Decl: name='QueueC__0__Queue__size', quals=[], storage=['inline', 'static'] (at pp.c:18643)
      FuncDecl: quals=None (at pp.c:18643)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='QueueC__0__Queue__size', quals=[] (at pp.c:18643)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:18645)
      Return:  (at pp.c:18646)
        ID: name='QueueC__0__size' (at pp.c:18646)
  FuncDef:  (at pp.c:18650)
    Decl: name='QueueC__0__Queue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:18650)
      FuncDecl: quals=None (at pp.c:18650)
        ParamList:  (at pp.c:18650)
          Decl: name='newVal', quals=[], storage=[] (at pp.c:18650)
            TypeDecl: declname='newVal', quals=[] (at pp.c:18650)
              IdentifierType: names=['QueueC__0__queue_t'] (at None)
        TypeDecl: declname='QueueC__0__Queue__enqueue', quals=[] (at pp.c:18650)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18652)
      If:  (at pp.c:18653)
        BinaryOp: op='<' (at None)
          FuncCall:  (at None)
            ID: name='QueueC__0__Queue__size' (at pp.c:18653)
          FuncCall:  (at None)
            ID: name='QueueC__0__Queue__maxSize' (at pp.c:18653)
        Compound:  (at pp.c:18653)
          Assignment: op='=' (at pp.c:18655)
            ArrayRef:  (at pp.c:18655)
              ID: name='QueueC__0__queue' (at pp.c:18655)
              ID: name='QueueC__0__tail' (at pp.c:18655)
            ID: name='newVal' (at pp.c:18655)
          UnaryOp: op='p++' (at pp.c:18656)
            ID: name='QueueC__0__tail' (at pp.c:18656)
          If:  (at pp.c:18657)
            BinaryOp: op='==' (at pp.c:18657)
              ID: name='QueueC__0__tail' (at pp.c:18657)
              Constant: type='int', value='50' (at pp.c:18657)
            Compound:  (at pp.c:18657)
              Assignment: op='=' (at pp.c:18659)
                ID: name='QueueC__0__tail' (at pp.c:18659)
                Constant: type='int', value='0' (at pp.c:18659)
          UnaryOp: op='p++' (at pp.c:18662)
            ID: name='QueueC__0__size' (at pp.c:18662)
          FuncCall:  (at None)
            ID: name='QueueC__0__printQueue' (at pp.c:18663)
          Return:  (at pp.c:18664)
            ID: name='SUCCESS' (at pp.c:18664)
        Compound:  (at pp.c:18666)
          Return:  (at pp.c:18667)
            ID: name='FAIL' (at pp.c:18667)
  FuncDef:  (at pp.c:18672)
    Decl: name='LowPowerSensingBaseC__MsgQueue__enqueue', quals=[], storage=['static', 'inline'] (at pp.c:18672)
      FuncDecl: quals=None (at pp.c:18672)
        ParamList:  (at pp.c:18672)
          Decl: name='newVal', quals=[], storage=[] (at pp.c:18672)
            TypeDecl: declname='newVal', quals=[] (at pp.c:18672)
              IdentifierType: names=['LowPowerSensingBaseC__MsgQueue__t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__MsgQueue__enqueue', quals=[] (at pp.c:18672)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18672)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18674)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18674)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18678)
        ID: name='__nesc_result' (at pp.c:18678)
        FuncCall:  (at None)
          ID: name='QueueC__0__Queue__enqueue' (at pp.c:18678)
          ExprList:  (at pp.c:18678)
            ID: name='newVal' (at pp.c:18678)
      Return:  (at pp.c:18682)
        ID: name='__nesc_result' (at pp.c:18682)
  FuncDef:  (at pp.c:18687)
    Decl: name='LowPowerSensingBaseC__MsgQueue__empty', quals=[], storage=['static', 'inline'] (at pp.c:18687)
      FuncDecl: quals=None (at pp.c:18687)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__MsgQueue__empty', quals=[] (at pp.c:18687)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18687)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18689)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18689)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18693)
        ID: name='__nesc_result' (at pp.c:18693)
        FuncCall:  (at None)
          ID: name='QueueC__0__Queue__empty' (at pp.c:18693)
      Return:  (at pp.c:18697)
        ID: name='__nesc_result' (at pp.c:18697)
  FuncDef:  (at pp.c:18702)
    Decl: name='HplMsp430GeneralIOP__38__IO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:18702)
      FuncDecl: quals=None (at pp.c:18702)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__38__IO__toggle', quals=[] (at pp.c:18702)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18704)
      Compound:  (at pp.c:18706)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18706)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18706)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18706)
        Assignment: op='^=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:18708)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='49U' (at pp.c:18708)
          BinaryOp: op='<<' (at pp.c:18708)
            Constant: type='int', value='0x01' (at pp.c:18708)
            Constant: type='int', value='6' (at pp.c:18708)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:18710)
          ExprList:  (at pp.c:18710)
            ID: name='__nesc_atomic' (at pp.c:18710)
  FuncDef:  (at pp.c:18714)
    Decl: name='Msp430GpioC__2__HplGeneralIO__toggle', quals=[], storage=['static', 'inline'] (at pp.c:18714)
      FuncDecl: quals=None (at pp.c:18714)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__toggle', quals=[] (at pp.c:18714)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18714)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__38__IO__toggle' (at pp.c:18716)
  FuncDef:  (at pp.c:18721)
    Decl: name='Msp430GpioC__2__GeneralIO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:18721)
      FuncDecl: quals=None (at pp.c:18721)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__GeneralIO__toggle', quals=[] (at pp.c:18721)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18723)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__HplGeneralIO__toggle' (at pp.c:18725)
  FuncDef:  (at pp.c:18729)
    Decl: name='LedsP__Led2__toggle', quals=[], storage=['static', 'inline'] (at pp.c:18729)
      FuncDecl: quals=None (at pp.c:18729)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led2__toggle', quals=[] (at pp.c:18729)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18729)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__GeneralIO__toggle' (at pp.c:18731)
  FuncDef:  (at pp.c:18736)
    Decl: name='LedsP__Leds__led2Toggle', quals=[], storage=['inline', 'static'] (at pp.c:18736)
      FuncDecl: quals=None (at pp.c:18736)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Leds__led2Toggle', quals=[] (at pp.c:18736)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18738)
      FuncCall:  (at None)
        ID: name='LedsP__Led2__toggle' (at pp.c:18739)
  FuncDef:  (at pp.c:18746)
    Decl: name='LowPowerSensingBaseC__Leds__led2Toggle', quals=[], storage=['static', 'inline'] (at pp.c:18746)
      FuncDecl: quals=None (at pp.c:18746)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__Leds__led2Toggle', quals=[] (at pp.c:18746)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18746)
      FuncCall:  (at None)
        ID: name='LedsP__Leds__led2Toggle' (at pp.c:18748)
  FuncDef:  (at pp.c:18753)
    Decl: name='LowPowerSensingBaseC__RadioSampleMsgReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:18753)
      FuncDecl: quals=None (at pp.c:18753)
        ParamList:  (at pp.c:18753)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18753)
            PtrDecl: quals=[] (at pp.c:18753)
              TypeDecl: declname='msg', quals=[] (at pp.c:18753)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18753)
            PtrDecl: quals=[] (at pp.c:18753)
              TypeDecl: declname='payload', quals=[] (at pp.c:18753)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18753)
            TypeDecl: declname='len', quals=[] (at pp.c:18753)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18753)
          TypeDecl: declname='LowPowerSensingBaseC__RadioSampleMsgReceive__receive', quals=[] (at pp.c:18753)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18755)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__Leds__led2Toggle' (at pp.c:18756)
      If:  (at pp.c:18757)
        BinaryOp: op='||' (at None)
          BinaryOp: op='==' (at None)
            FuncCall:  (at None)
              ID: name='LowPowerSensingBaseC__MsgQueue__empty' (at pp.c:18757)
            ID: name='FALSE' (at pp.c:18757)
          BinaryOp: op='==' (at pp.c:18757)
            ID: name='LowPowerSensingBaseC__serialSending' (at pp.c:18757)
            ID: name='TRUE' (at pp.c:18757)
        Compound:  (at pp.c:18757)
          FuncCall:  (at None)
            ID: name='LowPowerSensingBaseC__MsgQueue__enqueue' (at pp.c:18758)
            ExprList:  (at pp.c:18758)
              UnaryOp: op='*' (at pp.c:18758)
                ID: name='msg' (at pp.c:18758)
        Compound:  (at pp.c:18762)
          FuncCall:  (at None)
            ID: name='__nesc_hton_uint16' (at pp.c:18763)
            ExprList:  (at pp.c:18763)
              StructRef: type='.' (at pp.c:18763)
                StructRef: type='->' (at pp.c:18763)
                  ID: name='LowPowerSensingBaseC__sample_msg_payload' (at pp.c:18763)
                  ID: name='src_addr' (at pp.c:18763)
                ID: name='nxdata' (at pp.c:18763)
              FuncCall:  (at None)
                ID: name='LowPowerSensingBaseC__RadioAMPacket__source' (at pp.c:18763)
                ExprList:  (at pp.c:18763)
                  ID: name='msg' (at pp.c:18763)
          Assignment: op='=' (at pp.c:18764)
            StructRef: type='->' (at pp.c:18764)
              ID: name='LowPowerSensingBaseC__sample_msg_payload' (at pp.c:18764)
              ID: name='sample' (at pp.c:18764)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  PtrDecl: quals=[] (at pp.c:18764)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['nx_sensor_sample_t'] (at None)
                ID: name='payload' (at pp.c:18764)
          Assignment: op='=' (at pp.c:18765)
            ID: name='LowPowerSensingBaseC__dest_addr' (at pp.c:18765)
            FuncCall:  (at None)
              ID: name='LowPowerSensingBaseC__SerialAMPacket__destination' (at pp.c:18765)
              ExprList:  (at pp.c:18765)
                ID: name='msg' (at pp.c:18765)
          Assignment: op='=' (at pp.c:18766)
            ID: name='LowPowerSensingBaseC__serialSending' (at pp.c:18766)
            ID: name='TRUE' (at pp.c:18766)
          FuncCall:  (at None)
            ID: name='LowPowerSensingBaseC__SerialSampleMsgSend__send' (at pp.c:18767)
            ExprList:  (at pp.c:18767)
              ID: name='LowPowerSensingBaseC__dest_addr' (at pp.c:18767)
              UnaryOp: op='&' (at pp.c:18767)
                ID: name='LowPowerSensingBaseC__sample_msg' (at pp.c:18767)
              UnaryOp: op='sizeof' (at pp.c:18767)
                UnaryOp: op='*' (at pp.c:18767)
                  ID: name='LowPowerSensingBaseC__sample_msg_payload' (at pp.c:18767)
      Return:  (at pp.c:18769)
        ID: name='msg' (at pp.c:18769)
  FuncDef:  (at pp.c:18773)
    Decl: name='CC2420ActiveMessageP__Receive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:18773)
      FuncDecl: quals=None (at pp.c:18773)
        ParamList:  (at pp.c:18773)
          Decl: name='id', quals=[], storage=[] (at pp.c:18773)
            TypeDecl: declname='id', quals=[] (at pp.c:18773)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18773)
            PtrDecl: quals=[] (at pp.c:18773)
              TypeDecl: declname='msg', quals=[] (at pp.c:18773)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18773)
            PtrDecl: quals=[] (at pp.c:18773)
              TypeDecl: declname='payload', quals=[] (at pp.c:18773)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18773)
            TypeDecl: declname='len', quals=[] (at pp.c:18773)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18773)
          TypeDecl: declname='CC2420ActiveMessageP__Receive__default__receive', quals=[] (at pp.c:18773)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18775)
      Return:  (at pp.c:18776)
        ID: name='msg' (at pp.c:18776)
  FuncDef:  (at pp.c:18780)
    Decl: name='CC2420ActiveMessageP__Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:18780)
      FuncDecl: quals=None (at pp.c:18780)
        ParamList:  (at pp.c:18780)
          Decl: name='arg_0x102b24908', quals=[], storage=[] (at pp.c:18780)
            TypeDecl: declname='arg_0x102b24908', quals=[] (at pp.c:18780)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18780)
            PtrDecl: quals=[] (at pp.c:18780)
              TypeDecl: declname='msg', quals=[] (at pp.c:18780)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18780)
            PtrDecl: quals=[] (at pp.c:18780)
              TypeDecl: declname='payload', quals=[] (at pp.c:18780)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18780)
            TypeDecl: declname='len', quals=[] (at pp.c:18780)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18780)
          TypeDecl: declname='CC2420ActiveMessageP__Receive__receive', quals=[] (at pp.c:18780)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18780)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18782)
        PtrDecl: quals=[] (at pp.c:18782)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18782)
            Struct: name='message_t', packed=False (at pp.c:18782)
      Switch:  (at pp.c:18786)
        ID: name='arg_0x102b24908' (at pp.c:18786)
        Compound:  (at pp.c:18786)
          Case:  (at pp.c:18788)
            Constant: type='int', value='152' (at pp.c:18788)
            Assignment: op='=' (at pp.c:18790)
              ID: name='__nesc_result' (at pp.c:18790)
              FuncCall:  (at None)
                ID: name='LowPowerSensingBaseC__RadioSampleMsgReceive__receive' (at pp.c:18790)
                ExprList:  (at pp.c:18790)
                  ID: name='msg' (at pp.c:18790)
                  ID: name='payload' (at pp.c:18790)
                  ID: name='len' (at pp.c:18790)
          Break:  (at pp.c:18792)
          Default:  (at pp.c:18794)
            Assignment: op='=' (at pp.c:18796)
              ID: name='__nesc_result' (at pp.c:18796)
              FuncCall:  (at None)
                ID: name='CC2420ActiveMessageP__Receive__default__receive' (at pp.c:18796)
                ExprList:  (at pp.c:18796)
                  ID: name='arg_0x102b24908' (at pp.c:18796)
                  ID: name='msg' (at pp.c:18796)
                  ID: name='payload' (at pp.c:18796)
                  ID: name='len' (at pp.c:18796)
          Break:  (at pp.c:18798)
      Return:  (at pp.c:18804)
        ID: name='__nesc_result' (at pp.c:18804)
  FuncDef:  (at pp.c:18809)
    Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[], storage=['inline', 'static'] (at pp.c:18809)
      FuncDecl: quals=None (at pp.c:18809)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[] (at pp.c:18809)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:18811)
      Return:  (at pp.c:18812)
        FuncCall:  (at None)
          ID: name='ActiveMessageAddressC__amAddress' (at pp.c:18812)
  FuncDef:  (at pp.c:18816)
    Decl: name='CC2420ActiveMessageP__ActiveMessageAddress__amAddress', quals=[], storage=['static', 'inline'] (at pp.c:18816)
      FuncDecl: quals=None (at pp.c:18816)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__ActiveMessageAddress__amAddress', quals=[] (at pp.c:18816)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:18816)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18818)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18818)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18822)
        ID: name='__nesc_result' (at pp.c:18822)
        FuncCall:  (at None)
          ID: name='ActiveMessageAddressC__ActiveMessageAddress__amAddress' (at pp.c:18822)
      Return:  (at pp.c:18826)
        ID: name='__nesc_result' (at pp.c:18826)
  FuncDef:  (at pp.c:18831)
    Decl: name='CC2420ActiveMessageP__AMPacket__address', quals=[], storage=['inline', 'static'] (at pp.c:18831)
      FuncDecl: quals=None (at pp.c:18831)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__address', quals=[] (at pp.c:18831)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:18833)
      Return:  (at pp.c:18834)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__ActiveMessageAddress__amAddress' (at pp.c:18834)
  FuncDef:  (at pp.c:18838)
    Decl: name='CC2420ActiveMessageP__AMPacket__isForMe', quals=[], storage=['inline', 'static'] (at pp.c:18838)
      FuncDecl: quals=None (at pp.c:18838)
        ParamList:  (at pp.c:18838)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:18838)
            PtrDecl: quals=[] (at pp.c:18838)
              TypeDecl: declname='amsg', quals=[] (at pp.c:18838)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__isForMe', quals=[] (at pp.c:18838)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18840)
      Return:  (at pp.c:18841)
        BinaryOp: op='||' (at None)
          BinaryOp: op='==' (at None)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__AMPacket__destination' (at pp.c:18841)
              ExprList:  (at pp.c:18841)
                ID: name='amsg' (at pp.c:18841)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__AMPacket__address' (at pp.c:18841)
          BinaryOp: op='==' (at None)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__AMPacket__destination' (at pp.c:18842)
              ExprList:  (at pp.c:18842)
                ID: name='amsg' (at pp.c:18842)
            ID: name='AM_BROADCAST_ADDR' (at pp.c:18842)
  FuncDef:  (at pp.c:18846)
    Decl: name='CC2420ActiveMessageP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:18846)
      FuncDecl: quals=None (at pp.c:18846)
        ParamList:  (at pp.c:18846)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18846)
            PtrDecl: quals=[] (at pp.c:18846)
              TypeDecl: declname='msg', quals=[] (at pp.c:18846)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18846)
            PtrDecl: quals=[] (at pp.c:18846)
              TypeDecl: declname='payload', quals=[] (at pp.c:18846)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18846)
            TypeDecl: declname='len', quals=[] (at pp.c:18846)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18846)
          TypeDecl: declname='CC2420ActiveMessageP__SubReceive__receive', quals=[] (at pp.c:18846)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18848)
      If:  (at pp.c:18850)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__AMPacket__isForMe' (at pp.c:18850)
          ExprList:  (at pp.c:18850)
            ID: name='msg' (at pp.c:18850)
        Compound:  (at pp.c:18850)
          Return:  (at pp.c:18851)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__Receive__receive' (at pp.c:18851)
              ExprList:  (at None)
                FuncCall:  (at None)
                  ID: name='CC2420ActiveMessageP__AMPacket__type' (at pp.c:18851)
                  ExprList:  (at pp.c:18851)
                    ID: name='msg' (at pp.c:18851)
                ID: name='msg' (at pp.c:18851)
                ID: name='payload' (at pp.c:18851)
                ID: name='len' (at pp.c:18851)
        Compound:  (at pp.c:18853)
          Return:  (at pp.c:18854)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__Snoop__receive' (at pp.c:18854)
              ExprList:  (at None)
                FuncCall:  (at None)
                  ID: name='CC2420ActiveMessageP__AMPacket__type' (at pp.c:18854)
                  ExprList:  (at pp.c:18854)
                    ID: name='msg' (at pp.c:18854)
                ID: name='msg' (at pp.c:18854)
                ID: name='payload' (at pp.c:18854)
                ID: name='len' (at pp.c:18854)
  FuncDef:  (at pp.c:18859)
    Decl: name='CC2420TinyosNetworkP__ActiveReceive__receive', quals=[], storage=['static', 'inline'] (at pp.c:18859)
      FuncDecl: quals=None (at pp.c:18859)
        ParamList:  (at pp.c:18859)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18859)
            PtrDecl: quals=[] (at pp.c:18859)
              TypeDecl: declname='msg', quals=[] (at pp.c:18859)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18859)
            PtrDecl: quals=[] (at pp.c:18859)
              TypeDecl: declname='payload', quals=[] (at pp.c:18859)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18859)
            TypeDecl: declname='len', quals=[] (at pp.c:18859)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18859)
          TypeDecl: declname='CC2420TinyosNetworkP__ActiveReceive__receive', quals=[] (at pp.c:18859)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18859)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18861)
        PtrDecl: quals=[] (at pp.c:18861)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18861)
            Struct: name='message_t', packed=False (at pp.c:18861)
      Assignment: op='=' (at pp.c:18865)
        ID: name='__nesc_result' (at pp.c:18865)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__SubReceive__receive' (at pp.c:18865)
          ExprList:  (at pp.c:18865)
            ID: name='msg' (at pp.c:18865)
            ID: name='payload' (at pp.c:18865)
            ID: name='len' (at pp.c:18865)
      Return:  (at pp.c:18869)
        ID: name='__nesc_result' (at pp.c:18869)
  FuncDef:  (at pp.c:18874)
    Decl: name='CC2420TinyosNetworkP__CC2420PacketBody__getMetadata', quals=[], storage=['static', 'inline'] (at pp.c:18874)
      FuncDecl: quals=None (at pp.c:18874)
        ParamList:  (at pp.c:18874)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18874)
            PtrDecl: quals=[] (at pp.c:18874)
              TypeDecl: declname='msg', quals=[] (at pp.c:18874)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18874)
          TypeDecl: declname='CC2420TinyosNetworkP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:18874)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:18874)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18876)
        PtrDecl: quals=[] (at pp.c:18876)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18876)
            Struct: name='cc2420_metadata_t', packed=False (at pp.c:18876)
      Assignment: op='=' (at pp.c:18880)
        ID: name='__nesc_result' (at pp.c:18880)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:18880)
          ExprList:  (at pp.c:18880)
            ID: name='msg' (at pp.c:18880)
      Return:  (at pp.c:18884)
        ID: name='__nesc_result' (at pp.c:18884)
  FuncDef:  (at pp.c:18889)
    Decl: name='CC2420PacketP__CC2420Packet__getNetwork', quals=[], storage=['inline', 'static'] (at pp.c:18889)
      FuncDecl: quals=None (at pp.c:18889)
        ParamList:  (at pp.c:18889)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:18889)
            PtrDecl: quals=[] (at pp.c:18889)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:18889)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__CC2420Packet__getNetwork', quals=[] (at pp.c:18889)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:18891)
      Compound:  (at pp.c:18895)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18895)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18895)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18895)
        Compound:  (at pp.c:18896)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:18897)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:18897)
              IdentifierType: names=['char', 'unsigned'] (at None)
            UnaryOp: op='*' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__getNetwork' (at pp.c:18899)
                ExprList:  (at pp.c:18899)
                  ID: name='p_msg' (at pp.c:18899)
          Compound:  (at pp.c:18901)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:18903)
              ExprList:  (at pp.c:18903)
                ID: name='__nesc_atomic' (at pp.c:18903)
            Return:  (at pp.c:18905)
              ID: name='__nesc_temp' (at pp.c:18905)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:18909)
          ExprList:  (at pp.c:18909)
            ID: name='__nesc_atomic' (at pp.c:18909)
  FuncDef:  (at pp.c:18913)
    Decl: name='CC2420TinyosNetworkP__CC2420Packet__getNetwork', quals=[], storage=['static', 'inline'] (at pp.c:18913)
      FuncDecl: quals=None (at pp.c:18913)
        ParamList:  (at pp.c:18913)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:18913)
            PtrDecl: quals=[] (at pp.c:18913)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:18913)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__CC2420Packet__getNetwork', quals=[] (at pp.c:18913)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:18913)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18915)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18915)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18919)
        ID: name='__nesc_result' (at pp.c:18919)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420Packet__getNetwork' (at pp.c:18919)
          ExprList:  (at pp.c:18919)
            ID: name='p_msg' (at pp.c:18919)
      Return:  (at pp.c:18923)
        ID: name='__nesc_result' (at pp.c:18923)
  FuncDef:  (at pp.c:18928)
    Decl: name='CC2420TinyosNetworkP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:18928)
      FuncDecl: quals=None (at pp.c:18928)
        ParamList:  (at pp.c:18928)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18928)
            PtrDecl: quals=[] (at pp.c:18928)
              TypeDecl: declname='msg', quals=[] (at pp.c:18928)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18928)
            PtrDecl: quals=[] (at pp.c:18928)
              TypeDecl: declname='payload', quals=[] (at pp.c:18928)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18928)
            TypeDecl: declname='len', quals=[] (at pp.c:18928)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18928)
          TypeDecl: declname='CC2420TinyosNetworkP__SubReceive__receive', quals=[] (at pp.c:18928)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18930)
      Decl: name='network', quals=[], storage=[] (at pp.c:18931)
        TypeDecl: declname='network', quals=[] (at pp.c:18931)
          IdentifierType: names=['uint8_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__CC2420Packet__getNetwork' (at pp.c:18931)
          ExprList:  (at pp.c:18931)
            ID: name='msg' (at pp.c:18931)
      If:  (at pp.c:18933)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_int8' (at pp.c:18933)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  FuncCall:  (at None)
                    ID: name='CC2420TinyosNetworkP__CC2420PacketBody__getMetadata' (at pp.c:18933)
                    ExprList:  (at pp.c:18933)
                      ID: name='msg' (at pp.c:18933)
                  ID: name='crc' (at pp.c:18933)
                ID: name='nxdata' (at pp.c:18933)
        Compound:  (at pp.c:18933)
          Return:  (at pp.c:18934)
            ID: name='msg' (at pp.c:18934)
      If:  (at pp.c:18937)
        BinaryOp: op='==' (at pp.c:18937)
          ID: name='network' (at pp.c:18937)
          Constant: type='int', value='0x3f' (at pp.c:18937)
        Compound:  (at pp.c:18937)
          Return:  (at pp.c:18938)
            FuncCall:  (at None)
              ID: name='CC2420TinyosNetworkP__ActiveReceive__receive' (at pp.c:18938)
              ExprList:  (at pp.c:18938)
                ID: name='msg' (at pp.c:18938)
                ID: name='payload' (at pp.c:18938)
                ID: name='len' (at pp.c:18938)
        Compound:  (at pp.c:18942)
          Return:  (at pp.c:18943)
            FuncCall:  (at None)
              ID: name='CC2420TinyosNetworkP__BareReceive__receive' (at pp.c:18943)
              ExprList:  (at pp.c:18943)
                ID: name='msg' (at pp.c:18943)
                FuncCall:  (at None)
                  ID: name='CC2420TinyosNetworkP__BareSend__getPayload' (at pp.c:18944)
                  ExprList:  (at pp.c:18944)
                    ID: name='msg' (at pp.c:18944)
                    ID: name='len' (at pp.c:18944)
                BinaryOp: op='+' (at pp.c:18945)
                  ID: name='len' (at pp.c:18945)
                  UnaryOp: op='sizeof' (at pp.c:18945)
                    Typename: quals=[] (at None)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['cc2420_header_t'] (at None)
  FuncDef:  (at pp.c:18950)
    Decl: name='DefaultLplP__Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:18950)
      FuncDecl: quals=None (at pp.c:18950)
        ParamList:  (at pp.c:18950)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18950)
            PtrDecl: quals=[] (at pp.c:18950)
              TypeDecl: declname='msg', quals=[] (at pp.c:18950)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18950)
            PtrDecl: quals=[] (at pp.c:18950)
              TypeDecl: declname='payload', quals=[] (at pp.c:18950)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18950)
            TypeDecl: declname='len', quals=[] (at pp.c:18950)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18950)
          TypeDecl: declname='DefaultLplP__Receive__receive', quals=[] (at pp.c:18950)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18950)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18952)
        PtrDecl: quals=[] (at pp.c:18952)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18952)
            Struct: name='message_t', packed=False (at pp.c:18952)
      Assignment: op='=' (at pp.c:18956)
        ID: name='__nesc_result' (at pp.c:18956)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__SubReceive__receive' (at pp.c:18956)
          ExprList:  (at pp.c:18956)
            ID: name='msg' (at pp.c:18956)
            ID: name='payload' (at pp.c:18956)
            ID: name='len' (at pp.c:18956)
      Return:  (at pp.c:18960)
        ID: name='__nesc_result' (at pp.c:18960)
  FuncDef:  (at pp.c:18965)
    Decl: name='DefaultLplP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:18965)
      FuncDecl: quals=None (at pp.c:18965)
        ParamList:  (at pp.c:18965)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18965)
            PtrDecl: quals=[] (at pp.c:18965)
              TypeDecl: declname='msg', quals=[] (at pp.c:18965)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18965)
            PtrDecl: quals=[] (at pp.c:18965)
              TypeDecl: declname='payload', quals=[] (at pp.c:18965)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18966)
            TypeDecl: declname='len', quals=[] (at pp.c:18966)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18965)
          TypeDecl: declname='DefaultLplP__SubReceive__receive', quals=[] (at pp.c:18965)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18968)
      FuncCall:  (at None)
        ID: name='DefaultLplP__startOffTimer' (at pp.c:18969)
      Return:  (at pp.c:18970)
        FuncCall:  (at None)
          ID: name='DefaultLplP__Receive__receive' (at pp.c:18970)
          ExprList:  (at pp.c:18970)
            ID: name='msg' (at pp.c:18970)
            ID: name='payload' (at pp.c:18970)
            ID: name='len' (at pp.c:18970)
  FuncDef:  (at pp.c:18974)
    Decl: name='UniqueReceiveP__Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:18974)
      FuncDecl: quals=None (at pp.c:18974)
        ParamList:  (at pp.c:18974)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18974)
            PtrDecl: quals=[] (at pp.c:18974)
              TypeDecl: declname='msg', quals=[] (at pp.c:18974)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18974)
            PtrDecl: quals=[] (at pp.c:18974)
              TypeDecl: declname='payload', quals=[] (at pp.c:18974)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18974)
            TypeDecl: declname='len', quals=[] (at pp.c:18974)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18974)
          TypeDecl: declname='UniqueReceiveP__Receive__receive', quals=[] (at pp.c:18974)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18974)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18976)
        PtrDecl: quals=[] (at pp.c:18976)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18976)
            Struct: name='message_t', packed=False (at pp.c:18976)
      Assignment: op='=' (at pp.c:18980)
        ID: name='__nesc_result' (at pp.c:18980)
        FuncCall:  (at None)
          ID: name='DefaultLplP__SubReceive__receive' (at pp.c:18980)
          ExprList:  (at pp.c:18980)
            ID: name='msg' (at pp.c:18980)
            ID: name='payload' (at pp.c:18980)
            ID: name='len' (at pp.c:18980)
      Return:  (at pp.c:18984)
        ID: name='__nesc_result' (at pp.c:18984)
  FuncDef:  (at pp.c:18989)
    Decl: name='UniqueReceiveP__insert', quals=[], storage=['inline', 'static'] (at pp.c:18989)
      FuncDecl: quals=None (at pp.c:18989)
        ParamList:  (at pp.c:18989)
          Decl: name='msgSource', quals=[], storage=[] (at pp.c:18989)
            TypeDecl: declname='msgSource', quals=[] (at pp.c:18989)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='msgDsn', quals=[], storage=[] (at pp.c:18989)
            TypeDecl: declname='msgDsn', quals=[] (at pp.c:18989)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='UniqueReceiveP__insert', quals=[] (at pp.c:18989)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18991)
      Decl: name='element', quals=[], storage=[] (at pp.c:18992)
        TypeDecl: declname='element', quals=[] (at pp.c:18992)
          IdentifierType: names=['uint8_t'] (at None)
        ID: name='UniqueReceiveP__recycleSourceElement' (at pp.c:18992)
      Decl: name='increment', quals=[], storage=[] (at pp.c:18993)
        TypeDecl: declname='increment', quals=[] (at pp.c:18993)
          IdentifierType: names=['bool'] (at None)
        ID: name='FALSE' (at pp.c:18993)
      Compound:  (at pp.c:18995)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18995)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18995)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18995)
        Compound:  (at pp.c:18997)
          If:  (at pp.c:18998)
            BinaryOp: op='||' (at pp.c:18998)
              BinaryOp: op='==' (at pp.c:18998)
                ID: name='element' (at pp.c:18998)
                ID: name='UniqueReceiveP__INVALID_ELEMENT' (at pp.c:18998)
              BinaryOp: op='==' (at pp.c:18998)
                ID: name='UniqueReceiveP__writeIndex' (at pp.c:18998)
                ID: name='element' (at pp.c:18998)
            Compound:  (at pp.c:18998)
              Assignment: op='=' (at pp.c:19000)
                ID: name='element' (at pp.c:19000)
                ID: name='UniqueReceiveP__writeIndex' (at pp.c:19000)
              Assignment: op='=' (at pp.c:19001)
                ID: name='increment' (at pp.c:19001)
                ID: name='TRUE' (at pp.c:19001)
          Assignment: op='=' (at pp.c:19004)
            StructRef: type='.' (at pp.c:19004)
              ArrayRef:  (at pp.c:19004)
                ID: name='UniqueReceiveP__receivedMessages' (at pp.c:19004)
                ID: name='element' (at pp.c:19004)
              ID: name='source' (at pp.c:19004)
            ID: name='msgSource' (at pp.c:19004)
          Assignment: op='=' (at pp.c:19005)
            StructRef: type='.' (at pp.c:19005)
              ArrayRef:  (at pp.c:19005)
                ID: name='UniqueReceiveP__receivedMessages' (at pp.c:19005)
                ID: name='element' (at pp.c:19005)
              ID: name='dsn' (at pp.c:19005)
            ID: name='msgDsn' (at pp.c:19005)
          If:  (at pp.c:19006)
            ID: name='increment' (at pp.c:19006)
            Compound:  (at pp.c:19006)
              UnaryOp: op='p++' (at pp.c:19007)
                ID: name='UniqueReceiveP__writeIndex' (at pp.c:19007)
              Assignment: op='%=' (at pp.c:19008)
                ID: name='UniqueReceiveP__writeIndex' (at pp.c:19008)
                Constant: type='int', value='4' (at pp.c:19008)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19012)
          ExprList:  (at pp.c:19012)
            ID: name='__nesc_atomic' (at pp.c:19012)
  FuncDef:  (at pp.c:19016)
    Decl: name='UniqueReceiveP__DuplicateReceive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:19016)
      FuncDecl: quals=None (at pp.c:19016)
        ParamList:  (at pp.c:19016)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19016)
            PtrDecl: quals=[] (at pp.c:19016)
              TypeDecl: declname='msg', quals=[] (at pp.c:19016)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:19016)
            PtrDecl: quals=[] (at pp.c:19016)
              TypeDecl: declname='payload', quals=[] (at pp.c:19016)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:19016)
            TypeDecl: declname='len', quals=[] (at pp.c:19016)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:19016)
          TypeDecl: declname='UniqueReceiveP__DuplicateReceive__default__receive', quals=[] (at pp.c:19016)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:19018)
      Return:  (at pp.c:19019)
        ID: name='msg' (at pp.c:19019)
  FuncDef:  (at pp.c:19023)
    Decl: name='UniqueReceiveP__DuplicateReceive__receive', quals=[], storage=['static', 'inline'] (at pp.c:19023)
      FuncDecl: quals=None (at pp.c:19023)
        ParamList:  (at pp.c:19023)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19023)
            PtrDecl: quals=[] (at pp.c:19023)
              TypeDecl: declname='msg', quals=[] (at pp.c:19023)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:19023)
            PtrDecl: quals=[] (at pp.c:19023)
              TypeDecl: declname='payload', quals=[] (at pp.c:19023)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:19023)
            TypeDecl: declname='len', quals=[] (at pp.c:19023)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:19023)
          TypeDecl: declname='UniqueReceiveP__DuplicateReceive__receive', quals=[] (at pp.c:19023)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:19023)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19025)
        PtrDecl: quals=[] (at pp.c:19025)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19025)
            Struct: name='message_t', packed=False (at pp.c:19025)
      Assignment: op='=' (at pp.c:19029)
        ID: name='__nesc_result' (at pp.c:19029)
        FuncCall:  (at None)
          ID: name='UniqueReceiveP__DuplicateReceive__default__receive' (at pp.c:19029)
          ExprList:  (at pp.c:19029)
            ID: name='msg' (at pp.c:19029)
            ID: name='payload' (at pp.c:19029)
            ID: name='len' (at pp.c:19029)
      Return:  (at pp.c:19033)
        ID: name='__nesc_result' (at pp.c:19033)
  FuncDef:  (at pp.c:19038)
    Decl: name='UniqueReceiveP__hasSeen', quals=[], storage=['inline', 'static'] (at pp.c:19038)
      FuncDecl: quals=None (at pp.c:19038)
        ParamList:  (at pp.c:19038)
          Decl: name='msgSource', quals=[], storage=[] (at pp.c:19038)
            TypeDecl: declname='msgSource', quals=[] (at pp.c:19038)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='msgDsn', quals=[], storage=[] (at pp.c:19038)
            TypeDecl: declname='msgDsn', quals=[] (at pp.c:19038)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='UniqueReceiveP__hasSeen', quals=[] (at pp.c:19038)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19040)
      Decl: name='i', quals=[], storage=[] (at pp.c:19041)
        TypeDecl: declname='i', quals=[] (at pp.c:19041)
          IdentifierType: names=['int'] (at None)
      Assignment: op='=' (at pp.c:19044)
        ID: name='UniqueReceiveP__recycleSourceElement' (at pp.c:19044)
        ID: name='UniqueReceiveP__INVALID_ELEMENT' (at pp.c:19044)
      Compound:  (at pp.c:19046)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19046)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19046)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19046)
        Compound:  (at pp.c:19048)
          For:  (at pp.c:19049)
            Assignment: op='=' (at pp.c:19049)
              ID: name='i' (at pp.c:19049)
              Constant: type='int', value='0' (at pp.c:19049)
            BinaryOp: op='<' (at pp.c:19049)
              ID: name='i' (at pp.c:19049)
              Constant: type='int', value='4' (at pp.c:19049)
            UnaryOp: op='p++' (at pp.c:19049)
              ID: name='i' (at pp.c:19049)
            Compound:  (at pp.c:19049)
              If:  (at pp.c:19050)
                BinaryOp: op='==' (at pp.c:19050)
                  StructRef: type='.' (at pp.c:19050)
                    ArrayRef:  (at pp.c:19050)
                      ID: name='UniqueReceiveP__receivedMessages' (at pp.c:19050)
                      ID: name='i' (at pp.c:19050)
                    ID: name='source' (at pp.c:19050)
                  ID: name='msgSource' (at pp.c:19050)
                Compound:  (at pp.c:19050)
                  If:  (at pp.c:19051)
                    BinaryOp: op='==' (at pp.c:19051)
                      StructRef: type='.' (at pp.c:19051)
                        ArrayRef:  (at pp.c:19051)
                          ID: name='UniqueReceiveP__receivedMessages' (at pp.c:19051)
                          ID: name='i' (at pp.c:19051)
                        ID: name='dsn' (at pp.c:19051)
                      ID: name='msgDsn' (at pp.c:19051)
                    Compound:  (at pp.c:19051)
                      Compound:  (at pp.c:19053)
                        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:19054)
                          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:19054)
                            IdentifierType: names=['char', 'unsigned'] (at None)
                          ID: name='TRUE' (at pp.c:19056)
                        Compound:  (at pp.c:19058)
                          FuncCall:  (at None)
                            ID: name='__nesc_atomic_end' (at pp.c:19060)
                            ExprList:  (at pp.c:19060)
                              ID: name='__nesc_atomic' (at pp.c:19060)
                          Return:  (at pp.c:19062)
                            ID: name='__nesc_temp' (at pp.c:19062)
                  Assignment: op='=' (at pp.c:19067)
                    ID: name='UniqueReceiveP__recycleSourceElement' (at pp.c:19067)
                    ID: name='i' (at pp.c:19067)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19072)
          ExprList:  (at pp.c:19072)
            ID: name='__nesc_atomic' (at pp.c:19072)
      Return:  (at pp.c:19074)
        ID: name='FALSE' (at pp.c:19074)
  FuncDef:  (at pp.c:19078)
    Decl: name='UniqueReceiveP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:19078)
      FuncDecl: quals=None (at pp.c:19078)
        ParamList:  (at pp.c:19078)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19078)
            PtrDecl: quals=[] (at pp.c:19078)
              TypeDecl: declname='msg', quals=[] (at pp.c:19078)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:19078)
          TypeDecl: declname='UniqueReceiveP__CC2420PacketBody__getHeader', quals=[] (at pp.c:19078)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:19078)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19080)
        PtrDecl: quals=[] (at pp.c:19080)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19080)
            Struct: name='cc2420_header_t', packed=False (at pp.c:19080)
      Assignment: op='=' (at pp.c:19084)
        ID: name='__nesc_result' (at pp.c:19084)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:19084)
          ExprList:  (at pp.c:19084)
            ID: name='msg' (at pp.c:19084)
      Return:  (at pp.c:19088)
        ID: name='__nesc_result' (at pp.c:19088)
  FuncDef:  (at pp.c:19093)
    Decl: name='UniqueReceiveP__getSourceKey', quals=[], storage=['inline', 'static'] (at pp.c:19093)
      FuncDecl: quals=None (at pp.c:19093)
        ParamList:  (at pp.c:19093)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19093)
            PtrDecl: quals=[] (at pp.c:19093)
              TypeDecl: declname='msg', quals=[] (at pp.c:19093)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='UniqueReceiveP__getSourceKey', quals=[] (at pp.c:19093)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:19095)
      Decl: name='hdr', quals=[], storage=[] (at pp.c:19096)
        PtrDecl: quals=[] (at pp.c:19096)
          TypeDecl: declname='hdr', quals=[] (at pp.c:19096)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='UniqueReceiveP__CC2420PacketBody__getHeader' (at pp.c:19096)
          ExprList:  (at pp.c:19096)
            ID: name='msg' (at pp.c:19096)
      Decl: name='s_mode', quals=[], storage=[] (at pp.c:19097)
        TypeDecl: declname='s_mode', quals=[] (at pp.c:19097)
          IdentifierType: names=['int'] (at None)
        BinaryOp: op='&' (at None)
          BinaryOp: op='>>' (at None)
            FuncCall:  (at None)
              ID: name='__nesc_ntoh_leuint16' (at pp.c:19097)
              ExprList:  (at pp.c:19097)
                StructRef: type='.' (at pp.c:19097)
                  StructRef: type='->' (at pp.c:19097)
                    ID: name='hdr' (at pp.c:19097)
                    ID: name='fcf' (at pp.c:19097)
                  ID: name='nxdata' (at pp.c:19097)
            ID: name='IEEE154_FCF_SRC_ADDR_MODE' (at pp.c:19097)
          Constant: type='int', value='0x3' (at pp.c:19097)
      Decl: name='d_mode', quals=[], storage=[] (at pp.c:19098)
        TypeDecl: declname='d_mode', quals=[] (at pp.c:19098)
          IdentifierType: names=['int'] (at None)
        BinaryOp: op='&' (at None)
          BinaryOp: op='>>' (at None)
            FuncCall:  (at None)
              ID: name='__nesc_ntoh_leuint16' (at pp.c:19098)
              ExprList:  (at pp.c:19098)
                StructRef: type='.' (at pp.c:19098)
                  StructRef: type='->' (at pp.c:19098)
                    ID: name='hdr' (at pp.c:19098)
                    ID: name='fcf' (at pp.c:19098)
                  ID: name='nxdata' (at pp.c:19098)
            ID: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:19098)
          Constant: type='int', value='0x3' (at pp.c:19098)
      Decl: name='s_offset', quals=[], storage=[] (at pp.c:19099)
        TypeDecl: declname='s_offset', quals=[] (at pp.c:19099)
          IdentifierType: names=['int'] (at None)
        Constant: type='int', value='2' (at pp.c:19099)
      Decl: name='s_len', quals=[], storage=[] (at pp.c:19101)
        TypeDecl: declname='s_len', quals=[] (at pp.c:19101)
          IdentifierType: names=['int'] (at None)
        Constant: type='int', value='2' (at pp.c:19101)
      Decl: name='key', quals=[], storage=[] (at pp.c:19102)
        TypeDecl: declname='key', quals=[] (at pp.c:19102)
          IdentifierType: names=['uint16_t'] (at None)
        Constant: type='int', value='0' (at pp.c:19102)
      Decl: name='current', quals=[], storage=[] (at pp.c:19103)
        PtrDecl: quals=[] (at pp.c:19103)
          TypeDecl: declname='current', quals=[] (at pp.c:19103)
            IdentifierType: names=['uint8_t'] (at None)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:19103)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
          UnaryOp: op='&' (at pp.c:19103)
            StructRef: type='->' (at pp.c:19103)
              ID: name='hdr' (at pp.c:19103)
              ID: name='dest' (at pp.c:19103)
      Decl: name='i', quals=[], storage=[] (at pp.c:19104)
        TypeDecl: declname='i', quals=[] (at pp.c:19104)
          IdentifierType: names=['int'] (at None)
      If:  (at pp.c:19106)
        BinaryOp: op='==' (at pp.c:19106)
          ID: name='s_mode' (at pp.c:19106)
          ID: name='IEEE154_ADDR_EXT' (at pp.c:19106)
        Compound:  (at pp.c:19106)
          Assignment: op='=' (at pp.c:19107)
            ID: name='s_len' (at pp.c:19107)
            Constant: type='int', value='8' (at pp.c:19107)
      If:  (at pp.c:19109)
        BinaryOp: op='==' (at pp.c:19109)
          ID: name='d_mode' (at pp.c:19109)
          ID: name='IEEE154_ADDR_EXT' (at pp.c:19109)
        Compound:  (at pp.c:19109)
          Assignment: op='=' (at pp.c:19110)
            ID: name='s_offset' (at pp.c:19110)
            Constant: type='int', value='8' (at pp.c:19110)
      Assignment: op='+=' (at pp.c:19113)
        ID: name='current' (at pp.c:19113)
        ID: name='s_offset' (at pp.c:19113)
      For:  (at pp.c:19115)
        Assignment: op='=' (at pp.c:19115)
          ID: name='i' (at pp.c:19115)
          Constant: type='int', value='0' (at pp.c:19115)
        BinaryOp: op='<' (at pp.c:19115)
          ID: name='i' (at pp.c:19115)
          ID: name='s_len' (at pp.c:19115)
        UnaryOp: op='p++' (at pp.c:19115)
          ID: name='i' (at pp.c:19115)
        Compound:  (at pp.c:19115)
          Assignment: op='+=' (at pp.c:19116)
            ID: name='key' (at pp.c:19116)
            ArrayRef:  (at pp.c:19116)
              ID: name='current' (at pp.c:19116)
              ID: name='i' (at pp.c:19116)
      Return:  (at pp.c:19118)
        ID: name='key' (at pp.c:19118)
  FuncDef:  (at pp.c:19122)
    Decl: name='UniqueReceiveP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:19122)
      FuncDecl: quals=None (at pp.c:19122)
        ParamList:  (at pp.c:19122)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19122)
            PtrDecl: quals=[] (at pp.c:19122)
              TypeDecl: declname='msg', quals=[] (at pp.c:19122)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:19122)
            PtrDecl: quals=[] (at pp.c:19122)
              TypeDecl: declname='payload', quals=[] (at pp.c:19122)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:19123)
            TypeDecl: declname='len', quals=[] (at pp.c:19123)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:19122)
          TypeDecl: declname='UniqueReceiveP__SubReceive__receive', quals=[] (at pp.c:19122)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:19125)
      Decl: name='msgSource', quals=[], storage=[] (at pp.c:19127)
        TypeDecl: declname='msgSource', quals=[] (at pp.c:19127)
          IdentifierType: names=['uint16_t'] (at None)
        FuncCall:  (at None)
          ID: name='UniqueReceiveP__getSourceKey' (at pp.c:19127)
          ExprList:  (at pp.c:19127)
            ID: name='msg' (at pp.c:19127)
      Decl: name='msgDsn', quals=[], storage=[] (at pp.c:19128)
        TypeDecl: declname='msgDsn', quals=[] (at pp.c:19128)
          IdentifierType: names=['uint8_t'] (at None)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_leuint8' (at pp.c:19128)
          ExprList:  (at None)
            StructRef: type='.' (at None)
              StructRef: type='->' (at None)
                FuncCall:  (at None)
                  ID: name='UniqueReceiveP__CC2420PacketBody__getHeader' (at pp.c:19128)
                  ExprList:  (at pp.c:19128)
                    ID: name='msg' (at pp.c:19128)
                ID: name='dsn' (at pp.c:19128)
              ID: name='nxdata' (at pp.c:19128)
      If:  (at pp.c:19130)
        FuncCall:  (at None)
          ID: name='UniqueReceiveP__hasSeen' (at pp.c:19130)
          ExprList:  (at pp.c:19130)
            ID: name='msgSource' (at pp.c:19130)
            ID: name='msgDsn' (at pp.c:19130)
        Compound:  (at pp.c:19130)
          Return:  (at pp.c:19131)
            FuncCall:  (at None)
              ID: name='UniqueReceiveP__DuplicateReceive__receive' (at pp.c:19131)
              ExprList:  (at pp.c:19131)
                ID: name='msg' (at pp.c:19131)
                ID: name='payload' (at pp.c:19131)
                ID: name='len' (at pp.c:19131)
        Compound:  (at pp.c:19135)
          FuncCall:  (at None)
            ID: name='UniqueReceiveP__insert' (at pp.c:19136)
            ExprList:  (at pp.c:19136)
              ID: name='msgSource' (at pp.c:19136)
              ID: name='msgDsn' (at pp.c:19136)
          Return:  (at pp.c:19137)
            FuncCall:  (at None)
              ID: name='UniqueReceiveP__Receive__receive' (at pp.c:19137)
              ExprList:  (at pp.c:19137)
                ID: name='msg' (at pp.c:19137)
                ID: name='payload' (at pp.c:19137)
                ID: name='len' (at pp.c:19137)
  FuncDef:  (at pp.c:19142)
    Decl: name='CC2420ReceiveP__Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:19142)
      FuncDecl: quals=None (at pp.c:19142)
        ParamList:  (at pp.c:19142)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19142)
            PtrDecl: quals=[] (at pp.c:19142)
              TypeDecl: declname='msg', quals=[] (at pp.c:19142)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:19142)
            PtrDecl: quals=[] (at pp.c:19142)
              TypeDecl: declname='payload', quals=[] (at pp.c:19142)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:19142)
            TypeDecl: declname='len', quals=[] (at pp.c:19142)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:19142)
          TypeDecl: declname='CC2420ReceiveP__Receive__receive', quals=[] (at pp.c:19142)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:19142)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19144)
        PtrDecl: quals=[] (at pp.c:19144)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19144)
            Struct: name='message_t', packed=False (at pp.c:19144)
      Assignment: op='=' (at pp.c:19148)
        ID: name='__nesc_result' (at pp.c:19148)
        FuncCall:  (at None)
          ID: name='UniqueReceiveP__SubReceive__receive' (at pp.c:19148)
          ExprList:  (at pp.c:19148)
            ID: name='msg' (at pp.c:19148)
            ID: name='payload' (at pp.c:19148)
            ID: name='len' (at pp.c:19148)
      Return:  (at pp.c:19152)
        ID: name='__nesc_result' (at pp.c:19152)
  FuncDef:  (at pp.c:19157)
    Decl: name='CC2420ControlP__LocalIeeeEui64__getId', quals=[], storage=['static', 'inline'] (at pp.c:19157)
      FuncDecl: quals=None (at pp.c:19157)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__LocalIeeeEui64__getId', quals=[] (at pp.c:19157)
          IdentifierType: names=['ieee_eui64_t'] (at None)
    Compound:  (at pp.c:19157)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19159)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19159)
          Struct: name='ieee_eui64', packed=False (at pp.c:19159)
      Assignment: op='=' (at pp.c:19163)
        ID: name='__nesc_result' (at pp.c:19163)
        FuncCall:  (at None)
          ID: name='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId' (at pp.c:19163)
      Return:  (at pp.c:19167)
        ID: name='__nesc_result' (at pp.c:19167)
  FuncDef:  (at pp.c:19172)
    Decl: name='CC2420ControlP__CC2420Config__getExtAddr', quals=[], storage=['inline', 'static'] (at pp.c:19172)
      FuncDecl: quals=None (at pp.c:19172)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__getExtAddr', quals=[] (at pp.c:19172)
          IdentifierType: names=['ieee_eui64_t'] (at None)
    Compound:  (at pp.c:19174)
      Return:  (at pp.c:19175)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__LocalIeeeEui64__getId' (at pp.c:19175)
  FuncDef:  (at pp.c:19179)
    Decl: name='CC2420ReceiveP__CC2420Config__getExtAddr', quals=[], storage=['static', 'inline'] (at pp.c:19179)
      FuncDecl: quals=None (at pp.c:19179)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__getExtAddr', quals=[] (at pp.c:19179)
          IdentifierType: names=['ieee_eui64_t'] (at None)
    Compound:  (at pp.c:19179)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19181)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19181)
          Struct: name='ieee_eui64', packed=False (at pp.c:19181)
      Assignment: op='=' (at pp.c:19185)
        ID: name='__nesc_result' (at pp.c:19185)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__getExtAddr' (at pp.c:19185)
      Return:  (at pp.c:19189)
        ID: name='__nesc_result' (at pp.c:19189)
  FuncDef:  (at pp.c:19198)
    Decl: name='CC2420ReceiveP__CC2420Config__getShortAddr', quals=[], storage=['static', 'inline'] (at pp.c:19198)
      FuncDecl: quals=None (at pp.c:19198)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__getShortAddr', quals=[] (at pp.c:19198)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:19198)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19200)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19200)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19204)
        ID: name='__nesc_result' (at pp.c:19204)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__getShortAddr' (at pp.c:19204)
      Return:  (at pp.c:19208)
        ID: name='__nesc_result' (at pp.c:19208)
  FuncDef:  (at pp.c:19213)
    Decl: name='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[], storage=['inline', 'static'] (at pp.c:19213)
      FuncDecl: quals=None (at pp.c:19213)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[] (at pp.c:19213)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19215)
      Compound:  (at pp.c:19216)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19216)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19216)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19216)
        Compound:  (at pp.c:19218)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:19219)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:19219)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='CC2420ControlP__addressRecognition' (at pp.c:19221)
          Compound:  (at pp.c:19223)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:19225)
              ExprList:  (at pp.c:19225)
                ID: name='__nesc_atomic' (at pp.c:19225)
            Return:  (at pp.c:19227)
              ID: name='__nesc_temp' (at pp.c:19227)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19231)
          ExprList:  (at pp.c:19231)
            ID: name='__nesc_atomic' (at pp.c:19231)
  FuncDef:  (at pp.c:19235)
    Decl: name='CC2420ReceiveP__CC2420Config__isAddressRecognitionEnabled', quals=[], storage=['static', 'inline'] (at pp.c:19235)
      FuncDecl: quals=None (at pp.c:19235)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__isAddressRecognitionEnabled', quals=[] (at pp.c:19235)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19235)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19237)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19237)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19241)
        ID: name='__nesc_result' (at pp.c:19241)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled' (at pp.c:19241)
      Return:  (at pp.c:19245)
        ID: name='__nesc_result' (at pp.c:19245)
  FuncDef:  (at pp.c:19250)
    Decl: name='CC2420ReceiveP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:19250)
      FuncDecl: quals=None (at pp.c:19250)
        ParamList:  (at pp.c:19250)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19250)
            PtrDecl: quals=[] (at pp.c:19250)
              TypeDecl: declname='msg', quals=[] (at pp.c:19250)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:19250)
          TypeDecl: declname='CC2420ReceiveP__CC2420PacketBody__getHeader', quals=[] (at pp.c:19250)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:19250)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19252)
        PtrDecl: quals=[] (at pp.c:19252)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19252)
            Struct: name='cc2420_header_t', packed=False (at pp.c:19252)
      Assignment: op='=' (at pp.c:19256)
        ID: name='__nesc_result' (at pp.c:19256)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:19256)
          ExprList:  (at pp.c:19256)
            ID: name='msg' (at pp.c:19256)
      Return:  (at pp.c:19260)
        ID: name='__nesc_result' (at pp.c:19260)
  FuncDef:  (at pp.c:19265)
    Decl: name='CC2420ReceiveP__passesAddressCheck', quals=[], storage=['inline', 'static'] (at pp.c:19265)
      FuncDecl: quals=None (at pp.c:19265)
        ParamList:  (at pp.c:19265)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19265)
            PtrDecl: quals=[] (at pp.c:19265)
              TypeDecl: declname='msg', quals=[] (at pp.c:19265)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__passesAddressCheck', quals=[] (at pp.c:19265)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19267)
      Decl: name='header', quals=[], storage=[] (at pp.c:19268)
        PtrDecl: quals=[] (at pp.c:19268)
          TypeDecl: declname='header', quals=[] (at pp.c:19268)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__CC2420PacketBody__getHeader' (at pp.c:19268)
          ExprList:  (at pp.c:19268)
            ID: name='msg' (at pp.c:19268)
      Decl: name='mode', quals=[], storage=[] (at pp.c:19269)
        TypeDecl: declname='mode', quals=[] (at pp.c:19269)
          IdentifierType: names=['int'] (at None)
        BinaryOp: op='&' (at None)
          BinaryOp: op='>>' (at None)
            FuncCall:  (at None)
              ID: name='__nesc_ntoh_leuint16' (at pp.c:19269)
              ExprList:  (at pp.c:19269)
                StructRef: type='.' (at pp.c:19269)
                  StructRef: type='->' (at pp.c:19269)
                    ID: name='header' (at pp.c:19269)
                    ID: name='fcf' (at pp.c:19269)
                  ID: name='nxdata' (at pp.c:19269)
            ID: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:19269)
          Constant: type='int', value='3' (at pp.c:19269)
      Decl: name='ext_addr', quals=[], storage=[] (at pp.c:19270)
        PtrDecl: quals=[] (at pp.c:19270)
          TypeDecl: declname='ext_addr', quals=[] (at pp.c:19270)
            IdentifierType: names=['ieee_eui64_t'] (at None)
      If:  (at pp.c:19272)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__CC2420Config__isAddressRecognitionEnabled' (at pp.c:19272)
        Compound:  (at pp.c:19272)
          Return:  (at pp.c:19273)
            ID: name='TRUE' (at pp.c:19273)
      If:  (at pp.c:19276)
        BinaryOp: op='==' (at pp.c:19276)
          ID: name='mode' (at pp.c:19276)
          ID: name='IEEE154_ADDR_SHORT' (at pp.c:19276)
        Compound:  (at pp.c:19276)
          Return:  (at pp.c:19277)
            BinaryOp: op='||' (at None)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint16' (at pp.c:19277)
                  ExprList:  (at pp.c:19277)
                    StructRef: type='.' (at pp.c:19277)
                      StructRef: type='->' (at pp.c:19277)
                        ID: name='header' (at pp.c:19277)
                        ID: name='dest' (at pp.c:19277)
                      ID: name='nxdata' (at pp.c:19277)
                FuncCall:  (at None)
                  ID: name='CC2420ReceiveP__CC2420Config__getShortAddr' (at pp.c:19277)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint16' (at pp.c:19278)
                  ExprList:  (at pp.c:19278)
                    StructRef: type='.' (at pp.c:19278)
                      StructRef: type='->' (at pp.c:19278)
                        ID: name='header' (at pp.c:19278)
                        ID: name='dest' (at pp.c:19278)
                      ID: name='nxdata' (at pp.c:19278)
                ID: name='IEEE154_BROADCAST_ADDR' (at pp.c:19278)
        Compound:  (at pp.c:19280)
          If:  (at pp.c:19282)
            BinaryOp: op='==' (at pp.c:19282)
              ID: name='mode' (at pp.c:19282)
              ID: name='IEEE154_ADDR_EXT' (at pp.c:19282)
            Compound:  (at pp.c:19282)
              Decl: name='local_addr', quals=[], storage=[] (at pp.c:19283)
                TypeDecl: declname='local_addr', quals=[] (at pp.c:19283)
                  IdentifierType: names=['ieee_eui64_t'] (at None)
                FuncCall:  (at None)
                  ID: name='CC2420ReceiveP__CC2420Config__getExtAddr' (at pp.c:19283)
              Assignment: op='=' (at pp.c:19286)
                ID: name='ext_addr' (at pp.c:19286)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:19286)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['ieee_eui64_t'] (at None)
                  UnaryOp: op='&' (at pp.c:19286)
                    StructRef: type='->' (at pp.c:19286)
                      ID: name='header' (at pp.c:19286)
                      ID: name='dest' (at pp.c:19286)
              Return:  (at pp.c:19287)
                BinaryOp: op='==' (at None)
                  FuncCall:  (at None)
                    ID: name='memcmp' (at pp.c:19287)
                    ExprList:  (at pp.c:19287)
                      StructRef: type='->' (at pp.c:19287)
                        ID: name='ext_addr' (at pp.c:19287)
                        ID: name='data' (at pp.c:19287)
                      StructRef: type='.' (at pp.c:19287)
                        ID: name='local_addr' (at pp.c:19287)
                        ID: name='data' (at pp.c:19287)
                      ID: name='IEEE_EUI64_LENGTH' (at pp.c:19287)
                  Constant: type='int', value='0' (at pp.c:19287)
            Compound:  (at pp.c:19291)
              Return:  (at pp.c:19293)
                ID: name='FALSE' (at pp.c:19293)
  FuncDef:  (at pp.c:19299)
    Decl: name='CC2420ReceiveP__CC2420PacketBody__getMetadata', quals=[], storage=['static', 'inline'] (at pp.c:19299)
      FuncDecl: quals=None (at pp.c:19299)
        ParamList:  (at pp.c:19299)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19299)
            PtrDecl: quals=[] (at pp.c:19299)
              TypeDecl: declname='msg', quals=[] (at pp.c:19299)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:19299)
          TypeDecl: declname='CC2420ReceiveP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:19299)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:19299)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19301)
        PtrDecl: quals=[] (at pp.c:19301)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19301)
            Struct: name='cc2420_metadata_t', packed=False (at pp.c:19301)
      Assignment: op='=' (at pp.c:19305)
        ID: name='__nesc_result' (at pp.c:19305)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:19305)
          ExprList:  (at pp.c:19305)
            ID: name='msg' (at pp.c:19305)
      Return:  (at pp.c:19309)
        ID: name='__nesc_result' (at pp.c:19309)
  FuncDef:  (at pp.c:19314)
    Decl: name='CC2420ReceiveP__receiveDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:19314)
      FuncDecl: quals=None (at pp.c:19314)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__receiveDone_task__runTask', quals=[] (at pp.c:19314)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19316)
      Decl: name='metadata', quals=[], storage=[] (at pp.c:19317)
        PtrDecl: quals=[] (at pp.c:19317)
          TypeDecl: declname='metadata', quals=[] (at pp.c:19317)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__CC2420PacketBody__getMetadata' (at pp.c:19317)
          ExprList:  (at pp.c:19317)
            ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:19317)
      Decl: name='header', quals=[], storage=[] (at pp.c:19318)
        PtrDecl: quals=[] (at pp.c:19318)
          TypeDecl: declname='header', quals=[] (at pp.c:19318)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__CC2420PacketBody__getHeader' (at pp.c:19318)
          ExprList:  (at pp.c:19318)
            ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:19318)
      Decl: name='length', quals=[], storage=[] (at pp.c:19319)
        TypeDecl: declname='length', quals=[] (at pp.c:19319)
          IdentifierType: names=['uint8_t'] (at None)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_leuint8' (at pp.c:19319)
          ExprList:  (at pp.c:19319)
            StructRef: type='.' (at pp.c:19319)
              StructRef: type='->' (at pp.c:19319)
                ID: name='header' (at pp.c:19319)
                ID: name='length' (at pp.c:19319)
              ID: name='nxdata' (at pp.c:19319)
      Decl: name='tmpLen', quals=[], storage=[] (at pp.c:19320)
        TypeDecl: declname='tmpLen', quals=[] (at pp.c:19320)
          IdentifierType: names=['uint8_t'] (at None)
        BinaryOp: op='-' (at pp.c:19320)
          UnaryOp: op='sizeof' (at pp.c:19320)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['message_t'] (at None)
          BinaryOp: op='-' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['size_t'] (at None)
              UnaryOp: op='&' (at None)
                StructRef: type='->' (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:19320)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['message_t'] (at None)
                    Constant: type='int', value='0' (at pp.c:19320)
                  ID: name='data' (at pp.c:19320)
            UnaryOp: op='sizeof' (at pp.c:19320)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['cc2420_header_t'] (at None)
      Decl: name='buf', quals=[], storage=[] (at pp.c:19321)
        PtrDecl: quals=[] (at pp.c:19321)
          TypeDecl: declname='buf', quals=[] (at pp.c:19321)
            IdentifierType: names=['uint8_t'] (at None)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:19321)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
          ID: name='header' (at pp.c:19321)
      FuncCall:  (at None)
        ID: name='__nesc_hton_int8' (at pp.c:19323)
        ExprList:  (at pp.c:19323)
          StructRef: type='.' (at pp.c:19323)
            StructRef: type='->' (at pp.c:19323)
              ID: name='metadata' (at pp.c:19323)
              ID: name='crc' (at pp.c:19323)
            ID: name='nxdata' (at pp.c:19323)
          BinaryOp: op='>>' (at pp.c:19323)
            ArrayRef:  (at pp.c:19323)
              ID: name='buf' (at pp.c:19323)
              ID: name='length' (at pp.c:19323)
            Constant: type='int', value='7' (at pp.c:19323)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:19324)
        ExprList:  (at pp.c:19324)
          StructRef: type='.' (at pp.c:19324)
            StructRef: type='->' (at pp.c:19324)
              ID: name='metadata' (at pp.c:19324)
              ID: name='lqi' (at pp.c:19324)
            ID: name='nxdata' (at pp.c:19324)
          BinaryOp: op='&' (at pp.c:19324)
            ArrayRef:  (at pp.c:19324)
              ID: name='buf' (at pp.c:19324)
              ID: name='length' (at pp.c:19324)
            Constant: type='int', value='0x7f' (at pp.c:19324)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:19325)
        ExprList:  (at pp.c:19325)
          StructRef: type='.' (at pp.c:19325)
            StructRef: type='->' (at pp.c:19325)
              ID: name='metadata' (at pp.c:19325)
              ID: name='rssi' (at pp.c:19325)
            ID: name='nxdata' (at pp.c:19325)
          ArrayRef:  (at pp.c:19325)
            ID: name='buf' (at pp.c:19325)
            BinaryOp: op='-' (at pp.c:19325)
              ID: name='length' (at pp.c:19325)
              Constant: type='int', value='1' (at pp.c:19325)
      If:  (at pp.c:19327)
        BinaryOp: op='&&' (at None)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__passesAddressCheck' (at pp.c:19327)
            ExprList:  (at pp.c:19327)
              ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:19327)
          BinaryOp: op='>=' (at pp.c:19327)
            ID: name='length' (at pp.c:19327)
            ID: name='CC2420_SIZE' (at pp.c:19327)
        Compound:  (at pp.c:19327)
          Assignment: op='=' (at pp.c:19329)
            ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:19329)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__Receive__receive' (at pp.c:19329)
              ExprList:  (at pp.c:19329)
                ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:19329)
                StructRef: type='->' (at pp.c:19329)
                  ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:19329)
                  ID: name='data' (at pp.c:19329)
                BinaryOp: op='-' (at pp.c:19330)
                  ID: name='length' (at pp.c:19330)
                  ID: name='CC2420_SIZE' (at pp.c:19330)
      Compound:  (at pp.c:19332)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19332)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19332)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19332)
        Assignment: op='=' (at pp.c:19334)
          ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:19334)
          ID: name='FALSE' (at pp.c:19334)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19336)
          ExprList:  (at pp.c:19336)
            ID: name='__nesc_atomic' (at pp.c:19336)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__waitForNextPacket' (at pp.c:19337)
  FuncDef:  (at pp.c:19341)
    Decl: name='dallasid48checkCrc', quals=[], storage=['inline', 'static'] (at pp.c:19341)
      FuncDecl: quals=None (at pp.c:19341)
        ParamList:  (at pp.c:19341)
          Decl: name='id', quals=['const'], storage=[] (at pp.c:19341)
            PtrDecl: quals=[] (at pp.c:19341)
              TypeDecl: declname='id', quals=['const'] (at pp.c:19341)
                IdentifierType: names=['dallasid48_serial_t'] (at None)
        TypeDecl: declname='dallasid48checkCrc', quals=[] (at pp.c:19341)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19343)
      Decl: name='crc', quals=[], storage=[] (at pp.c:19344)
        TypeDecl: declname='crc', quals=[] (at pp.c:19344)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:19344)
      Decl: name='idx', quals=[], storage=[] (at pp.c:19345)
        TypeDecl: declname='idx', quals=[] (at pp.c:19345)
          IdentifierType: names=['uint8_t'] (at None)
      For:  (at pp.c:19348)
        Assignment: op='=' (at pp.c:19348)
          ID: name='idx' (at pp.c:19348)
          Constant: type='int', value='0' (at pp.c:19348)
        BinaryOp: op='<' (at pp.c:19348)
          ID: name='idx' (at pp.c:19348)
          ID: name='DALLASID48_DATA_LENGTH' (at pp.c:19348)
        UnaryOp: op='p++' (at pp.c:19348)
          ID: name='idx' (at pp.c:19348)
        Compound:  (at pp.c:19348)
          Decl: name='i', quals=[], storage=[] (at pp.c:19349)
            TypeDecl: declname='i', quals=[] (at pp.c:19349)
              IdentifierType: names=['uint8_t'] (at None)
          Assignment: op='=' (at pp.c:19352)
            ID: name='crc' (at pp.c:19352)
            BinaryOp: op='^' (at pp.c:19352)
              ID: name='crc' (at pp.c:19352)
              ArrayRef:  (at pp.c:19352)
                StructRef: type='->' (at pp.c:19352)
                  ID: name='id' (at pp.c:19352)
                  ID: name='data' (at pp.c:19352)
                ID: name='idx' (at pp.c:19352)
          For:  (at pp.c:19353)
            Assignment: op='=' (at pp.c:19353)
              ID: name='i' (at pp.c:19353)
              Constant: type='int', value='0' (at pp.c:19353)
            BinaryOp: op='<' (at pp.c:19353)
              ID: name='i' (at pp.c:19353)
              Constant: type='int', value='8' (at pp.c:19353)
            UnaryOp: op='p++' (at pp.c:19353)
              ID: name='i' (at pp.c:19353)
            Compound:  (at pp.c:19353)
              If:  (at pp.c:19354)
                BinaryOp: op='&' (at pp.c:19354)
                  ID: name='crc' (at pp.c:19354)
                  Constant: type='int', value='0x01' (at pp.c:19354)
                Compound:  (at pp.c:19354)
                  Assignment: op='=' (at pp.c:19355)
                    ID: name='crc' (at pp.c:19355)
                    BinaryOp: op='^' (at pp.c:19355)
                      BinaryOp: op='>>' (at pp.c:19355)
                        ID: name='crc' (at pp.c:19355)
                        Constant: type='int', value='1' (at pp.c:19355)
                      Constant: type='int', value='0x8C' (at pp.c:19355)
                Compound:  (at pp.c:19357)
                  Assignment: op='>>=' (at pp.c:19358)
                    ID: name='crc' (at pp.c:19358)
                    Constant: type='int', value='1' (at pp.c:19358)
      Return:  (at pp.c:19362)
        BinaryOp: op='==' (at pp.c:19362)
          ID: name='crc' (at pp.c:19362)
          Constant: type='int', value='0' (at pp.c:19362)
  FuncDef:  (at pp.c:19366)
    Decl: name='OneWireMasterC__BusyWait__wait', quals=[], storage=['static', 'inline'] (at pp.c:19366)
      FuncDecl: quals=None (at pp.c:19366)
        ParamList:  (at pp.c:19366)
          Decl: name='dt', quals=[], storage=[] (at pp.c:19366)
            TypeDecl: declname='dt', quals=[] (at pp.c:19366)
              IdentifierType: names=['OneWireMasterC__BusyWait__size_type'] (at None)
        TypeDecl: declname='OneWireMasterC__BusyWait__wait', quals=[] (at pp.c:19366)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19366)
      FuncCall:  (at None)
        ID: name='BusyWaitCounterC__0__BusyWait__wait' (at pp.c:19368)
        ExprList:  (at pp.c:19368)
          ID: name='dt' (at pp.c:19368)
  FuncDef:  (at pp.c:19373)
    Decl: name='HplMsp430GeneralIOP__12__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:19373)
      FuncDecl: quals=None (at pp.c:19373)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__12__IO__getRaw', quals=[] (at pp.c:19373)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:19375)
      Return:  (at pp.c:19377)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:19377)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='40U' (at pp.c:19377)
          BinaryOp: op='<<' (at pp.c:19377)
            Constant: type='int', value='0x01' (at pp.c:19377)
            Constant: type='int', value='4' (at pp.c:19377)
  FuncDef:  (at pp.c:19381)
    Decl: name='HplMsp430GeneralIOP__12__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:19381)
      FuncDecl: quals=None (at pp.c:19381)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__12__IO__get', quals=[] (at pp.c:19381)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19383)
      Return:  (at pp.c:19385)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='HplMsp430GeneralIOP__12__IO__getRaw' (at pp.c:19385)
          Constant: type='int', value='0' (at pp.c:19385)
  FuncDef:  (at pp.c:19389)
    Decl: name='Msp430GpioC__11__HplGeneralIO__get', quals=[], storage=['static', 'inline'] (at pp.c:19389)
      FuncDecl: quals=None (at pp.c:19389)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__get', quals=[] (at pp.c:19389)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19389)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19391)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19391)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19395)
        ID: name='__nesc_result' (at pp.c:19395)
        FuncCall:  (at None)
          ID: name='HplMsp430GeneralIOP__12__IO__get' (at pp.c:19395)
      Return:  (at pp.c:19399)
        ID: name='__nesc_result' (at pp.c:19399)
  FuncDef:  (at pp.c:19404)
    Decl: name='Msp430GpioC__11__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:19404)
      FuncDecl: quals=None (at pp.c:19404)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__GeneralIO__get', quals=[] (at pp.c:19404)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19406)
      Return:  (at pp.c:19408)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__11__HplGeneralIO__get' (at pp.c:19408)
  FuncDef:  (at pp.c:19412)
    Decl: name='OneWireMasterC__Pin__get', quals=[], storage=['static', 'inline'] (at pp.c:19412)
      FuncDecl: quals=None (at pp.c:19412)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__Pin__get', quals=[] (at pp.c:19412)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19412)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19414)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19414)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19418)
        ID: name='__nesc_result' (at pp.c:19418)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__11__GeneralIO__get' (at pp.c:19418)
      Return:  (at pp.c:19422)
        ID: name='__nesc_result' (at pp.c:19422)
  FuncDef:  (at pp.c:19427)
    Decl: name='HplMsp430GeneralIOP__12__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:19427)
      FuncDecl: quals=None (at pp.c:19427)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeInput', quals=[] (at pp.c:19427)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19429)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:19432)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='42U' (at pp.c:19432)
        UnaryOp: op='~' (at pp.c:19432)
          BinaryOp: op='<<' (at pp.c:19432)
            Constant: type='int', value='0x01' (at pp.c:19432)
            Constant: type='int', value='4' (at pp.c:19432)
  FuncDef:  (at pp.c:19436)
    Decl: name='Msp430GpioC__11__HplGeneralIO__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:19436)
      FuncDecl: quals=None (at pp.c:19436)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__makeInput', quals=[] (at pp.c:19436)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19436)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__12__IO__makeInput' (at pp.c:19438)
  FuncDef:  (at pp.c:19443)
    Decl: name='Msp430GpioC__11__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:19443)
      FuncDecl: quals=None (at pp.c:19443)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__GeneralIO__makeInput', quals=[] (at pp.c:19443)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19445)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__HplGeneralIO__makeInput' (at pp.c:19447)
  FuncDef:  (at pp.c:19451)
    Decl: name='OneWireMasterC__Pin__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:19451)
      FuncDecl: quals=None (at pp.c:19451)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__Pin__makeInput', quals=[] (at pp.c:19451)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19451)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__GeneralIO__makeInput' (at pp.c:19453)
  FuncDef:  (at pp.c:19458)
    Decl: name='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:19458)
      FuncDecl: quals=None (at pp.c:19458)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[] (at pp.c:19458)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19460)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:19463)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='42U' (at pp.c:19463)
        BinaryOp: op='<<' (at pp.c:19463)
          Constant: type='int', value='0x01' (at pp.c:19463)
          Constant: type='int', value='4' (at pp.c:19463)
  FuncDef:  (at pp.c:19467)
    Decl: name='Msp430GpioC__11__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:19467)
      FuncDecl: quals=None (at pp.c:19467)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__makeOutput', quals=[] (at pp.c:19467)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19467)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__12__IO__makeOutput' (at pp.c:19469)
  FuncDef:  (at pp.c:19474)
    Decl: name='Msp430GpioC__11__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:19474)
      FuncDecl: quals=None (at pp.c:19474)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__GeneralIO__makeOutput', quals=[] (at pp.c:19474)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19476)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__HplGeneralIO__makeOutput' (at pp.c:19478)
  FuncDef:  (at pp.c:19482)
    Decl: name='OneWireMasterC__Pin__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:19482)
      FuncDecl: quals=None (at pp.c:19482)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__Pin__makeOutput', quals=[] (at pp.c:19482)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19482)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__GeneralIO__makeOutput' (at pp.c:19484)
  FuncDef:  (at pp.c:19489)
    Decl: name='OneWireMasterC__readBit', quals=[], storage=['inline', 'static'] (at pp.c:19489)
      FuncDecl: quals=None (at pp.c:19489)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__readBit', quals=[] (at pp.c:19489)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19491)
      Decl: name='bit', quals=[], storage=[] (at pp.c:19492)
        TypeDecl: declname='bit', quals=[] (at pp.c:19492)
          IdentifierType: names=['bool'] (at None)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeOutput' (at pp.c:19495)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19496)
        ExprList:  (at pp.c:19496)
          ID: name='OneWireMasterC__DELAY_5US' (at pp.c:19496)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeInput' (at pp.c:19497)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19498)
        ExprList:  (at pp.c:19498)
          ID: name='OneWireMasterC__DELAY_5US' (at pp.c:19498)
      Assignment: op='=' (at pp.c:19499)
        ID: name='bit' (at pp.c:19499)
        FuncCall:  (at None)
          ID: name='OneWireMasterC__Pin__get' (at pp.c:19499)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19500)
        ExprList:  (at pp.c:19500)
          ID: name='OneWireMasterC__SLOT_TIME' (at pp.c:19500)
      Return:  (at pp.c:19501)
        ID: name='bit' (at pp.c:19501)
  FuncDef:  (at pp.c:19505)
    Decl: name='OneWireMasterC__readByte', quals=[], storage=['inline', 'static'] (at pp.c:19505)
      FuncDecl: quals=None (at pp.c:19505)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__readByte', quals=[] (at pp.c:19505)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:19507)
      Decl: name='i', quals=[], storage=[] (at pp.c:19508)
        TypeDecl: declname='i', quals=[] (at pp.c:19508)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='c', quals=[], storage=[] (at pp.c:19510)
        TypeDecl: declname='c', quals=[] (at pp.c:19510)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:19510)
      For:  (at pp.c:19513)
        Assignment: op='=' (at pp.c:19513)
          ID: name='i' (at pp.c:19513)
          Constant: type='int', value='0' (at pp.c:19513)
        BinaryOp: op='<' (at pp.c:19513)
          ID: name='i' (at pp.c:19513)
          Constant: type='int', value='8' (at pp.c:19513)
        UnaryOp: op='p++' (at pp.c:19513)
          ID: name='i' (at pp.c:19513)
        Compound:  (at pp.c:19513)
          Assignment: op='>>=' (at pp.c:19514)
            ID: name='c' (at pp.c:19514)
            Constant: type='int', value='1' (at pp.c:19514)
          If:  (at pp.c:19515)
            FuncCall:  (at None)
              ID: name='OneWireMasterC__readBit' (at pp.c:19515)
            Compound:  (at pp.c:19515)
              Assignment: op='|=' (at pp.c:19516)
                ID: name='c' (at pp.c:19516)
                Constant: type='int', value='0x80' (at pp.c:19516)
      Return:  (at pp.c:19519)
        ID: name='c' (at pp.c:19519)
  FuncDef:  (at pp.c:19523)
    Decl: name='OneWireMasterC__writeZero', quals=[], storage=['inline', 'static'] (at pp.c:19523)
      FuncDecl: quals=None (at pp.c:19523)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__writeZero', quals=[] (at pp.c:19523)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19525)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeOutput' (at pp.c:19526)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19527)
        ExprList:  (at pp.c:19527)
          ID: name='OneWireMasterC__DELAY_60US' (at pp.c:19527)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeInput' (at pp.c:19528)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19529)
        ExprList:  (at pp.c:19529)
          ID: name='OneWireMasterC__DELAY_5US' (at pp.c:19529)
  FuncDef:  (at pp.c:19533)
    Decl: name='OneWireMasterC__writeOne', quals=[], storage=['inline', 'static'] (at pp.c:19533)
      FuncDecl: quals=None (at pp.c:19533)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__writeOne', quals=[] (at pp.c:19533)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19535)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeOutput' (at pp.c:19536)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19537)
        ExprList:  (at pp.c:19537)
          ID: name='OneWireMasterC__DELAY_5US' (at pp.c:19537)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeInput' (at pp.c:19538)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19539)
        ExprList:  (at pp.c:19539)
          ID: name='OneWireMasterC__SLOT_TIME' (at pp.c:19539)
  FuncDef:  (at pp.c:19543)
    Decl: name='OneWireMasterC__writeByte', quals=[], storage=['inline', 'static'] (at pp.c:19543)
      FuncDecl: quals=None (at pp.c:19543)
        ParamList:  (at pp.c:19543)
          Decl: name='c', quals=[], storage=[] (at pp.c:19543)
            TypeDecl: declname='c', quals=[] (at pp.c:19543)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='OneWireMasterC__writeByte', quals=[] (at pp.c:19543)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19545)
      Decl: name='j', quals=[], storage=[] (at pp.c:19546)
        TypeDecl: declname='j', quals=[] (at pp.c:19546)
          IdentifierType: names=['uint8_t'] (at None)
      For:  (at pp.c:19549)
        Assignment: op='=' (at pp.c:19549)
          ID: name='j' (at pp.c:19549)
          Constant: type='int', value='0' (at pp.c:19549)
        BinaryOp: op='<' (at pp.c:19549)
          ID: name='j' (at pp.c:19549)
          Constant: type='int', value='8' (at pp.c:19549)
        UnaryOp: op='p++' (at pp.c:19549)
          ID: name='j' (at pp.c:19549)
        Compound:  (at pp.c:19549)
          If:  (at pp.c:19550)
            BinaryOp: op='&' (at pp.c:19550)
              ID: name='c' (at pp.c:19550)
              Constant: type='int', value='0x01' (at pp.c:19550)
            Compound:  (at pp.c:19550)
              FuncCall:  (at None)
                ID: name='OneWireMasterC__writeOne' (at pp.c:19551)
            Compound:  (at pp.c:19553)
              FuncCall:  (at None)
                ID: name='OneWireMasterC__writeZero' (at pp.c:19554)
          Assignment: op='>>=' (at pp.c:19556)
            ID: name='c' (at pp.c:19556)
            Constant: type='int', value='1' (at pp.c:19556)
  FuncDef:  (at pp.c:19561)
    Decl: name='HplMsp430GeneralIOP__12__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:19561)
      FuncDecl: quals=None (at pp.c:19561)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__12__IO__clr', quals=[] (at pp.c:19561)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19563)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:19566)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='41U' (at pp.c:19566)
        UnaryOp: op='~' (at pp.c:19566)
          BinaryOp: op='<<' (at pp.c:19566)
            Constant: type='int', value='0x01' (at pp.c:19566)
            Constant: type='int', value='4' (at pp.c:19566)
  FuncDef:  (at pp.c:19570)
    Decl: name='Msp430GpioC__11__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:19570)
      FuncDecl: quals=None (at pp.c:19570)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__clr', quals=[] (at pp.c:19570)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19570)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__12__IO__clr' (at pp.c:19572)
  FuncDef:  (at pp.c:19577)
    Decl: name='Msp430GpioC__11__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:19577)
      FuncDecl: quals=None (at pp.c:19577)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__GeneralIO__clr', quals=[] (at pp.c:19577)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19579)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__HplGeneralIO__clr' (at pp.c:19581)
  FuncDef:  (at pp.c:19585)
    Decl: name='OneWireMasterC__Pin__clr', quals=[], storage=['static', 'inline'] (at pp.c:19585)
      FuncDecl: quals=None (at pp.c:19585)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__Pin__clr', quals=[] (at pp.c:19585)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19585)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__GeneralIO__clr' (at pp.c:19587)
  FuncDef:  (at pp.c:19592)
    Decl: name='OneWireMasterC__reset', quals=[], storage=['inline', 'static'] (at pp.c:19592)
      FuncDecl: quals=None (at pp.c:19592)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__reset', quals=[] (at pp.c:19592)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19594)
      Decl: name='i', quals=[], storage=[] (at pp.c:19595)
        TypeDecl: declname='i', quals=[] (at pp.c:19595)
          IdentifierType: names=['uint16_t'] (at None)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeInput' (at pp.c:19598)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__clr' (at pp.c:19599)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeOutput' (at pp.c:19600)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19601)
        ExprList:  (at pp.c:19601)
          ID: name='OneWireMasterC__RESET_LOW_TIME' (at pp.c:19601)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeInput' (at pp.c:19602)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19603)
        ExprList:  (at pp.c:19603)
          ID: name='OneWireMasterC__DELAY_60US' (at pp.c:19603)
      For:  (at pp.c:19605)
        Assignment: op='=' (at pp.c:19605)
          ID: name='i' (at pp.c:19605)
          Constant: type='int', value='0' (at pp.c:19605)
        BinaryOp: op='<' (at pp.c:19605)
          ID: name='i' (at pp.c:19605)
          ID: name='OneWireMasterC__PRESENCE_DETECT_LOW_TIME' (at pp.c:19605)
        ExprList:  (at pp.c:19605)
          Assignment: op='+=' (at pp.c:19605)
            ID: name='i' (at pp.c:19605)
            ID: name='OneWireMasterC__DELAY_5US' (at pp.c:19605)
          FuncCall:  (at None)
            ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19605)
            ExprList:  (at pp.c:19605)
              ID: name='OneWireMasterC__DELAY_5US' (at pp.c:19605)
        If:  (at pp.c:19606)
          UnaryOp: op='!' (at None)
            FuncCall:  (at None)
              ID: name='OneWireMasterC__Pin__get' (at pp.c:19606)
          Compound:  (at pp.c:19606)
            Break:  (at pp.c:19608)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:19611)
        ExprList:  (at pp.c:19611)
          BinaryOp: op='-' (at pp.c:19611)
            ID: name='OneWireMasterC__PRESENCE_RESET_HIGH_TIME' (at pp.c:19611)
            ID: name='OneWireMasterC__DELAY_60US' (at pp.c:19611)
      Return:  (at pp.c:19612)
        BinaryOp: op='<' (at pp.c:19612)
          ID: name='i' (at pp.c:19612)
          ID: name='OneWireMasterC__PRESENCE_DETECT_LOW_TIME' (at pp.c:19612)
  FuncDef:  (at pp.c:19616)
    Decl: name='OneWireMasterC__OneWire__read', quals=[], storage=['inline', 'static'] (at pp.c:19616)
      FuncDecl: quals=None (at pp.c:19616)
        ParamList:  (at pp.c:19616)
          Decl: name='cmd', quals=[], storage=[] (at pp.c:19616)
            TypeDecl: declname='cmd', quals=[] (at pp.c:19616)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:19616)
            PtrDecl: quals=[] (at pp.c:19616)
              TypeDecl: declname='buf', quals=[] (at pp.c:19616)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:19616)
            TypeDecl: declname='len', quals=[] (at pp.c:19616)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='OneWireMasterC__OneWire__read', quals=[] (at pp.c:19616)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19618)
      Decl: name='e', quals=[], storage=[] (at pp.c:19619)
        TypeDecl: declname='e', quals=[] (at pp.c:19619)
          IdentifierType: names=['error_t'] (at None)
        ID: name='SUCCESS' (at pp.c:19619)
      Compound:  (at pp.c:19622)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19622)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19622)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19622)
        Compound:  (at pp.c:19624)
          If:  (at pp.c:19625)
            FuncCall:  (at None)
              ID: name='OneWireMasterC__reset' (at pp.c:19625)
            Compound:  (at pp.c:19625)
              Decl: name='i', quals=[], storage=[] (at pp.c:19626)
                TypeDecl: declname='i', quals=[] (at pp.c:19626)
                  IdentifierType: names=['uint8_t'] (at None)
              FuncCall:  (at None)
                ID: name='OneWireMasterC__writeByte' (at pp.c:19629)
                ExprList:  (at pp.c:19629)
                  ID: name='cmd' (at pp.c:19629)
              For:  (at pp.c:19630)
                Assignment: op='=' (at pp.c:19630)
                  ID: name='i' (at pp.c:19630)
                  Constant: type='int', value='0' (at pp.c:19630)
                BinaryOp: op='<' (at pp.c:19630)
                  ID: name='i' (at pp.c:19630)
                  ID: name='len' (at pp.c:19630)
                UnaryOp: op='p++' (at pp.c:19630)
                  ID: name='i' (at pp.c:19630)
                Compound:  (at pp.c:19630)
                  Assignment: op='=' (at pp.c:19631)
                    ArrayRef:  (at pp.c:19631)
                      ID: name='buf' (at pp.c:19631)
                      ID: name='i' (at pp.c:19631)
                    FuncCall:  (at None)
                      ID: name='OneWireMasterC__readByte' (at pp.c:19631)
            Compound:  (at pp.c:19634)
              Assignment: op='=' (at pp.c:19635)
                ID: name='e' (at pp.c:19635)
                ID: name='EOFF' (at pp.c:19635)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19639)
          ExprList:  (at pp.c:19639)
            ID: name='__nesc_atomic' (at pp.c:19639)
      Return:  (at pp.c:19640)
        ID: name='e' (at pp.c:19640)
  FuncDef:  (at pp.c:19644)
    Decl: name='Ds2411P__OneWire__read', quals=[], storage=['static', 'inline'] (at pp.c:19644)
      FuncDecl: quals=None (at pp.c:19644)
        ParamList:  (at pp.c:19644)
          Decl: name='cmd', quals=[], storage=[] (at pp.c:19644)
            TypeDecl: declname='cmd', quals=[] (at pp.c:19644)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:19644)
            PtrDecl: quals=[] (at pp.c:19644)
              TypeDecl: declname='buf', quals=[] (at pp.c:19644)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:19644)
            TypeDecl: declname='len', quals=[] (at pp.c:19644)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Ds2411P__OneWire__read', quals=[] (at pp.c:19644)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19644)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19646)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19646)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19650)
        ID: name='__nesc_result' (at pp.c:19650)
        FuncCall:  (at None)
          ID: name='OneWireMasterC__OneWire__read' (at pp.c:19650)
          ExprList:  (at pp.c:19650)
            ID: name='cmd' (at pp.c:19650)
            ID: name='buf' (at pp.c:19650)
            ID: name='len' (at pp.c:19650)
      Return:  (at pp.c:19654)
        ID: name='__nesc_result' (at pp.c:19654)
  FuncDef:  (at pp.c:19659)
    Decl: name='Ds2411P__readId', quals=[], storage=['inline', 'static'] (at pp.c:19659)
      FuncDecl: quals=None (at pp.c:19659)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Ds2411P__readId', quals=[] (at pp.c:19659)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19661)
      Decl: name='e', quals=[], storage=[] (at pp.c:19662)
        TypeDecl: declname='e', quals=[] (at pp.c:19662)
          IdentifierType: names=['error_t'] (at None)
        FuncCall:  (at None)
          ID: name='Ds2411P__OneWire__read' (at pp.c:19662)
          ExprList:  (at pp.c:19662)
            Constant: type='int', value='0x33' (at pp.c:19662)
            StructRef: type='.' (at pp.c:19662)
              ID: name='Ds2411P__ds2411id' (at pp.c:19662)
              ID: name='data' (at pp.c:19662)
            ID: name='DALLASID48_DATA_LENGTH' (at pp.c:19662)
      If:  (at pp.c:19665)
        BinaryOp: op='==' (at pp.c:19665)
          ID: name='e' (at pp.c:19665)
          ID: name='SUCCESS' (at pp.c:19665)
        Compound:  (at pp.c:19665)
          If:  (at pp.c:19666)
            FuncCall:  (at None)
              ID: name='dallasid48checkCrc' (at pp.c:19666)
              ExprList:  (at pp.c:19666)
                UnaryOp: op='&' (at pp.c:19666)
                  ID: name='Ds2411P__ds2411id' (at pp.c:19666)
            Compound:  (at pp.c:19666)
              Assignment: op='=' (at pp.c:19667)
                ID: name='Ds2411P__haveId' (at pp.c:19667)
                ID: name='TRUE' (at pp.c:19667)
            Compound:  (at pp.c:19669)
              Assignment: op='=' (at pp.c:19670)
                ID: name='e' (at pp.c:19670)
                ID: name='EINVAL' (at pp.c:19670)
      Return:  (at pp.c:19673)
        ID: name='e' (at pp.c:19673)
  FuncDef:  (at pp.c:19676)
    Decl: name='Ds2411P__ReadId48__read', quals=[], storage=['inline', 'static'] (at pp.c:19676)
      FuncDecl: quals=None (at pp.c:19676)
        ParamList:  (at pp.c:19676)
          Decl: name='id', quals=[], storage=[] (at pp.c:19676)
            PtrDecl: quals=[] (at pp.c:19676)
              TypeDecl: declname='id', quals=[] (at pp.c:19676)
                IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Ds2411P__ReadId48__read', quals=[] (at pp.c:19676)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19678)
      Decl: name='e', quals=[], storage=[] (at pp.c:19679)
        TypeDecl: declname='e', quals=[] (at pp.c:19679)
          IdentifierType: names=['error_t'] (at None)
        ID: name='SUCCESS' (at pp.c:19679)
      If:  (at pp.c:19682)
        UnaryOp: op='!' (at pp.c:19682)
          ID: name='Ds2411P__haveId' (at pp.c:19682)
        Compound:  (at pp.c:19682)
          Assignment: op='=' (at pp.c:19683)
            ID: name='e' (at pp.c:19683)
            FuncCall:  (at None)
              ID: name='Ds2411P__readId' (at pp.c:19683)
      If:  (at pp.c:19685)
        ID: name='Ds2411P__haveId' (at pp.c:19685)
        Compound:  (at pp.c:19685)
          Decl: name='i', quals=[], storage=[] (at pp.c:19686)
            TypeDecl: declname='i', quals=[] (at pp.c:19686)
              IdentifierType: names=['uint8_t'] (at None)
          For:  (at pp.c:19689)
            Assignment: op='=' (at pp.c:19689)
              ID: name='i' (at pp.c:19689)
              Constant: type='int', value='0' (at pp.c:19689)
            BinaryOp: op='<' (at pp.c:19689)
              ID: name='i' (at pp.c:19689)
              ID: name='DALLASID48_SERIAL_LENGTH' (at pp.c:19689)
            UnaryOp: op='p++' (at pp.c:19689)
              ID: name='i' (at pp.c:19689)
            Compound:  (at pp.c:19689)
              Assignment: op='=' (at pp.c:19690)
                ArrayRef:  (at pp.c:19690)
                  ID: name='id' (at pp.c:19690)
                  ID: name='i' (at pp.c:19690)
                ArrayRef:  (at pp.c:19690)
                  StructRef: type='.' (at pp.c:19690)
                    ID: name='Ds2411P__ds2411id' (at pp.c:19690)
                    ID: name='serial' (at pp.c:19690)
                  ID: name='i' (at pp.c:19690)
      Return:  (at pp.c:19693)
        ID: name='e' (at pp.c:19693)
  FuncDef:  (at pp.c:19697)
    Decl: name='DallasId48ToIeeeEui64C__ReadId48__read', quals=[], storage=['static', 'inline'] (at pp.c:19697)
      FuncDecl: quals=None (at pp.c:19697)
        ParamList:  (at pp.c:19697)
          Decl: name='id', quals=[], storage=[] (at pp.c:19697)
            PtrDecl: quals=[] (at pp.c:19697)
              TypeDecl: declname='id', quals=[] (at pp.c:19697)
                IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DallasId48ToIeeeEui64C__ReadId48__read', quals=[] (at pp.c:19697)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19697)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19699)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19699)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19703)
        ID: name='__nesc_result' (at pp.c:19703)
        FuncCall:  (at None)
          ID: name='Ds2411P__ReadId48__read' (at pp.c:19703)
          ExprList:  (at pp.c:19703)
            ID: name='id' (at pp.c:19703)
      Return:  (at pp.c:19707)
        ID: name='__nesc_result' (at pp.c:19707)
  FuncDef:  (at pp.c:19712)
    Decl: name='Msp430TimerP__0__Timer__get', quals=[], storage=['inline', 'static'] (at pp.c:19712)
      FuncDecl: quals=None (at pp.c:19712)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__0__Timer__get', quals=[] (at pp.c:19712)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:19713)
      If:  (at pp.c:19718)
        Constant: type='int', value='0' (at pp.c:19718)
        Compound:  (at pp.c:19718)
          Compound:  (at pp.c:19721)
            Decl: name='t0', quals=[], storage=[] (at pp.c:19722)
              TypeDecl: declname='t0', quals=[] (at pp.c:19722)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t1', quals=[], storage=[] (at pp.c:19723)
              TypeDecl: declname='t1', quals=[] (at pp.c:19723)
                IdentifierType: names=['uint16_t'] (at None)
              UnaryOp: op='*' (at None)
                Cast:  (at None)
                  Typename: quals=['volatile'] (at None)
                    PtrDecl: quals=[] (at pp.c:19723)
                      TypeDecl: declname=None, quals=['volatile'] (at None)
                        IdentifierType: names=['uint16_t'] (at None)
                  Constant: type='int', value='368U' (at pp.c:19723)
            DoWhile:  (at pp.c:19726)
              BinaryOp: op='!=' (at pp.c:19734)
                ID: name='t0' (at pp.c:19734)
                ID: name='t1' (at pp.c:19734)
              Compound:  (at pp.c:19726)
                Assignment: op='=' (at pp.c:19728)
                  ID: name='t0' (at pp.c:19728)
                  ID: name='t1' (at pp.c:19728)
                Assignment: op='=' (at pp.c:19730)
                  ID: name='t1' (at pp.c:19730)
                  UnaryOp: op='*' (at None)
                    Cast:  (at None)
                      Typename: quals=['volatile'] (at None)
                        PtrDecl: quals=[] (at pp.c:19730)
                          TypeDecl: declname=None, quals=['volatile'] (at None)
                            IdentifierType: names=['uint16_t'] (at None)
                      Constant: type='int', value='368U' (at pp.c:19730)
            Compound:  (at pp.c:19735)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:19736)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:19736)
                  IdentifierType: names=['int', 'unsigned'] (at None)
                ID: name='t1' (at pp.c:19738)
              Return:  (at pp.c:19741)
                ID: name='__nesc_temp' (at pp.c:19741)
        Compound:  (at pp.c:19747)
          Return:  (at pp.c:19748)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:19748)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='368U' (at pp.c:19748)
  FuncDef:  (at pp.c:19753)
    Decl: name='Msp430CounterC__1__Msp430Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:19753)
      FuncDecl: quals=None (at pp.c:19753)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__1__Msp430Timer__get', quals=[] (at pp.c:19753)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:19753)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19755)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19755)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19759)
        ID: name='__nesc_result' (at pp.c:19759)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__0__Timer__get' (at pp.c:19759)
      Return:  (at pp.c:19763)
        ID: name='__nesc_result' (at pp.c:19763)
  FuncDef:  (at pp.c:19768)
    Decl: name='Msp430CounterC__1__Counter__get', quals=[], storage=['inline', 'static'] (at pp.c:19768)
      FuncDecl: quals=None (at pp.c:19768)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__1__Counter__get', quals=[] (at pp.c:19768)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:19769)
      Return:  (at pp.c:19770)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__1__Msp430Timer__get' (at pp.c:19770)
  FuncDef:  (at pp.c:19774)
    Decl: name='BusyWaitCounterC__0__Counter__get', quals=[], storage=['static', 'inline'] (at pp.c:19774)
      FuncDecl: quals=None (at pp.c:19774)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='BusyWaitCounterC__0__Counter__get', quals=[] (at pp.c:19774)
          IdentifierType: names=['BusyWaitCounterC__0__Counter__size_type'] (at None)
    Compound:  (at pp.c:19774)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19776)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19776)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19780)
        ID: name='__nesc_result' (at pp.c:19780)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__1__Counter__get' (at pp.c:19780)
      Return:  (at pp.c:19784)
        ID: name='__nesc_result' (at pp.c:19784)
  FuncDef:  (at pp.c:19789)
    Decl: name='CC2420SpiP__Resource__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:19789)
      FuncDecl: quals=None (at pp.c:19789)
        ParamList:  (at pp.c:19789)
          Decl: name='id', quals=[], storage=[] (at pp.c:19789)
            TypeDecl: declname='id', quals=[] (at pp.c:19789)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__isOwner', quals=[] (at pp.c:19789)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:19791)
      Compound:  (at pp.c:19794)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:19795)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:19795)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='==' (at pp.c:19797)
            ID: name='CC2420SpiP__m_holder' (at pp.c:19797)
            ID: name='id' (at pp.c:19797)
        Return:  (at pp.c:19800)
          ID: name='__nesc_temp' (at pp.c:19800)
  FuncDef:  (at pp.c:19805)
    Decl: name='CC2420ReceiveP__SpiResource__isOwner', quals=[], storage=['static', 'inline'] (at pp.c:19805)
      FuncDecl: quals=None (at pp.c:19805)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SpiResource__isOwner', quals=[] (at pp.c:19805)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19805)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19807)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19807)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19811)
        ID: name='__nesc_result' (at pp.c:19811)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__isOwner' (at pp.c:19811)
          ExprList:  (at pp.c:19811)
            ID: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:19811)
      Return:  (at pp.c:19815)
        ID: name='__nesc_result' (at pp.c:19815)
  FuncDef:  (at pp.c:19820)
    Decl: name='CC2420ReceiveP__SpiResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:19820)
      FuncDecl: quals=None (at pp.c:19820)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SpiResource__immediateRequest', quals=[] (at pp.c:19820)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19820)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19822)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19822)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19826)
        ID: name='__nesc_result' (at pp.c:19826)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__immediateRequest' (at pp.c:19826)
          ExprList:  (at pp.c:19826)
            ID: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:19826)
      Return:  (at pp.c:19830)
        ID: name='__nesc_result' (at pp.c:19830)
  FuncDef:  (at pp.c:19835)
    Decl: name='CC2420ReceiveP__SpiResource__request', quals=[], storage=['static', 'inline'] (at pp.c:19835)
      FuncDecl: quals=None (at pp.c:19835)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SpiResource__request', quals=[] (at pp.c:19835)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19835)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19837)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19837)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19841)
        ID: name='__nesc_result' (at pp.c:19841)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__request' (at pp.c:19841)
          ExprList:  (at pp.c:19841)
            ID: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:19841)
      Return:  (at pp.c:19845)
        ID: name='__nesc_result' (at pp.c:19845)
  FuncDef:  (at pp.c:19850)
    Decl: name='CC2420SpiP__grant__postTask', quals=[], storage=['static', 'inline'] (at pp.c:19850)
      FuncDecl: quals=None (at pp.c:19850)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__grant__postTask', quals=[] (at pp.c:19850)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19850)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19852)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19852)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19856)
        ID: name='__nesc_result' (at pp.c:19856)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:19856)
          ExprList:  (at pp.c:19856)
            ID: name='CC2420SpiP__grant' (at pp.c:19856)
      Return:  (at pp.c:19860)
        ID: name='__nesc_result' (at pp.c:19860)
  FuncDef:  (at pp.c:19865)
    Decl: name='CC2420SpiP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:19865)
      FuncDecl: quals=None (at pp.c:19865)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiResource__granted', quals=[] (at pp.c:19865)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19867)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__grant__postTask' (at pp.c:19868)
  FuncDef:  (at pp.c:19872)
    Decl: name='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:19872)
      FuncDecl: quals=None (at pp.c:19872)
        ParamList:  (at pp.c:19872)
          Decl: name='id', quals=[], storage=[] (at pp.c:19872)
            TypeDecl: declname='id', quals=[] (at pp.c:19872)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[] (at pp.c:19872)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19874)
  FuncDef:  (at pp.c:19878)
    Decl: name='Msp430SpiNoDmaP__0__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:19878)
      FuncDecl: quals=None (at pp.c:19878)
        ParamList:  (at pp.c:19878)
          Decl: name='arg_0x1022a92f0', quals=[], storage=[] (at pp.c:19878)
            TypeDecl: declname='arg_0x1022a92f0', quals=[] (at pp.c:19878)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__granted', quals=[] (at pp.c:19878)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19878)
      Switch:  (at pp.c:19880)
        ID: name='arg_0x1022a92f0' (at pp.c:19880)
        Compound:  (at pp.c:19880)
          Case:  (at pp.c:19882)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:19882)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__SpiResource__granted' (at pp.c:19884)
          Break:  (at pp.c:19886)
          Default:  (at pp.c:19888)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__Resource__default__granted' (at pp.c:19890)
              ExprList:  (at pp.c:19890)
                ID: name='arg_0x1022a92f0' (at pp.c:19890)
          Break:  (at pp.c:19892)
  FuncDef:  (at pp.c:19899)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:19899)
      FuncDecl: quals=None (at pp.c:19899)
        ParamList:  (at pp.c:19899)
          Decl: name='id', quals=[], storage=[] (at pp.c:19899)
            TypeDecl: declname='id', quals=[] (at pp.c:19899)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[] (at pp.c:19899)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19901)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Resource__granted' (at pp.c:19902)
        ExprList:  (at pp.c:19902)
          ID: name='id' (at pp.c:19902)
  FuncDef:  (at pp.c:19906)
    Decl: name='ArbiterP__1__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:19906)
      FuncDecl: quals=None (at pp.c:19906)
        ParamList:  (at pp.c:19906)
          Decl: name='id', quals=[], storage=[] (at pp.c:19906)
            TypeDecl: declname='id', quals=[] (at pp.c:19906)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__default__granted', quals=[] (at pp.c:19906)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19908)
  FuncDef:  (at pp.c:19912)
    Decl: name='ArbiterP__1__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:19912)
      FuncDecl: quals=None (at pp.c:19912)
        ParamList:  (at pp.c:19912)
          Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:19912)
            TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:19912)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__granted', quals=[] (at pp.c:19912)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19912)
      Switch:  (at pp.c:19914)
        ID: name='arg_0x101d81658' (at pp.c:19914)
        Compound:  (at pp.c:19914)
          Case:  (at pp.c:19916)
            ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:19916)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__UsartResource__granted' (at pp.c:19918)
              ExprList:  (at pp.c:19918)
                ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:19918)
          Break:  (at pp.c:19920)
          Default:  (at pp.c:19922)
            FuncCall:  (at None)
              ID: name='ArbiterP__1__Resource__default__granted' (at pp.c:19924)
              ExprList:  (at pp.c:19924)
                ID: name='arg_0x101d81658' (at pp.c:19924)
          Break:  (at pp.c:19926)
  FuncDef:  (at pp.c:19933)
    Decl: name='ArbiterP__1__grantedTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:19933)
      FuncDecl: quals=None (at pp.c:19933)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__grantedTask__runTask', quals=[] (at pp.c:19933)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19935)
      Compound:  (at pp.c:19936)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19936)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19936)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19936)
        Compound:  (at pp.c:19938)
          Assignment: op='=' (at pp.c:19939)
            ID: name='ArbiterP__1__resId' (at pp.c:19939)
            ID: name='ArbiterP__1__reqResId' (at pp.c:19939)
          Assignment: op='=' (at pp.c:19940)
            ID: name='ArbiterP__1__state' (at pp.c:19940)
            ID: name='ArbiterP__1__RES_BUSY' (at pp.c:19940)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19943)
          ExprList:  (at pp.c:19943)
            ID: name='__nesc_atomic' (at pp.c:19943)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceConfigure__configure' (at pp.c:19944)
        ExprList:  (at pp.c:19944)
          ID: name='ArbiterP__1__resId' (at pp.c:19944)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__Resource__granted' (at pp.c:19945)
        ExprList:  (at pp.c:19945)
          ID: name='ArbiterP__1__resId' (at pp.c:19945)
  FuncDef:  (at pp.c:19949)
    Decl: name='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:19949)
      FuncDecl: quals=None (at pp.c:19949)
        ParamList:  (at pp.c:19949)
          Decl: name='id', quals=[], storage=[] (at pp.c:19949)
            TypeDecl: declname='id', quals=[] (at pp.c:19949)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:19949)
            PtrDecl: quals=[] (at pp.c:19949)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:19949)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:19949)
            PtrDecl: quals=[] (at pp.c:19949)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:19949)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:19949)
            TypeDecl: declname='len', quals=[] (at pp.c:19949)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19949)
            TypeDecl: declname='error', quals=[] (at pp.c:19949)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[] (at pp.c:19949)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19951)
  FuncDef:  (at pp.c:19955)
    Decl: name='Msp430SpiNoDmaP__0__SpiPacket__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:19955)
      FuncDecl: quals=None (at pp.c:19955)
        ParamList:  (at pp.c:19955)
          Decl: name='arg_0x1022a52f0', quals=[], storage=[] (at pp.c:19955)
            TypeDecl: declname='arg_0x1022a52f0', quals=[] (at pp.c:19955)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='txBuf', quals=[], storage=[] (at pp.c:19955)
            PtrDecl: quals=[] (at pp.c:19955)
              TypeDecl: declname='txBuf', quals=[] (at pp.c:19955)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rxBuf', quals=[], storage=[] (at pp.c:19955)
            PtrDecl: quals=[] (at pp.c:19955)
              TypeDecl: declname='rxBuf', quals=[] (at pp.c:19955)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:19955)
            TypeDecl: declname='len', quals=[] (at pp.c:19955)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19955)
            TypeDecl: declname='error', quals=[] (at pp.c:19955)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__sendDone', quals=[] (at pp.c:19955)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19955)
      Switch:  (at pp.c:19957)
        ID: name='arg_0x1022a52f0' (at pp.c:19957)
        Compound:  (at pp.c:19957)
          Case:  (at pp.c:19959)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:19959)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__SpiPacket__sendDone' (at pp.c:19961)
              ExprList:  (at pp.c:19961)
                ID: name='txBuf' (at pp.c:19961)
                ID: name='rxBuf' (at pp.c:19961)
                ID: name='len' (at pp.c:19961)
                ID: name='error' (at pp.c:19961)
          Break:  (at pp.c:19963)
          Default:  (at pp.c:19965)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone' (at pp.c:19967)
              ExprList:  (at pp.c:19967)
                ID: name='arg_0x1022a52f0' (at pp.c:19967)
                ID: name='txBuf' (at pp.c:19967)
                ID: name='rxBuf' (at pp.c:19967)
                ID: name='len' (at pp.c:19967)
                ID: name='error' (at pp.c:19967)
          Break:  (at pp.c:19969)
  FuncDef:  (at pp.c:19976)
    Decl: name='Msp430SpiNoDmaP__0__signalDone', quals=[], storage=['inline', 'static'] (at pp.c:19976)
      FuncDecl: quals=None (at pp.c:19976)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone', quals=[] (at pp.c:19976)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19978)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__SpiPacket__sendDone' (at pp.c:19979)
        ExprList:  (at pp.c:19979)
          ID: name='Msp430SpiNoDmaP__0__m_client' (at pp.c:19979)
          ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:19979)
          ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:19979)
          ID: name='Msp430SpiNoDmaP__0__m_len' (at pp.c:19979)
          ID: name='SUCCESS' (at pp.c:19980)
  FuncDef:  (at pp.c:19984)
    Decl: name='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:19984)
      FuncDecl: quals=None (at pp.c:19984)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[] (at pp.c:19984)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19986)
      Compound:  (at pp.c:19987)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19987)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19987)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19987)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__signalDone' (at pp.c:19989)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19991)
          ExprList:  (at pp.c:19991)
            ID: name='__nesc_atomic' (at pp.c:19991)
  FuncDef:  (at pp.c:19995)
    Decl: name='CC2420TransmitP__TXFIFO__readDone', quals=[], storage=['inline', 'static'] (at pp.c:19995)
      FuncDecl: quals=None (at pp.c:19995)
        ParamList:  (at pp.c:19995)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:19995)
            PtrDecl: quals=[] (at pp.c:19995)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:19995)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_len', quals=[], storage=[] (at pp.c:19995)
            TypeDecl: declname='tx_len', quals=[] (at pp.c:19995)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19996)
            TypeDecl: declname='error', quals=[] (at pp.c:19996)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__TXFIFO__readDone', quals=[] (at pp.c:19995)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19998)
  FuncDef:  (at pp.c:20002)
    Decl: name='CC2420ReceiveP__SpiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:20002)
      FuncDecl: quals=None (at pp.c:20002)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SpiResource__release', quals=[] (at pp.c:20002)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20002)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20004)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20004)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20008)
        ID: name='__nesc_result' (at pp.c:20008)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__release' (at pp.c:20008)
          ExprList:  (at pp.c:20008)
            ID: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:20008)
      Return:  (at pp.c:20012)
        ID: name='__nesc_result' (at pp.c:20012)
  FuncDef:  (at pp.c:20017)
    Decl: name='CC2420ReceiveP__CSN__set', quals=[], storage=['static', 'inline'] (at pp.c:20017)
      FuncDecl: quals=None (at pp.c:20017)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CSN__set', quals=[] (at pp.c:20017)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20017)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__GeneralIO__set' (at pp.c:20019)
  FuncDef:  (at pp.c:20024)
    Decl: name='CC2420ReceiveP__receiveDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:20024)
      FuncDecl: quals=None (at pp.c:20024)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__receiveDone_task__postTask', quals=[] (at pp.c:20024)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20024)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20026)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20026)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20030)
        ID: name='__nesc_result' (at pp.c:20030)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:20030)
          ExprList:  (at pp.c:20030)
            ID: name='CC2420ReceiveP__receiveDone_task' (at pp.c:20030)
      Return:  (at pp.c:20034)
        ID: name='__nesc_result' (at pp.c:20034)
  FuncDef:  (at pp.c:20039)
    Decl: name='CC2420TransmitP__CC2420PacketBody__getMetadata', quals=[], storage=['static', 'inline'] (at pp.c:20039)
      FuncDecl: quals=None (at pp.c:20039)
        ParamList:  (at pp.c:20039)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20039)
            PtrDecl: quals=[] (at pp.c:20039)
              TypeDecl: declname='msg', quals=[] (at pp.c:20039)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:20039)
          TypeDecl: declname='CC2420TransmitP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:20039)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:20039)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20041)
        PtrDecl: quals=[] (at pp.c:20041)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20041)
            Struct: name='cc2420_metadata_t', packed=False (at pp.c:20041)
      Assignment: op='=' (at pp.c:20045)
        ID: name='__nesc_result' (at pp.c:20045)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:20045)
          ExprList:  (at pp.c:20045)
            ID: name='msg' (at pp.c:20045)
      Return:  (at pp.c:20049)
        ID: name='__nesc_result' (at pp.c:20049)
  FuncDef:  (at pp.c:20054)
    Decl: name='CC2420TransmitP__CC2420Receive__receive', quals=[], storage=['inline', 'static'] (at pp.c:20054)
      FuncDecl: quals=None (at pp.c:20054)
        ParamList:  (at pp.c:20054)
          Decl: name='type', quals=[], storage=[] (at pp.c:20054)
            TypeDecl: declname='type', quals=[] (at pp.c:20054)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='ack_msg', quals=[], storage=[] (at pp.c:20054)
            PtrDecl: quals=[] (at pp.c:20054)
              TypeDecl: declname='ack_msg', quals=[] (at pp.c:20054)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__CC2420Receive__receive', quals=[] (at pp.c:20054)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20056)
      Decl: name='ack_header', quals=[], storage=[] (at pp.c:20057)
        PtrDecl: quals=[] (at pp.c:20057)
          TypeDecl: declname='ack_header', quals=[] (at pp.c:20057)
            IdentifierType: names=['cc2420_header_t'] (at None)
      Decl: name='msg_header', quals=[], storage=[] (at pp.c:20058)
        PtrDecl: quals=[] (at pp.c:20058)
          TypeDecl: declname='msg_header', quals=[] (at pp.c:20058)
            IdentifierType: names=['cc2420_header_t'] (at None)
      Decl: name='msg_metadata', quals=[], storage=[] (at pp.c:20059)
        PtrDecl: quals=[] (at pp.c:20059)
          TypeDecl: declname='msg_metadata', quals=[] (at pp.c:20059)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
      Decl: name='ack_buf', quals=[], storage=[] (at pp.c:20060)
        PtrDecl: quals=[] (at pp.c:20060)
          TypeDecl: declname='ack_buf', quals=[] (at pp.c:20060)
            IdentifierType: names=['uint8_t'] (at None)
      Decl: name='length', quals=[], storage=[] (at pp.c:20061)
        TypeDecl: declname='length', quals=[] (at pp.c:20061)
          IdentifierType: names=['uint8_t'] (at None)
      If:  (at pp.c:20063)
        BinaryOp: op='&&' (at pp.c:20063)
          BinaryOp: op='==' (at pp.c:20063)
            ID: name='type' (at pp.c:20063)
            ID: name='IEEE154_TYPE_ACK' (at pp.c:20063)
          ID: name='CC2420TransmitP__m_msg' (at pp.c:20063)
        Compound:  (at pp.c:20063)
          Assignment: op='=' (at pp.c:20064)
            ID: name='ack_header' (at pp.c:20064)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CC2420PacketBody__getHeader' (at pp.c:20064)
              ExprList:  (at pp.c:20064)
                ID: name='ack_msg' (at pp.c:20064)
          Assignment: op='=' (at pp.c:20065)
            ID: name='msg_header' (at pp.c:20065)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CC2420PacketBody__getHeader' (at pp.c:20065)
              ExprList:  (at pp.c:20065)
                ID: name='CC2420TransmitP__m_msg' (at pp.c:20065)
          If:  (at pp.c:20067)
            BinaryOp: op='&&' (at pp.c:20067)
              BinaryOp: op='==' (at pp.c:20067)
                ID: name='CC2420TransmitP__m_state' (at pp.c:20067)
                ID: name='CC2420TransmitP__S_ACK_WAIT' (at pp.c:20067)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint8' (at pp.c:20067)
                  ExprList:  (at pp.c:20067)
                    StructRef: type='.' (at pp.c:20067)
                      StructRef: type='->' (at pp.c:20067)
                        ID: name='msg_header' (at pp.c:20067)
                        ID: name='dsn' (at pp.c:20067)
                      ID: name='nxdata' (at pp.c:20067)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint8' (at pp.c:20067)
                  ExprList:  (at pp.c:20067)
                    StructRef: type='.' (at pp.c:20067)
                      StructRef: type='->' (at pp.c:20067)
                        ID: name='ack_header' (at pp.c:20067)
                        ID: name='dsn' (at pp.c:20067)
                      ID: name='nxdata' (at pp.c:20067)
            Compound:  (at pp.c:20067)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__BackoffTimer__stop' (at pp.c:20068)
              Assignment: op='=' (at pp.c:20070)
                ID: name='msg_metadata' (at pp.c:20070)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CC2420PacketBody__getMetadata' (at pp.c:20070)
                  ExprList:  (at pp.c:20070)
                    ID: name='CC2420TransmitP__m_msg' (at pp.c:20070)
              Assignment: op='=' (at pp.c:20071)
                ID: name='ack_buf' (at pp.c:20071)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:20071)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['uint8_t'] (at None)
                  ID: name='ack_header' (at pp.c:20071)
              Assignment: op='=' (at pp.c:20072)
                ID: name='length' (at pp.c:20072)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint8' (at pp.c:20072)
                  ExprList:  (at pp.c:20072)
                    StructRef: type='.' (at pp.c:20072)
                      StructRef: type='->' (at pp.c:20072)
                        ID: name='ack_header' (at pp.c:20072)
                        ID: name='length' (at pp.c:20072)
                      ID: name='nxdata' (at pp.c:20072)
              FuncCall:  (at None)
                ID: name='__nesc_hton_int8' (at pp.c:20074)
                ExprList:  (at pp.c:20074)
                  StructRef: type='.' (at pp.c:20074)
                    StructRef: type='->' (at pp.c:20074)
                      ID: name='msg_metadata' (at pp.c:20074)
                      ID: name='ack' (at pp.c:20074)
                    ID: name='nxdata' (at pp.c:20074)
                  ID: name='TRUE' (at pp.c:20074)
              FuncCall:  (at None)
                ID: name='__nesc_hton_uint8' (at pp.c:20075)
                ExprList:  (at pp.c:20075)
                  StructRef: type='.' (at pp.c:20075)
                    StructRef: type='->' (at pp.c:20075)
                      ID: name='msg_metadata' (at pp.c:20075)
                      ID: name='rssi' (at pp.c:20075)
                    ID: name='nxdata' (at pp.c:20075)
                  ArrayRef:  (at pp.c:20075)
                    ID: name='ack_buf' (at pp.c:20075)
                    BinaryOp: op='-' (at pp.c:20075)
                      ID: name='length' (at pp.c:20075)
                      Constant: type='int', value='1' (at pp.c:20075)
              FuncCall:  (at None)
                ID: name='__nesc_hton_uint8' (at pp.c:20076)
                ExprList:  (at pp.c:20076)
                  StructRef: type='.' (at pp.c:20076)
                    StructRef: type='->' (at pp.c:20076)
                      ID: name='msg_metadata' (at pp.c:20076)
                      ID: name='lqi' (at pp.c:20076)
                    ID: name='nxdata' (at pp.c:20076)
                  BinaryOp: op='&' (at pp.c:20076)
                    ArrayRef:  (at pp.c:20076)
                      ID: name='ack_buf' (at pp.c:20076)
                      ID: name='length' (at pp.c:20076)
                    Constant: type='int', value='0x7f' (at pp.c:20076)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__signalDone' (at pp.c:20077)
                ExprList:  (at pp.c:20077)
                  ID: name='SUCCESS' (at pp.c:20077)
  FuncDef:  (at pp.c:20083)
    Decl: name='CC2420ReceiveP__CC2420Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:20083)
      FuncDecl: quals=None (at pp.c:20083)
        ParamList:  (at pp.c:20083)
          Decl: name='type', quals=[], storage=[] (at pp.c:20083)
            TypeDecl: declname='type', quals=[] (at pp.c:20083)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='message', quals=[], storage=[] (at pp.c:20083)
            PtrDecl: quals=[] (at pp.c:20083)
              TypeDecl: declname='message', quals=[] (at pp.c:20083)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Receive__receive', quals=[] (at pp.c:20083)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20083)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CC2420Receive__receive' (at pp.c:20085)
        ExprList:  (at pp.c:20085)
          ID: name='type' (at pp.c:20085)
          ID: name='message' (at pp.c:20085)
  FuncDef:  (at pp.c:20090)
    Decl: name='CC2420ReceiveP__PacketTimeStamp__clear', quals=[], storage=['static', 'inline'] (at pp.c:20090)
      FuncDecl: quals=None (at pp.c:20090)
        ParamList:  (at pp.c:20090)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20090)
            PtrDecl: quals=[] (at pp.c:20090)
              TypeDecl: declname='msg', quals=[] (at pp.c:20090)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__clear', quals=[] (at pp.c:20090)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20090)
      FuncCall:  (at None)
        ID: name='CC2420PacketP__PacketTimeStamp32khz__clear' (at pp.c:20092)
        ExprList:  (at pp.c:20092)
          ID: name='msg' (at pp.c:20092)
  FuncDef:  (at pp.c:20104)
    Decl: name='CC2420ReceiveP__PacketTimeStamp__set', quals=[], storage=['static', 'inline'] (at pp.c:20104)
      FuncDecl: quals=None (at pp.c:20104)
        ParamList:  (at pp.c:20104)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20104)
            PtrDecl: quals=[] (at pp.c:20104)
              TypeDecl: declname='msg', quals=[] (at pp.c:20104)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:20104)
            TypeDecl: declname='value', quals=[] (at pp.c:20104)
              IdentifierType: names=['CC2420ReceiveP__PacketTimeStamp__size_type'] (at None)
        TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__set', quals=[] (at pp.c:20104)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20104)
      FuncCall:  (at None)
        ID: name='CC2420PacketP__PacketTimeStamp32khz__set' (at pp.c:20106)
        ExprList:  (at pp.c:20106)
          ID: name='msg' (at pp.c:20106)
          ID: name='value' (at pp.c:20106)
  FuncDef:  (at pp.c:20111)
    Decl: name='HplMsp430GeneralIOP__0__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:20111)
      FuncDecl: quals=None (at pp.c:20111)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__0__IO__getRaw', quals=[] (at pp.c:20111)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:20113)
      Return:  (at pp.c:20115)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:20115)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='32U' (at pp.c:20115)
          BinaryOp: op='<<' (at pp.c:20115)
            Constant: type='int', value='0x01' (at pp.c:20115)
            Constant: type='int', value='0' (at pp.c:20115)
  FuncDef:  (at pp.c:20119)
    Decl: name='HplMsp430GeneralIOP__0__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:20119)
      FuncDecl: quals=None (at pp.c:20119)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__0__IO__get', quals=[] (at pp.c:20119)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20121)
      Return:  (at pp.c:20123)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='HplMsp430GeneralIOP__0__IO__getRaw' (at pp.c:20123)
          Constant: type='int', value='0' (at pp.c:20123)
  FuncDef:  (at pp.c:20127)
    Decl: name='Msp430GpioC__6__HplGeneralIO__get', quals=[], storage=['static', 'inline'] (at pp.c:20127)
      FuncDecl: quals=None (at pp.c:20127)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__6__HplGeneralIO__get', quals=[] (at pp.c:20127)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20127)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20129)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20129)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20133)
        ID: name='__nesc_result' (at pp.c:20133)
        FuncCall:  (at None)
          ID: name='HplMsp430GeneralIOP__0__IO__get' (at pp.c:20133)
      Return:  (at pp.c:20137)
        ID: name='__nesc_result' (at pp.c:20137)
  FuncDef:  (at pp.c:20142)
    Decl: name='Msp430GpioC__6__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:20142)
      FuncDecl: quals=None (at pp.c:20142)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__6__GeneralIO__get', quals=[] (at pp.c:20142)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20144)
      Return:  (at pp.c:20146)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__6__HplGeneralIO__get' (at pp.c:20146)
  FuncDef:  (at pp.c:20150)
    Decl: name='CC2420ReceiveP__FIFOP__get', quals=[], storage=['static', 'inline'] (at pp.c:20150)
      FuncDecl: quals=None (at pp.c:20150)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__FIFOP__get', quals=[] (at pp.c:20150)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20150)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20152)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20152)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20156)
        ID: name='__nesc_result' (at pp.c:20156)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__6__GeneralIO__get' (at pp.c:20156)
      Return:  (at pp.c:20160)
        ID: name='__nesc_result' (at pp.c:20160)
  FuncDef:  (at pp.c:20165)
    Decl: name='HplMsp430GeneralIOP__3__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:20165)
      FuncDecl: quals=None (at pp.c:20165)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__3__IO__getRaw', quals=[] (at pp.c:20165)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:20167)
      Return:  (at pp.c:20169)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:20169)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='32U' (at pp.c:20169)
          BinaryOp: op='<<' (at pp.c:20169)
            Constant: type='int', value='0x01' (at pp.c:20169)
            Constant: type='int', value='3' (at pp.c:20169)
  FuncDef:  (at pp.c:20173)
    Decl: name='HplMsp430GeneralIOP__3__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:20173)
      FuncDecl: quals=None (at pp.c:20173)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__3__IO__get', quals=[] (at pp.c:20173)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20175)
      Return:  (at pp.c:20177)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='HplMsp430GeneralIOP__3__IO__getRaw' (at pp.c:20177)
          Constant: type='int', value='0' (at pp.c:20177)
  FuncDef:  (at pp.c:20181)
    Decl: name='Msp430GpioC__5__HplGeneralIO__get', quals=[], storage=['static', 'inline'] (at pp.c:20181)
      FuncDecl: quals=None (at pp.c:20181)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__5__HplGeneralIO__get', quals=[] (at pp.c:20181)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20181)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20183)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20183)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20187)
        ID: name='__nesc_result' (at pp.c:20187)
        FuncCall:  (at None)
          ID: name='HplMsp430GeneralIOP__3__IO__get' (at pp.c:20187)
      Return:  (at pp.c:20191)
        ID: name='__nesc_result' (at pp.c:20191)
  FuncDef:  (at pp.c:20196)
    Decl: name='Msp430GpioC__5__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:20196)
      FuncDecl: quals=None (at pp.c:20196)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__5__GeneralIO__get', quals=[] (at pp.c:20196)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20198)
      Return:  (at pp.c:20200)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__5__HplGeneralIO__get' (at pp.c:20200)
  FuncDef:  (at pp.c:20204)
    Decl: name='CC2420ReceiveP__FIFO__get', quals=[], storage=['static', 'inline'] (at pp.c:20204)
      FuncDecl: quals=None (at pp.c:20204)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__FIFO__get', quals=[] (at pp.c:20204)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20204)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20206)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20206)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20210)
        ID: name='__nesc_result' (at pp.c:20210)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__5__GeneralIO__get' (at pp.c:20210)
      Return:  (at pp.c:20214)
        ID: name='__nesc_result' (at pp.c:20214)
  FuncDef:  (at pp.c:20219)
    Decl: name='CC2420SpiP__Fifo__continueRead', quals=[], storage=['inline', 'static'] (at pp.c:20219)
      FuncDecl: quals=None (at pp.c:20219)
        ParamList:  (at pp.c:20219)
          Decl: name='addr', quals=[], storage=[] (at pp.c:20219)
            TypeDecl: declname='addr', quals=[] (at pp.c:20219)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:20219)
            PtrDecl: quals=[] (at pp.c:20219)
              TypeDecl: declname='data', quals=[] (at pp.c:20219)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20220)
            TypeDecl: declname='len', quals=[] (at pp.c:20220)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__continueRead', quals=[] (at pp.c:20219)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20222)
      Return:  (at pp.c:20223)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiPacket__send' (at pp.c:20223)
          ExprList:  (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:20223)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['void'] (at None)
              Constant: type='int', value='0' (at pp.c:20223)
            ID: name='data' (at pp.c:20223)
            ID: name='len' (at pp.c:20223)
  FuncDef:  (at pp.c:20227)
    Decl: name='CC2420ReceiveP__RXFIFO__continueRead', quals=[], storage=['static', 'inline'] (at pp.c:20227)
      FuncDecl: quals=None (at pp.c:20227)
        ParamList:  (at pp.c:20227)
          Decl: name='data', quals=[], storage=[] (at pp.c:20227)
            PtrDecl: quals=[] (at pp.c:20227)
              TypeDecl: declname='data', quals=[] (at pp.c:20227)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:20227)
            TypeDecl: declname='length', quals=[] (at pp.c:20227)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__RXFIFO__continueRead', quals=[] (at pp.c:20227)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20227)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20229)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20229)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20233)
        ID: name='__nesc_result' (at pp.c:20233)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Fifo__continueRead' (at pp.c:20233)
          ExprList:  (at pp.c:20233)
            ID: name='CC2420_RXFIFO' (at pp.c:20233)
            ID: name='data' (at pp.c:20233)
            ID: name='length' (at pp.c:20233)
      Return:  (at pp.c:20237)
        ID: name='__nesc_result' (at pp.c:20237)
  FuncDef:  (at pp.c:20242)
    Decl: name='CC2420ReceiveP__RXFIFO__beginRead', quals=[], storage=['static', 'inline'] (at pp.c:20242)
      FuncDecl: quals=None (at pp.c:20242)
        ParamList:  (at pp.c:20242)
          Decl: name='data', quals=[], storage=[] (at pp.c:20242)
            PtrDecl: quals=[] (at pp.c:20242)
              TypeDecl: declname='data', quals=[] (at pp.c:20242)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:20242)
            TypeDecl: declname='length', quals=[] (at pp.c:20242)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__RXFIFO__beginRead', quals=[] (at pp.c:20242)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:20242)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20244)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20244)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20248)
        ID: name='__nesc_result' (at pp.c:20248)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Fifo__beginRead' (at pp.c:20248)
          ExprList:  (at pp.c:20248)
            ID: name='CC2420_RXFIFO' (at pp.c:20248)
            ID: name='data' (at pp.c:20248)
            ID: name='length' (at pp.c:20248)
      Return:  (at pp.c:20252)
        ID: name='__nesc_result' (at pp.c:20252)
  FuncDef:  (at pp.c:20257)
    Decl: name='CC2420ReceiveP__CSN__clr', quals=[], storage=['static', 'inline'] (at pp.c:20257)
      FuncDecl: quals=None (at pp.c:20257)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CSN__clr', quals=[] (at pp.c:20257)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20257)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__GeneralIO__clr' (at pp.c:20259)
  FuncDef:  (at pp.c:20264)
    Decl: name='CC2420ReceiveP__SACK__strobe', quals=[], storage=['static', 'inline'] (at pp.c:20264)
      FuncDecl: quals=None (at pp.c:20264)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SACK__strobe', quals=[] (at pp.c:20264)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:20264)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20266)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20266)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20270)
        ID: name='__nesc_result' (at pp.c:20270)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:20270)
          ExprList:  (at pp.c:20270)
            ID: name='CC2420_SACK' (at pp.c:20270)
      Return:  (at pp.c:20274)
        ID: name='__nesc_result' (at pp.c:20274)
  FuncDef:  (at pp.c:20279)
    Decl: name='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[], storage=['inline', 'static'] (at pp.c:20279)
      FuncDecl: quals=None (at pp.c:20279)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[] (at pp.c:20279)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20281)
      Compound:  (at pp.c:20284)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:20285)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:20285)
            IdentifierType: names=['char', 'unsigned'] (at None)
          ID: name='CC2420ControlP__hwAutoAckDefault' (at pp.c:20287)
        Return:  (at pp.c:20290)
          ID: name='__nesc_temp' (at pp.c:20290)
  FuncDef:  (at pp.c:20295)
    Decl: name='CC2420ReceiveP__CC2420Config__isHwAutoAckDefault', quals=[], storage=['static', 'inline'] (at pp.c:20295)
      FuncDecl: quals=None (at pp.c:20295)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__isHwAutoAckDefault', quals=[] (at pp.c:20295)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20295)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20297)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20297)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20301)
        ID: name='__nesc_result' (at pp.c:20301)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__isHwAutoAckDefault' (at pp.c:20301)
      Return:  (at pp.c:20305)
        ID: name='__nesc_result' (at pp.c:20305)
  FuncDef:  (at pp.c:20310)
    Decl: name='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[], storage=['inline', 'static'] (at pp.c:20310)
      FuncDecl: quals=None (at pp.c:20310)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[] (at pp.c:20310)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20312)
      Compound:  (at pp.c:20315)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:20316)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:20316)
            IdentifierType: names=['char', 'unsigned'] (at None)
          ID: name='CC2420ControlP__autoAckEnabled' (at pp.c:20318)
        Return:  (at pp.c:20321)
          ID: name='__nesc_temp' (at pp.c:20321)
  FuncDef:  (at pp.c:20326)
    Decl: name='CC2420ReceiveP__CC2420Config__isAutoAckEnabled', quals=[], storage=['static', 'inline'] (at pp.c:20326)
      FuncDecl: quals=None (at pp.c:20326)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__isAutoAckEnabled', quals=[] (at pp.c:20326)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:20326)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20328)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20328)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20332)
        ID: name='__nesc_result' (at pp.c:20332)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__isAutoAckEnabled' (at pp.c:20332)
      Return:  (at pp.c:20336)
        ID: name='__nesc_result' (at pp.c:20336)
  FuncDef:  (at pp.c:20341)
    Decl: name='CC2420ReceiveP__RXFIFO__readDone', quals=[], storage=['inline', 'static'] (at pp.c:20341)
      FuncDecl: quals=None (at pp.c:20341)
        ParamList:  (at pp.c:20341)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:20341)
            PtrDecl: quals=[] (at pp.c:20341)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:20341)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_len', quals=[], storage=[] (at pp.c:20341)
            TypeDecl: declname='rx_len', quals=[] (at pp.c:20341)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:20342)
            TypeDecl: declname='error', quals=[] (at pp.c:20342)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__RXFIFO__readDone', quals=[] (at pp.c:20341)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20344)
      Decl: name='header', quals=[], storage=[] (at pp.c:20345)
        PtrDecl: quals=[] (at pp.c:20345)
          TypeDecl: declname='header', quals=[] (at pp.c:20345)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__CC2420PacketBody__getHeader' (at pp.c:20345)
          ExprList:  (at pp.c:20345)
            ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:20345)
      Decl: name='tmpLen', quals=[], storage=[] (at pp.c:20346)
        TypeDecl: declname='tmpLen', quals=[] (at pp.c:20346)
          IdentifierType: names=['uint8_t'] (at None)
        BinaryOp: op='-' (at pp.c:20346)
          UnaryOp: op='sizeof' (at pp.c:20346)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['message_t'] (at None)
          BinaryOp: op='-' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['size_t'] (at None)
              UnaryOp: op='&' (at None)
                StructRef: type='->' (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:20346)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['message_t'] (at None)
                    Constant: type='int', value='0' (at pp.c:20346)
                  ID: name='data' (at pp.c:20346)
            UnaryOp: op='sizeof' (at pp.c:20346)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['cc2420_header_t'] (at None)
      Decl: name='buf', quals=[], storage=[] (at pp.c:20347)
        PtrDecl: quals=[] (at pp.c:20347)
          TypeDecl: declname='buf', quals=[] (at pp.c:20347)
            IdentifierType: names=['uint8_t'] (at None)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:20347)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
          ID: name='header' (at pp.c:20347)
      Assignment: op='=' (at pp.c:20350)
        ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20350)
        ArrayRef:  (at pp.c:20350)
          ID: name='buf' (at pp.c:20350)
          Constant: type='int', value='0' (at pp.c:20350)
      Switch:  (at pp.c:20352)
        ID: name='CC2420ReceiveP__m_state' (at pp.c:20352)
        Compound:  (at pp.c:20352)
          Case:  (at pp.c:20354)
            ID: name='CC2420ReceiveP__S_RX_LENGTH' (at pp.c:20354)
            Assignment: op='=' (at pp.c:20355)
              ID: name='CC2420ReceiveP__m_state' (at pp.c:20355)
              ID: name='CC2420ReceiveP__S_RX_FCF' (at pp.c:20355)
          If:  (at pp.c:20359)
            BinaryOp: op='>' (at pp.c:20359)
              BinaryOp: op='+' (at pp.c:20359)
                ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20359)
                Constant: type='int', value='1' (at pp.c:20359)
              ID: name='CC2420ReceiveP__m_bytes_left' (at pp.c:20359)
            Compound:  (at pp.c:20363)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__flush' (at pp.c:20365)
            Compound:  (at pp.c:20367)
              If:  (at pp.c:20368)
                BinaryOp: op='&&' (at None)
                  UnaryOp: op='!' (at None)
                    FuncCall:  (at None)
                      ID: name='CC2420ReceiveP__FIFO__get' (at pp.c:20368)
                  UnaryOp: op='!' (at None)
                    FuncCall:  (at None)
                      ID: name='CC2420ReceiveP__FIFOP__get' (at pp.c:20368)
                Compound:  (at pp.c:20368)
                  Assignment: op='-=' (at pp.c:20369)
                    ID: name='CC2420ReceiveP__m_bytes_left' (at pp.c:20369)
                    BinaryOp: op='+' (at pp.c:20369)
                      ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20369)
                      Constant: type='int', value='1' (at pp.c:20369)
              If:  (at pp.c:20372)
                BinaryOp: op='<=' (at pp.c:20372)
                  ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20372)
                  ID: name='MAC_PACKET_SIZE' (at pp.c:20372)
                Compound:  (at pp.c:20372)
                  If:  (at pp.c:20373)
                    BinaryOp: op='>' (at pp.c:20373)
                      ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20373)
                      Constant: type='int', value='0' (at pp.c:20373)
                    Compound:  (at pp.c:20373)
                      If:  (at pp.c:20374)
                        BinaryOp: op='>' (at pp.c:20374)
                          ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20374)
                          ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:20374)
                        Compound:  (at pp.c:20374)
                          FuncCall:  (at None)
                            ID: name='CC2420ReceiveP__RXFIFO__continueRead' (at pp.c:20376)
                            ExprList:  (at pp.c:20376)
                              BinaryOp: op='+' (at pp.c:20376)
                                ID: name='buf' (at pp.c:20376)
                                Constant: type='int', value='1' (at pp.c:20376)
                              ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:20376)
                        Compound:  (at pp.c:20378)
                          Assignment: op='=' (at pp.c:20380)
                            ID: name='CC2420ReceiveP__m_state' (at pp.c:20380)
                            ID: name='CC2420ReceiveP__S_RX_PAYLOAD' (at pp.c:20380)
                          FuncCall:  (at None)
                            ID: name='CC2420ReceiveP__RXFIFO__continueRead' (at pp.c:20381)
                            ExprList:  (at pp.c:20381)
                              BinaryOp: op='+' (at pp.c:20381)
                                ID: name='buf' (at pp.c:20381)
                                Constant: type='int', value='1' (at pp.c:20381)
                              ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20381)
                    Compound:  (at pp.c:20384)
                      Assignment: op='=' (at pp.c:20386)
                        ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:20386)
                        ID: name='FALSE' (at pp.c:20386)
                      FuncCall:  (at None)
                        ID: name='CC2420ReceiveP__CSN__set' (at pp.c:20387)
                      FuncCall:  (at None)
                        ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:20388)
                      FuncCall:  (at None)
                        ID: name='CC2420ReceiveP__waitForNextPacket' (at pp.c:20389)
                Compound:  (at pp.c:20392)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__flush' (at pp.c:20394)
          Break:  (at pp.c:20397)
          Case:  (at pp.c:20399)
            ID: name='CC2420ReceiveP__S_RX_FCF' (at pp.c:20399)
            Assignment: op='=' (at pp.c:20400)
              ID: name='CC2420ReceiveP__m_state' (at pp.c:20400)
              ID: name='CC2420ReceiveP__S_RX_PAYLOAD' (at pp.c:20400)
          If:  (at pp.c:20411)
            BinaryOp: op='&&' (at None)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__CC2420Config__isAutoAckEnabled' (at pp.c:20411)
              UnaryOp: op='!' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420ReceiveP__CC2420Config__isHwAutoAckDefault' (at pp.c:20411)
            Compound:  (at pp.c:20411)
              If:  (at pp.c:20415)
                BinaryOp: op='&&' (at None)
                  BinaryOp: op='&&' (at None)
                    BinaryOp: op='==' (at None)
                      BinaryOp: op='&' (at None)
                        BinaryOp: op='>>' (at None)
                          FuncCall:  (at None)
                            ID: name='__nesc_ntoh_leuint16' (at pp.c:20415)
                            ExprList:  (at pp.c:20417)
                              StructRef: type='.' (at pp.c:20417)
                                StructRef: type='->' (at pp.c:20417)
                                  ID: name='header' (at pp.c:20417)
                                  ID: name='fcf' (at pp.c:20417)
                                ID: name='nxdata' (at pp.c:20417)
                          ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:20417)
                        Constant: type='int', value='0x01' (at pp.c:20417)
                      Constant: type='int', value='1' (at pp.c:20417)
                    BinaryOp: op='||' (at None)
                      BinaryOp: op='==' (at None)
                        FuncCall:  (at None)
                          ID: name='__nesc_ntoh_leuint16' (at pp.c:20418)
                          ExprList:  (at pp.c:20418)
                            StructRef: type='.' (at pp.c:20418)
                              StructRef: type='->' (at pp.c:20418)
                                ID: name='header' (at pp.c:20418)
                                ID: name='dest' (at pp.c:20418)
                              ID: name='nxdata' (at pp.c:20418)
                        FuncCall:  (at None)
                          ID: name='CC2420ReceiveP__CC2420Config__getShortAddr' (at pp.c:20418)
                      BinaryOp: op='==' (at None)
                        FuncCall:  (at None)
                          ID: name='__nesc_ntoh_leuint16' (at pp.c:20419)
                          ExprList:  (at pp.c:20419)
                            StructRef: type='.' (at pp.c:20419)
                              StructRef: type='->' (at pp.c:20419)
                                ID: name='header' (at pp.c:20419)
                                ID: name='dest' (at pp.c:20419)
                              ID: name='nxdata' (at pp.c:20419)
                        ID: name='AM_BROADCAST_ADDR' (at pp.c:20419)
                  BinaryOp: op='==' (at None)
                    BinaryOp: op='&' (at None)
                      BinaryOp: op='>>' (at None)
                        FuncCall:  (at None)
                          ID: name='__nesc_ntoh_leuint16' (at pp.c:20420)
                          ExprList:  (at pp.c:20420)
                            StructRef: type='.' (at pp.c:20420)
                              StructRef: type='->' (at pp.c:20420)
                                ID: name='header' (at pp.c:20420)
                                ID: name='fcf' (at pp.c:20420)
                              ID: name='nxdata' (at pp.c:20420)
                        ID: name='IEEE154_FCF_FRAME_TYPE' (at pp.c:20420)
                      Constant: type='int', value='7' (at pp.c:20420)
                    ID: name='IEEE154_TYPE_DATA' (at pp.c:20420)
                Compound:  (at pp.c:20420)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__CSN__set' (at pp.c:20422)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__CSN__clr' (at pp.c:20423)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__SACK__strobe' (at pp.c:20424)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__CSN__set' (at pp.c:20425)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__CSN__clr' (at pp.c:20426)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__RXFIFO__beginRead' (at pp.c:20427)
                    ExprList:  (at pp.c:20427)
                      BinaryOp: op='+' (at pp.c:20427)
                        BinaryOp: op='+' (at pp.c:20427)
                          ID: name='buf' (at pp.c:20427)
                          Constant: type='int', value='1' (at pp.c:20427)
                        ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:20427)
                      BinaryOp: op='-' (at pp.c:20428)
                        ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20428)
                        ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:20428)
                  Return:  (at pp.c:20429)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__RXFIFO__continueRead' (at pp.c:20433)
            ExprList:  (at pp.c:20433)
              BinaryOp: op='+' (at pp.c:20433)
                BinaryOp: op='+' (at pp.c:20433)
                  ID: name='buf' (at pp.c:20433)
                  Constant: type='int', value='1' (at pp.c:20433)
                ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:20433)
              BinaryOp: op='-' (at pp.c:20434)
                ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20434)
                ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:20434)
          Break:  (at pp.c:20435)
          Case:  (at pp.c:20437)
            ID: name='CC2420ReceiveP__S_RX_PAYLOAD' (at pp.c:20437)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__CSN__set' (at pp.c:20439)
          If:  (at pp.c:20440)
            UnaryOp: op='!' (at pp.c:20440)
              ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:20440)
            Compound:  (at pp.c:20440)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:20442)
          If:  (at pp.c:20448)
            BinaryOp: op='||' (at pp.c:20450)
              BinaryOp: op='||' (at pp.c:20450)
                BinaryOp: op='||' (at pp.c:20450)
                  BinaryOp: op='&&' (at pp.c:20450)
                    ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:20450)
                    FuncCall:  (at None)
                      ID: name='CC2420ReceiveP__FIFO__get' (at pp.c:20450)
                  UnaryOp: op='!' (at None)
                    FuncCall:  (at None)
                      ID: name='CC2420ReceiveP__FIFOP__get' (at pp.c:20450)
                UnaryOp: op='!' (at pp.c:20451)
                  ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:20451)
              BinaryOp: op='<=' (at pp.c:20452)
                ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20452)
                Constant: type='int', value='10' (at pp.c:20452)
            Compound:  (at pp.c:20452)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__PacketTimeStamp__clear' (at pp.c:20453)
                ExprList:  (at pp.c:20453)
                  ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:20453)
            Compound:  (at pp.c:20455)
              If:  (at pp.c:20456)
                BinaryOp: op='==' (at pp.c:20456)
                  ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:20456)
                  Constant: type='int', value='1' (at pp.c:20456)
                Compound:  (at pp.c:20456)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__PacketTimeStamp__set' (at pp.c:20457)
                    ExprList:  (at pp.c:20457)
                      ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:20457)
                      ArrayRef:  (at pp.c:20457)
                        ID: name='CC2420ReceiveP__m_timestamp_queue' (at pp.c:20457)
                        ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:20457)
              Assignment: op='=' (at pp.c:20460)
                ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:20460)
                BinaryOp: op='%' (at pp.c:20460)
                  BinaryOp: op='+' (at pp.c:20460)
                    ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:20460)
                    Constant: type='int', value='1' (at pp.c:20460)
                  ID: name='CC2420ReceiveP__TIMESTAMP_QUEUE_SIZE' (at pp.c:20460)
              UnaryOp: op='p--' (at pp.c:20461)
                ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:20461)
              If:  (at pp.c:20463)
                BinaryOp: op='>' (at pp.c:20463)
                  ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:20463)
                  Constant: type='int', value='0' (at pp.c:20463)
                Compound:  (at pp.c:20463)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__PacketTimeStamp__clear' (at pp.c:20464)
                    ExprList:  (at pp.c:20464)
                      ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:20464)
                  Assignment: op='=' (at pp.c:20465)
                    ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:20465)
                    Constant: type='int', value='0' (at pp.c:20465)
                  Assignment: op='=' (at pp.c:20466)
                    ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:20466)
                    Constant: type='int', value='0' (at pp.c:20466)
          If:  (at pp.c:20472)
            BinaryOp: op='&&' (at pp.c:20472)
              BinaryOp: op='>>' (at pp.c:20472)
                ArrayRef:  (at pp.c:20472)
                  ID: name='buf' (at pp.c:20472)
                  ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:20472)
                Constant: type='int', value='7' (at pp.c:20472)
              ID: name='rx_buf' (at pp.c:20472)
            Compound:  (at pp.c:20472)
              Decl: name='type', quals=[], storage=[] (at pp.c:20473)
                TypeDecl: declname='type', quals=[] (at pp.c:20473)
                  IdentifierType: names=['uint8_t'] (at None)
                BinaryOp: op='&' (at None)
                  BinaryOp: op='>>' (at None)
                    FuncCall:  (at None)
                      ID: name='__nesc_ntoh_leuint16' (at pp.c:20473)
                      ExprList:  (at pp.c:20473)
                        StructRef: type='.' (at pp.c:20473)
                          StructRef: type='->' (at pp.c:20473)
                            ID: name='header' (at pp.c:20473)
                            ID: name='fcf' (at pp.c:20473)
                          ID: name='nxdata' (at pp.c:20473)
                    ID: name='IEEE154_FCF_FRAME_TYPE' (at pp.c:20473)
                  Constant: type='int', value='7' (at pp.c:20473)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__CC2420Receive__receive' (at pp.c:20476)
                ExprList:  (at pp.c:20476)
                  ID: name='type' (at pp.c:20476)
                  ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:20476)
              If:  (at pp.c:20477)
                BinaryOp: op='==' (at pp.c:20477)
                  ID: name='type' (at pp.c:20477)
                  ID: name='IEEE154_TYPE_DATA' (at pp.c:20477)
                Compound:  (at pp.c:20477)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__receiveDone_task__postTask' (at pp.c:20478)
                  Return:  (at pp.c:20479)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__waitForNextPacket' (at pp.c:20483)
          Break:  (at pp.c:20484)
          Default:  (at pp.c:20486)
            Assignment: op='=' (at pp.c:20487)
              ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:20487)
              ID: name='FALSE' (at pp.c:20487)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__CSN__set' (at pp.c:20488)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:20489)
          Break:  (at pp.c:20490)
  FuncDef:  (at pp.c:20495)
    Decl: name='CC2420SpiP__Fifo__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:20495)
      FuncDecl: quals=None (at pp.c:20495)
        ParamList:  (at pp.c:20495)
          Decl: name='addr', quals=[], storage=[] (at pp.c:20495)
            TypeDecl: declname='addr', quals=[] (at pp.c:20495)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:20495)
            PtrDecl: quals=[] (at pp.c:20495)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:20495)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_len', quals=[], storage=[] (at pp.c:20495)
            TypeDecl: declname='rx_len', quals=[] (at pp.c:20495)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:20495)
            TypeDecl: declname='error', quals=[] (at pp.c:20495)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__default__readDone', quals=[] (at pp.c:20495)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20497)
  FuncDef:  (at pp.c:20501)
    Decl: name='CC2420SpiP__Fifo__readDone', quals=[], storage=['static', 'inline'] (at pp.c:20501)
      FuncDecl: quals=None (at pp.c:20501)
        ParamList:  (at pp.c:20501)
          Decl: name='arg_0x102200328', quals=[], storage=[] (at pp.c:20501)
            TypeDecl: declname='arg_0x102200328', quals=[] (at pp.c:20501)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:20501)
            PtrDecl: quals=[] (at pp.c:20501)
              TypeDecl: declname='data', quals=[] (at pp.c:20501)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:20501)
            TypeDecl: declname='length', quals=[] (at pp.c:20501)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:20501)
            TypeDecl: declname='error', quals=[] (at pp.c:20501)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__readDone', quals=[] (at pp.c:20501)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20501)
      Switch:  (at pp.c:20503)
        ID: name='arg_0x102200328' (at pp.c:20503)
        Compound:  (at pp.c:20503)
          Case:  (at pp.c:20505)
            ID: name='CC2420_TXFIFO' (at pp.c:20505)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__TXFIFO__readDone' (at pp.c:20507)
              ExprList:  (at pp.c:20507)
                ID: name='data' (at pp.c:20507)
                ID: name='length' (at pp.c:20507)
                ID: name='error' (at pp.c:20507)
          Break:  (at pp.c:20509)
          Case:  (at pp.c:20511)
            ID: name='CC2420_RXFIFO' (at pp.c:20511)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__RXFIFO__readDone' (at pp.c:20513)
              ExprList:  (at pp.c:20513)
                ID: name='data' (at pp.c:20513)
                ID: name='length' (at pp.c:20513)
                ID: name='error' (at pp.c:20513)
          Break:  (at pp.c:20515)
          Default:  (at pp.c:20517)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__Fifo__default__readDone' (at pp.c:20519)
              ExprList:  (at pp.c:20519)
                ID: name='arg_0x102200328' (at pp.c:20519)
                ID: name='data' (at pp.c:20519)
                ID: name='length' (at pp.c:20519)
                ID: name='error' (at pp.c:20519)
          Break:  (at pp.c:20521)
  FuncDef:  (at pp.c:20528)
    Decl: name='CC2420ReceiveP__SFLUSHRX__strobe', quals=[], storage=['static', 'inline'] (at pp.c:20528)
      FuncDecl: quals=None (at pp.c:20528)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SFLUSHRX__strobe', quals=[] (at pp.c:20528)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:20528)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20530)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20530)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20534)
        ID: name='__nesc_result' (at pp.c:20534)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:20534)
          ExprList:  (at pp.c:20534)
            ID: name='CC2420_SFLUSHRX' (at pp.c:20534)
      Return:  (at pp.c:20538)
        ID: name='__nesc_result' (at pp.c:20538)
  FuncDef:  (at pp.c:20543)
    Decl: name='CC2420CsmaP__sendDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:20543)
      FuncDecl: quals=None (at pp.c:20543)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__sendDone_task__postTask', quals=[] (at pp.c:20543)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20543)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20545)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20545)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20549)
        ID: name='__nesc_result' (at pp.c:20549)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:20549)
          ExprList:  (at pp.c:20549)
            ID: name='CC2420CsmaP__sendDone_task' (at pp.c:20549)
      Return:  (at pp.c:20553)
        ID: name='__nesc_result' (at pp.c:20553)
  FuncDef:  (at pp.c:20558)
    Decl: name='CC2420CsmaP__CC2420Transmit__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:20558)
      FuncDecl: quals=None (at pp.c:20558)
        ParamList:  (at pp.c:20558)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:20558)
            PtrDecl: quals=[] (at pp.c:20558)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:20558)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:20558)
            TypeDecl: declname='err', quals=[] (at pp.c:20558)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Transmit__sendDone', quals=[] (at pp.c:20558)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20560)
      Compound:  (at pp.c:20561)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:20561)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:20561)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:20561)
        Assignment: op='=' (at pp.c:20563)
          ID: name='CC2420CsmaP__sendErr' (at pp.c:20563)
          ID: name='err' (at pp.c:20563)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:20565)
          ExprList:  (at pp.c:20565)
            ID: name='__nesc_atomic' (at pp.c:20565)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__sendDone_task__postTask' (at pp.c:20566)
  FuncDef:  (at pp.c:20570)
    Decl: name='DefaultLplP__Resend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:20570)
      FuncDecl: quals=None (at pp.c:20570)
        ParamList:  (at pp.c:20570)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:20570)
            PtrDecl: quals=[] (at pp.c:20570)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:20570)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:20570)
            TypeDecl: declname='error', quals=[] (at pp.c:20570)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DefaultLplP__Resend__sendDone', quals=[] (at pp.c:20570)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20572)
  FuncDef:  (at pp.c:20576)
    Decl: name='CC2420TransmitP__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:20576)
      FuncDecl: quals=None (at pp.c:20576)
        ParamList:  (at pp.c:20576)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:20576)
            PtrDecl: quals=[] (at pp.c:20576)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:20576)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:20576)
            TypeDecl: declname='error', quals=[] (at pp.c:20576)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__Send__sendDone', quals=[] (at pp.c:20576)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20576)
      FuncCall:  (at None)
        ID: name='DefaultLplP__Resend__sendDone' (at pp.c:20578)
        ExprList:  (at pp.c:20578)
          ID: name='p_msg' (at pp.c:20578)
          ID: name='error' (at pp.c:20578)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Transmit__sendDone' (at pp.c:20580)
        ExprList:  (at pp.c:20580)
          ID: name='p_msg' (at pp.c:20580)
          ID: name='error' (at pp.c:20580)
  FuncDef:  (at pp.c:20585)
    Decl: name='CC2420TransmitP__TXFIFO__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:20585)
      FuncDecl: quals=None (at pp.c:20585)
        ParamList:  (at pp.c:20585)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:20585)
            PtrDecl: quals=[] (at pp.c:20585)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:20585)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_len', quals=[], storage=[] (at pp.c:20585)
            TypeDecl: declname='tx_len', quals=[] (at pp.c:20585)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:20586)
            TypeDecl: declname='error', quals=[] (at pp.c:20586)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__TXFIFO__writeDone', quals=[] (at pp.c:20585)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20588)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CSN__set' (at pp.c:20590)
      If:  (at pp.c:20591)
        BinaryOp: op='==' (at pp.c:20591)
          ID: name='CC2420TransmitP__m_state' (at pp.c:20591)
          ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:20591)
        Compound:  (at pp.c:20591)
          Compound:  (at pp.c:20594)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CSN__clr' (at pp.c:20595)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__SFLUSHTX__strobe' (at pp.c:20596)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CSN__set' (at pp.c:20597)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:20599)
          Assignment: op='=' (at pp.c:20600)
            ID: name='CC2420TransmitP__m_state' (at pp.c:20600)
            ID: name='CC2420TransmitP__S_STARTED' (at pp.c:20600)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__Send__sendDone' (at pp.c:20601)
            ExprList:  (at pp.c:20601)
              ID: name='CC2420TransmitP__m_msg' (at pp.c:20601)
              ID: name='ECANCEL' (at pp.c:20601)
        Compound:  (at pp.c:20603)
          If:  (at pp.c:20605)
            UnaryOp: op='!' (at pp.c:20605)
              ID: name='CC2420TransmitP__m_cca' (at pp.c:20605)
            Compound:  (at pp.c:20605)
              Compound:  (at pp.c:20608)
                Assignment: op='=' (at pp.c:20609)
                  ID: name='CC2420TransmitP__m_state' (at pp.c:20609)
                  ID: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:20609)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__attemptSend' (at pp.c:20611)
            Compound:  (at pp.c:20613)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:20614)
              Compound:  (at pp.c:20617)
                Assignment: op='=' (at pp.c:20618)
                  ID: name='CC2420TransmitP__m_state' (at pp.c:20618)
                  ID: name='CC2420TransmitP__S_SAMPLE_CCA' (at pp.c:20618)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__RadioBackoff__requestInitialBackoff' (at pp.c:20621)
                ExprList:  (at pp.c:20621)
                  ID: name='CC2420TransmitP__m_msg' (at pp.c:20621)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:20622)
                ExprList:  (at pp.c:20622)
                  ID: name='CC2420TransmitP__myInitialBackoff' (at pp.c:20622)
  FuncDef:  (at pp.c:20628)
    Decl: name='CC2420ReceiveP__RXFIFO__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:20628)
      FuncDecl: quals=None (at pp.c:20628)
        ParamList:  (at pp.c:20628)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:20628)
            PtrDecl: quals=[] (at pp.c:20628)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:20628)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_len', quals=[], storage=[] (at pp.c:20628)
            TypeDecl: declname='tx_len', quals=[] (at pp.c:20628)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:20628)
            TypeDecl: declname='error', quals=[] (at pp.c:20628)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__RXFIFO__writeDone', quals=[] (at pp.c:20628)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20630)
  FuncDef:  (at pp.c:20634)
    Decl: name='CC2420SpiP__Fifo__default__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:20634)
      FuncDecl: quals=None (at pp.c:20634)
        ParamList:  (at pp.c:20634)
          Decl: name='addr', quals=[], storage=[] (at pp.c:20634)
            TypeDecl: declname='addr', quals=[] (at pp.c:20634)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:20634)
            PtrDecl: quals=[] (at pp.c:20634)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:20634)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_len', quals=[], storage=[] (at pp.c:20634)
            TypeDecl: declname='tx_len', quals=[] (at pp.c:20634)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:20634)
            TypeDecl: declname='error', quals=[] (at pp.c:20634)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__default__writeDone', quals=[] (at pp.c:20634)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20636)
  FuncDef:  (at pp.c:20640)
    Decl: name='CC2420SpiP__Fifo__writeDone', quals=[], storage=['static', 'inline'] (at pp.c:20640)
      FuncDecl: quals=None (at pp.c:20640)
        ParamList:  (at pp.c:20640)
          Decl: name='arg_0x102200328', quals=[], storage=[] (at pp.c:20640)
            TypeDecl: declname='arg_0x102200328', quals=[] (at pp.c:20640)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:20640)
            PtrDecl: quals=[] (at pp.c:20640)
              TypeDecl: declname='data', quals=[] (at pp.c:20640)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:20640)
            TypeDecl: declname='length', quals=[] (at pp.c:20640)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:20640)
            TypeDecl: declname='error', quals=[] (at pp.c:20640)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__writeDone', quals=[] (at pp.c:20640)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20640)
      Switch:  (at pp.c:20642)
        ID: name='arg_0x102200328' (at pp.c:20642)
        Compound:  (at pp.c:20642)
          Case:  (at pp.c:20644)
            ID: name='CC2420_TXFIFO' (at pp.c:20644)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__TXFIFO__writeDone' (at pp.c:20646)
              ExprList:  (at pp.c:20646)
                ID: name='data' (at pp.c:20646)
                ID: name='length' (at pp.c:20646)
                ID: name='error' (at pp.c:20646)
          Break:  (at pp.c:20648)
          Case:  (at pp.c:20650)
            ID: name='CC2420_RXFIFO' (at pp.c:20650)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__RXFIFO__writeDone' (at pp.c:20652)
              ExprList:  (at pp.c:20652)
                ID: name='data' (at pp.c:20652)
                ID: name='length' (at pp.c:20652)
                ID: name='error' (at pp.c:20652)
          Break:  (at pp.c:20654)
          Default:  (at pp.c:20656)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__Fifo__default__writeDone' (at pp.c:20658)
              ExprList:  (at pp.c:20658)
                ID: name='arg_0x102200328' (at pp.c:20658)
                ID: name='data' (at pp.c:20658)
                ID: name='length' (at pp.c:20658)
                ID: name='error' (at pp.c:20658)
          Break:  (at pp.c:20660)
  FuncDef:  (at pp.c:20667)
    Decl: name='CC2420ControlP__RXCTRL1__write', quals=[], storage=['static', 'inline'] (at pp.c:20667)
      FuncDecl: quals=None (at pp.c:20667)
        ParamList:  (at pp.c:20667)
          Decl: name='data', quals=[], storage=[] (at pp.c:20667)
            TypeDecl: declname='data', quals=[] (at pp.c:20667)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__RXCTRL1__write', quals=[] (at pp.c:20667)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:20667)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20669)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20669)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20673)
        ID: name='__nesc_result' (at pp.c:20673)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:20673)
          ExprList:  (at pp.c:20673)
            ID: name='CC2420_RXCTRL1' (at pp.c:20673)
            ID: name='data' (at pp.c:20673)
      Return:  (at pp.c:20677)
        ID: name='__nesc_result' (at pp.c:20677)
  FuncDef:  (at pp.c:20681)
    Decl: name='CC2420ControlP__IOCFG0__write', quals=[], storage=['static', 'inline'] (at pp.c:20681)
      FuncDecl: quals=None (at pp.c:20681)
        ParamList:  (at pp.c:20681)
          Decl: name='data', quals=[], storage=[] (at pp.c:20681)
            TypeDecl: declname='data', quals=[] (at pp.c:20681)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__IOCFG0__write', quals=[] (at pp.c:20681)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:20681)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20683)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20683)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20687)
        ID: name='__nesc_result' (at pp.c:20687)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:20687)
          ExprList:  (at pp.c:20687)
            ID: name='CC2420_IOCFG0' (at pp.c:20687)
            ID: name='data' (at pp.c:20687)
      Return:  (at pp.c:20691)
        ID: name='__nesc_result' (at pp.c:20691)
  FuncDef:  (at pp.c:20696)
    Decl: name='CC2420ControlP__SXOSCON__strobe', quals=[], storage=['static', 'inline'] (at pp.c:20696)
      FuncDecl: quals=None (at pp.c:20696)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SXOSCON__strobe', quals=[] (at pp.c:20696)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:20696)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20698)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20698)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20702)
        ID: name='__nesc_result' (at pp.c:20702)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:20702)
          ExprList:  (at pp.c:20702)
            ID: name='CC2420_SXOSCON' (at pp.c:20702)
      Return:  (at pp.c:20706)
        ID: name='__nesc_result' (at pp.c:20706)
  FuncDef:  (at pp.c:20711)
    Decl: name='HplMsp430InterruptP__Port14__enable', quals=[], storage=['inline', 'static'] (at pp.c:20711)
      FuncDecl: quals=None (at pp.c:20711)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port14__enable', quals=[] (at pp.c:20711)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20713)
      Assignment: op='|=' (at pp.c:20715)
        ID: name='P1IE' (at pp.c:20715)
        BinaryOp: op='<<' (at pp.c:20715)
          Constant: type='int', value='1' (at pp.c:20715)
          Constant: type='int', value='4' (at pp.c:20715)
  FuncDef:  (at pp.c:20719)
    Decl: name='Msp430InterruptC__0__HplInterrupt__enable', quals=[], storage=['static', 'inline'] (at pp.c:20719)
      FuncDecl: quals=None (at pp.c:20719)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__enable', quals=[] (at pp.c:20719)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20719)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port14__enable' (at pp.c:20721)
  FuncDef:  (at pp.c:20726)
    Decl: name='HplMsp430InterruptP__Port14__edge', quals=[], storage=['inline', 'static'] (at pp.c:20726)
      FuncDecl: quals=None (at pp.c:20726)
        ParamList:  (at pp.c:20726)
          Decl: name='l2h', quals=[], storage=[] (at pp.c:20726)
            TypeDecl: declname='l2h', quals=[] (at pp.c:20726)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port14__edge', quals=[] (at pp.c:20726)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20728)
      Compound:  (at pp.c:20731)
        If:  (at pp.c:20732)
          ID: name='l2h' (at pp.c:20732)
          Compound:  (at pp.c:20732)
            Assignment: op='&=' (at pp.c:20734)
              ID: name='P1IES' (at pp.c:20734)
              UnaryOp: op='~' (at pp.c:20734)
                BinaryOp: op='<<' (at pp.c:20734)
                  Constant: type='int', value='1' (at pp.c:20734)
                  Constant: type='int', value='4' (at pp.c:20734)
          Compound:  (at pp.c:20736)
            Assignment: op='|=' (at pp.c:20738)
              ID: name='P1IES' (at pp.c:20738)
              BinaryOp: op='<<' (at pp.c:20738)
                Constant: type='int', value='1' (at pp.c:20738)
                Constant: type='int', value='4' (at pp.c:20738)
  FuncDef:  (at pp.c:20744)
    Decl: name='Msp430InterruptC__0__HplInterrupt__edge', quals=[], storage=['static', 'inline'] (at pp.c:20744)
      FuncDecl: quals=None (at pp.c:20744)
        ParamList:  (at pp.c:20744)
          Decl: name='low_to_high', quals=[], storage=[] (at pp.c:20744)
            TypeDecl: declname='low_to_high', quals=[] (at pp.c:20744)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__edge', quals=[] (at pp.c:20744)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20744)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port14__edge' (at pp.c:20746)
        ExprList:  (at pp.c:20746)
          ID: name='low_to_high' (at pp.c:20746)
  FuncDef:  (at pp.c:20751)
    Decl: name='HplMsp430InterruptP__Port14__clear', quals=[], storage=['inline', 'static'] (at pp.c:20751)
      FuncDecl: quals=None (at pp.c:20751)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port14__clear', quals=[] (at pp.c:20751)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20753)
      Assignment: op='&=' (at pp.c:20755)
        ID: name='P1IFG' (at pp.c:20755)
        UnaryOp: op='~' (at pp.c:20755)
          BinaryOp: op='<<' (at pp.c:20755)
            Constant: type='int', value='1' (at pp.c:20755)
            Constant: type='int', value='4' (at pp.c:20755)
  FuncDef:  (at pp.c:20759)
    Decl: name='Msp430InterruptC__0__HplInterrupt__clear', quals=[], storage=['static', 'inline'] (at pp.c:20759)
      FuncDecl: quals=None (at pp.c:20759)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__clear', quals=[] (at pp.c:20759)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20759)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port14__clear' (at pp.c:20761)
  FuncDef:  (at pp.c:20766)
    Decl: name='HplMsp430InterruptP__Port14__disable', quals=[], storage=['inline', 'static'] (at pp.c:20766)
      FuncDecl: quals=None (at pp.c:20766)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port14__disable', quals=[] (at pp.c:20766)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20768)
      Assignment: op='&=' (at pp.c:20770)
        ID: name='P1IE' (at pp.c:20770)
        UnaryOp: op='~' (at pp.c:20770)
          BinaryOp: op='<<' (at pp.c:20770)
            Constant: type='int', value='1' (at pp.c:20770)
            Constant: type='int', value='4' (at pp.c:20770)
  FuncDef:  (at pp.c:20774)
    Decl: name='Msp430InterruptC__0__HplInterrupt__disable', quals=[], storage=['static', 'inline'] (at pp.c:20774)
      FuncDecl: quals=None (at pp.c:20774)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__disable', quals=[] (at pp.c:20774)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20774)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port14__disable' (at pp.c:20776)
  FuncDef:  (at pp.c:20781)
    Decl: name='Msp430InterruptC__0__Interrupt__disable', quals=[], storage=['inline', 'static'] (at pp.c:20781)
      FuncDecl: quals=None (at pp.c:20781)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__Interrupt__disable', quals=[] (at pp.c:20781)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20783)
      Compound:  (at pp.c:20786)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__HplInterrupt__disable' (at pp.c:20787)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__HplInterrupt__clear' (at pp.c:20788)
      Return:  (at pp.c:20790)
        ID: name='SUCCESS' (at pp.c:20790)
  FuncDef:  (at pp.c:20794)
    Decl: name='Msp430InterruptC__0__enable', quals=[], storage=['inline', 'static'] (at pp.c:20794)
      FuncDecl: quals=None (at pp.c:20794)
        ParamList:  (at pp.c:20794)
          Decl: name='rising', quals=[], storage=[] (at pp.c:20794)
            TypeDecl: declname='rising', quals=[] (at pp.c:20794)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__enable', quals=[] (at pp.c:20794)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20796)
      Compound:  (at pp.c:20799)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__Interrupt__disable' (at pp.c:20800)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__HplInterrupt__edge' (at pp.c:20801)
          ExprList:  (at pp.c:20801)
            ID: name='rising' (at pp.c:20801)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__HplInterrupt__enable' (at pp.c:20802)
      Return:  (at pp.c:20804)
        ID: name='SUCCESS' (at pp.c:20804)
  FuncDef:  (at pp.c:20807)
    Decl: name='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[], storage=['inline', 'static'] (at pp.c:20807)
      FuncDecl: quals=None (at pp.c:20807)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[] (at pp.c:20807)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20809)
      Return:  (at pp.c:20810)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__enable' (at pp.c:20810)
          ExprList:  (at pp.c:20810)
            ID: name='TRUE' (at pp.c:20810)
  FuncDef:  (at pp.c:20814)
    Decl: name='CC2420ControlP__InterruptCCA__enableRisingEdge', quals=[], storage=['static', 'inline'] (at pp.c:20814)
      FuncDecl: quals=None (at pp.c:20814)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__InterruptCCA__enableRisingEdge', quals=[] (at pp.c:20814)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20814)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20816)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20816)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20820)
        ID: name='__nesc_result' (at pp.c:20820)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__Interrupt__enableRisingEdge' (at pp.c:20820)
      Return:  (at pp.c:20824)
        ID: name='__nesc_result' (at pp.c:20824)
  FuncDef:  (at pp.c:20829)
    Decl: name='CC2420ControlP__IOCFG1__write', quals=[], storage=['static', 'inline'] (at pp.c:20829)
      FuncDecl: quals=None (at pp.c:20829)
        ParamList:  (at pp.c:20829)
          Decl: name='data', quals=[], storage=[] (at pp.c:20829)
            TypeDecl: declname='data', quals=[] (at pp.c:20829)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__IOCFG1__write', quals=[] (at pp.c:20829)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:20829)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20831)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20831)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20835)
        ID: name='__nesc_result' (at pp.c:20835)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:20835)
          ExprList:  (at pp.c:20835)
            ID: name='CC2420_IOCFG1' (at pp.c:20835)
            ID: name='data' (at pp.c:20835)
      Return:  (at pp.c:20839)
        ID: name='__nesc_result' (at pp.c:20839)
  FuncDef:  (at pp.c:20844)
    Decl: name='CC2420ControlP__CC2420Power__startOscillator', quals=[], storage=['inline', 'static'] (at pp.c:20844)
      FuncDecl: quals=None (at pp.c:20844)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__startOscillator', quals=[] (at pp.c:20844)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20846)
      Compound:  (at pp.c:20847)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:20847)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:20847)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:20847)
        Compound:  (at pp.c:20849)
          If:  (at pp.c:20850)
            BinaryOp: op='!=' (at pp.c:20850)
              ID: name='CC2420ControlP__m_state' (at pp.c:20850)
              ID: name='CC2420ControlP__S_VREG_STARTED' (at pp.c:20850)
            Compound:  (at pp.c:20850)
              Compound:  (at pp.c:20851)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:20852)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:20852)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:20854)
                Compound:  (at pp.c:20856)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:20858)
                    ExprList:  (at pp.c:20858)
                      ID: name='__nesc_atomic' (at pp.c:20858)
                  Return:  (at pp.c:20860)
                    ID: name='__nesc_temp' (at pp.c:20860)
          Assignment: op='=' (at pp.c:20865)
            ID: name='CC2420ControlP__m_state' (at pp.c:20865)
            ID: name='CC2420ControlP__S_XOSC_STARTING' (at pp.c:20865)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__IOCFG1__write' (at pp.c:20866)
            ExprList:  (at pp.c:20866)
              BinaryOp: op='<<' (at pp.c:20866)
                ID: name='CC2420_SFDMUX_XOSC16M_STABLE' (at pp.c:20866)
                ID: name='CC2420_IOCFG1_CCAMUX' (at pp.c:20867)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__InterruptCCA__enableRisingEdge' (at pp.c:20869)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__SXOSCON__strobe' (at pp.c:20870)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__IOCFG0__write' (at pp.c:20872)
            ExprList:  (at pp.c:20872)
              BinaryOp: op='|' (at pp.c:20872)
                BinaryOp: op='<<' (at pp.c:20872)
                  Constant: type='int', value='1' (at pp.c:20872)
                  ID: name='CC2420_IOCFG0_FIFOP_POLARITY' (at pp.c:20872)
                BinaryOp: op='<<' (at pp.c:20873)
                  Constant: type='int', value='127' (at pp.c:20873)
                  ID: name='CC2420_IOCFG0_FIFOP_THR' (at pp.c:20873)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__writeFsctrl' (at pp.c:20875)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__writeMdmctrl0' (at pp.c:20876)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__RXCTRL1__write' (at pp.c:20878)
            ExprList:  (at pp.c:20878)
              BinaryOp: op='|' (at pp.c:20878)
                BinaryOp: op='|' (at pp.c:20878)
                  BinaryOp: op='|' (at pp.c:20878)
                    BinaryOp: op='|' (at pp.c:20878)
                      BinaryOp: op='|' (at pp.c:20878)
                        BinaryOp: op='|' (at pp.c:20878)
                          BinaryOp: op='<<' (at pp.c:20878)
                            Constant: type='int', value='1' (at pp.c:20878)
                            ID: name='CC2420_RXCTRL1_RXBPF_LOCUR' (at pp.c:20878)
                          BinaryOp: op='<<' (at pp.c:20879)
                            Constant: type='int', value='1' (at pp.c:20879)
                            ID: name='CC2420_RXCTRL1_LOW_LOWGAIN' (at pp.c:20879)
                        BinaryOp: op='<<' (at pp.c:20880)
                          Constant: type='int', value='1' (at pp.c:20880)
                          ID: name='CC2420_RXCTRL1_HIGH_HGM' (at pp.c:20880)
                      BinaryOp: op='<<' (at pp.c:20881)
                        Constant: type='int', value='1' (at pp.c:20881)
                        ID: name='CC2420_RXCTRL1_LNA_CAP_ARRAY' (at pp.c:20881)
                    BinaryOp: op='<<' (at pp.c:20882)
                      Constant: type='int', value='1' (at pp.c:20882)
                      ID: name='CC2420_RXCTRL1_RXMIX_TAIL' (at pp.c:20882)
                  BinaryOp: op='<<' (at pp.c:20883)
                    Constant: type='int', value='1' (at pp.c:20883)
                    ID: name='CC2420_RXCTRL1_RXMIX_VCM' (at pp.c:20883)
                BinaryOp: op='<<' (at pp.c:20884)
                  Constant: type='int', value='2' (at pp.c:20884)
                  ID: name='CC2420_RXCTRL1_RXMIX_CURRENT' (at pp.c:20884)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:20887)
          ExprList:  (at pp.c:20887)
            ID: name='__nesc_atomic' (at pp.c:20887)
      Return:  (at pp.c:20888)
        ID: name='SUCCESS' (at pp.c:20888)
  FuncDef:  (at pp.c:20892)
    Decl: name='CC2420CsmaP__CC2420Power__startOscillator', quals=[], storage=['static', 'inline'] (at pp.c:20892)
      FuncDecl: quals=None (at pp.c:20892)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__startOscillator', quals=[] (at pp.c:20892)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20892)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20894)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20894)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20898)
        ID: name='__nesc_result' (at pp.c:20898)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Power__startOscillator' (at pp.c:20898)
      Return:  (at pp.c:20902)
        ID: name='__nesc_result' (at pp.c:20902)
  FuncDef:  (at pp.c:20907)
    Decl: name='CC2420CsmaP__Resource__granted', quals=[], storage=['inline', 'static'] (at pp.c:20907)
      FuncDecl: quals=None (at pp.c:20907)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__Resource__granted', quals=[] (at pp.c:20907)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20909)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Power__startOscillator' (at pp.c:20910)
  FuncDef:  (at pp.c:20914)
    Decl: name='CC2420ControlP__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:20914)
      FuncDecl: quals=None (at pp.c:20914)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__Resource__granted', quals=[] (at pp.c:20914)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20914)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__Resource__granted' (at pp.c:20916)
  FuncDef:  (at pp.c:20921)
    Decl: name='CC2420ControlP__CSN__clr', quals=[], storage=['static', 'inline'] (at pp.c:20921)
      FuncDecl: quals=None (at pp.c:20921)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CSN__clr', quals=[] (at pp.c:20921)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20921)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__GeneralIO__clr' (at pp.c:20923)
  FuncDef:  (at pp.c:20928)
    Decl: name='CC2420ControlP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:20928)
      FuncDecl: quals=None (at pp.c:20928)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SpiResource__granted', quals=[] (at pp.c:20928)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20930)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__clr' (at pp.c:20931)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__Resource__granted' (at pp.c:20932)
  FuncDef:  (at pp.c:20936)
    Decl: name='CC2420ControlP__syncDone__postTask', quals=[], storage=['static', 'inline'] (at pp.c:20936)
      FuncDecl: quals=None (at pp.c:20936)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__syncDone__postTask', quals=[] (at pp.c:20936)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20936)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20938)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20938)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20942)
        ID: name='__nesc_result' (at pp.c:20942)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:20942)
          ExprList:  (at pp.c:20942)
            ID: name='CC2420ControlP__syncDone' (at pp.c:20942)
      Return:  (at pp.c:20946)
        ID: name='__nesc_result' (at pp.c:20946)
  FuncDef:  (at pp.c:20951)
    Decl: name='CC2420ControlP__SyncResource__release', quals=[], storage=['static', 'inline'] (at pp.c:20951)
      FuncDecl: quals=None (at pp.c:20951)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SyncResource__release', quals=[] (at pp.c:20951)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20951)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20953)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20953)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20957)
        ID: name='__nesc_result' (at pp.c:20957)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__release' (at pp.c:20957)
          ExprList:  (at pp.c:20957)
            ID: name='CC2420SpiC__1__CLIENT_ID' (at pp.c:20957)
      Return:  (at pp.c:20961)
        ID: name='__nesc_result' (at pp.c:20961)
  FuncDef:  (at pp.c:20966)
    Decl: name='CC2420ControlP__CSN__set', quals=[], storage=['static', 'inline'] (at pp.c:20966)
      FuncDecl: quals=None (at pp.c:20966)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CSN__set', quals=[] (at pp.c:20966)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20966)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__GeneralIO__set' (at pp.c:20968)
  FuncDef:  (at pp.c:20973)
    Decl: name='CC2420ControlP__SRXON__strobe', quals=[], storage=['static', 'inline'] (at pp.c:20973)
      FuncDecl: quals=None (at pp.c:20973)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SRXON__strobe', quals=[] (at pp.c:20973)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:20973)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20975)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20975)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20979)
        ID: name='__nesc_result' (at pp.c:20979)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:20979)
          ExprList:  (at pp.c:20979)
            ID: name='CC2420_SRXON' (at pp.c:20979)
      Return:  (at pp.c:20983)
        ID: name='__nesc_result' (at pp.c:20983)
  FuncDef:  (at pp.c:20987)
    Decl: name='CC2420ControlP__SRFOFF__strobe', quals=[], storage=['static', 'inline'] (at pp.c:20987)
      FuncDecl: quals=None (at pp.c:20987)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SRFOFF__strobe', quals=[] (at pp.c:20987)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:20987)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20989)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20989)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20993)
        ID: name='__nesc_result' (at pp.c:20993)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:20993)
          ExprList:  (at pp.c:20993)
            ID: name='CC2420_SRFOFF' (at pp.c:20993)
      Return:  (at pp.c:20997)
        ID: name='__nesc_result' (at pp.c:20997)
  FuncDef:  (at pp.c:21002)
    Decl: name='CC2420ControlP__SyncResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:21002)
      FuncDecl: quals=None (at pp.c:21002)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SyncResource__granted', quals=[] (at pp.c:21002)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21004)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__clr' (at pp.c:21005)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__SRFOFF__strobe' (at pp.c:21006)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__writeFsctrl' (at pp.c:21007)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__writeMdmctrl0' (at pp.c:21008)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__writeId' (at pp.c:21009)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__set' (at pp.c:21010)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__clr' (at pp.c:21011)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__SRXON__strobe' (at pp.c:21012)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__set' (at pp.c:21013)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__SyncResource__release' (at pp.c:21014)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__syncDone__postTask' (at pp.c:21015)
  FuncDef:  (at pp.c:21019)
    Decl: name='CC2420ControlP__ReadRssi__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:21019)
      FuncDecl: quals=None (at pp.c:21019)
        ParamList:  (at pp.c:21019)
          Decl: name='error', quals=[], storage=[] (at pp.c:21019)
            TypeDecl: declname='error', quals=[] (at pp.c:21019)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:21019)
            TypeDecl: declname='data', quals=[] (at pp.c:21019)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__ReadRssi__default__readDone', quals=[] (at pp.c:21019)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21021)
  FuncDef:  (at pp.c:21025)
    Decl: name='CC2420ControlP__ReadRssi__readDone', quals=[], storage=['static', 'inline'] (at pp.c:21025)
      FuncDecl: quals=None (at pp.c:21025)
        ParamList:  (at pp.c:21025)
          Decl: name='result', quals=[], storage=[] (at pp.c:21025)
            TypeDecl: declname='result', quals=[] (at pp.c:21025)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='val', quals=[], storage=[] (at pp.c:21025)
            TypeDecl: declname='val', quals=[] (at pp.c:21025)
              IdentifierType: names=['CC2420ControlP__ReadRssi__val_t'] (at None)
        TypeDecl: declname='CC2420ControlP__ReadRssi__readDone', quals=[] (at pp.c:21025)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21025)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__ReadRssi__default__readDone' (at pp.c:21027)
        ExprList:  (at pp.c:21027)
          ID: name='result' (at pp.c:21027)
          ID: name='val' (at pp.c:21027)
  FuncDef:  (at pp.c:21032)
    Decl: name='CC2420ControlP__RssiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:21032)
      FuncDecl: quals=None (at pp.c:21032)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__RssiResource__release', quals=[] (at pp.c:21032)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21032)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21034)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21034)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21038)
        ID: name='__nesc_result' (at pp.c:21038)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__release' (at pp.c:21038)
          ExprList:  (at pp.c:21038)
            ID: name='CC2420SpiC__2__CLIENT_ID' (at pp.c:21038)
      Return:  (at pp.c:21042)
        ID: name='__nesc_result' (at pp.c:21042)
  FuncDef:  (at pp.c:21047)
    Decl: name='CC2420SpiP__Reg__read', quals=[], storage=['inline', 'static'] (at pp.c:21047)
      FuncDecl: quals=None (at pp.c:21047)
        ParamList:  (at pp.c:21047)
          Decl: name='addr', quals=[], storage=[] (at pp.c:21047)
            TypeDecl: declname='addr', quals=[] (at pp.c:21047)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:21047)
            PtrDecl: quals=[] (at pp.c:21047)
              TypeDecl: declname='data', quals=[] (at pp.c:21047)
                IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Reg__read', quals=[] (at pp.c:21047)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:21049)
      Decl: name='status', quals=[], storage=[] (at pp.c:21051)
        TypeDecl: declname='status', quals=[] (at pp.c:21051)
          IdentifierType: names=['cc2420_status_t'] (at None)
        Constant: type='int', value='0' (at pp.c:21051)
      Compound:  (at pp.c:21053)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21053)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21053)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21053)
        Compound:  (at pp.c:21055)
          If:  (at pp.c:21056)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:21056)
            Compound:  (at pp.c:21056)
              Compound:  (at pp.c:21057)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:21058)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:21058)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='status' (at pp.c:21060)
                Compound:  (at pp.c:21062)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:21064)
                    ExprList:  (at pp.c:21064)
                      ID: name='__nesc_atomic' (at pp.c:21064)
                  Return:  (at pp.c:21066)
                    ID: name='__nesc_temp' (at pp.c:21066)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21072)
          ExprList:  (at pp.c:21072)
            ID: name='__nesc_atomic' (at pp.c:21072)
      Assignment: op='=' (at pp.c:21074)
        ID: name='status' (at pp.c:21074)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:21074)
          ExprList:  (at pp.c:21074)
            BinaryOp: op='|' (at pp.c:21074)
              ID: name='addr' (at pp.c:21074)
              Constant: type='int', value='0x40' (at pp.c:21074)
      Assignment: op='=' (at pp.c:21075)
        UnaryOp: op='*' (at pp.c:21075)
          ID: name='data' (at pp.c:21075)
        BinaryOp: op='<<' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint16_t'] (at None)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__SpiByte__write' (at pp.c:21075)
              ExprList:  (at pp.c:21075)
                Constant: type='int', value='0' (at pp.c:21075)
          Constant: type='int', value='8' (at pp.c:21075)
      Assignment: op='|=' (at pp.c:21076)
        UnaryOp: op='*' (at pp.c:21076)
          ID: name='data' (at pp.c:21076)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:21076)
          ExprList:  (at pp.c:21076)
            Constant: type='int', value='0' (at pp.c:21076)
      Return:  (at pp.c:21078)
        ID: name='status' (at pp.c:21078)
  FuncDef:  (at pp.c:21082)
    Decl: name='CC2420ControlP__RSSI__read', quals=[], storage=['static', 'inline'] (at pp.c:21082)
      FuncDecl: quals=None (at pp.c:21082)
        ParamList:  (at pp.c:21082)
          Decl: name='data', quals=[], storage=[] (at pp.c:21082)
            PtrDecl: quals=[] (at pp.c:21082)
              TypeDecl: declname='data', quals=[] (at pp.c:21082)
                IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__RSSI__read', quals=[] (at pp.c:21082)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:21082)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21084)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21084)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21088)
        ID: name='__nesc_result' (at pp.c:21088)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__read' (at pp.c:21088)
          ExprList:  (at pp.c:21088)
            ID: name='CC2420_RSSI' (at pp.c:21088)
            ID: name='data' (at pp.c:21088)
      Return:  (at pp.c:21092)
        ID: name='__nesc_result' (at pp.c:21092)
  FuncDef:  (at pp.c:21097)
    Decl: name='CC2420ControlP__RssiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:21097)
      FuncDecl: quals=None (at pp.c:21097)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__RssiResource__granted', quals=[] (at pp.c:21097)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21099)
      Decl: name='data', quals=[], storage=[] (at pp.c:21100)
        TypeDecl: declname='data', quals=[] (at pp.c:21100)
          IdentifierType: names=['uint16_t'] (at None)
        Constant: type='int', value='0' (at pp.c:21100)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__clr' (at pp.c:21103)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__RSSI__read' (at pp.c:21104)
        ExprList:  (at pp.c:21104)
          UnaryOp: op='&' (at pp.c:21104)
            ID: name='data' (at pp.c:21104)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__set' (at pp.c:21105)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__RssiResource__release' (at pp.c:21107)
      Assignment: op='+=' (at pp.c:21108)
        ID: name='data' (at pp.c:21108)
        Constant: type='int', value='0x7f' (at pp.c:21108)
      Assignment: op='&=' (at pp.c:21109)
        ID: name='data' (at pp.c:21109)
        Constant: type='int', value='0x00ff' (at pp.c:21109)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__ReadRssi__readDone' (at pp.c:21110)
        ExprList:  (at pp.c:21110)
          ID: name='SUCCESS' (at pp.c:21110)
          ID: name='data' (at pp.c:21110)
  FuncDef:  (at pp.c:21114)
    Decl: name='CC2420TransmitP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:21114)
      FuncDecl: quals=None (at pp.c:21114)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SpiResource__granted', quals=[] (at pp.c:21114)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21116)
      Decl: name='cur_state', quals=[], storage=[] (at pp.c:21117)
        TypeDecl: declname='cur_state', quals=[] (at pp.c:21117)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:21119)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21119)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21119)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21119)
        Compound:  (at pp.c:21121)
          Assignment: op='=' (at pp.c:21122)
            ID: name='cur_state' (at pp.c:21122)
            ID: name='CC2420TransmitP__m_state' (at pp.c:21122)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21125)
          ExprList:  (at pp.c:21125)
            ID: name='__nesc_atomic' (at pp.c:21125)
      Switch:  (at pp.c:21127)
        ID: name='cur_state' (at pp.c:21127)
        Compound:  (at pp.c:21127)
          Case:  (at pp.c:21128)
            ID: name='CC2420TransmitP__S_LOAD' (at pp.c:21128)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__loadTXFIFO' (at pp.c:21129)
          Break:  (at pp.c:21130)
          Case:  (at pp.c:21132)
            ID: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:21132)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__attemptSend' (at pp.c:21133)
          Break:  (at pp.c:21134)
          Case:  (at pp.c:21136)
            ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:21136)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CSN__clr' (at pp.c:21137)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__SFLUSHTX__strobe' (at pp.c:21138)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CSN__set' (at pp.c:21139)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:21140)
          Compound:  (at pp.c:21141)
            Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21141)
              TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21141)
                IdentifierType: names=['__nesc_atomic_t'] (at None)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_start' (at pp.c:21141)
            Compound:  (at pp.c:21143)
              Assignment: op='=' (at pp.c:21144)
                ID: name='CC2420TransmitP__m_state' (at pp.c:21144)
                ID: name='CC2420TransmitP__S_STARTED' (at pp.c:21144)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:21147)
              ExprList:  (at pp.c:21147)
                ID: name='__nesc_atomic' (at pp.c:21147)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__Send__sendDone' (at pp.c:21148)
            ExprList:  (at pp.c:21148)
              ID: name='CC2420TransmitP__m_msg' (at pp.c:21148)
              ID: name='ECANCEL' (at pp.c:21148)
          Break:  (at pp.c:21149)
          Default:  (at pp.c:21151)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:21152)
          Break:  (at pp.c:21153)
  FuncDef:  (at pp.c:21158)
    Decl: name='CC2420ReceiveP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:21158)
      FuncDecl: quals=None (at pp.c:21158)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SpiResource__granted', quals=[] (at pp.c:21158)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21160)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__receive' (at pp.c:21168)
  FuncDef:  (at pp.c:21172)
    Decl: name='CC2420SpiP__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:21172)
      FuncDecl: quals=None (at pp.c:21172)
        ParamList:  (at pp.c:21172)
          Decl: name='id', quals=[], storage=[] (at pp.c:21172)
            TypeDecl: declname='id', quals=[] (at pp.c:21172)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__default__granted', quals=[] (at pp.c:21172)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21174)
  FuncDef:  (at pp.c:21178)
    Decl: name='CC2420SpiP__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:21178)
      FuncDecl: quals=None (at pp.c:21178)
        ParamList:  (at pp.c:21178)
          Decl: name='arg_0x102202158', quals=[], storage=[] (at pp.c:21178)
            TypeDecl: declname='arg_0x102202158', quals=[] (at pp.c:21178)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__granted', quals=[] (at pp.c:21178)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21178)
      Switch:  (at pp.c:21180)
        ID: name='arg_0x102202158' (at pp.c:21180)
        Compound:  (at pp.c:21180)
          Case:  (at pp.c:21182)
            ID: name='CC2420SpiC__0__CLIENT_ID' (at pp.c:21182)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__SpiResource__granted' (at pp.c:21184)
          Break:  (at pp.c:21186)
          Case:  (at pp.c:21188)
            ID: name='CC2420SpiC__1__CLIENT_ID' (at pp.c:21188)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__SyncResource__granted' (at pp.c:21190)
          Break:  (at pp.c:21192)
          Case:  (at pp.c:21194)
            ID: name='CC2420SpiC__2__CLIENT_ID' (at pp.c:21194)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__RssiResource__granted' (at pp.c:21196)
          Break:  (at pp.c:21198)
          Case:  (at pp.c:21200)
            ID: name='CC2420SpiC__3__CLIENT_ID' (at pp.c:21200)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__SpiResource__granted' (at pp.c:21202)
          Break:  (at pp.c:21204)
          Case:  (at pp.c:21206)
            ID: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:21206)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__SpiResource__granted' (at pp.c:21208)
          Break:  (at pp.c:21210)
          Default:  (at pp.c:21212)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__Resource__default__granted' (at pp.c:21214)
              ExprList:  (at pp.c:21214)
                ID: name='arg_0x102202158' (at pp.c:21214)
          Break:  (at pp.c:21216)
  FuncDef:  (at pp.c:21223)
    Decl: name='CC2420SpiP__grant__runTask', quals=[], storage=['inline', 'static'] (at pp.c:21223)
      FuncDecl: quals=None (at pp.c:21223)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__grant__runTask', quals=[] (at pp.c:21223)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21225)
      Decl: name='holder', quals=[], storage=[] (at pp.c:21226)
        TypeDecl: declname='holder', quals=[] (at pp.c:21226)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:21229)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21229)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21229)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21229)
        Compound:  (at pp.c:21231)
          Assignment: op='=' (at pp.c:21232)
            ID: name='holder' (at pp.c:21232)
            ID: name='CC2420SpiP__m_holder' (at pp.c:21232)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21235)
          ExprList:  (at pp.c:21235)
            ID: name='__nesc_atomic' (at pp.c:21235)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__Resource__granted' (at pp.c:21236)
        ExprList:  (at pp.c:21236)
          ID: name='holder' (at pp.c:21236)
  FuncDef:  (at pp.c:21240)
    Decl: name='CC2420ControlP__FSCTRL__write', quals=[], storage=['static', 'inline'] (at pp.c:21240)
      FuncDecl: quals=None (at pp.c:21240)
        ParamList:  (at pp.c:21240)
          Decl: name='data', quals=[], storage=[] (at pp.c:21240)
            TypeDecl: declname='data', quals=[] (at pp.c:21240)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__FSCTRL__write', quals=[] (at pp.c:21240)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:21240)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21242)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21242)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21246)
        ID: name='__nesc_result' (at pp.c:21246)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:21246)
          ExprList:  (at pp.c:21246)
            ID: name='CC2420_FSCTRL' (at pp.c:21246)
            ID: name='data' (at pp.c:21246)
      Return:  (at pp.c:21250)
        ID: name='__nesc_result' (at pp.c:21250)
  FuncDef:  (at pp.c:21254)
    Decl: name='CC2420ControlP__MDMCTRL0__write', quals=[], storage=['static', 'inline'] (at pp.c:21254)
      FuncDecl: quals=None (at pp.c:21254)
        ParamList:  (at pp.c:21254)
          Decl: name='data', quals=[], storage=[] (at pp.c:21254)
            TypeDecl: declname='data', quals=[] (at pp.c:21254)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__MDMCTRL0__write', quals=[] (at pp.c:21254)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:21254)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21256)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21256)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21260)
        ID: name='__nesc_result' (at pp.c:21260)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:21260)
          ExprList:  (at pp.c:21260)
            ID: name='CC2420_MDMCTRL0' (at pp.c:21260)
            ID: name='data' (at pp.c:21260)
      Return:  (at pp.c:21264)
        ID: name='__nesc_result' (at pp.c:21264)
  FuncDef:  (at pp.c:21269)
    Decl: name='CC2420ControlP__IEEEADR__write', quals=[], storage=['static', 'inline'] (at pp.c:21269)
      FuncDecl: quals=None (at pp.c:21269)
        ParamList:  (at pp.c:21269)
          Decl: name='offset', quals=[], storage=[] (at pp.c:21269)
            TypeDecl: declname='offset', quals=[] (at pp.c:21269)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:21269)
            PtrDecl: quals=[] (at pp.c:21269)
              TypeDecl: declname='data', quals=[] (at pp.c:21269)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:21269)
            TypeDecl: declname='length', quals=[] (at pp.c:21269)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ControlP__IEEEADR__write', quals=[] (at pp.c:21269)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:21269)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21271)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21271)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21275)
        ID: name='__nesc_result' (at pp.c:21275)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Ram__write' (at pp.c:21275)
          ExprList:  (at pp.c:21275)
            ID: name='CC2420_RAM_IEEEADR' (at pp.c:21275)
            ID: name='offset' (at pp.c:21275)
            ID: name='data' (at pp.c:21275)
            ID: name='length' (at pp.c:21275)
      Return:  (at pp.c:21279)
        ID: name='__nesc_result' (at pp.c:21279)
  FuncDef:  (at pp.c:21284)
    Decl: name='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:21284)
      FuncDecl: quals=None (at pp.c:21284)
        ParamList:  (at pp.c:21284)
          Decl: name='error', quals=[], storage=[] (at pp.c:21284)
            TypeDecl: declname='error', quals=[] (at pp.c:21284)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[] (at pp.c:21284)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21286)
  FuncDef:  (at pp.c:21290)
    Decl: name='CC2420ReceiveP__CC2420Config__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:21290)
      FuncDecl: quals=None (at pp.c:21290)
        ParamList:  (at pp.c:21290)
          Decl: name='error', quals=[], storage=[] (at pp.c:21290)
            TypeDecl: declname='error', quals=[] (at pp.c:21290)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__syncDone', quals=[] (at pp.c:21290)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21292)
  FuncDef:  (at pp.c:21296)
    Decl: name='CC2420ControlP__CC2420Config__syncDone', quals=[], storage=['static', 'inline'] (at pp.c:21296)
      FuncDecl: quals=None (at pp.c:21296)
        ParamList:  (at pp.c:21296)
          Decl: name='error', quals=[], storage=[] (at pp.c:21296)
            TypeDecl: declname='error', quals=[] (at pp.c:21296)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__syncDone', quals=[] (at pp.c:21296)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21296)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CC2420Config__syncDone' (at pp.c:21298)
        ExprList:  (at pp.c:21298)
          ID: name='error' (at pp.c:21298)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__CC2420Config__syncDone' (at pp.c:21300)
        ExprList:  (at pp.c:21300)
          ID: name='error' (at pp.c:21300)
  FuncDef:  (at pp.c:21305)
    Decl: name='CC2420ControlP__syncDone__runTask', quals=[], storage=['inline', 'static'] (at pp.c:21305)
      FuncDecl: quals=None (at pp.c:21305)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__syncDone__runTask', quals=[] (at pp.c:21305)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21307)
      Compound:  (at pp.c:21308)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21308)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21308)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21308)
        Assignment: op='=' (at pp.c:21310)
          ID: name='CC2420ControlP__m_sync_busy' (at pp.c:21310)
          ID: name='FALSE' (at pp.c:21310)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21312)
          ExprList:  (at pp.c:21312)
            ID: name='__nesc_atomic' (at pp.c:21312)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CC2420Config__syncDone' (at pp.c:21313)
        ExprList:  (at pp.c:21313)
          ID: name='SUCCESS' (at pp.c:21313)
  FuncDef:  (at pp.c:21317)
    Decl: name='CC2420ControlP__SyncResource__request', quals=[], storage=['static', 'inline'] (at pp.c:21317)
      FuncDecl: quals=None (at pp.c:21317)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SyncResource__request', quals=[] (at pp.c:21317)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21317)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21319)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21319)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21323)
        ID: name='__nesc_result' (at pp.c:21323)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__request' (at pp.c:21323)
          ExprList:  (at pp.c:21323)
            ID: name='CC2420SpiC__1__CLIENT_ID' (at pp.c:21323)
      Return:  (at pp.c:21327)
        ID: name='__nesc_result' (at pp.c:21327)
  FuncDef:  (at pp.c:21332)
    Decl: name='CC2420ControlP__CC2420Config__sync', quals=[], storage=['inline', 'static'] (at pp.c:21332)
      FuncDecl: quals=None (at pp.c:21332)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__sync', quals=[] (at pp.c:21332)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21334)
      Compound:  (at pp.c:21335)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21335)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21335)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21335)
        Compound:  (at pp.c:21337)
          If:  (at pp.c:21338)
            ID: name='CC2420ControlP__m_sync_busy' (at pp.c:21338)
            Compound:  (at pp.c:21338)
              Compound:  (at pp.c:21339)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:21340)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:21340)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:21342)
                Compound:  (at pp.c:21344)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:21346)
                    ExprList:  (at pp.c:21346)
                      ID: name='__nesc_atomic' (at pp.c:21346)
                  Return:  (at pp.c:21348)
                    ID: name='__nesc_temp' (at pp.c:21348)
          Assignment: op='=' (at pp.c:21353)
            ID: name='CC2420ControlP__m_sync_busy' (at pp.c:21353)
            ID: name='TRUE' (at pp.c:21353)
          If:  (at pp.c:21354)
            BinaryOp: op='==' (at pp.c:21354)
              ID: name='CC2420ControlP__m_state' (at pp.c:21354)
              ID: name='CC2420ControlP__S_XOSC_STARTED' (at pp.c:21354)
            Compound:  (at pp.c:21354)
              FuncCall:  (at None)
                ID: name='CC2420ControlP__SyncResource__request' (at pp.c:21355)
            Compound:  (at pp.c:21359)
              FuncCall:  (at None)
                ID: name='CC2420ControlP__syncDone__postTask' (at pp.c:21360)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21364)
          ExprList:  (at pp.c:21364)
            ID: name='__nesc_atomic' (at pp.c:21364)
      Return:  (at pp.c:21365)
        ID: name='SUCCESS' (at pp.c:21365)
  FuncDef:  (at pp.c:21369)
    Decl: name='CC2420ControlP__sync__runTask', quals=[], storage=['inline', 'static'] (at pp.c:21369)
      FuncDecl: quals=None (at pp.c:21369)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__sync__runTask', quals=[] (at pp.c:21369)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21371)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CC2420Config__sync' (at pp.c:21372)
  FuncDef:  (at pp.c:21376)
    Decl: name='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:21376)
      FuncDecl: quals=None (at pp.c:21376)
        ParamList:  (at pp.c:21376)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21376)
            PtrDecl: quals=[] (at pp.c:21376)
              TypeDecl: declname='msg', quals=[] (at pp.c:21376)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21376)
            TypeDecl: declname='error', quals=[] (at pp.c:21376)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[] (at pp.c:21376)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21378)
  FuncDef:  (at pp.c:21382)
    Decl: name='CC2420TinyosNetworkP__BareSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:21382)
      FuncDecl: quals=None (at pp.c:21382)
        ParamList:  (at pp.c:21382)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21382)
            PtrDecl: quals=[] (at pp.c:21382)
              TypeDecl: declname='msg', quals=[] (at pp.c:21382)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21382)
            TypeDecl: declname='error', quals=[] (at pp.c:21382)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__BareSend__sendDone', quals=[] (at pp.c:21382)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21382)
      FuncCall:  (at None)
        ID: name='CC2420TinyosNetworkP__BareSend__default__sendDone' (at pp.c:21384)
        ExprList:  (at pp.c:21384)
          ID: name='msg' (at pp.c:21384)
          ID: name='error' (at pp.c:21384)
  FuncDef:  (at pp.c:21389)
    Decl: name='CC2420ActiveMessageP__AMSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:21389)
      FuncDecl: quals=None (at pp.c:21389)
        ParamList:  (at pp.c:21389)
          Decl: name='arg_0x102b257d8', quals=[], storage=[] (at pp.c:21389)
            TypeDecl: declname='arg_0x102b257d8', quals=[] (at pp.c:21389)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21389)
            PtrDecl: quals=[] (at pp.c:21389)
              TypeDecl: declname='msg', quals=[] (at pp.c:21389)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21389)
            TypeDecl: declname='error', quals=[] (at pp.c:21389)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMSend__sendDone', quals=[] (at pp.c:21389)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21389)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__AMSend__sendDone' (at pp.c:21391)
        ExprList:  (at pp.c:21391)
          ID: name='arg_0x102b257d8' (at pp.c:21391)
          ID: name='msg' (at pp.c:21391)
          ID: name='error' (at pp.c:21391)
  FuncDef:  (at pp.c:21396)
    Decl: name='CC2420ActiveMessageP__RadioResource__release', quals=[], storage=['static', 'inline'] (at pp.c:21396)
      FuncDecl: quals=None (at pp.c:21396)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioResource__release', quals=[] (at pp.c:21396)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21396)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21398)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21398)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21402)
        ID: name='__nesc_result' (at pp.c:21402)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__Resource__release' (at pp.c:21402)
          ExprList:  (at pp.c:21402)
            ID: name='CC2420ActiveMessageC__CC2420_AM_SEND_ID' (at pp.c:21402)
      Return:  (at pp.c:21406)
        ID: name='__nesc_result' (at pp.c:21406)
  FuncDef:  (at pp.c:21411)
    Decl: name='CC2420ActiveMessageP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:21411)
      FuncDecl: quals=None (at pp.c:21411)
        ParamList:  (at pp.c:21411)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21411)
            PtrDecl: quals=[] (at pp.c:21411)
              TypeDecl: declname='msg', quals=[] (at pp.c:21411)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='result', quals=[], storage=[] (at pp.c:21411)
            TypeDecl: declname='result', quals=[] (at pp.c:21411)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubSend__sendDone', quals=[] (at pp.c:21411)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21413)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioResource__release' (at pp.c:21414)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__AMSend__sendDone' (at pp.c:21415)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__AMPacket__type' (at pp.c:21415)
            ExprList:  (at pp.c:21415)
              ID: name='msg' (at pp.c:21415)
          ID: name='msg' (at pp.c:21415)
          ID: name='result' (at pp.c:21415)
  FuncDef:  (at pp.c:21419)
    Decl: name='CC2420TinyosNetworkP__ActiveSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:21419)
      FuncDecl: quals=None (at pp.c:21419)
        ParamList:  (at pp.c:21419)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21419)
            PtrDecl: quals=[] (at pp.c:21419)
              TypeDecl: declname='msg', quals=[] (at pp.c:21419)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21419)
            TypeDecl: declname='error', quals=[] (at pp.c:21419)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__sendDone', quals=[] (at pp.c:21419)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21419)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SubSend__sendDone' (at pp.c:21421)
        ExprList:  (at pp.c:21421)
          ID: name='msg' (at pp.c:21421)
          ID: name='error' (at pp.c:21421)
  FuncDef:  (at pp.c:21426)
    Decl: name='CC2420TinyosNetworkP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:21426)
      FuncDecl: quals=None (at pp.c:21426)
        ParamList:  (at pp.c:21426)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21426)
            PtrDecl: quals=[] (at pp.c:21426)
              TypeDecl: declname='msg', quals=[] (at pp.c:21426)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21426)
            TypeDecl: declname='error', quals=[] (at pp.c:21426)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__SubSend__sendDone', quals=[] (at pp.c:21426)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21428)
      If:  (at pp.c:21429)
        BinaryOp: op='==' (at pp.c:21429)
          ID: name='CC2420TinyosNetworkP__m_busy_client' (at pp.c:21429)
          ID: name='CC2420TinyosNetworkP__CLIENT_AM' (at pp.c:21429)
        Compound:  (at pp.c:21429)
          FuncCall:  (at None)
            ID: name='CC2420TinyosNetworkP__ActiveSend__sendDone' (at pp.c:21430)
            ExprList:  (at pp.c:21430)
              ID: name='msg' (at pp.c:21430)
              ID: name='error' (at pp.c:21430)
        Compound:  (at pp.c:21434)
          FuncCall:  (at None)
            ID: name='CC2420TinyosNetworkP__BareSend__sendDone' (at pp.c:21435)
            ExprList:  (at pp.c:21435)
              ID: name='msg' (at pp.c:21435)
              ID: name='error' (at pp.c:21435)
  FuncDef:  (at pp.c:21440)
    Decl: name='UniqueSendP__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:21440)
      FuncDecl: quals=None (at pp.c:21440)
        ParamList:  (at pp.c:21440)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21440)
            PtrDecl: quals=[] (at pp.c:21440)
              TypeDecl: declname='msg', quals=[] (at pp.c:21440)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21440)
            TypeDecl: declname='error', quals=[] (at pp.c:21440)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='UniqueSendP__Send__sendDone', quals=[] (at pp.c:21440)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21440)
      FuncCall:  (at None)
        ID: name='CC2420TinyosNetworkP__SubSend__sendDone' (at pp.c:21442)
        ExprList:  (at pp.c:21442)
          ID: name='msg' (at pp.c:21442)
          ID: name='error' (at pp.c:21442)
  FuncDef:  (at pp.c:21447)
    Decl: name='UniqueSendP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:21447)
      FuncDecl: quals=None (at pp.c:21447)
        ParamList:  (at pp.c:21447)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21447)
            PtrDecl: quals=[] (at pp.c:21447)
              TypeDecl: declname='msg', quals=[] (at pp.c:21447)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21447)
            TypeDecl: declname='error', quals=[] (at pp.c:21447)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='UniqueSendP__SubSend__sendDone', quals=[] (at pp.c:21447)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21449)
      FuncCall:  (at None)
        ID: name='UniqueSendP__State__toIdle' (at pp.c:21450)
      FuncCall:  (at None)
        ID: name='UniqueSendP__Send__sendDone' (at pp.c:21451)
        ExprList:  (at pp.c:21451)
          ID: name='msg' (at pp.c:21451)
          ID: name='error' (at pp.c:21451)
  FuncDef:  (at pp.c:21455)
    Decl: name='DefaultLplP__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:21455)
      FuncDecl: quals=None (at pp.c:21455)
        ParamList:  (at pp.c:21455)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21455)
            PtrDecl: quals=[] (at pp.c:21455)
              TypeDecl: declname='msg', quals=[] (at pp.c:21455)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21455)
            TypeDecl: declname='error', quals=[] (at pp.c:21455)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DefaultLplP__Send__sendDone', quals=[] (at pp.c:21455)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21455)
      FuncCall:  (at None)
        ID: name='UniqueSendP__SubSend__sendDone' (at pp.c:21457)
        ExprList:  (at pp.c:21457)
          ID: name='msg' (at pp.c:21457)
          ID: name='error' (at pp.c:21457)
  FuncDef:  (at pp.c:21462)
    Decl: name='DefaultLplP__SendState__toIdle', quals=[], storage=['static', 'inline'] (at pp.c:21462)
      FuncDecl: quals=None (at pp.c:21462)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SendState__toIdle', quals=[] (at pp.c:21462)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21462)
      FuncCall:  (at None)
        ID: name='StateImplP__State__toIdle' (at pp.c:21464)
        ExprList:  (at pp.c:21464)
          Constant: type='int', value='5U' (at pp.c:21464)
  FuncDef:  (at pp.c:21469)
    Decl: name='CC2420PacketP__Acks__wasAcked', quals=[], storage=['inline', 'static'] (at pp.c:21469)
      FuncDecl: quals=None (at pp.c:21469)
        ParamList:  (at pp.c:21469)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:21469)
            PtrDecl: quals=[] (at pp.c:21469)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:21469)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__Acks__wasAcked', quals=[] (at pp.c:21469)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:21471)
      Return:  (at pp.c:21472)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_int8' (at pp.c:21472)
          ExprList:  (at None)
            StructRef: type='.' (at None)
              StructRef: type='->' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:21472)
                  ExprList:  (at pp.c:21472)
                    ID: name='p_msg' (at pp.c:21472)
                ID: name='ack' (at pp.c:21472)
              ID: name='nxdata' (at pp.c:21472)
  FuncDef:  (at pp.c:21476)
    Decl: name='DefaultLplP__PacketAcknowledgements__wasAcked', quals=[], storage=['static', 'inline'] (at pp.c:21476)
      FuncDecl: quals=None (at pp.c:21476)
        ParamList:  (at pp.c:21476)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21476)
            PtrDecl: quals=[] (at pp.c:21476)
              TypeDecl: declname='msg', quals=[] (at pp.c:21476)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__PacketAcknowledgements__wasAcked', quals=[] (at pp.c:21476)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:21476)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21478)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21478)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21482)
        ID: name='__nesc_result' (at pp.c:21482)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__Acks__wasAcked' (at pp.c:21482)
          ExprList:  (at pp.c:21482)
            ID: name='msg' (at pp.c:21482)
      Return:  (at pp.c:21486)
        ID: name='__nesc_result' (at pp.c:21486)
  FuncDef:  (at pp.c:21491)
    Decl: name='VirtualizeTimerC__0__Timer__isRunning', quals=[], storage=['inline', 'static'] (at pp.c:21491)
      FuncDecl: quals=None (at pp.c:21491)
        ParamList:  (at pp.c:21491)
          Decl: name='num', quals=[], storage=[] (at pp.c:21491)
            TypeDecl: declname='num', quals=[] (at pp.c:21491)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__isRunning', quals=[] (at pp.c:21491)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:21492)
      Return:  (at pp.c:21493)
        StructRef: type='.' (at pp.c:21493)
          ArrayRef:  (at pp.c:21493)
            ID: name='VirtualizeTimerC__0__m_timers' (at pp.c:21493)
            ID: name='num' (at pp.c:21493)
          ID: name='isrunning' (at pp.c:21493)
  FuncDef:  (at pp.c:21497)
    Decl: name='DefaultLplP__SendDoneTimer__isRunning', quals=[], storage=['static', 'inline'] (at pp.c:21497)
      FuncDecl: quals=None (at pp.c:21497)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SendDoneTimer__isRunning', quals=[] (at pp.c:21497)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:21497)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21499)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21499)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21503)
        ID: name='__nesc_result' (at pp.c:21503)
        FuncCall:  (at None)
          ID: name='VirtualizeTimerC__0__Timer__isRunning' (at pp.c:21503)
          ExprList:  (at pp.c:21503)
            Constant: type='int', value='4U' (at pp.c:21503)
      Return:  (at pp.c:21507)
        ID: name='__nesc_result' (at pp.c:21507)
  FuncDef:  (at pp.c:21512)
    Decl: name='DefaultLplP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:21512)
      FuncDecl: quals=None (at pp.c:21512)
        ParamList:  (at pp.c:21512)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21512)
            PtrDecl: quals=[] (at pp.c:21512)
              TypeDecl: declname='msg', quals=[] (at pp.c:21512)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21512)
            TypeDecl: declname='error', quals=[] (at pp.c:21512)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DefaultLplP__SubSend__sendDone', quals=[] (at pp.c:21512)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21514)
      Switch:  (at pp.c:21516)
        FuncCall:  (at None)
          ID: name='DefaultLplP__SendState__getState' (at pp.c:21516)
        Compound:  (at pp.c:21516)
          Case:  (at pp.c:21517)
            ID: name='S_LPL_SENDING' (at pp.c:21517)
            If:  (at pp.c:21518)
              FuncCall:  (at None)
                ID: name='DefaultLplP__SendDoneTimer__isRunning' (at pp.c:21518)
              Compound:  (at pp.c:21518)
                If:  (at pp.c:21519)
                  UnaryOp: op='!' (at None)
                    FuncCall:  (at None)
                      ID: name='DefaultLplP__PacketAcknowledgements__wasAcked' (at pp.c:21519)
                      ExprList:  (at pp.c:21519)
                        ID: name='msg' (at pp.c:21519)
                  Compound:  (at pp.c:21519)
                    FuncCall:  (at None)
                      ID: name='DefaultLplP__resend__postTask' (at pp.c:21520)
                    Return:  (at pp.c:21521)
          Break:  (at pp.c:21524)
          Case:  (at pp.c:21526)
            ID: name='S_LPL_CLEAN_UP' (at pp.c:21526)
            Break:  (at pp.c:21531)
          Default:  (at pp.c:21533)
            Break:  (at pp.c:21534)
      FuncCall:  (at None)
        ID: name='DefaultLplP__SendState__toIdle' (at pp.c:21537)
      FuncCall:  (at None)
        ID: name='DefaultLplP__SendDoneTimer__stop' (at pp.c:21538)
      FuncCall:  (at None)
        ID: name='DefaultLplP__startOffTimer' (at pp.c:21539)
      FuncCall:  (at None)
        ID: name='DefaultLplP__Send__sendDone' (at pp.c:21540)
        ExprList:  (at pp.c:21540)
          ID: name='msg' (at pp.c:21540)
          ID: name='error' (at pp.c:21540)
  FuncDef:  (at pp.c:21544)
    Decl: name='CC2420CsmaP__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:21544)
      FuncDecl: quals=None (at pp.c:21544)
        ParamList:  (at pp.c:21544)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21544)
            PtrDecl: quals=[] (at pp.c:21544)
              TypeDecl: declname='msg', quals=[] (at pp.c:21544)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21544)
            TypeDecl: declname='error', quals=[] (at pp.c:21544)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__Send__sendDone', quals=[] (at pp.c:21544)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21544)
      FuncCall:  (at None)
        ID: name='DefaultLplP__SubSend__sendDone' (at pp.c:21546)
        ExprList:  (at pp.c:21546)
          ID: name='msg' (at pp.c:21546)
          ID: name='error' (at pp.c:21546)
  FuncDef:  (at pp.c:21551)
    Decl: name='CC2420CsmaP__stopDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:21551)
      FuncDecl: quals=None (at pp.c:21551)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__stopDone_task__postTask', quals=[] (at pp.c:21551)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21551)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21553)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21553)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21557)
        ID: name='__nesc_result' (at pp.c:21557)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:21557)
          ExprList:  (at pp.c:21557)
            ID: name='CC2420CsmaP__stopDone_task' (at pp.c:21557)
      Return:  (at pp.c:21561)
        ID: name='__nesc_result' (at pp.c:21561)
  FuncDef:  (at pp.c:21566)
    Decl: name='CC2420CsmaP__CC2420Power__stopVReg', quals=[], storage=['static', 'inline'] (at pp.c:21566)
      FuncDecl: quals=None (at pp.c:21566)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__stopVReg', quals=[] (at pp.c:21566)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21566)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21568)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21568)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21572)
        ID: name='__nesc_result' (at pp.c:21572)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Power__stopVReg' (at pp.c:21572)
      Return:  (at pp.c:21576)
        ID: name='__nesc_result' (at pp.c:21576)
  FuncDef:  (at pp.c:21581)
    Decl: name='ecombine', quals=[], storage=['inline', 'static'] (at pp.c:21581)
      FuncDecl: quals=None (at pp.c:21581)
        ParamList:  (at pp.c:21581)
          Decl: name='r1', quals=[], storage=[] (at pp.c:21581)
            TypeDecl: declname='r1', quals=[] (at pp.c:21581)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='r2', quals=[], storage=[] (at pp.c:21581)
            TypeDecl: declname='r2', quals=[] (at pp.c:21581)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='ecombine', quals=[] (at pp.c:21581)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21586)
      Return:  (at pp.c:21587)
        TernaryOp:  (at pp.c:21587)
          BinaryOp: op='==' (at pp.c:21587)
            ID: name='r1' (at pp.c:21587)
            ID: name='r2' (at pp.c:21587)
          ID: name='r1' (at pp.c:21587)
          ID: name='FAIL' (at pp.c:21587)
  FuncDef:  (at pp.c:21591)
    Decl: name='CC2420CsmaP__SubControl__stop', quals=[], storage=['static', 'inline'] (at pp.c:21591)
      FuncDecl: quals=None (at pp.c:21591)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubControl__stop', quals=[] (at pp.c:21591)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21591)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21593)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21593)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21597)
        ID: name='__nesc_result' (at pp.c:21597)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__StdControl__stop' (at pp.c:21597)
      Assignment: op='=' (at pp.c:21599)
        ID: name='__nesc_result' (at pp.c:21599)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:21599)
          ExprList:  (at pp.c:21599)
            ID: name='__nesc_result' (at pp.c:21599)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__StdControl__stop' (at pp.c:21599)
      Return:  (at pp.c:21603)
        ID: name='__nesc_result' (at pp.c:21603)
  FuncDef:  (at pp.c:21608)
    Decl: name='CC2420CsmaP__shutdown', quals=[], storage=['inline', 'static'] (at pp.c:21608)
      FuncDecl: quals=None (at pp.c:21608)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__shutdown', quals=[] (at pp.c:21608)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21610)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubControl__stop' (at pp.c:21611)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Power__stopVReg' (at pp.c:21612)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__stopDone_task__postTask' (at pp.c:21613)
  FuncDef:  (at pp.c:21617)
    Decl: name='CC2420CsmaP__sendDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:21617)
      FuncDecl: quals=None (at pp.c:21617)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__sendDone_task__runTask', quals=[] (at pp.c:21617)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21619)
      Decl: name='packetErr', quals=[], storage=[] (at pp.c:21620)
        TypeDecl: declname='packetErr', quals=[] (at pp.c:21620)
          IdentifierType: names=['error_t'] (at None)
      Compound:  (at pp.c:21623)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21623)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21623)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21623)
        Assignment: op='=' (at pp.c:21625)
          ID: name='packetErr' (at pp.c:21625)
          ID: name='CC2420CsmaP__sendErr' (at pp.c:21625)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21627)
          ExprList:  (at pp.c:21627)
            ID: name='__nesc_atomic' (at pp.c:21627)
      If:  (at pp.c:21628)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:21628)
          ExprList:  (at pp.c:21628)
            ID: name='CC2420CsmaP__S_STOPPING' (at pp.c:21628)
        Compound:  (at pp.c:21628)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__shutdown' (at pp.c:21629)
        Compound:  (at pp.c:21631)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:21632)
            ExprList:  (at pp.c:21632)
              ID: name='CC2420CsmaP__S_STARTED' (at pp.c:21632)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__Send__sendDone' (at pp.c:21635)
        ExprList:  (at pp.c:21635)
          ID: name='CC2420CsmaP__m_msg' (at pp.c:21635)
          ID: name='packetErr' (at pp.c:21635)
  FuncDef:  (at pp.c:21639)
    Decl: name='DefaultLplP__SubControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:21639)
      FuncDecl: quals=None (at pp.c:21639)
        ParamList:  (at pp.c:21639)
          Decl: name='error', quals=[], storage=[] (at pp.c:21639)
            TypeDecl: declname='error', quals=[] (at pp.c:21639)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DefaultLplP__SubControl__stopDone', quals=[] (at pp.c:21639)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21641)
      If:  (at pp.c:21642)
        UnaryOp: op='!' (at pp.c:21642)
          ID: name='error' (at pp.c:21642)
        Compound:  (at pp.c:21642)
          If:  (at pp.c:21645)
            BinaryOp: op='||' (at None)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__SendState__getState' (at pp.c:21647)
                ID: name='S_LPL_FIRST_MESSAGE' (at pp.c:21647)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__SendState__getState' (at pp.c:21648)
                ID: name='S_LPL_SENDING' (at pp.c:21648)
            Compound:  (at pp.c:21648)
              FuncCall:  (at None)
                ID: name='DefaultLplP__startRadio__postTask' (at pp.c:21650)
            Compound:  (at pp.c:21652)
              FuncCall:  (at None)
                ID: name='DefaultLplP__OffTimer__stop' (at pp.c:21653)
              FuncCall:  (at None)
                ID: name='DefaultLplP__SendDoneTimer__stop' (at pp.c:21654)
  FuncDef:  (at pp.c:21660)
    Decl: name='PowerCycleP__RadioPowerState__forceState', quals=[], storage=['static', 'inline'] (at pp.c:21660)
      FuncDecl: quals=None (at pp.c:21660)
        ParamList:  (at pp.c:21660)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:21660)
            TypeDecl: declname='reqState', quals=[] (at pp.c:21660)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='PowerCycleP__RadioPowerState__forceState', quals=[] (at pp.c:21660)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21660)
      FuncCall:  (at None)
        ID: name='StateImplP__State__forceState' (at pp.c:21662)
        ExprList:  (at pp.c:21662)
          Constant: type='int', value='3U' (at pp.c:21662)
          ID: name='reqState' (at pp.c:21662)
  FuncDef:  (at pp.c:21667)
    Decl: name='PowerCycleP__SubControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:21667)
      FuncDecl: quals=None (at pp.c:21667)
        ParamList:  (at pp.c:21667)
          Decl: name='error', quals=[], storage=[] (at pp.c:21667)
            TypeDecl: declname='error', quals=[] (at pp.c:21667)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PowerCycleP__SubControl__stopDone', quals=[] (at pp.c:21667)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21669)
      FuncCall:  (at None)
        ID: name='PowerCycleP__RadioPowerState__forceState' (at pp.c:21670)
        ExprList:  (at pp.c:21670)
          ID: name='PowerCycleP__S_OFF' (at pp.c:21670)
      If:  (at pp.c:21673)
        FuncCall:  (at None)
          ID: name='PowerCycleP__finishSplitControlRequests' (at pp.c:21673)
        Compound:  (at pp.c:21673)
          Return:  (at pp.c:21674)
        Compound:  (at pp.c:21676)
          If:  (at pp.c:21678)
            FuncCall:  (at None)
              ID: name='PowerCycleP__isDutyCycling' (at pp.c:21678)
            Compound:  (at pp.c:21678)
              FuncCall:  (at None)
                ID: name='PowerCycleP__OnTimer__startOneShot' (at pp.c:21679)
                ExprList:  (at pp.c:21679)
                  ID: name='PowerCycleP__sleepInterval' (at pp.c:21679)
  FuncDef:  (at pp.c:21685)
    Decl: name='CC2420CsmaP__SplitControl__stopDone', quals=[], storage=['static', 'inline'] (at pp.c:21685)
      FuncDecl: quals=None (at pp.c:21685)
        ParamList:  (at pp.c:21685)
          Decl: name='error', quals=[], storage=[] (at pp.c:21685)
            TypeDecl: declname='error', quals=[] (at pp.c:21685)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControl__stopDone', quals=[] (at pp.c:21685)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21685)
      FuncCall:  (at None)
        ID: name='PowerCycleP__SubControl__stopDone' (at pp.c:21687)
        ExprList:  (at pp.c:21687)
          ID: name='error' (at pp.c:21687)
      FuncCall:  (at None)
        ID: name='DefaultLplP__SubControl__stopDone' (at pp.c:21689)
        ExprList:  (at pp.c:21689)
          ID: name='error' (at pp.c:21689)
  FuncDef:  (at pp.c:21694)
    Decl: name='CC2420CsmaP__stopDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:21694)
      FuncDecl: quals=None (at pp.c:21694)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__stopDone_task__runTask', quals=[] (at pp.c:21694)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21696)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:21697)
        ExprList:  (at pp.c:21697)
          ID: name='CC2420CsmaP__S_STOPPED' (at pp.c:21697)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SplitControl__stopDone' (at pp.c:21698)
        ExprList:  (at pp.c:21698)
          ID: name='SUCCESS' (at pp.c:21698)
  FuncDef:  (at pp.c:21702)
    Decl: name='DefaultLplP__RadioPowerState__forceState', quals=[], storage=['static', 'inline'] (at pp.c:21702)
      FuncDecl: quals=None (at pp.c:21702)
        ParamList:  (at pp.c:21702)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:21702)
            TypeDecl: declname='reqState', quals=[] (at pp.c:21702)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioPowerState__forceState', quals=[] (at pp.c:21702)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21702)
      FuncCall:  (at None)
        ID: name='StateImplP__State__forceState' (at pp.c:21704)
        ExprList:  (at pp.c:21704)
          Constant: type='int', value='3U' (at pp.c:21704)
          ID: name='reqState' (at pp.c:21704)
  FuncDef:  (at pp.c:21709)
    Decl: name='DefaultLplP__SubControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:21709)
      FuncDecl: quals=None (at pp.c:21709)
        ParamList:  (at pp.c:21709)
          Decl: name='error', quals=[], storage=[] (at pp.c:21709)
            TypeDecl: declname='error', quals=[] (at pp.c:21709)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DefaultLplP__SubControl__startDone', quals=[] (at pp.c:21709)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21711)
      If:  (at pp.c:21712)
        UnaryOp: op='!' (at pp.c:21712)
          ID: name='error' (at pp.c:21712)
        Compound:  (at pp.c:21712)
          FuncCall:  (at None)
            ID: name='DefaultLplP__RadioPowerState__forceState' (at pp.c:21713)
            ExprList:  (at pp.c:21713)
              ID: name='DefaultLplP__S_ON' (at pp.c:21713)
          If:  (at pp.c:21716)
            BinaryOp: op='||' (at None)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__SendState__getState' (at pp.c:21718)
                ID: name='S_LPL_FIRST_MESSAGE' (at pp.c:21718)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__SendState__getState' (at pp.c:21719)
                ID: name='S_LPL_SENDING' (at pp.c:21719)
            Compound:  (at pp.c:21719)
              FuncCall:  (at None)
                ID: name='DefaultLplP__initializeSend' (at pp.c:21720)
  FuncDef:  (at pp.c:21726)
    Decl: name='PowerCycleP__SubControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:21726)
      FuncDecl: quals=None (at pp.c:21726)
        ParamList:  (at pp.c:21726)
          Decl: name='error', quals=[], storage=[] (at pp.c:21726)
            TypeDecl: declname='error', quals=[] (at pp.c:21726)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PowerCycleP__SubControl__startDone', quals=[] (at pp.c:21726)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21728)
      FuncCall:  (at None)
        ID: name='PowerCycleP__RadioPowerState__forceState' (at pp.c:21729)
        ExprList:  (at pp.c:21729)
          ID: name='PowerCycleP__S_ON' (at pp.c:21729)
      If:  (at pp.c:21732)
        FuncCall:  (at None)
          ID: name='PowerCycleP__finishSplitControlRequests' (at pp.c:21732)
        Compound:  (at pp.c:21732)
          Return:  (at pp.c:21733)
        Compound:  (at pp.c:21735)
          If:  (at pp.c:21737)
            FuncCall:  (at None)
              ID: name='PowerCycleP__isDutyCycling' (at pp.c:21737)
            Compound:  (at pp.c:21737)
              FuncCall:  (at None)
                ID: name='PowerCycleP__getCca__postTask' (at pp.c:21738)
  FuncDef:  (at pp.c:21744)
    Decl: name='CC2420CsmaP__SplitControl__startDone', quals=[], storage=['static', 'inline'] (at pp.c:21744)
      FuncDecl: quals=None (at pp.c:21744)
        ParamList:  (at pp.c:21744)
          Decl: name='error', quals=[], storage=[] (at pp.c:21744)
            TypeDecl: declname='error', quals=[] (at pp.c:21744)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControl__startDone', quals=[] (at pp.c:21744)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21744)
      FuncCall:  (at None)
        ID: name='PowerCycleP__SubControl__startDone' (at pp.c:21746)
        ExprList:  (at pp.c:21746)
          ID: name='error' (at pp.c:21746)
      FuncCall:  (at None)
        ID: name='DefaultLplP__SubControl__startDone' (at pp.c:21748)
        ExprList:  (at pp.c:21748)
          ID: name='error' (at pp.c:21748)
  FuncDef:  (at pp.c:21753)
    Decl: name='CC2420ControlP__SpiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:21753)
      FuncDecl: quals=None (at pp.c:21753)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SpiResource__release', quals=[] (at pp.c:21753)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21753)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21755)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21755)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21759)
        ID: name='__nesc_result' (at pp.c:21759)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__release' (at pp.c:21759)
          ExprList:  (at pp.c:21759)
            ID: name='CC2420SpiC__0__CLIENT_ID' (at pp.c:21759)
      Return:  (at pp.c:21763)
        ID: name='__nesc_result' (at pp.c:21763)
  FuncDef:  (at pp.c:21768)
    Decl: name='CC2420ControlP__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:21768)
      FuncDecl: quals=None (at pp.c:21768)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__Resource__release', quals=[] (at pp.c:21768)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21770)
      Compound:  (at pp.c:21771)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21771)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21771)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21771)
        Compound:  (at pp.c:21773)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__CSN__set' (at pp.c:21774)
          Compound:  (at pp.c:21775)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:21776)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:21776)
                IdentifierType: names=['char', 'unsigned'] (at None)
              FuncCall:  (at None)
                ID: name='CC2420ControlP__SpiResource__release' (at pp.c:21778)
            Compound:  (at pp.c:21780)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_end' (at pp.c:21782)
                ExprList:  (at pp.c:21782)
                  ID: name='__nesc_atomic' (at pp.c:21782)
              Return:  (at pp.c:21784)
                ID: name='__nesc_temp' (at pp.c:21784)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21789)
          ExprList:  (at pp.c:21789)
            ID: name='__nesc_atomic' (at pp.c:21789)
  FuncDef:  (at pp.c:21793)
    Decl: name='CC2420CsmaP__Resource__release', quals=[], storage=['static', 'inline'] (at pp.c:21793)
      FuncDecl: quals=None (at pp.c:21793)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__Resource__release', quals=[] (at pp.c:21793)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21793)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21795)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21795)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21799)
        ID: name='__nesc_result' (at pp.c:21799)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__Resource__release' (at pp.c:21799)
      Return:  (at pp.c:21803)
        ID: name='__nesc_result' (at pp.c:21803)
  FuncDef:  (at pp.c:21808)
    Decl: name='CC2420ControlP__CC2420Power__rxOn', quals=[], storage=['inline', 'static'] (at pp.c:21808)
      FuncDecl: quals=None (at pp.c:21808)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__rxOn', quals=[] (at pp.c:21808)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21810)
      Compound:  (at pp.c:21811)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21811)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21811)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21811)
        Compound:  (at pp.c:21813)
          If:  (at pp.c:21814)
            BinaryOp: op='!=' (at pp.c:21814)
              ID: name='CC2420ControlP__m_state' (at pp.c:21814)
              ID: name='CC2420ControlP__S_XOSC_STARTED' (at pp.c:21814)
            Compound:  (at pp.c:21814)
              Compound:  (at pp.c:21815)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:21816)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:21816)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:21818)
                Compound:  (at pp.c:21820)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:21822)
                    ExprList:  (at pp.c:21822)
                      ID: name='__nesc_atomic' (at pp.c:21822)
                  Return:  (at pp.c:21824)
                    ID: name='__nesc_temp' (at pp.c:21824)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__SRXON__strobe' (at pp.c:21829)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21832)
          ExprList:  (at pp.c:21832)
            ID: name='__nesc_atomic' (at pp.c:21832)
      Return:  (at pp.c:21833)
        ID: name='SUCCESS' (at pp.c:21833)
  FuncDef:  (at pp.c:21837)
    Decl: name='CC2420CsmaP__CC2420Power__rxOn', quals=[], storage=['static', 'inline'] (at pp.c:21837)
      FuncDecl: quals=None (at pp.c:21837)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__rxOn', quals=[] (at pp.c:21837)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21837)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21839)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21839)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21843)
        ID: name='__nesc_result' (at pp.c:21843)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Power__rxOn' (at pp.c:21843)
      Return:  (at pp.c:21847)
        ID: name='__nesc_result' (at pp.c:21847)
  FuncDef:  (at pp.c:21852)
    Decl: name='HplMsp430InterruptP__Port10__enable', quals=[], storage=['inline', 'static'] (at pp.c:21852)
      FuncDecl: quals=None (at pp.c:21852)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port10__enable', quals=[] (at pp.c:21852)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21854)
      Assignment: op='|=' (at pp.c:21856)
        ID: name='P1IE' (at pp.c:21856)
        BinaryOp: op='<<' (at pp.c:21856)
          Constant: type='int', value='1' (at pp.c:21856)
          Constant: type='int', value='0' (at pp.c:21856)
  FuncDef:  (at pp.c:21860)
    Decl: name='Msp430InterruptC__1__HplInterrupt__enable', quals=[], storage=['static', 'inline'] (at pp.c:21860)
      FuncDecl: quals=None (at pp.c:21860)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__enable', quals=[] (at pp.c:21860)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21860)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port10__enable' (at pp.c:21862)
  FuncDef:  (at pp.c:21867)
    Decl: name='HplMsp430InterruptP__Port10__edge', quals=[], storage=['inline', 'static'] (at pp.c:21867)
      FuncDecl: quals=None (at pp.c:21867)
        ParamList:  (at pp.c:21867)
          Decl: name='l2h', quals=[], storage=[] (at pp.c:21867)
            TypeDecl: declname='l2h', quals=[] (at pp.c:21867)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port10__edge', quals=[] (at pp.c:21867)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21869)
      Compound:  (at pp.c:21872)
        If:  (at pp.c:21873)
          ID: name='l2h' (at pp.c:21873)
          Compound:  (at pp.c:21873)
            Assignment: op='&=' (at pp.c:21875)
              ID: name='P1IES' (at pp.c:21875)
              UnaryOp: op='~' (at pp.c:21875)
                BinaryOp: op='<<' (at pp.c:21875)
                  Constant: type='int', value='1' (at pp.c:21875)
                  Constant: type='int', value='0' (at pp.c:21875)
          Compound:  (at pp.c:21877)
            Assignment: op='|=' (at pp.c:21879)
              ID: name='P1IES' (at pp.c:21879)
              BinaryOp: op='<<' (at pp.c:21879)
                Constant: type='int', value='1' (at pp.c:21879)
                Constant: type='int', value='0' (at pp.c:21879)
  FuncDef:  (at pp.c:21885)
    Decl: name='Msp430InterruptC__1__HplInterrupt__edge', quals=[], storage=['static', 'inline'] (at pp.c:21885)
      FuncDecl: quals=None (at pp.c:21885)
        ParamList:  (at pp.c:21885)
          Decl: name='low_to_high', quals=[], storage=[] (at pp.c:21885)
            TypeDecl: declname='low_to_high', quals=[] (at pp.c:21885)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__edge', quals=[] (at pp.c:21885)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21885)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port10__edge' (at pp.c:21887)
        ExprList:  (at pp.c:21887)
          ID: name='low_to_high' (at pp.c:21887)
  FuncDef:  (at pp.c:21892)
    Decl: name='Msp430InterruptC__1__enable', quals=[], storage=['inline', 'static'] (at pp.c:21892)
      FuncDecl: quals=None (at pp.c:21892)
        ParamList:  (at pp.c:21892)
          Decl: name='rising', quals=[], storage=[] (at pp.c:21892)
            TypeDecl: declname='rising', quals=[] (at pp.c:21892)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__enable', quals=[] (at pp.c:21892)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21894)
      Compound:  (at pp.c:21897)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__Interrupt__disable' (at pp.c:21898)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__HplInterrupt__edge' (at pp.c:21899)
          ExprList:  (at pp.c:21899)
            ID: name='rising' (at pp.c:21899)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__HplInterrupt__enable' (at pp.c:21900)
      Return:  (at pp.c:21902)
        ID: name='SUCCESS' (at pp.c:21902)
  FuncDef:  (at pp.c:21909)
    Decl: name='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[], storage=['inline', 'static'] (at pp.c:21909)
      FuncDecl: quals=None (at pp.c:21909)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[] (at pp.c:21909)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21911)
      Return:  (at pp.c:21912)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__enable' (at pp.c:21912)
          ExprList:  (at pp.c:21912)
            ID: name='FALSE' (at pp.c:21912)
  FuncDef:  (at pp.c:21916)
    Decl: name='CC2420ReceiveP__InterruptFIFOP__enableFallingEdge', quals=[], storage=['static', 'inline'] (at pp.c:21916)
      FuncDecl: quals=None (at pp.c:21916)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__enableFallingEdge', quals=[] (at pp.c:21916)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21916)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21918)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21918)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21922)
        ID: name='__nesc_result' (at pp.c:21922)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__Interrupt__enableFallingEdge' (at pp.c:21922)
      Return:  (at pp.c:21926)
        ID: name='__nesc_result' (at pp.c:21926)
  FuncDef:  (at pp.c:21931)
    Decl: name='CC2420ReceiveP__StdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:21931)
      FuncDecl: quals=None (at pp.c:21931)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__StdControl__start', quals=[] (at pp.c:21931)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21933)
      Compound:  (at pp.c:21934)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21934)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21934)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21934)
        Compound:  (at pp.c:21936)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__reset_state' (at pp.c:21937)
          Assignment: op='=' (at pp.c:21938)
            ID: name='CC2420ReceiveP__m_state' (at pp.c:21938)
            ID: name='CC2420ReceiveP__S_STARTED' (at pp.c:21938)
          Assignment: op='=' (at pp.c:21939)
            ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:21939)
            ID: name='FALSE' (at pp.c:21939)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__InterruptFIFOP__enableFallingEdge' (at pp.c:21944)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21947)
          ExprList:  (at pp.c:21947)
            ID: name='__nesc_atomic' (at pp.c:21947)
      Return:  (at pp.c:21948)
        ID: name='SUCCESS' (at pp.c:21948)
  FuncDef:  (at pp.c:21952)
    Decl: name='CC2420TransmitP__StdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:21952)
      FuncDecl: quals=None (at pp.c:21952)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__StdControl__start', quals=[] (at pp.c:21952)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21954)
      Compound:  (at pp.c:21955)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21955)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21955)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21955)
        Compound:  (at pp.c:21957)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CaptureSFD__captureRisingEdge' (at pp.c:21958)
          Assignment: op='=' (at pp.c:21959)
            ID: name='CC2420TransmitP__m_state' (at pp.c:21959)
            ID: name='CC2420TransmitP__S_STARTED' (at pp.c:21959)
          Assignment: op='=' (at pp.c:21960)
            ID: name='CC2420TransmitP__m_receiving' (at pp.c:21960)
            ID: name='FALSE' (at pp.c:21960)
          Assignment: op='=' (at pp.c:21961)
            ID: name='CC2420TransmitP__abortSpiRelease' (at pp.c:21961)
            ID: name='FALSE' (at pp.c:21961)
          Assignment: op='=' (at pp.c:21962)
            ID: name='CC2420TransmitP__m_tx_power' (at pp.c:21962)
            Constant: type='int', value='0' (at pp.c:21962)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21965)
          ExprList:  (at pp.c:21965)
            ID: name='__nesc_atomic' (at pp.c:21965)
      Return:  (at pp.c:21966)
        ID: name='SUCCESS' (at pp.c:21966)
  FuncDef:  (at pp.c:21970)
    Decl: name='CC2420CsmaP__SubControl__start', quals=[], storage=['static', 'inline'] (at pp.c:21970)
      FuncDecl: quals=None (at pp.c:21970)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubControl__start', quals=[] (at pp.c:21970)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21970)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21972)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21972)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21976)
        ID: name='__nesc_result' (at pp.c:21976)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__StdControl__start' (at pp.c:21976)
      Assignment: op='=' (at pp.c:21978)
        ID: name='__nesc_result' (at pp.c:21978)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:21978)
          ExprList:  (at pp.c:21978)
            ID: name='__nesc_result' (at pp.c:21978)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__StdControl__start' (at pp.c:21978)
      Return:  (at pp.c:21982)
        ID: name='__nesc_result' (at pp.c:21982)
  FuncDef:  (at pp.c:21987)
    Decl: name='CC2420CsmaP__startDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:21987)
      FuncDecl: quals=None (at pp.c:21987)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__startDone_task__runTask', quals=[] (at pp.c:21987)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21989)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubControl__start' (at pp.c:21990)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Power__rxOn' (at pp.c:21991)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__Resource__release' (at pp.c:21992)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:21993)
        ExprList:  (at pp.c:21993)
          ID: name='CC2420CsmaP__S_STARTED' (at pp.c:21993)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SplitControl__startDone' (at pp.c:21994)
        ExprList:  (at pp.c:21994)
          ID: name='SUCCESS' (at pp.c:21994)
  FuncDef:  (at pp.c:21998)
    Decl: name='TelosSerialP__Resource__granted', quals=[], storage=['inline', 'static'] (at pp.c:21998)
      FuncDecl: quals=None (at pp.c:21998)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TelosSerialP__Resource__granted', quals=[] (at pp.c:21998)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22000)
  FuncDef:  (at pp.c:22004)
    Decl: name='Msp430UartP__0__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:22004)
      FuncDecl: quals=None (at pp.c:22004)
        ParamList:  (at pp.c:22004)
          Decl: name='id', quals=[], storage=[] (at pp.c:22004)
            TypeDecl: declname='id', quals=[] (at pp.c:22004)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__Resource__default__granted', quals=[] (at pp.c:22004)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22006)
  FuncDef:  (at pp.c:22010)
    Decl: name='Msp430UartP__0__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:22010)
      FuncDecl: quals=None (at pp.c:22010)
        ParamList:  (at pp.c:22010)
          Decl: name='arg_0x101bc50c8', quals=[], storage=[] (at pp.c:22010)
            TypeDecl: declname='arg_0x101bc50c8', quals=[] (at pp.c:22010)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__Resource__granted', quals=[] (at pp.c:22010)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22010)
      Switch:  (at pp.c:22012)
        ID: name='arg_0x101bc50c8' (at pp.c:22012)
        Compound:  (at pp.c:22012)
          Case:  (at pp.c:22014)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:22014)
            FuncCall:  (at None)
              ID: name='TelosSerialP__Resource__granted' (at pp.c:22016)
          Break:  (at pp.c:22018)
          Default:  (at pp.c:22020)
            FuncCall:  (at None)
              ID: name='Msp430UartP__0__Resource__default__granted' (at pp.c:22022)
              ExprList:  (at pp.c:22022)
                ID: name='arg_0x101bc50c8' (at pp.c:22022)
          Break:  (at pp.c:22024)
  FuncDef:  (at pp.c:22031)
    Decl: name='Msp430UartP__0__UsartResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:22031)
      FuncDecl: quals=None (at pp.c:22031)
        ParamList:  (at pp.c:22031)
          Decl: name='id', quals=[], storage=[] (at pp.c:22031)
            TypeDecl: declname='id', quals=[] (at pp.c:22031)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UsartResource__granted', quals=[] (at pp.c:22031)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22033)
      FuncCall:  (at None)
        ID: name='Msp430UartP__0__Resource__granted' (at pp.c:22034)
        ExprList:  (at pp.c:22034)
          ID: name='id' (at pp.c:22034)
  FuncDef:  (at pp.c:22038)
    Decl: name='ArbiterP__0__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:22038)
      FuncDecl: quals=None (at pp.c:22038)
        ParamList:  (at pp.c:22038)
          Decl: name='id', quals=[], storage=[] (at pp.c:22038)
            TypeDecl: declname='id', quals=[] (at pp.c:22038)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__Resource__default__granted', quals=[] (at pp.c:22038)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22040)
  FuncDef:  (at pp.c:22044)
    Decl: name='ArbiterP__0__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:22044)
      FuncDecl: quals=None (at pp.c:22044)
        ParamList:  (at pp.c:22044)
          Decl: name='arg_0x101d81658', quals=[], storage=[] (at pp.c:22044)
            TypeDecl: declname='arg_0x101d81658', quals=[] (at pp.c:22044)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__Resource__granted', quals=[] (at pp.c:22044)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22044)
      Switch:  (at pp.c:22046)
        ID: name='arg_0x101d81658' (at pp.c:22046)
        Compound:  (at pp.c:22046)
          Case:  (at pp.c:22048)
            ID: name='Msp430Usart1C__0__CLIENT_ID' (at pp.c:22048)
            FuncCall:  (at None)
              ID: name='Msp430UartP__0__UsartResource__granted' (at pp.c:22050)
              ExprList:  (at pp.c:22050)
                ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:22050)
          Break:  (at pp.c:22052)
          Default:  (at pp.c:22054)
            FuncCall:  (at None)
              ID: name='ArbiterP__0__Resource__default__granted' (at pp.c:22056)
              ExprList:  (at pp.c:22056)
                ID: name='arg_0x101d81658' (at pp.c:22056)
          Break:  (at pp.c:22058)
  FuncDef:  (at pp.c:22065)
    Decl: name='ArbiterP__0__ResourceConfigure__default__configure', quals=[], storage=['inline', 'static'] (at pp.c:22065)
      FuncDecl: quals=None (at pp.c:22065)
        ParamList:  (at pp.c:22065)
          Decl: name='id', quals=[], storage=[] (at pp.c:22065)
            TypeDecl: declname='id', quals=[] (at pp.c:22065)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__configure', quals=[] (at pp.c:22065)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22067)
  FuncDef:  (at pp.c:22071)
    Decl: name='ArbiterP__0__ResourceConfigure__configure', quals=[], storage=['static', 'inline'] (at pp.c:22071)
      FuncDecl: quals=None (at pp.c:22071)
        ParamList:  (at pp.c:22071)
          Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:22071)
            TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:22071)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceConfigure__configure', quals=[] (at pp.c:22071)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22071)
      Switch:  (at pp.c:22073)
        ID: name='arg_0x101d7d9b8' (at pp.c:22073)
        Compound:  (at pp.c:22073)
          Case:  (at pp.c:22075)
            ID: name='Msp430Usart1C__0__CLIENT_ID' (at pp.c:22075)
            FuncCall:  (at None)
              ID: name='Msp430UartP__0__ResourceConfigure__configure' (at pp.c:22077)
              ExprList:  (at pp.c:22077)
                ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:22077)
          Break:  (at pp.c:22079)
          Default:  (at pp.c:22081)
            FuncCall:  (at None)
              ID: name='ArbiterP__0__ResourceConfigure__default__configure' (at pp.c:22083)
              ExprList:  (at pp.c:22083)
                ID: name='arg_0x101d7d9b8' (at pp.c:22083)
          Break:  (at pp.c:22085)
  FuncDef:  (at pp.c:22092)
    Decl: name='ArbiterP__0__grantedTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:22092)
      FuncDecl: quals=None (at pp.c:22092)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__grantedTask__runTask', quals=[] (at pp.c:22092)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22094)
      Compound:  (at pp.c:22095)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:22095)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:22095)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:22095)
        Compound:  (at pp.c:22097)
          Assignment: op='=' (at pp.c:22098)
            ID: name='ArbiterP__0__resId' (at pp.c:22098)
            ID: name='ArbiterP__0__reqResId' (at pp.c:22098)
          Assignment: op='=' (at pp.c:22099)
            ID: name='ArbiterP__0__state' (at pp.c:22099)
            ID: name='ArbiterP__0__RES_BUSY' (at pp.c:22099)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:22102)
          ExprList:  (at pp.c:22102)
            ID: name='__nesc_atomic' (at pp.c:22102)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__ResourceConfigure__configure' (at pp.c:22103)
        ExprList:  (at pp.c:22103)
          ID: name='ArbiterP__0__resId' (at pp.c:22103)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__Resource__granted' (at pp.c:22104)
        ExprList:  (at pp.c:22104)
          ID: name='ArbiterP__0__resId' (at pp.c:22104)
  FuncDef:  (at pp.c:22108)
    Decl: name='TelosSerialP__Msp430UartConfigure__getConfig', quals=[], storage=['inline', 'static'] (at pp.c:22108)
      FuncDecl: quals=None (at pp.c:22108)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        PtrDecl: quals=[] (at pp.c:22108)
          TypeDecl: declname='TelosSerialP__Msp430UartConfigure__getConfig', quals=[] (at pp.c:22108)
            IdentifierType: names=['msp430_uart_union_config_t'] (at None)
    Compound:  (at pp.c:22110)
      Return:  (at pp.c:22111)
        UnaryOp: op='&' (at pp.c:22111)
          ID: name='TelosSerialP__msp430_uart_telos_config' (at pp.c:22111)
  FuncDef:  (at pp.c:22115)
    Decl: name='Msp430UartP__0__Msp430UartConfigure__default__getConfig', quals=[], storage=['inline', 'static'] (at pp.c:22115)
      FuncDecl: quals=None (at pp.c:22115)
        ParamList:  (at pp.c:22115)
          Decl: name='id', quals=[], storage=[] (at pp.c:22115)
            TypeDecl: declname='id', quals=[] (at pp.c:22115)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:22115)
          TypeDecl: declname='Msp430UartP__0__Msp430UartConfigure__default__getConfig', quals=[] (at pp.c:22115)
            IdentifierType: names=['msp430_uart_union_config_t'] (at None)
    Compound:  (at pp.c:22117)
      Return:  (at pp.c:22118)
        UnaryOp: op='&' (at pp.c:22118)
          ID: name='msp430_uart_default_config' (at pp.c:22118)
  FuncDef:  (at pp.c:22122)
    Decl: name='Msp430UartP__0__Msp430UartConfigure__getConfig', quals=[], storage=['static', 'inline'] (at pp.c:22122)
      FuncDecl: quals=None (at pp.c:22122)
        ParamList:  (at pp.c:22122)
          Decl: name='arg_0x101bf94c8', quals=[], storage=[] (at pp.c:22122)
            TypeDecl: declname='arg_0x101bf94c8', quals=[] (at pp.c:22122)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:22122)
          TypeDecl: declname='Msp430UartP__0__Msp430UartConfigure__getConfig', quals=[] (at pp.c:22122)
            IdentifierType: names=['msp430_uart_union_config_t'] (at None)
    Compound:  (at pp.c:22122)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22124)
        PtrDecl: quals=[] (at pp.c:22124)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22124)
            Union: name='__nesc_unnamed4286', packed=False (at pp.c:22124)
      Switch:  (at pp.c:22128)
        ID: name='arg_0x101bf94c8' (at pp.c:22128)
        Compound:  (at pp.c:22128)
          Case:  (at pp.c:22130)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:22130)
            Assignment: op='=' (at pp.c:22132)
              ID: name='__nesc_result' (at pp.c:22132)
              FuncCall:  (at None)
                ID: name='TelosSerialP__Msp430UartConfigure__getConfig' (at pp.c:22132)
          Break:  (at pp.c:22134)
          Default:  (at pp.c:22136)
            Assignment: op='=' (at pp.c:22138)
              ID: name='__nesc_result' (at pp.c:22138)
              FuncCall:  (at None)
                ID: name='Msp430UartP__0__Msp430UartConfigure__default__getConfig' (at pp.c:22138)
                ExprList:  (at pp.c:22138)
                  ID: name='arg_0x101bf94c8' (at pp.c:22138)
          Break:  (at pp.c:22140)
      Return:  (at pp.c:22146)
        ID: name='__nesc_result' (at pp.c:22146)
  FuncDef:  (at pp.c:22151)
    Decl: name='HplMsp430Usart1P__Usart__disableIntr', quals=[], storage=['inline', 'static'] (at pp.c:22151)
      FuncDecl: quals=None (at pp.c:22151)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__disableIntr', quals=[] (at pp.c:22151)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22153)
      Assignment: op='&=' (at pp.c:22154)
        ID: name='HplMsp430Usart1P__IE2' (at pp.c:22154)
        UnaryOp: op='~' (at pp.c:22154)
          BinaryOp: op='|' (at pp.c:22154)
            BinaryOp: op='<<' (at pp.c:22154)
              Constant: type='int', value='1' (at pp.c:22154)
              Constant: type='int', value='5' (at pp.c:22154)
            BinaryOp: op='<<' (at pp.c:22154)
              Constant: type='int', value='1' (at pp.c:22154)
              Constant: type='int', value='4' (at pp.c:22154)
  FuncDef:  (at pp.c:22158)
    Decl: name='HplMsp430Usart1P__Usart__clrIntr', quals=[], storage=['inline', 'static'] (at pp.c:22158)
      FuncDecl: quals=None (at pp.c:22158)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__clrIntr', quals=[] (at pp.c:22158)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22160)
      Assignment: op='&=' (at pp.c:22161)
        ID: name='HplMsp430Usart1P__IFG2' (at pp.c:22161)
        UnaryOp: op='~' (at pp.c:22161)
          BinaryOp: op='|' (at pp.c:22161)
            BinaryOp: op='<<' (at pp.c:22161)
              Constant: type='int', value='1' (at pp.c:22161)
              Constant: type='int', value='5' (at pp.c:22161)
            BinaryOp: op='<<' (at pp.c:22161)
              Constant: type='int', value='1' (at pp.c:22161)
              Constant: type='int', value='4' (at pp.c:22161)
  FuncDef:  (at pp.c:22165)
    Decl: name='HplMsp430Usart1P__Usart__resetUsart', quals=[], storage=['inline', 'static'] (at pp.c:22165)
      FuncDecl: quals=None (at pp.c:22165)
        ParamList:  (at pp.c:22165)
          Decl: name='reset', quals=[], storage=[] (at pp.c:22165)
            TypeDecl: declname='reset', quals=[] (at pp.c:22165)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__resetUsart', quals=[] (at pp.c:22165)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22167)
      If:  (at pp.c:22168)
        ID: name='reset' (at pp.c:22168)
        Compound:  (at pp.c:22168)
          Assignment: op='=' (at pp.c:22169)
            ID: name='U1CTL' (at pp.c:22169)
            Constant: type='int', value='0x01' (at pp.c:22169)
        Compound:  (at pp.c:22171)
          Assignment: op='&=' (at pp.c:22173)
            ID: name='U1CTL' (at pp.c:22173)
            UnaryOp: op='~' (at pp.c:22173)
              Constant: type='int', value='0x01' (at pp.c:22173)
  FuncDef:  (at pp.c:22178)
    Decl: name='HplMsp430GeneralIOP__22__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:22178)
      FuncDecl: quals=None (at pp.c:22178)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__22__IO__selectModuleFunc', quals=[] (at pp.c:22178)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22180)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:22183)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:22183)
        BinaryOp: op='<<' (at pp.c:22183)
          Constant: type='int', value='0x01' (at pp.c:22183)
          Constant: type='int', value='6' (at pp.c:22183)
  FuncDef:  (at pp.c:22187)
    Decl: name='HplMsp430Usart1P__UTXD__selectModuleFunc', quals=[], storage=['static', 'inline'] (at pp.c:22187)
      FuncDecl: quals=None (at pp.c:22187)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__UTXD__selectModuleFunc', quals=[] (at pp.c:22187)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22187)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__22__IO__selectModuleFunc' (at pp.c:22189)
  FuncDef:  (at pp.c:22194)
    Decl: name='HplMsp430Usart1P__Usart__enableUartTx', quals=[], storage=['inline', 'static'] (at pp.c:22194)
      FuncDecl: quals=None (at pp.c:22194)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__enableUartTx', quals=[] (at pp.c:22194)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22196)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__UTXD__selectModuleFunc' (at pp.c:22197)
      Assignment: op='|=' (at pp.c:22198)
        ID: name='HplMsp430Usart1P__ME2' (at pp.c:22198)
        BinaryOp: op='<<' (at pp.c:22198)
          Constant: type='int', value='1' (at pp.c:22198)
          Constant: type='int', value='5' (at pp.c:22198)
  FuncDef:  (at pp.c:22202)
    Decl: name='HplMsp430GeneralIOP__23__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:22202)
      FuncDecl: quals=None (at pp.c:22202)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__23__IO__selectIOFunc', quals=[] (at pp.c:22202)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22204)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:22207)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:22207)
        UnaryOp: op='~' (at pp.c:22207)
          BinaryOp: op='<<' (at pp.c:22207)
            Constant: type='int', value='0x01' (at pp.c:22207)
            Constant: type='int', value='7' (at pp.c:22207)
  FuncDef:  (at pp.c:22211)
    Decl: name='HplMsp430Usart1P__URXD__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:22211)
      FuncDecl: quals=None (at pp.c:22211)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__URXD__selectIOFunc', quals=[] (at pp.c:22211)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22211)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__23__IO__selectIOFunc' (at pp.c:22213)
  FuncDef:  (at pp.c:22218)
    Decl: name='HplMsp430Usart1P__Usart__disableUartRx', quals=[], storage=['inline', 'static'] (at pp.c:22218)
      FuncDecl: quals=None (at pp.c:22218)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__disableUartRx', quals=[] (at pp.c:22218)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22220)
      Assignment: op='&=' (at pp.c:22221)
        ID: name='HplMsp430Usart1P__ME2' (at pp.c:22221)
        UnaryOp: op='~' (at pp.c:22221)
          BinaryOp: op='<<' (at pp.c:22221)
            Constant: type='int', value='1' (at pp.c:22221)
            Constant: type='int', value='4' (at pp.c:22221)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__URXD__selectIOFunc' (at pp.c:22222)
  FuncDef:  (at pp.c:22226)
    Decl: name='HplMsp430GeneralIOP__23__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:22226)
      FuncDecl: quals=None (at pp.c:22226)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__23__IO__selectModuleFunc', quals=[] (at pp.c:22226)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22228)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:22231)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:22231)
        BinaryOp: op='<<' (at pp.c:22231)
          Constant: type='int', value='0x01' (at pp.c:22231)
          Constant: type='int', value='7' (at pp.c:22231)
  FuncDef:  (at pp.c:22235)
    Decl: name='HplMsp430Usart1P__URXD__selectModuleFunc', quals=[], storage=['static', 'inline'] (at pp.c:22235)
      FuncDecl: quals=None (at pp.c:22235)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__URXD__selectModuleFunc', quals=[] (at pp.c:22235)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22235)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__23__IO__selectModuleFunc' (at pp.c:22237)
  FuncDef:  (at pp.c:22242)
    Decl: name='HplMsp430Usart1P__Usart__enableUartRx', quals=[], storage=['inline', 'static'] (at pp.c:22242)
      FuncDecl: quals=None (at pp.c:22242)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__enableUartRx', quals=[] (at pp.c:22242)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22244)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__URXD__selectModuleFunc' (at pp.c:22245)
      Assignment: op='|=' (at pp.c:22246)
        ID: name='HplMsp430Usart1P__ME2' (at pp.c:22246)
        BinaryOp: op='<<' (at pp.c:22246)
          Constant: type='int', value='1' (at pp.c:22246)
          Constant: type='int', value='4' (at pp.c:22246)
  FuncDef:  (at pp.c:22250)
    Decl: name='HplMsp430GeneralIOP__22__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:22250)
      FuncDecl: quals=None (at pp.c:22250)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__22__IO__selectIOFunc', quals=[] (at pp.c:22250)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22252)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:22255)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:22255)
        UnaryOp: op='~' (at pp.c:22255)
          BinaryOp: op='<<' (at pp.c:22255)
            Constant: type='int', value='0x01' (at pp.c:22255)
            Constant: type='int', value='6' (at pp.c:22255)
  FuncDef:  (at pp.c:22259)
    Decl: name='HplMsp430Usart1P__UTXD__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:22259)
      FuncDecl: quals=None (at pp.c:22259)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__UTXD__selectIOFunc', quals=[] (at pp.c:22259)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22259)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__22__IO__selectIOFunc' (at pp.c:22261)
  FuncDef:  (at pp.c:22266)
    Decl: name='HplMsp430Usart1P__Usart__disableUartTx', quals=[], storage=['inline', 'static'] (at pp.c:22266)
      FuncDecl: quals=None (at pp.c:22266)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__disableUartTx', quals=[] (at pp.c:22266)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22268)
      Assignment: op='&=' (at pp.c:22269)
        ID: name='HplMsp430Usart1P__ME2' (at pp.c:22269)
        UnaryOp: op='~' (at pp.c:22269)
          BinaryOp: op='<<' (at pp.c:22269)
            Constant: type='int', value='1' (at pp.c:22269)
            Constant: type='int', value='5' (at pp.c:22269)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__UTXD__selectIOFunc' (at pp.c:22270)
  FuncDef:  (at pp.c:22274)
    Decl: name='HplMsp430Usart1P__Usart__enableUart', quals=[], storage=['inline', 'static'] (at pp.c:22274)
      FuncDecl: quals=None (at pp.c:22274)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__enableUart', quals=[] (at pp.c:22274)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22276)
      Compound:  (at pp.c:22279)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart1P__UTXD__selectModuleFunc' (at pp.c:22280)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart1P__URXD__selectModuleFunc' (at pp.c:22281)
      Assignment: op='|=' (at pp.c:22283)
        ID: name='HplMsp430Usart1P__ME2' (at pp.c:22283)
        BinaryOp: op='|' (at pp.c:22283)
          BinaryOp: op='<<' (at pp.c:22283)
            Constant: type='int', value='1' (at pp.c:22283)
            Constant: type='int', value='5' (at pp.c:22283)
          BinaryOp: op='<<' (at pp.c:22283)
            Constant: type='int', value='1' (at pp.c:22283)
            Constant: type='int', value='4' (at pp.c:22283)
  FuncDef:  (at pp.c:22287)
    Decl: name='HplMsp430Usart1P__Usart__setUmctl', quals=[], storage=['inline', 'static'] (at pp.c:22287)
      FuncDecl: quals=None (at pp.c:22287)
        ParamList:  (at pp.c:22287)
          Decl: name='control', quals=[], storage=[] (at pp.c:22287)
            TypeDecl: declname='control', quals=[] (at pp.c:22287)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__setUmctl', quals=[] (at pp.c:22287)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22289)
      Assignment: op='=' (at pp.c:22290)
        ID: name='U1MCTL' (at pp.c:22290)
        ID: name='control' (at pp.c:22290)
  FuncDef:  (at pp.c:22294)
    Decl: name='HplMsp430Usart1P__Usart__setUbr', quals=[], storage=['inline', 'static'] (at pp.c:22294)
      FuncDecl: quals=None (at pp.c:22294)
        ParamList:  (at pp.c:22294)
          Decl: name='control', quals=[], storage=[] (at pp.c:22294)
            TypeDecl: declname='control', quals=[] (at pp.c:22294)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__setUbr', quals=[] (at pp.c:22294)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22296)
      Compound:  (at pp.c:22299)
        Assignment: op='=' (at pp.c:22300)
          ID: name='U1BR0' (at pp.c:22300)
          BinaryOp: op='&' (at pp.c:22300)
            ID: name='control' (at pp.c:22300)
            Constant: type='int', value='0x00FF' (at pp.c:22300)
        Assignment: op='=' (at pp.c:22301)
          ID: name='U1BR1' (at pp.c:22301)
          BinaryOp: op='&' (at pp.c:22301)
            BinaryOp: op='>>' (at pp.c:22301)
              ID: name='control' (at pp.c:22301)
              Constant: type='int', value='8' (at pp.c:22301)
            Constant: type='int', value='0x00FF' (at pp.c:22301)
  FuncDef:  (at pp.c:22306)
    Decl: name='HplMsp430Usart1P__configUart', quals=[], storage=['inline', 'static'] (at pp.c:22306)
      FuncDecl: quals=None (at pp.c:22306)
        ParamList:  (at pp.c:22306)
          Decl: name='config', quals=[], storage=[] (at pp.c:22306)
            PtrDecl: quals=[] (at pp.c:22306)
              TypeDecl: declname='config', quals=[] (at pp.c:22306)
                IdentifierType: names=['msp430_uart_union_config_t'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__configUart', quals=[] (at pp.c:22306)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22308)
      Assignment: op='=' (at pp.c:22310)
        ID: name='U1CTL' (at pp.c:22310)
        BinaryOp: op='|' (at pp.c:22310)
          BinaryOp: op='&' (at pp.c:22310)
            StructRef: type='.' (at pp.c:22310)
              StructRef: type='->' (at pp.c:22310)
                ID: name='config' (at pp.c:22310)
                ID: name='uartRegisters' (at pp.c:22310)
              ID: name='uctl' (at pp.c:22310)
            UnaryOp: op='~' (at pp.c:22310)
              Constant: type='int', value='0x04' (at pp.c:22310)
          Constant: type='int', value='0x01' (at pp.c:22310)
      Assignment: op='=' (at pp.c:22311)
        ID: name='HplMsp430Usart1P__U1TCTL' (at pp.c:22311)
        StructRef: type='.' (at pp.c:22311)
          StructRef: type='->' (at pp.c:22311)
            ID: name='config' (at pp.c:22311)
            ID: name='uartRegisters' (at pp.c:22311)
          ID: name='utctl' (at pp.c:22311)
      Assignment: op='=' (at pp.c:22312)
        ID: name='HplMsp430Usart1P__U1RCTL' (at pp.c:22312)
        StructRef: type='.' (at pp.c:22312)
          StructRef: type='->' (at pp.c:22312)
            ID: name='config' (at pp.c:22312)
            ID: name='uartRegisters' (at pp.c:22312)
          ID: name='urctl' (at pp.c:22312)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Usart__setUbr' (at pp.c:22314)
        ExprList:  (at pp.c:22314)
          StructRef: type='.' (at pp.c:22314)
            StructRef: type='->' (at pp.c:22314)
              ID: name='config' (at pp.c:22314)
              ID: name='uartRegisters' (at pp.c:22314)
            ID: name='ubr' (at pp.c:22314)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Usart__setUmctl' (at pp.c:22315)
        ExprList:  (at pp.c:22315)
          StructRef: type='.' (at pp.c:22315)
            StructRef: type='->' (at pp.c:22315)
              ID: name='config' (at pp.c:22315)
              ID: name='uartRegisters' (at pp.c:22315)
            ID: name='umctl' (at pp.c:22315)
  FuncDef:  (at pp.c:22318)
    Decl: name='HplMsp430Usart1P__Usart__setModeUart', quals=[], storage=['inline', 'static'] (at pp.c:22318)
      FuncDecl: quals=None (at pp.c:22318)
        ParamList:  (at pp.c:22318)
          Decl: name='config', quals=[], storage=[] (at pp.c:22318)
            PtrDecl: quals=[] (at pp.c:22318)
              TypeDecl: declname='config', quals=[] (at pp.c:22318)
                IdentifierType: names=['msp430_uart_union_config_t'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__setModeUart', quals=[] (at pp.c:22318)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22320)
      Compound:  (at pp.c:22322)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:22322)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:22322)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:22322)
        Compound:  (at pp.c:22324)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart1P__Usart__resetUsart' (at pp.c:22325)
            ExprList:  (at pp.c:22325)
              ID: name='TRUE' (at pp.c:22325)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart1P__Usart__disableSpi' (at pp.c:22326)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart1P__configUart' (at pp.c:22327)
            ExprList:  (at pp.c:22327)
              ID: name='config' (at pp.c:22327)
          If:  (at pp.c:22328)
            BinaryOp: op='&&' (at pp.c:22328)
              BinaryOp: op='==' (at pp.c:22328)
                StructRef: type='.' (at pp.c:22328)
                  StructRef: type='->' (at pp.c:22328)
                    ID: name='config' (at pp.c:22328)
                    ID: name='uartConfig' (at pp.c:22328)
                  ID: name='utxe' (at pp.c:22328)
                Constant: type='int', value='1' (at pp.c:22328)
              BinaryOp: op='==' (at pp.c:22328)
                StructRef: type='.' (at pp.c:22328)
                  StructRef: type='->' (at pp.c:22328)
                    ID: name='config' (at pp.c:22328)
                    ID: name='uartConfig' (at pp.c:22328)
                  ID: name='urxe' (at pp.c:22328)
                Constant: type='int', value='1' (at pp.c:22328)
            Compound:  (at pp.c:22328)
              FuncCall:  (at None)
                ID: name='HplMsp430Usart1P__Usart__enableUart' (at pp.c:22329)
            Compound:  (at pp.c:22331)
              If:  (at pp.c:22333)
                BinaryOp: op='&&' (at pp.c:22333)
                  BinaryOp: op='==' (at pp.c:22333)
                    StructRef: type='.' (at pp.c:22333)
                      StructRef: type='->' (at pp.c:22333)
                        ID: name='config' (at pp.c:22333)
                        ID: name='uartConfig' (at pp.c:22333)
                      ID: name='utxe' (at pp.c:22333)
                    Constant: type='int', value='0' (at pp.c:22333)
                  BinaryOp: op='==' (at pp.c:22333)
                    StructRef: type='.' (at pp.c:22333)
                      StructRef: type='->' (at pp.c:22333)
                        ID: name='config' (at pp.c:22333)
                        ID: name='uartConfig' (at pp.c:22333)
                      ID: name='urxe' (at pp.c:22333)
                    Constant: type='int', value='1' (at pp.c:22333)
                Compound:  (at pp.c:22333)
                  FuncCall:  (at None)
                    ID: name='HplMsp430Usart1P__Usart__disableUartTx' (at pp.c:22334)
                  FuncCall:  (at None)
                    ID: name='HplMsp430Usart1P__Usart__enableUartRx' (at pp.c:22335)
                Compound:  (at pp.c:22337)
                  If:  (at pp.c:22339)
                    BinaryOp: op='&&' (at pp.c:22339)
                      BinaryOp: op='==' (at pp.c:22339)
                        StructRef: type='.' (at pp.c:22339)
                          StructRef: type='->' (at pp.c:22339)
                            ID: name='config' (at pp.c:22339)
                            ID: name='uartConfig' (at pp.c:22339)
                          ID: name='utxe' (at pp.c:22339)
                        Constant: type='int', value='1' (at pp.c:22339)
                      BinaryOp: op='==' (at pp.c:22339)
                        StructRef: type='.' (at pp.c:22339)
                          StructRef: type='->' (at pp.c:22339)
                            ID: name='config' (at pp.c:22339)
                            ID: name='uartConfig' (at pp.c:22339)
                          ID: name='urxe' (at pp.c:22339)
                        Constant: type='int', value='0' (at pp.c:22339)
                    Compound:  (at pp.c:22339)
                      FuncCall:  (at None)
                        ID: name='HplMsp430Usart1P__Usart__disableUartRx' (at pp.c:22340)
                      FuncCall:  (at None)
                        ID: name='HplMsp430Usart1P__Usart__enableUartTx' (at pp.c:22341)
                    Compound:  (at pp.c:22345)
                      FuncCall:  (at None)
                        ID: name='HplMsp430Usart1P__Usart__disableUart' (at pp.c:22346)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart1P__Usart__resetUsart' (at pp.c:22351)
            ExprList:  (at pp.c:22351)
              ID: name='FALSE' (at pp.c:22351)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart1P__Usart__clrIntr' (at pp.c:22352)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart1P__Usart__disableIntr' (at pp.c:22353)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:22356)
          ExprList:  (at pp.c:22356)
            ID: name='__nesc_atomic' (at pp.c:22356)
      Return:  (at pp.c:22358)
  FuncDef:  (at pp.c:22362)
    Decl: name='Msp430UartP__0__Usart__setModeUart', quals=[], storage=['static', 'inline'] (at pp.c:22362)
      FuncDecl: quals=None (at pp.c:22362)
        ParamList:  (at pp.c:22362)
          Decl: name='config', quals=[], storage=[] (at pp.c:22362)
            PtrDecl: quals=[] (at pp.c:22362)
              TypeDecl: declname='config', quals=[] (at pp.c:22362)
                IdentifierType: names=['msp430_uart_union_config_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__Usart__setModeUart', quals=[] (at pp.c:22362)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22362)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Usart__setModeUart' (at pp.c:22364)
        ExprList:  (at pp.c:22364)
          ID: name='config' (at pp.c:22364)
  FuncDef:  (at pp.c:22369)
    Decl: name='HplMsp430GeneralIOP__33__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:22369)
      FuncDecl: quals=None (at pp.c:22369)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__33__IO__selectIOFunc', quals=[] (at pp.c:22369)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22371)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:22374)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='51U' (at pp.c:22374)
        UnaryOp: op='~' (at pp.c:22374)
          BinaryOp: op='<<' (at pp.c:22374)
            Constant: type='int', value='0x01' (at pp.c:22374)
            Constant: type='int', value='1' (at pp.c:22374)
  FuncDef:  (at pp.c:22378)
    Decl: name='HplMsp430Usart1P__SIMO__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:22378)
      FuncDecl: quals=None (at pp.c:22378)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__SIMO__selectIOFunc', quals=[] (at pp.c:22378)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22378)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__33__IO__selectIOFunc' (at pp.c:22380)
  FuncDef:  (at pp.c:22385)
    Decl: name='HplMsp430GeneralIOP__34__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:22385)
      FuncDecl: quals=None (at pp.c:22385)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__34__IO__selectIOFunc', quals=[] (at pp.c:22385)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22387)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:22390)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='51U' (at pp.c:22390)
        UnaryOp: op='~' (at pp.c:22390)
          BinaryOp: op='<<' (at pp.c:22390)
            Constant: type='int', value='0x01' (at pp.c:22390)
            Constant: type='int', value='2' (at pp.c:22390)
  FuncDef:  (at pp.c:22394)
    Decl: name='HplMsp430Usart1P__SOMI__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:22394)
      FuncDecl: quals=None (at pp.c:22394)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__SOMI__selectIOFunc', quals=[] (at pp.c:22394)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22394)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__34__IO__selectIOFunc' (at pp.c:22396)
  FuncDef:  (at pp.c:22401)
    Decl: name='HplMsp430GeneralIOP__35__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:22401)
      FuncDecl: quals=None (at pp.c:22401)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__35__IO__selectIOFunc', quals=[] (at pp.c:22401)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22403)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:22406)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='51U' (at pp.c:22406)
        UnaryOp: op='~' (at pp.c:22406)
          BinaryOp: op='<<' (at pp.c:22406)
            Constant: type='int', value='0x01' (at pp.c:22406)
            Constant: type='int', value='3' (at pp.c:22406)
  FuncDef:  (at pp.c:22410)
    Decl: name='HplMsp430Usart1P__UCLK__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:22410)
      FuncDecl: quals=None (at pp.c:22410)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__UCLK__selectIOFunc', quals=[] (at pp.c:22410)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22410)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__35__IO__selectIOFunc' (at pp.c:22412)
  FuncDef:  (at pp.c:22417)
    Decl: name='HplMsp430Usart1P__Usart__enableIntr', quals=[], storage=['inline', 'static'] (at pp.c:22417)
      FuncDecl: quals=None (at pp.c:22417)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__enableIntr', quals=[] (at pp.c:22417)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22419)
      Compound:  (at pp.c:22420)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:22420)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:22420)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:22420)
        Compound:  (at pp.c:22422)
          Assignment: op='&=' (at pp.c:22423)
            ID: name='HplMsp430Usart1P__IFG2' (at pp.c:22423)
            UnaryOp: op='~' (at pp.c:22423)
              BinaryOp: op='|' (at pp.c:22423)
                BinaryOp: op='<<' (at pp.c:22423)
                  Constant: type='int', value='1' (at pp.c:22423)
                  Constant: type='int', value='5' (at pp.c:22423)
                BinaryOp: op='<<' (at pp.c:22423)
                  Constant: type='int', value='1' (at pp.c:22423)
                  Constant: type='int', value='4' (at pp.c:22423)
          Assignment: op='|=' (at pp.c:22424)
            ID: name='HplMsp430Usart1P__IE2' (at pp.c:22424)
            BinaryOp: op='|' (at pp.c:22424)
              BinaryOp: op='<<' (at pp.c:22424)
                Constant: type='int', value='1' (at pp.c:22424)
                Constant: type='int', value='5' (at pp.c:22424)
              BinaryOp: op='<<' (at pp.c:22424)
                Constant: type='int', value='1' (at pp.c:22424)
                Constant: type='int', value='4' (at pp.c:22424)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:22427)
          ExprList:  (at pp.c:22427)
            ID: name='__nesc_atomic' (at pp.c:22427)
  FuncDef:  (at pp.c:22431)
    Decl: name='Msp430UartP__0__Usart__enableIntr', quals=[], storage=['static', 'inline'] (at pp.c:22431)
      FuncDecl: quals=None (at pp.c:22431)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UartP__0__Usart__enableIntr', quals=[] (at pp.c:22431)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22431)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Usart__enableIntr' (at pp.c:22433)
  FuncDef:  (at pp.c:22438)
    Decl: name='AMQueueImplP__1__AMSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:22438)
      FuncDecl: quals=None (at pp.c:22438)
        ParamList:  (at pp.c:22438)
          Decl: name='id', quals=[], storage=[] (at pp.c:22438)
            TypeDecl: declname='id', quals=[] (at pp.c:22438)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22438)
            PtrDecl: quals=[] (at pp.c:22438)
              TypeDecl: declname='msg', quals=[] (at pp.c:22438)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:22438)
            TypeDecl: declname='err', quals=[] (at pp.c:22438)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__1__AMSend__sendDone', quals=[] (at pp.c:22438)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22440)
      If:  (at pp.c:22446)
        BinaryOp: op='>=' (at pp.c:22446)
          ID: name='AMQueueImplP__1__current' (at pp.c:22446)
          Constant: type='int', value='1' (at pp.c:22446)
        Compound:  (at pp.c:22446)
          Return:  (at pp.c:22447)
      If:  (at pp.c:22449)
        BinaryOp: op='==' (at pp.c:22449)
          StructRef: type='.' (at pp.c:22449)
            ArrayRef:  (at pp.c:22449)
              ID: name='AMQueueImplP__1__queue' (at pp.c:22449)
              ID: name='AMQueueImplP__1__current' (at pp.c:22449)
            ID: name='msg' (at pp.c:22449)
          ID: name='msg' (at pp.c:22449)
        Compound:  (at pp.c:22449)
          FuncCall:  (at None)
            ID: name='AMQueueImplP__1__sendDone' (at pp.c:22450)
            ExprList:  (at pp.c:22450)
              ID: name='AMQueueImplP__1__current' (at pp.c:22450)
              ID: name='msg' (at pp.c:22450)
              ID: name='err' (at pp.c:22450)
        Compound:  (at pp.c:22452)
  FuncDef:  (at pp.c:22458)
    Decl: name='SerialActiveMessageP__0__AMSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:22458)
      FuncDecl: quals=None (at pp.c:22458)
        ParamList:  (at pp.c:22458)
          Decl: name='arg_0x10199d020', quals=[], storage=[] (at pp.c:22458)
            TypeDecl: declname='arg_0x10199d020', quals=[] (at pp.c:22458)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22458)
            PtrDecl: quals=[] (at pp.c:22458)
              TypeDecl: declname='msg', quals=[] (at pp.c:22458)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22458)
            TypeDecl: declname='error', quals=[] (at pp.c:22458)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__AMSend__sendDone', quals=[] (at pp.c:22458)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22458)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__1__AMSend__sendDone' (at pp.c:22460)
        ExprList:  (at pp.c:22460)
          ID: name='arg_0x10199d020' (at pp.c:22460)
          ID: name='msg' (at pp.c:22460)
          ID: name='error' (at pp.c:22460)
  FuncDef:  (at pp.c:22465)
    Decl: name='SerialActiveMessageP__0__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:22465)
      FuncDecl: quals=None (at pp.c:22465)
        ParamList:  (at pp.c:22465)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22465)
            PtrDecl: quals=[] (at pp.c:22465)
              TypeDecl: declname='msg', quals=[] (at pp.c:22465)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='result', quals=[], storage=[] (at pp.c:22465)
            TypeDecl: declname='result', quals=[] (at pp.c:22465)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__SubSend__sendDone', quals=[] (at pp.c:22465)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22467)
      FuncCall:  (at None)
        ID: name='SerialActiveMessageP__0__AMSend__sendDone' (at pp.c:22468)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='SerialActiveMessageP__0__AMPacket__type' (at pp.c:22468)
            ExprList:  (at pp.c:22468)
              ID: name='msg' (at pp.c:22468)
          ID: name='msg' (at pp.c:22468)
          ID: name='result' (at pp.c:22468)
  FuncDef:  (at pp.c:22472)
    Decl: name='SerialDispatcherP__0__Send__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:22472)
      FuncDecl: quals=None (at pp.c:22472)
        ParamList:  (at pp.c:22472)
          Decl: name='idxxx', quals=[], storage=[] (at pp.c:22472)
            TypeDecl: declname='idxxx', quals=[] (at pp.c:22472)
              IdentifierType: names=['uart_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22472)
            PtrDecl: quals=[] (at pp.c:22472)
              TypeDecl: declname='msg', quals=[] (at pp.c:22472)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22472)
            TypeDecl: declname='error', quals=[] (at pp.c:22472)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__Send__default__sendDone', quals=[] (at pp.c:22472)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22474)
      Return:  (at pp.c:22475)
  FuncDef:  (at pp.c:22479)
    Decl: name='SerialDispatcherP__0__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:22479)
      FuncDecl: quals=None (at pp.c:22479)
        ParamList:  (at pp.c:22479)
          Decl: name='arg_0x101ace748', quals=[], storage=[] (at pp.c:22479)
            TypeDecl: declname='arg_0x101ace748', quals=[] (at pp.c:22479)
              IdentifierType: names=['uart_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22479)
            PtrDecl: quals=[] (at pp.c:22479)
              TypeDecl: declname='msg', quals=[] (at pp.c:22479)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22479)
            TypeDecl: declname='error', quals=[] (at pp.c:22479)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__Send__sendDone', quals=[] (at pp.c:22479)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22479)
      Switch:  (at pp.c:22481)
        ID: name='arg_0x101ace748' (at pp.c:22481)
        Compound:  (at pp.c:22481)
          Case:  (at pp.c:22483)
            ID: name='TOS_SERIAL_ACTIVE_MESSAGE_ID' (at pp.c:22483)
            FuncCall:  (at None)
              ID: name='SerialActiveMessageP__0__SubSend__sendDone' (at pp.c:22485)
              ExprList:  (at pp.c:22485)
                ID: name='msg' (at pp.c:22485)
                ID: name='error' (at pp.c:22485)
          Break:  (at pp.c:22487)
          Default:  (at pp.c:22489)
            FuncCall:  (at None)
              ID: name='SerialDispatcherP__0__Send__default__sendDone' (at pp.c:22491)
              ExprList:  (at pp.c:22491)
                ID: name='arg_0x101ace748' (at pp.c:22491)
                ID: name='msg' (at pp.c:22491)
                ID: name='error' (at pp.c:22491)
          Break:  (at pp.c:22493)
  FuncDef:  (at pp.c:22500)
    Decl: name='SerialDispatcherP__0__signalSendDone__runTask', quals=[], storage=['inline', 'static'] (at pp.c:22500)
      FuncDecl: quals=None (at pp.c:22500)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__signalSendDone__runTask', quals=[] (at pp.c:22500)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22502)
      Decl: name='error', quals=[], storage=[] (at pp.c:22503)
        TypeDecl: declname='error', quals=[] (at pp.c:22503)
          IdentifierType: names=['error_t'] (at None)
      Assignment: op='=' (at pp.c:22505)
        ID: name='SerialDispatcherP__0__sendState' (at pp.c:22505)
        ID: name='SerialDispatcherP__0__SEND_STATE_IDLE' (at pp.c:22505)
      Compound:  (at pp.c:22506)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:22506)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:22506)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:22506)
        Assignment: op='=' (at pp.c:22508)
          ID: name='error' (at pp.c:22508)
          ID: name='SerialDispatcherP__0__sendError' (at pp.c:22508)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:22510)
          ExprList:  (at pp.c:22510)
            ID: name='__nesc_atomic' (at pp.c:22510)
      If:  (at pp.c:22512)
        ID: name='SerialDispatcherP__0__sendCancelled' (at pp.c:22512)
        Compound:  (at pp.c:22512)
          Assignment: op='=' (at pp.c:22514)
            ID: name='error' (at pp.c:22514)
            ID: name='ECANCEL' (at pp.c:22514)
      FuncCall:  (at None)
        ID: name='SerialDispatcherP__0__Send__sendDone' (at pp.c:22517)
        ExprList:  (at pp.c:22517)
          ID: name='SerialDispatcherP__0__sendId' (at pp.c:22517)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:22517)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['message_t'] (at None)
            ID: name='SerialDispatcherP__0__sendBuffer' (at pp.c:22517)
          ID: name='error' (at pp.c:22517)
  FuncDef:  (at pp.c:22521)
    Decl: name='SerialDispatcherP__0__unlockBuffer', quals=[], storage=['inline', 'static'] (at pp.c:22521)
      FuncDecl: quals=None (at pp.c:22521)
        ParamList:  (at pp.c:22521)
          Decl: name='which', quals=[], storage=[] (at pp.c:22521)
            TypeDecl: declname='which', quals=[] (at pp.c:22521)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__unlockBuffer', quals=[] (at pp.c:22521)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22523)
      If:  (at pp.c:22524)
        ID: name='which' (at pp.c:22524)
        Compound:  (at pp.c:22524)
          Assignment: op='=' (at pp.c:22525)
            StructRef: type='.' (at pp.c:22525)
              ID: name='SerialDispatcherP__0__receiveState' (at pp.c:22525)
              ID: name='bufOneLocked' (at pp.c:22525)
            Constant: type='int', value='0' (at pp.c:22525)
        Compound:  (at pp.c:22527)
          Assignment: op='=' (at pp.c:22528)
            StructRef: type='.' (at pp.c:22528)
              ID: name='SerialDispatcherP__0__receiveState' (at pp.c:22528)
              ID: name='bufZeroLocked' (at pp.c:22528)
            Constant: type='int', value='0' (at pp.c:22528)
  FuncDef:  (at pp.c:22533)
    Decl: name='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:22533)
      FuncDecl: quals=None (at pp.c:22533)
        ParamList:  (at pp.c:22533)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22533)
            PtrDecl: quals=[] (at pp.c:22533)
              TypeDecl: declname='msg', quals=[] (at pp.c:22533)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22533)
            TypeDecl: declname='len', quals=[] (at pp.c:22533)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[] (at pp.c:22533)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22535)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint8' (at pp.c:22536)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:22536)
                ExprList:  (at pp.c:22536)
                  ID: name='msg' (at pp.c:22536)
              ID: name='length' (at pp.c:22536)
            ID: name='nxdata' (at pp.c:22536)
          BinaryOp: op='+' (at pp.c:22536)
            ID: name='len' (at pp.c:22536)
            ID: name='CC2420_SIZE' (at pp.c:22536)
  FuncDef:  (at pp.c:22540)
    Decl: name='AMQueueImplP__0__Packet__setPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:22540)
      FuncDecl: quals=None (at pp.c:22540)
        ParamList:  (at pp.c:22540)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22540)
            PtrDecl: quals=[] (at pp.c:22540)
              TypeDecl: declname='msg', quals=[] (at pp.c:22540)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22540)
            TypeDecl: declname='len', quals=[] (at pp.c:22540)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__Packet__setPayloadLength', quals=[] (at pp.c:22540)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22540)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__Packet__setPayloadLength' (at pp.c:22542)
        ExprList:  (at pp.c:22542)
          ID: name='msg' (at pp.c:22542)
          ID: name='len' (at pp.c:22542)
  FuncDef:  (at pp.c:22547)
    Decl: name='AMQueueImplP__0__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:22547)
      FuncDecl: quals=None (at pp.c:22547)
        ParamList:  (at pp.c:22547)
          Decl: name='clientId', quals=[], storage=[] (at pp.c:22547)
            TypeDecl: declname='clientId', quals=[] (at pp.c:22547)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22547)
            PtrDecl: quals=[] (at pp.c:22547)
              TypeDecl: declname='msg', quals=[] (at pp.c:22547)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22548)
            TypeDecl: declname='len', quals=[] (at pp.c:22548)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__Send__send', quals=[] (at pp.c:22547)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22550)
      If:  (at pp.c:22551)
        BinaryOp: op='>=' (at pp.c:22551)
          ID: name='clientId' (at pp.c:22551)
          Constant: type='int', value='1' (at pp.c:22551)
        Compound:  (at pp.c:22551)
          Return:  (at pp.c:22552)
            ID: name='FAIL' (at pp.c:22552)
      If:  (at pp.c:22554)
        BinaryOp: op='!=' (at pp.c:22554)
          StructRef: type='.' (at pp.c:22554)
            ArrayRef:  (at pp.c:22554)
              ID: name='AMQueueImplP__0__queue' (at pp.c:22554)
              ID: name='clientId' (at pp.c:22554)
            ID: name='msg' (at pp.c:22554)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:22554)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['void'] (at None)
            Constant: type='int', value='0' (at pp.c:22554)
        Compound:  (at pp.c:22554)
          Return:  (at pp.c:22555)
            ID: name='EBUSY' (at pp.c:22555)
      Assignment: op='=' (at pp.c:22559)
        StructRef: type='.' (at pp.c:22559)
          ArrayRef:  (at pp.c:22559)
            ID: name='AMQueueImplP__0__queue' (at pp.c:22559)
            ID: name='clientId' (at pp.c:22559)
          ID: name='msg' (at pp.c:22559)
        ID: name='msg' (at pp.c:22559)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__Packet__setPayloadLength' (at pp.c:22560)
        ExprList:  (at pp.c:22560)
          ID: name='msg' (at pp.c:22560)
          ID: name='len' (at pp.c:22560)
      If:  (at pp.c:22562)
        BinaryOp: op='>=' (at pp.c:22562)
          ID: name='AMQueueImplP__0__current' (at pp.c:22562)
          Constant: type='int', value='1' (at pp.c:22562)
        Compound:  (at pp.c:22562)
          Decl: name='err', quals=[], storage=[] (at pp.c:22563)
            TypeDecl: declname='err', quals=[] (at pp.c:22563)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='amId', quals=[], storage=[] (at pp.c:22564)
            TypeDecl: declname='amId', quals=[] (at pp.c:22564)
              IdentifierType: names=['am_id_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMPacket__type' (at pp.c:22564)
              ExprList:  (at pp.c:22564)
                ID: name='msg' (at pp.c:22564)
          Decl: name='dest', quals=[], storage=[] (at pp.c:22565)
            TypeDecl: declname='dest', quals=[] (at pp.c:22565)
              IdentifierType: names=['am_addr_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMPacket__destination' (at pp.c:22565)
              ExprList:  (at pp.c:22565)
                ID: name='msg' (at pp.c:22565)
          Assignment: op='=' (at pp.c:22568)
            ID: name='AMQueueImplP__0__current' (at pp.c:22568)
            ID: name='clientId' (at pp.c:22568)
          Assignment: op='=' (at pp.c:22570)
            ID: name='err' (at pp.c:22570)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMSend__send' (at pp.c:22570)
              ExprList:  (at pp.c:22570)
                ID: name='amId' (at pp.c:22570)
                ID: name='dest' (at pp.c:22570)
                ID: name='msg' (at pp.c:22570)
                ID: name='len' (at pp.c:22570)
          If:  (at pp.c:22571)
            BinaryOp: op='!=' (at pp.c:22571)
              ID: name='err' (at pp.c:22571)
              ID: name='SUCCESS' (at pp.c:22571)
            Compound:  (at pp.c:22571)
              Assignment: op='=' (at pp.c:22573)
                ID: name='AMQueueImplP__0__current' (at pp.c:22573)
                Constant: type='int', value='1' (at pp.c:22573)
              Assignment: op='=' (at pp.c:22574)
                StructRef: type='.' (at pp.c:22574)
                  ArrayRef:  (at pp.c:22574)
                    ID: name='AMQueueImplP__0__queue' (at pp.c:22574)
                    ID: name='clientId' (at pp.c:22574)
                  ID: name='msg' (at pp.c:22574)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:22574)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['void'] (at None)
                  Constant: type='int', value='0' (at pp.c:22574)
          Return:  (at pp.c:22577)
            ID: name='err' (at pp.c:22577)
        Compound:  (at pp.c:22579)
      Return:  (at pp.c:22582)
        ID: name='SUCCESS' (at pp.c:22582)
  FuncDef:  (at pp.c:22586)
    Decl: name='AMQueueEntryP__0__Send__send', quals=[], storage=['static', 'inline'] (at pp.c:22586)
      FuncDecl: quals=None (at pp.c:22586)
        ParamList:  (at pp.c:22586)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22586)
            PtrDecl: quals=[] (at pp.c:22586)
              TypeDecl: declname='msg', quals=[] (at pp.c:22586)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22586)
            TypeDecl: declname='len', quals=[] (at pp.c:22586)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__Send__send', quals=[] (at pp.c:22586)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22586)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22588)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22588)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22592)
        ID: name='__nesc_result' (at pp.c:22592)
        FuncCall:  (at None)
          ID: name='AMQueueImplP__0__Send__send' (at pp.c:22592)
          ExprList:  (at pp.c:22592)
            Constant: type='int', value='0U' (at pp.c:22592)
            ID: name='msg' (at pp.c:22592)
            ID: name='len' (at pp.c:22592)
      Return:  (at pp.c:22596)
        ID: name='__nesc_result' (at pp.c:22596)
  FuncDef:  (at pp.c:22601)
    Decl: name='CC2420ActiveMessageP__AMPacket__setType', quals=[], storage=['inline', 'static'] (at pp.c:22601)
      FuncDecl: quals=None (at pp.c:22601)
        ParamList:  (at pp.c:22601)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:22601)
            PtrDecl: quals=[] (at pp.c:22601)
              TypeDecl: declname='amsg', quals=[] (at pp.c:22601)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='type', quals=[], storage=[] (at pp.c:22601)
            TypeDecl: declname='type', quals=[] (at pp.c:22601)
              IdentifierType: names=['am_id_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setType', quals=[] (at pp.c:22601)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22603)
      Decl: name='header', quals=[], storage=[] (at pp.c:22604)
        PtrDecl: quals=[] (at pp.c:22604)
          TypeDecl: declname='header', quals=[] (at pp.c:22604)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:22604)
          ExprList:  (at pp.c:22604)
            ID: name='amsg' (at pp.c:22604)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint8' (at pp.c:22607)
        ExprList:  (at pp.c:22607)
          StructRef: type='.' (at pp.c:22607)
            StructRef: type='->' (at pp.c:22607)
              ID: name='header' (at pp.c:22607)
              ID: name='type' (at pp.c:22607)
            ID: name='nxdata' (at pp.c:22607)
          ID: name='type' (at pp.c:22607)
  FuncDef:  (at pp.c:22611)
    Decl: name='AMQueueEntryP__0__AMPacket__setType', quals=[], storage=['static', 'inline'] (at pp.c:22611)
      FuncDecl: quals=None (at pp.c:22611)
        ParamList:  (at pp.c:22611)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:22611)
            PtrDecl: quals=[] (at pp.c:22611)
              TypeDecl: declname='amsg', quals=[] (at pp.c:22611)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='t', quals=[], storage=[] (at pp.c:22611)
            TypeDecl: declname='t', quals=[] (at pp.c:22611)
              IdentifierType: names=['am_id_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__AMPacket__setType', quals=[] (at pp.c:22611)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22611)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__AMPacket__setType' (at pp.c:22613)
        ExprList:  (at pp.c:22613)
          ID: name='amsg' (at pp.c:22613)
          ID: name='t' (at pp.c:22613)
  FuncDef:  (at pp.c:22618)
    Decl: name='CC2420ActiveMessageP__AMPacket__setDestination', quals=[], storage=['inline', 'static'] (at pp.c:22618)
      FuncDecl: quals=None (at pp.c:22618)
        ParamList:  (at pp.c:22618)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:22618)
            PtrDecl: quals=[] (at pp.c:22618)
              TypeDecl: declname='amsg', quals=[] (at pp.c:22618)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22618)
            TypeDecl: declname='addr', quals=[] (at pp.c:22618)
              IdentifierType: names=['am_addr_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setDestination', quals=[] (at pp.c:22618)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22620)
      Decl: name='header', quals=[], storage=[] (at pp.c:22621)
        PtrDecl: quals=[] (at pp.c:22621)
          TypeDecl: declname='header', quals=[] (at pp.c:22621)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:22621)
          ExprList:  (at pp.c:22621)
            ID: name='amsg' (at pp.c:22621)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint16' (at pp.c:22624)
        ExprList:  (at pp.c:22624)
          StructRef: type='.' (at pp.c:22624)
            StructRef: type='->' (at pp.c:22624)
              ID: name='header' (at pp.c:22624)
              ID: name='dest' (at pp.c:22624)
            ID: name='nxdata' (at pp.c:22624)
          ID: name='addr' (at pp.c:22624)
  FuncDef:  (at pp.c:22628)
    Decl: name='AMQueueEntryP__0__AMPacket__setDestination', quals=[], storage=['static', 'inline'] (at pp.c:22628)
      FuncDecl: quals=None (at pp.c:22628)
        ParamList:  (at pp.c:22628)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:22628)
            PtrDecl: quals=[] (at pp.c:22628)
              TypeDecl: declname='amsg', quals=[] (at pp.c:22628)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22628)
            TypeDecl: declname='addr', quals=[] (at pp.c:22628)
              IdentifierType: names=['am_addr_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__AMPacket__setDestination', quals=[] (at pp.c:22628)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22628)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__AMPacket__setDestination' (at pp.c:22630)
        ExprList:  (at pp.c:22630)
          ID: name='amsg' (at pp.c:22630)
          ID: name='addr' (at pp.c:22630)
  FuncDef:  (at pp.c:22635)
    Decl: name='AMQueueEntryP__0__AMSend__send', quals=[], storage=['inline', 'static'] (at pp.c:22635)
      FuncDecl: quals=None (at pp.c:22635)
        ParamList:  (at pp.c:22635)
          Decl: name='dest', quals=[], storage=[] (at pp.c:22635)
            TypeDecl: declname='dest', quals=[] (at pp.c:22635)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22636)
            PtrDecl: quals=[] (at pp.c:22636)
              TypeDecl: declname='msg', quals=[] (at pp.c:22636)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22637)
            TypeDecl: declname='len', quals=[] (at pp.c:22637)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__AMSend__send', quals=[] (at pp.c:22635)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22639)
      FuncCall:  (at None)
        ID: name='AMQueueEntryP__0__AMPacket__setDestination' (at pp.c:22640)
        ExprList:  (at pp.c:22640)
          ID: name='msg' (at pp.c:22640)
          ID: name='dest' (at pp.c:22640)
      FuncCall:  (at None)
        ID: name='AMQueueEntryP__0__AMPacket__setType' (at pp.c:22641)
        ExprList:  (at pp.c:22641)
          ID: name='msg' (at pp.c:22641)
          Constant: type='int', value='147' (at pp.c:22641)
      Return:  (at pp.c:22642)
        FuncCall:  (at None)
          ID: name='AMQueueEntryP__0__Send__send' (at pp.c:22642)
          ExprList:  (at pp.c:22642)
            ID: name='msg' (at pp.c:22642)
            ID: name='len' (at pp.c:22642)
  FuncDef:  (at pp.c:22646)
    Decl: name='LplAMSenderP__0__SubAMSend__send', quals=[], storage=['static', 'inline'] (at pp.c:22646)
      FuncDecl: quals=None (at pp.c:22646)
        ParamList:  (at pp.c:22646)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22646)
            TypeDecl: declname='addr', quals=[] (at pp.c:22646)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22646)
            PtrDecl: quals=[] (at pp.c:22646)
              TypeDecl: declname='msg', quals=[] (at pp.c:22646)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22646)
            TypeDecl: declname='len', quals=[] (at pp.c:22646)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='LplAMSenderP__0__SubAMSend__send', quals=[] (at pp.c:22646)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22646)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22648)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22648)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22652)
        ID: name='__nesc_result' (at pp.c:22652)
        FuncCall:  (at None)
          ID: name='AMQueueEntryP__0__AMSend__send' (at pp.c:22652)
          ExprList:  (at pp.c:22652)
            ID: name='addr' (at pp.c:22652)
            ID: name='msg' (at pp.c:22652)
            ID: name='len' (at pp.c:22652)
      Return:  (at pp.c:22656)
        ID: name='__nesc_result' (at pp.c:22656)
  FuncDef:  (at pp.c:22661)
    Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:22661)
      FuncDecl: quals=None (at pp.c:22661)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[] (at pp.c:22661)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:22663)
      Return:  (at pp.c:22665)
        ID: name='SystemLowPowerListeningP__remoteWakeup' (at pp.c:22665)
  FuncDef:  (at pp.c:22669)
    Decl: name='LplAMSenderP__0__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[], storage=['static', 'inline'] (at pp.c:22669)
      FuncDecl: quals=None (at pp.c:22669)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LplAMSenderP__0__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[] (at pp.c:22669)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:22669)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22671)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22671)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22675)
        ID: name='__nesc_result' (at pp.c:22675)
        FuncCall:  (at None)
          ID: name='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval' (at pp.c:22675)
      Return:  (at pp.c:22679)
        ID: name='__nesc_result' (at pp.c:22679)
  FuncDef:  (at pp.c:22684)
    Decl: name='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:22684)
      FuncDecl: quals=None (at pp.c:22684)
        ParamList:  (at pp.c:22684)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22684)
            PtrDecl: quals=[] (at pp.c:22684)
              TypeDecl: declname='msg', quals=[] (at pp.c:22684)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='intervalMs', quals=[], storage=[] (at pp.c:22685)
            TypeDecl: declname='intervalMs', quals=[] (at pp.c:22685)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[] (at pp.c:22684)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22687)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint16' (at pp.c:22688)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='DefaultLplP__CC2420PacketBody__getMetadata' (at pp.c:22688)
                ExprList:  (at pp.c:22688)
                  ID: name='msg' (at pp.c:22688)
              ID: name='rxInterval' (at pp.c:22688)
            ID: name='nxdata' (at pp.c:22688)
          ID: name='intervalMs' (at pp.c:22688)
  FuncDef:  (at pp.c:22692)
    Decl: name='LplAMSenderP__0__Lpl__setRemoteWakeupInterval', quals=[], storage=['static', 'inline'] (at pp.c:22692)
      FuncDecl: quals=None (at pp.c:22692)
        ParamList:  (at pp.c:22692)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22692)
            PtrDecl: quals=[] (at pp.c:22692)
              TypeDecl: declname='msg', quals=[] (at pp.c:22692)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='intervalMs', quals=[], storage=[] (at pp.c:22692)
            TypeDecl: declname='intervalMs', quals=[] (at pp.c:22692)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='LplAMSenderP__0__Lpl__setRemoteWakeupInterval', quals=[] (at pp.c:22692)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22692)
      FuncCall:  (at None)
        ID: name='DefaultLplP__LowPowerListening__setRemoteWakeupInterval' (at pp.c:22694)
        ExprList:  (at pp.c:22694)
          ID: name='msg' (at pp.c:22694)
          ID: name='intervalMs' (at pp.c:22694)
  FuncDef:  (at pp.c:22699)
    Decl: name='LplAMSenderP__0__AMSend__send', quals=[], storage=['inline', 'static'] (at pp.c:22699)
      FuncDecl: quals=None (at pp.c:22699)
        ParamList:  (at pp.c:22699)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22699)
            TypeDecl: declname='addr', quals=[] (at pp.c:22699)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22699)
            PtrDecl: quals=[] (at pp.c:22699)
              TypeDecl: declname='msg', quals=[] (at pp.c:22699)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22699)
            TypeDecl: declname='len', quals=[] (at pp.c:22699)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='LplAMSenderP__0__AMSend__send', quals=[] (at pp.c:22699)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22700)
      FuncCall:  (at None)
        ID: name='LplAMSenderP__0__Lpl__setRemoteWakeupInterval' (at pp.c:22701)
        ExprList:  (at pp.c:22701)
          ID: name='msg' (at pp.c:22701)
          FuncCall:  (at None)
            ID: name='LplAMSenderP__0__SystemLowPowerListening__getDefaultRemoteWakeupInterval' (at pp.c:22701)
      Return:  (at pp.c:22702)
        FuncCall:  (at None)
          ID: name='LplAMSenderP__0__SubAMSend__send' (at pp.c:22702)
          ExprList:  (at pp.c:22702)
            ID: name='addr' (at pp.c:22702)
            ID: name='msg' (at pp.c:22702)
            ID: name='len' (at pp.c:22702)
  FuncDef:  (at pp.c:22706)
    Decl: name='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__send', quals=[], storage=['static', 'inline'] (at pp.c:22706)
      FuncDecl: quals=None (at pp.c:22706)
        ParamList:  (at pp.c:22706)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22706)
            TypeDecl: declname='addr', quals=[] (at pp.c:22706)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22706)
            PtrDecl: quals=[] (at pp.c:22706)
              TypeDecl: declname='msg', quals=[] (at pp.c:22706)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22706)
            TypeDecl: declname='len', quals=[] (at pp.c:22706)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__send', quals=[] (at pp.c:22706)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22706)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22708)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22708)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22712)
        ID: name='__nesc_result' (at pp.c:22712)
        FuncCall:  (at None)
          ID: name='LplAMSenderP__0__AMSend__send' (at pp.c:22712)
          ExprList:  (at pp.c:22712)
            ID: name='addr' (at pp.c:22712)
            ID: name='msg' (at pp.c:22712)
            ID: name='len' (at pp.c:22712)
      Return:  (at pp.c:22716)
        ID: name='__nesc_result' (at pp.c:22716)
  FuncDef:  (at pp.c:22721)
    Decl: name='LowPowerSensingBaseC__LPL__setRemoteWakeupInterval', quals=[], storage=['static', 'inline'] (at pp.c:22721)
      FuncDecl: quals=None (at pp.c:22721)
        ParamList:  (at pp.c:22721)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22721)
            PtrDecl: quals=[] (at pp.c:22721)
              TypeDecl: declname='msg', quals=[] (at pp.c:22721)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='intervalMs', quals=[], storage=[] (at pp.c:22721)
            TypeDecl: declname='intervalMs', quals=[] (at pp.c:22721)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__LPL__setRemoteWakeupInterval', quals=[] (at pp.c:22721)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22721)
      FuncCall:  (at None)
        ID: name='DefaultLplP__LowPowerListening__setRemoteWakeupInterval' (at pp.c:22723)
        ExprList:  (at pp.c:22723)
          ID: name='msg' (at pp.c:22723)
          ID: name='intervalMs' (at pp.c:22723)
  FuncDef:  (at pp.c:22728)
    Decl: name='HplMsp430GeneralIOP__36__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:22728)
      FuncDecl: quals=None (at pp.c:22728)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__36__IO__clr', quals=[] (at pp.c:22728)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22730)
      Compound:  (at pp.c:22732)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:22732)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:22732)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:22732)
        Assignment: op='&=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:22734)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='49U' (at pp.c:22734)
          UnaryOp: op='~' (at pp.c:22734)
            BinaryOp: op='<<' (at pp.c:22734)
              Constant: type='int', value='0x01' (at pp.c:22734)
              Constant: type='int', value='4' (at pp.c:22734)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:22736)
          ExprList:  (at pp.c:22736)
            ID: name='__nesc_atomic' (at pp.c:22736)
  FuncDef:  (at pp.c:22740)
    Decl: name='Msp430GpioC__0__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:22740)
      FuncDecl: quals=None (at pp.c:22740)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__clr', quals=[] (at pp.c:22740)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22740)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__36__IO__clr' (at pp.c:22742)
  FuncDef:  (at pp.c:22747)
    Decl: name='Msp430GpioC__0__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:22747)
      FuncDecl: quals=None (at pp.c:22747)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__GeneralIO__clr', quals=[] (at pp.c:22747)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22749)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__HplGeneralIO__clr' (at pp.c:22751)
  FuncDef:  (at pp.c:22755)
    Decl: name='LedsP__Led0__clr', quals=[], storage=['static', 'inline'] (at pp.c:22755)
      FuncDecl: quals=None (at pp.c:22755)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led0__clr', quals=[] (at pp.c:22755)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22755)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__GeneralIO__clr' (at pp.c:22757)
  FuncDef:  (at pp.c:22762)
    Decl: name='LedsP__Leds__led0On', quals=[], storage=['inline', 'static'] (at pp.c:22762)
      FuncDecl: quals=None (at pp.c:22762)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Leds__led0On', quals=[] (at pp.c:22762)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22764)
      FuncCall:  (at None)
        ID: name='LedsP__Led0__clr' (at pp.c:22765)
  FuncDef:  (at pp.c:22772)
    Decl: name='LowPowerSensingBaseC__Leds__led0On', quals=[], storage=['static', 'inline'] (at pp.c:22772)
      FuncDecl: quals=None (at pp.c:22772)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__Leds__led0On', quals=[] (at pp.c:22772)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22772)
      FuncCall:  (at None)
        ID: name='LedsP__Leds__led0On' (at pp.c:22774)
  FuncDef:  (at pp.c:22779)
    Decl: name='LowPowerSensingBaseC__SerialRequestSampleMsgsReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:22779)
      FuncDecl: quals=None (at pp.c:22779)
        ParamList:  (at pp.c:22779)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22779)
            PtrDecl: quals=[] (at pp.c:22779)
              TypeDecl: declname='msg', quals=[] (at pp.c:22779)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:22779)
            PtrDecl: quals=[] (at pp.c:22779)
              TypeDecl: declname='payload', quals=[] (at pp.c:22779)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22779)
            TypeDecl: declname='len', quals=[] (at pp.c:22779)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:22779)
          TypeDecl: declname='LowPowerSensingBaseC__SerialRequestSampleMsgsReceive__receive', quals=[] (at pp.c:22779)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:22781)
      Decl: name='request_msg', quals=[], storage=[] (at pp.c:22782)
        PtrDecl: quals=[] (at pp.c:22782)
          TypeDecl: declname='request_msg', quals=[] (at pp.c:22782)
            IdentifierType: names=['serial_request_samples_msg_t'] (at None)
        ID: name='payload' (at pp.c:22782)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__Leds__led0On' (at pp.c:22785)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__LPL__setRemoteWakeupInterval' (at pp.c:22786)
        ExprList:  (at pp.c:22786)
          UnaryOp: op='&' (at pp.c:22786)
            ID: name='LowPowerSensingBaseC__request_samples_msg' (at pp.c:22786)
          BinaryOp: op='+' (at pp.c:22786)
            ID: name='LPL_INTERVAL' (at pp.c:22786)
            Constant: type='int', value='100' (at pp.c:22786)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__RadioRequestSampleMsgsSend__send' (at pp.c:22787)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_uint16' (at pp.c:22787)
            ExprList:  (at pp.c:22787)
              StructRef: type='.' (at pp.c:22787)
                StructRef: type='->' (at pp.c:22787)
                  ID: name='request_msg' (at pp.c:22787)
                  ID: name='addr' (at pp.c:22787)
                ID: name='nxdata' (at pp.c:22787)
          UnaryOp: op='&' (at pp.c:22787)
            ID: name='LowPowerSensingBaseC__request_samples_msg' (at pp.c:22787)
          UnaryOp: op='sizeof' (at pp.c:22787)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['request_samples_msg_t'] (at None)
      Return:  (at pp.c:22788)
        ID: name='msg' (at pp.c:22788)
  FuncDef:  (at pp.c:22792)
    Decl: name='SerialActiveMessageP__0__Receive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:22792)
      FuncDecl: quals=None (at pp.c:22792)
        ParamList:  (at pp.c:22792)
          Decl: name='id', quals=[], storage=[] (at pp.c:22792)
            TypeDecl: declname='id', quals=[] (at pp.c:22792)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22792)
            PtrDecl: quals=[] (at pp.c:22792)
              TypeDecl: declname='msg', quals=[] (at pp.c:22792)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:22792)
            PtrDecl: quals=[] (at pp.c:22792)
              TypeDecl: declname='payload', quals=[] (at pp.c:22792)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22792)
            TypeDecl: declname='len', quals=[] (at pp.c:22792)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:22792)
          TypeDecl: declname='SerialActiveMessageP__0__Receive__default__receive', quals=[] (at pp.c:22792)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:22794)
      Return:  (at pp.c:22795)
        ID: name='msg' (at pp.c:22795)
  FuncDef:  (at pp.c:22799)
    Decl: name='SerialActiveMessageP__0__Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:22799)
      FuncDecl: quals=None (at pp.c:22799)
        ParamList:  (at pp.c:22799)
          Decl: name='arg_0x10199c158', quals=[], storage=[] (at pp.c:22799)
            TypeDecl: declname='arg_0x10199c158', quals=[] (at pp.c:22799)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22799)
            PtrDecl: quals=[] (at pp.c:22799)
              TypeDecl: declname='msg', quals=[] (at pp.c:22799)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:22799)
            PtrDecl: quals=[] (at pp.c:22799)
              TypeDecl: declname='payload', quals=[] (at pp.c:22799)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22799)
            TypeDecl: declname='len', quals=[] (at pp.c:22799)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:22799)
          TypeDecl: declname='SerialActiveMessageP__0__Receive__receive', quals=[] (at pp.c:22799)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:22799)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22801)
        PtrDecl: quals=[] (at pp.c:22801)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22801)
            Struct: name='message_t', packed=False (at pp.c:22801)
      Switch:  (at pp.c:22805)
        ID: name='arg_0x10199c158' (at pp.c:22805)
        Compound:  (at pp.c:22805)
          Case:  (at pp.c:22807)
            Constant: type='int', value='146' (at pp.c:22807)
            Assignment: op='=' (at pp.c:22809)
              ID: name='__nesc_result' (at pp.c:22809)
              FuncCall:  (at None)
                ID: name='LowPowerSensingBaseC__SerialRequestSampleMsgsReceive__receive' (at pp.c:22809)
                ExprList:  (at pp.c:22809)
                  ID: name='msg' (at pp.c:22809)
                  ID: name='payload' (at pp.c:22809)
                  ID: name='len' (at pp.c:22809)
          Break:  (at pp.c:22811)
          Default:  (at pp.c:22813)
            Assignment: op='=' (at pp.c:22815)
              ID: name='__nesc_result' (at pp.c:22815)
              FuncCall:  (at None)
                ID: name='SerialActiveMessageP__0__Receive__default__receive' (at pp.c:22815)
                ExprList:  (at pp.c:22815)
                  ID: name='arg_0x10199c158' (at pp.c:22815)
                  ID: name='msg' (at pp.c:22815)
                  ID: name='payload' (at pp.c:22815)
                  ID: name='len' (at pp.c:22815)
          Break:  (at pp.c:22817)
      Return:  (at pp.c:22823)
        ID: name='__nesc_result' (at pp.c:22823)
  FuncDef:  (at pp.c:22828)
    Decl: name='SerialActiveMessageP__0__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:22828)
      FuncDecl: quals=None (at pp.c:22828)
        ParamList:  (at pp.c:22828)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22828)
            PtrDecl: quals=[] (at pp.c:22828)
              TypeDecl: declname='msg', quals=[] (at pp.c:22828)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:22828)
            PtrDecl: quals=[] (at pp.c:22828)
              TypeDecl: declname='payload', quals=[] (at pp.c:22828)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22828)
            TypeDecl: declname='len', quals=[] (at pp.c:22828)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:22828)
          TypeDecl: declname='SerialActiveMessageP__0__SubReceive__receive', quals=[] (at pp.c:22828)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:22830)
      Return:  (at pp.c:22831)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__Receive__receive' (at pp.c:22831)
          ExprList:  (at None)
            FuncCall:  (at None)
              ID: name='SerialActiveMessageP__0__AMPacket__type' (at pp.c:22831)
              ExprList:  (at pp.c:22831)
                ID: name='msg' (at pp.c:22831)
            ID: name='msg' (at pp.c:22831)
            StructRef: type='->' (at pp.c:22831)
              ID: name='msg' (at pp.c:22831)
              ID: name='data' (at pp.c:22831)
            ID: name='len' (at pp.c:22831)
  FuncDef:  (at pp.c:22835)
    Decl: name='SerialDispatcherP__0__Receive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:22835)
      FuncDecl: quals=None (at pp.c:22835)
        ParamList:  (at pp.c:22835)
          Decl: name='idxxx', quals=[], storage=[] (at pp.c:22835)
            TypeDecl: declname='idxxx', quals=[] (at pp.c:22835)
              IdentifierType: names=['uart_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22835)
            PtrDecl: quals=[] (at pp.c:22835)
              TypeDecl: declname='msg', quals=[] (at pp.c:22835)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:22836)
            PtrDecl: quals=[] (at pp.c:22836)
              TypeDecl: declname='payload', quals=[] (at pp.c:22836)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22837)
            TypeDecl: declname='len', quals=[] (at pp.c:22837)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:22835)
          TypeDecl: declname='SerialDispatcherP__0__Receive__default__receive', quals=[] (at pp.c:22835)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:22839)
      Return:  (at pp.c:22840)
        ID: name='msg' (at pp.c:22840)
  FuncDef:  (at pp.c:22844)
    Decl: name='SerialDispatcherP__0__Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:22844)
      FuncDecl: quals=None (at pp.c:22844)
        ParamList:  (at pp.c:22844)
          Decl: name='arg_0x101ad1c50', quals=[], storage=[] (at pp.c:22844)
            TypeDecl: declname='arg_0x101ad1c50', quals=[] (at pp.c:22844)
              IdentifierType: names=['uart_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22844)
            PtrDecl: quals=[] (at pp.c:22844)
              TypeDecl: declname='msg', quals=[] (at pp.c:22844)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:22844)
            PtrDecl: quals=[] (at pp.c:22844)
              TypeDecl: declname='payload', quals=[] (at pp.c:22844)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22844)
            TypeDecl: declname='len', quals=[] (at pp.c:22844)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:22844)
          TypeDecl: declname='SerialDispatcherP__0__Receive__receive', quals=[] (at pp.c:22844)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:22844)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22846)
        PtrDecl: quals=[] (at pp.c:22846)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22846)
            Struct: name='message_t', packed=False (at pp.c:22846)
      Switch:  (at pp.c:22850)
        ID: name='arg_0x101ad1c50' (at pp.c:22850)
        Compound:  (at pp.c:22850)
          Case:  (at pp.c:22852)
            ID: name='TOS_SERIAL_ACTIVE_MESSAGE_ID' (at pp.c:22852)
            Assignment: op='=' (at pp.c:22854)
              ID: name='__nesc_result' (at pp.c:22854)
              FuncCall:  (at None)
                ID: name='SerialActiveMessageP__0__SubReceive__receive' (at pp.c:22854)
                ExprList:  (at pp.c:22854)
                  ID: name='msg' (at pp.c:22854)
                  ID: name='payload' (at pp.c:22854)
                  ID: name='len' (at pp.c:22854)
          Break:  (at pp.c:22856)
          Default:  (at pp.c:22858)
            Assignment: op='=' (at pp.c:22860)
              ID: name='__nesc_result' (at pp.c:22860)
              FuncCall:  (at None)
                ID: name='SerialDispatcherP__0__Receive__default__receive' (at pp.c:22860)
                ExprList:  (at pp.c:22860)
                  ID: name='arg_0x101ad1c50' (at pp.c:22860)
                  ID: name='msg' (at pp.c:22860)
                  ID: name='payload' (at pp.c:22860)
                  ID: name='len' (at pp.c:22860)
          Break:  (at pp.c:22862)
      Return:  (at pp.c:22868)
        ID: name='__nesc_result' (at pp.c:22868)
  FuncDef:  (at pp.c:22873)
    Decl: name='SerialPacketInfoActiveMessageP__Info__upperLength', quals=[], storage=['inline', 'static'] (at pp.c:22873)
      FuncDecl: quals=None (at pp.c:22873)
        ParamList:  (at pp.c:22873)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22873)
            PtrDecl: quals=[] (at pp.c:22873)
              TypeDecl: declname='msg', quals=[] (at pp.c:22873)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='dataLinkLen', quals=[], storage=[] (at pp.c:22873)
            TypeDecl: declname='dataLinkLen', quals=[] (at pp.c:22873)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialPacketInfoActiveMessageP__Info__upperLength', quals=[] (at pp.c:22873)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:22875)
      Return:  (at pp.c:22876)
        BinaryOp: op='-' (at pp.c:22876)
          ID: name='dataLinkLen' (at pp.c:22876)
          UnaryOp: op='sizeof' (at pp.c:22876)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['serial_header_t'] (at None)
  FuncDef:  (at pp.c:22880)
    Decl: name='SerialDispatcherP__0__PacketInfo__default__upperLength', quals=[], storage=['inline', 'static'] (at pp.c:22880)
      FuncDecl: quals=None (at pp.c:22880)
        ParamList:  (at pp.c:22880)
          Decl: name='id', quals=[], storage=[] (at pp.c:22880)
            TypeDecl: declname='id', quals=[] (at pp.c:22880)
              IdentifierType: names=['uart_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22880)
            PtrDecl: quals=[] (at pp.c:22880)
              TypeDecl: declname='msg', quals=[] (at pp.c:22880)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='dataLinkLen', quals=[], storage=[] (at pp.c:22881)
            TypeDecl: declname='dataLinkLen', quals=[] (at pp.c:22881)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__PacketInfo__default__upperLength', quals=[] (at pp.c:22880)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:22883)
      Return:  (at pp.c:22884)
        Constant: type='int', value='0' (at pp.c:22884)
  FuncDef:  (at pp.c:22888)
    Decl: name='SerialDispatcherP__0__PacketInfo__upperLength', quals=[], storage=['static', 'inline'] (at pp.c:22888)
      FuncDecl: quals=None (at pp.c:22888)
        ParamList:  (at pp.c:22888)
          Decl: name='arg_0x101acdaa8', quals=[], storage=[] (at pp.c:22888)
            TypeDecl: declname='arg_0x101acdaa8', quals=[] (at pp.c:22888)
              IdentifierType: names=['uart_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22888)
            PtrDecl: quals=[] (at pp.c:22888)
              TypeDecl: declname='msg', quals=[] (at pp.c:22888)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='dataLinkLen', quals=[], storage=[] (at pp.c:22888)
            TypeDecl: declname='dataLinkLen', quals=[] (at pp.c:22888)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__PacketInfo__upperLength', quals=[] (at pp.c:22888)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:22888)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22890)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22890)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:22894)
        ID: name='arg_0x101acdaa8' (at pp.c:22894)
        Compound:  (at pp.c:22894)
          Case:  (at pp.c:22896)
            ID: name='TOS_SERIAL_ACTIVE_MESSAGE_ID' (at pp.c:22896)
            Assignment: op='=' (at pp.c:22898)
              ID: name='__nesc_result' (at pp.c:22898)
              FuncCall:  (at None)
                ID: name='SerialPacketInfoActiveMessageP__Info__upperLength' (at pp.c:22898)
                ExprList:  (at pp.c:22898)
                  ID: name='msg' (at pp.c:22898)
                  ID: name='dataLinkLen' (at pp.c:22898)
          Break:  (at pp.c:22900)
          Default:  (at pp.c:22902)
            Assignment: op='=' (at pp.c:22904)
              ID: name='__nesc_result' (at pp.c:22904)
              FuncCall:  (at None)
                ID: name='SerialDispatcherP__0__PacketInfo__default__upperLength' (at pp.c:22904)
                ExprList:  (at pp.c:22904)
                  ID: name='arg_0x101acdaa8' (at pp.c:22904)
                  ID: name='msg' (at pp.c:22904)
                  ID: name='dataLinkLen' (at pp.c:22904)
          Break:  (at pp.c:22906)
      Return:  (at pp.c:22912)
        ID: name='__nesc_result' (at pp.c:22912)
  FuncDef:  (at pp.c:22917)
    Decl: name='SerialDispatcherP__0__receiveTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:22917)
      FuncDecl: quals=None (at pp.c:22917)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__receiveTask__runTask', quals=[] (at pp.c:22917)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22919)
      Decl: name='myType', quals=[], storage=[] (at pp.c:22920)
        TypeDecl: declname='myType', quals=[] (at pp.c:22920)
          IdentifierType: names=['uart_id_t'] (at None)
      Decl: name='myBuf', quals=[], storage=[] (at pp.c:22921)
        PtrDecl: quals=[] (at pp.c:22921)
          TypeDecl: declname='myBuf', quals=[] (at pp.c:22921)
            IdentifierType: names=['message_t'] (at None)
      Decl: name='mySize', quals=[], storage=[] (at pp.c:22922)
        TypeDecl: declname='mySize', quals=[] (at pp.c:22922)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='myWhich', quals=[], storage=[] (at pp.c:22923)
        TypeDecl: declname='myWhich', quals=[] (at pp.c:22923)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:22926)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:22926)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:22926)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:22926)
        Compound:  (at pp.c:22928)
          Assignment: op='=' (at pp.c:22929)
            ID: name='myType' (at pp.c:22929)
            ID: name='SerialDispatcherP__0__receiveTaskType' (at pp.c:22929)
          Assignment: op='=' (at pp.c:22930)
            ID: name='myBuf' (at pp.c:22930)
            ID: name='SerialDispatcherP__0__receiveTaskBuf' (at pp.c:22930)
          Assignment: op='=' (at pp.c:22931)
            ID: name='mySize' (at pp.c:22931)
            ID: name='SerialDispatcherP__0__receiveTaskSize' (at pp.c:22931)
          Assignment: op='=' (at pp.c:22932)
            ID: name='myWhich' (at pp.c:22932)
            ID: name='SerialDispatcherP__0__receiveTaskWhich' (at pp.c:22932)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:22935)
          ExprList:  (at pp.c:22935)
            ID: name='__nesc_atomic' (at pp.c:22935)
      Assignment: op='-=' (at pp.c:22936)
        ID: name='mySize' (at pp.c:22936)
        FuncCall:  (at None)
          ID: name='SerialDispatcherP__0__PacketInfo__offset' (at pp.c:22936)
          ExprList:  (at pp.c:22936)
            ID: name='myType' (at pp.c:22936)
      Assignment: op='=' (at pp.c:22937)
        ID: name='mySize' (at pp.c:22937)
        FuncCall:  (at None)
          ID: name='SerialDispatcherP__0__PacketInfo__upperLength' (at pp.c:22937)
          ExprList:  (at pp.c:22937)
            ID: name='myType' (at pp.c:22937)
            ID: name='myBuf' (at pp.c:22937)
            ID: name='mySize' (at pp.c:22937)
      Assignment: op='=' (at pp.c:22938)
        ID: name='myBuf' (at pp.c:22938)
        FuncCall:  (at None)
          ID: name='SerialDispatcherP__0__Receive__receive' (at pp.c:22938)
          ExprList:  (at pp.c:22938)
            ID: name='myType' (at pp.c:22938)
            ID: name='myBuf' (at pp.c:22938)
            ID: name='myBuf' (at pp.c:22938)
            ID: name='mySize' (at pp.c:22938)
      Compound:  (at pp.c:22939)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:22939)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:22939)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:22939)
        Compound:  (at pp.c:22941)
          Assignment: op='=' (at pp.c:22942)
            ArrayRef:  (at pp.c:22942)
              ID: name='SerialDispatcherP__0__messagePtrs' (at pp.c:22942)
              ID: name='myWhich' (at pp.c:22942)
            ID: name='myBuf' (at pp.c:22942)
          FuncCall:  (at None)
            ID: name='SerialDispatcherP__0__unlockBuffer' (at pp.c:22943)
            ExprList:  (at pp.c:22943)
              ID: name='myWhich' (at pp.c:22943)
          Assignment: op='=' (at pp.c:22944)
            ID: name='SerialDispatcherP__0__receiveTaskPending' (at pp.c:22944)
            ID: name='FALSE' (at pp.c:22944)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:22947)
          ExprList:  (at pp.c:22947)
            ID: name='__nesc_atomic' (at pp.c:22947)
  FuncDef:  (at pp.c:22951)
    Decl: name='LowPowerSensingBaseC__SerialAMControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:22951)
      FuncDecl: quals=None (at pp.c:22951)
        ParamList:  (at pp.c:22951)
          Decl: name='error', quals=[], storage=[] (at pp.c:22951)
            TypeDecl: declname='error', quals=[] (at pp.c:22951)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__SerialAMControl__stopDone', quals=[] (at pp.c:22951)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22953)
  FuncDef:  (at pp.c:22957)
    Decl: name='SerialP__SplitControl__stopDone', quals=[], storage=['static', 'inline'] (at pp.c:22957)
      FuncDecl: quals=None (at pp.c:22957)
        ParamList:  (at pp.c:22957)
          Decl: name='error', quals=[], storage=[] (at pp.c:22957)
            TypeDecl: declname='error', quals=[] (at pp.c:22957)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SerialP__SplitControl__stopDone', quals=[] (at pp.c:22957)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22957)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__SerialAMControl__stopDone' (at pp.c:22959)
        ExprList:  (at pp.c:22959)
          ID: name='error' (at pp.c:22959)
  FuncDef:  (at pp.c:22964)
    Decl: name='HplMsp430Usart1P__AsyncStdControl__stop', quals=[], storage=['inline', 'static'] (at pp.c:22964)
      FuncDecl: quals=None (at pp.c:22964)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__AsyncStdControl__stop', quals=[] (at pp.c:22964)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22966)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Usart__disableSpi' (at pp.c:22967)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Usart__disableUart' (at pp.c:22968)
      Return:  (at pp.c:22969)
        ID: name='SUCCESS' (at pp.c:22969)
  FuncDef:  (at pp.c:22973)
    Decl: name='AsyncPowerManagerP__0__AsyncStdControl__stop', quals=[], storage=['static', 'inline'] (at pp.c:22973)
      FuncDecl: quals=None (at pp.c:22973)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AsyncPowerManagerP__0__AsyncStdControl__stop', quals=[] (at pp.c:22973)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22973)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22975)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22975)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22979)
        ID: name='__nesc_result' (at pp.c:22979)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart1P__AsyncStdControl__stop' (at pp.c:22979)
      Return:  (at pp.c:22983)
        ID: name='__nesc_result' (at pp.c:22983)
  FuncDef:  (at pp.c:22988)
    Decl: name='AsyncPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[], storage=['inline', 'static'] (at pp.c:22988)
      FuncDecl: quals=None (at pp.c:22988)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AsyncPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[] (at pp.c:22988)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22990)
  FuncDef:  (at pp.c:22994)
    Decl: name='AsyncPowerManagerP__0__PowerDownCleanup__cleanup', quals=[], storage=['static', 'inline'] (at pp.c:22994)
      FuncDecl: quals=None (at pp.c:22994)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AsyncPowerManagerP__0__PowerDownCleanup__cleanup', quals=[] (at pp.c:22994)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22994)
      FuncCall:  (at None)
        ID: name='AsyncPowerManagerP__0__PowerDownCleanup__default__cleanup' (at pp.c:22996)
  FuncDef:  (at pp.c:23001)
    Decl: name='AsyncPowerManagerP__0__ResourceDefaultOwner__granted', quals=[], storage=['inline', 'static'] (at pp.c:23001)
      FuncDecl: quals=None (at pp.c:23001)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AsyncPowerManagerP__0__ResourceDefaultOwner__granted', quals=[] (at pp.c:23001)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23003)
      FuncCall:  (at None)
        ID: name='AsyncPowerManagerP__0__PowerDownCleanup__cleanup' (at pp.c:23004)
      FuncCall:  (at None)
        ID: name='AsyncPowerManagerP__0__AsyncStdControl__stop' (at pp.c:23005)
  FuncDef:  (at pp.c:23009)
    Decl: name='ArbiterP__0__ResourceDefaultOwner__granted', quals=[], storage=['static', 'inline'] (at pp.c:23009)
      FuncDecl: quals=None (at pp.c:23009)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__granted', quals=[] (at pp.c:23009)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23009)
      FuncCall:  (at None)
        ID: name='AsyncPowerManagerP__0__ResourceDefaultOwner__granted' (at pp.c:23011)
  FuncDef:  (at pp.c:23016)
    Decl: name='Msp430UartP__0__Usart__disableUart', quals=[], storage=['static', 'inline'] (at pp.c:23016)
      FuncDecl: quals=None (at pp.c:23016)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UartP__0__Usart__disableUart', quals=[] (at pp.c:23016)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23016)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Usart__disableUart' (at pp.c:23018)
  FuncDef:  (at pp.c:23023)
    Decl: name='Msp430UartP__0__Usart__disableIntr', quals=[], storage=['static', 'inline'] (at pp.c:23023)
      FuncDecl: quals=None (at pp.c:23023)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UartP__0__Usart__disableIntr', quals=[] (at pp.c:23023)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23023)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Usart__disableIntr' (at pp.c:23025)
  FuncDef:  (at pp.c:23030)
    Decl: name='Msp430UartP__0__Usart__resetUsart', quals=[], storage=['static', 'inline'] (at pp.c:23030)
      FuncDecl: quals=None (at pp.c:23030)
        ParamList:  (at pp.c:23030)
          Decl: name='reset', quals=[], storage=[] (at pp.c:23030)
            TypeDecl: declname='reset', quals=[] (at pp.c:23030)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430UartP__0__Usart__resetUsart', quals=[] (at pp.c:23030)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23030)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Usart__resetUsart' (at pp.c:23032)
        ExprList:  (at pp.c:23032)
          ID: name='reset' (at pp.c:23032)
  FuncDef:  (at pp.c:23037)
    Decl: name='Msp430UartP__0__ResourceConfigure__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:23037)
      FuncDecl: quals=None (at pp.c:23037)
        ParamList:  (at pp.c:23037)
          Decl: name='id', quals=[], storage=[] (at pp.c:23037)
            TypeDecl: declname='id', quals=[] (at pp.c:23037)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:23037)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23039)
      FuncCall:  (at None)
        ID: name='Msp430UartP__0__Usart__resetUsart' (at pp.c:23040)
        ExprList:  (at pp.c:23040)
          ID: name='TRUE' (at pp.c:23040)
      FuncCall:  (at None)
        ID: name='Msp430UartP__0__Usart__disableIntr' (at pp.c:23041)
      FuncCall:  (at None)
        ID: name='Msp430UartP__0__Usart__disableUart' (at pp.c:23042)
  FuncDef:  (at pp.c:23046)
    Decl: name='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:23046)
      FuncDecl: quals=None (at pp.c:23046)
        ParamList:  (at pp.c:23046)
          Decl: name='id', quals=[], storage=[] (at pp.c:23046)
            TypeDecl: declname='id', quals=[] (at pp.c:23046)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:23046)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23048)
  FuncDef:  (at pp.c:23052)
    Decl: name='ArbiterP__0__ResourceConfigure__unconfigure', quals=[], storage=['static', 'inline'] (at pp.c:23052)
      FuncDecl: quals=None (at pp.c:23052)
        ParamList:  (at pp.c:23052)
          Decl: name='arg_0x101d7d9b8', quals=[], storage=[] (at pp.c:23052)
            TypeDecl: declname='arg_0x101d7d9b8', quals=[] (at pp.c:23052)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:23052)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23052)
      Switch:  (at pp.c:23054)
        ID: name='arg_0x101d7d9b8' (at pp.c:23054)
        Compound:  (at pp.c:23054)
          Case:  (at pp.c:23056)
            ID: name='Msp430Usart1C__0__CLIENT_ID' (at pp.c:23056)
            FuncCall:  (at None)
              ID: name='Msp430UartP__0__ResourceConfigure__unconfigure' (at pp.c:23058)
              ExprList:  (at pp.c:23058)
                ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:23058)
          Break:  (at pp.c:23060)
          Default:  (at pp.c:23062)
            FuncCall:  (at None)
              ID: name='ArbiterP__0__ResourceConfigure__default__unconfigure' (at pp.c:23064)
              ExprList:  (at pp.c:23064)
                ID: name='arg_0x101d7d9b8' (at pp.c:23064)
          Break:  (at pp.c:23066)
  FuncDef:  (at pp.c:23073)
    Decl: name='ArbiterP__0__grantedTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:23073)
      FuncDecl: quals=None (at pp.c:23073)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__grantedTask__postTask', quals=[] (at pp.c:23073)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23073)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23075)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23075)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23079)
        ID: name='__nesc_result' (at pp.c:23079)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:23079)
          ExprList:  (at pp.c:23079)
            ID: name='ArbiterP__0__grantedTask' (at pp.c:23079)
      Return:  (at pp.c:23083)
        ID: name='__nesc_result' (at pp.c:23083)
  FuncDef:  (at pp.c:23088)
    Decl: name='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:23088)
      FuncDecl: quals=None (at pp.c:23088)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[] (at pp.c:23088)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:23090)
      Compound:  (at pp.c:23093)
        If:  (at pp.c:23094)
          BinaryOp: op='!=' (at pp.c:23094)
            ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:23094)
            ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:23094)
          Compound:  (at pp.c:23094)
            Decl: name='id', quals=[], storage=[] (at pp.c:23095)
              TypeDecl: declname='id', quals=[] (at pp.c:23095)
                IdentifierType: names=['uint8_t'] (at None)
              ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:23095)
            Assignment: op='=' (at pp.c:23098)
              ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:23098)
              ArrayRef:  (at pp.c:23098)
                ID: name='FcfsResourceQueueC__1__resQ' (at pp.c:23098)
                ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:23098)
            If:  (at pp.c:23099)
              BinaryOp: op='==' (at pp.c:23099)
                ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:23099)
                ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:23099)
              Compound:  (at pp.c:23099)
                Assignment: op='=' (at pp.c:23100)
                  ID: name='FcfsResourceQueueC__1__qTail' (at pp.c:23100)
                  ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:23100)
            Assignment: op='=' (at pp.c:23103)
              ArrayRef:  (at pp.c:23103)
                ID: name='FcfsResourceQueueC__1__resQ' (at pp.c:23103)
                ID: name='id' (at pp.c:23103)
              ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:23103)
            Compound:  (at pp.c:23104)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:23105)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:23105)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='id' (at pp.c:23107)
              Return:  (at pp.c:23110)
                ID: name='__nesc_temp' (at pp.c:23110)
        Compound:  (at pp.c:23114)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:23115)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:23115)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:23117)
          Return:  (at pp.c:23120)
            ID: name='__nesc_temp' (at pp.c:23120)
  FuncDef:  (at pp.c:23126)
    Decl: name='ArbiterP__0__Queue__dequeue', quals=[], storage=['static', 'inline'] (at pp.c:23126)
      FuncDecl: quals=None (at pp.c:23126)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__Queue__dequeue', quals=[] (at pp.c:23126)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:23126)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23128)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23128)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23132)
        ID: name='__nesc_result' (at pp.c:23132)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__1__FcfsQueue__dequeue' (at pp.c:23132)
      Return:  (at pp.c:23136)
        ID: name='__nesc_result' (at pp.c:23136)
  FuncDef:  (at pp.c:23141)
    Decl: name='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[], storage=['inline', 'static'] (at pp.c:23141)
      FuncDecl: quals=None (at pp.c:23141)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[] (at pp.c:23141)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:23143)
      Compound:  (at pp.c:23146)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:23147)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:23147)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='==' (at pp.c:23149)
            ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:23149)
            ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:23149)
        Return:  (at pp.c:23152)
          ID: name='__nesc_temp' (at pp.c:23152)
  FuncDef:  (at pp.c:23157)
    Decl: name='ArbiterP__0__Queue__isEmpty', quals=[], storage=['static', 'inline'] (at pp.c:23157)
      FuncDecl: quals=None (at pp.c:23157)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__Queue__isEmpty', quals=[] (at pp.c:23157)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:23157)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23159)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23159)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23163)
        ID: name='__nesc_result' (at pp.c:23163)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__1__FcfsQueue__isEmpty' (at pp.c:23163)
      Return:  (at pp.c:23167)
        ID: name='__nesc_result' (at pp.c:23167)
  FuncDef:  (at pp.c:23172)
    Decl: name='ArbiterP__0__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:23172)
      FuncDecl: quals=None (at pp.c:23172)
        ParamList:  (at pp.c:23172)
          Decl: name='id', quals=[], storage=[] (at pp.c:23172)
            TypeDecl: declname='id', quals=[] (at pp.c:23172)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__Resource__release', quals=[] (at pp.c:23172)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23174)
      Compound:  (at pp.c:23175)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23175)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23175)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:23175)
        Compound:  (at pp.c:23177)
          If:  (at pp.c:23178)
            BinaryOp: op='&&' (at pp.c:23178)
              BinaryOp: op='==' (at pp.c:23178)
                ID: name='ArbiterP__0__state' (at pp.c:23178)
                ID: name='ArbiterP__0__RES_BUSY' (at pp.c:23178)
              BinaryOp: op='==' (at pp.c:23178)
                ID: name='ArbiterP__0__resId' (at pp.c:23178)
                ID: name='id' (at pp.c:23178)
            Compound:  (at pp.c:23178)
              If:  (at pp.c:23179)
                BinaryOp: op='==' (at None)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__Queue__isEmpty' (at pp.c:23179)
                  ID: name='FALSE' (at pp.c:23179)
                Compound:  (at pp.c:23179)
                  Assignment: op='=' (at pp.c:23180)
                    ID: name='ArbiterP__0__reqResId' (at pp.c:23180)
                    FuncCall:  (at None)
                      ID: name='ArbiterP__0__Queue__dequeue' (at pp.c:23180)
                  Assignment: op='=' (at pp.c:23181)
                    ID: name='ArbiterP__0__resId' (at pp.c:23181)
                    ID: name='ArbiterP__0__NO_RES' (at pp.c:23181)
                  Assignment: op='=' (at pp.c:23182)
                    ID: name='ArbiterP__0__state' (at pp.c:23182)
                    ID: name='ArbiterP__0__RES_GRANTING' (at pp.c:23182)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__grantedTask__postTask' (at pp.c:23183)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__ResourceConfigure__unconfigure' (at pp.c:23184)
                    ExprList:  (at pp.c:23184)
                      ID: name='id' (at pp.c:23184)
                Compound:  (at pp.c:23186)
                  Assignment: op='=' (at pp.c:23187)
                    ID: name='ArbiterP__0__resId' (at pp.c:23187)
                    ID: name='ArbiterP__0__default_owner_id' (at pp.c:23187)
                  Assignment: op='=' (at pp.c:23188)
                    ID: name='ArbiterP__0__state' (at pp.c:23188)
                    ID: name='ArbiterP__0__RES_CONTROLLED' (at pp.c:23188)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__ResourceConfigure__unconfigure' (at pp.c:23189)
                    ExprList:  (at pp.c:23189)
                      ID: name='id' (at pp.c:23189)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__ResourceDefaultOwner__granted' (at pp.c:23190)
              Compound:  (at pp.c:23192)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:23193)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:23193)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='SUCCESS' (at pp.c:23195)
                Compound:  (at pp.c:23197)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:23199)
                    ExprList:  (at pp.c:23199)
                      ID: name='__nesc_atomic' (at pp.c:23199)
                  Return:  (at pp.c:23201)
                    ID: name='__nesc_temp' (at pp.c:23201)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:23207)
          ExprList:  (at pp.c:23207)
            ID: name='__nesc_atomic' (at pp.c:23207)
      Return:  (at pp.c:23209)
        ID: name='FAIL' (at pp.c:23209)
  FuncDef:  (at pp.c:23213)
    Decl: name='Msp430UartP__0__UsartResource__default__release', quals=[], storage=['inline', 'static'] (at pp.c:23213)
      FuncDecl: quals=None (at pp.c:23213)
        ParamList:  (at pp.c:23213)
          Decl: name='id', quals=[], storage=[] (at pp.c:23213)
            TypeDecl: declname='id', quals=[] (at pp.c:23213)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UsartResource__default__release', quals=[] (at pp.c:23213)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23215)
      Return:  (at pp.c:23217)
        ID: name='FAIL' (at pp.c:23217)
  FuncDef:  (at pp.c:23221)
    Decl: name='Msp430UartP__0__UsartResource__release', quals=[], storage=['static', 'inline'] (at pp.c:23221)
      FuncDecl: quals=None (at pp.c:23221)
        ParamList:  (at pp.c:23221)
          Decl: name='arg_0x101bfa258', quals=[], storage=[] (at pp.c:23221)
            TypeDecl: declname='arg_0x101bfa258', quals=[] (at pp.c:23221)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UsartResource__release', quals=[] (at pp.c:23221)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23221)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23223)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23223)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:23227)
        ID: name='arg_0x101bfa258' (at pp.c:23227)
        Compound:  (at pp.c:23227)
          Case:  (at pp.c:23229)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:23229)
            Assignment: op='=' (at pp.c:23231)
              ID: name='__nesc_result' (at pp.c:23231)
              FuncCall:  (at None)
                ID: name='ArbiterP__0__Resource__release' (at pp.c:23231)
                ExprList:  (at pp.c:23231)
                  ID: name='Msp430Usart1C__0__CLIENT_ID' (at pp.c:23231)
          Break:  (at pp.c:23233)
          Default:  (at pp.c:23235)
            Assignment: op='=' (at pp.c:23237)
              ID: name='__nesc_result' (at pp.c:23237)
              FuncCall:  (at None)
                ID: name='Msp430UartP__0__UsartResource__default__release' (at pp.c:23237)
                ExprList:  (at pp.c:23237)
                  ID: name='arg_0x101bfa258' (at pp.c:23237)
          Break:  (at pp.c:23239)
      Return:  (at pp.c:23245)
        ID: name='__nesc_result' (at pp.c:23245)
  FuncDef:  (at pp.c:23250)
    Decl: name='Msp430UartP__0__UsartResource__default__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:23250)
      FuncDecl: quals=None (at pp.c:23250)
        ParamList:  (at pp.c:23250)
          Decl: name='id', quals=[], storage=[] (at pp.c:23250)
            TypeDecl: declname='id', quals=[] (at pp.c:23250)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UsartResource__default__isOwner', quals=[] (at pp.c:23250)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23252)
      Return:  (at pp.c:23254)
        ID: name='FAIL' (at pp.c:23254)
  FuncDef:  (at pp.c:23258)
    Decl: name='Msp430UartP__0__UsartResource__isOwner', quals=[], storage=['static', 'inline'] (at pp.c:23258)
      FuncDecl: quals=None (at pp.c:23258)
        ParamList:  (at pp.c:23258)
          Decl: name='arg_0x101bfa258', quals=[], storage=[] (at pp.c:23258)
            TypeDecl: declname='arg_0x101bfa258', quals=[] (at pp.c:23258)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UsartResource__isOwner', quals=[] (at pp.c:23258)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:23258)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23260)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23260)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:23264)
        ID: name='arg_0x101bfa258' (at pp.c:23264)
        Compound:  (at pp.c:23264)
          Case:  (at pp.c:23266)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:23266)
            Assignment: op='=' (at pp.c:23268)
              ID: name='__nesc_result' (at pp.c:23268)
              FuncCall:  (at None)
                ID: name='ArbiterP__0__Resource__isOwner' (at pp.c:23268)
                ExprList:  (at pp.c:23268)
                  ID: name='Msp430Usart1C__0__CLIENT_ID' (at pp.c:23268)
          Break:  (at pp.c:23270)
          Default:  (at pp.c:23272)
            Assignment: op='=' (at pp.c:23274)
              ID: name='__nesc_result' (at pp.c:23274)
              FuncCall:  (at None)
                ID: name='Msp430UartP__0__UsartResource__default__isOwner' (at pp.c:23274)
                ExprList:  (at pp.c:23274)
                  ID: name='arg_0x101bfa258' (at pp.c:23274)
          Break:  (at pp.c:23276)
      Return:  (at pp.c:23282)
        ID: name='__nesc_result' (at pp.c:23282)
  FuncDef:  (at pp.c:23287)
    Decl: name='Msp430UartP__0__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:23287)
      FuncDecl: quals=None (at pp.c:23287)
        ParamList:  (at pp.c:23287)
          Decl: name='id', quals=[], storage=[] (at pp.c:23287)
            TypeDecl: declname='id', quals=[] (at pp.c:23287)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__Resource__release', quals=[] (at pp.c:23287)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23289)
      If:  (at pp.c:23290)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='Msp430UartP__0__UsartResource__isOwner' (at pp.c:23290)
            ExprList:  (at pp.c:23290)
              ID: name='id' (at pp.c:23290)
          ID: name='FALSE' (at pp.c:23290)
        Compound:  (at pp.c:23290)
          Return:  (at pp.c:23291)
            ID: name='FAIL' (at pp.c:23291)
      If:  (at pp.c:23294)
        BinaryOp: op='||' (at pp.c:23294)
          ID: name='Msp430UartP__0__m_rx_buf' (at pp.c:23294)
          ID: name='Msp430UartP__0__m_tx_buf' (at pp.c:23294)
        Compound:  (at pp.c:23294)
          Return:  (at pp.c:23295)
            ID: name='EBUSY' (at pp.c:23295)
      Return:  (at pp.c:23298)
        FuncCall:  (at None)
          ID: name='Msp430UartP__0__UsartResource__release' (at pp.c:23298)
          ExprList:  (at pp.c:23298)
            ID: name='id' (at pp.c:23298)
  FuncDef:  (at pp.c:23302)
    Decl: name='TelosSerialP__Resource__release', quals=[], storage=['static', 'inline'] (at pp.c:23302)
      FuncDecl: quals=None (at pp.c:23302)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TelosSerialP__Resource__release', quals=[] (at pp.c:23302)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23302)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23304)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23304)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23308)
        ID: name='__nesc_result' (at pp.c:23308)
        FuncCall:  (at None)
          ID: name='Msp430UartP__0__Resource__release' (at pp.c:23308)
          ExprList:  (at pp.c:23308)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:23308)
      Return:  (at pp.c:23312)
        ID: name='__nesc_result' (at pp.c:23312)
  FuncDef:  (at pp.c:23317)
    Decl: name='TelosSerialP__StdControl__stop', quals=[], storage=['inline', 'static'] (at pp.c:23317)
      FuncDecl: quals=None (at pp.c:23317)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TelosSerialP__StdControl__stop', quals=[] (at pp.c:23317)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23319)
      FuncCall:  (at None)
        ID: name='TelosSerialP__Resource__release' (at pp.c:23320)
      Return:  (at pp.c:23321)
        ID: name='SUCCESS' (at pp.c:23321)
  FuncDef:  (at pp.c:23325)
    Decl: name='SerialP__SerialControl__stop', quals=[], storage=['static', 'inline'] (at pp.c:23325)
      FuncDecl: quals=None (at pp.c:23325)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SerialControl__stop', quals=[] (at pp.c:23325)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23325)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23327)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23327)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23331)
        ID: name='__nesc_result' (at pp.c:23331)
        FuncCall:  (at None)
          ID: name='TelosSerialP__StdControl__stop' (at pp.c:23331)
      Return:  (at pp.c:23335)
        ID: name='__nesc_result' (at pp.c:23335)
  FuncDef:  (at pp.c:23340)
    Decl: name='SerialP__SerialFlush__flushDone', quals=[], storage=['inline', 'static'] (at pp.c:23340)
      FuncDecl: quals=None (at pp.c:23340)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SerialFlush__flushDone', quals=[] (at pp.c:23340)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23342)
      FuncCall:  (at None)
        ID: name='SerialP__SerialControl__stop' (at pp.c:23343)
      FuncCall:  (at None)
        ID: name='SerialP__SplitControl__stopDone' (at pp.c:23344)
        ExprList:  (at pp.c:23344)
          ID: name='SUCCESS' (at pp.c:23344)
  FuncDef:  (at pp.c:23347)
    Decl: name='SerialP__defaultSerialFlushTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:23347)
      FuncDecl: quals=None (at pp.c:23347)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__defaultSerialFlushTask__runTask', quals=[] (at pp.c:23347)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23349)
      FuncCall:  (at None)
        ID: name='SerialP__SerialFlush__flushDone' (at pp.c:23350)
  FuncDef:  (at pp.c:23354)
    Decl: name='SerialP__defaultSerialFlushTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:23354)
      FuncDecl: quals=None (at pp.c:23354)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__defaultSerialFlushTask__postTask', quals=[] (at pp.c:23354)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23354)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23356)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23356)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23360)
        ID: name='__nesc_result' (at pp.c:23360)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:23360)
          ExprList:  (at pp.c:23360)
            ID: name='SerialP__defaultSerialFlushTask' (at pp.c:23360)
      Return:  (at pp.c:23364)
        ID: name='__nesc_result' (at pp.c:23364)
  FuncDef:  (at pp.c:23369)
    Decl: name='SerialP__SerialFlush__default__flush', quals=[], storage=['inline', 'static'] (at pp.c:23369)
      FuncDecl: quals=None (at pp.c:23369)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SerialFlush__default__flush', quals=[] (at pp.c:23369)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23371)
      FuncCall:  (at None)
        ID: name='SerialP__defaultSerialFlushTask__postTask' (at pp.c:23372)
  FuncDef:  (at pp.c:23376)
    Decl: name='SerialP__SerialFlush__flush', quals=[], storage=['static', 'inline'] (at pp.c:23376)
      FuncDecl: quals=None (at pp.c:23376)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SerialFlush__flush', quals=[] (at pp.c:23376)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23376)
      FuncCall:  (at None)
        ID: name='SerialP__SerialFlush__default__flush' (at pp.c:23378)
  FuncDef:  (at pp.c:23383)
    Decl: name='SerialP__stopDoneTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:23383)
      FuncDecl: quals=None (at pp.c:23383)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__stopDoneTask__runTask', quals=[] (at pp.c:23383)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23385)
      FuncCall:  (at None)
        ID: name='SerialP__SerialFlush__flush' (at pp.c:23386)
  FuncDef:  (at pp.c:23390)
    Decl: name='LowPowerSensingBaseC__SerialAMControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:23390)
      FuncDecl: quals=None (at pp.c:23390)
        ParamList:  (at pp.c:23390)
          Decl: name='error', quals=[], storage=[] (at pp.c:23390)
            TypeDecl: declname='error', quals=[] (at pp.c:23390)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__SerialAMControl__startDone', quals=[] (at pp.c:23390)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23392)
  FuncDef:  (at pp.c:23396)
    Decl: name='SerialP__SplitControl__startDone', quals=[], storage=['static', 'inline'] (at pp.c:23396)
      FuncDecl: quals=None (at pp.c:23396)
        ParamList:  (at pp.c:23396)
          Decl: name='error', quals=[], storage=[] (at pp.c:23396)
            TypeDecl: declname='error', quals=[] (at pp.c:23396)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SerialP__SplitControl__startDone', quals=[] (at pp.c:23396)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23396)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__SerialAMControl__startDone' (at pp.c:23398)
        ExprList:  (at pp.c:23398)
          ID: name='error' (at pp.c:23398)
  FuncDef:  (at pp.c:23403)
    Decl: name='ArbiterP__0__ResourceDefaultOwner__release', quals=[], storage=['inline', 'static'] (at pp.c:23403)
      FuncDecl: quals=None (at pp.c:23403)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__release', quals=[] (at pp.c:23403)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23405)
      Compound:  (at pp.c:23406)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23406)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23406)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:23406)
        Compound:  (at pp.c:23408)
          If:  (at pp.c:23409)
            BinaryOp: op='==' (at pp.c:23409)
              ID: name='ArbiterP__0__resId' (at pp.c:23409)
              ID: name='ArbiterP__0__default_owner_id' (at pp.c:23409)
            Compound:  (at pp.c:23409)
              If:  (at pp.c:23410)
                BinaryOp: op='==' (at pp.c:23410)
                  ID: name='ArbiterP__0__state' (at pp.c:23410)
                  ID: name='ArbiterP__0__RES_GRANTING' (at pp.c:23410)
                Compound:  (at pp.c:23410)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__grantedTask__postTask' (at pp.c:23411)
                  Compound:  (at pp.c:23412)
                    Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:23413)
                      TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:23413)
                        IdentifierType: names=['char', 'unsigned'] (at None)
                      ID: name='SUCCESS' (at pp.c:23415)
                    Compound:  (at pp.c:23417)
                      FuncCall:  (at None)
                        ID: name='__nesc_atomic_end' (at pp.c:23419)
                        ExprList:  (at pp.c:23419)
                          ID: name='__nesc_atomic' (at pp.c:23419)
                      Return:  (at pp.c:23421)
                        ID: name='__nesc_temp' (at pp.c:23421)
                Compound:  (at pp.c:23425)
                  If:  (at pp.c:23427)
                    BinaryOp: op='==' (at pp.c:23427)
                      ID: name='ArbiterP__0__state' (at pp.c:23427)
                      ID: name='ArbiterP__0__RES_IMM_GRANTING' (at pp.c:23427)
                    Compound:  (at pp.c:23427)
                      Assignment: op='=' (at pp.c:23428)
                        ID: name='ArbiterP__0__resId' (at pp.c:23428)
                        ID: name='ArbiterP__0__reqResId' (at pp.c:23428)
                      Assignment: op='=' (at pp.c:23429)
                        ID: name='ArbiterP__0__state' (at pp.c:23429)
                        ID: name='ArbiterP__0__RES_BUSY' (at pp.c:23429)
                      Compound:  (at pp.c:23430)
                        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:23431)
                          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:23431)
                            IdentifierType: names=['char', 'unsigned'] (at None)
                          ID: name='SUCCESS' (at pp.c:23433)
                        Compound:  (at pp.c:23435)
                          FuncCall:  (at None)
                            ID: name='__nesc_atomic_end' (at pp.c:23437)
                            ExprList:  (at pp.c:23437)
                              ID: name='__nesc_atomic' (at pp.c:23437)
                          Return:  (at pp.c:23439)
                            ID: name='__nesc_temp' (at pp.c:23439)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:23447)
          ExprList:  (at pp.c:23447)
            ID: name='__nesc_atomic' (at pp.c:23447)
      Return:  (at pp.c:23449)
        ID: name='FAIL' (at pp.c:23449)
  FuncDef:  (at pp.c:23453)
    Decl: name='AsyncPowerManagerP__0__ResourceDefaultOwner__release', quals=[], storage=['static', 'inline'] (at pp.c:23453)
      FuncDecl: quals=None (at pp.c:23453)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AsyncPowerManagerP__0__ResourceDefaultOwner__release', quals=[] (at pp.c:23453)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23453)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23455)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23455)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23459)
        ID: name='__nesc_result' (at pp.c:23459)
        FuncCall:  (at None)
          ID: name='ArbiterP__0__ResourceDefaultOwner__release' (at pp.c:23459)
      Return:  (at pp.c:23463)
        ID: name='__nesc_result' (at pp.c:23463)
  FuncDef:  (at pp.c:23468)
    Decl: name='HplMsp430Usart1P__AsyncStdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:23468)
      FuncDecl: quals=None (at pp.c:23468)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__AsyncStdControl__start', quals=[] (at pp.c:23468)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23470)
      Return:  (at pp.c:23471)
        ID: name='SUCCESS' (at pp.c:23471)
  FuncDef:  (at pp.c:23475)
    Decl: name='AsyncPowerManagerP__0__AsyncStdControl__start', quals=[], storage=['static', 'inline'] (at pp.c:23475)
      FuncDecl: quals=None (at pp.c:23475)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AsyncPowerManagerP__0__AsyncStdControl__start', quals=[] (at pp.c:23475)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23475)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23477)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23477)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23481)
        ID: name='__nesc_result' (at pp.c:23481)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart1P__AsyncStdControl__start' (at pp.c:23481)
      Return:  (at pp.c:23485)
        ID: name='__nesc_result' (at pp.c:23485)
  FuncDef:  (at pp.c:23490)
    Decl: name='AsyncPowerManagerP__0__ResourceDefaultOwner__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:23490)
      FuncDecl: quals=None (at pp.c:23490)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AsyncPowerManagerP__0__ResourceDefaultOwner__immediateRequested', quals=[] (at pp.c:23490)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23492)
      FuncCall:  (at None)
        ID: name='AsyncPowerManagerP__0__AsyncStdControl__start' (at pp.c:23493)
      FuncCall:  (at None)
        ID: name='AsyncPowerManagerP__0__ResourceDefaultOwner__release' (at pp.c:23494)
  FuncDef:  (at pp.c:23498)
    Decl: name='ArbiterP__0__ResourceDefaultOwner__immediateRequested', quals=[], storage=['static', 'inline'] (at pp.c:23498)
      FuncDecl: quals=None (at pp.c:23498)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__immediateRequested', quals=[] (at pp.c:23498)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23498)
      FuncCall:  (at None)
        ID: name='AsyncPowerManagerP__0__ResourceDefaultOwner__immediateRequested' (at pp.c:23500)
  FuncDef:  (at pp.c:23505)
    Decl: name='ArbiterP__0__ResourceRequested__default__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:23505)
      FuncDecl: quals=None (at pp.c:23505)
        ParamList:  (at pp.c:23505)
          Decl: name='id', quals=[], storage=[] (at pp.c:23505)
            TypeDecl: declname='id', quals=[] (at pp.c:23505)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceRequested__default__immediateRequested', quals=[] (at pp.c:23505)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23507)
  FuncDef:  (at pp.c:23511)
    Decl: name='ArbiterP__0__ResourceRequested__immediateRequested', quals=[], storage=['static', 'inline'] (at pp.c:23511)
      FuncDecl: quals=None (at pp.c:23511)
        ParamList:  (at pp.c:23511)
          Decl: name='arg_0x101d807e8', quals=[], storage=[] (at pp.c:23511)
            TypeDecl: declname='arg_0x101d807e8', quals=[] (at pp.c:23511)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceRequested__immediateRequested', quals=[] (at pp.c:23511)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23511)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__ResourceRequested__default__immediateRequested' (at pp.c:23513)
        ExprList:  (at pp.c:23513)
          ID: name='arg_0x101d807e8' (at pp.c:23513)
  FuncDef:  (at pp.c:23518)
    Decl: name='ArbiterP__0__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:23518)
      FuncDecl: quals=None (at pp.c:23518)
        ParamList:  (at pp.c:23518)
          Decl: name='id', quals=[], storage=[] (at pp.c:23518)
            TypeDecl: declname='id', quals=[] (at pp.c:23518)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__Resource__immediateRequest', quals=[] (at pp.c:23518)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23520)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__ResourceRequested__immediateRequested' (at pp.c:23521)
        ExprList:  (at pp.c:23521)
          ID: name='ArbiterP__0__resId' (at pp.c:23521)
      Compound:  (at pp.c:23522)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23522)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23522)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:23522)
        Compound:  (at pp.c:23524)
          If:  (at pp.c:23525)
            BinaryOp: op='==' (at pp.c:23525)
              ID: name='ArbiterP__0__state' (at pp.c:23525)
              ID: name='ArbiterP__0__RES_CONTROLLED' (at pp.c:23525)
            Compound:  (at pp.c:23525)
              Assignment: op='=' (at pp.c:23526)
                ID: name='ArbiterP__0__state' (at pp.c:23526)
                ID: name='ArbiterP__0__RES_IMM_GRANTING' (at pp.c:23526)
              Assignment: op='=' (at pp.c:23527)
                ID: name='ArbiterP__0__reqResId' (at pp.c:23527)
                ID: name='id' (at pp.c:23527)
            Compound:  (at pp.c:23529)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:23530)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:23530)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='FAIL' (at pp.c:23532)
              Compound:  (at pp.c:23534)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:23536)
                  ExprList:  (at pp.c:23536)
                    ID: name='__nesc_atomic' (at pp.c:23536)
                Return:  (at pp.c:23538)
                  ID: name='__nesc_temp' (at pp.c:23538)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:23543)
          ExprList:  (at pp.c:23543)
            ID: name='__nesc_atomic' (at pp.c:23543)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__ResourceDefaultOwner__immediateRequested' (at pp.c:23545)
      If:  (at pp.c:23546)
        BinaryOp: op='==' (at pp.c:23546)
          ID: name='ArbiterP__0__resId' (at pp.c:23546)
          ID: name='id' (at pp.c:23546)
        Compound:  (at pp.c:23546)
          FuncCall:  (at None)
            ID: name='ArbiterP__0__ResourceConfigure__configure' (at pp.c:23547)
            ExprList:  (at pp.c:23547)
              ID: name='ArbiterP__0__resId' (at pp.c:23547)
          Return:  (at pp.c:23548)
            ID: name='SUCCESS' (at pp.c:23548)
      Compound:  (at pp.c:23550)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23550)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23550)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:23550)
        Assignment: op='=' (at pp.c:23552)
          ID: name='ArbiterP__0__state' (at pp.c:23552)
          ID: name='ArbiterP__0__RES_CONTROLLED' (at pp.c:23552)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:23554)
          ExprList:  (at pp.c:23554)
            ID: name='__nesc_atomic' (at pp.c:23554)
      Return:  (at pp.c:23555)
        ID: name='FAIL' (at pp.c:23555)
  FuncDef:  (at pp.c:23559)
    Decl: name='Msp430UartP__0__UsartResource__default__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:23559)
      FuncDecl: quals=None (at pp.c:23559)
        ParamList:  (at pp.c:23559)
          Decl: name='id', quals=[], storage=[] (at pp.c:23559)
            TypeDecl: declname='id', quals=[] (at pp.c:23559)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UsartResource__default__immediateRequest', quals=[] (at pp.c:23559)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23561)
      Return:  (at pp.c:23563)
        ID: name='FAIL' (at pp.c:23563)
  FuncDef:  (at pp.c:23567)
    Decl: name='Msp430UartP__0__UsartResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:23567)
      FuncDecl: quals=None (at pp.c:23567)
        ParamList:  (at pp.c:23567)
          Decl: name='arg_0x101bfa258', quals=[], storage=[] (at pp.c:23567)
            TypeDecl: declname='arg_0x101bfa258', quals=[] (at pp.c:23567)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UsartResource__immediateRequest', quals=[] (at pp.c:23567)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23567)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23569)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23569)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:23573)
        ID: name='arg_0x101bfa258' (at pp.c:23573)
        Compound:  (at pp.c:23573)
          Case:  (at pp.c:23575)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:23575)
            Assignment: op='=' (at pp.c:23577)
              ID: name='__nesc_result' (at pp.c:23577)
              FuncCall:  (at None)
                ID: name='ArbiterP__0__Resource__immediateRequest' (at pp.c:23577)
                ExprList:  (at pp.c:23577)
                  ID: name='Msp430Usart1C__0__CLIENT_ID' (at pp.c:23577)
          Break:  (at pp.c:23579)
          Default:  (at pp.c:23581)
            Assignment: op='=' (at pp.c:23583)
              ID: name='__nesc_result' (at pp.c:23583)
              FuncCall:  (at None)
                ID: name='Msp430UartP__0__UsartResource__default__immediateRequest' (at pp.c:23583)
                ExprList:  (at pp.c:23583)
                  ID: name='arg_0x101bfa258' (at pp.c:23583)
          Break:  (at pp.c:23585)
      Return:  (at pp.c:23591)
        ID: name='__nesc_result' (at pp.c:23591)
  FuncDef:  (at pp.c:23596)
    Decl: name='Msp430UartP__0__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:23596)
      FuncDecl: quals=None (at pp.c:23596)
        ParamList:  (at pp.c:23596)
          Decl: name='id', quals=[], storage=[] (at pp.c:23596)
            TypeDecl: declname='id', quals=[] (at pp.c:23596)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__Resource__immediateRequest', quals=[] (at pp.c:23596)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23598)
      Return:  (at pp.c:23599)
        FuncCall:  (at None)
          ID: name='Msp430UartP__0__UsartResource__immediateRequest' (at pp.c:23599)
          ExprList:  (at pp.c:23599)
            ID: name='id' (at pp.c:23599)
  FuncDef:  (at pp.c:23603)
    Decl: name='TelosSerialP__Resource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:23603)
      FuncDecl: quals=None (at pp.c:23603)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TelosSerialP__Resource__immediateRequest', quals=[] (at pp.c:23603)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23603)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23605)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23605)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23609)
        ID: name='__nesc_result' (at pp.c:23609)
        FuncCall:  (at None)
          ID: name='Msp430UartP__0__Resource__immediateRequest' (at pp.c:23609)
          ExprList:  (at pp.c:23609)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:23609)
      Return:  (at pp.c:23613)
        ID: name='__nesc_result' (at pp.c:23613)
  FuncDef:  (at pp.c:23618)
    Decl: name='TelosSerialP__StdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:23618)
      FuncDecl: quals=None (at pp.c:23618)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TelosSerialP__StdControl__start', quals=[] (at pp.c:23618)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23620)
      Return:  (at pp.c:23621)
        FuncCall:  (at None)
          ID: name='TelosSerialP__Resource__immediateRequest' (at pp.c:23621)
  FuncDef:  (at pp.c:23625)
    Decl: name='SerialP__SerialControl__start', quals=[], storage=['static', 'inline'] (at pp.c:23625)
      FuncDecl: quals=None (at pp.c:23625)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SerialControl__start', quals=[] (at pp.c:23625)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23625)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23627)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23627)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23631)
        ID: name='__nesc_result' (at pp.c:23631)
        FuncCall:  (at None)
          ID: name='TelosSerialP__StdControl__start' (at pp.c:23631)
      Return:  (at pp.c:23635)
        ID: name='__nesc_result' (at pp.c:23635)
  FuncDef:  (at pp.c:23640)
    Decl: name='SerialP__startDoneTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:23640)
      FuncDecl: quals=None (at pp.c:23640)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__startDoneTask__runTask', quals=[] (at pp.c:23640)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23642)
      FuncCall:  (at None)
        ID: name='SerialP__SerialControl__start' (at pp.c:23643)
      FuncCall:  (at None)
        ID: name='SerialP__SplitControl__startDone' (at pp.c:23644)
        ExprList:  (at pp.c:23644)
          ID: name='SUCCESS' (at pp.c:23644)
  FuncDef:  (at pp.c:23648)
    Decl: name='SerialP__SerialFrameComm__putDelimiter', quals=[], storage=['static', 'inline'] (at pp.c:23648)
      FuncDecl: quals=None (at pp.c:23648)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SerialFrameComm__putDelimiter', quals=[] (at pp.c:23648)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23648)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23650)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23650)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23654)
        ID: name='__nesc_result' (at pp.c:23654)
        FuncCall:  (at None)
          ID: name='HdlcTranslateC__SerialFrameComm__putDelimiter' (at pp.c:23654)
      Return:  (at pp.c:23658)
        ID: name='__nesc_result' (at pp.c:23658)
  FuncDef:  (at pp.c:23663)
    Decl: name='SerialDispatcherP__0__signalSendDone__postTask', quals=[], storage=['static', 'inline'] (at pp.c:23663)
      FuncDecl: quals=None (at pp.c:23663)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__signalSendDone__postTask', quals=[] (at pp.c:23663)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23663)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23665)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23665)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23669)
        ID: name='__nesc_result' (at pp.c:23669)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:23669)
          ExprList:  (at pp.c:23669)
            ID: name='SerialDispatcherP__0__signalSendDone' (at pp.c:23669)
      Return:  (at pp.c:23673)
        ID: name='__nesc_result' (at pp.c:23673)
  FuncDef:  (at pp.c:23678)
    Decl: name='SerialDispatcherP__0__SendBytePacket__sendCompleted', quals=[], storage=['inline', 'static'] (at pp.c:23678)
      FuncDecl: quals=None (at pp.c:23678)
        ParamList:  (at pp.c:23678)
          Decl: name='error', quals=[], storage=[] (at pp.c:23678)
            TypeDecl: declname='error', quals=[] (at pp.c:23678)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__SendBytePacket__sendCompleted', quals=[] (at pp.c:23678)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23680)
      Compound:  (at pp.c:23681)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23681)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23681)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:23681)
        Assignment: op='=' (at pp.c:23683)
          ID: name='SerialDispatcherP__0__sendError' (at pp.c:23683)
          ID: name='error' (at pp.c:23683)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:23685)
          ExprList:  (at pp.c:23685)
            ID: name='__nesc_atomic' (at pp.c:23685)
      FuncCall:  (at None)
        ID: name='SerialDispatcherP__0__signalSendDone__postTask' (at pp.c:23686)
  FuncDef:  (at pp.c:23690)
    Decl: name='SerialP__SendBytePacket__sendCompleted', quals=[], storage=['static', 'inline'] (at pp.c:23690)
      FuncDecl: quals=None (at pp.c:23690)
        ParamList:  (at pp.c:23690)
          Decl: name='error', quals=[], storage=[] (at pp.c:23690)
            TypeDecl: declname='error', quals=[] (at pp.c:23690)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SerialP__SendBytePacket__sendCompleted', quals=[] (at pp.c:23690)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23690)
      FuncCall:  (at None)
        ID: name='SerialDispatcherP__0__SendBytePacket__sendCompleted' (at pp.c:23692)
        ExprList:  (at pp.c:23692)
          ID: name='error' (at pp.c:23692)
  FuncDef:  (at pp.c:23697)
    Decl: name='SerialP__ack_queue_is_empty', quals=[], storage=['__inline', 'static'] (at pp.c:23697)
      FuncDecl: quals=None (at pp.c:23697)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__ack_queue_is_empty', quals=[] (at pp.c:23697)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:23699)
      Decl: name='ret', quals=[], storage=[] (at pp.c:23700)
        TypeDecl: declname='ret', quals=[] (at pp.c:23700)
          IdentifierType: names=['bool'] (at None)
      Compound:  (at pp.c:23703)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23703)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23703)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:23703)
        Assignment: op='=' (at pp.c:23705)
          ID: name='ret' (at pp.c:23705)
          BinaryOp: op='==' (at pp.c:23705)
            StructRef: type='.' (at pp.c:23705)
              ID: name='SerialP__ackQ' (at pp.c:23705)
              ID: name='writePtr' (at pp.c:23705)
            StructRef: type='.' (at pp.c:23705)
              ID: name='SerialP__ackQ' (at pp.c:23705)
              ID: name='readPtr' (at pp.c:23705)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:23707)
          ExprList:  (at pp.c:23707)
            ID: name='__nesc_atomic' (at pp.c:23707)
      Return:  (at pp.c:23708)
        ID: name='ret' (at pp.c:23708)
  FuncDef:  (at pp.c:23721)
    Decl: name='SerialP__ack_queue_top', quals=[], storage=['__inline', 'static'] (at pp.c:23721)
      FuncDecl: quals=None (at pp.c:23721)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__ack_queue_top', quals=[] (at pp.c:23721)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:23723)
      Decl: name='tmp', quals=[], storage=[] (at pp.c:23724)
        TypeDecl: declname='tmp', quals=[] (at pp.c:23724)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:23724)
      Compound:  (at pp.c:23728)
        If:  (at pp.c:23729)
          UnaryOp: op='!' (at None)
            FuncCall:  (at None)
              ID: name='SerialP__ack_queue_is_empty' (at pp.c:23729)
          Compound:  (at pp.c:23729)
            Assignment: op='=' (at pp.c:23730)
              ID: name='tmp' (at pp.c:23730)
              ArrayRef:  (at pp.c:23730)
                StructRef: type='.' (at pp.c:23730)
                  ID: name='SerialP__ackQ' (at pp.c:23730)
                  ID: name='buf' (at pp.c:23730)
                StructRef: type='.' (at pp.c:23730)
                  ID: name='SerialP__ackQ' (at pp.c:23730)
                  ID: name='readPtr' (at pp.c:23730)
      Return:  (at pp.c:23733)
        ID: name='tmp' (at pp.c:23733)
  FuncDef:  (at pp.c:23736)
    Decl: name='SerialP__ack_queue_pop', quals=[], storage=['inline', 'static'] (at pp.c:23736)
      FuncDecl: quals=None (at pp.c:23736)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__ack_queue_pop', quals=[] (at pp.c:23736)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:23738)
      Decl: name='retval', quals=[], storage=[] (at pp.c:23739)
        TypeDecl: declname='retval', quals=[] (at pp.c:23739)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:23739)
      Compound:  (at pp.c:23743)
        If:  (at pp.c:23744)
          BinaryOp: op='!=' (at pp.c:23744)
            StructRef: type='.' (at pp.c:23744)
              ID: name='SerialP__ackQ' (at pp.c:23744)
              ID: name='writePtr' (at pp.c:23744)
            StructRef: type='.' (at pp.c:23744)
              ID: name='SerialP__ackQ' (at pp.c:23744)
              ID: name='readPtr' (at pp.c:23744)
          Compound:  (at pp.c:23744)
            Assignment: op='=' (at pp.c:23745)
              ID: name='retval' (at pp.c:23745)
              ArrayRef:  (at pp.c:23745)
                StructRef: type='.' (at pp.c:23745)
                  ID: name='SerialP__ackQ' (at pp.c:23745)
                  ID: name='buf' (at pp.c:23745)
                StructRef: type='.' (at pp.c:23745)
                  ID: name='SerialP__ackQ' (at pp.c:23745)
                  ID: name='readPtr' (at pp.c:23745)
            If:  (at pp.c:23746)
              BinaryOp: op='>' (at pp.c:23746)
                UnaryOp: op='++' (at pp.c:23746)
                  StructRef: type='.' (at pp.c:23746)
                    ID: name='SerialP__ackQ' (at pp.c:23746)
                    ID: name='readPtr' (at pp.c:23746)
                ID: name='SerialP__ACK_QUEUE_SIZE' (at pp.c:23746)
              Compound:  (at pp.c:23746)
                Assignment: op='=' (at pp.c:23748)
                  StructRef: type='.' (at pp.c:23748)
                    ID: name='SerialP__ackQ' (at pp.c:23748)
                    ID: name='readPtr' (at pp.c:23748)
                  Constant: type='int', value='0' (at pp.c:23748)
      Return:  (at pp.c:23753)
        ID: name='retval' (at pp.c:23753)
  FuncDef:  (at pp.c:23757)
    Decl: name='SerialP__RunTx__runTask', quals=[], storage=['inline', 'static'] (at pp.c:23757)
      FuncDecl: quals=None (at pp.c:23757)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__RunTx__runTask', quals=[] (at pp.c:23757)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23759)
      Decl: name='idle', quals=[], storage=[] (at pp.c:23760)
        TypeDecl: declname='idle', quals=[] (at pp.c:23760)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='done', quals=[], storage=[] (at pp.c:23761)
        TypeDecl: declname='done', quals=[] (at pp.c:23761)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='fail', quals=[], storage=[] (at pp.c:23762)
        TypeDecl: declname='fail', quals=[] (at pp.c:23762)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='result', quals=[], storage=[] (at pp.c:23772)
        TypeDecl: declname='result', quals=[] (at pp.c:23772)
          IdentifierType: names=['error_t'] (at None)
        ID: name='SUCCESS' (at pp.c:23772)
      Decl: name='send_completed', quals=[], storage=[] (at pp.c:23773)
        TypeDecl: declname='send_completed', quals=[] (at pp.c:23773)
          IdentifierType: names=['bool'] (at None)
        ID: name='FALSE' (at pp.c:23773)
      Decl: name='start_it', quals=[], storage=[] (at pp.c:23774)
        TypeDecl: declname='start_it', quals=[] (at pp.c:23774)
          IdentifierType: names=['bool'] (at None)
        ID: name='FALSE' (at pp.c:23774)
      Compound:  (at pp.c:23776)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23776)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23776)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:23776)
        Compound:  (at pp.c:23778)
          Assignment: op='=' (at pp.c:23779)
            ID: name='SerialP__txPending' (at pp.c:23779)
            Constant: type='int', value='0' (at pp.c:23779)
          Assignment: op='=' (at pp.c:23780)
            ID: name='idle' (at pp.c:23780)
            BinaryOp: op='==' (at pp.c:23780)
              ID: name='SerialP__txState' (at pp.c:23780)
              ID: name='SerialP__TXSTATE_IDLE' (at pp.c:23780)
          Assignment: op='=' (at pp.c:23781)
            ID: name='done' (at pp.c:23781)
            BinaryOp: op='==' (at pp.c:23781)
              ID: name='SerialP__txState' (at pp.c:23781)
              ID: name='SerialP__TXSTATE_FINISH' (at pp.c:23781)
          Assignment: op='=' (at pp.c:23782)
            ID: name='fail' (at pp.c:23782)
            BinaryOp: op='==' (at pp.c:23782)
              ID: name='SerialP__txState' (at pp.c:23782)
              ID: name='SerialP__TXSTATE_ERROR' (at pp.c:23782)
          If:  (at pp.c:23783)
            BinaryOp: op='||' (at pp.c:23783)
              ID: name='done' (at pp.c:23783)
              ID: name='fail' (at pp.c:23783)
            Compound:  (at pp.c:23783)
              Assignment: op='=' (at pp.c:23784)
                ID: name='SerialP__txState' (at pp.c:23784)
                ID: name='SerialP__TXSTATE_IDLE' (at pp.c:23784)
              Assignment: op='=' (at pp.c:23785)
                StructRef: type='.' (at pp.c:23785)
                  ArrayRef:  (at pp.c:23785)
                    ID: name='SerialP__txBuf' (at pp.c:23785)
                    ID: name='SerialP__txIndex' (at pp.c:23785)
                  ID: name='state' (at pp.c:23785)
                ID: name='SerialP__BUFFER_AVAILABLE' (at pp.c:23785)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:23789)
          ExprList:  (at pp.c:23789)
            ID: name='__nesc_atomic' (at pp.c:23789)
      If:  (at pp.c:23792)
        BinaryOp: op='||' (at pp.c:23792)
          ID: name='done' (at pp.c:23792)
          ID: name='fail' (at pp.c:23792)
        Compound:  (at pp.c:23792)
          Compound:  (at pp.c:23793)
            Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23793)
              TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23793)
                IdentifierType: names=['__nesc_atomic_t'] (at None)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_start' (at pp.c:23793)
            Compound:  (at pp.c:23795)
              UnaryOp: op='p++' (at pp.c:23796)
                ID: name='SerialP__txSeqno' (at pp.c:23796)
              If:  (at pp.c:23797)
                BinaryOp: op='==' (at pp.c:23797)
                  ID: name='SerialP__txProto' (at pp.c:23797)
                  ID: name='SERIAL_PROTO_ACK' (at pp.c:23797)
                Compound:  (at pp.c:23797)
                  FuncCall:  (at None)
                    ID: name='SerialP__ack_queue_pop' (at pp.c:23798)
                Compound:  (at pp.c:23800)
                  Assignment: op='=' (at pp.c:23801)
                    ID: name='result' (at pp.c:23801)
                    TernaryOp:  (at pp.c:23801)
                      ID: name='done' (at pp.c:23801)
                      ID: name='SUCCESS' (at pp.c:23801)
                      ID: name='FAIL' (at pp.c:23801)
                  Assignment: op='=' (at pp.c:23802)
                    ID: name='send_completed' (at pp.c:23802)
                    ID: name='TRUE' (at pp.c:23802)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:23806)
              ExprList:  (at pp.c:23806)
                ID: name='__nesc_atomic' (at pp.c:23806)
          Assignment: op='=' (at pp.c:23807)
            ID: name='idle' (at pp.c:23807)
            ID: name='TRUE' (at pp.c:23807)
      If:  (at pp.c:23811)
        ID: name='idle' (at pp.c:23811)
        Compound:  (at pp.c:23811)
          Decl: name='goInactive', quals=[], storage=[] (at pp.c:23812)
            TypeDecl: declname='goInactive', quals=[] (at pp.c:23812)
              IdentifierType: names=['bool'] (at None)
          Compound:  (at pp.c:23815)
            Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23815)
              TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23815)
                IdentifierType: names=['__nesc_atomic_t'] (at None)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_start' (at pp.c:23815)
            Assignment: op='=' (at pp.c:23817)
              ID: name='goInactive' (at pp.c:23817)
              ID: name='SerialP__offPending' (at pp.c:23817)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:23819)
              ExprList:  (at pp.c:23819)
                ID: name='__nesc_atomic' (at pp.c:23819)
          If:  (at pp.c:23820)
            ID: name='goInactive' (at pp.c:23820)
            Compound:  (at pp.c:23820)
              Compound:  (at pp.c:23821)
                Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23821)
                  TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23821)
                    IdentifierType: names=['__nesc_atomic_t'] (at None)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_start' (at pp.c:23821)
                Assignment: op='=' (at pp.c:23823)
                  ID: name='SerialP__txState' (at pp.c:23823)
                  ID: name='SerialP__TXSTATE_INACTIVE' (at pp.c:23823)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:23825)
                  ExprList:  (at pp.c:23825)
                    ID: name='__nesc_atomic' (at pp.c:23825)
            Compound:  (at pp.c:23827)
              Decl: name='myAckState', quals=[], storage=[] (at pp.c:23829)
                TypeDecl: declname='myAckState', quals=[] (at pp.c:23829)
                  IdentifierType: names=['uint8_t'] (at None)
              Decl: name='myDataState', quals=[], storage=[] (at pp.c:23830)
                TypeDecl: declname='myDataState', quals=[] (at pp.c:23830)
                  IdentifierType: names=['uint8_t'] (at None)
              Compound:  (at pp.c:23833)
                Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23833)
                  TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23833)
                    IdentifierType: names=['__nesc_atomic_t'] (at None)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_start' (at pp.c:23833)
                Compound:  (at pp.c:23835)
                  Assignment: op='=' (at pp.c:23836)
                    ID: name='myAckState' (at pp.c:23836)
                    StructRef: type='.' (at pp.c:23836)
                      ArrayRef:  (at pp.c:23836)
                        ID: name='SerialP__txBuf' (at pp.c:23836)
                        ID: name='SerialP__TX_ACK_INDEX' (at pp.c:23836)
                      ID: name='state' (at pp.c:23836)
                  Assignment: op='=' (at pp.c:23837)
                    ID: name='myDataState' (at pp.c:23837)
                    StructRef: type='.' (at pp.c:23837)
                      ArrayRef:  (at pp.c:23837)
                        ID: name='SerialP__txBuf' (at pp.c:23837)
                        ID: name='SerialP__TX_DATA_INDEX' (at pp.c:23837)
                      ID: name='state' (at pp.c:23837)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:23840)
                  ExprList:  (at pp.c:23840)
                    ID: name='__nesc_atomic' (at pp.c:23840)
              If:  (at pp.c:23841)
                BinaryOp: op='&&' (at None)
                  UnaryOp: op='!' (at None)
                    FuncCall:  (at None)
                      ID: name='SerialP__ack_queue_is_empty' (at pp.c:23841)
                  BinaryOp: op='==' (at pp.c:23841)
                    ID: name='myAckState' (at pp.c:23841)
                    ID: name='SerialP__BUFFER_AVAILABLE' (at pp.c:23841)
                Compound:  (at pp.c:23841)
                  Compound:  (at pp.c:23842)
                    Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23842)
                      TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23842)
                        IdentifierType: names=['__nesc_atomic_t'] (at None)
                      FuncCall:  (at None)
                        ID: name='__nesc_atomic_start' (at pp.c:23842)
                    Compound:  (at pp.c:23844)
                      Assignment: op='=' (at pp.c:23845)
                        StructRef: type='.' (at pp.c:23845)
                          ArrayRef:  (at pp.c:23845)
                            ID: name='SerialP__txBuf' (at pp.c:23845)
                            ID: name='SerialP__TX_ACK_INDEX' (at pp.c:23845)
                          ID: name='state' (at pp.c:23845)
                        ID: name='SerialP__BUFFER_COMPLETE' (at pp.c:23845)
                      Assignment: op='=' (at pp.c:23846)
                        StructRef: type='.' (at pp.c:23846)
                          ArrayRef:  (at pp.c:23846)
                            ID: name='SerialP__txBuf' (at pp.c:23846)
                            ID: name='SerialP__TX_ACK_INDEX' (at pp.c:23846)
                          ID: name='buf' (at pp.c:23846)
                        FuncCall:  (at None)
                          ID: name='SerialP__ack_queue_top' (at pp.c:23846)
                      Assignment: op='=' (at pp.c:23848)
                        ID: name='SerialP__txProto' (at pp.c:23848)
                        ID: name='SERIAL_PROTO_ACK' (at pp.c:23848)
                      Assignment: op='=' (at pp.c:23849)
                        ID: name='SerialP__txIndex' (at pp.c:23849)
                        ID: name='SerialP__TX_ACK_INDEX' (at pp.c:23849)
                      Assignment: op='=' (at pp.c:23850)
                        ID: name='start_it' (at pp.c:23850)
                        ID: name='TRUE' (at pp.c:23850)
                    FuncCall:  (at None)
                      ID: name='__nesc_atomic_end' (at pp.c:23853)
                      ExprList:  (at pp.c:23853)
                        ID: name='__nesc_atomic' (at pp.c:23853)
                Compound:  (at pp.c:23855)
                  If:  (at pp.c:23857)
                    BinaryOp: op='||' (at pp.c:23857)
                      BinaryOp: op='==' (at pp.c:23857)
                        ID: name='myDataState' (at pp.c:23857)
                        ID: name='SerialP__BUFFER_FILLING' (at pp.c:23857)
                      BinaryOp: op='==' (at pp.c:23857)
                        ID: name='myDataState' (at pp.c:23857)
                        ID: name='SerialP__BUFFER_COMPLETE' (at pp.c:23857)
                    Compound:  (at pp.c:23857)
                      Compound:  (at pp.c:23858)
                        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23858)
                          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23858)
                            IdentifierType: names=['__nesc_atomic_t'] (at None)
                          FuncCall:  (at None)
                            ID: name='__nesc_atomic_start' (at pp.c:23858)
                        Compound:  (at pp.c:23860)
                          Assignment: op='=' (at pp.c:23861)
                            ID: name='SerialP__txProto' (at pp.c:23861)
                            ID: name='SERIAL_PROTO_PACKET_NOACK' (at pp.c:23861)
                          Assignment: op='=' (at pp.c:23862)
                            ID: name='SerialP__txIndex' (at pp.c:23862)
                            ID: name='SerialP__TX_DATA_INDEX' (at pp.c:23862)
                          Assignment: op='=' (at pp.c:23863)
                            ID: name='start_it' (at pp.c:23863)
                            ID: name='TRUE' (at pp.c:23863)
                        FuncCall:  (at None)
                          ID: name='__nesc_atomic_end' (at pp.c:23866)
                          ExprList:  (at pp.c:23866)
                            ID: name='__nesc_atomic' (at pp.c:23866)
                    Compound:  (at pp.c:23868)
        Compound:  (at pp.c:23873)
      If:  (at pp.c:23877)
        ID: name='send_completed' (at pp.c:23877)
        Compound:  (at pp.c:23877)
          FuncCall:  (at None)
            ID: name='SerialP__SendBytePacket__sendCompleted' (at pp.c:23878)
            ExprList:  (at pp.c:23878)
              ID: name='result' (at pp.c:23878)
      Compound:  (at pp.c:23880)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23880)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23880)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:23880)
        Compound:  (at pp.c:23882)
          If:  (at pp.c:23883)
            BinaryOp: op='==' (at pp.c:23883)
              ID: name='SerialP__txState' (at pp.c:23883)
              ID: name='SerialP__TXSTATE_INACTIVE' (at pp.c:23883)
            Compound:  (at pp.c:23883)
              FuncCall:  (at None)
                ID: name='SerialP__testOff' (at pp.c:23884)
              Compound:  (at pp.c:23885)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:23887)
                  ExprList:  (at pp.c:23887)
                    ID: name='__nesc_atomic' (at pp.c:23887)
                Return:  (at pp.c:23889)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:23894)
          ExprList:  (at pp.c:23894)
            ID: name='__nesc_atomic' (at pp.c:23894)
      If:  (at pp.c:23895)
        ID: name='start_it' (at pp.c:23895)
        Compound:  (at pp.c:23895)
          Compound:  (at pp.c:23897)
            Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23897)
              TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23897)
                IdentifierType: names=['__nesc_atomic_t'] (at None)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_start' (at pp.c:23897)
            Compound:  (at pp.c:23899)
              Assignment: op='=' (at pp.c:23900)
                ID: name='SerialP__txCRC' (at pp.c:23900)
                Constant: type='int', value='0' (at pp.c:23900)
              Assignment: op='=' (at pp.c:23901)
                ID: name='SerialP__txByteCnt' (at pp.c:23901)
                Constant: type='int', value='0' (at pp.c:23901)
              Assignment: op='=' (at pp.c:23902)
                ID: name='SerialP__txState' (at pp.c:23902)
                ID: name='SerialP__TXSTATE_PROTO' (at pp.c:23902)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:23905)
              ExprList:  (at pp.c:23905)
                ID: name='__nesc_atomic' (at pp.c:23905)
          If:  (at pp.c:23906)
            BinaryOp: op='!=' (at None)
              FuncCall:  (at None)
                ID: name='SerialP__SerialFrameComm__putDelimiter' (at pp.c:23906)
              ID: name='SUCCESS' (at pp.c:23906)
            Compound:  (at pp.c:23906)
              Compound:  (at pp.c:23907)
                Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23907)
                  TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23907)
                    IdentifierType: names=['__nesc_atomic_t'] (at None)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_start' (at pp.c:23907)
                Assignment: op='=' (at pp.c:23909)
                  ID: name='SerialP__txState' (at pp.c:23909)
                  ID: name='SerialP__TXSTATE_ERROR' (at pp.c:23909)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:23911)
                  ExprList:  (at pp.c:23911)
                    ID: name='__nesc_atomic' (at pp.c:23911)
              FuncCall:  (at None)
                ID: name='SerialP__MaybeScheduleTx' (at pp.c:23912)
  FuncDef:  (at pp.c:23918)
    Decl: name='SerialP__stopDoneTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:23918)
      FuncDecl: quals=None (at pp.c:23918)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__stopDoneTask__postTask', quals=[] (at pp.c:23918)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23918)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23920)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23920)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23924)
        ID: name='__nesc_result' (at pp.c:23924)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:23924)
          ExprList:  (at pp.c:23924)
            ID: name='SerialP__stopDoneTask' (at pp.c:23924)
      Return:  (at pp.c:23928)
        ID: name='__nesc_result' (at pp.c:23928)
  FuncDef:  (at pp.c:23933)
    Decl: name='HdlcTranslateC__UartStream__send', quals=[], storage=['static', 'inline'] (at pp.c:23933)
      FuncDecl: quals=None (at pp.c:23933)
        ParamList:  (at pp.c:23933)
          Decl: name='buf', quals=[], storage=[] (at pp.c:23933)
            PtrDecl: quals=[] (at pp.c:23933)
              TypeDecl: declname='buf', quals=[] (at pp.c:23933)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:23933)
            TypeDecl: declname='len', quals=[] (at pp.c:23933)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='HdlcTranslateC__UartStream__send', quals=[] (at pp.c:23933)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23933)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23935)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23935)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23939)
        ID: name='__nesc_result' (at pp.c:23939)
        FuncCall:  (at None)
          ID: name='Msp430UartP__0__UartStream__send' (at pp.c:23939)
          ExprList:  (at pp.c:23939)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:23939)
            ID: name='buf' (at pp.c:23939)
            ID: name='len' (at pp.c:23939)
      Return:  (at pp.c:23943)
        ID: name='__nesc_result' (at pp.c:23943)
  FuncDef:  (at pp.c:23948)
    Decl: name='SerialP__ackInit', quals=[], storage=['__inline', 'static'] (at pp.c:23948)
      FuncDecl: quals=None (at pp.c:23948)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__ackInit', quals=[] (at pp.c:23948)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23950)
      Assignment: op='=' (at pp.c:23951)
        StructRef: type='.' (at pp.c:23951)
          ID: name='SerialP__ackQ' (at pp.c:23951)
          ID: name='writePtr' (at pp.c:23951)
        Assignment: op='=' (at pp.c:23951)
          StructRef: type='.' (at pp.c:23951)
            ID: name='SerialP__ackQ' (at pp.c:23951)
            ID: name='readPtr' (at pp.c:23951)
          Constant: type='int', value='0' (at pp.c:23951)
  FuncDef:  (at pp.c:23955)
    Decl: name='SerialP__rxInit', quals=[], storage=['__inline', 'static'] (at pp.c:23955)
      FuncDecl: quals=None (at pp.c:23955)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__rxInit', quals=[] (at pp.c:23955)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23957)
      Assignment: op='=' (at pp.c:23958)
        StructRef: type='.' (at pp.c:23958)
          ID: name='SerialP__rxBuf' (at pp.c:23958)
          ID: name='writePtr' (at pp.c:23958)
        Assignment: op='=' (at pp.c:23958)
          StructRef: type='.' (at pp.c:23958)
            ID: name='SerialP__rxBuf' (at pp.c:23958)
            ID: name='readPtr' (at pp.c:23958)
          Constant: type='int', value='0' (at pp.c:23958)
      Assignment: op='=' (at pp.c:23959)
        ID: name='SerialP__rxState' (at pp.c:23959)
        ID: name='SerialP__RXSTATE_NOSYNC' (at pp.c:23959)
      Assignment: op='=' (at pp.c:23960)
        ID: name='SerialP__rxByteCnt' (at pp.c:23960)
        Constant: type='int', value='0' (at pp.c:23960)
      Assignment: op='=' (at pp.c:23961)
        ID: name='SerialP__rxProto' (at pp.c:23961)
        Constant: type='int', value='0' (at pp.c:23961)
      Assignment: op='=' (at pp.c:23962)
        ID: name='SerialP__rxSeqno' (at pp.c:23962)
        Constant: type='int', value='0' (at pp.c:23962)
      Assignment: op='=' (at pp.c:23963)
        ID: name='SerialP__rxCRC' (at pp.c:23963)
        Constant: type='int', value='0' (at pp.c:23963)
  FuncDef:  (at pp.c:23967)
    Decl: name='SerialP__txInit', quals=[], storage=['__inline', 'static'] (at pp.c:23967)
      FuncDecl: quals=None (at pp.c:23967)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__txInit', quals=[] (at pp.c:23967)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23969)
      Decl: name='i', quals=[], storage=[] (at pp.c:23970)
        TypeDecl: declname='i', quals=[] (at pp.c:23970)
          IdentifierType: names=['uint8_t'] (at None)
      For:  (at pp.c:23974)
        Assignment: op='=' (at pp.c:23974)
          ID: name='i' (at pp.c:23974)
          Constant: type='int', value='0' (at pp.c:23974)
        BinaryOp: op='<' (at pp.c:23974)
          ID: name='i' (at pp.c:23974)
          ID: name='SerialP__TX_BUFFER_COUNT' (at pp.c:23974)
        UnaryOp: op='p++' (at pp.c:23974)
          ID: name='i' (at pp.c:23974)
        Assignment: op='=' (at pp.c:23974)
          StructRef: type='.' (at pp.c:23974)
            ArrayRef:  (at pp.c:23974)
              ID: name='SerialP__txBuf' (at pp.c:23974)
              ID: name='i' (at pp.c:23974)
            ID: name='state' (at pp.c:23974)
          ID: name='SerialP__BUFFER_AVAILABLE' (at pp.c:23974)
      Assignment: op='=' (at pp.c:23975)
        ID: name='SerialP__txState' (at pp.c:23975)
        ID: name='SerialP__TXSTATE_IDLE' (at pp.c:23975)
      Assignment: op='=' (at pp.c:23976)
        ID: name='SerialP__txByteCnt' (at pp.c:23976)
        Constant: type='int', value='0' (at pp.c:23976)
      Assignment: op='=' (at pp.c:23977)
        ID: name='SerialP__txProto' (at pp.c:23977)
        Constant: type='int', value='0' (at pp.c:23977)
      Assignment: op='=' (at pp.c:23978)
        ID: name='SerialP__txSeqno' (at pp.c:23978)
        Constant: type='int', value='0' (at pp.c:23978)
      Assignment: op='=' (at pp.c:23979)
        ID: name='SerialP__txCRC' (at pp.c:23979)
        Constant: type='int', value='0' (at pp.c:23979)
      Assignment: op='=' (at pp.c:23980)
        ID: name='SerialP__txPending' (at pp.c:23980)
        ID: name='FALSE' (at pp.c:23980)
      Assignment: op='=' (at pp.c:23981)
        ID: name='SerialP__txIndex' (at pp.c:23981)
        Constant: type='int', value='0' (at pp.c:23981)
  FuncDef:  (at pp.c:23985)
    Decl: name='SerialP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:23985)
      FuncDecl: quals=None (at pp.c:23985)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__Init__init', quals=[] (at pp.c:23985)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23987)
      FuncCall:  (at None)
        ID: name='SerialP__txInit' (at pp.c:23989)
      FuncCall:  (at None)
        ID: name='SerialP__rxInit' (at pp.c:23990)
      FuncCall:  (at None)
        ID: name='SerialP__ackInit' (at pp.c:23991)
      Return:  (at pp.c:23993)
        ID: name='SUCCESS' (at pp.c:23993)
  FuncDef:  (at pp.c:23997)
    Decl: name='FcfsResourceQueueC__1__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:23997)
      FuncDecl: quals=None (at pp.c:23997)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__1__Init__init', quals=[] (at pp.c:23997)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23999)
      FuncCall:  (at None)
        ID: name='memset' (at pp.c:24000)
        ExprList:  (at pp.c:24000)
          ID: name='FcfsResourceQueueC__1__resQ' (at pp.c:24000)
          ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:24000)
          UnaryOp: op='sizeof' (at pp.c:24000)
            ID: name='FcfsResourceQueueC__1__resQ' (at pp.c:24000)
      Return:  (at pp.c:24001)
        ID: name='SUCCESS' (at pp.c:24001)
  FuncDef:  (at pp.c:24005)
    Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[], storage=['inline', 'static'] (at pp.c:24005)
      FuncDecl: quals=None (at pp.c:24005)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[] (at pp.c:24005)
          IdentifierType: names=['am_group_t'] (at None)
    Compound:  (at pp.c:24007)
      Decl: name='myGroup', quals=[], storage=[] (at pp.c:24008)
        TypeDecl: declname='myGroup', quals=[] (at pp.c:24008)
          IdentifierType: names=['am_group_t'] (at None)
      Assignment: op='=' (at pp.c:24012)
        ID: name='myGroup' (at pp.c:24012)
        ID: name='ActiveMessageAddressC__group' (at pp.c:24012)
      Return:  (at pp.c:24013)
        ID: name='myGroup' (at pp.c:24013)
  FuncDef:  (at pp.c:24017)
    Decl: name='CC2420ControlP__ActiveMessageAddress__amGroup', quals=[], storage=['static', 'inline'] (at pp.c:24017)
      FuncDecl: quals=None (at pp.c:24017)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__ActiveMessageAddress__amGroup', quals=[] (at pp.c:24017)
          IdentifierType: names=['am_group_t'] (at None)
    Compound:  (at pp.c:24017)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24019)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24019)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24023)
        ID: name='__nesc_result' (at pp.c:24023)
        FuncCall:  (at None)
          ID: name='ActiveMessageAddressC__ActiveMessageAddress__amGroup' (at pp.c:24023)
      Return:  (at pp.c:24027)
        ID: name='__nesc_result' (at pp.c:24027)
  FuncDef:  (at pp.c:24032)
    Decl: name='CC2420ControlP__ActiveMessageAddress__amAddress', quals=[], storage=['static', 'inline'] (at pp.c:24032)
      FuncDecl: quals=None (at pp.c:24032)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__ActiveMessageAddress__amAddress', quals=[] (at pp.c:24032)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:24032)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24034)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24034)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24038)
        ID: name='__nesc_result' (at pp.c:24038)
        FuncCall:  (at None)
          ID: name='ActiveMessageAddressC__ActiveMessageAddress__amAddress' (at pp.c:24038)
      Return:  (at pp.c:24042)
        ID: name='__nesc_result' (at pp.c:24042)
  FuncDef:  (at pp.c:24047)
    Decl: name='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24047)
      FuncDecl: quals=None (at pp.c:24047)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[] (at pp.c:24047)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24049)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24052)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='30U' (at pp.c:24052)
        BinaryOp: op='<<' (at pp.c:24052)
          Constant: type='int', value='0x01' (at pp.c:24052)
          Constant: type='int', value='5' (at pp.c:24052)
  FuncDef:  (at pp.c:24056)
    Decl: name='Msp430GpioC__9__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24056)
      FuncDecl: quals=None (at pp.c:24056)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__makeOutput', quals=[] (at pp.c:24056)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24056)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__29__IO__makeOutput' (at pp.c:24058)
  FuncDef:  (at pp.c:24063)
    Decl: name='Msp430GpioC__9__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24063)
      FuncDecl: quals=None (at pp.c:24063)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__GeneralIO__makeOutput', quals=[] (at pp.c:24063)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24065)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__HplGeneralIO__makeOutput' (at pp.c:24067)
  FuncDef:  (at pp.c:24071)
    Decl: name='CC2420ControlP__VREN__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24071)
      FuncDecl: quals=None (at pp.c:24071)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__VREN__makeOutput', quals=[] (at pp.c:24071)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24071)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__GeneralIO__makeOutput' (at pp.c:24073)
  FuncDef:  (at pp.c:24078)
    Decl: name='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24078)
      FuncDecl: quals=None (at pp.c:24078)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[] (at pp.c:24078)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24080)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24083)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='30U' (at pp.c:24083)
        BinaryOp: op='<<' (at pp.c:24083)
          Constant: type='int', value='0x01' (at pp.c:24083)
          Constant: type='int', value='6' (at pp.c:24083)
  FuncDef:  (at pp.c:24087)
    Decl: name='Msp430GpioC__7__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24087)
      FuncDecl: quals=None (at pp.c:24087)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__7__HplGeneralIO__makeOutput', quals=[] (at pp.c:24087)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24087)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__30__IO__makeOutput' (at pp.c:24089)
  FuncDef:  (at pp.c:24094)
    Decl: name='Msp430GpioC__7__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24094)
      FuncDecl: quals=None (at pp.c:24094)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__7__GeneralIO__makeOutput', quals=[] (at pp.c:24094)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24096)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__7__HplGeneralIO__makeOutput' (at pp.c:24098)
  FuncDef:  (at pp.c:24102)
    Decl: name='CC2420ControlP__RSTN__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24102)
      FuncDecl: quals=None (at pp.c:24102)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__RSTN__makeOutput', quals=[] (at pp.c:24102)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24102)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__7__GeneralIO__makeOutput' (at pp.c:24104)
  FuncDef:  (at pp.c:24109)
    Decl: name='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24109)
      FuncDecl: quals=None (at pp.c:24109)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[] (at pp.c:24109)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24111)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24114)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='30U' (at pp.c:24114)
        BinaryOp: op='<<' (at pp.c:24114)
          Constant: type='int', value='0x01' (at pp.c:24114)
          Constant: type='int', value='2' (at pp.c:24114)
  FuncDef:  (at pp.c:24118)
    Decl: name='Msp430GpioC__4__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24118)
      FuncDecl: quals=None (at pp.c:24118)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__4__HplGeneralIO__makeOutput', quals=[] (at pp.c:24118)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24118)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__26__IO__makeOutput' (at pp.c:24120)
  FuncDef:  (at pp.c:24125)
    Decl: name='Msp430GpioC__4__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24125)
      FuncDecl: quals=None (at pp.c:24125)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__4__GeneralIO__makeOutput', quals=[] (at pp.c:24125)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24127)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__HplGeneralIO__makeOutput' (at pp.c:24129)
  FuncDef:  (at pp.c:24133)
    Decl: name='CC2420ControlP__CSN__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24133)
      FuncDecl: quals=None (at pp.c:24133)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CSN__makeOutput', quals=[] (at pp.c:24133)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24133)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__GeneralIO__makeOutput' (at pp.c:24135)
  FuncDef:  (at pp.c:24140)
    Decl: name='CC2420ControlP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24140)
      FuncDecl: quals=None (at pp.c:24140)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__Init__init', quals=[] (at pp.c:24140)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24142)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__makeOutput' (at pp.c:24143)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__RSTN__makeOutput' (at pp.c:24144)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__VREN__makeOutput' (at pp.c:24145)
      Assignment: op='=' (at pp.c:24147)
        ID: name='CC2420ControlP__m_short_addr' (at pp.c:24147)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__ActiveMessageAddress__amAddress' (at pp.c:24147)
      Assignment: op='=' (at pp.c:24148)
        ID: name='CC2420ControlP__m_ext_addr' (at pp.c:24148)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__LocalIeeeEui64__getId' (at pp.c:24148)
      Assignment: op='=' (at pp.c:24149)
        ID: name='CC2420ControlP__m_pan' (at pp.c:24149)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__ActiveMessageAddress__amGroup' (at pp.c:24149)
      Assignment: op='=' (at pp.c:24150)
        ID: name='CC2420ControlP__m_tx_power' (at pp.c:24150)
        Constant: type='int', value='31' (at pp.c:24150)
      Assignment: op='=' (at pp.c:24151)
        ID: name='CC2420ControlP__m_channel' (at pp.c:24151)
        Constant: type='int', value='26' (at pp.c:24151)
      Assignment: op='=' (at pp.c:24157)
        ID: name='CC2420ControlP__addressRecognition' (at pp.c:24157)
        ID: name='TRUE' (at pp.c:24157)
      Assignment: op='=' (at pp.c:24163)
        ID: name='CC2420ControlP__hwAddressRecognition' (at pp.c:24163)
        ID: name='FALSE' (at pp.c:24163)
      Assignment: op='=' (at pp.c:24170)
        ID: name='CC2420ControlP__autoAckEnabled' (at pp.c:24170)
        ID: name='TRUE' (at pp.c:24170)
      Assignment: op='=' (at pp.c:24177)
        ID: name='CC2420ControlP__hwAutoAckDefault' (at pp.c:24177)
        ID: name='FALSE' (at pp.c:24177)
      Return:  (at pp.c:24181)
        ID: name='SUCCESS' (at pp.c:24181)
  FuncDef:  (at pp.c:24185)
    Decl: name='StateImplP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24185)
      FuncDecl: quals=None (at pp.c:24185)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='StateImplP__Init__init', quals=[] (at pp.c:24185)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24187)
      Decl: name='i', quals=[], storage=[] (at pp.c:24188)
        TypeDecl: declname='i', quals=[] (at pp.c:24188)
          IdentifierType: names=['int'] (at None)
      For:  (at pp.c:24191)
        Assignment: op='=' (at pp.c:24191)
          ID: name='i' (at pp.c:24191)
          Constant: type='int', value='0' (at pp.c:24191)
        BinaryOp: op='<' (at pp.c:24191)
          ID: name='i' (at pp.c:24191)
          Constant: type='int', value='6U' (at pp.c:24191)
        UnaryOp: op='p++' (at pp.c:24191)
          ID: name='i' (at pp.c:24191)
        Compound:  (at pp.c:24191)
          Assignment: op='=' (at pp.c:24192)
            ArrayRef:  (at pp.c:24192)
              ID: name='StateImplP__state' (at pp.c:24192)
              ID: name='i' (at pp.c:24192)
            ID: name='StateImplP__S_IDLE' (at pp.c:24192)
      Return:  (at pp.c:24194)
        ID: name='SUCCESS' (at pp.c:24194)
  FuncDef:  (at pp.c:24198)
    Decl: name='FcfsResourceQueueC__2__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24198)
      FuncDecl: quals=None (at pp.c:24198)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__2__Init__init', quals=[] (at pp.c:24198)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24200)
      FuncCall:  (at None)
        ID: name='memset' (at pp.c:24201)
        ExprList:  (at pp.c:24201)
          ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:24201)
          ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:24201)
          UnaryOp: op='sizeof' (at pp.c:24201)
            ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:24201)
      Return:  (at pp.c:24202)
        ID: name='SUCCESS' (at pp.c:24202)
  FuncDef:  (at pp.c:24206)
    Decl: name='Msp430TimerCapComP__3__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:24206)
      FuncDecl: quals=None (at pp.c:24206)
        ParamList:  (at pp.c:24206)
          Decl: name='x', quals=[], storage=[] (at pp.c:24206)
            TypeDecl: declname='x', quals=[] (at pp.c:24206)
              IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__CC2int', quals=[] (at pp.c:24206)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:24208)
      Decl: name='c', quals=[], storage=[] (at pp.c:24217)
        TypeDecl: declname='c', quals=[] (at pp.c:24217)
          Union: name='Msp430TimerCapComP__3____nesc_unnamed4413', packed=False (at pp.c:24210)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:24212)
                IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:24214)
                IdentifierType: names=['uint16_t'] (at None)
        ExprList:  (at pp.c:24217)
          Assignment: op='=' (at pp.c:24217)
            StructRef: type='.' (at pp.c:24217)
              ID: name='f' (at pp.c:24217)
            ID: name='x' (at pp.c:24217)
      Return:  (at pp.c:24220)
        StructRef: type='.' (at pp.c:24220)
          ID: name='c' (at pp.c:24220)
          ID: name='t' (at pp.c:24220)
  FuncDef:  (at pp.c:24223)
    Decl: name='Msp430TimerCapComP__3__compareControl', quals=[], storage=['inline', 'static'] (at pp.c:24223)
      FuncDecl: quals=None (at pp.c:24223)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__compareControl', quals=[] (at pp.c:24223)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:24224)
      Decl: name='x', quals=[], storage=[] (at pp.c:24225)
        TypeDecl: declname='x', quals=[] (at pp.c:24225)
          IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
        ExprList:  (at pp.c:24226)
          Assignment: op='=' (at pp.c:24226)
            StructRef: type='.' (at pp.c:24226)
              ID: name='cm' (at pp.c:24226)
            Constant: type='int', value='1' (at pp.c:24226)
          Assignment: op='=' (at pp.c:24227)
            StructRef: type='.' (at pp.c:24227)
              ID: name='ccis' (at pp.c:24227)
            Constant: type='int', value='0' (at pp.c:24227)
          Assignment: op='=' (at pp.c:24228)
            StructRef: type='.' (at pp.c:24228)
              ID: name='clld' (at pp.c:24228)
            Constant: type='int', value='0' (at pp.c:24228)
          Assignment: op='=' (at pp.c:24229)
            StructRef: type='.' (at pp.c:24229)
              ID: name='cap' (at pp.c:24229)
            Constant: type='int', value='0' (at pp.c:24229)
          Assignment: op='=' (at pp.c:24230)
            StructRef: type='.' (at pp.c:24230)
              ID: name='ccie' (at pp.c:24230)
            Constant: type='int', value='0' (at pp.c:24230)
      Return:  (at pp.c:24232)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__3__CC2int' (at pp.c:24232)
          ExprList:  (at pp.c:24232)
            ID: name='x' (at pp.c:24232)
  FuncDef:  (at pp.c:24236)
    Decl: name='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[], storage=['inline', 'static'] (at pp.c:24236)
      FuncDecl: quals=None (at pp.c:24236)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[] (at pp.c:24236)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24237)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24238)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='386U' (at pp.c:24238)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__3__compareControl' (at pp.c:24238)
  FuncDef:  (at pp.c:24242)
    Decl: name='Msp430AlarmC__0__Msp430TimerControl__setControlAsCompare', quals=[], storage=['static', 'inline'] (at pp.c:24242)
      FuncDecl: quals=None (at pp.c:24242)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__setControlAsCompare', quals=[] (at pp.c:24242)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24242)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Control__setControlAsCompare' (at pp.c:24244)
  FuncDef:  (at pp.c:24249)
    Decl: name='Msp430AlarmC__0__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24249)
      FuncDecl: quals=None (at pp.c:24249)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Init__init', quals=[] (at pp.c:24249)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24250)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430TimerControl__disableEvents' (at pp.c:24251)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430TimerControl__setControlAsCompare' (at pp.c:24252)
      Return:  (at pp.c:24253)
        ID: name='SUCCESS' (at pp.c:24253)
  FuncDef:  (at pp.c:24257)
    Decl: name='HplMsp430GeneralIOP__25__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:24257)
      FuncDecl: quals=None (at pp.c:24257)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__25__IO__makeInput', quals=[] (at pp.c:24257)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24259)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24262)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='30U' (at pp.c:24262)
        UnaryOp: op='~' (at pp.c:24262)
          BinaryOp: op='<<' (at pp.c:24262)
            Constant: type='int', value='0x01' (at pp.c:24262)
            Constant: type='int', value='1' (at pp.c:24262)
  FuncDef:  (at pp.c:24266)
    Decl: name='Msp430GpioC__8__HplGeneralIO__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:24266)
      FuncDecl: quals=None (at pp.c:24266)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__8__HplGeneralIO__makeInput', quals=[] (at pp.c:24266)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24266)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__25__IO__makeInput' (at pp.c:24268)
  FuncDef:  (at pp.c:24273)
    Decl: name='Msp430GpioC__8__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:24273)
      FuncDecl: quals=None (at pp.c:24273)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__8__GeneralIO__makeInput', quals=[] (at pp.c:24273)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24275)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__8__HplGeneralIO__makeInput' (at pp.c:24277)
  FuncDef:  (at pp.c:24281)
    Decl: name='CC2420TransmitP__SFD__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:24281)
      FuncDecl: quals=None (at pp.c:24281)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SFD__makeInput', quals=[] (at pp.c:24281)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24281)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__8__GeneralIO__makeInput' (at pp.c:24283)
  FuncDef:  (at pp.c:24289)
    Decl: name='CC2420TransmitP__CSN__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24289)
      FuncDecl: quals=None (at pp.c:24289)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CSN__makeOutput', quals=[] (at pp.c:24289)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24289)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__GeneralIO__makeOutput' (at pp.c:24291)
  FuncDef:  (at pp.c:24296)
    Decl: name='HplMsp430GeneralIOP__4__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:24296)
      FuncDecl: quals=None (at pp.c:24296)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__4__IO__makeInput', quals=[] (at pp.c:24296)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24298)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24301)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='34U' (at pp.c:24301)
        UnaryOp: op='~' (at pp.c:24301)
          BinaryOp: op='<<' (at pp.c:24301)
            Constant: type='int', value='0x01' (at pp.c:24301)
            Constant: type='int', value='4' (at pp.c:24301)
  FuncDef:  (at pp.c:24305)
    Decl: name='Msp430GpioC__3__HplGeneralIO__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:24305)
      FuncDecl: quals=None (at pp.c:24305)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__3__HplGeneralIO__makeInput', quals=[] (at pp.c:24305)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24305)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__4__IO__makeInput' (at pp.c:24307)
  FuncDef:  (at pp.c:24312)
    Decl: name='Msp430GpioC__3__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:24312)
      FuncDecl: quals=None (at pp.c:24312)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__3__GeneralIO__makeInput', quals=[] (at pp.c:24312)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24314)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__3__HplGeneralIO__makeInput' (at pp.c:24316)
  FuncDef:  (at pp.c:24320)
    Decl: name='CC2420TransmitP__CCA__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:24320)
      FuncDecl: quals=None (at pp.c:24320)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CCA__makeInput', quals=[] (at pp.c:24320)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24320)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__3__GeneralIO__makeInput' (at pp.c:24322)
  FuncDef:  (at pp.c:24327)
    Decl: name='CC2420TransmitP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24327)
      FuncDecl: quals=None (at pp.c:24327)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__Init__init', quals=[] (at pp.c:24327)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24329)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CCA__makeInput' (at pp.c:24330)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CSN__makeOutput' (at pp.c:24331)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__SFD__makeInput' (at pp.c:24332)
      Return:  (at pp.c:24333)
        ID: name='SUCCESS' (at pp.c:24333)
  FuncDef:  (at pp.c:24337)
    Decl: name='CC2420ReceiveP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24337)
      FuncDecl: quals=None (at pp.c:24337)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__Init__init', quals=[] (at pp.c:24337)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24339)
      Assignment: op='=' (at pp.c:24340)
        ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:24340)
        UnaryOp: op='&' (at pp.c:24340)
          ID: name='CC2420ReceiveP__m_rx_buf' (at pp.c:24340)
      Return:  (at pp.c:24341)
        ID: name='SUCCESS' (at pp.c:24341)
  FuncDef:  (at pp.c:24345)
    Decl: name='Msp430TimerCapComP__5__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:24345)
      FuncDecl: quals=None (at pp.c:24345)
        ParamList:  (at pp.c:24345)
          Decl: name='x', quals=[], storage=[] (at pp.c:24345)
            TypeDecl: declname='x', quals=[] (at pp.c:24345)
              IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__CC2int', quals=[] (at pp.c:24345)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:24347)
      Decl: name='c', quals=[], storage=[] (at pp.c:24356)
        TypeDecl: declname='c', quals=[] (at pp.c:24356)
          Union: name='Msp430TimerCapComP__5____nesc_unnamed4414', packed=False (at pp.c:24349)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:24351)
                IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:24353)
                IdentifierType: names=['uint16_t'] (at None)
        ExprList:  (at pp.c:24356)
          Assignment: op='=' (at pp.c:24356)
            StructRef: type='.' (at pp.c:24356)
              ID: name='f' (at pp.c:24356)
            ID: name='x' (at pp.c:24356)
      Return:  (at pp.c:24359)
        StructRef: type='.' (at pp.c:24359)
          ID: name='c' (at pp.c:24359)
          ID: name='t' (at pp.c:24359)
  FuncDef:  (at pp.c:24362)
    Decl: name='Msp430TimerCapComP__5__compareControl', quals=[], storage=['inline', 'static'] (at pp.c:24362)
      FuncDecl: quals=None (at pp.c:24362)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__compareControl', quals=[] (at pp.c:24362)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:24363)
      Decl: name='x', quals=[], storage=[] (at pp.c:24364)
        TypeDecl: declname='x', quals=[] (at pp.c:24364)
          IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
        ExprList:  (at pp.c:24365)
          Assignment: op='=' (at pp.c:24365)
            StructRef: type='.' (at pp.c:24365)
              ID: name='cm' (at pp.c:24365)
            Constant: type='int', value='1' (at pp.c:24365)
          Assignment: op='=' (at pp.c:24366)
            StructRef: type='.' (at pp.c:24366)
              ID: name='ccis' (at pp.c:24366)
            Constant: type='int', value='0' (at pp.c:24366)
          Assignment: op='=' (at pp.c:24367)
            StructRef: type='.' (at pp.c:24367)
              ID: name='clld' (at pp.c:24367)
            Constant: type='int', value='0' (at pp.c:24367)
          Assignment: op='=' (at pp.c:24368)
            StructRef: type='.' (at pp.c:24368)
              ID: name='cap' (at pp.c:24368)
            Constant: type='int', value='0' (at pp.c:24368)
          Assignment: op='=' (at pp.c:24369)
            StructRef: type='.' (at pp.c:24369)
              ID: name='ccie' (at pp.c:24369)
            Constant: type='int', value='0' (at pp.c:24369)
      Return:  (at pp.c:24371)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__5__CC2int' (at pp.c:24371)
          ExprList:  (at pp.c:24371)
            ID: name='x' (at pp.c:24371)
  FuncDef:  (at pp.c:24375)
    Decl: name='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[], storage=['inline', 'static'] (at pp.c:24375)
      FuncDecl: quals=None (at pp.c:24375)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[] (at pp.c:24375)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24376)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24377)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='390U' (at pp.c:24377)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__5__compareControl' (at pp.c:24377)
  FuncDef:  (at pp.c:24381)
    Decl: name='Msp430AlarmC__1__Msp430TimerControl__setControlAsCompare', quals=[], storage=['static', 'inline'] (at pp.c:24381)
      FuncDecl: quals=None (at pp.c:24381)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__setControlAsCompare', quals=[] (at pp.c:24381)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24381)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Control__setControlAsCompare' (at pp.c:24383)
  FuncDef:  (at pp.c:24388)
    Decl: name='Msp430AlarmC__1__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24388)
      FuncDecl: quals=None (at pp.c:24388)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Init__init', quals=[] (at pp.c:24388)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24389)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430TimerControl__disableEvents' (at pp.c:24390)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430TimerControl__setControlAsCompare' (at pp.c:24391)
      Return:  (at pp.c:24392)
        ID: name='SUCCESS' (at pp.c:24392)
  FuncDef:  (at pp.c:24396)
    Decl: name='RandomMlcgC__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24396)
      FuncDecl: quals=None (at pp.c:24396)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RandomMlcgC__Init__init', quals=[] (at pp.c:24396)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24398)
      Assignment: op='=' (at pp.c:24401)
        ID: name='RandomMlcgC__seed' (at pp.c:24401)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['uint32_t'] (at None)
          BinaryOp: op='+' (at pp.c:24401)
            ID: name='TOS_NODE_ID' (at pp.c:24401)
            Constant: type='int', value='1' (at pp.c:24401)
      Return:  (at pp.c:24403)
        ID: name='SUCCESS' (at pp.c:24403)
  FuncDef:  (at pp.c:24407)
    Decl: name='UniqueSendP__Random__rand16', quals=[], storage=['static', 'inline'] (at pp.c:24407)
      FuncDecl: quals=None (at pp.c:24407)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueSendP__Random__rand16', quals=[] (at pp.c:24407)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:24407)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24409)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24409)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24413)
        ID: name='__nesc_result' (at pp.c:24413)
        FuncCall:  (at None)
          ID: name='RandomMlcgC__Random__rand16' (at pp.c:24413)
      Return:  (at pp.c:24417)
        ID: name='__nesc_result' (at pp.c:24417)
  FuncDef:  (at pp.c:24422)
    Decl: name='UniqueSendP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24422)
      FuncDecl: quals=None (at pp.c:24422)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueSendP__Init__init', quals=[] (at pp.c:24422)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24424)
      Assignment: op='=' (at pp.c:24425)
        ID: name='UniqueSendP__localSendId' (at pp.c:24425)
        FuncCall:  (at None)
          ID: name='UniqueSendP__Random__rand16' (at pp.c:24425)
      Return:  (at pp.c:24426)
        ID: name='SUCCESS' (at pp.c:24426)
  FuncDef:  (at pp.c:24430)
    Decl: name='UniqueReceiveP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24430)
      FuncDecl: quals=None (at pp.c:24430)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueReceiveP__Init__init', quals=[] (at pp.c:24430)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24432)
      Decl: name='i', quals=[], storage=[] (at pp.c:24433)
        TypeDecl: declname='i', quals=[] (at pp.c:24433)
          IdentifierType: names=['int'] (at None)
      For:  (at pp.c:24436)
        Assignment: op='=' (at pp.c:24436)
          ID: name='i' (at pp.c:24436)
          Constant: type='int', value='0' (at pp.c:24436)
        BinaryOp: op='<' (at pp.c:24436)
          ID: name='i' (at pp.c:24436)
          Constant: type='int', value='4' (at pp.c:24436)
        UnaryOp: op='p++' (at pp.c:24436)
          ID: name='i' (at pp.c:24436)
        Compound:  (at pp.c:24436)
          Assignment: op='=' (at pp.c:24437)
            StructRef: type='.' (at pp.c:24437)
              ArrayRef:  (at pp.c:24437)
                ID: name='UniqueReceiveP__receivedMessages' (at pp.c:24437)
                ID: name='i' (at pp.c:24437)
              ID: name='source' (at pp.c:24437)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['am_addr_t'] (at None)
              Constant: type='int', value='0xFFFF' (at pp.c:24437)
          Assignment: op='=' (at pp.c:24438)
            StructRef: type='.' (at pp.c:24438)
              ArrayRef:  (at pp.c:24438)
                ID: name='UniqueReceiveP__receivedMessages' (at pp.c:24438)
                ID: name='i' (at pp.c:24438)
              ID: name='dsn' (at pp.c:24438)
            Constant: type='int', value='0' (at pp.c:24438)
      Return:  (at pp.c:24440)
        ID: name='SUCCESS' (at pp.c:24440)
  FuncDef:  (at pp.c:24444)
    Decl: name='FcfsResourceQueueC__0__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24444)
      FuncDecl: quals=None (at pp.c:24444)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__0__Init__init', quals=[] (at pp.c:24444)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24446)
      FuncCall:  (at None)
        ID: name='memset' (at pp.c:24447)
        ExprList:  (at pp.c:24447)
          ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:24447)
          ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:24447)
          UnaryOp: op='sizeof' (at pp.c:24447)
            ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:24447)
      Return:  (at pp.c:24448)
        ID: name='SUCCESS' (at pp.c:24448)
  FuncDef:  (at pp.c:24452)
    Decl: name='DefaultLplP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24452)
      FuncDecl: quals=None (at pp.c:24452)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__Init__init', quals=[] (at pp.c:24452)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24454)
      Assignment: op='=' (at pp.c:24455)
        ID: name='DefaultLplP__dutyCycling' (at pp.c:24455)
        ID: name='FALSE' (at pp.c:24455)
      Return:  (at pp.c:24456)
        ID: name='SUCCESS' (at pp.c:24456)
  FuncDef:  (at pp.c:24460)
    Decl: name='RealMainP__SoftwareInit__init', quals=[], storage=['static', 'inline'] (at pp.c:24460)
      FuncDecl: quals=None (at pp.c:24460)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__SoftwareInit__init', quals=[] (at pp.c:24460)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24460)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24462)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24462)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24466)
        ID: name='__nesc_result' (at pp.c:24466)
        FuncCall:  (at None)
          ID: name='DefaultLplP__Init__init' (at pp.c:24466)
      Assignment: op='=' (at pp.c:24468)
        ID: name='__nesc_result' (at pp.c:24468)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24468)
          ExprList:  (at pp.c:24468)
            ID: name='__nesc_result' (at pp.c:24468)
            FuncCall:  (at None)
              ID: name='FcfsResourceQueueC__0__Init__init' (at pp.c:24468)
      Assignment: op='=' (at pp.c:24470)
        ID: name='__nesc_result' (at pp.c:24470)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24470)
          ExprList:  (at pp.c:24470)
            ID: name='__nesc_result' (at pp.c:24470)
            FuncCall:  (at None)
              ID: name='UniqueReceiveP__Init__init' (at pp.c:24470)
      Assignment: op='=' (at pp.c:24472)
        ID: name='__nesc_result' (at pp.c:24472)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24472)
          ExprList:  (at pp.c:24472)
            ID: name='__nesc_result' (at pp.c:24472)
            FuncCall:  (at None)
              ID: name='UniqueSendP__Init__init' (at pp.c:24472)
      Assignment: op='=' (at pp.c:24474)
        ID: name='__nesc_result' (at pp.c:24474)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24474)
          ExprList:  (at pp.c:24474)
            ID: name='__nesc_result' (at pp.c:24474)
            FuncCall:  (at None)
              ID: name='RandomMlcgC__Init__init' (at pp.c:24474)
      Assignment: op='=' (at pp.c:24476)
        ID: name='__nesc_result' (at pp.c:24476)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24476)
          ExprList:  (at pp.c:24476)
            ID: name='__nesc_result' (at pp.c:24476)
            FuncCall:  (at None)
              ID: name='Msp430AlarmC__1__Init__init' (at pp.c:24476)
      Assignment: op='=' (at pp.c:24478)
        ID: name='__nesc_result' (at pp.c:24478)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24478)
          ExprList:  (at pp.c:24478)
            ID: name='__nesc_result' (at pp.c:24478)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__Init__init' (at pp.c:24478)
      Assignment: op='=' (at pp.c:24480)
        ID: name='__nesc_result' (at pp.c:24480)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24480)
          ExprList:  (at pp.c:24480)
            ID: name='__nesc_result' (at pp.c:24480)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__Init__init' (at pp.c:24480)
      Assignment: op='=' (at pp.c:24482)
        ID: name='__nesc_result' (at pp.c:24482)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24482)
          ExprList:  (at pp.c:24482)
            ID: name='__nesc_result' (at pp.c:24482)
            FuncCall:  (at None)
              ID: name='Msp430AlarmC__0__Init__init' (at pp.c:24482)
      Assignment: op='=' (at pp.c:24484)
        ID: name='__nesc_result' (at pp.c:24484)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24484)
          ExprList:  (at pp.c:24484)
            ID: name='__nesc_result' (at pp.c:24484)
            FuncCall:  (at None)
              ID: name='FcfsResourceQueueC__2__Init__init' (at pp.c:24484)
      Assignment: op='=' (at pp.c:24486)
        ID: name='__nesc_result' (at pp.c:24486)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24486)
          ExprList:  (at pp.c:24486)
            ID: name='__nesc_result' (at pp.c:24486)
            FuncCall:  (at None)
              ID: name='StateImplP__Init__init' (at pp.c:24486)
      Assignment: op='=' (at pp.c:24488)
        ID: name='__nesc_result' (at pp.c:24488)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24488)
          ExprList:  (at pp.c:24488)
            ID: name='__nesc_result' (at pp.c:24488)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__Init__init' (at pp.c:24488)
      Assignment: op='=' (at pp.c:24490)
        ID: name='__nesc_result' (at pp.c:24490)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24490)
          ExprList:  (at pp.c:24490)
            ID: name='__nesc_result' (at pp.c:24490)
            FuncCall:  (at None)
              ID: name='FcfsResourceQueueC__1__Init__init' (at pp.c:24490)
      Assignment: op='=' (at pp.c:24492)
        ID: name='__nesc_result' (at pp.c:24492)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24492)
          ExprList:  (at pp.c:24492)
            ID: name='__nesc_result' (at pp.c:24492)
            FuncCall:  (at None)
              ID: name='SerialP__Init__init' (at pp.c:24492)
      Return:  (at pp.c:24496)
        ID: name='__nesc_result' (at pp.c:24496)
  FuncDef:  (at pp.c:24501)
    Decl: name='PowerCycleP__SplitControlState__forceState', quals=[], storage=['static', 'inline'] (at pp.c:24501)
      FuncDecl: quals=None (at pp.c:24501)
        ParamList:  (at pp.c:24501)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:24501)
            TypeDecl: declname='reqState', quals=[] (at pp.c:24501)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='PowerCycleP__SplitControlState__forceState', quals=[] (at pp.c:24501)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24501)
      FuncCall:  (at None)
        ID: name='StateImplP__State__forceState' (at pp.c:24503)
        ExprList:  (at pp.c:24503)
          Constant: type='int', value='4U' (at pp.c:24503)
          ID: name='reqState' (at pp.c:24503)
  FuncDef:  (at pp.c:24508)
    Decl: name='PowerCycleP__SplitControl__start', quals=[], storage=['inline', 'static'] (at pp.c:24508)
      FuncDecl: quals=None (at pp.c:24508)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__SplitControl__start', quals=[] (at pp.c:24508)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24510)
      If:  (at pp.c:24511)
        FuncCall:  (at None)
          ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:24511)
          ExprList:  (at pp.c:24511)
            ID: name='PowerCycleP__S_ON' (at pp.c:24511)
        Compound:  (at pp.c:24511)
          Return:  (at pp.c:24512)
            ID: name='EALREADY' (at pp.c:24512)
        Compound:  (at pp.c:24514)
          If:  (at pp.c:24516)
            FuncCall:  (at None)
              ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:24516)
              ExprList:  (at pp.c:24516)
                ID: name='PowerCycleP__S_TURNING_ON' (at pp.c:24516)
            Compound:  (at pp.c:24516)
              Return:  (at pp.c:24517)
                ID: name='SUCCESS' (at pp.c:24517)
            Compound:  (at pp.c:24519)
              If:  (at pp.c:24521)
                UnaryOp: op='!' (at None)
                  FuncCall:  (at None)
                    ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:24521)
                    ExprList:  (at pp.c:24521)
                      ID: name='PowerCycleP__S_OFF' (at pp.c:24521)
                Compound:  (at pp.c:24521)
                  Return:  (at pp.c:24522)
                    ID: name='EBUSY' (at pp.c:24522)
      FuncCall:  (at None)
        ID: name='PowerCycleP__SplitControlState__forceState' (at pp.c:24526)
        ExprList:  (at pp.c:24526)
          ID: name='PowerCycleP__S_TURNING_ON' (at pp.c:24526)
      If:  (at pp.c:24528)
        BinaryOp: op='>' (at pp.c:24528)
          ID: name='PowerCycleP__sleepInterval' (at pp.c:24528)
          Constant: type='int', value='0' (at pp.c:24528)
        Compound:  (at pp.c:24528)
          FuncCall:  (at None)
            ID: name='PowerCycleP__stopRadio__postTask' (at pp.c:24530)
          Return:  (at pp.c:24531)
            ID: name='SUCCESS' (at pp.c:24531)
        Compound:  (at pp.c:24533)
          FuncCall:  (at None)
            ID: name='PowerCycleP__startRadio__postTask' (at pp.c:24534)
          Return:  (at pp.c:24535)
            ID: name='SUCCESS' (at pp.c:24535)
  FuncDef:  (at pp.c:24540)
    Decl: name='LowPowerSensingBaseC__RadioAMControl__start', quals=[], storage=['static', 'inline'] (at pp.c:24540)
      FuncDecl: quals=None (at pp.c:24540)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__RadioAMControl__start', quals=[] (at pp.c:24540)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24540)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24542)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24542)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24546)
        ID: name='__nesc_result' (at pp.c:24546)
        FuncCall:  (at None)
          ID: name='PowerCycleP__SplitControl__start' (at pp.c:24546)
      Return:  (at pp.c:24550)
        ID: name='__nesc_result' (at pp.c:24550)
  FuncDef:  (at pp.c:24555)
    Decl: name='LowPowerSensingBaseC__SerialPacket__getPayload', quals=[], storage=['static', 'inline'] (at pp.c:24555)
      FuncDecl: quals=None (at pp.c:24555)
        ParamList:  (at pp.c:24555)
          Decl: name='msg', quals=[], storage=[] (at pp.c:24555)
            PtrDecl: quals=[] (at pp.c:24555)
              TypeDecl: declname='msg', quals=[] (at pp.c:24555)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:24555)
            TypeDecl: declname='len', quals=[] (at pp.c:24555)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:24555)
          TypeDecl: declname='LowPowerSensingBaseC__SerialPacket__getPayload', quals=[] (at pp.c:24555)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24555)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24557)
        PtrDecl: quals=[] (at pp.c:24557)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24557)
            IdentifierType: names=['void'] (at None)
      Assignment: op='=' (at pp.c:24561)
        ID: name='__nesc_result' (at pp.c:24561)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__Packet__getPayload' (at pp.c:24561)
          ExprList:  (at pp.c:24561)
            ID: name='msg' (at pp.c:24561)
            ID: name='len' (at pp.c:24561)
      Return:  (at pp.c:24565)
        ID: name='__nesc_result' (at pp.c:24565)
  FuncDef:  (at pp.c:24570)
    Decl: name='LowPowerSensingBaseC__Boot__booted', quals=[], storage=['inline', 'static'] (at pp.c:24570)
      FuncDecl: quals=None (at pp.c:24570)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__Boot__booted', quals=[] (at pp.c:24570)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24572)
      Assignment: op='=' (at pp.c:24573)
        ID: name='LowPowerSensingBaseC__serialSending' (at pp.c:24573)
        ID: name='FALSE' (at pp.c:24573)
      Assignment: op='=' (at pp.c:24574)
        ID: name='LowPowerSensingBaseC__sample_msg_payload' (at pp.c:24574)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:24574)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['serial_sample_msg_t'] (at None)
          FuncCall:  (at None)
            ID: name='LowPowerSensingBaseC__SerialPacket__getPayload' (at pp.c:24574)
            ExprList:  (at pp.c:24574)
              UnaryOp: op='&' (at pp.c:24574)
                ID: name='LowPowerSensingBaseC__sample_msg' (at pp.c:24574)
              UnaryOp: op='sizeof' (at pp.c:24574)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['serial_sample_msg_t'] (at None)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__RadioAMControl__start' (at pp.c:24575)
  FuncDef:  (at pp.c:24579)
    Decl: name='RealMainP__Boot__booted', quals=[], storage=['static', 'inline'] (at pp.c:24579)
      FuncDecl: quals=None (at pp.c:24579)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__Boot__booted', quals=[] (at pp.c:24579)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24579)
      FuncCall:  (at None)
        ID: name='LowPowerSensingBaseC__Boot__booted' (at pp.c:24581)
  FuncDef:  (at pp.c:24586)
    Decl: name='__nesc_disable_interrupt', quals=[], storage=['inline', 'static'] (at pp.c:24586)
      FuncDecl: quals=None (at pp.c:24586)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_disable_interrupt', quals=[] (at pp.c:24586)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24587)
      Assignment: op='&=' (at pp.c:24588)
        ID: name='_R2' (at pp.c:24588)
        Constant: type='int', value='0xfff7' (at pp.c:24588)
  FuncDef:  (at pp.c:24592)
    Decl: name='Msp430ClockP__McuPowerOverride__lowestState', quals=[], storage=['inline', 'static'] (at pp.c:24592)
      FuncDecl: quals=None (at pp.c:24592)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__McuPowerOverride__lowestState', quals=[] (at pp.c:24592)
          IdentifierType: names=['mcu_power_t'] (at None)
    Compound:  (at pp.c:24594)
      Return:  (at pp.c:24595)
        ID: name='MSP430_POWER_LPM3' (at pp.c:24595)
  FuncDef:  (at pp.c:24599)
    Decl: name='McuSleepC__McuPowerOverride__lowestState', quals=[], storage=['static', 'inline'] (at pp.c:24599)
      FuncDecl: quals=None (at pp.c:24599)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='McuSleepC__McuPowerOverride__lowestState', quals=[] (at pp.c:24599)
          IdentifierType: names=['mcu_power_t'] (at None)
    Compound:  (at pp.c:24599)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24601)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24601)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24605)
        ID: name='__nesc_result' (at pp.c:24605)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__McuPowerOverride__lowestState' (at pp.c:24605)
      Return:  (at pp.c:24609)
        ID: name='__nesc_result' (at pp.c:24609)
  FuncDef:  (at pp.c:24614)
    Decl: name='McuSleepC__getPowerState', quals=[], storage=['inline', 'static'] (at pp.c:24614)
      FuncDecl: quals=None (at pp.c:24614)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='McuSleepC__getPowerState', quals=[] (at pp.c:24614)
          IdentifierType: names=['mcu_power_t'] (at None)
    Compound:  (at pp.c:24616)
      Decl: name='pState', quals=[], storage=[] (at pp.c:24617)
        TypeDecl: declname='pState', quals=[] (at pp.c:24617)
          IdentifierType: names=['mcu_power_t'] (at None)
        ID: name='MSP430_POWER_LPM4' (at pp.c:24617)
      If:  (at pp.c:24627)
        BinaryOp: op='||' (at pp.c:24629)
          BinaryOp: op='||' (at pp.c:24629)
            BinaryOp: op='||' (at pp.c:24629)
              BinaryOp: op='&&' (at pp.c:24629)
                BinaryOp: op='||' (at pp.c:24629)
                  BinaryOp: op='||' (at pp.c:24629)
                    BinaryOp: op='&' (at pp.c:24629)
                      ID: name='TA0CCTL0' (at pp.c:24629)
                      Constant: type='int', value='0x0010' (at pp.c:24629)
                    BinaryOp: op='&' (at pp.c:24630)
                      ID: name='TA0CCTL1' (at pp.c:24630)
                      Constant: type='int', value='0x0010' (at pp.c:24630)
                  BinaryOp: op='&' (at pp.c:24631)
                    ID: name='TA0CCTL2' (at pp.c:24631)
                    Constant: type='int', value='0x0010' (at pp.c:24631)
                BinaryOp: op='==' (at pp.c:24632)
                  BinaryOp: op='&' (at pp.c:24632)
                    ID: name='TA0CTL' (at pp.c:24632)
                    BinaryOp: op='<<' (at pp.c:24632)
                      Constant: type='int', value='3' (at pp.c:24632)
                      Constant: type='int', value='8' (at pp.c:24632)
                  BinaryOp: op='<<' (at pp.c:24632)
                    Constant: type='int', value='2' (at pp.c:24632)
                    Constant: type='int', value='8' (at pp.c:24632)
              BinaryOp: op='&&' (at pp.c:24633)
                BinaryOp: op='&' (at pp.c:24633)
                  ID: name='ME1' (at pp.c:24633)
                  BinaryOp: op='|' (at pp.c:24633)
                    BinaryOp: op='<<' (at pp.c:24633)
                      Constant: type='int', value='1' (at pp.c:24633)
                      Constant: type='int', value='7' (at pp.c:24633)
                    BinaryOp: op='<<' (at pp.c:24633)
                      Constant: type='int', value='1' (at pp.c:24633)
                      Constant: type='int', value='6' (at pp.c:24633)
                BinaryOp: op='&' (at pp.c:24633)
                  ID: name='U0TCTL' (at pp.c:24633)
                  Constant: type='int', value='0x20' (at pp.c:24633)
            BinaryOp: op='&&' (at pp.c:24634)
              BinaryOp: op='&' (at pp.c:24634)
                ID: name='ME2' (at pp.c:24634)
                BinaryOp: op='|' (at pp.c:24634)
                  BinaryOp: op='<<' (at pp.c:24634)
                    Constant: type='int', value='1' (at pp.c:24634)
                    Constant: type='int', value='5' (at pp.c:24634)
                  BinaryOp: op='<<' (at pp.c:24634)
                    Constant: type='int', value='1' (at pp.c:24634)
                    Constant: type='int', value='4' (at pp.c:24634)
              BinaryOp: op='&' (at pp.c:24634)
                ID: name='U1TCTL' (at pp.c:24634)
                Constant: type='int', value='0x20' (at pp.c:24634)
          BinaryOp: op='&&' (at pp.c:24637)
            BinaryOp: op='&&' (at pp.c:24637)
              BinaryOp: op='&&' (at pp.c:24637)
                BinaryOp: op='&&' (at pp.c:24637)
                  BinaryOp: op='&' (at pp.c:24637)
                    ID: name='U0CTLnr' (at pp.c:24637)
                    Constant: type='int', value='0x01' (at pp.c:24637)
                  BinaryOp: op='&' (at pp.c:24637)
                    ID: name='I2CTCTLnr' (at pp.c:24637)
                    Constant: type='int', value='0x20' (at pp.c:24637)
                BinaryOp: op='&' (at pp.c:24638)
                  ID: name='I2CDCTLnr' (at pp.c:24638)
                  Constant: type='int', value='0x20' (at pp.c:24638)
              BinaryOp: op='&' (at pp.c:24638)
                ID: name='U0CTLnr' (at pp.c:24638)
                Constant: type='int', value='0x04' (at pp.c:24638)
            BinaryOp: op='&' (at pp.c:24638)
              ID: name='U0CTLnr' (at pp.c:24638)
              Constant: type='int', value='0x20' (at pp.c:24638)
        Compound:  (at pp.c:24638)
          Assignment: op='=' (at pp.c:24641)
            ID: name='pState' (at pp.c:24641)
            ID: name='MSP430_POWER_LPM1' (at pp.c:24641)
      If:  (at pp.c:24645)
        BinaryOp: op='&' (at pp.c:24645)
          ID: name='ADC12CTL0' (at pp.c:24645)
          Constant: type='int', value='0x0010' (at pp.c:24645)
        Compound:  (at pp.c:24645)
          If:  (at pp.c:24646)
            BinaryOp: op='&' (at pp.c:24646)
              ID: name='ADC12CTL1' (at pp.c:24646)
              BinaryOp: op='<<' (at pp.c:24646)
                Constant: type='int', value='2' (at pp.c:24646)
                Constant: type='int', value='3' (at pp.c:24646)
            Compound:  (at pp.c:24646)
              If:  (at pp.c:24648)
                BinaryOp: op='&' (at pp.c:24648)
                  ID: name='ADC12CTL1' (at pp.c:24648)
                  BinaryOp: op='<<' (at pp.c:24648)
                    Constant: type='int', value='1' (at pp.c:24648)
                    Constant: type='int', value='3' (at pp.c:24648)
                Compound:  (at pp.c:24648)
                  Assignment: op='=' (at pp.c:24649)
                    ID: name='pState' (at pp.c:24649)
                    ID: name='MSP430_POWER_LPM1' (at pp.c:24649)
                Compound:  (at pp.c:24651)
                  Assignment: op='=' (at pp.c:24653)
                    ID: name='pState' (at pp.c:24653)
                    ID: name='MSP430_POWER_ACTIVE' (at pp.c:24653)
            Compound:  (at pp.c:24656)
              If:  (at pp.c:24658)
                BinaryOp: op='&&' (at pp.c:24658)
                  BinaryOp: op='&' (at pp.c:24658)
                    ID: name='ADC12CTL1' (at pp.c:24658)
                    Constant: type='int', value='0x0400' (at pp.c:24658)
                  BinaryOp: op='==' (at pp.c:24658)
                    BinaryOp: op='&' (at pp.c:24658)
                      ID: name='TA0CTL' (at pp.c:24658)
                      BinaryOp: op='<<' (at pp.c:24658)
                        Constant: type='int', value='3' (at pp.c:24658)
                        Constant: type='int', value='8' (at pp.c:24658)
                    BinaryOp: op='<<' (at pp.c:24658)
                      Constant: type='int', value='2' (at pp.c:24658)
                      Constant: type='int', value='8' (at pp.c:24658)
                Compound:  (at pp.c:24658)
                  Assignment: op='=' (at pp.c:24662)
                    ID: name='pState' (at pp.c:24662)
                    ID: name='MSP430_POWER_LPM1' (at pp.c:24662)
      Return:  (at pp.c:24667)
        ID: name='pState' (at pp.c:24667)
  FuncDef:  (at pp.c:24671)
    Decl: name='mcombine', quals=[], storage=['inline', 'static'] (at pp.c:24671)
      FuncDecl: quals=None (at pp.c:24671)
        ParamList:  (at pp.c:24671)
          Decl: name='m1', quals=[], storage=[] (at pp.c:24671)
            TypeDecl: declname='m1', quals=[] (at pp.c:24671)
              IdentifierType: names=['mcu_power_t'] (at None)
          Decl: name='m2', quals=[], storage=[] (at pp.c:24671)
            TypeDecl: declname='m2', quals=[] (at pp.c:24671)
              IdentifierType: names=['mcu_power_t'] (at None)
        TypeDecl: declname='mcombine', quals=[] (at pp.c:24671)
          IdentifierType: names=['mcu_power_t'] (at None)
    Compound:  (at pp.c:24673)
      Return:  (at pp.c:24674)
        TernaryOp:  (at pp.c:24674)
          BinaryOp: op='<' (at pp.c:24674)
            ID: name='m1' (at pp.c:24674)
            ID: name='m2' (at pp.c:24674)
          ID: name='m1' (at pp.c:24674)
          ID: name='m2' (at pp.c:24674)
  FuncDef:  (at pp.c:24678)
    Decl: name='McuSleepC__computePowerState', quals=[], storage=['inline', 'static'] (at pp.c:24678)
      FuncDecl: quals=None (at pp.c:24678)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='McuSleepC__computePowerState', quals=[] (at pp.c:24678)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24680)
      Assignment: op='=' (at pp.c:24681)
        ID: name='McuSleepC__powerState' (at pp.c:24681)
        FuncCall:  (at None)
          ID: name='mcombine' (at pp.c:24681)
          ExprList:  (at None)
            FuncCall:  (at None)
              ID: name='McuSleepC__getPowerState' (at pp.c:24681)
            FuncCall:  (at None)
              ID: name='McuSleepC__McuPowerOverride__lowestState' (at pp.c:24682)
  FuncDef:  (at pp.c:24685)
    Decl: name='McuSleepC__McuSleep__sleep', quals=[], storage=['inline', 'static'] (at pp.c:24685)
      FuncDecl: quals=None (at pp.c:24685)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='McuSleepC__McuSleep__sleep', quals=[] (at pp.c:24685)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24687)
      Decl: name='temp', quals=[], storage=[] (at pp.c:24688)
        TypeDecl: declname='temp', quals=[] (at pp.c:24688)
          IdentifierType: names=['uint16_t'] (at None)
      If:  (at pp.c:24691)
        ID: name='McuSleepC__dirty' (at pp.c:24691)
        Compound:  (at pp.c:24691)
          FuncCall:  (at None)
            ID: name='McuSleepC__computePowerState' (at pp.c:24692)
      Assignment: op='=' (at pp.c:24695)
        ID: name='temp' (at pp.c:24695)
        BinaryOp: op='|' (at pp.c:24695)
          ArrayRef:  (at pp.c:24695)
            ID: name='McuSleepC__msp430PowerBits' (at pp.c:24695)
            ID: name='McuSleepC__powerState' (at pp.c:24695)
          Constant: type='int', value='0x0008' (at pp.c:24695)
      Assignment: op='|=' (at pp.c:24696)
        ID: name='_R2' (at pp.c:24696)
        ID: name='temp' (at pp.c:24696)
      FuncCall:  (at None)
        ID: name='__nesc_disable_interrupt' (at pp.c:24699)
  FuncDef:  (at pp.c:24703)
    Decl: name='SchedulerBasicP__McuSleep__sleep', quals=[], storage=['static', 'inline'] (at pp.c:24703)
      FuncDecl: quals=None (at pp.c:24703)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SchedulerBasicP__McuSleep__sleep', quals=[] (at pp.c:24703)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24703)
      FuncCall:  (at None)
        ID: name='McuSleepC__McuSleep__sleep' (at pp.c:24705)
  FuncDef:  (at pp.c:24710)
    Decl: name='SchedulerBasicP__popTask', quals=[], storage=['__inline', 'static'] (at pp.c:24710)
      FuncDecl: quals=None (at pp.c:24710)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SchedulerBasicP__popTask', quals=[] (at pp.c:24710)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:24711)
      If:  (at pp.c:24712)
        BinaryOp: op='!=' (at pp.c:24712)
          ID: name='SchedulerBasicP__m_head' (at pp.c:24712)
          ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24712)
        Compound:  (at pp.c:24713)
          Decl: name='id', quals=[], storage=[] (at pp.c:24714)
            TypeDecl: declname='id', quals=[] (at pp.c:24714)
              IdentifierType: names=['uint8_t'] (at None)
            ID: name='SchedulerBasicP__m_head' (at pp.c:24714)
          Assignment: op='=' (at pp.c:24717)
            ID: name='SchedulerBasicP__m_head' (at pp.c:24717)
            ArrayRef:  (at pp.c:24717)
              ID: name='SchedulerBasicP__m_next' (at pp.c:24717)
              ID: name='SchedulerBasicP__m_head' (at pp.c:24717)
          If:  (at pp.c:24718)
            BinaryOp: op='==' (at pp.c:24718)
              ID: name='SchedulerBasicP__m_head' (at pp.c:24718)
              ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24718)
            Compound:  (at pp.c:24719)
              Assignment: op='=' (at pp.c:24720)
                ID: name='SchedulerBasicP__m_tail' (at pp.c:24720)
                ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24720)
          Assignment: op='=' (at pp.c:24722)
            ArrayRef:  (at pp.c:24722)
              ID: name='SchedulerBasicP__m_next' (at pp.c:24722)
              ID: name='id' (at pp.c:24722)
            ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24722)
          Return:  (at pp.c:24723)
            ID: name='id' (at pp.c:24723)
        Compound:  (at pp.c:24726)
          Return:  (at pp.c:24727)
            ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24727)
  FuncDef:  (at pp.c:24732)
    Decl: name='SchedulerBasicP__Scheduler__taskLoop', quals=[], storage=['inline', 'static'] (at pp.c:24732)
      FuncDecl: quals=None (at pp.c:24732)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SchedulerBasicP__Scheduler__taskLoop', quals=[] (at pp.c:24732)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24733)
      For:  (at pp.c:24734)
        Compound:  (at pp.c:24735)
          Decl: name='nextTask', quals=[], storage=[] (at pp.c:24736)
            TypeDecl: declname='nextTask', quals=[] (at pp.c:24736)
              IdentifierType: names=['uint8_t'] (at None)
          Compound:  (at pp.c:24738)
            Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:24738)
              TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:24738)
                IdentifierType: names=['__nesc_atomic_t'] (at None)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_start' (at pp.c:24738)
            Compound:  (at pp.c:24739)
              While:  (at pp.c:24740)
                BinaryOp: op='==' (at pp.c:24740)
                  Assignment: op='=' (at pp.c:24740)
                    ID: name='nextTask' (at pp.c:24740)
                    FuncCall:  (at None)
                      ID: name='SchedulerBasicP__popTask' (at pp.c:24740)
                  ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24740)
                Compound:  (at pp.c:24741)
                  FuncCall:  (at None)
                    ID: name='SchedulerBasicP__McuSleep__sleep' (at pp.c:24742)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:24746)
              ExprList:  (at pp.c:24746)
                ID: name='__nesc_atomic' (at pp.c:24746)
          FuncCall:  (at None)
            ID: name='SchedulerBasicP__TaskBasic__runTask' (at pp.c:24747)
            ExprList:  (at pp.c:24747)
              ID: name='nextTask' (at pp.c:24747)
  FuncDef:  (at pp.c:24752)
    Decl: name='RealMainP__Scheduler__taskLoop', quals=[], storage=['static', 'inline'] (at pp.c:24752)
      FuncDecl: quals=None (at pp.c:24752)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__Scheduler__taskLoop', quals=[] (at pp.c:24752)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24752)
      FuncCall:  (at None)
        ID: name='SchedulerBasicP__Scheduler__taskLoop' (at pp.c:24754)
  FuncDef:  (at pp.c:24759)
    Decl: name='Msp430UsartShareP__0__ArbiterInfo__userId', quals=[], storage=['static', 'inline'] (at pp.c:24759)
      FuncDecl: quals=None (at pp.c:24759)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__ArbiterInfo__userId', quals=[] (at pp.c:24759)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:24759)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24761)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24761)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24765)
        ID: name='__nesc_result' (at pp.c:24765)
        FuncCall:  (at None)
          ID: name='ArbiterP__0__ArbiterInfo__userId' (at pp.c:24765)
      Return:  (at pp.c:24769)
        ID: name='__nesc_result' (at pp.c:24769)
  FuncDef:  (at pp.c:24774)
    Decl: name='SerialP__SerialFrameComm__dataReceived', quals=[], storage=['inline', 'static'] (at pp.c:24774)
      FuncDecl: quals=None (at pp.c:24774)
        ParamList:  (at pp.c:24774)
          Decl: name='data', quals=[], storage=[] (at pp.c:24774)
            TypeDecl: declname='data', quals=[] (at pp.c:24774)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialP__SerialFrameComm__dataReceived', quals=[] (at pp.c:24774)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24776)
      FuncCall:  (at None)
        ID: name='SerialP__rx_state_machine' (at pp.c:24777)
        ExprList:  (at pp.c:24777)
          ID: name='FALSE' (at pp.c:24777)
          ID: name='data' (at pp.c:24777)
  FuncDef:  (at pp.c:24781)
    Decl: name='HdlcTranslateC__SerialFrameComm__dataReceived', quals=[], storage=['static', 'inline'] (at pp.c:24781)
      FuncDecl: quals=None (at pp.c:24781)
        ParamList:  (at pp.c:24781)
          Decl: name='data', quals=[], storage=[] (at pp.c:24781)
            TypeDecl: declname='data', quals=[] (at pp.c:24781)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HdlcTranslateC__SerialFrameComm__dataReceived', quals=[] (at pp.c:24781)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24781)
      FuncCall:  (at None)
        ID: name='SerialP__SerialFrameComm__dataReceived' (at pp.c:24783)
        ExprList:  (at pp.c:24783)
          ID: name='data' (at pp.c:24783)
  FuncDef:  (at pp.c:24788)
    Decl: name='SerialP__SerialFrameComm__delimiterReceived', quals=[], storage=['inline', 'static'] (at pp.c:24788)
      FuncDecl: quals=None (at pp.c:24788)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SerialFrameComm__delimiterReceived', quals=[] (at pp.c:24788)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24790)
      FuncCall:  (at None)
        ID: name='SerialP__rx_state_machine' (at pp.c:24791)
        ExprList:  (at pp.c:24791)
          ID: name='TRUE' (at pp.c:24791)
          Constant: type='int', value='0' (at pp.c:24791)
  FuncDef:  (at pp.c:24795)
    Decl: name='HdlcTranslateC__SerialFrameComm__delimiterReceived', quals=[], storage=['static', 'inline'] (at pp.c:24795)
      FuncDecl: quals=None (at pp.c:24795)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HdlcTranslateC__SerialFrameComm__delimiterReceived', quals=[] (at pp.c:24795)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24795)
      FuncCall:  (at None)
        ID: name='SerialP__SerialFrameComm__delimiterReceived' (at pp.c:24797)
  FuncDef:  (at pp.c:24802)
    Decl: name='HdlcTranslateC__UartStream__receivedByte', quals=[], storage=['inline', 'static'] (at pp.c:24802)
      FuncDecl: quals=None (at pp.c:24802)
        ParamList:  (at pp.c:24802)
          Decl: name='data', quals=[], storage=[] (at pp.c:24802)
            TypeDecl: declname='data', quals=[] (at pp.c:24802)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HdlcTranslateC__UartStream__receivedByte', quals=[] (at pp.c:24802)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24804)
      If:  (at pp.c:24811)
        BinaryOp: op='==' (at pp.c:24811)
          ID: name='data' (at pp.c:24811)
          ID: name='HDLC_FLAG_BYTE' (at pp.c:24811)
        Compound:  (at pp.c:24811)
          FuncCall:  (at None)
            ID: name='HdlcTranslateC__SerialFrameComm__delimiterReceived' (at pp.c:24813)
          Return:  (at pp.c:24814)
        Compound:  (at pp.c:24816)
          If:  (at pp.c:24818)
            BinaryOp: op='==' (at pp.c:24818)
              ID: name='data' (at pp.c:24818)
              ID: name='HDLC_CTLESC_BYTE' (at pp.c:24818)
            Compound:  (at pp.c:24818)
              Assignment: op='=' (at pp.c:24820)
                StructRef: type='.' (at pp.c:24820)
                  ID: name='HdlcTranslateC__state' (at pp.c:24820)
                  ID: name='receiveEscape' (at pp.c:24820)
                Constant: type='int', value='1' (at pp.c:24820)
              Return:  (at pp.c:24821)
            Compound:  (at pp.c:24823)
              If:  (at pp.c:24825)
                StructRef: type='.' (at pp.c:24825)
                  ID: name='HdlcTranslateC__state' (at pp.c:24825)
                  ID: name='receiveEscape' (at pp.c:24825)
                Compound:  (at pp.c:24825)
                  Assignment: op='=' (at pp.c:24827)
                    StructRef: type='.' (at pp.c:24827)
                      ID: name='HdlcTranslateC__state' (at pp.c:24827)
                      ID: name='receiveEscape' (at pp.c:24827)
                    Constant: type='int', value='0' (at pp.c:24827)
                  Assignment: op='=' (at pp.c:24828)
                    ID: name='data' (at pp.c:24828)
                    BinaryOp: op='^' (at pp.c:24828)
                      ID: name='data' (at pp.c:24828)
                      Constant: type='int', value='0x20' (at pp.c:24828)
      FuncCall:  (at None)
        ID: name='HdlcTranslateC__SerialFrameComm__dataReceived' (at pp.c:24833)
        ExprList:  (at pp.c:24833)
          ID: name='data' (at pp.c:24833)
  FuncDef:  (at pp.c:24837)
    Decl: name='Msp430UartP__0__UartStream__default__receivedByte', quals=[], storage=['inline', 'static'] (at pp.c:24837)
      FuncDecl: quals=None (at pp.c:24837)
        ParamList:  (at pp.c:24837)
          Decl: name='id', quals=[], storage=[] (at pp.c:24837)
            TypeDecl: declname='id', quals=[] (at pp.c:24837)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='byte', quals=[], storage=[] (at pp.c:24837)
            TypeDecl: declname='byte', quals=[] (at pp.c:24837)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UartStream__default__receivedByte', quals=[] (at pp.c:24837)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24839)
  FuncDef:  (at pp.c:24843)
    Decl: name='Msp430UartP__0__UartStream__receivedByte', quals=[], storage=['static', 'inline'] (at pp.c:24843)
      FuncDecl: quals=None (at pp.c:24843)
        ParamList:  (at pp.c:24843)
          Decl: name='arg_0x101bfd020', quals=[], storage=[] (at pp.c:24843)
            TypeDecl: declname='arg_0x101bfd020', quals=[] (at pp.c:24843)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='byte', quals=[], storage=[] (at pp.c:24843)
            TypeDecl: declname='byte', quals=[] (at pp.c:24843)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UartStream__receivedByte', quals=[] (at pp.c:24843)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24843)
      Switch:  (at pp.c:24845)
        ID: name='arg_0x101bfd020' (at pp.c:24845)
        Compound:  (at pp.c:24845)
          Case:  (at pp.c:24847)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:24847)
            FuncCall:  (at None)
              ID: name='HdlcTranslateC__UartStream__receivedByte' (at pp.c:24849)
              ExprList:  (at pp.c:24849)
                ID: name='byte' (at pp.c:24849)
          Break:  (at pp.c:24851)
          Default:  (at pp.c:24853)
            FuncCall:  (at None)
              ID: name='Msp430UartP__0__UartStream__default__receivedByte' (at pp.c:24855)
              ExprList:  (at pp.c:24855)
                ID: name='arg_0x101bfd020' (at pp.c:24855)
                ID: name='byte' (at pp.c:24855)
          Break:  (at pp.c:24857)
  FuncDef:  (at pp.c:24864)
    Decl: name='HdlcTranslateC__UartStream__receiveDone', quals=[], storage=['inline', 'static'] (at pp.c:24864)
      FuncDecl: quals=None (at pp.c:24864)
        ParamList:  (at pp.c:24864)
          Decl: name='buf', quals=[], storage=[] (at pp.c:24864)
            PtrDecl: quals=[] (at pp.c:24864)
              TypeDecl: declname='buf', quals=[] (at pp.c:24864)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:24864)
            TypeDecl: declname='len', quals=[] (at pp.c:24864)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:24864)
            TypeDecl: declname='error', quals=[] (at pp.c:24864)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='HdlcTranslateC__UartStream__receiveDone', quals=[] (at pp.c:24864)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24866)
  FuncDef:  (at pp.c:24870)
    Decl: name='Msp430UartP__0__UartStream__default__receiveDone', quals=[], storage=['inline', 'static'] (at pp.c:24870)
      FuncDecl: quals=None (at pp.c:24870)
        ParamList:  (at pp.c:24870)
          Decl: name='id', quals=[], storage=[] (at pp.c:24870)
            TypeDecl: declname='id', quals=[] (at pp.c:24870)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:24870)
            PtrDecl: quals=[] (at pp.c:24870)
              TypeDecl: declname='buf', quals=[] (at pp.c:24870)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:24870)
            TypeDecl: declname='len', quals=[] (at pp.c:24870)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:24870)
            TypeDecl: declname='error', quals=[] (at pp.c:24870)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UartStream__default__receiveDone', quals=[] (at pp.c:24870)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24872)
  FuncDef:  (at pp.c:24876)
    Decl: name='Msp430UartP__0__UartStream__receiveDone', quals=[], storage=['static', 'inline'] (at pp.c:24876)
      FuncDecl: quals=None (at pp.c:24876)
        ParamList:  (at pp.c:24876)
          Decl: name='arg_0x101bfd020', quals=[], storage=[] (at pp.c:24876)
            TypeDecl: declname='arg_0x101bfd020', quals=[] (at pp.c:24876)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:24876)
            PtrDecl: quals=[] (at pp.c:24876)
              TypeDecl: declname='buf', quals=[] (at pp.c:24876)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:24876)
            TypeDecl: declname='len', quals=[] (at pp.c:24876)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:24876)
            TypeDecl: declname='error', quals=[] (at pp.c:24876)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UartStream__receiveDone', quals=[] (at pp.c:24876)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24876)
      Switch:  (at pp.c:24878)
        ID: name='arg_0x101bfd020' (at pp.c:24878)
        Compound:  (at pp.c:24878)
          Case:  (at pp.c:24880)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:24880)
            FuncCall:  (at None)
              ID: name='HdlcTranslateC__UartStream__receiveDone' (at pp.c:24882)
              ExprList:  (at pp.c:24882)
                ID: name='buf' (at pp.c:24882)
                ID: name='len' (at pp.c:24882)
                ID: name='error' (at pp.c:24882)
          Break:  (at pp.c:24884)
          Default:  (at pp.c:24886)
            FuncCall:  (at None)
              ID: name='Msp430UartP__0__UartStream__default__receiveDone' (at pp.c:24888)
              ExprList:  (at pp.c:24888)
                ID: name='arg_0x101bfd020' (at pp.c:24888)
                ID: name='buf' (at pp.c:24888)
                ID: name='len' (at pp.c:24888)
                ID: name='error' (at pp.c:24888)
          Break:  (at pp.c:24890)
  FuncDef:  (at pp.c:24897)
    Decl: name='Msp430UartP__0__UsartInterrupts__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:24897)
      FuncDecl: quals=None (at pp.c:24897)
        ParamList:  (at pp.c:24897)
          Decl: name='id', quals=[], storage=[] (at pp.c:24897)
            TypeDecl: declname='id', quals=[] (at pp.c:24897)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:24897)
            TypeDecl: declname='data', quals=[] (at pp.c:24897)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UsartInterrupts__rxDone', quals=[] (at pp.c:24897)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24899)
      If:  (at pp.c:24900)
        ID: name='Msp430UartP__0__m_rx_buf' (at pp.c:24900)
        Compound:  (at pp.c:24900)
          Assignment: op='=' (at pp.c:24901)
            ArrayRef:  (at pp.c:24901)
              ID: name='Msp430UartP__0__m_rx_buf' (at pp.c:24901)
              UnaryOp: op='p++' (at pp.c:24901)
                ID: name='Msp430UartP__0__m_rx_pos' (at pp.c:24901)
            ID: name='data' (at pp.c:24901)
          If:  (at pp.c:24902)
            BinaryOp: op='>=' (at pp.c:24902)
              ID: name='Msp430UartP__0__m_rx_pos' (at pp.c:24902)
              ID: name='Msp430UartP__0__m_rx_len' (at pp.c:24902)
            Compound:  (at pp.c:24902)
              Decl: name='buf', quals=[], storage=[] (at pp.c:24903)
                PtrDecl: quals=[] (at pp.c:24903)
                  TypeDecl: declname='buf', quals=[] (at pp.c:24903)
                    IdentifierType: names=['uint8_t'] (at None)
                ID: name='Msp430UartP__0__m_rx_buf' (at pp.c:24903)
              Assignment: op='=' (at pp.c:24906)
                ID: name='Msp430UartP__0__m_rx_buf' (at pp.c:24906)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:24906)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['void'] (at None)
                  Constant: type='int', value='0' (at pp.c:24906)
              FuncCall:  (at None)
                ID: name='Msp430UartP__0__UartStream__receiveDone' (at pp.c:24907)
                ExprList:  (at pp.c:24907)
                  ID: name='id' (at pp.c:24907)
                  ID: name='buf' (at pp.c:24907)
                  ID: name='Msp430UartP__0__m_rx_len' (at pp.c:24907)
                  ID: name='SUCCESS' (at pp.c:24907)
        Compound:  (at pp.c:24912)
          FuncCall:  (at None)
            ID: name='Msp430UartP__0__UartStream__receivedByte' (at pp.c:24913)
            ExprList:  (at pp.c:24913)
              ID: name='id' (at pp.c:24913)
              ID: name='data' (at pp.c:24913)
  FuncDef:  (at pp.c:24918)
    Decl: name='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:24918)
      FuncDecl: quals=None (at pp.c:24918)
        ParamList:  (at pp.c:24918)
          Decl: name='id', quals=[], storage=[] (at pp.c:24918)
            TypeDecl: declname='id', quals=[] (at pp.c:24918)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:24918)
            TypeDecl: declname='data', quals=[] (at pp.c:24918)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[] (at pp.c:24918)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24920)
  FuncDef:  (at pp.c:24924)
    Decl: name='Msp430UsartShareP__0__Interrupts__rxDone', quals=[], storage=['static', 'inline'] (at pp.c:24924)
      FuncDecl: quals=None (at pp.c:24924)
        ParamList:  (at pp.c:24924)
          Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:24924)
            TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:24924)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:24924)
            TypeDecl: declname='data', quals=[] (at pp.c:24924)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__Interrupts__rxDone', quals=[] (at pp.c:24924)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24924)
      Switch:  (at pp.c:24926)
        ID: name='arg_0x101d3f220' (at pp.c:24926)
        Compound:  (at pp.c:24926)
          Case:  (at pp.c:24928)
            ID: name='Msp430Usart1C__0__CLIENT_ID' (at pp.c:24928)
            FuncCall:  (at None)
              ID: name='Msp430UartP__0__UsartInterrupts__rxDone' (at pp.c:24930)
              ExprList:  (at pp.c:24930)
                ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:24930)
                ID: name='data' (at pp.c:24930)
          Break:  (at pp.c:24932)
          Default:  (at pp.c:24934)
            FuncCall:  (at None)
              ID: name='Msp430UsartShareP__0__Interrupts__default__rxDone' (at pp.c:24936)
              ExprList:  (at pp.c:24936)
                ID: name='arg_0x101d3f220' (at pp.c:24936)
                ID: name='data' (at pp.c:24936)
          Break:  (at pp.c:24938)
  FuncDef:  (at pp.c:24945)
    Decl: name='Msp430UsartShareP__0__ArbiterInfo__inUse', quals=[], storage=['static', 'inline'] (at pp.c:24945)
      FuncDecl: quals=None (at pp.c:24945)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__ArbiterInfo__inUse', quals=[] (at pp.c:24945)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:24945)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24947)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24947)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24951)
        ID: name='__nesc_result' (at pp.c:24951)
        FuncCall:  (at None)
          ID: name='ArbiterP__0__ArbiterInfo__inUse' (at pp.c:24951)
      Return:  (at pp.c:24955)
        ID: name='__nesc_result' (at pp.c:24955)
  FuncDef:  (at pp.c:24960)
    Decl: name='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:24960)
      FuncDecl: quals=None (at pp.c:24960)
        ParamList:  (at pp.c:24960)
          Decl: name='data', quals=[], storage=[] (at pp.c:24960)
            TypeDecl: declname='data', quals=[] (at pp.c:24960)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[] (at pp.c:24960)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24962)
      If:  (at pp.c:24963)
        FuncCall:  (at None)
          ID: name='Msp430UsartShareP__0__ArbiterInfo__inUse' (at pp.c:24963)
        Compound:  (at pp.c:24963)
          FuncCall:  (at None)
            ID: name='Msp430UsartShareP__0__Interrupts__rxDone' (at pp.c:24964)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430UsartShareP__0__ArbiterInfo__userId' (at pp.c:24964)
              ID: name='data' (at pp.c:24964)
  FuncDef:  (at pp.c:24969)
    Decl: name='HplMsp430Usart1P__Interrupts__rxDone', quals=[], storage=['static', 'inline'] (at pp.c:24969)
      FuncDecl: quals=None (at pp.c:24969)
        ParamList:  (at pp.c:24969)
          Decl: name='data', quals=[], storage=[] (at pp.c:24969)
            TypeDecl: declname='data', quals=[] (at pp.c:24969)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Interrupts__rxDone', quals=[] (at pp.c:24969)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24969)
      FuncCall:  (at None)
        ID: name='Msp430UsartShareP__0__RawInterrupts__rxDone' (at pp.c:24971)
        ExprList:  (at pp.c:24971)
          ID: name='data' (at pp.c:24971)
  FuncDef:  (at pp.c:24976)
    Decl: name='SerialP__valid_rx_proto', quals=[], storage=['inline', 'static'] (at pp.c:24976)
      FuncDecl: quals=None (at pp.c:24976)
        ParamList:  (at pp.c:24976)
          Decl: name='proto', quals=[], storage=[] (at pp.c:24976)
            TypeDecl: declname='proto', quals=[] (at pp.c:24976)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialP__valid_rx_proto', quals=[] (at pp.c:24976)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:24978)
      Switch:  (at pp.c:24979)
        ID: name='proto' (at pp.c:24979)
        Compound:  (at pp.c:24979)
          Case:  (at pp.c:24980)
            ID: name='SERIAL_PROTO_PACKET_ACK' (at pp.c:24980)
            Return:  (at pp.c:24981)
              ID: name='TRUE' (at pp.c:24981)
          Case:  (at pp.c:24982)
            ID: name='SERIAL_PROTO_ACK' (at pp.c:24982)
            Case:  (at pp.c:24983)
              ID: name='SERIAL_PROTO_PACKET_NOACK' (at pp.c:24983)
              Default:  (at pp.c:24984)
                Return:  (at pp.c:24985)
                  ID: name='FALSE' (at pp.c:24985)
  FuncDef:  (at pp.c:24990)
    Decl: name='SerialDispatcherP__0__lockCurrentBuffer', quals=[], storage=['inline', 'static'] (at pp.c:24990)
      FuncDecl: quals=None (at pp.c:24990)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__lockCurrentBuffer', quals=[] (at pp.c:24990)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24992)
      If:  (at pp.c:24993)
        StructRef: type='.' (at pp.c:24993)
          ID: name='SerialDispatcherP__0__receiveState' (at pp.c:24993)
          ID: name='which' (at pp.c:24993)
        Compound:  (at pp.c:24993)
          Assignment: op='=' (at pp.c:24994)
            StructRef: type='.' (at pp.c:24994)
              ID: name='SerialDispatcherP__0__receiveState' (at pp.c:24994)
              ID: name='bufOneLocked' (at pp.c:24994)
            Constant: type='int', value='1' (at pp.c:24994)
        Compound:  (at pp.c:24996)
          Assignment: op='=' (at pp.c:24997)
            StructRef: type='.' (at pp.c:24997)
              ID: name='SerialDispatcherP__0__receiveState' (at pp.c:24997)
              ID: name='bufZeroLocked' (at pp.c:24997)
            Constant: type='int', value='1' (at pp.c:24997)
  FuncDef:  (at pp.c:25002)
    Decl: name='SerialDispatcherP__0__isCurrentBufferLocked', quals=[], storage=['inline', 'static'] (at pp.c:25002)
      FuncDecl: quals=None (at pp.c:25002)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__isCurrentBufferLocked', quals=[] (at pp.c:25002)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:25004)
      Return:  (at pp.c:25005)
        TernaryOp:  (at pp.c:25005)
          StructRef: type='.' (at pp.c:25005)
            ID: name='SerialDispatcherP__0__receiveState' (at pp.c:25005)
            ID: name='which' (at pp.c:25005)
          StructRef: type='.' (at pp.c:25005)
            ID: name='SerialDispatcherP__0__receiveState' (at pp.c:25005)
            ID: name='bufOneLocked' (at pp.c:25005)
          StructRef: type='.' (at pp.c:25005)
            ID: name='SerialDispatcherP__0__receiveState' (at pp.c:25005)
            ID: name='bufZeroLocked' (at pp.c:25005)
  FuncDef:  (at pp.c:25009)
    Decl: name='SerialDispatcherP__0__ReceiveBytePacket__startPacket', quals=[], storage=['inline', 'static'] (at pp.c:25009)
      FuncDecl: quals=None (at pp.c:25009)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__ReceiveBytePacket__startPacket', quals=[] (at pp.c:25009)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25011)
      Decl: name='result', quals=[], storage=[] (at pp.c:25012)
        TypeDecl: declname='result', quals=[] (at pp.c:25012)
          IdentifierType: names=['error_t'] (at None)
        ID: name='SUCCESS' (at pp.c:25012)
      Compound:  (at pp.c:25016)
        If:  (at pp.c:25017)
          UnaryOp: op='!' (at None)
            FuncCall:  (at None)
              ID: name='SerialDispatcherP__0__isCurrentBufferLocked' (at pp.c:25017)
          Compound:  (at pp.c:25017)
            FuncCall:  (at None)
              ID: name='SerialDispatcherP__0__lockCurrentBuffer' (at pp.c:25020)
            Assignment: op='=' (at pp.c:25021)
              StructRef: type='.' (at pp.c:25021)
                ID: name='SerialDispatcherP__0__receiveState' (at pp.c:25021)
                ID: name='state' (at pp.c:25021)
              ID: name='SerialDispatcherP__0__RECV_STATE_BEGIN' (at pp.c:25021)
            Assignment: op='=' (at pp.c:25022)
              ID: name='SerialDispatcherP__0__recvIndex' (at pp.c:25022)
              Constant: type='int', value='0' (at pp.c:25022)
            Assignment: op='=' (at pp.c:25023)
              ID: name='SerialDispatcherP__0__recvType' (at pp.c:25023)
              ID: name='TOS_SERIAL_UNKNOWN_ID' (at pp.c:25023)
          Compound:  (at pp.c:25025)
            Assignment: op='=' (at pp.c:25026)
              ID: name='result' (at pp.c:25026)
              ID: name='EBUSY' (at pp.c:25026)
      Return:  (at pp.c:25029)
        ID: name='result' (at pp.c:25029)
  FuncDef:  (at pp.c:25033)
    Decl: name='SerialP__ReceiveBytePacket__startPacket', quals=[], storage=['static', 'inline'] (at pp.c:25033)
      FuncDecl: quals=None (at pp.c:25033)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__ReceiveBytePacket__startPacket', quals=[] (at pp.c:25033)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25033)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:25035)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:25035)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:25039)
        ID: name='__nesc_result' (at pp.c:25039)
        FuncCall:  (at None)
          ID: name='SerialDispatcherP__0__ReceiveBytePacket__startPacket' (at pp.c:25039)
      Return:  (at pp.c:25043)
        ID: name='__nesc_result' (at pp.c:25043)
  FuncDef:  (at pp.c:25048)
    Decl: name='SerialP__rx_current_crc', quals=[], storage=['__inline', 'static'] (at pp.c:25048)
      FuncDecl: quals=None (at pp.c:25048)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__rx_current_crc', quals=[] (at pp.c:25048)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:25050)
      Decl: name='crc', quals=[], storage=[] (at pp.c:25051)
        TypeDecl: declname='crc', quals=[] (at pp.c:25051)
          IdentifierType: names=['uint16_t'] (at None)
      Decl: name='tmp', quals=[], storage=[] (at pp.c:25052)
        TypeDecl: declname='tmp', quals=[] (at pp.c:25052)
          IdentifierType: names=['uint8_t'] (at None)
        StructRef: type='.' (at pp.c:25052)
          ID: name='SerialP__rxBuf' (at pp.c:25052)
          ID: name='writePtr' (at pp.c:25052)
      Assignment: op='=' (at pp.c:25055)
        ID: name='tmp' (at pp.c:25055)
        TernaryOp:  (at pp.c:25055)
          BinaryOp: op='==' (at pp.c:25055)
            ID: name='tmp' (at pp.c:25055)
            Constant: type='int', value='0' (at pp.c:25055)
          ID: name='SerialP__RX_DATA_BUFFER_SIZE' (at pp.c:25055)
          BinaryOp: op='-' (at pp.c:25055)
            ID: name='tmp' (at pp.c:25055)
            Constant: type='int', value='1' (at pp.c:25055)
      Assignment: op='=' (at pp.c:25056)
        ID: name='crc' (at pp.c:25056)
        BinaryOp: op='&' (at pp.c:25056)
          ArrayRef:  (at pp.c:25056)
            StructRef: type='.' (at pp.c:25056)
              ID: name='SerialP__rxBuf' (at pp.c:25056)
              ID: name='buf' (at pp.c:25056)
            ID: name='tmp' (at pp.c:25056)
          Constant: type='int', value='0x00ff' (at pp.c:25056)
      Assignment: op='=' (at pp.c:25057)
        ID: name='crc' (at pp.c:25057)
        BinaryOp: op='&' (at pp.c:25057)
          BinaryOp: op='<<' (at pp.c:25057)
            ID: name='crc' (at pp.c:25057)
            Constant: type='int', value='8' (at pp.c:25057)
          Constant: type='int', value='0xFF00' (at pp.c:25057)
      Assignment: op='=' (at pp.c:25058)
        ID: name='tmp' (at pp.c:25058)
        TernaryOp:  (at pp.c:25058)
          BinaryOp: op='==' (at pp.c:25058)
            ID: name='tmp' (at pp.c:25058)
            Constant: type='int', value='0' (at pp.c:25058)
          ID: name='SerialP__RX_DATA_BUFFER_SIZE' (at pp.c:25058)
          BinaryOp: op='-' (at pp.c:25058)
            ID: name='tmp' (at pp.c:25058)
            Constant: type='int', value='1' (at pp.c:25058)
      Assignment: op='|=' (at pp.c:25059)
        ID: name='crc' (at pp.c:25059)
        BinaryOp: op='&' (at pp.c:25059)
          ArrayRef:  (at pp.c:25059)
            StructRef: type='.' (at pp.c:25059)
              ID: name='SerialP__rxBuf' (at pp.c:25059)
              ID: name='buf' (at pp.c:25059)
            ID: name='tmp' (at pp.c:25059)
          Constant: type='int', value='0x00FF' (at pp.c:25059)
      Return:  (at pp.c:25060)
        ID: name='crc' (at pp.c:25060)
  FuncDef:  (at pp.c:25064)
    Decl: name='SerialP__ReceiveBytePacket__endPacket', quals=[], storage=['static', 'inline'] (at pp.c:25064)
      FuncDecl: quals=None (at pp.c:25064)
        ParamList:  (at pp.c:25064)
          Decl: name='result', quals=[], storage=[] (at pp.c:25064)
            TypeDecl: declname='result', quals=[] (at pp.c:25064)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SerialP__ReceiveBytePacket__endPacket', quals=[] (at pp.c:25064)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25064)
      FuncCall:  (at None)
        ID: name='SerialDispatcherP__0__ReceiveBytePacket__endPacket' (at pp.c:25066)
        ExprList:  (at pp.c:25066)
          ID: name='result' (at pp.c:25066)
  FuncDef:  (at pp.c:25071)
    Decl: name='SerialDispatcherP__0__receiveBufferSwap', quals=[], storage=['inline', 'static'] (at pp.c:25071)
      FuncDecl: quals=None (at pp.c:25071)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__receiveBufferSwap', quals=[] (at pp.c:25071)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25073)
      Assignment: op='=' (at pp.c:25074)
        StructRef: type='.' (at pp.c:25074)
          ID: name='SerialDispatcherP__0__receiveState' (at pp.c:25074)
          ID: name='which' (at pp.c:25074)
        TernaryOp:  (at pp.c:25074)
          StructRef: type='.' (at pp.c:25074)
            ID: name='SerialDispatcherP__0__receiveState' (at pp.c:25074)
            ID: name='which' (at pp.c:25074)
          Constant: type='int', value='0' (at pp.c:25074)
          Constant: type='int', value='1' (at pp.c:25074)
      Assignment: op='=' (at pp.c:25075)
        ID: name='SerialDispatcherP__0__receiveBuffer' (at pp.c:25075)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:25075)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
          ArrayRef:  (at pp.c:25075)
            ID: name='SerialDispatcherP__0__messagePtrs' (at pp.c:25075)
            StructRef: type='.' (at pp.c:25075)
              ID: name='SerialDispatcherP__0__receiveState' (at pp.c:25075)
              ID: name='which' (at pp.c:25075)
  FuncDef:  (at pp.c:25079)
    Decl: name='SerialDispatcherP__0__receiveTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:25079)
      FuncDecl: quals=None (at pp.c:25079)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__receiveTask__postTask', quals=[] (at pp.c:25079)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25079)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:25081)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:25081)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:25085)
        ID: name='__nesc_result' (at pp.c:25085)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:25085)
          ExprList:  (at pp.c:25085)
            ID: name='SerialDispatcherP__0__receiveTask' (at pp.c:25085)
      Return:  (at pp.c:25089)
        ID: name='__nesc_result' (at pp.c:25089)
  FuncDef:  (at pp.c:25094)
    Decl: name='SerialP__ack_queue_is_full', quals=[], storage=['__inline', 'static'] (at pp.c:25094)
      FuncDecl: quals=None (at pp.c:25094)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__ack_queue_is_full', quals=[] (at pp.c:25094)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:25096)
      Decl: name='tmp', quals=[], storage=[] (at pp.c:25097)
        TypeDecl: declname='tmp', quals=[] (at pp.c:25097)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='tmp2', quals=[], storage=[] (at pp.c:25099)
        TypeDecl: declname='tmp2', quals=[] (at pp.c:25099)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:25103)
        Assignment: op='=' (at pp.c:25104)
          ID: name='tmp' (at pp.c:25104)
          StructRef: type='.' (at pp.c:25104)
            ID: name='SerialP__ackQ' (at pp.c:25104)
            ID: name='writePtr' (at pp.c:25104)
        Assignment: op='=' (at pp.c:25105)
          ID: name='tmp2' (at pp.c:25105)
          StructRef: type='.' (at pp.c:25105)
            ID: name='SerialP__ackQ' (at pp.c:25105)
            ID: name='readPtr' (at pp.c:25105)
      If:  (at pp.c:25107)
        BinaryOp: op='>' (at pp.c:25107)
          UnaryOp: op='++' (at pp.c:25107)
            ID: name='tmp' (at pp.c:25107)
          ID: name='SerialP__ACK_QUEUE_SIZE' (at pp.c:25107)
        Compound:  (at pp.c:25107)
          Assignment: op='=' (at pp.c:25109)
            ID: name='tmp' (at pp.c:25109)
            Constant: type='int', value='0' (at pp.c:25109)
      Return:  (at pp.c:25112)
        BinaryOp: op='==' (at pp.c:25112)
          ID: name='tmp' (at pp.c:25112)
          ID: name='tmp2' (at pp.c:25112)
  FuncDef:  (at pp.c:25121)
    Decl: name='SerialP__ack_queue_push', quals=[], storage=['__inline', 'static'] (at pp.c:25121)
      FuncDecl: quals=None (at pp.c:25121)
        ParamList:  (at pp.c:25121)
          Decl: name='token', quals=[], storage=[] (at pp.c:25121)
            TypeDecl: declname='token', quals=[] (at pp.c:25121)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialP__ack_queue_push', quals=[] (at pp.c:25121)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25123)
      If:  (at pp.c:25124)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='SerialP__ack_queue_is_full' (at pp.c:25124)
        Compound:  (at pp.c:25124)
          Compound:  (at pp.c:25127)
            Assignment: op='=' (at pp.c:25128)
              ArrayRef:  (at pp.c:25128)
                StructRef: type='.' (at pp.c:25128)
                  ID: name='SerialP__ackQ' (at pp.c:25128)
                  ID: name='buf' (at pp.c:25128)
                StructRef: type='.' (at pp.c:25128)
                  ID: name='SerialP__ackQ' (at pp.c:25128)
                  ID: name='writePtr' (at pp.c:25128)
              ID: name='token' (at pp.c:25128)
            If:  (at pp.c:25129)
              BinaryOp: op='>' (at pp.c:25129)
                UnaryOp: op='++' (at pp.c:25129)
                  StructRef: type='.' (at pp.c:25129)
                    ID: name='SerialP__ackQ' (at pp.c:25129)
                    ID: name='writePtr' (at pp.c:25129)
                ID: name='SerialP__ACK_QUEUE_SIZE' (at pp.c:25129)
              Compound:  (at pp.c:25129)
                Assignment: op='=' (at pp.c:25131)
                  StructRef: type='.' (at pp.c:25131)
                    ID: name='SerialP__ackQ' (at pp.c:25131)
                    ID: name='writePtr' (at pp.c:25131)
                  Constant: type='int', value='0' (at pp.c:25131)
          FuncCall:  (at None)
            ID: name='SerialP__MaybeScheduleTx' (at pp.c:25135)
  FuncDef:  (at pp.c:25140)
    Decl: name='HdlcTranslateC__SerialFrameComm__resetReceive', quals=[], storage=['inline', 'static'] (at pp.c:25140)
      FuncDecl: quals=None (at pp.c:25140)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HdlcTranslateC__SerialFrameComm__resetReceive', quals=[] (at pp.c:25140)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25142)
      Assignment: op='=' (at pp.c:25143)
        StructRef: type='.' (at pp.c:25143)
          ID: name='HdlcTranslateC__state' (at pp.c:25143)
          ID: name='receiveEscape' (at pp.c:25143)
        Constant: type='int', value='0' (at pp.c:25143)
  FuncDef:  (at pp.c:25147)
    Decl: name='SerialP__SerialFrameComm__resetReceive', quals=[], storage=['static', 'inline'] (at pp.c:25147)
      FuncDecl: quals=None (at pp.c:25147)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SerialFrameComm__resetReceive', quals=[] (at pp.c:25147)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25147)
      FuncCall:  (at None)
        ID: name='HdlcTranslateC__SerialFrameComm__resetReceive' (at pp.c:25149)
  FuncDef:  (at pp.c:25154)
    Decl: name='SerialDispatcherP__0__ReceiveBytePacket__byteReceived', quals=[], storage=['inline', 'static'] (at pp.c:25154)
      FuncDecl: quals=None (at pp.c:25154)
        ParamList:  (at pp.c:25154)
          Decl: name='b', quals=[], storage=[] (at pp.c:25154)
            TypeDecl: declname='b', quals=[] (at pp.c:25154)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__ReceiveBytePacket__byteReceived', quals=[] (at pp.c:25154)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25156)
      Compound:  (at pp.c:25159)
        Switch:  (at pp.c:25160)
          StructRef: type='.' (at pp.c:25160)
            ID: name='SerialDispatcherP__0__receiveState' (at pp.c:25160)
            ID: name='state' (at pp.c:25160)
          Compound:  (at pp.c:25160)
            Case:  (at pp.c:25161)
              ID: name='SerialDispatcherP__0__RECV_STATE_BEGIN' (at pp.c:25161)
              Assignment: op='=' (at pp.c:25162)
                StructRef: type='.' (at pp.c:25162)
                  ID: name='SerialDispatcherP__0__receiveState' (at pp.c:25162)
                  ID: name='state' (at pp.c:25162)
                ID: name='SerialDispatcherP__0__RECV_STATE_DATA' (at pp.c:25162)
            Assignment: op='=' (at pp.c:25163)
              ID: name='SerialDispatcherP__0__recvIndex' (at pp.c:25163)
              FuncCall:  (at None)
                ID: name='SerialDispatcherP__0__PacketInfo__offset' (at pp.c:25163)
                ExprList:  (at pp.c:25163)
                  ID: name='b' (at pp.c:25163)
            Assignment: op='=' (at pp.c:25164)
              ID: name='SerialDispatcherP__0__recvType' (at pp.c:25164)
              ID: name='b' (at pp.c:25164)
            Break:  (at pp.c:25165)
            Case:  (at pp.c:25167)
              ID: name='SerialDispatcherP__0__RECV_STATE_DATA' (at pp.c:25167)
              If:  (at pp.c:25168)
                BinaryOp: op='<' (at pp.c:25168)
                  ID: name='SerialDispatcherP__0__recvIndex' (at pp.c:25168)
                  UnaryOp: op='sizeof' (at pp.c:25168)
                    Typename: quals=[] (at None)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['message_t'] (at None)
                Compound:  (at pp.c:25168)
                  Assignment: op='=' (at pp.c:25169)
                    ArrayRef:  (at pp.c:25169)
                      ID: name='SerialDispatcherP__0__receiveBuffer' (at pp.c:25169)
                      ID: name='SerialDispatcherP__0__recvIndex' (at pp.c:25169)
                    ID: name='b' (at pp.c:25169)
                  UnaryOp: op='p++' (at pp.c:25170)
                    ID: name='SerialDispatcherP__0__recvIndex' (at pp.c:25170)
                Compound:  (at pp.c:25172)
            Break:  (at pp.c:25178)
            Case:  (at pp.c:25180)
              ID: name='SerialDispatcherP__0__RECV_STATE_IDLE' (at pp.c:25180)
              Default:  (at pp.c:25181)
  FuncDef:  (at pp.c:25189)
    Decl: name='SerialP__ReceiveBytePacket__byteReceived', quals=[], storage=['static', 'inline'] (at pp.c:25189)
      FuncDecl: quals=None (at pp.c:25189)
        ParamList:  (at pp.c:25189)
          Decl: name='data', quals=[], storage=[] (at pp.c:25189)
            TypeDecl: declname='data', quals=[] (at pp.c:25189)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialP__ReceiveBytePacket__byteReceived', quals=[] (at pp.c:25189)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25189)
      FuncCall:  (at None)
        ID: name='SerialDispatcherP__0__ReceiveBytePacket__byteReceived' (at pp.c:25191)
        ExprList:  (at pp.c:25191)
          ID: name='data' (at pp.c:25191)
  FuncDef:  (at pp.c:25196)
    Decl: name='SerialP__rx_buffer_top', quals=[], storage=['__inline', 'static'] (at pp.c:25196)
      FuncDecl: quals=None (at pp.c:25196)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__rx_buffer_top', quals=[] (at pp.c:25196)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:25198)
      Decl: name='tmp', quals=[], storage=[] (at pp.c:25199)
        TypeDecl: declname='tmp', quals=[] (at pp.c:25199)
          IdentifierType: names=['uint8_t'] (at None)
        ArrayRef:  (at pp.c:25199)
          StructRef: type='.' (at pp.c:25199)
            ID: name='SerialP__rxBuf' (at pp.c:25199)
            ID: name='buf' (at pp.c:25199)
          StructRef: type='.' (at pp.c:25199)
            ID: name='SerialP__rxBuf' (at pp.c:25199)
            ID: name='readPtr' (at pp.c:25199)
      Return:  (at pp.c:25202)
        ID: name='tmp' (at pp.c:25202)
  FuncDef:  (at pp.c:25206)
    Decl: name='SerialP__rx_buffer_pop', quals=[], storage=['__inline', 'static'] (at pp.c:25206)
      FuncDecl: quals=None (at pp.c:25206)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__rx_buffer_pop', quals=[] (at pp.c:25206)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:25208)
      Decl: name='tmp', quals=[], storage=[] (at pp.c:25209)
        TypeDecl: declname='tmp', quals=[] (at pp.c:25209)
          IdentifierType: names=['uint8_t'] (at None)
        ArrayRef:  (at pp.c:25209)
          StructRef: type='.' (at pp.c:25209)
            ID: name='SerialP__rxBuf' (at pp.c:25209)
            ID: name='buf' (at pp.c:25209)
          StructRef: type='.' (at pp.c:25209)
            ID: name='SerialP__rxBuf' (at pp.c:25209)
            ID: name='readPtr' (at pp.c:25209)
      If:  (at pp.c:25212)
        BinaryOp: op='>' (at pp.c:25212)
          UnaryOp: op='++' (at pp.c:25212)
            StructRef: type='.' (at pp.c:25212)
              ID: name='SerialP__rxBuf' (at pp.c:25212)
              ID: name='readPtr' (at pp.c:25212)
          ID: name='SerialP__RX_DATA_BUFFER_SIZE' (at pp.c:25212)
        Compound:  (at pp.c:25212)
          Assignment: op='=' (at pp.c:25214)
            StructRef: type='.' (at pp.c:25214)
              ID: name='SerialP__rxBuf' (at pp.c:25214)
              ID: name='readPtr' (at pp.c:25214)
            Constant: type='int', value='0' (at pp.c:25214)
      Return:  (at pp.c:25217)
        ID: name='tmp' (at pp.c:25217)
  FuncDef:  (at pp.c:25221)
    Decl: name='SerialP__rx_buffer_push', quals=[], storage=['__inline', 'static'] (at pp.c:25221)
      FuncDecl: quals=None (at pp.c:25221)
        ParamList:  (at pp.c:25221)
          Decl: name='data', quals=[], storage=[] (at pp.c:25221)
            TypeDecl: declname='data', quals=[] (at pp.c:25221)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialP__rx_buffer_push', quals=[] (at pp.c:25221)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25223)
      Assignment: op='=' (at pp.c:25224)
        ArrayRef:  (at pp.c:25224)
          StructRef: type='.' (at pp.c:25224)
            ID: name='SerialP__rxBuf' (at pp.c:25224)
            ID: name='buf' (at pp.c:25224)
          StructRef: type='.' (at pp.c:25224)
            ID: name='SerialP__rxBuf' (at pp.c:25224)
            ID: name='writePtr' (at pp.c:25224)
        ID: name='data' (at pp.c:25224)
      If:  (at pp.c:25225)
        BinaryOp: op='>' (at pp.c:25225)
          UnaryOp: op='++' (at pp.c:25225)
            StructRef: type='.' (at pp.c:25225)
              ID: name='SerialP__rxBuf' (at pp.c:25225)
              ID: name='writePtr' (at pp.c:25225)
          ID: name='SerialP__RX_DATA_BUFFER_SIZE' (at pp.c:25225)
        Compound:  (at pp.c:25225)
          Assignment: op='=' (at pp.c:25227)
            StructRef: type='.' (at pp.c:25227)
              ID: name='SerialP__rxBuf' (at pp.c:25227)
              ID: name='writePtr' (at pp.c:25227)
            Constant: type='int', value='0' (at pp.c:25227)
  FuncDef:  (at pp.c:25232)
    Decl: name='Msp430UartP__0__UartStream__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:25232)
      FuncDecl: quals=None (at pp.c:25232)
        ParamList:  (at pp.c:25232)
          Decl: name='id', quals=[], storage=[] (at pp.c:25232)
            TypeDecl: declname='id', quals=[] (at pp.c:25232)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:25232)
            PtrDecl: quals=[] (at pp.c:25232)
              TypeDecl: declname='buf', quals=[] (at pp.c:25232)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:25232)
            TypeDecl: declname='len', quals=[] (at pp.c:25232)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:25232)
            TypeDecl: declname='error', quals=[] (at pp.c:25232)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UartStream__default__sendDone', quals=[] (at pp.c:25232)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25234)
  FuncDef:  (at pp.c:25238)
    Decl: name='Msp430UartP__0__UartStream__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:25238)
      FuncDecl: quals=None (at pp.c:25238)
        ParamList:  (at pp.c:25238)
          Decl: name='arg_0x101bfd020', quals=[], storage=[] (at pp.c:25238)
            TypeDecl: declname='arg_0x101bfd020', quals=[] (at pp.c:25238)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:25238)
            PtrDecl: quals=[] (at pp.c:25238)
              TypeDecl: declname='buf', quals=[] (at pp.c:25238)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:25238)
            TypeDecl: declname='len', quals=[] (at pp.c:25238)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:25238)
            TypeDecl: declname='error', quals=[] (at pp.c:25238)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UartStream__sendDone', quals=[] (at pp.c:25238)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25238)
      Switch:  (at pp.c:25240)
        ID: name='arg_0x101bfd020' (at pp.c:25240)
        Compound:  (at pp.c:25240)
          Case:  (at pp.c:25242)
            ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:25242)
            FuncCall:  (at None)
              ID: name='HdlcTranslateC__UartStream__sendDone' (at pp.c:25244)
              ExprList:  (at pp.c:25244)
                ID: name='buf' (at pp.c:25244)
                ID: name='len' (at pp.c:25244)
                ID: name='error' (at pp.c:25244)
          Break:  (at pp.c:25246)
          Default:  (at pp.c:25248)
            FuncCall:  (at None)
              ID: name='Msp430UartP__0__UartStream__default__sendDone' (at pp.c:25250)
              ExprList:  (at pp.c:25250)
                ID: name='arg_0x101bfd020' (at pp.c:25250)
                ID: name='buf' (at pp.c:25250)
                ID: name='len' (at pp.c:25250)
                ID: name='error' (at pp.c:25250)
          Break:  (at pp.c:25252)
  FuncDef:  (at pp.c:25259)
    Decl: name='HplMsp430Usart1P__Usart__tx', quals=[], storage=['inline', 'static'] (at pp.c:25259)
      FuncDecl: quals=None (at pp.c:25259)
        ParamList:  (at pp.c:25259)
          Decl: name='data', quals=[], storage=[] (at pp.c:25259)
            TypeDecl: declname='data', quals=[] (at pp.c:25259)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__tx', quals=[] (at pp.c:25259)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25261)
      Assignment: op='=' (at pp.c:25262)
        ID: name='HplMsp430Usart1P__U1TXBUF' (at pp.c:25262)
        ID: name='data' (at pp.c:25262)
  FuncDef:  (at pp.c:25266)
    Decl: name='Msp430UartP__0__Usart__tx', quals=[], storage=['static', 'inline'] (at pp.c:25266)
      FuncDecl: quals=None (at pp.c:25266)
        ParamList:  (at pp.c:25266)
          Decl: name='data', quals=[], storage=[] (at pp.c:25266)
            TypeDecl: declname='data', quals=[] (at pp.c:25266)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__Usart__tx', quals=[] (at pp.c:25266)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25266)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Usart__tx' (at pp.c:25268)
        ExprList:  (at pp.c:25268)
          ID: name='data' (at pp.c:25268)
  FuncDef:  (at pp.c:25273)
    Decl: name='Msp430UartP__0__UsartInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:25273)
      FuncDecl: quals=None (at pp.c:25273)
        ParamList:  (at pp.c:25273)
          Decl: name='id', quals=[], storage=[] (at pp.c:25273)
            TypeDecl: declname='id', quals=[] (at pp.c:25273)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UsartInterrupts__txDone', quals=[] (at pp.c:25273)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25275)
      If:  (at pp.c:25276)
        BinaryOp: op='!=' (at pp.c:25276)
          ID: name='Msp430UartP__0__current_owner' (at pp.c:25276)
          ID: name='id' (at pp.c:25276)
        Compound:  (at pp.c:25276)
          Decl: name='buf', quals=[], storage=[] (at pp.c:25277)
            PtrDecl: quals=[] (at pp.c:25277)
              TypeDecl: declname='buf', quals=[] (at pp.c:25277)
                IdentifierType: names=['uint8_t'] (at None)
            ID: name='Msp430UartP__0__m_tx_buf' (at pp.c:25277)
          Assignment: op='=' (at pp.c:25280)
            ID: name='Msp430UartP__0__m_tx_buf' (at pp.c:25280)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:25280)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['void'] (at None)
              Constant: type='int', value='0' (at pp.c:25280)
          FuncCall:  (at None)
            ID: name='Msp430UartP__0__UartStream__sendDone' (at pp.c:25281)
            ExprList:  (at pp.c:25281)
              ID: name='id' (at pp.c:25281)
              ID: name='buf' (at pp.c:25281)
              ID: name='Msp430UartP__0__m_tx_len' (at pp.c:25281)
              ID: name='FAIL' (at pp.c:25281)
        Compound:  (at pp.c:25283)
          If:  (at pp.c:25285)
            BinaryOp: op='<' (at pp.c:25285)
              ID: name='Msp430UartP__0__m_tx_pos' (at pp.c:25285)
              ID: name='Msp430UartP__0__m_tx_len' (at pp.c:25285)
            Compound:  (at pp.c:25285)
              FuncCall:  (at None)
                ID: name='Msp430UartP__0__Usart__tx' (at pp.c:25286)
                ExprList:  (at pp.c:25286)
                  ArrayRef:  (at pp.c:25286)
                    ID: name='Msp430UartP__0__m_tx_buf' (at pp.c:25286)
                    UnaryOp: op='p++' (at pp.c:25286)
                      ID: name='Msp430UartP__0__m_tx_pos' (at pp.c:25286)
            Compound:  (at pp.c:25288)
              Decl: name='buf', quals=[], storage=[] (at pp.c:25289)
                PtrDecl: quals=[] (at pp.c:25289)
                  TypeDecl: declname='buf', quals=[] (at pp.c:25289)
                    IdentifierType: names=['uint8_t'] (at None)
                ID: name='Msp430UartP__0__m_tx_buf' (at pp.c:25289)
              Assignment: op='=' (at pp.c:25292)
                ID: name='Msp430UartP__0__m_tx_buf' (at pp.c:25292)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:25292)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['void'] (at None)
                  Constant: type='int', value='0' (at pp.c:25292)
              FuncCall:  (at None)
                ID: name='Msp430UartP__0__UartStream__sendDone' (at pp.c:25293)
                ExprList:  (at pp.c:25293)
                  ID: name='id' (at pp.c:25293)
                  ID: name='buf' (at pp.c:25293)
                  ID: name='Msp430UartP__0__m_tx_len' (at pp.c:25293)
                  ID: name='SUCCESS' (at pp.c:25293)
  FuncDef:  (at pp.c:25299)
    Decl: name='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[], storage=['inline', 'static'] (at pp.c:25299)
      FuncDecl: quals=None (at pp.c:25299)
        ParamList:  (at pp.c:25299)
          Decl: name='id', quals=[], storage=[] (at pp.c:25299)
            TypeDecl: declname='id', quals=[] (at pp.c:25299)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[] (at pp.c:25299)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25301)
  FuncDef:  (at pp.c:25305)
    Decl: name='Msp430UsartShareP__0__Interrupts__txDone', quals=[], storage=['static', 'inline'] (at pp.c:25305)
      FuncDecl: quals=None (at pp.c:25305)
        ParamList:  (at pp.c:25305)
          Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:25305)
            TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:25305)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__Interrupts__txDone', quals=[] (at pp.c:25305)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25305)
      Switch:  (at pp.c:25307)
        ID: name='arg_0x101d3f220' (at pp.c:25307)
        Compound:  (at pp.c:25307)
          Case:  (at pp.c:25309)
            ID: name='Msp430Usart1C__0__CLIENT_ID' (at pp.c:25309)
            FuncCall:  (at None)
              ID: name='Msp430UartP__0__UsartInterrupts__txDone' (at pp.c:25311)
              ExprList:  (at pp.c:25311)
                ID: name='Msp430Uart1C__0__CLIENT_ID' (at pp.c:25311)
          Break:  (at pp.c:25313)
          Default:  (at pp.c:25315)
            FuncCall:  (at None)
              ID: name='Msp430UsartShareP__0__Interrupts__default__txDone' (at pp.c:25317)
              ExprList:  (at pp.c:25317)
                ID: name='arg_0x101d3f220' (at pp.c:25317)
          Break:  (at pp.c:25319)
  FuncDef:  (at pp.c:25326)
    Decl: name='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:25326)
      FuncDecl: quals=None (at pp.c:25326)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[] (at pp.c:25326)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25328)
      If:  (at pp.c:25329)
        FuncCall:  (at None)
          ID: name='Msp430UsartShareP__0__ArbiterInfo__inUse' (at pp.c:25329)
        Compound:  (at pp.c:25329)
          FuncCall:  (at None)
            ID: name='Msp430UsartShareP__0__Interrupts__txDone' (at pp.c:25330)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430UsartShareP__0__ArbiterInfo__userId' (at pp.c:25330)
  FuncDef:  (at pp.c:25335)
    Decl: name='HplMsp430Usart1P__Interrupts__txDone', quals=[], storage=['static', 'inline'] (at pp.c:25335)
      FuncDecl: quals=None (at pp.c:25335)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Interrupts__txDone', quals=[] (at pp.c:25335)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25335)
      FuncCall:  (at None)
        ID: name='Msp430UsartShareP__0__RawInterrupts__txDone' (at pp.c:25337)
  FuncDef:  (at pp.c:25342)
    Decl: name='SerialP__SerialFrameComm__putData', quals=[], storage=['static', 'inline'] (at pp.c:25342)
      FuncDecl: quals=None (at pp.c:25342)
        ParamList:  (at pp.c:25342)
          Decl: name='data', quals=[], storage=[] (at pp.c:25342)
            TypeDecl: declname='data', quals=[] (at pp.c:25342)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialP__SerialFrameComm__putData', quals=[] (at pp.c:25342)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25342)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:25344)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:25344)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:25348)
        ID: name='__nesc_result' (at pp.c:25348)
        FuncCall:  (at None)
          ID: name='HdlcTranslateC__SerialFrameComm__putData' (at pp.c:25348)
          ExprList:  (at pp.c:25348)
            ID: name='data' (at pp.c:25348)
      Return:  (at pp.c:25352)
        ID: name='__nesc_result' (at pp.c:25352)
  FuncDef:  (at pp.c:25357)
    Decl: name='SerialP__SendBytePacket__completeSend', quals=[], storage=['inline', 'static'] (at pp.c:25357)
      FuncDecl: quals=None (at pp.c:25357)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SendBytePacket__completeSend', quals=[] (at pp.c:25357)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25359)
      Decl: name='ret', quals=[], storage=[] (at pp.c:25360)
        TypeDecl: declname='ret', quals=[] (at pp.c:25360)
          IdentifierType: names=['bool'] (at None)
        ID: name='FAIL' (at pp.c:25360)
      Compound:  (at pp.c:25364)
        Assignment: op='=' (at pp.c:25365)
          StructRef: type='.' (at pp.c:25365)
            ArrayRef:  (at pp.c:25365)
              ID: name='SerialP__txBuf' (at pp.c:25365)
              ID: name='SerialP__TX_DATA_INDEX' (at pp.c:25365)
            ID: name='state' (at pp.c:25365)
          ID: name='SerialP__BUFFER_COMPLETE' (at pp.c:25365)
        Assignment: op='=' (at pp.c:25366)
          ID: name='ret' (at pp.c:25366)
          ID: name='SUCCESS' (at pp.c:25366)
      Return:  (at pp.c:25368)
        ID: name='ret' (at pp.c:25368)
  FuncDef:  (at pp.c:25372)
    Decl: name='SerialDispatcherP__0__SendBytePacket__completeSend', quals=[], storage=['static', 'inline'] (at pp.c:25372)
      FuncDecl: quals=None (at pp.c:25372)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__SendBytePacket__completeSend', quals=[] (at pp.c:25372)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25372)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:25374)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:25374)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:25378)
        ID: name='__nesc_result' (at pp.c:25378)
        FuncCall:  (at None)
          ID: name='SerialP__SendBytePacket__completeSend' (at pp.c:25378)
      Return:  (at pp.c:25382)
        ID: name='__nesc_result' (at pp.c:25382)
  FuncDef:  (at pp.c:25387)
    Decl: name='SerialDispatcherP__0__SendBytePacket__nextByte', quals=[], storage=['inline', 'static'] (at pp.c:25387)
      FuncDecl: quals=None (at pp.c:25387)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__SendBytePacket__nextByte', quals=[] (at pp.c:25387)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:25389)
      Decl: name='b', quals=[], storage=[] (at pp.c:25390)
        TypeDecl: declname='b', quals=[] (at pp.c:25390)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='indx', quals=[], storage=[] (at pp.c:25391)
        TypeDecl: declname='indx', quals=[] (at pp.c:25391)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:25395)
        Assignment: op='=' (at pp.c:25396)
          ID: name='b' (at pp.c:25396)
          ArrayRef:  (at pp.c:25396)
            ID: name='SerialDispatcherP__0__sendBuffer' (at pp.c:25396)
            ID: name='SerialDispatcherP__0__sendIndex' (at pp.c:25396)
        UnaryOp: op='p++' (at pp.c:25397)
          ID: name='SerialDispatcherP__0__sendIndex' (at pp.c:25397)
        Assignment: op='=' (at pp.c:25398)
          ID: name='indx' (at pp.c:25398)
          ID: name='SerialDispatcherP__0__sendIndex' (at pp.c:25398)
      If:  (at pp.c:25400)
        BinaryOp: op='>' (at pp.c:25400)
          ID: name='indx' (at pp.c:25400)
          ID: name='SerialDispatcherP__0__sendLen' (at pp.c:25400)
        Compound:  (at pp.c:25400)
          FuncCall:  (at None)
            ID: name='SerialDispatcherP__0__SendBytePacket__completeSend' (at pp.c:25401)
          Return:  (at pp.c:25402)
            Constant: type='int', value='0' (at pp.c:25402)
        Compound:  (at pp.c:25404)
          Return:  (at pp.c:25405)
            ID: name='b' (at pp.c:25405)
  FuncDef:  (at pp.c:25410)
    Decl: name='SerialP__SendBytePacket__nextByte', quals=[], storage=['static', 'inline'] (at pp.c:25410)
      FuncDecl: quals=None (at pp.c:25410)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SendBytePacket__nextByte', quals=[] (at pp.c:25410)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:25410)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:25412)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:25412)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:25416)
        ID: name='__nesc_result' (at pp.c:25416)
        FuncCall:  (at None)
          ID: name='SerialDispatcherP__0__SendBytePacket__nextByte' (at pp.c:25416)
      Return:  (at pp.c:25420)
        ID: name='__nesc_result' (at pp.c:25420)
  FuncDef:  (at pp.c:25425)
    Decl: name='SerialP__SerialFrameComm__putDone', quals=[], storage=['inline', 'static'] (at pp.c:25425)
      FuncDecl: quals=None (at pp.c:25425)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__SerialFrameComm__putDone', quals=[] (at pp.c:25425)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25427)
      Compound:  (at pp.c:25428)
        Decl: name='txResult', quals=[], storage=[] (at pp.c:25429)
          TypeDecl: declname='txResult', quals=[] (at pp.c:25429)
            IdentifierType: names=['error_t'] (at None)
          ID: name='SUCCESS' (at pp.c:25429)
        Compound:  (at pp.c:25433)
          Switch:  (at pp.c:25434)
            ID: name='SerialP__txState' (at pp.c:25434)
            Compound:  (at pp.c:25434)
              Case:  (at pp.c:25436)
                ID: name='SerialP__TXSTATE_PROTO' (at pp.c:25436)
                Assignment: op='=' (at pp.c:25438)
                  ID: name='txResult' (at pp.c:25438)
                  FuncCall:  (at None)
                    ID: name='SerialP__SerialFrameComm__putData' (at pp.c:25438)
                    ExprList:  (at pp.c:25438)
                      ID: name='SerialP__txProto' (at pp.c:25438)
              Assignment: op='=' (at pp.c:25440)
                ID: name='SerialP__txState' (at pp.c:25440)
                ID: name='SerialP__TXSTATE_INFO' (at pp.c:25440)
              Assignment: op='=' (at pp.c:25444)
                ID: name='SerialP__txCRC' (at pp.c:25444)
                FuncCall:  (at None)
                  ID: name='crcByte' (at pp.c:25444)
                  ExprList:  (at pp.c:25444)
                    ID: name='SerialP__txCRC' (at pp.c:25444)
                    ID: name='SerialP__txProto' (at pp.c:25444)
              Break:  (at pp.c:25445)
              Case:  (at pp.c:25447)
                ID: name='SerialP__TXSTATE_SEQNO' (at pp.c:25447)
                Assignment: op='=' (at pp.c:25448)
                  ID: name='txResult' (at pp.c:25448)
                  FuncCall:  (at None)
                    ID: name='SerialP__SerialFrameComm__putData' (at pp.c:25448)
                    ExprList:  (at pp.c:25448)
                      ID: name='SerialP__txSeqno' (at pp.c:25448)
              Assignment: op='=' (at pp.c:25449)
                ID: name='SerialP__txState' (at pp.c:25449)
                ID: name='SerialP__TXSTATE_INFO' (at pp.c:25449)
              Assignment: op='=' (at pp.c:25450)
                ID: name='SerialP__txCRC' (at pp.c:25450)
                FuncCall:  (at None)
                  ID: name='crcByte' (at pp.c:25450)
                  ExprList:  (at pp.c:25450)
                    ID: name='SerialP__txCRC' (at pp.c:25450)
                    ID: name='SerialP__txSeqno' (at pp.c:25450)
              Break:  (at pp.c:25451)
              Case:  (at pp.c:25453)
                ID: name='SerialP__TXSTATE_INFO' (at pp.c:25453)
                Compound:  (at pp.c:25454)
                  Assignment: op='=' (at pp.c:25455)
                    ID: name='txResult' (at pp.c:25455)
                    FuncCall:  (at None)
                      ID: name='SerialP__SerialFrameComm__putData' (at pp.c:25455)
                      ExprList:  (at pp.c:25455)
                        StructRef: type='.' (at pp.c:25455)
                          ArrayRef:  (at pp.c:25455)
                            ID: name='SerialP__txBuf' (at pp.c:25455)
                            ID: name='SerialP__txIndex' (at pp.c:25455)
                          ID: name='buf' (at pp.c:25455)
                  Assignment: op='=' (at pp.c:25456)
                    ID: name='SerialP__txCRC' (at pp.c:25456)
                    FuncCall:  (at None)
                      ID: name='crcByte' (at pp.c:25456)
                      ExprList:  (at pp.c:25456)
                        ID: name='SerialP__txCRC' (at pp.c:25456)
                        StructRef: type='.' (at pp.c:25456)
                          ArrayRef:  (at pp.c:25456)
                            ID: name='SerialP__txBuf' (at pp.c:25456)
                            ID: name='SerialP__txIndex' (at pp.c:25456)
                          ID: name='buf' (at pp.c:25456)
                  UnaryOp: op='++' (at pp.c:25457)
                    ID: name='SerialP__txByteCnt' (at pp.c:25457)
                  If:  (at pp.c:25459)
                    BinaryOp: op='==' (at pp.c:25459)
                      ID: name='SerialP__txIndex' (at pp.c:25459)
                      ID: name='SerialP__TX_DATA_INDEX' (at pp.c:25459)
                    Compound:  (at pp.c:25459)
                      Decl: name='nextByte', quals=[], storage=[] (at pp.c:25460)
                        TypeDecl: declname='nextByte', quals=[] (at pp.c:25460)
                          IdentifierType: names=['uint8_t'] (at None)
                      Assignment: op='=' (at pp.c:25463)
                        ID: name='nextByte' (at pp.c:25463)
                        FuncCall:  (at None)
                          ID: name='SerialP__SendBytePacket__nextByte' (at pp.c:25463)
                      If:  (at pp.c:25464)
                        BinaryOp: op='||' (at pp.c:25464)
                          BinaryOp: op='==' (at pp.c:25464)
                            StructRef: type='.' (at pp.c:25464)
                              ArrayRef:  (at pp.c:25464)
                                ID: name='SerialP__txBuf' (at pp.c:25464)
                                ID: name='SerialP__txIndex' (at pp.c:25464)
                              ID: name='state' (at pp.c:25464)
                            ID: name='SerialP__BUFFER_COMPLETE' (at pp.c:25464)
                          BinaryOp: op='>=' (at pp.c:25464)
                            ID: name='SerialP__txByteCnt' (at pp.c:25464)
                            ID: name='SerialP__SERIAL_MTU' (at pp.c:25464)
                        Compound:  (at pp.c:25464)
                          Assignment: op='=' (at pp.c:25465)
                            ID: name='SerialP__txState' (at pp.c:25465)
                            ID: name='SerialP__TXSTATE_FCS1' (at pp.c:25465)
                        Compound:  (at pp.c:25467)
                          Assignment: op='=' (at pp.c:25468)
                            StructRef: type='.' (at pp.c:25468)
                              ArrayRef:  (at pp.c:25468)
                                ID: name='SerialP__txBuf' (at pp.c:25468)
                                ID: name='SerialP__txIndex' (at pp.c:25468)
                              ID: name='buf' (at pp.c:25468)
                            ID: name='nextByte' (at pp.c:25468)
                    Compound:  (at pp.c:25471)
                      Assignment: op='=' (at pp.c:25472)
                        ID: name='SerialP__txState' (at pp.c:25472)
                        ID: name='SerialP__TXSTATE_FCS1' (at pp.c:25472)
              Break:  (at pp.c:25475)
              Case:  (at pp.c:25477)
                ID: name='SerialP__TXSTATE_FCS1' (at pp.c:25477)
                Assignment: op='=' (at pp.c:25478)
                  ID: name='txResult' (at pp.c:25478)
                  FuncCall:  (at None)
                    ID: name='SerialP__SerialFrameComm__putData' (at pp.c:25478)
                    ExprList:  (at pp.c:25478)
                      BinaryOp: op='&' (at pp.c:25478)
                        ID: name='SerialP__txCRC' (at pp.c:25478)
                        Constant: type='int', value='0xff' (at pp.c:25478)
              Assignment: op='=' (at pp.c:25479)
                ID: name='SerialP__txState' (at pp.c:25479)
                ID: name='SerialP__TXSTATE_FCS2' (at pp.c:25479)
              Break:  (at pp.c:25480)
              Case:  (at pp.c:25482)
                ID: name='SerialP__TXSTATE_FCS2' (at pp.c:25482)
                Assignment: op='=' (at pp.c:25483)
                  ID: name='txResult' (at pp.c:25483)
                  FuncCall:  (at None)
                    ID: name='SerialP__SerialFrameComm__putData' (at pp.c:25483)
                    ExprList:  (at pp.c:25483)
                      BinaryOp: op='&' (at pp.c:25483)
                        BinaryOp: op='>>' (at pp.c:25483)
                          ID: name='SerialP__txCRC' (at pp.c:25483)
                          Constant: type='int', value='8' (at pp.c:25483)
                        Constant: type='int', value='0xff' (at pp.c:25483)
              Assignment: op='=' (at pp.c:25484)
                ID: name='SerialP__txState' (at pp.c:25484)
                ID: name='SerialP__TXSTATE_ENDFLAG' (at pp.c:25484)
              Break:  (at pp.c:25485)
              Case:  (at pp.c:25487)
                ID: name='SerialP__TXSTATE_ENDFLAG' (at pp.c:25487)
                Assignment: op='=' (at pp.c:25488)
                  ID: name='txResult' (at pp.c:25488)
                  FuncCall:  (at None)
                    ID: name='SerialP__SerialFrameComm__putDelimiter' (at pp.c:25488)
              Assignment: op='=' (at pp.c:25489)
                ID: name='SerialP__txState' (at pp.c:25489)
                ID: name='SerialP__TXSTATE_ENDWAIT' (at pp.c:25489)
              Break:  (at pp.c:25490)
              Case:  (at pp.c:25492)
                ID: name='SerialP__TXSTATE_ENDWAIT' (at pp.c:25492)
                Assignment: op='=' (at pp.c:25493)
                  ID: name='SerialP__txState' (at pp.c:25493)
                  ID: name='SerialP__TXSTATE_FINISH' (at pp.c:25493)
              Case:  (at pp.c:25494)
                ID: name='SerialP__TXSTATE_FINISH' (at pp.c:25494)
                FuncCall:  (at None)
                  ID: name='SerialP__MaybeScheduleTx' (at pp.c:25495)
              Break:  (at pp.c:25496)
              Case:  (at pp.c:25497)
                ID: name='SerialP__TXSTATE_ERROR' (at pp.c:25497)
                Default:  (at pp.c:25498)
                  Assignment: op='=' (at pp.c:25499)
                    ID: name='txResult' (at pp.c:25499)
                    ID: name='FAIL' (at pp.c:25499)
              Break:  (at pp.c:25500)
          If:  (at pp.c:25503)
            BinaryOp: op='!=' (at pp.c:25503)
              ID: name='txResult' (at pp.c:25503)
              ID: name='SUCCESS' (at pp.c:25503)
            Compound:  (at pp.c:25503)
              Assignment: op='=' (at pp.c:25504)
                ID: name='SerialP__txState' (at pp.c:25504)
                ID: name='SerialP__TXSTATE_ERROR' (at pp.c:25504)
              FuncCall:  (at None)
                ID: name='SerialP__MaybeScheduleTx' (at pp.c:25505)
  FuncDef:  (at pp.c:25512)
    Decl: name='HdlcTranslateC__SerialFrameComm__putDone', quals=[], storage=['static', 'inline'] (at pp.c:25512)
      FuncDecl: quals=None (at pp.c:25512)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HdlcTranslateC__SerialFrameComm__putDone', quals=[] (at pp.c:25512)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25512)
      FuncCall:  (at None)
        ID: name='SerialP__SerialFrameComm__putDone' (at pp.c:25514)
  FuncDef:  (at pp.c:25519)
    Decl: name='CC2420ReceiveP__InterruptFIFOP__fired', quals=[], storage=['inline', 'static'] (at pp.c:25519)
      FuncDecl: quals=None (at pp.c:25519)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__fired', quals=[] (at pp.c:25519)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25521)
      If:  (at pp.c:25522)
        BinaryOp: op='==' (at pp.c:25522)
          ID: name='CC2420ReceiveP__m_state' (at pp.c:25522)
          ID: name='CC2420ReceiveP__S_STARTED' (at pp.c:25522)
        Compound:  (at pp.c:25522)
          Assignment: op='=' (at pp.c:25524)
            ID: name='CC2420ReceiveP__m_state' (at pp.c:25524)
            ID: name='CC2420ReceiveP__S_RX_LENGTH' (at pp.c:25524)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__beginReceive' (at pp.c:25525)
        Compound:  (at pp.c:25531)
          UnaryOp: op='p++' (at pp.c:25532)
            ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:25532)
  FuncDef:  (at pp.c:25537)
    Decl: name='Msp430InterruptC__1__Interrupt__fired', quals=[], storage=['static', 'inline'] (at pp.c:25537)
      FuncDecl: quals=None (at pp.c:25537)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__Interrupt__fired', quals=[] (at pp.c:25537)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25537)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__InterruptFIFOP__fired' (at pp.c:25539)
  FuncDef:  (at pp.c:25544)
    Decl: name='Msp430InterruptC__1__HplInterrupt__fired', quals=[], storage=['inline', 'static'] (at pp.c:25544)
      FuncDecl: quals=None (at pp.c:25544)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__fired', quals=[] (at pp.c:25544)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25546)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__1__HplInterrupt__clear' (at pp.c:25547)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__1__Interrupt__fired' (at pp.c:25548)
  FuncDef:  (at pp.c:25552)
    Decl: name='HplMsp430InterruptP__Port10__fired', quals=[], storage=['static', 'inline'] (at pp.c:25552)
      FuncDecl: quals=None (at pp.c:25552)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port10__fired', quals=[] (at pp.c:25552)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25552)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__1__HplInterrupt__fired' (at pp.c:25554)
  FuncDef:  (at pp.c:25559)
    Decl: name='HplMsp430InterruptP__Port11__clear', quals=[], storage=['inline', 'static'] (at pp.c:25559)
      FuncDecl: quals=None (at pp.c:25559)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port11__clear', quals=[] (at pp.c:25559)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25561)
      Assignment: op='&=' (at pp.c:25563)
        ID: name='P1IFG' (at pp.c:25563)
        UnaryOp: op='~' (at pp.c:25563)
          BinaryOp: op='<<' (at pp.c:25563)
            Constant: type='int', value='1' (at pp.c:25563)
            Constant: type='int', value='1' (at pp.c:25563)
  FuncDef:  (at pp.c:25567)
    Decl: name='HplMsp430InterruptP__Port11__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25567)
      FuncDecl: quals=None (at pp.c:25567)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port11__default__fired', quals=[] (at pp.c:25567)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25569)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port11__clear' (at pp.c:25571)
  FuncDef:  (at pp.c:25575)
    Decl: name='HplMsp430InterruptP__Port11__fired', quals=[], storage=['static', 'inline'] (at pp.c:25575)
      FuncDecl: quals=None (at pp.c:25575)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port11__fired', quals=[] (at pp.c:25575)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25575)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port11__default__fired' (at pp.c:25577)
  FuncDef:  (at pp.c:25582)
    Decl: name='HplMsp430InterruptP__Port12__clear', quals=[], storage=['inline', 'static'] (at pp.c:25582)
      FuncDecl: quals=None (at pp.c:25582)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port12__clear', quals=[] (at pp.c:25582)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25584)
      Assignment: op='&=' (at pp.c:25586)
        ID: name='P1IFG' (at pp.c:25586)
        UnaryOp: op='~' (at pp.c:25586)
          BinaryOp: op='<<' (at pp.c:25586)
            Constant: type='int', value='1' (at pp.c:25586)
            Constant: type='int', value='2' (at pp.c:25586)
  FuncDef:  (at pp.c:25590)
    Decl: name='HplMsp430InterruptP__Port12__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25590)
      FuncDecl: quals=None (at pp.c:25590)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port12__default__fired', quals=[] (at pp.c:25590)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25592)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port12__clear' (at pp.c:25594)
  FuncDef:  (at pp.c:25598)
    Decl: name='HplMsp430InterruptP__Port12__fired', quals=[], storage=['static', 'inline'] (at pp.c:25598)
      FuncDecl: quals=None (at pp.c:25598)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port12__fired', quals=[] (at pp.c:25598)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25598)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port12__default__fired' (at pp.c:25600)
  FuncDef:  (at pp.c:25605)
    Decl: name='HplMsp430InterruptP__Port13__clear', quals=[], storage=['inline', 'static'] (at pp.c:25605)
      FuncDecl: quals=None (at pp.c:25605)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port13__clear', quals=[] (at pp.c:25605)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25607)
      Assignment: op='&=' (at pp.c:25609)
        ID: name='P1IFG' (at pp.c:25609)
        UnaryOp: op='~' (at pp.c:25609)
          BinaryOp: op='<<' (at pp.c:25609)
            Constant: type='int', value='1' (at pp.c:25609)
            Constant: type='int', value='3' (at pp.c:25609)
  FuncDef:  (at pp.c:25613)
    Decl: name='HplMsp430InterruptP__Port13__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25613)
      FuncDecl: quals=None (at pp.c:25613)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port13__default__fired', quals=[] (at pp.c:25613)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25615)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port13__clear' (at pp.c:25617)
  FuncDef:  (at pp.c:25621)
    Decl: name='HplMsp430InterruptP__Port13__fired', quals=[], storage=['static', 'inline'] (at pp.c:25621)
      FuncDecl: quals=None (at pp.c:25621)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port13__fired', quals=[] (at pp.c:25621)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25621)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port13__default__fired' (at pp.c:25623)
  FuncDef:  (at pp.c:25628)
    Decl: name='CC2420CsmaP__startDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:25628)
      FuncDecl: quals=None (at pp.c:25628)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__startDone_task__postTask', quals=[] (at pp.c:25628)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25628)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:25630)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:25630)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:25634)
        ID: name='__nesc_result' (at pp.c:25634)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:25634)
          ExprList:  (at pp.c:25634)
            ID: name='CC2420CsmaP__startDone_task' (at pp.c:25634)
      Return:  (at pp.c:25638)
        ID: name='__nesc_result' (at pp.c:25638)
  FuncDef:  (at pp.c:25643)
    Decl: name='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[], storage=['inline', 'static'] (at pp.c:25643)
      FuncDecl: quals=None (at pp.c:25643)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[] (at pp.c:25643)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25645)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__startDone_task__postTask' (at pp.c:25646)
  FuncDef:  (at pp.c:25650)
    Decl: name='CC2420ControlP__CC2420Power__startOscillatorDone', quals=[], storage=['static', 'inline'] (at pp.c:25650)
      FuncDecl: quals=None (at pp.c:25650)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__startOscillatorDone', quals=[] (at pp.c:25650)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25650)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Power__startOscillatorDone' (at pp.c:25652)
  FuncDef:  (at pp.c:25657)
    Decl: name='CC2420ControlP__InterruptCCA__disable', quals=[], storage=['static', 'inline'] (at pp.c:25657)
      FuncDecl: quals=None (at pp.c:25657)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__InterruptCCA__disable', quals=[] (at pp.c:25657)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25657)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:25659)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:25659)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:25663)
        ID: name='__nesc_result' (at pp.c:25663)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__Interrupt__disable' (at pp.c:25663)
      Return:  (at pp.c:25667)
        ID: name='__nesc_result' (at pp.c:25667)
  FuncDef:  (at pp.c:25672)
    Decl: name='CC2420ControlP__InterruptCCA__fired', quals=[], storage=['inline', 'static'] (at pp.c:25672)
      FuncDecl: quals=None (at pp.c:25672)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__InterruptCCA__fired', quals=[] (at pp.c:25672)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25674)
      Assignment: op='=' (at pp.c:25675)
        ID: name='CC2420ControlP__m_state' (at pp.c:25675)
        ID: name='CC2420ControlP__S_XOSC_STARTED' (at pp.c:25675)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__InterruptCCA__disable' (at pp.c:25676)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__IOCFG1__write' (at pp.c:25677)
        ExprList:  (at pp.c:25677)
          Constant: type='int', value='0' (at pp.c:25677)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__writeId' (at pp.c:25678)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__set' (at pp.c:25679)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__clr' (at pp.c:25680)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CC2420Power__startOscillatorDone' (at pp.c:25681)
  FuncDef:  (at pp.c:25685)
    Decl: name='Msp430InterruptC__0__Interrupt__fired', quals=[], storage=['static', 'inline'] (at pp.c:25685)
      FuncDecl: quals=None (at pp.c:25685)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__Interrupt__fired', quals=[] (at pp.c:25685)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25685)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__InterruptCCA__fired' (at pp.c:25687)
  FuncDef:  (at pp.c:25692)
    Decl: name='Msp430InterruptC__0__HplInterrupt__fired', quals=[], storage=['inline', 'static'] (at pp.c:25692)
      FuncDecl: quals=None (at pp.c:25692)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__fired', quals=[] (at pp.c:25692)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25694)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__0__HplInterrupt__clear' (at pp.c:25695)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__0__Interrupt__fired' (at pp.c:25696)
  FuncDef:  (at pp.c:25700)
    Decl: name='HplMsp430InterruptP__Port14__fired', quals=[], storage=['static', 'inline'] (at pp.c:25700)
      FuncDecl: quals=None (at pp.c:25700)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port14__fired', quals=[] (at pp.c:25700)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25700)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__0__HplInterrupt__fired' (at pp.c:25702)
  FuncDef:  (at pp.c:25707)
    Decl: name='HplMsp430InterruptP__Port15__clear', quals=[], storage=['inline', 'static'] (at pp.c:25707)
      FuncDecl: quals=None (at pp.c:25707)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port15__clear', quals=[] (at pp.c:25707)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25709)
      Assignment: op='&=' (at pp.c:25711)
        ID: name='P1IFG' (at pp.c:25711)
        UnaryOp: op='~' (at pp.c:25711)
          BinaryOp: op='<<' (at pp.c:25711)
            Constant: type='int', value='1' (at pp.c:25711)
            Constant: type='int', value='5' (at pp.c:25711)
  FuncDef:  (at pp.c:25715)
    Decl: name='HplMsp430InterruptP__Port15__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25715)
      FuncDecl: quals=None (at pp.c:25715)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port15__default__fired', quals=[] (at pp.c:25715)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25717)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port15__clear' (at pp.c:25719)
  FuncDef:  (at pp.c:25723)
    Decl: name='HplMsp430InterruptP__Port15__fired', quals=[], storage=['static', 'inline'] (at pp.c:25723)
      FuncDecl: quals=None (at pp.c:25723)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port15__fired', quals=[] (at pp.c:25723)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25723)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port15__default__fired' (at pp.c:25725)
  FuncDef:  (at pp.c:25730)
    Decl: name='HplMsp430InterruptP__Port16__clear', quals=[], storage=['inline', 'static'] (at pp.c:25730)
      FuncDecl: quals=None (at pp.c:25730)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port16__clear', quals=[] (at pp.c:25730)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25732)
      Assignment: op='&=' (at pp.c:25734)
        ID: name='P1IFG' (at pp.c:25734)
        UnaryOp: op='~' (at pp.c:25734)
          BinaryOp: op='<<' (at pp.c:25734)
            Constant: type='int', value='1' (at pp.c:25734)
            Constant: type='int', value='6' (at pp.c:25734)
  FuncDef:  (at pp.c:25738)
    Decl: name='HplMsp430InterruptP__Port16__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25738)
      FuncDecl: quals=None (at pp.c:25738)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port16__default__fired', quals=[] (at pp.c:25738)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25740)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port16__clear' (at pp.c:25742)
  FuncDef:  (at pp.c:25746)
    Decl: name='HplMsp430InterruptP__Port16__fired', quals=[], storage=['static', 'inline'] (at pp.c:25746)
      FuncDecl: quals=None (at pp.c:25746)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port16__fired', quals=[] (at pp.c:25746)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25746)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port16__default__fired' (at pp.c:25748)
  FuncDef:  (at pp.c:25753)
    Decl: name='HplMsp430InterruptP__Port17__clear', quals=[], storage=['inline', 'static'] (at pp.c:25753)
      FuncDecl: quals=None (at pp.c:25753)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port17__clear', quals=[] (at pp.c:25753)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25755)
      Assignment: op='&=' (at pp.c:25757)
        ID: name='P1IFG' (at pp.c:25757)
        UnaryOp: op='~' (at pp.c:25757)
          BinaryOp: op='<<' (at pp.c:25757)
            Constant: type='int', value='1' (at pp.c:25757)
            Constant: type='int', value='7' (at pp.c:25757)
  FuncDef:  (at pp.c:25761)
    Decl: name='HplMsp430InterruptP__Port17__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25761)
      FuncDecl: quals=None (at pp.c:25761)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port17__default__fired', quals=[] (at pp.c:25761)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25763)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port17__clear' (at pp.c:25765)
  FuncDef:  (at pp.c:25769)
    Decl: name='HplMsp430InterruptP__Port17__fired', quals=[], storage=['static', 'inline'] (at pp.c:25769)
      FuncDecl: quals=None (at pp.c:25769)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port17__fired', quals=[] (at pp.c:25769)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25769)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port17__default__fired' (at pp.c:25771)
  FuncDef:  (at pp.c:25776)
    Decl: name='HplMsp430InterruptP__Port20__clear', quals=[], storage=['inline', 'static'] (at pp.c:25776)
      FuncDecl: quals=None (at pp.c:25776)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port20__clear', quals=[] (at pp.c:25776)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25778)
      Assignment: op='&=' (at pp.c:25780)
        ID: name='P2IFG' (at pp.c:25780)
        UnaryOp: op='~' (at pp.c:25780)
          BinaryOp: op='<<' (at pp.c:25780)
            Constant: type='int', value='1' (at pp.c:25780)
            Constant: type='int', value='0' (at pp.c:25780)
  FuncDef:  (at pp.c:25784)
    Decl: name='HplMsp430InterruptP__Port20__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25784)
      FuncDecl: quals=None (at pp.c:25784)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port20__default__fired', quals=[] (at pp.c:25784)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25786)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port20__clear' (at pp.c:25788)
  FuncDef:  (at pp.c:25792)
    Decl: name='HplMsp430InterruptP__Port20__fired', quals=[], storage=['static', 'inline'] (at pp.c:25792)
      FuncDecl: quals=None (at pp.c:25792)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port20__fired', quals=[] (at pp.c:25792)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25792)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port20__default__fired' (at pp.c:25794)
  FuncDef:  (at pp.c:25799)
    Decl: name='HplMsp430InterruptP__Port21__clear', quals=[], storage=['inline', 'static'] (at pp.c:25799)
      FuncDecl: quals=None (at pp.c:25799)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port21__clear', quals=[] (at pp.c:25799)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25801)
      Assignment: op='&=' (at pp.c:25803)
        ID: name='P2IFG' (at pp.c:25803)
        UnaryOp: op='~' (at pp.c:25803)
          BinaryOp: op='<<' (at pp.c:25803)
            Constant: type='int', value='1' (at pp.c:25803)
            Constant: type='int', value='1' (at pp.c:25803)
  FuncDef:  (at pp.c:25807)
    Decl: name='HplMsp430InterruptP__Port21__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25807)
      FuncDecl: quals=None (at pp.c:25807)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port21__default__fired', quals=[] (at pp.c:25807)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25809)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port21__clear' (at pp.c:25811)
  FuncDef:  (at pp.c:25815)
    Decl: name='HplMsp430InterruptP__Port21__fired', quals=[], storage=['static', 'inline'] (at pp.c:25815)
      FuncDecl: quals=None (at pp.c:25815)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port21__fired', quals=[] (at pp.c:25815)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25815)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port21__default__fired' (at pp.c:25817)
  FuncDef:  (at pp.c:25822)
    Decl: name='HplMsp430InterruptP__Port22__clear', quals=[], storage=['inline', 'static'] (at pp.c:25822)
      FuncDecl: quals=None (at pp.c:25822)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port22__clear', quals=[] (at pp.c:25822)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25824)
      Assignment: op='&=' (at pp.c:25826)
        ID: name='P2IFG' (at pp.c:25826)
        UnaryOp: op='~' (at pp.c:25826)
          BinaryOp: op='<<' (at pp.c:25826)
            Constant: type='int', value='1' (at pp.c:25826)
            Constant: type='int', value='2' (at pp.c:25826)
  FuncDef:  (at pp.c:25830)
    Decl: name='HplMsp430InterruptP__Port22__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25830)
      FuncDecl: quals=None (at pp.c:25830)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port22__default__fired', quals=[] (at pp.c:25830)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25832)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port22__clear' (at pp.c:25834)
  FuncDef:  (at pp.c:25838)
    Decl: name='HplMsp430InterruptP__Port22__fired', quals=[], storage=['static', 'inline'] (at pp.c:25838)
      FuncDecl: quals=None (at pp.c:25838)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port22__fired', quals=[] (at pp.c:25838)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25838)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port22__default__fired' (at pp.c:25840)
  FuncDef:  (at pp.c:25845)
    Decl: name='HplMsp430InterruptP__Port23__clear', quals=[], storage=['inline', 'static'] (at pp.c:25845)
      FuncDecl: quals=None (at pp.c:25845)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port23__clear', quals=[] (at pp.c:25845)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25847)
      Assignment: op='&=' (at pp.c:25849)
        ID: name='P2IFG' (at pp.c:25849)
        UnaryOp: op='~' (at pp.c:25849)
          BinaryOp: op='<<' (at pp.c:25849)
            Constant: type='int', value='1' (at pp.c:25849)
            Constant: type='int', value='3' (at pp.c:25849)
  FuncDef:  (at pp.c:25853)
    Decl: name='HplMsp430InterruptP__Port23__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25853)
      FuncDecl: quals=None (at pp.c:25853)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port23__default__fired', quals=[] (at pp.c:25853)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25855)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port23__clear' (at pp.c:25857)
  FuncDef:  (at pp.c:25861)
    Decl: name='HplMsp430InterruptP__Port23__fired', quals=[], storage=['static', 'inline'] (at pp.c:25861)
      FuncDecl: quals=None (at pp.c:25861)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port23__fired', quals=[] (at pp.c:25861)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25861)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port23__default__fired' (at pp.c:25863)
  FuncDef:  (at pp.c:25868)
    Decl: name='HplMsp430InterruptP__Port24__clear', quals=[], storage=['inline', 'static'] (at pp.c:25868)
      FuncDecl: quals=None (at pp.c:25868)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port24__clear', quals=[] (at pp.c:25868)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25870)
      Assignment: op='&=' (at pp.c:25872)
        ID: name='P2IFG' (at pp.c:25872)
        UnaryOp: op='~' (at pp.c:25872)
          BinaryOp: op='<<' (at pp.c:25872)
            Constant: type='int', value='1' (at pp.c:25872)
            Constant: type='int', value='4' (at pp.c:25872)
  FuncDef:  (at pp.c:25876)
    Decl: name='HplMsp430InterruptP__Port24__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25876)
      FuncDecl: quals=None (at pp.c:25876)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port24__default__fired', quals=[] (at pp.c:25876)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25878)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port24__clear' (at pp.c:25880)
  FuncDef:  (at pp.c:25884)
    Decl: name='HplMsp430InterruptP__Port24__fired', quals=[], storage=['static', 'inline'] (at pp.c:25884)
      FuncDecl: quals=None (at pp.c:25884)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port24__fired', quals=[] (at pp.c:25884)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25884)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port24__default__fired' (at pp.c:25886)
  FuncDef:  (at pp.c:25891)
    Decl: name='HplMsp430InterruptP__Port25__clear', quals=[], storage=['inline', 'static'] (at pp.c:25891)
      FuncDecl: quals=None (at pp.c:25891)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port25__clear', quals=[] (at pp.c:25891)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25893)
      Assignment: op='&=' (at pp.c:25895)
        ID: name='P2IFG' (at pp.c:25895)
        UnaryOp: op='~' (at pp.c:25895)
          BinaryOp: op='<<' (at pp.c:25895)
            Constant: type='int', value='1' (at pp.c:25895)
            Constant: type='int', value='5' (at pp.c:25895)
  FuncDef:  (at pp.c:25899)
    Decl: name='HplMsp430InterruptP__Port25__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25899)
      FuncDecl: quals=None (at pp.c:25899)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port25__default__fired', quals=[] (at pp.c:25899)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25901)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port25__clear' (at pp.c:25903)
  FuncDef:  (at pp.c:25907)
    Decl: name='HplMsp430InterruptP__Port25__fired', quals=[], storage=['static', 'inline'] (at pp.c:25907)
      FuncDecl: quals=None (at pp.c:25907)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port25__fired', quals=[] (at pp.c:25907)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25907)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port25__default__fired' (at pp.c:25909)
  FuncDef:  (at pp.c:25914)
    Decl: name='HplMsp430InterruptP__Port26__clear', quals=[], storage=['inline', 'static'] (at pp.c:25914)
      FuncDecl: quals=None (at pp.c:25914)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port26__clear', quals=[] (at pp.c:25914)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25916)
      Assignment: op='&=' (at pp.c:25918)
        ID: name='P2IFG' (at pp.c:25918)
        UnaryOp: op='~' (at pp.c:25918)
          BinaryOp: op='<<' (at pp.c:25918)
            Constant: type='int', value='1' (at pp.c:25918)
            Constant: type='int', value='6' (at pp.c:25918)
  FuncDef:  (at pp.c:25922)
    Decl: name='HplMsp430InterruptP__Port26__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25922)
      FuncDecl: quals=None (at pp.c:25922)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port26__default__fired', quals=[] (at pp.c:25922)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25924)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port26__clear' (at pp.c:25926)
  FuncDef:  (at pp.c:25930)
    Decl: name='HplMsp430InterruptP__Port26__fired', quals=[], storage=['static', 'inline'] (at pp.c:25930)
      FuncDecl: quals=None (at pp.c:25930)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port26__fired', quals=[] (at pp.c:25930)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25930)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port26__default__fired' (at pp.c:25932)
  FuncDef:  (at pp.c:25937)
    Decl: name='HplMsp430InterruptP__Port27__clear', quals=[], storage=['inline', 'static'] (at pp.c:25937)
      FuncDecl: quals=None (at pp.c:25937)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port27__clear', quals=[] (at pp.c:25937)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25939)
      Assignment: op='&=' (at pp.c:25941)
        ID: name='P2IFG' (at pp.c:25941)
        UnaryOp: op='~' (at pp.c:25941)
          BinaryOp: op='<<' (at pp.c:25941)
            Constant: type='int', value='1' (at pp.c:25941)
            Constant: type='int', value='7' (at pp.c:25941)
  FuncDef:  (at pp.c:25945)
    Decl: name='HplMsp430InterruptP__Port27__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25945)
      FuncDecl: quals=None (at pp.c:25945)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port27__default__fired', quals=[] (at pp.c:25945)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25947)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port27__clear' (at pp.c:25949)
  FuncDef:  (at pp.c:25953)
    Decl: name='HplMsp430InterruptP__Port27__fired', quals=[], storage=['static', 'inline'] (at pp.c:25953)
      FuncDecl: quals=None (at pp.c:25953)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port27__fired', quals=[] (at pp.c:25953)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25953)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port27__default__fired' (at pp.c:25955)
  FuncDef:  (at pp.c:25960)
    Decl: name='Msp430UsartShareP__1__ArbiterInfo__userId', quals=[], storage=['static', 'inline'] (at pp.c:25960)
      FuncDecl: quals=None (at pp.c:25960)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__ArbiterInfo__userId', quals=[] (at pp.c:25960)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:25960)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:25962)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:25962)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:25966)
        ID: name='__nesc_result' (at pp.c:25966)
        FuncCall:  (at None)
          ID: name='ArbiterP__1__ArbiterInfo__userId' (at pp.c:25966)
      Return:  (at pp.c:25970)
        ID: name='__nesc_result' (at pp.c:25970)
  FuncDef:  (at pp.c:25975)
    Decl: name='HplMsp430Usart0P__Usart__disableRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:25975)
      FuncDecl: quals=None (at pp.c:25975)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__disableRxIntr', quals=[] (at pp.c:25975)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25977)
      Assignment: op='&=' (at pp.c:25978)
        ID: name='HplMsp430Usart0P__IE1' (at pp.c:25978)
        UnaryOp: op='~' (at pp.c:25978)
          BinaryOp: op='<<' (at pp.c:25978)
            Constant: type='int', value='1' (at pp.c:25978)
            Constant: type='int', value='6' (at pp.c:25978)
  FuncDef:  (at pp.c:25982)
    Decl: name='Msp430SpiNoDmaP__0__Usart__disableRxIntr', quals=[], storage=['static', 'inline'] (at pp.c:25982)
      FuncDecl: quals=None (at pp.c:25982)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__disableRxIntr', quals=[] (at pp.c:25982)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25982)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__disableRxIntr' (at pp.c:25984)
  FuncDef:  (at pp.c:25989)
    Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:25989)
      FuncDecl: quals=None (at pp.c:25989)
        ParamList:  (at pp.c:25989)
          Decl: name='data', quals=[], storage=[] (at pp.c:25989)
            TypeDecl: declname='data', quals=[] (at pp.c:25989)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[] (at pp.c:25989)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25991)
      If:  (at pp.c:25993)
        ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:25993)
        Compound:  (at pp.c:25993)
          Assignment: op='=' (at pp.c:25994)
            ArrayRef:  (at pp.c:25994)
              ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:25994)
              BinaryOp: op='-' (at pp.c:25994)
                ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:25994)
                Constant: type='int', value='1' (at pp.c:25994)
            ID: name='data' (at pp.c:25994)
      If:  (at pp.c:25996)
        BinaryOp: op='<' (at pp.c:25996)
          ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:25996)
          ID: name='Msp430SpiNoDmaP__0__m_len' (at pp.c:25996)
        Compound:  (at pp.c:25996)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__continueOp' (at pp.c:25997)
        Compound:  (at pp.c:26001)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__Usart__disableRxIntr' (at pp.c:26002)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__signalDone' (at pp.c:26003)
  FuncDef:  (at pp.c:26008)
    Decl: name='Msp430UsartShareP__1__Interrupts__default__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:26008)
      FuncDecl: quals=None (at pp.c:26008)
        ParamList:  (at pp.c:26008)
          Decl: name='id', quals=[], storage=[] (at pp.c:26008)
            TypeDecl: declname='id', quals=[] (at pp.c:26008)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:26008)
            TypeDecl: declname='data', quals=[] (at pp.c:26008)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__Interrupts__default__rxDone', quals=[] (at pp.c:26008)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26010)
  FuncDef:  (at pp.c:26014)
    Decl: name='Msp430UsartShareP__1__Interrupts__rxDone', quals=[], storage=['static', 'inline'] (at pp.c:26014)
      FuncDecl: quals=None (at pp.c:26014)
        ParamList:  (at pp.c:26014)
          Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:26014)
            TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:26014)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:26014)
            TypeDecl: declname='data', quals=[] (at pp.c:26014)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__Interrupts__rxDone', quals=[] (at pp.c:26014)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26014)
      Switch:  (at pp.c:26016)
        ID: name='arg_0x101d3f220' (at pp.c:26016)
        Compound:  (at pp.c:26016)
          Case:  (at pp.c:26018)
            ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:26018)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone' (at pp.c:26020)
              ExprList:  (at pp.c:26020)
                ID: name='data' (at pp.c:26020)
          Break:  (at pp.c:26022)
          Default:  (at pp.c:26024)
            FuncCall:  (at None)
              ID: name='Msp430UsartShareP__1__Interrupts__default__rxDone' (at pp.c:26026)
              ExprList:  (at pp.c:26026)
                ID: name='arg_0x101d3f220' (at pp.c:26026)
                ID: name='data' (at pp.c:26026)
          Break:  (at pp.c:26028)
  FuncDef:  (at pp.c:26035)
    Decl: name='Msp430UsartShareP__1__ArbiterInfo__inUse', quals=[], storage=['static', 'inline'] (at pp.c:26035)
      FuncDecl: quals=None (at pp.c:26035)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__ArbiterInfo__inUse', quals=[] (at pp.c:26035)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:26035)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:26037)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:26037)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:26041)
        ID: name='__nesc_result' (at pp.c:26041)
        FuncCall:  (at None)
          ID: name='ArbiterP__1__ArbiterInfo__inUse' (at pp.c:26041)
      Return:  (at pp.c:26045)
        ID: name='__nesc_result' (at pp.c:26045)
  FuncDef:  (at pp.c:26050)
    Decl: name='Msp430UsartShareP__1__RawInterrupts__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:26050)
      FuncDecl: quals=None (at pp.c:26050)
        ParamList:  (at pp.c:26050)
          Decl: name='data', quals=[], storage=[] (at pp.c:26050)
            TypeDecl: declname='data', quals=[] (at pp.c:26050)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__RawInterrupts__rxDone', quals=[] (at pp.c:26050)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26052)
      If:  (at pp.c:26053)
        FuncCall:  (at None)
          ID: name='Msp430UsartShareP__1__ArbiterInfo__inUse' (at pp.c:26053)
        Compound:  (at pp.c:26053)
          FuncCall:  (at None)
            ID: name='Msp430UsartShareP__1__Interrupts__rxDone' (at pp.c:26054)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430UsartShareP__1__ArbiterInfo__userId' (at pp.c:26054)
              ID: name='data' (at pp.c:26054)
  FuncDef:  (at pp.c:26059)
    Decl: name='HplMsp430Usart0P__Interrupts__rxDone', quals=[], storage=['static', 'inline'] (at pp.c:26059)
      FuncDecl: quals=None (at pp.c:26059)
        ParamList:  (at pp.c:26059)
          Decl: name='data', quals=[], storage=[] (at pp.c:26059)
            TypeDecl: declname='data', quals=[] (at pp.c:26059)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Interrupts__rxDone', quals=[] (at pp.c:26059)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26059)
      FuncCall:  (at None)
        ID: name='Msp430UsartShareP__1__RawInterrupts__rxDone' (at pp.c:26061)
        ExprList:  (at pp.c:26061)
          ID: name='data' (at pp.c:26061)
  FuncDef:  (at pp.c:26066)
    Decl: name='HplMsp430I2C0P__HplI2C__isI2C', quals=[], storage=['inline', 'static'] (at pp.c:26066)
      FuncDecl: quals=None (at pp.c:26066)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430I2C0P__HplI2C__isI2C', quals=[] (at pp.c:26066)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:26068)
      Compound:  (at pp.c:26071)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26072)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26072)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='&&' (at pp.c:26074)
            BinaryOp: op='&&' (at pp.c:26074)
              BinaryOp: op='&' (at pp.c:26074)
                ID: name='HplMsp430I2C0P__U0CTL' (at pp.c:26074)
                Constant: type='int', value='0x20' (at pp.c:26074)
              BinaryOp: op='&' (at pp.c:26074)
                ID: name='HplMsp430I2C0P__U0CTL' (at pp.c:26074)
                Constant: type='int', value='0x04' (at pp.c:26074)
            BinaryOp: op='&' (at pp.c:26074)
              ID: name='HplMsp430I2C0P__U0CTL' (at pp.c:26074)
              Constant: type='int', value='0x01' (at pp.c:26074)
        Return:  (at pp.c:26077)
          ID: name='__nesc_temp' (at pp.c:26077)
  FuncDef:  (at pp.c:26082)
    Decl: name='HplMsp430Usart0P__HplI2C__isI2C', quals=[], storage=['static', 'inline'] (at pp.c:26082)
      FuncDecl: quals=None (at pp.c:26082)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__HplI2C__isI2C', quals=[] (at pp.c:26082)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:26082)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:26084)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:26084)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:26088)
        ID: name='__nesc_result' (at pp.c:26088)
        FuncCall:  (at None)
          ID: name='HplMsp430I2C0P__HplI2C__isI2C' (at pp.c:26088)
      Return:  (at pp.c:26092)
        ID: name='__nesc_result' (at pp.c:26092)
  FuncDef:  (at pp.c:26097)
    Decl: name='Msp430UsartShareP__1__I2CInterrupts__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:26097)
      FuncDecl: quals=None (at pp.c:26097)
        ParamList:  (at pp.c:26097)
          Decl: name='id', quals=[], storage=[] (at pp.c:26097)
            TypeDecl: declname='id', quals=[] (at pp.c:26097)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__I2CInterrupts__default__fired', quals=[] (at pp.c:26097)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26099)
  FuncDef:  (at pp.c:26103)
    Decl: name='Msp430UsartShareP__1__I2CInterrupts__fired', quals=[], storage=['static', 'inline'] (at pp.c:26103)
      FuncDecl: quals=None (at pp.c:26103)
        ParamList:  (at pp.c:26103)
          Decl: name='arg_0x101d3bc58', quals=[], storage=[] (at pp.c:26103)
            TypeDecl: declname='arg_0x101d3bc58', quals=[] (at pp.c:26103)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__I2CInterrupts__fired', quals=[] (at pp.c:26103)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26103)
      FuncCall:  (at None)
        ID: name='Msp430UsartShareP__1__I2CInterrupts__default__fired' (at pp.c:26105)
        ExprList:  (at pp.c:26105)
          ID: name='arg_0x101d3bc58' (at pp.c:26105)
  FuncDef:  (at pp.c:26110)
    Decl: name='Msp430UsartShareP__1__RawI2CInterrupts__fired', quals=[], storage=['inline', 'static'] (at pp.c:26110)
      FuncDecl: quals=None (at pp.c:26110)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__RawI2CInterrupts__fired', quals=[] (at pp.c:26110)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26112)
      If:  (at pp.c:26113)
        FuncCall:  (at None)
          ID: name='Msp430UsartShareP__1__ArbiterInfo__inUse' (at pp.c:26113)
        Compound:  (at pp.c:26113)
          FuncCall:  (at None)
            ID: name='Msp430UsartShareP__1__I2CInterrupts__fired' (at pp.c:26114)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430UsartShareP__1__ArbiterInfo__userId' (at pp.c:26114)
  FuncDef:  (at pp.c:26119)
    Decl: name='HplMsp430Usart0P__I2CInterrupts__fired', quals=[], storage=['static', 'inline'] (at pp.c:26119)
      FuncDecl: quals=None (at pp.c:26119)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__I2CInterrupts__fired', quals=[] (at pp.c:26119)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26119)
      FuncCall:  (at None)
        ID: name='Msp430UsartShareP__1__RawI2CInterrupts__fired' (at pp.c:26121)
  FuncDef:  (at pp.c:26126)
    Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:26126)
      FuncDecl: quals=None (at pp.c:26126)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[] (at pp.c:26126)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26128)
  FuncDef:  (at pp.c:26132)
    Decl: name='Msp430UsartShareP__1__Interrupts__default__txDone', quals=[], storage=['inline', 'static'] (at pp.c:26132)
      FuncDecl: quals=None (at pp.c:26132)
        ParamList:  (at pp.c:26132)
          Decl: name='id', quals=[], storage=[] (at pp.c:26132)
            TypeDecl: declname='id', quals=[] (at pp.c:26132)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__Interrupts__default__txDone', quals=[] (at pp.c:26132)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26134)
  FuncDef:  (at pp.c:26138)
    Decl: name='Msp430UsartShareP__1__Interrupts__txDone', quals=[], storage=['static', 'inline'] (at pp.c:26138)
      FuncDecl: quals=None (at pp.c:26138)
        ParamList:  (at pp.c:26138)
          Decl: name='arg_0x101d3f220', quals=[], storage=[] (at pp.c:26138)
            TypeDecl: declname='arg_0x101d3f220', quals=[] (at pp.c:26138)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__Interrupts__txDone', quals=[] (at pp.c:26138)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26138)
      Switch:  (at pp.c:26140)
        ID: name='arg_0x101d3f220' (at pp.c:26140)
        Compound:  (at pp.c:26140)
          Case:  (at pp.c:26142)
            ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:26142)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__UsartInterrupts__txDone' (at pp.c:26144)
          Break:  (at pp.c:26146)
          Default:  (at pp.c:26148)
            FuncCall:  (at None)
              ID: name='Msp430UsartShareP__1__Interrupts__default__txDone' (at pp.c:26150)
              ExprList:  (at pp.c:26150)
                ID: name='arg_0x101d3f220' (at pp.c:26150)
          Break:  (at pp.c:26152)
  FuncDef:  (at pp.c:26159)
    Decl: name='Msp430UsartShareP__1__RawInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:26159)
      FuncDecl: quals=None (at pp.c:26159)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__1__RawInterrupts__txDone', quals=[] (at pp.c:26159)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26161)
      If:  (at pp.c:26162)
        FuncCall:  (at None)
          ID: name='Msp430UsartShareP__1__ArbiterInfo__inUse' (at pp.c:26162)
        Compound:  (at pp.c:26162)
          FuncCall:  (at None)
            ID: name='Msp430UsartShareP__1__Interrupts__txDone' (at pp.c:26163)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430UsartShareP__1__ArbiterInfo__userId' (at pp.c:26163)
  FuncDef:  (at pp.c:26168)
    Decl: name='HplMsp430Usart0P__Interrupts__txDone', quals=[], storage=['static', 'inline'] (at pp.c:26168)
      FuncDecl: quals=None (at pp.c:26168)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Interrupts__txDone', quals=[] (at pp.c:26168)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26168)
      FuncCall:  (at None)
        ID: name='Msp430UsartShareP__1__RawInterrupts__txDone' (at pp.c:26170)
  FuncDef:  (at pp.c:26175)
    Decl: name='__nesc_atomic_start', quals=[], storage=[] (at pp.c:26175)
      FuncDecl: quals=None (at pp.c:26175)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_atomic_start', quals=[] (at pp.c:26175)
          IdentifierType: names=['__nesc_atomic_t'] (at None)
    Compound:  (at pp.c:26176)
      Decl: name='result', quals=[], storage=[] (at pp.c:26177)
        TypeDecl: declname='result', quals=[] (at pp.c:26177)
          IdentifierType: names=['__nesc_atomic_t'] (at None)
        BinaryOp: op='!=' (at pp.c:26177)
          BinaryOp: op='&' (at pp.c:26177)
            Compound:  (at pp.c:26177)
              Decl: name='__x', quals=[], storage=[] (at pp.c:26179)
                TypeDecl: declname='__x', quals=[] (at pp.c:26179)
                  IdentifierType: names=['uint16_t'] (at None)
              Assignment: op='=' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                  ID: name='__x' (at pp.c:26182)
                ID: name='_R2' (at pp.c:26182)
              ID: name='__x' (at pp.c:26182)
            Constant: type='int', value='0x0008' (at pp.c:26186)
          Constant: type='int', value='0' (at pp.c:26186)
      FuncCall:  (at None)
        ID: name='__nesc_disable_interrupt' (at pp.c:26189)
      Return:  (at pp.c:26191)
        ID: name='result' (at pp.c:26191)
  FuncDef:  (at pp.c:26194)
    Decl: name='__nesc_atomic_end', quals=[], storage=[] (at pp.c:26194)
      FuncDecl: quals=None (at pp.c:26194)
        ParamList:  (at pp.c:26194)
          Decl: name='reenable_interrupts', quals=[], storage=[] (at pp.c:26194)
            TypeDecl: declname='reenable_interrupts', quals=[] (at pp.c:26194)
              IdentifierType: names=['__nesc_atomic_t'] (at None)
        TypeDecl: declname='__nesc_atomic_end', quals=[] (at pp.c:26194)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26195)
      If:  (at pp.c:26197)
        ID: name='reenable_interrupts' (at pp.c:26197)
        Compound:  (at pp.c:26197)
          FuncCall:  (at None)
            ID: name='__nesc_enable_interrupt' (at pp.c:26198)
  FuncDef:  (at pp.c:26203)
    Decl: name='sig_TIMERA0_VECTOR', quals=[], storage=[] (at pp.c:26203)
      FuncDecl: quals=None (at pp.c:26203)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_TIMERA0_VECTOR', quals=[] (at pp.c:26203)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26205)
      FuncCall:  (at None)
        ID: name='Msp430TimerCommonP__VectorTimerA0__fired' (at pp.c:26207)
  FuncDef:  (at pp.c:26211)
    Decl: name='Msp430TimerCapComP__0__Event__fired', quals=[], storage=['static'] (at pp.c:26211)
      FuncDecl: quals=None (at pp.c:26211)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Event__fired', quals=[] (at pp.c:26211)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26212)
      If:  (at pp.c:26213)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__0__Control__getControl' (at pp.c:26213)
          ID: name='cap' (at pp.c:26213)
        Compound:  (at pp.c:26213)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__0__Capture__captured' (at pp.c:26214)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__0__Capture__getEvent' (at pp.c:26214)
        Compound:  (at pp.c:26216)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__0__Compare__fired' (at pp.c:26218)
  FuncDef:  (at pp.c:26223)
    Decl: name='Msp430TimerCapComP__1__Event__fired', quals=[], storage=['static'] (at pp.c:26223)
      FuncDecl: quals=None (at pp.c:26223)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Event__fired', quals=[] (at pp.c:26223)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26224)
      If:  (at pp.c:26225)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__1__Control__getControl' (at pp.c:26225)
          ID: name='cap' (at pp.c:26225)
        Compound:  (at pp.c:26225)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__1__Capture__captured' (at pp.c:26226)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__1__Capture__getEvent' (at pp.c:26226)
        Compound:  (at pp.c:26228)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__1__Compare__fired' (at pp.c:26230)
  FuncDef:  (at pp.c:26235)
    Decl: name='Msp430TimerCapComP__2__Event__fired', quals=[], storage=['static'] (at pp.c:26235)
      FuncDecl: quals=None (at pp.c:26235)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Event__fired', quals=[] (at pp.c:26235)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26236)
      If:  (at pp.c:26237)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__2__Control__getControl' (at pp.c:26237)
          ID: name='cap' (at pp.c:26237)
        Compound:  (at pp.c:26237)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__2__Capture__captured' (at pp.c:26238)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__2__Capture__getEvent' (at pp.c:26238)
        Compound:  (at pp.c:26240)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__2__Compare__fired' (at pp.c:26242)
  FuncDef:  (at pp.c:26247)
    Decl: name='sig_TIMERA1_VECTOR', quals=[], storage=[] (at pp.c:26247)
      FuncDecl: quals=None (at pp.c:26247)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_TIMERA1_VECTOR', quals=[] (at pp.c:26247)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26249)
      FuncCall:  (at None)
        ID: name='Msp430TimerCommonP__VectorTimerA1__fired' (at pp.c:26251)
  FuncDef:  (at pp.c:26255)
    Decl: name='sig_TIMERB0_VECTOR', quals=[], storage=[] (at pp.c:26255)
      FuncDecl: quals=None (at pp.c:26255)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_TIMERB0_VECTOR', quals=[] (at pp.c:26255)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26257)
      FuncCall:  (at None)
        ID: name='Msp430TimerCommonP__VectorTimerB0__fired' (at pp.c:26259)
  FuncDef:  (at pp.c:26263)
    Decl: name='Msp430TimerP__1__Event__default__fired', quals=[], storage=['static'] (at pp.c:26263)
      FuncDecl: quals=None (at pp.c:26263)
        ParamList:  (at pp.c:26263)
          Decl: name='n', quals=[], storage=[] (at pp.c:26263)
            TypeDecl: declname='n', quals=[] (at pp.c:26263)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Event__default__fired', quals=[] (at pp.c:26263)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26264)
  FuncDef:  (at pp.c:26268)
    Decl: name='Msp430TimerP__1__Event__fired', quals=[], storage=['static'] (at pp.c:26268)
      FuncDecl: quals=None (at pp.c:26268)
        ParamList:  (at pp.c:26268)
          Decl: name='arg_0x1015d0de0', quals=[], storage=[] (at pp.c:26268)
            TypeDecl: declname='arg_0x1015d0de0', quals=[] (at pp.c:26268)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Event__fired', quals=[] (at pp.c:26268)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26268)
      Switch:  (at pp.c:26270)
        ID: name='arg_0x1015d0de0' (at pp.c:26270)
        Compound:  (at pp.c:26270)
          Case:  (at pp.c:26272)
            Constant: type='int', value='0' (at pp.c:26272)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__3__Event__fired' (at pp.c:26274)
          Break:  (at pp.c:26276)
          Case:  (at pp.c:26278)
            Constant: type='int', value='1' (at pp.c:26278)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__4__Event__fired' (at pp.c:26280)
          Break:  (at pp.c:26282)
          Case:  (at pp.c:26284)
            Constant: type='int', value='2' (at pp.c:26284)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__5__Event__fired' (at pp.c:26286)
          Break:  (at pp.c:26288)
          Case:  (at pp.c:26290)
            Constant: type='int', value='3' (at pp.c:26290)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__6__Event__fired' (at pp.c:26292)
          Break:  (at pp.c:26294)
          Case:  (at pp.c:26296)
            Constant: type='int', value='4' (at pp.c:26296)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__7__Event__fired' (at pp.c:26298)
          Break:  (at pp.c:26300)
          Case:  (at pp.c:26302)
            Constant: type='int', value='5' (at pp.c:26302)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__8__Event__fired' (at pp.c:26304)
          Break:  (at pp.c:26306)
          Case:  (at pp.c:26308)
            Constant: type='int', value='6' (at pp.c:26308)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__9__Event__fired' (at pp.c:26310)
          Break:  (at pp.c:26312)
          Case:  (at pp.c:26314)
            Constant: type='int', value='7' (at pp.c:26314)
            FuncCall:  (at None)
              ID: name='Msp430TimerP__1__Overflow__fired' (at pp.c:26316)
          Break:  (at pp.c:26318)
          Default:  (at pp.c:26320)
            FuncCall:  (at None)
              ID: name='Msp430TimerP__1__Event__default__fired' (at pp.c:26322)
              ExprList:  (at pp.c:26322)
                ID: name='arg_0x1015d0de0' (at pp.c:26322)
          Break:  (at pp.c:26324)
  FuncDef:  (at pp.c:26331)
    Decl: name='TransformAlarmC__0__Alarm__startAt', quals=[], storage=['static'] (at pp.c:26331)
      FuncDecl: quals=None (at pp.c:26331)
        ParamList:  (at pp.c:26331)
          Decl: name='t0', quals=[], storage=[] (at pp.c:26331)
            TypeDecl: declname='t0', quals=[] (at pp.c:26331)
              IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:26331)
            TypeDecl: declname='dt', quals=[] (at pp.c:26331)
              IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Alarm__startAt', quals=[] (at pp.c:26331)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26332)
      Compound:  (at pp.c:26333)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26333)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26333)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26333)
        Compound:  (at pp.c:26334)
          Assignment: op='=' (at pp.c:26335)
            ID: name='TransformAlarmC__0__m_t0' (at pp.c:26335)
            ID: name='t0' (at pp.c:26335)
          Assignment: op='=' (at pp.c:26336)
            ID: name='TransformAlarmC__0__m_dt' (at pp.c:26336)
            ID: name='dt' (at pp.c:26336)
          FuncCall:  (at None)
            ID: name='TransformAlarmC__0__set_alarm' (at pp.c:26337)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26340)
          ExprList:  (at pp.c:26340)
            ID: name='__nesc_atomic' (at pp.c:26340)
  FuncDef:  (at pp.c:26344)
    Decl: name='TransformAlarmC__0__set_alarm', quals=[], storage=['static'] (at pp.c:26344)
      FuncDecl: quals=None (at pp.c:26344)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__set_alarm', quals=[] (at pp.c:26344)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26345)
      Decl: name='now', quals=[], storage=[] (at pp.c:26346)
        TypeDecl: declname='now', quals=[] (at pp.c:26346)
          IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__0__Counter__get' (at pp.c:26346)
      Decl: name='expires', quals=[], storage=[] (at pp.c:26348)
        TypeDecl: declname='expires', quals=[] (at pp.c:26348)
          IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
      Decl: name='remaining', quals=[], storage=[] (at pp.c:26350)
        TypeDecl: declname='remaining', quals=[] (at pp.c:26350)
          IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
      Assignment: op='=' (at pp.c:26355)
        ID: name='expires' (at pp.c:26355)
        BinaryOp: op='+' (at pp.c:26355)
          ID: name='TransformAlarmC__0__m_t0' (at pp.c:26355)
          ID: name='TransformAlarmC__0__m_dt' (at pp.c:26355)
      Assignment: op='=' (at pp.c:26358)
        ID: name='remaining' (at pp.c:26358)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
          BinaryOp: op='-' (at pp.c:26358)
            ID: name='expires' (at pp.c:26358)
            ID: name='now' (at pp.c:26358)
      If:  (at pp.c:26361)
        BinaryOp: op='<=' (at pp.c:26361)
          ID: name='TransformAlarmC__0__m_t0' (at pp.c:26361)
          ID: name='now' (at pp.c:26361)
        Compound:  (at pp.c:26362)
          If:  (at pp.c:26363)
            BinaryOp: op='&&' (at pp.c:26363)
              BinaryOp: op='>=' (at pp.c:26363)
                ID: name='expires' (at pp.c:26363)
                ID: name='TransformAlarmC__0__m_t0' (at pp.c:26363)
              BinaryOp: op='<=' (at pp.c:26364)
                ID: name='expires' (at pp.c:26364)
                ID: name='now' (at pp.c:26364)
            Compound:  (at pp.c:26364)
              Assignment: op='=' (at pp.c:26365)
                ID: name='remaining' (at pp.c:26365)
                Constant: type='int', value='0' (at pp.c:26365)
        Compound:  (at pp.c:26368)
          If:  (at pp.c:26369)
            BinaryOp: op='||' (at pp.c:26369)
              BinaryOp: op='>=' (at pp.c:26369)
                ID: name='expires' (at pp.c:26369)
                ID: name='TransformAlarmC__0__m_t0' (at pp.c:26369)
              BinaryOp: op='<=' (at pp.c:26370)
                ID: name='expires' (at pp.c:26370)
                ID: name='now' (at pp.c:26370)
            Compound:  (at pp.c:26370)
              Assignment: op='=' (at pp.c:26371)
                ID: name='remaining' (at pp.c:26371)
                Constant: type='int', value='0' (at pp.c:26371)
      If:  (at pp.c:26375)
        BinaryOp: op='>' (at pp.c:26375)
          ID: name='remaining' (at pp.c:26375)
          ID: name='TransformAlarmC__0__MAX_DELAY' (at pp.c:26375)
        Compound:  (at pp.c:26376)
          Assignment: op='=' (at pp.c:26377)
            ID: name='TransformAlarmC__0__m_t0' (at pp.c:26377)
            BinaryOp: op='+' (at pp.c:26377)
              ID: name='now' (at pp.c:26377)
              ID: name='TransformAlarmC__0__MAX_DELAY' (at pp.c:26377)
          Assignment: op='=' (at pp.c:26378)
            ID: name='TransformAlarmC__0__m_dt' (at pp.c:26378)
            BinaryOp: op='-' (at pp.c:26378)
              ID: name='remaining' (at pp.c:26378)
              ID: name='TransformAlarmC__0__MAX_DELAY' (at pp.c:26378)
          Assignment: op='=' (at pp.c:26379)
            ID: name='remaining' (at pp.c:26379)
            ID: name='TransformAlarmC__0__MAX_DELAY' (at pp.c:26379)
        Compound:  (at pp.c:26382)
          Assignment: op='+=' (at pp.c:26383)
            ID: name='TransformAlarmC__0__m_t0' (at pp.c:26383)
            ID: name='TransformAlarmC__0__m_dt' (at pp.c:26383)
          Assignment: op='=' (at pp.c:26384)
            ID: name='TransformAlarmC__0__m_dt' (at pp.c:26384)
            Constant: type='int', value='0' (at pp.c:26384)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__AlarmFrom__startAt' (at pp.c:26386)
        ExprList:  (at None)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__0__from_size_type'] (at None)
              ID: name='now' (at pp.c:26386)
            Constant: type='int', value='0' (at pp.c:26386)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__0__from_size_type'] (at None)
              ID: name='remaining' (at pp.c:26387)
            Constant: type='int', value='0' (at pp.c:26387)
  FuncDef:  (at pp.c:26391)
    Decl: name='TransformCounterC__0__Counter__get', quals=[], storage=['static'] (at pp.c:26391)
      FuncDecl: quals=None (at pp.c:26391)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__0__Counter__get', quals=[] (at pp.c:26391)
          IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
    Compound:  (at pp.c:26392)
      Decl: name='rv', quals=[], storage=[] (at pp.c:26393)
        TypeDecl: declname='rv', quals=[] (at pp.c:26393)
          IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
        Constant: type='int', value='0' (at pp.c:26393)
      Compound:  (at pp.c:26396)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26396)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26396)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26396)
        Compound:  (at pp.c:26397)
          Decl: name='high', quals=[], storage=[] (at pp.c:26398)
            TypeDecl: declname='high', quals=[] (at pp.c:26398)
              IdentifierType: names=['TransformCounterC__0__upper_count_type'] (at None)
            ID: name='TransformCounterC__0__m_upper' (at pp.c:26398)
          Decl: name='low', quals=[], storage=[] (at pp.c:26399)
            TypeDecl: declname='low', quals=[] (at pp.c:26399)
              IdentifierType: names=['TransformCounterC__0__from_size_type'] (at None)
            FuncCall:  (at None)
              ID: name='TransformCounterC__0__CounterFrom__get' (at pp.c:26399)
          If:  (at pp.c:26402)
            FuncCall:  (at None)
              ID: name='TransformCounterC__0__CounterFrom__isOverflowPending' (at pp.c:26402)
            Compound:  (at pp.c:26403)
              UnaryOp: op='p++' (at pp.c:26410)
                ID: name='high' (at pp.c:26410)
              Assignment: op='=' (at pp.c:26411)
                ID: name='low' (at pp.c:26411)
                FuncCall:  (at None)
                  ID: name='TransformCounterC__0__CounterFrom__get' (at pp.c:26411)
          Compound:  (at pp.c:26413)
            Decl: name='high_to', quals=[], storage=[] (at pp.c:26414)
              TypeDecl: declname='high_to', quals=[] (at pp.c:26414)
                IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
              ID: name='high' (at pp.c:26414)
            Decl: name='low_to', quals=[], storage=[] (at pp.c:26415)
              TypeDecl: declname='low_to', quals=[] (at pp.c:26415)
                IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
              BinaryOp: op='>>' (at pp.c:26415)
                ID: name='low' (at pp.c:26415)
                ID: name='TransformCounterC__0__LOW_SHIFT_RIGHT' (at pp.c:26415)
            Assignment: op='=' (at pp.c:26418)
              ID: name='rv' (at pp.c:26418)
              BinaryOp: op='|' (at pp.c:26418)
                BinaryOp: op='<<' (at pp.c:26418)
                  ID: name='high_to' (at pp.c:26418)
                  ID: name='TransformCounterC__0__HIGH_SHIFT_LEFT' (at pp.c:26418)
                ID: name='low_to' (at pp.c:26418)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26422)
          ExprList:  (at pp.c:26422)
            ID: name='__nesc_atomic' (at pp.c:26422)
      Return:  (at pp.c:26423)
        ID: name='rv' (at pp.c:26423)
  FuncDef:  (at pp.c:26427)
    Decl: name='Msp430TimerP__1__Timer__get', quals=[], storage=['static'] (at pp.c:26427)
      FuncDecl: quals=None (at pp.c:26427)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Timer__get', quals=[] (at pp.c:26427)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:26428)
      If:  (at pp.c:26433)
        Constant: type='int', value='1' (at pp.c:26433)
        Compound:  (at pp.c:26433)
          Compound:  (at pp.c:26436)
            Decl: name='t0', quals=[], storage=[] (at pp.c:26437)
              TypeDecl: declname='t0', quals=[] (at pp.c:26437)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t1', quals=[], storage=[] (at pp.c:26438)
              TypeDecl: declname='t1', quals=[] (at pp.c:26438)
                IdentifierType: names=['uint16_t'] (at None)
              UnaryOp: op='*' (at None)
                Cast:  (at None)
                  Typename: quals=['volatile'] (at None)
                    PtrDecl: quals=[] (at pp.c:26438)
                      TypeDecl: declname=None, quals=['volatile'] (at None)
                        IdentifierType: names=['uint16_t'] (at None)
                  Constant: type='int', value='400U' (at pp.c:26438)
            DoWhile:  (at pp.c:26441)
              BinaryOp: op='!=' (at pp.c:26449)
                ID: name='t0' (at pp.c:26449)
                ID: name='t1' (at pp.c:26449)
              Compound:  (at pp.c:26441)
                Assignment: op='=' (at pp.c:26443)
                  ID: name='t0' (at pp.c:26443)
                  ID: name='t1' (at pp.c:26443)
                Assignment: op='=' (at pp.c:26445)
                  ID: name='t1' (at pp.c:26445)
                  UnaryOp: op='*' (at None)
                    Cast:  (at None)
                      Typename: quals=['volatile'] (at None)
                        PtrDecl: quals=[] (at pp.c:26445)
                          TypeDecl: declname=None, quals=['volatile'] (at None)
                            IdentifierType: names=['uint16_t'] (at None)
                      Constant: type='int', value='400U' (at pp.c:26445)
            Compound:  (at pp.c:26450)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26451)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26451)
                  IdentifierType: names=['int', 'unsigned'] (at None)
                ID: name='t1' (at pp.c:26453)
              Return:  (at pp.c:26456)
                ID: name='__nesc_temp' (at pp.c:26456)
        Compound:  (at pp.c:26462)
          Return:  (at pp.c:26463)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:26463)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='400U' (at pp.c:26463)
  FuncDef:  (at pp.c:26468)
    Decl: name='CC2420TransmitP__congestionBackoff', quals=[], storage=['static'] (at pp.c:26468)
      FuncDecl: quals=None (at pp.c:26468)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__congestionBackoff', quals=[] (at pp.c:26468)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26470)
      Compound:  (at pp.c:26471)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26471)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26471)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26471)
        Compound:  (at pp.c:26473)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__RadioBackoff__requestCongestionBackoff' (at pp.c:26474)
            ExprList:  (at pp.c:26474)
              ID: name='CC2420TransmitP__m_msg' (at pp.c:26474)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:26475)
            ExprList:  (at pp.c:26475)
              ID: name='CC2420TransmitP__myCongestionBackoff' (at pp.c:26475)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26478)
          ExprList:  (at pp.c:26478)
            ID: name='__nesc_atomic' (at pp.c:26478)
  FuncDef:  (at pp.c:26482)
    Decl: name='RandomMlcgC__Random__rand32', quals=[], storage=['static'] (at pp.c:26482)
      FuncDecl: quals=None (at pp.c:26482)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RandomMlcgC__Random__rand32', quals=[] (at pp.c:26482)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:26484)
      Decl: name='mlcg', quals=[], storage=[] (at pp.c:26485)
        TypeDecl: declname='mlcg', quals=[] (at pp.c:26485)
          IdentifierType: names=['uint32_t'] (at None)
      Decl: name='p', quals=[], storage=[] (at pp.c:26487)
        TypeDecl: declname='p', quals=[] (at pp.c:26487)
          IdentifierType: names=['uint32_t'] (at None)
      Decl: name='q', quals=[], storage=[] (at pp.c:26489)
        TypeDecl: declname='q', quals=[] (at pp.c:26489)
          IdentifierType: names=['uint32_t'] (at None)
      Decl: name='tmpseed', quals=[], storage=[] (at pp.c:26490)
        TypeDecl: declname='tmpseed', quals=[] (at pp.c:26490)
          IdentifierType: names=['uint64_t'] (at None)
      Compound:  (at pp.c:26493)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26493)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26493)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26493)
        Compound:  (at pp.c:26494)
          Assignment: op='=' (at pp.c:26495)
            ID: name='tmpseed' (at pp.c:26495)
            BinaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['uint64_t'] (at None)
                Constant: type='int', value='33614U' (at pp.c:26495)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['uint64_t'] (at None)
                ID: name='RandomMlcgC__seed' (at pp.c:26495)
          Assignment: op='=' (at pp.c:26496)
            ID: name='q' (at pp.c:26496)
            ID: name='tmpseed' (at pp.c:26496)
          Assignment: op='=' (at pp.c:26497)
            ID: name='q' (at pp.c:26497)
            BinaryOp: op='>>' (at pp.c:26497)
              ID: name='q' (at pp.c:26497)
              Constant: type='int', value='1' (at pp.c:26497)
          Assignment: op='=' (at pp.c:26498)
            ID: name='p' (at pp.c:26498)
            BinaryOp: op='>>' (at pp.c:26498)
              ID: name='tmpseed' (at pp.c:26498)
              Constant: type='int', value='32' (at pp.c:26498)
          Assignment: op='=' (at pp.c:26499)
            ID: name='mlcg' (at pp.c:26499)
            BinaryOp: op='+' (at pp.c:26499)
              ID: name='p' (at pp.c:26499)
              ID: name='q' (at pp.c:26499)
          If:  (at pp.c:26500)
            BinaryOp: op='&' (at pp.c:26500)
              ID: name='mlcg' (at pp.c:26500)
              Constant: type='int', value='0x80000000' (at pp.c:26500)
            Compound:  (at pp.c:26500)
              Assignment: op='=' (at pp.c:26501)
                ID: name='mlcg' (at pp.c:26501)
                BinaryOp: op='&' (at pp.c:26501)
                  ID: name='mlcg' (at pp.c:26501)
                  Constant: type='int', value='0x7FFFFFFF' (at pp.c:26501)
              UnaryOp: op='p++' (at pp.c:26502)
                ID: name='mlcg' (at pp.c:26502)
          Assignment: op='=' (at pp.c:26504)
            ID: name='RandomMlcgC__seed' (at pp.c:26504)
            ID: name='mlcg' (at pp.c:26504)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26507)
          ExprList:  (at pp.c:26507)
            ID: name='__nesc_atomic' (at pp.c:26507)
      Return:  (at pp.c:26508)
        ID: name='mlcg' (at pp.c:26508)
  FuncDef:  (at pp.c:26512)
    Decl: name='CC2420TransmitP__acquireSpiResource', quals=[], storage=['static'] (at pp.c:26512)
      FuncDecl: quals=None (at pp.c:26512)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__acquireSpiResource', quals=[] (at pp.c:26512)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26514)
      Decl: name='error', quals=[], storage=[] (at pp.c:26515)
        TypeDecl: declname='error', quals=[] (at pp.c:26515)
          IdentifierType: names=['error_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__SpiResource__immediateRequest' (at pp.c:26515)
      If:  (at pp.c:26518)
        BinaryOp: op='!=' (at pp.c:26518)
          ID: name='error' (at pp.c:26518)
          ID: name='SUCCESS' (at pp.c:26518)
        Compound:  (at pp.c:26518)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__SpiResource__request' (at pp.c:26519)
      Return:  (at pp.c:26521)
        ID: name='error' (at pp.c:26521)
  FuncDef:  (at pp.c:26525)
    Decl: name='CC2420SpiP__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:26525)
      FuncDecl: quals=None (at pp.c:26525)
        ParamList:  (at pp.c:26525)
          Decl: name='id', quals=[], storage=[] (at pp.c:26525)
            TypeDecl: declname='id', quals=[] (at pp.c:26525)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__immediateRequest', quals=[] (at pp.c:26525)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26527)
      Decl: name='error', quals=[], storage=[] (at pp.c:26528)
        TypeDecl: declname='error', quals=[] (at pp.c:26528)
          IdentifierType: names=['error_t'] (at None)
      Compound:  (at pp.c:26530)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26530)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26530)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26530)
        Compound:  (at pp.c:26532)
          If:  (at pp.c:26533)
            BinaryOp: op='!=' (at None)
              FuncCall:  (at None)
                ID: name='CC2420SpiP__WorkingState__requestState' (at pp.c:26533)
                ExprList:  (at pp.c:26533)
                  ID: name='CC2420SpiP__S_BUSY' (at pp.c:26533)
              ID: name='SUCCESS' (at pp.c:26533)
            Compound:  (at pp.c:26533)
              Compound:  (at pp.c:26534)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26535)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26535)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='EBUSY' (at pp.c:26537)
                Compound:  (at pp.c:26539)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:26541)
                    ExprList:  (at pp.c:26541)
                      ID: name='__nesc_atomic' (at pp.c:26541)
                  Return:  (at pp.c:26543)
                    ID: name='__nesc_temp' (at pp.c:26543)
          If:  (at pp.c:26547)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__SpiResource__isOwner' (at pp.c:26547)
            Compound:  (at pp.c:26547)
              Assignment: op='=' (at pp.c:26548)
                ID: name='CC2420SpiP__m_holder' (at pp.c:26548)
                ID: name='id' (at pp.c:26548)
              Assignment: op='=' (at pp.c:26549)
                ID: name='error' (at pp.c:26549)
                ID: name='SUCCESS' (at pp.c:26549)
            Compound:  (at pp.c:26551)
              If:  (at pp.c:26553)
                BinaryOp: op='==' (at pp.c:26553)
                  Assignment: op='=' (at pp.c:26553)
                    ID: name='error' (at pp.c:26553)
                    FuncCall:  (at None)
                      ID: name='CC2420SpiP__SpiResource__immediateRequest' (at pp.c:26553)
                  ID: name='SUCCESS' (at pp.c:26553)
                Compound:  (at pp.c:26553)
                  Assignment: op='=' (at pp.c:26554)
                    ID: name='CC2420SpiP__m_holder' (at pp.c:26554)
                    ID: name='id' (at pp.c:26554)
                Compound:  (at pp.c:26556)
                  FuncCall:  (at None)
                    ID: name='CC2420SpiP__WorkingState__toIdle' (at pp.c:26557)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26562)
          ExprList:  (at pp.c:26562)
            ID: name='__nesc_atomic' (at pp.c:26562)
      Return:  (at pp.c:26564)
        ID: name='error' (at pp.c:26564)
  FuncDef:  (at pp.c:26568)
    Decl: name='StateImplP__State__requestState', quals=[], storage=['static'] (at pp.c:26568)
      FuncDecl: quals=None (at pp.c:26568)
        ParamList:  (at pp.c:26568)
          Decl: name='id', quals=[], storage=[] (at pp.c:26568)
            TypeDecl: declname='id', quals=[] (at pp.c:26568)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:26568)
            TypeDecl: declname='reqState', quals=[] (at pp.c:26568)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__requestState', quals=[] (at pp.c:26568)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26570)
      Decl: name='returnVal', quals=[], storage=[] (at pp.c:26571)
        TypeDecl: declname='returnVal', quals=[] (at pp.c:26571)
          IdentifierType: names=['error_t'] (at None)
        ID: name='FAIL' (at pp.c:26571)
      Compound:  (at pp.c:26574)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26574)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26574)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26574)
        Compound:  (at pp.c:26576)
          If:  (at pp.c:26577)
            BinaryOp: op='||' (at pp.c:26577)
              BinaryOp: op='==' (at pp.c:26577)
                ID: name='reqState' (at pp.c:26577)
                ID: name='StateImplP__S_IDLE' (at pp.c:26577)
              BinaryOp: op='==' (at pp.c:26577)
                ArrayRef:  (at pp.c:26577)
                  ID: name='StateImplP__state' (at pp.c:26577)
                  ID: name='id' (at pp.c:26577)
                ID: name='StateImplP__S_IDLE' (at pp.c:26577)
            Compound:  (at pp.c:26577)
              Assignment: op='=' (at pp.c:26578)
                ArrayRef:  (at pp.c:26578)
                  ID: name='StateImplP__state' (at pp.c:26578)
                  ID: name='id' (at pp.c:26578)
                ID: name='reqState' (at pp.c:26578)
              Assignment: op='=' (at pp.c:26579)
                ID: name='returnVal' (at pp.c:26579)
                ID: name='SUCCESS' (at pp.c:26579)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26583)
          ExprList:  (at pp.c:26583)
            ID: name='__nesc_atomic' (at pp.c:26583)
      Return:  (at pp.c:26584)
        ID: name='returnVal' (at pp.c:26584)
  FuncDef:  (at pp.c:26588)
    Decl: name='ArbiterP__1__Resource__isOwner', quals=[], storage=['static'] (at pp.c:26588)
      FuncDecl: quals=None (at pp.c:26588)
        ParamList:  (at pp.c:26588)
          Decl: name='id', quals=[], storage=[] (at pp.c:26588)
            TypeDecl: declname='id', quals=[] (at pp.c:26588)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__isOwner', quals=[] (at pp.c:26588)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:26590)
      Compound:  (at pp.c:26593)
        If:  (at pp.c:26594)
          BinaryOp: op='&&' (at pp.c:26594)
            BinaryOp: op='==' (at pp.c:26594)
              ID: name='ArbiterP__1__resId' (at pp.c:26594)
              ID: name='id' (at pp.c:26594)
            BinaryOp: op='==' (at pp.c:26594)
              ID: name='ArbiterP__1__state' (at pp.c:26594)
              ID: name='ArbiterP__1__RES_BUSY' (at pp.c:26594)
          Compound:  (at pp.c:26594)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26595)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26595)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='TRUE' (at pp.c:26597)
            Return:  (at pp.c:26600)
              ID: name='__nesc_temp' (at pp.c:26600)
          Compound:  (at pp.c:26604)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26605)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26605)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='FALSE' (at pp.c:26607)
            Return:  (at pp.c:26610)
              ID: name='__nesc_temp' (at pp.c:26610)
  FuncDef:  (at pp.c:26616)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:26616)
      FuncDecl: quals=None (at pp.c:26616)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__release', quals=[] (at pp.c:26616)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26618)
      Compound:  (at pp.c:26621)
        If:  (at pp.c:26622)
          BinaryOp: op='==' (at pp.c:26622)
            ID: name='ArbiterP__1__resId' (at pp.c:26622)
            ID: name='ArbiterP__1__default_owner_id' (at pp.c:26622)
          Compound:  (at pp.c:26622)
            If:  (at pp.c:26623)
              BinaryOp: op='==' (at pp.c:26623)
                ID: name='ArbiterP__1__state' (at pp.c:26623)
                ID: name='ArbiterP__1__RES_GRANTING' (at pp.c:26623)
              Compound:  (at pp.c:26623)
                FuncCall:  (at None)
                  ID: name='ArbiterP__1__grantedTask__postTask' (at pp.c:26624)
                Compound:  (at pp.c:26625)
                  Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26626)
                    TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26626)
                      IdentifierType: names=['char', 'unsigned'] (at None)
                    ID: name='SUCCESS' (at pp.c:26628)
                  Return:  (at pp.c:26631)
                    ID: name='__nesc_temp' (at pp.c:26631)
              Compound:  (at pp.c:26634)
                If:  (at pp.c:26636)
                  BinaryOp: op='==' (at pp.c:26636)
                    ID: name='ArbiterP__1__state' (at pp.c:26636)
                    ID: name='ArbiterP__1__RES_IMM_GRANTING' (at pp.c:26636)
                  Compound:  (at pp.c:26636)
                    Assignment: op='=' (at pp.c:26637)
                      ID: name='ArbiterP__1__resId' (at pp.c:26637)
                      ID: name='ArbiterP__1__reqResId' (at pp.c:26637)
                    Assignment: op='=' (at pp.c:26638)
                      ID: name='ArbiterP__1__state' (at pp.c:26638)
                      ID: name='ArbiterP__1__RES_BUSY' (at pp.c:26638)
                    Compound:  (at pp.c:26639)
                      Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26640)
                        TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26640)
                          IdentifierType: names=['char', 'unsigned'] (at None)
                        ID: name='SUCCESS' (at pp.c:26642)
                      Return:  (at pp.c:26645)
                        ID: name='__nesc_temp' (at pp.c:26645)
      Return:  (at pp.c:26652)
        ID: name='FAIL' (at pp.c:26652)
  FuncDef:  (at pp.c:26656)
    Decl: name='SchedulerBasicP__TaskBasic__postTask', quals=[], storage=['static'] (at pp.c:26656)
      FuncDecl: quals=None (at pp.c:26656)
        ParamList:  (at pp.c:26656)
          Decl: name='id', quals=[], storage=[] (at pp.c:26656)
            TypeDecl: declname='id', quals=[] (at pp.c:26656)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SchedulerBasicP__TaskBasic__postTask', quals=[] (at pp.c:26656)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26657)
      Compound:  (at pp.c:26658)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26658)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26658)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26658)
        Compound:  (at pp.c:26660)
          Compound:  (at pp.c:26662)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26663)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26663)
                IdentifierType: names=['char', 'unsigned'] (at None)
              TernaryOp:  (at None)
                FuncCall:  (at None)
                  ID: name='SchedulerBasicP__pushTask' (at pp.c:26665)
                  ExprList:  (at pp.c:26665)
                    ID: name='id' (at pp.c:26665)
                ID: name='SUCCESS' (at pp.c:26665)
                ID: name='EBUSY' (at pp.c:26665)
            Compound:  (at pp.c:26667)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_end' (at pp.c:26669)
                ExprList:  (at pp.c:26669)
                  ID: name='__nesc_atomic' (at pp.c:26669)
              Return:  (at pp.c:26671)
                ID: name='__nesc_temp' (at pp.c:26671)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26676)
          ExprList:  (at pp.c:26676)
            ID: name='__nesc_atomic' (at pp.c:26676)
  FuncDef:  (at pp.c:26680)
    Decl: name='HplMsp430Usart0P__Usart__setModeSpi', quals=[], storage=['static'] (at pp.c:26680)
      FuncDecl: quals=None (at pp.c:26680)
        ParamList:  (at pp.c:26680)
          Decl: name='config', quals=[], storage=[] (at pp.c:26680)
            PtrDecl: quals=[] (at pp.c:26680)
              TypeDecl: declname='config', quals=[] (at pp.c:26680)
                IdentifierType: names=['msp430_spi_union_config_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__setModeSpi', quals=[] (at pp.c:26680)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26682)
      Compound:  (at pp.c:26684)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26684)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26684)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26684)
        Compound:  (at pp.c:26686)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__resetUsart' (at pp.c:26687)
            ExprList:  (at pp.c:26687)
              ID: name='TRUE' (at pp.c:26687)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__HplI2C__clearModeI2C' (at pp.c:26688)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__disableUart' (at pp.c:26689)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__configSpi' (at pp.c:26690)
            ExprList:  (at pp.c:26690)
              ID: name='config' (at pp.c:26690)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__enableSpi' (at pp.c:26691)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__resetUsart' (at pp.c:26692)
            ExprList:  (at pp.c:26692)
              ID: name='FALSE' (at pp.c:26692)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__clrIntr' (at pp.c:26693)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__disableIntr' (at pp.c:26694)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26697)
          ExprList:  (at pp.c:26697)
            ID: name='__nesc_atomic' (at pp.c:26697)
      Return:  (at pp.c:26698)
  FuncDef:  (at pp.c:26702)
    Decl: name='CC2420SpiP__Resource__request', quals=[], storage=['static'] (at pp.c:26702)
      FuncDecl: quals=None (at pp.c:26702)
        ParamList:  (at pp.c:26702)
          Decl: name='id', quals=[], storage=[] (at pp.c:26702)
            TypeDecl: declname='id', quals=[] (at pp.c:26702)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__request', quals=[] (at pp.c:26702)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26704)
      Compound:  (at pp.c:26706)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26706)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26706)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26706)
        Compound:  (at pp.c:26708)
          If:  (at pp.c:26709)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='CC2420SpiP__WorkingState__requestState' (at pp.c:26709)
                ExprList:  (at pp.c:26709)
                  ID: name='CC2420SpiP__S_BUSY' (at pp.c:26709)
              ID: name='SUCCESS' (at pp.c:26709)
            Compound:  (at pp.c:26709)
              Assignment: op='=' (at pp.c:26710)
                ID: name='CC2420SpiP__m_holder' (at pp.c:26710)
                ID: name='id' (at pp.c:26710)
              If:  (at pp.c:26711)
                FuncCall:  (at None)
                  ID: name='CC2420SpiP__SpiResource__isOwner' (at pp.c:26711)
                Compound:  (at pp.c:26711)
                  FuncCall:  (at None)
                    ID: name='CC2420SpiP__grant__postTask' (at pp.c:26712)
                Compound:  (at pp.c:26714)
                  FuncCall:  (at None)
                    ID: name='CC2420SpiP__SpiResource__request' (at pp.c:26715)
            Compound:  (at pp.c:26718)
              Assignment: op='|=' (at pp.c:26719)
                ID: name='CC2420SpiP__m_requests' (at pp.c:26719)
                BinaryOp: op='<<' (at pp.c:26719)
                  Constant: type='int', value='1' (at pp.c:26719)
                  ID: name='id' (at pp.c:26719)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26723)
          ExprList:  (at pp.c:26723)
            ID: name='__nesc_atomic' (at pp.c:26723)
      Return:  (at pp.c:26724)
        ID: name='SUCCESS' (at pp.c:26724)
  FuncDef:  (at pp.c:26728)
    Decl: name='CC2420TransmitP__attemptSend', quals=[], storage=['static'] (at pp.c:26728)
      FuncDecl: quals=None (at pp.c:26728)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__attemptSend', quals=[] (at pp.c:26728)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26730)
      Decl: name='status', quals=[], storage=[] (at pp.c:26731)
        TypeDecl: declname='status', quals=[] (at pp.c:26731)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='congestion', quals=[], storage=[] (at pp.c:26732)
        TypeDecl: declname='congestion', quals=[] (at pp.c:26732)
          IdentifierType: names=['bool'] (at None)
        ID: name='TRUE' (at pp.c:26732)
      Compound:  (at pp.c:26734)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26734)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26734)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26734)
        Compound:  (at pp.c:26736)
          If:  (at pp.c:26737)
            BinaryOp: op='==' (at pp.c:26737)
              ID: name='CC2420TransmitP__m_state' (at pp.c:26737)
              ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:26737)
            Compound:  (at pp.c:26737)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__SFLUSHTX__strobe' (at pp.c:26738)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:26739)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__CSN__set' (at pp.c:26740)
              Assignment: op='=' (at pp.c:26741)
                ID: name='CC2420TransmitP__m_state' (at pp.c:26741)
                ID: name='CC2420TransmitP__S_STARTED' (at pp.c:26741)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__Send__sendDone' (at pp.c:26742)
                ExprList:  (at pp.c:26742)
                  ID: name='CC2420TransmitP__m_msg' (at pp.c:26742)
                  ID: name='ECANCEL' (at pp.c:26742)
              Compound:  (at pp.c:26743)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:26745)
                  ExprList:  (at pp.c:26745)
                    ID: name='__nesc_atomic' (at pp.c:26745)
                Return:  (at pp.c:26747)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CSN__clr' (at pp.c:26755)
          Assignment: op='=' (at pp.c:26756)
            ID: name='status' (at pp.c:26756)
            TernaryOp:  (at pp.c:26756)
              ID: name='CC2420TransmitP__m_cca' (at pp.c:26756)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__STXONCCA__strobe' (at pp.c:26756)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__STXON__strobe' (at pp.c:26756)
          If:  (at pp.c:26757)
            UnaryOp: op='!' (at pp.c:26757)
              BinaryOp: op='&' (at pp.c:26757)
                ID: name='status' (at pp.c:26757)
                ID: name='CC2420_STATUS_TX_ACTIVE' (at pp.c:26757)
            Compound:  (at pp.c:26757)
              Assignment: op='=' (at pp.c:26758)
                ID: name='status' (at pp.c:26758)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__SNOP__strobe' (at pp.c:26758)
              If:  (at pp.c:26759)
                BinaryOp: op='&' (at pp.c:26759)
                  ID: name='status' (at pp.c:26759)
                  ID: name='CC2420_STATUS_TX_ACTIVE' (at pp.c:26759)
                Compound:  (at pp.c:26759)
                  Assignment: op='=' (at pp.c:26760)
                    ID: name='congestion' (at pp.c:26760)
                    ID: name='FALSE' (at pp.c:26760)
          Assignment: op='=' (at pp.c:26764)
            ID: name='CC2420TransmitP__m_state' (at pp.c:26764)
            TernaryOp:  (at pp.c:26764)
              ID: name='congestion' (at pp.c:26764)
              ID: name='CC2420TransmitP__S_SAMPLE_CCA' (at pp.c:26764)
              ID: name='CC2420TransmitP__S_SFD' (at pp.c:26764)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CSN__set' (at pp.c:26765)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26768)
          ExprList:  (at pp.c:26768)
            ID: name='__nesc_atomic' (at pp.c:26768)
      If:  (at pp.c:26770)
        ID: name='congestion' (at pp.c:26770)
        Compound:  (at pp.c:26770)
          Assignment: op='=' (at pp.c:26771)
            ID: name='CC2420TransmitP__totalCcaChecks' (at pp.c:26771)
            Constant: type='int', value='0' (at pp.c:26771)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:26772)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__congestionBackoff' (at pp.c:26773)
        Compound:  (at pp.c:26777)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:26778)
            ExprList:  (at pp.c:26778)
              ID: name='CC2420TransmitP__CC2420_ABORT_PERIOD' (at pp.c:26778)
  FuncDef:  (at pp.c:26783)
    Decl: name='CC2420SpiP__Strobe__strobe', quals=[], storage=['static'] (at pp.c:26783)
      FuncDecl: quals=None (at pp.c:26783)
        ParamList:  (at pp.c:26783)
          Decl: name='addr', quals=[], storage=[] (at pp.c:26783)
            TypeDecl: declname='addr', quals=[] (at pp.c:26783)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Strobe__strobe', quals=[] (at pp.c:26783)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:26785)
      Compound:  (at pp.c:26786)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26786)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26786)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26786)
        Compound:  (at pp.c:26788)
          If:  (at pp.c:26789)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:26789)
            Compound:  (at pp.c:26789)
              Compound:  (at pp.c:26790)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26791)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26791)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  Constant: type='int', value='0' (at pp.c:26793)
                Compound:  (at pp.c:26795)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:26797)
                    ExprList:  (at pp.c:26797)
                      ID: name='__nesc_atomic' (at pp.c:26797)
                  Return:  (at pp.c:26799)
                    ID: name='__nesc_temp' (at pp.c:26799)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26805)
          ExprList:  (at pp.c:26805)
            ID: name='__nesc_atomic' (at pp.c:26805)
      Return:  (at pp.c:26807)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:26807)
          ExprList:  (at pp.c:26807)
            ID: name='addr' (at pp.c:26807)
  FuncDef:  (at pp.c:26811)
    Decl: name='StateImplP__State__isState', quals=[], storage=['static'] (at pp.c:26811)
      FuncDecl: quals=None (at pp.c:26811)
        ParamList:  (at pp.c:26811)
          Decl: name='id', quals=[], storage=[] (at pp.c:26811)
            TypeDecl: declname='id', quals=[] (at pp.c:26811)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='myState', quals=[], storage=[] (at pp.c:26811)
            TypeDecl: declname='myState', quals=[] (at pp.c:26811)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__isState', quals=[] (at pp.c:26811)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:26813)
      Decl: name='isState', quals=[], storage=[] (at pp.c:26814)
        TypeDecl: declname='isState', quals=[] (at pp.c:26814)
          IdentifierType: names=['bool'] (at None)
      Compound:  (at pp.c:26817)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26817)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26817)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26817)
        Assignment: op='=' (at pp.c:26819)
          ID: name='isState' (at pp.c:26819)
          BinaryOp: op='==' (at pp.c:26819)
            ArrayRef:  (at pp.c:26819)
              ID: name='StateImplP__state' (at pp.c:26819)
              ID: name='id' (at pp.c:26819)
            ID: name='myState' (at pp.c:26819)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26821)
          ExprList:  (at pp.c:26821)
            ID: name='__nesc_atomic' (at pp.c:26821)
      Return:  (at pp.c:26822)
        ID: name='isState' (at pp.c:26822)
  FuncDef:  (at pp.c:26826)
    Decl: name='Msp430SpiNoDmaP__0__SpiByte__write', quals=[], storage=['static'] (at pp.c:26826)
      FuncDecl: quals=None (at pp.c:26826)
        ParamList:  (at pp.c:26826)
          Decl: name='tx', quals=[], storage=[] (at pp.c:26826)
            TypeDecl: declname='tx', quals=[] (at pp.c:26826)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__SpiByte__write', quals=[] (at pp.c:26826)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:26828)
      Decl: name='byte', quals=[], storage=[] (at pp.c:26829)
        TypeDecl: declname='byte', quals=[] (at pp.c:26829)
          IdentifierType: names=['uint8_t'] (at None)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__tx' (at pp.c:26832)
        ExprList:  (at pp.c:26832)
          ID: name='tx' (at pp.c:26832)
      While:  (at pp.c:26833)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__Usart__isRxIntrPending' (at pp.c:26833)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__clrRxIntr' (at pp.c:26834)
      Assignment: op='=' (at pp.c:26835)
        ID: name='byte' (at pp.c:26835)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Usart__rx' (at pp.c:26835)
      Return:  (at pp.c:26837)
        ID: name='byte' (at pp.c:26837)
  FuncDef:  (at pp.c:26841)
    Decl: name='CC2420SpiP__Resource__release', quals=[], storage=['static'] (at pp.c:26841)
      FuncDecl: quals=None (at pp.c:26841)
        ParamList:  (at pp.c:26841)
          Decl: name='id', quals=[], storage=[] (at pp.c:26841)
            TypeDecl: declname='id', quals=[] (at pp.c:26841)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__release', quals=[] (at pp.c:26841)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26843)
      Decl: name='i', quals=[], storage=[] (at pp.c:26844)
        TypeDecl: declname='i', quals=[] (at pp.c:26844)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:26847)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26847)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26847)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26847)
        Compound:  (at pp.c:26849)
          If:  (at pp.c:26850)
            BinaryOp: op='!=' (at pp.c:26850)
              ID: name='CC2420SpiP__m_holder' (at pp.c:26850)
              ID: name='id' (at pp.c:26850)
            Compound:  (at pp.c:26850)
              Compound:  (at pp.c:26851)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26852)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26852)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:26854)
                Compound:  (at pp.c:26856)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:26858)
                    ExprList:  (at pp.c:26858)
                      ID: name='__nesc_atomic' (at pp.c:26858)
                  Return:  (at pp.c:26860)
                    ID: name='__nesc_temp' (at pp.c:26860)
          Assignment: op='=' (at pp.c:26865)
            ID: name='CC2420SpiP__m_holder' (at pp.c:26865)
            ID: name='CC2420SpiP__NO_HOLDER' (at pp.c:26865)
          If:  (at pp.c:26866)
            UnaryOp: op='!' (at pp.c:26866)
              ID: name='CC2420SpiP__m_requests' (at pp.c:26866)
            Compound:  (at pp.c:26866)
              FuncCall:  (at None)
                ID: name='CC2420SpiP__WorkingState__toIdle' (at pp.c:26867)
              FuncCall:  (at None)
                ID: name='CC2420SpiP__attemptRelease' (at pp.c:26868)
            Compound:  (at pp.c:26870)
              For:  (at pp.c:26871)
                Assignment: op='=' (at pp.c:26871)
                  ID: name='i' (at pp.c:26871)
                  BinaryOp: op='+' (at pp.c:26871)
                    ID: name='CC2420SpiP__m_holder' (at pp.c:26871)
                    Constant: type='int', value='1' (at pp.c:26871)
                UnaryOp: op='p++' (at pp.c:26871)
                  ID: name='i' (at pp.c:26871)
                Compound:  (at pp.c:26871)
                  Assignment: op='%=' (at pp.c:26872)
                    ID: name='i' (at pp.c:26872)
                    ID: name='CC2420SpiP__RESOURCE_COUNT' (at pp.c:26872)
                  If:  (at pp.c:26874)
                    BinaryOp: op='&' (at pp.c:26874)
                      ID: name='CC2420SpiP__m_requests' (at pp.c:26874)
                      BinaryOp: op='<<' (at pp.c:26874)
                        Constant: type='int', value='1' (at pp.c:26874)
                        ID: name='i' (at pp.c:26874)
                    Compound:  (at pp.c:26874)
                      Assignment: op='=' (at pp.c:26875)
                        ID: name='CC2420SpiP__m_holder' (at pp.c:26875)
                        ID: name='i' (at pp.c:26875)
                      Assignment: op='&=' (at pp.c:26876)
                        ID: name='CC2420SpiP__m_requests' (at pp.c:26876)
                        UnaryOp: op='~' (at pp.c:26876)
                          BinaryOp: op='<<' (at pp.c:26876)
                            Constant: type='int', value='1' (at pp.c:26876)
                            ID: name='i' (at pp.c:26876)
                      FuncCall:  (at None)
                        ID: name='CC2420SpiP__grant__postTask' (at pp.c:26877)
                      Compound:  (at pp.c:26878)
                        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26879)
                          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26879)
                            IdentifierType: names=['char', 'unsigned'] (at None)
                          ID: name='SUCCESS' (at pp.c:26881)
                        Compound:  (at pp.c:26883)
                          FuncCall:  (at None)
                            ID: name='__nesc_atomic_end' (at pp.c:26885)
                            ExprList:  (at pp.c:26885)
                              ID: name='__nesc_atomic' (at pp.c:26885)
                          Return:  (at pp.c:26887)
                            ID: name='__nesc_temp' (at pp.c:26887)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26895)
          ExprList:  (at pp.c:26895)
            ID: name='__nesc_atomic' (at pp.c:26895)
      Return:  (at pp.c:26897)
        ID: name='SUCCESS' (at pp.c:26897)
  FuncDef:  (at pp.c:26901)
    Decl: name='CC2420SpiP__attemptRelease', quals=[], storage=['static'] (at pp.c:26901)
      FuncDecl: quals=None (at pp.c:26901)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__attemptRelease', quals=[] (at pp.c:26901)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26903)
      If:  (at pp.c:26906)
        BinaryOp: op='||' (at pp.c:26908)
          BinaryOp: op='||' (at pp.c:26908)
            BinaryOp: op='>' (at pp.c:26908)
              ID: name='CC2420SpiP__m_requests' (at pp.c:26908)
              Constant: type='int', value='0' (at pp.c:26908)
            BinaryOp: op='!=' (at pp.c:26909)
              ID: name='CC2420SpiP__m_holder' (at pp.c:26909)
              ID: name='CC2420SpiP__NO_HOLDER' (at pp.c:26909)
          UnaryOp: op='!' (at None)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:26910)
        Compound:  (at pp.c:26910)
          Return:  (at pp.c:26911)
            ID: name='FAIL' (at pp.c:26911)
      Assignment: op='=' (at pp.c:26914)
        ID: name='CC2420SpiP__release' (at pp.c:26914)
        ID: name='TRUE' (at pp.c:26914)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__ChipSpiResource__releasing' (at pp.c:26915)
      Compound:  (at pp.c:26918)
        If:  (at pp.c:26919)
          ID: name='CC2420SpiP__release' (at pp.c:26919)
          Compound:  (at pp.c:26919)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__SpiResource__release' (at pp.c:26920)
            Compound:  (at pp.c:26921)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26922)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26922)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='SUCCESS' (at pp.c:26924)
              Return:  (at pp.c:26927)
                ID: name='__nesc_temp' (at pp.c:26927)
      Return:  (at pp.c:26931)
        ID: name='EBUSY' (at pp.c:26931)
  FuncDef:  (at pp.c:26935)
    Decl: name='HplMsp430Usart0P__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:26935)
      FuncDecl: quals=None (at pp.c:26935)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__disableSpi', quals=[] (at pp.c:26935)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26937)
      Compound:  (at pp.c:26940)
        Assignment: op='&=' (at pp.c:26941)
          ID: name='HplMsp430Usart0P__ME1' (at pp.c:26941)
          UnaryOp: op='~' (at pp.c:26941)
            BinaryOp: op='<<' (at pp.c:26941)
              Constant: type='int', value='1' (at pp.c:26941)
              Constant: type='int', value='6' (at pp.c:26941)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__SIMO__selectIOFunc' (at pp.c:26942)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__SOMI__selectIOFunc' (at pp.c:26943)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__UCLK__selectIOFunc' (at pp.c:26944)
  FuncDef:  (at pp.c:26949)
    Decl: name='HplMsp430GeneralIOP__26__IO__set', quals=[], storage=['static'] (at pp.c:26949)
      FuncDecl: quals=None (at pp.c:26949)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__26__IO__set', quals=[] (at pp.c:26949)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26951)
      Compound:  (at pp.c:26953)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26953)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26953)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26953)
        Assignment: op='|=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:26955)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:26955)
          BinaryOp: op='<<' (at pp.c:26955)
            Constant: type='int', value='0x01' (at pp.c:26955)
            Constant: type='int', value='2' (at pp.c:26955)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26957)
          ExprList:  (at pp.c:26957)
            ID: name='__nesc_atomic' (at pp.c:26957)
  FuncDef:  (at pp.c:26961)
    Decl: name='HplMsp430GeneralIOP__26__IO__clr', quals=[], storage=['static'] (at pp.c:26961)
      FuncDecl: quals=None (at pp.c:26961)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__26__IO__clr', quals=[] (at pp.c:26961)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26963)
      Compound:  (at pp.c:26965)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26965)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26965)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26965)
        Assignment: op='&=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:26967)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:26967)
          UnaryOp: op='~' (at pp.c:26967)
            BinaryOp: op='<<' (at pp.c:26967)
              Constant: type='int', value='0x01' (at pp.c:26967)
              Constant: type='int', value='2' (at pp.c:26967)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26969)
          ExprList:  (at pp.c:26969)
            ID: name='__nesc_atomic' (at pp.c:26969)
  FuncDef:  (at pp.c:26973)
    Decl: name='CC2420TransmitP__signalDone', quals=[], storage=['static'] (at pp.c:26973)
      FuncDecl: quals=None (at pp.c:26973)
        ParamList:  (at pp.c:26973)
          Decl: name='err', quals=[], storage=[] (at pp.c:26973)
            TypeDecl: declname='err', quals=[] (at pp.c:26973)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__signalDone', quals=[] (at pp.c:26973)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26975)
      Assignment: op='=' (at pp.c:26978)
        ID: name='CC2420TransmitP__m_state' (at pp.c:26978)
        ID: name='CC2420TransmitP__S_STARTED' (at pp.c:26978)
      Assignment: op='=' (at pp.c:26979)
        ID: name='CC2420TransmitP__abortSpiRelease' (at pp.c:26979)
        ID: name='FALSE' (at pp.c:26979)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__ChipSpiResource__attemptRelease' (at pp.c:26980)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__Send__sendDone' (at pp.c:26981)
        ExprList:  (at pp.c:26981)
          ID: name='CC2420TransmitP__m_msg' (at pp.c:26981)
          ID: name='err' (at pp.c:26981)
  FuncDef:  (at pp.c:26985)
    Decl: name='GpioCaptureC__0__enableCapture', quals=[], storage=['static'] (at pp.c:26985)
      FuncDecl: quals=None (at pp.c:26985)
        ParamList:  (at pp.c:26985)
          Decl: name='mode', quals=[], storage=[] (at pp.c:26985)
            TypeDecl: declname='mode', quals=[] (at pp.c:26985)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='GpioCaptureC__0__enableCapture', quals=[] (at pp.c:26985)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26987)
      Compound:  (at pp.c:26990)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430TimerControl__disableEvents' (at pp.c:26991)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__GeneralIO__selectModuleFunc' (at pp.c:26992)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt' (at pp.c:26993)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430Capture__clearOverflow' (at pp.c:26994)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430TimerControl__setControlAsCapture' (at pp.c:26995)
          ExprList:  (at pp.c:26995)
            ID: name='mode' (at pp.c:26995)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430TimerControl__enableEvents' (at pp.c:26996)
      Return:  (at pp.c:26998)
        ID: name='SUCCESS' (at pp.c:26998)
  FuncDef:  (at pp.c:27002)
    Decl: name='HplMsp430GeneralIOP__30__IO__clr', quals=[], storage=['static'] (at pp.c:27002)
      FuncDecl: quals=None (at pp.c:27002)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__30__IO__clr', quals=[] (at pp.c:27002)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27004)
      Compound:  (at pp.c:27006)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27006)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27006)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27006)
        Assignment: op='&=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:27008)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:27008)
          UnaryOp: op='~' (at pp.c:27008)
            BinaryOp: op='<<' (at pp.c:27008)
              Constant: type='int', value='0x01' (at pp.c:27008)
              Constant: type='int', value='6' (at pp.c:27008)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27010)
          ExprList:  (at pp.c:27010)
            ID: name='__nesc_atomic' (at pp.c:27010)
  FuncDef:  (at pp.c:27014)
    Decl: name='HplMsp430GeneralIOP__30__IO__set', quals=[], storage=['static'] (at pp.c:27014)
      FuncDecl: quals=None (at pp.c:27014)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__30__IO__set', quals=[] (at pp.c:27014)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27016)
      Compound:  (at pp.c:27018)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27018)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27018)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27018)
        Assignment: op='|=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:27020)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:27020)
          BinaryOp: op='<<' (at pp.c:27020)
            Constant: type='int', value='0x01' (at pp.c:27020)
            Constant: type='int', value='6' (at pp.c:27020)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27022)
          ExprList:  (at pp.c:27022)
            ID: name='__nesc_atomic' (at pp.c:27022)
  FuncDef:  (at pp.c:27026)
    Decl: name='CC2420SpiP__Ram__write', quals=[], storage=['static'] (at pp.c:27026)
      FuncDecl: quals=None (at pp.c:27026)
        ParamList:  (at pp.c:27026)
          Decl: name='addr', quals=[], storage=[] (at pp.c:27026)
            TypeDecl: declname='addr', quals=[] (at pp.c:27026)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='offset', quals=[], storage=[] (at pp.c:27026)
            TypeDecl: declname='offset', quals=[] (at pp.c:27026)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:27027)
            PtrDecl: quals=[] (at pp.c:27027)
              TypeDecl: declname='data', quals=[] (at pp.c:27027)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:27028)
            TypeDecl: declname='len', quals=[] (at pp.c:27028)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Ram__write', quals=[] (at pp.c:27026)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:27030)
      Decl: name='status', quals=[], storage=[] (at pp.c:27032)
        TypeDecl: declname='status', quals=[] (at pp.c:27032)
          IdentifierType: names=['cc2420_status_t'] (at None)
        Constant: type='int', value='0' (at pp.c:27032)
      Decl: name='tmpLen', quals=[], storage=[] (at pp.c:27033)
        TypeDecl: declname='tmpLen', quals=[] (at pp.c:27033)
          IdentifierType: names=['uint8_t'] (at None)
        ID: name='len' (at pp.c:27033)
      Decl: name='tmpData', quals=[], storage=[] (at pp.c:27034)
        PtrDecl: quals=[] (at pp.c:27034)
          TypeDecl: declname='tmpData', quals=[] (at pp.c:27034)
            IdentifierType: names=['uint8_t'] (at None)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:27034)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
          ID: name='data' (at pp.c:27034)
      Compound:  (at pp.c:27036)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27036)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27036)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27036)
        Compound:  (at pp.c:27038)
          If:  (at pp.c:27039)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:27039)
            Compound:  (at pp.c:27039)
              Compound:  (at pp.c:27040)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:27041)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:27041)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='status' (at pp.c:27043)
                Compound:  (at pp.c:27045)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:27047)
                    ExprList:  (at pp.c:27047)
                      ID: name='__nesc_atomic' (at pp.c:27047)
                  Return:  (at pp.c:27049)
                    ID: name='__nesc_temp' (at pp.c:27049)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27055)
          ExprList:  (at pp.c:27055)
            ID: name='__nesc_atomic' (at pp.c:27055)
      Assignment: op='+=' (at pp.c:27057)
        ID: name='addr' (at pp.c:27057)
        ID: name='offset' (at pp.c:27057)
      Assignment: op='=' (at pp.c:27059)
        ID: name='status' (at pp.c:27059)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:27059)
          ExprList:  (at pp.c:27059)
            BinaryOp: op='|' (at pp.c:27059)
              ID: name='addr' (at pp.c:27059)
              Constant: type='int', value='0x80' (at pp.c:27059)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__SpiByte__write' (at pp.c:27060)
        ExprList:  (at pp.c:27060)
          BinaryOp: op='&' (at pp.c:27060)
            BinaryOp: op='>>' (at pp.c:27060)
              ID: name='addr' (at pp.c:27060)
              Constant: type='int', value='1' (at pp.c:27060)
            Constant: type='int', value='0xc0' (at pp.c:27060)
      For:  (at pp.c:27061)
        ID: name='len' (at pp.c:27061)
        UnaryOp: op='p--' (at pp.c:27061)
          ID: name='len' (at pp.c:27061)
        Compound:  (at pp.c:27061)
          FuncCall:  (at None)
            ID: name='CC2420SpiP__SpiByte__write' (at pp.c:27062)
            ExprList:  (at pp.c:27062)
              ArrayRef:  (at pp.c:27062)
                ID: name='tmpData' (at pp.c:27062)
                BinaryOp: op='-' (at pp.c:27062)
                  ID: name='tmpLen' (at pp.c:27062)
                  ID: name='len' (at pp.c:27062)
      Return:  (at pp.c:27065)
        ID: name='status' (at pp.c:27065)
  FuncDef:  (at pp.c:27069)
    Decl: name='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[], storage=['static'] (at pp.c:27069)
      FuncDecl: quals=None (at pp.c:27069)
        ParamList:  (at pp.c:27069)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27069)
            PtrDecl: quals=[] (at pp.c:27069)
              TypeDecl: declname='msg', quals=[] (at pp.c:27069)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[] (at pp.c:27069)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27070)
      FuncCall:  (at None)
        ID: name='__nesc_hton_int8' (at pp.c:27071)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:27071)
                ExprList:  (at pp.c:27071)
                  ID: name='msg' (at pp.c:27071)
              ID: name='timesync' (at pp.c:27071)
            ID: name='nxdata' (at pp.c:27071)
          ID: name='FALSE' (at pp.c:27071)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint32' (at pp.c:27072)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:27072)
                ExprList:  (at pp.c:27072)
                  ID: name='msg' (at pp.c:27072)
              ID: name='timestamp' (at pp.c:27072)
            ID: name='nxdata' (at pp.c:27072)
          ID: name='CC2420_INVALID_TIMESTAMP' (at pp.c:27072)
  FuncDef:  (at pp.c:27076)
    Decl: name='TransformAlarmC__1__set_alarm', quals=[], storage=['static'] (at pp.c:27076)
      FuncDecl: quals=None (at pp.c:27076)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__set_alarm', quals=[] (at pp.c:27076)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27077)
      Decl: name='now', quals=[], storage=[] (at pp.c:27078)
        TypeDecl: declname='now', quals=[] (at pp.c:27078)
          IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__1__Counter__get' (at pp.c:27078)
      Decl: name='expires', quals=[], storage=[] (at pp.c:27080)
        TypeDecl: declname='expires', quals=[] (at pp.c:27080)
          IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
      Decl: name='remaining', quals=[], storage=[] (at pp.c:27082)
        TypeDecl: declname='remaining', quals=[] (at pp.c:27082)
          IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
      Assignment: op='=' (at pp.c:27087)
        ID: name='expires' (at pp.c:27087)
        BinaryOp: op='+' (at pp.c:27087)
          ID: name='TransformAlarmC__1__m_t0' (at pp.c:27087)
          ID: name='TransformAlarmC__1__m_dt' (at pp.c:27087)
      Assignment: op='=' (at pp.c:27090)
        ID: name='remaining' (at pp.c:27090)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
          BinaryOp: op='-' (at pp.c:27090)
            ID: name='expires' (at pp.c:27090)
            ID: name='now' (at pp.c:27090)
      If:  (at pp.c:27093)
        BinaryOp: op='<=' (at pp.c:27093)
          ID: name='TransformAlarmC__1__m_t0' (at pp.c:27093)
          ID: name='now' (at pp.c:27093)
        Compound:  (at pp.c:27094)
          If:  (at pp.c:27095)
            BinaryOp: op='&&' (at pp.c:27095)
              BinaryOp: op='>=' (at pp.c:27095)
                ID: name='expires' (at pp.c:27095)
                ID: name='TransformAlarmC__1__m_t0' (at pp.c:27095)
              BinaryOp: op='<=' (at pp.c:27096)
                ID: name='expires' (at pp.c:27096)
                ID: name='now' (at pp.c:27096)
            Compound:  (at pp.c:27096)
              Assignment: op='=' (at pp.c:27097)
                ID: name='remaining' (at pp.c:27097)
                Constant: type='int', value='0' (at pp.c:27097)
        Compound:  (at pp.c:27100)
          If:  (at pp.c:27101)
            BinaryOp: op='||' (at pp.c:27101)
              BinaryOp: op='>=' (at pp.c:27101)
                ID: name='expires' (at pp.c:27101)
                ID: name='TransformAlarmC__1__m_t0' (at pp.c:27101)
              BinaryOp: op='<=' (at pp.c:27102)
                ID: name='expires' (at pp.c:27102)
                ID: name='now' (at pp.c:27102)
            Compound:  (at pp.c:27102)
              Assignment: op='=' (at pp.c:27103)
                ID: name='remaining' (at pp.c:27103)
                Constant: type='int', value='0' (at pp.c:27103)
      If:  (at pp.c:27107)
        BinaryOp: op='>' (at pp.c:27107)
          ID: name='remaining' (at pp.c:27107)
          ID: name='TransformAlarmC__1__MAX_DELAY' (at pp.c:27107)
        Compound:  (at pp.c:27108)
          Assignment: op='=' (at pp.c:27109)
            ID: name='TransformAlarmC__1__m_t0' (at pp.c:27109)
            BinaryOp: op='+' (at pp.c:27109)
              ID: name='now' (at pp.c:27109)
              ID: name='TransformAlarmC__1__MAX_DELAY' (at pp.c:27109)
          Assignment: op='=' (at pp.c:27110)
            ID: name='TransformAlarmC__1__m_dt' (at pp.c:27110)
            BinaryOp: op='-' (at pp.c:27110)
              ID: name='remaining' (at pp.c:27110)
              ID: name='TransformAlarmC__1__MAX_DELAY' (at pp.c:27110)
          Assignment: op='=' (at pp.c:27111)
            ID: name='remaining' (at pp.c:27111)
            ID: name='TransformAlarmC__1__MAX_DELAY' (at pp.c:27111)
        Compound:  (at pp.c:27114)
          Assignment: op='+=' (at pp.c:27115)
            ID: name='TransformAlarmC__1__m_t0' (at pp.c:27115)
            ID: name='TransformAlarmC__1__m_dt' (at pp.c:27115)
          Assignment: op='=' (at pp.c:27116)
            ID: name='TransformAlarmC__1__m_dt' (at pp.c:27116)
            Constant: type='int', value='0' (at pp.c:27116)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__AlarmFrom__startAt' (at pp.c:27118)
        ExprList:  (at None)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__1__from_size_type'] (at None)
              ID: name='now' (at pp.c:27118)
            Constant: type='int', value='5' (at pp.c:27118)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__1__from_size_type'] (at None)
              ID: name='remaining' (at pp.c:27119)
            Constant: type='int', value='5' (at pp.c:27119)
  FuncDef:  (at pp.c:27123)
    Decl: name='TransformCounterC__1__Counter__get', quals=[], storage=['static'] (at pp.c:27123)
      FuncDecl: quals=None (at pp.c:27123)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__1__Counter__get', quals=[] (at pp.c:27123)
          IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
    Compound:  (at pp.c:27124)
      Decl: name='rv', quals=[], storage=[] (at pp.c:27125)
        TypeDecl: declname='rv', quals=[] (at pp.c:27125)
          IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
        Constant: type='int', value='0' (at pp.c:27125)
      Compound:  (at pp.c:27128)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27128)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27128)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27128)
        Compound:  (at pp.c:27129)
          Decl: name='high', quals=[], storage=[] (at pp.c:27130)
            TypeDecl: declname='high', quals=[] (at pp.c:27130)
              IdentifierType: names=['TransformCounterC__1__upper_count_type'] (at None)
            ID: name='TransformCounterC__1__m_upper' (at pp.c:27130)
          Decl: name='low', quals=[], storage=[] (at pp.c:27131)
            TypeDecl: declname='low', quals=[] (at pp.c:27131)
              IdentifierType: names=['TransformCounterC__1__from_size_type'] (at None)
            FuncCall:  (at None)
              ID: name='TransformCounterC__1__CounterFrom__get' (at pp.c:27131)
          If:  (at pp.c:27134)
            FuncCall:  (at None)
              ID: name='TransformCounterC__1__CounterFrom__isOverflowPending' (at pp.c:27134)
            Compound:  (at pp.c:27135)
              UnaryOp: op='p++' (at pp.c:27142)
                ID: name='high' (at pp.c:27142)
              Assignment: op='=' (at pp.c:27143)
                ID: name='low' (at pp.c:27143)
                FuncCall:  (at None)
                  ID: name='TransformCounterC__1__CounterFrom__get' (at pp.c:27143)
          Compound:  (at pp.c:27145)
            Decl: name='high_to', quals=[], storage=[] (at pp.c:27146)
              TypeDecl: declname='high_to', quals=[] (at pp.c:27146)
                IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
              ID: name='high' (at pp.c:27146)
            Decl: name='low_to', quals=[], storage=[] (at pp.c:27147)
              TypeDecl: declname='low_to', quals=[] (at pp.c:27147)
                IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
              BinaryOp: op='>>' (at pp.c:27147)
                ID: name='low' (at pp.c:27147)
                ID: name='TransformCounterC__1__LOW_SHIFT_RIGHT' (at pp.c:27147)
            Assignment: op='=' (at pp.c:27150)
              ID: name='rv' (at pp.c:27150)
              BinaryOp: op='|' (at pp.c:27150)
                BinaryOp: op='<<' (at pp.c:27150)
                  ID: name='high_to' (at pp.c:27150)
                  ID: name='TransformCounterC__1__HIGH_SHIFT_LEFT' (at pp.c:27150)
                ID: name='low_to' (at pp.c:27150)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27154)
          ExprList:  (at pp.c:27154)
            ID: name='__nesc_atomic' (at pp.c:27154)
      Return:  (at pp.c:27155)
        ID: name='rv' (at pp.c:27155)
  FuncDef:  (at pp.c:27159)
    Decl: name='sig_TIMERB1_VECTOR', quals=[], storage=[] (at pp.c:27159)
      FuncDecl: quals=None (at pp.c:27159)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_TIMERB1_VECTOR', quals=[] (at pp.c:27159)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27161)
      FuncCall:  (at None)
        ID: name='Msp430TimerCommonP__VectorTimerB1__fired' (at pp.c:27163)
  FuncDef:  (at pp.c:27167)
    Decl: name='main', quals=[], storage=[] (at pp.c:27167)
      FuncDecl: quals=None (at pp.c:27167)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='main', quals=[] (at pp.c:27167)
          IdentifierType: names=['int'] (at None)
    Compound:  (at pp.c:27169)
      Compound:  (at pp.c:27170)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27170)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27170)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27170)
        Compound:  (at pp.c:27171)
          Compound:  (at pp.c:27177)
          FuncCall:  (at None)
            ID: name='RealMainP__Scheduler__init' (at pp.c:27182)
          FuncCall:  (at None)
            ID: name='RealMainP__PlatformInit__init' (at pp.c:27188)
          While:  (at pp.c:27189)
            FuncCall:  (at None)
              ID: name='RealMainP__Scheduler__runNextTask' (at pp.c:27189)
          FuncCall:  (at None)
            ID: name='RealMainP__SoftwareInit__init' (at pp.c:27195)
          While:  (at pp.c:27196)
            FuncCall:  (at None)
              ID: name='RealMainP__Scheduler__runNextTask' (at pp.c:27196)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27199)
          ExprList:  (at pp.c:27199)
            ID: name='__nesc_atomic' (at pp.c:27199)
      FuncCall:  (at None)
        ID: name='__nesc_enable_interrupt' (at pp.c:27202)
      FuncCall:  (at None)
        ID: name='RealMainP__Boot__booted' (at pp.c:27204)
      FuncCall:  (at None)
        ID: name='RealMainP__Scheduler__taskLoop' (at pp.c:27207)
      Return:  (at pp.c:27212)
        UnaryOp: op='-' (at pp.c:27212)
          Constant: type='int', value='1' (at pp.c:27212)
  FuncDef:  (at pp.c:27216)
    Decl: name='Msp430ClockP__set_dco_calib', quals=[], storage=['static'] (at pp.c:27216)
      FuncDecl: quals=None (at pp.c:27216)
        ParamList:  (at pp.c:27216)
          Decl: name='calib', quals=[], storage=[] (at pp.c:27216)
            TypeDecl: declname='calib', quals=[] (at pp.c:27216)
              IdentifierType: names=['int'] (at None)
        TypeDecl: declname='Msp430ClockP__set_dco_calib', quals=[] (at pp.c:27216)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27217)
      Assignment: op='=' (at pp.c:27218)
        ID: name='BCSCTL1' (at pp.c:27218)
        BinaryOp: op='|' (at pp.c:27218)
          BinaryOp: op='&' (at pp.c:27218)
            ID: name='BCSCTL1' (at pp.c:27218)
            UnaryOp: op='~' (at pp.c:27218)
              Constant: type='int', value='0x07' (at pp.c:27218)
          BinaryOp: op='&' (at pp.c:27218)
            BinaryOp: op='>>' (at pp.c:27218)
              ID: name='calib' (at pp.c:27218)
              Constant: type='int', value='8' (at pp.c:27218)
            Constant: type='int', value='0x07' (at pp.c:27218)
      Assignment: op='=' (at pp.c:27219)
        ID: name='DCOCTL' (at pp.c:27219)
        BinaryOp: op='&' (at pp.c:27219)
          ID: name='calib' (at pp.c:27219)
          Constant: type='int', value='0xff' (at pp.c:27219)
  FuncDef:  (at pp.c:27223)
    Decl: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit', quals=[], storage=['static'] (at pp.c:27223)
      FuncDecl: quals=None (at pp.c:27223)
        ParamList:  (at pp.c:27223)
          Decl: name='set', quals=[], storage=[] (at pp.c:27223)
            TypeDecl: declname='set', quals=[] (at pp.c:27223)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='MotePlatformC__TOSH_FLASH_M25P_DP_bit', quals=[] (at pp.c:27223)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27225)
      If:  (at pp.c:27226)
        ID: name='set' (at pp.c:27226)
        Compound:  (at pp.c:27226)
          FuncCall:  (at None)
            ID: name='TOSH_SET_SIMO0_PIN' (at pp.c:27227)
        Compound:  (at pp.c:27229)
          FuncCall:  (at None)
            ID: name='TOSH_CLR_SIMO0_PIN' (at pp.c:27231)
      FuncCall:  (at None)
        ID: name='TOSH_SET_UCLK0_PIN' (at pp.c:27234)
      FuncCall:  (at None)
        ID: name='TOSH_CLR_UCLK0_PIN' (at pp.c:27235)
  FuncDef:  (at pp.c:27239)
    Decl: name='HplMsp430GeneralIOP__36__IO__set', quals=[], storage=['static'] (at pp.c:27239)
      FuncDecl: quals=None (at pp.c:27239)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__36__IO__set', quals=[] (at pp.c:27239)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27241)
      Compound:  (at pp.c:27243)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27243)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27243)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27243)
        Assignment: op='|=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:27245)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='49U' (at pp.c:27245)
          BinaryOp: op='<<' (at pp.c:27245)
            Constant: type='int', value='0x01' (at pp.c:27245)
            Constant: type='int', value='4' (at pp.c:27245)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27247)
          ExprList:  (at pp.c:27247)
            ID: name='__nesc_atomic' (at pp.c:27247)
  FuncDef:  (at pp.c:27251)
    Decl: name='SchedulerBasicP__Scheduler__runNextTask', quals=[], storage=['static'] (at pp.c:27251)
      FuncDecl: quals=None (at pp.c:27251)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SchedulerBasicP__Scheduler__runNextTask', quals=[] (at pp.c:27251)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:27252)
      Decl: name='nextTask', quals=[], storage=[] (at pp.c:27253)
        TypeDecl: declname='nextTask', quals=[] (at pp.c:27253)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:27257)
        Assignment: op='=' (at pp.c:27258)
          ID: name='nextTask' (at pp.c:27258)
          FuncCall:  (at None)
            ID: name='SchedulerBasicP__popTask' (at pp.c:27258)
        If:  (at pp.c:27259)
          BinaryOp: op='==' (at pp.c:27259)
            ID: name='nextTask' (at pp.c:27259)
            ID: name='SchedulerBasicP__NO_TASK' (at pp.c:27259)
          Compound:  (at pp.c:27260)
            Compound:  (at pp.c:27261)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:27262)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:27262)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='FALSE' (at pp.c:27264)
              Return:  (at pp.c:27267)
                ID: name='__nesc_temp' (at pp.c:27267)
      FuncCall:  (at None)
        ID: name='SchedulerBasicP__TaskBasic__runTask' (at pp.c:27272)
        ExprList:  (at pp.c:27272)
          ID: name='nextTask' (at pp.c:27272)
      Return:  (at pp.c:27273)
        ID: name='TRUE' (at pp.c:27273)
  FuncDef:  (at pp.c:27277)
    Decl: name='SchedulerBasicP__TaskBasic__default__runTask', quals=[], storage=['static'] (at pp.c:27277)
      FuncDecl: quals=None (at pp.c:27277)
        ParamList:  (at pp.c:27277)
          Decl: name='id', quals=[], storage=[] (at pp.c:27277)
            TypeDecl: declname='id', quals=[] (at pp.c:27277)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SchedulerBasicP__TaskBasic__default__runTask', quals=[] (at pp.c:27277)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27278)
  FuncDef:  (at pp.c:27282)
    Decl: name='SchedulerBasicP__TaskBasic__runTask', quals=[], storage=['static'] (at pp.c:27282)
      FuncDecl: quals=None (at pp.c:27282)
        ParamList:  (at pp.c:27282)
          Decl: name='arg_0x101487d50', quals=[], storage=[] (at pp.c:27282)
            TypeDecl: declname='arg_0x101487d50', quals=[] (at pp.c:27282)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SchedulerBasicP__TaskBasic__runTask', quals=[] (at pp.c:27282)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27282)
      Switch:  (at pp.c:27284)
        ID: name='arg_0x101487d50' (at pp.c:27284)
        Compound:  (at pp.c:27284)
          Case:  (at pp.c:27286)
            ID: name='SerialP__RunTx' (at pp.c:27286)
            FuncCall:  (at None)
              ID: name='SerialP__RunTx__runTask' (at pp.c:27288)
          Break:  (at pp.c:27290)
          Case:  (at pp.c:27292)
            ID: name='SerialP__startDoneTask' (at pp.c:27292)
            FuncCall:  (at None)
              ID: name='SerialP__startDoneTask__runTask' (at pp.c:27294)
          Break:  (at pp.c:27296)
          Case:  (at pp.c:27298)
            ID: name='SerialP__stopDoneTask' (at pp.c:27298)
            FuncCall:  (at None)
              ID: name='SerialP__stopDoneTask__runTask' (at pp.c:27300)
          Break:  (at pp.c:27302)
          Case:  (at pp.c:27304)
            ID: name='SerialP__defaultSerialFlushTask' (at pp.c:27304)
            FuncCall:  (at None)
              ID: name='SerialP__defaultSerialFlushTask__runTask' (at pp.c:27306)
          Break:  (at pp.c:27308)
          Case:  (at pp.c:27310)
            ID: name='SerialDispatcherP__0__signalSendDone' (at pp.c:27310)
            FuncCall:  (at None)
              ID: name='SerialDispatcherP__0__signalSendDone__runTask' (at pp.c:27312)
          Break:  (at pp.c:27314)
          Case:  (at pp.c:27316)
            ID: name='SerialDispatcherP__0__receiveTask' (at pp.c:27316)
            FuncCall:  (at None)
              ID: name='SerialDispatcherP__0__receiveTask__runTask' (at pp.c:27318)
          Break:  (at pp.c:27320)
          Case:  (at pp.c:27322)
            ID: name='ArbiterP__0__grantedTask' (at pp.c:27322)
            FuncCall:  (at None)
              ID: name='ArbiterP__0__grantedTask__runTask' (at pp.c:27324)
          Break:  (at pp.c:27326)
          Case:  (at pp.c:27328)
            ID: name='CC2420CsmaP__startDone_task' (at pp.c:27328)
            FuncCall:  (at None)
              ID: name='CC2420CsmaP__startDone_task__runTask' (at pp.c:27330)
          Break:  (at pp.c:27332)
          Case:  (at pp.c:27334)
            ID: name='CC2420CsmaP__stopDone_task' (at pp.c:27334)
            FuncCall:  (at None)
              ID: name='CC2420CsmaP__stopDone_task__runTask' (at pp.c:27336)
          Break:  (at pp.c:27338)
          Case:  (at pp.c:27340)
            ID: name='CC2420CsmaP__sendDone_task' (at pp.c:27340)
            FuncCall:  (at None)
              ID: name='CC2420CsmaP__sendDone_task__runTask' (at pp.c:27342)
          Break:  (at pp.c:27344)
          Case:  (at pp.c:27346)
            ID: name='CC2420ControlP__sync' (at pp.c:27346)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__sync__runTask' (at pp.c:27348)
          Break:  (at pp.c:27350)
          Case:  (at pp.c:27352)
            ID: name='CC2420ControlP__syncDone' (at pp.c:27352)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__syncDone__runTask' (at pp.c:27354)
          Break:  (at pp.c:27356)
          Case:  (at pp.c:27358)
            ID: name='CC2420SpiP__grant' (at pp.c:27358)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__grant__runTask' (at pp.c:27360)
          Break:  (at pp.c:27362)
          Case:  (at pp.c:27364)
            ID: name='Msp430SpiNoDmaP__0__signalDone_task' (at pp.c:27364)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__signalDone_task__runTask' (at pp.c:27366)
          Break:  (at pp.c:27368)
          Case:  (at pp.c:27370)
            ID: name='ArbiterP__1__grantedTask' (at pp.c:27370)
            FuncCall:  (at None)
              ID: name='ArbiterP__1__grantedTask__runTask' (at pp.c:27372)
          Break:  (at pp.c:27374)
          Case:  (at pp.c:27376)
            ID: name='CC2420ReceiveP__receiveDone_task' (at pp.c:27376)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__receiveDone_task__runTask' (at pp.c:27378)
          Break:  (at pp.c:27380)
          Case:  (at pp.c:27382)
            ID: name='AlarmToTimerC__0__fired' (at pp.c:27382)
            FuncCall:  (at None)
              ID: name='AlarmToTimerC__0__fired__runTask' (at pp.c:27384)
          Break:  (at pp.c:27386)
          Case:  (at pp.c:27388)
            ID: name='VirtualizeTimerC__0__updateFromTimer' (at pp.c:27388)
            FuncCall:  (at None)
              ID: name='VirtualizeTimerC__0__updateFromTimer__runTask' (at pp.c:27390)
          Break:  (at pp.c:27392)
          Case:  (at pp.c:27394)
            ID: name='CC2420TinyosNetworkP__grantTask' (at pp.c:27394)
            FuncCall:  (at None)
              ID: name='CC2420TinyosNetworkP__grantTask__runTask' (at pp.c:27396)
          Break:  (at pp.c:27398)
          Case:  (at pp.c:27400)
            ID: name='DefaultLplP__send' (at pp.c:27400)
            FuncCall:  (at None)
              ID: name='DefaultLplP__send__runTask' (at pp.c:27402)
          Break:  (at pp.c:27404)
          Case:  (at pp.c:27406)
            ID: name='DefaultLplP__resend' (at pp.c:27406)
            FuncCall:  (at None)
              ID: name='DefaultLplP__resend__runTask' (at pp.c:27408)
          Break:  (at pp.c:27410)
          Case:  (at pp.c:27412)
            ID: name='DefaultLplP__startRadio' (at pp.c:27412)
            FuncCall:  (at None)
              ID: name='DefaultLplP__startRadio__runTask' (at pp.c:27414)
          Break:  (at pp.c:27416)
          Case:  (at pp.c:27418)
            ID: name='DefaultLplP__stopRadio' (at pp.c:27418)
            FuncCall:  (at None)
              ID: name='DefaultLplP__stopRadio__runTask' (at pp.c:27420)
          Break:  (at pp.c:27422)
          Case:  (at pp.c:27424)
            ID: name='PowerCycleP__stopRadio' (at pp.c:27424)
            FuncCall:  (at None)
              ID: name='PowerCycleP__stopRadio__runTask' (at pp.c:27426)
          Break:  (at pp.c:27428)
          Case:  (at pp.c:27430)
            ID: name='PowerCycleP__startRadio' (at pp.c:27430)
            FuncCall:  (at None)
              ID: name='PowerCycleP__startRadio__runTask' (at pp.c:27432)
          Break:  (at pp.c:27434)
          Case:  (at pp.c:27436)
            ID: name='PowerCycleP__getCca' (at pp.c:27436)
            FuncCall:  (at None)
              ID: name='PowerCycleP__getCca__runTask' (at pp.c:27438)
          Break:  (at pp.c:27440)
          Case:  (at pp.c:27442)
            ID: name='AMQueueImplP__0__CancelTask' (at pp.c:27442)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__CancelTask__runTask' (at pp.c:27444)
          Break:  (at pp.c:27446)
          Case:  (at pp.c:27448)
            ID: name='AMQueueImplP__0__errorTask' (at pp.c:27448)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__errorTask__runTask' (at pp.c:27450)
          Break:  (at pp.c:27452)
          Case:  (at pp.c:27454)
            ID: name='AMQueueImplP__1__CancelTask' (at pp.c:27454)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__1__CancelTask__runTask' (at pp.c:27456)
          Break:  (at pp.c:27458)
          Case:  (at pp.c:27460)
            ID: name='AMQueueImplP__1__errorTask' (at pp.c:27460)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__1__errorTask__runTask' (at pp.c:27462)
          Break:  (at pp.c:27464)
          Default:  (at pp.c:27466)
            FuncCall:  (at None)
              ID: name='SchedulerBasicP__TaskBasic__default__runTask' (at pp.c:27468)
              ExprList:  (at pp.c:27468)
                ID: name='arg_0x101487d50' (at pp.c:27468)
          Break:  (at pp.c:27470)
  FuncDef:  (at pp.c:27477)
    Decl: name='LowPowerSensingBaseC__SerialSampleMsgSend__sendDone', quals=[], storage=['static'] (at pp.c:27477)
      FuncDecl: quals=None (at pp.c:27477)
        ParamList:  (at pp.c:27477)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27477)
            PtrDecl: quals=[] (at pp.c:27477)
              TypeDecl: declname='msg', quals=[] (at pp.c:27477)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:27477)
            TypeDecl: declname='error', quals=[] (at pp.c:27477)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LowPowerSensingBaseC__SerialSampleMsgSend__sendDone', quals=[] (at pp.c:27477)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27479)
      If:  (at pp.c:27480)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='LowPowerSensingBaseC__MsgQueue__empty' (at pp.c:27480)
          ID: name='FALSE' (at pp.c:27480)
        Compound:  (at pp.c:27480)
          Assignment: op='=' (at pp.c:27481)
            ID: name='LowPowerSensingBaseC__sample_msg' (at pp.c:27481)
            FuncCall:  (at None)
              ID: name='LowPowerSensingBaseC__MsgQueue__dequeue' (at pp.c:27481)
          Assignment: op='=' (at pp.c:27482)
            ID: name='LowPowerSensingBaseC__dest_addr' (at pp.c:27482)
            FuncCall:  (at None)
              ID: name='LowPowerSensingBaseC__SerialAMPacket__destination' (at pp.c:27482)
              ExprList:  (at pp.c:27482)
                ID: name='msg' (at pp.c:27482)
          FuncCall:  (at None)
            ID: name='LowPowerSensingBaseC__SerialSampleMsgSend__send' (at pp.c:27483)
            ExprList:  (at pp.c:27483)
              ID: name='LowPowerSensingBaseC__dest_addr' (at pp.c:27483)
              UnaryOp: op='&' (at pp.c:27483)
                ID: name='LowPowerSensingBaseC__sample_msg' (at pp.c:27483)
              UnaryOp: op='sizeof' (at pp.c:27483)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['serial_sample_msg_t'] (at None)
        Compound:  (at pp.c:27485)
          Assignment: op='=' (at pp.c:27487)
            ID: name='LowPowerSensingBaseC__serialSending' (at pp.c:27487)
            ID: name='FALSE' (at pp.c:27487)
  FuncDef:  (at pp.c:27492)
    Decl: name='AMQueueEntryP__1__AMSend__send', quals=[], storage=['static'] (at pp.c:27492)
      FuncDecl: quals=None (at pp.c:27492)
        ParamList:  (at pp.c:27492)
          Decl: name='dest', quals=[], storage=[] (at pp.c:27492)
            TypeDecl: declname='dest', quals=[] (at pp.c:27492)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27493)
            PtrDecl: quals=[] (at pp.c:27493)
              TypeDecl: declname='msg', quals=[] (at pp.c:27493)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:27494)
            TypeDecl: declname='len', quals=[] (at pp.c:27494)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__1__AMSend__send', quals=[] (at pp.c:27492)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27496)
      FuncCall:  (at None)
        ID: name='AMQueueEntryP__1__AMPacket__setDestination' (at pp.c:27497)
        ExprList:  (at pp.c:27497)
          ID: name='msg' (at pp.c:27497)
          ID: name='dest' (at pp.c:27497)
      FuncCall:  (at None)
        ID: name='AMQueueEntryP__1__AMPacket__setType' (at pp.c:27498)
        ExprList:  (at pp.c:27498)
          ID: name='msg' (at pp.c:27498)
          Constant: type='int', value='153' (at pp.c:27498)
      Return:  (at pp.c:27499)
        FuncCall:  (at None)
          ID: name='AMQueueEntryP__1__Send__send' (at pp.c:27499)
          ExprList:  (at pp.c:27499)
            ID: name='msg' (at pp.c:27499)
            ID: name='len' (at pp.c:27499)
  FuncDef:  (at pp.c:27503)
    Decl: name='SerialActiveMessageP__0__AMPacket__type', quals=[], storage=['static'] (at pp.c:27503)
      FuncDecl: quals=None (at pp.c:27503)
        ParamList:  (at pp.c:27503)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:27503)
            PtrDecl: quals=[] (at pp.c:27503)
              TypeDecl: declname='amsg', quals=[] (at pp.c:27503)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__AMPacket__type', quals=[] (at pp.c:27503)
          IdentifierType: names=['am_id_t'] (at None)
    Compound:  (at pp.c:27505)
      Decl: name='header', quals=[], storage=[] (at pp.c:27506)
        PtrDecl: quals=[] (at pp.c:27506)
          TypeDecl: declname='header', quals=[] (at pp.c:27506)
            IdentifierType: names=['serial_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__getHeader' (at pp.c:27506)
          ExprList:  (at pp.c:27506)
            ID: name='amsg' (at pp.c:27506)
      Return:  (at pp.c:27509)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_uint8' (at pp.c:27509)
          ExprList:  (at pp.c:27509)
            StructRef: type='.' (at pp.c:27509)
              StructRef: type='->' (at pp.c:27509)
                ID: name='header' (at pp.c:27509)
                ID: name='type' (at pp.c:27509)
              ID: name='nxdata' (at pp.c:27509)
  FuncDef:  (at pp.c:27513)
    Decl: name='AMQueueImplP__1__AMPacket__destination', quals=[], storage=['static'] (at pp.c:27513)
      FuncDecl: quals=None (at pp.c:27513)
        ParamList:  (at pp.c:27513)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:27513)
            PtrDecl: quals=[] (at pp.c:27513)
              TypeDecl: declname='amsg', quals=[] (at pp.c:27513)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='AMQueueImplP__1__AMPacket__destination', quals=[] (at pp.c:27513)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:27513)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:27515)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:27515)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:27519)
        ID: name='__nesc_result' (at pp.c:27519)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__AMPacket__destination' (at pp.c:27519)
          ExprList:  (at pp.c:27519)
            ID: name='amsg' (at pp.c:27519)
      Return:  (at pp.c:27523)
        ID: name='__nesc_result' (at pp.c:27523)
  FuncDef:  (at pp.c:27528)
    Decl: name='SerialActiveMessageP__0__AMSend__send', quals=[], storage=['static'] (at pp.c:27528)
      FuncDecl: quals=None (at pp.c:27528)
        ParamList:  (at pp.c:27528)
          Decl: name='id', quals=[], storage=[] (at pp.c:27528)
            TypeDecl: declname='id', quals=[] (at pp.c:27528)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='dest', quals=[], storage=[] (at pp.c:27528)
            TypeDecl: declname='dest', quals=[] (at pp.c:27528)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27529)
            PtrDecl: quals=[] (at pp.c:27529)
              TypeDecl: declname='msg', quals=[] (at pp.c:27529)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:27530)
            TypeDecl: declname='len', quals=[] (at pp.c:27530)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialActiveMessageP__0__AMSend__send', quals=[] (at pp.c:27528)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27532)
      Decl: name='header', quals=[], storage=[] (at pp.c:27533)
        PtrDecl: quals=[] (at pp.c:27533)
          TypeDecl: declname='header', quals=[] (at pp.c:27533)
            IdentifierType: names=['serial_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__getHeader' (at pp.c:27533)
          ExprList:  (at pp.c:27533)
            ID: name='msg' (at pp.c:27533)
      If:  (at pp.c:27535)
        BinaryOp: op='>' (at pp.c:27535)
          ID: name='len' (at pp.c:27535)
          FuncCall:  (at None)
            ID: name='SerialActiveMessageP__0__Packet__maxPayloadLength' (at pp.c:27535)
        Compound:  (at pp.c:27535)
          Return:  (at pp.c:27536)
            ID: name='ESIZE' (at pp.c:27536)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint16' (at pp.c:27539)
        ExprList:  (at pp.c:27539)
          StructRef: type='.' (at pp.c:27539)
            StructRef: type='->' (at pp.c:27539)
              ID: name='header' (at pp.c:27539)
              ID: name='dest' (at pp.c:27539)
            ID: name='nxdata' (at pp.c:27539)
          ID: name='dest' (at pp.c:27539)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:27545)
        ExprList:  (at pp.c:27545)
          StructRef: type='.' (at pp.c:27545)
            StructRef: type='->' (at pp.c:27545)
              ID: name='header' (at pp.c:27545)
              ID: name='type' (at pp.c:27545)
            ID: name='nxdata' (at pp.c:27545)
          ID: name='id' (at pp.c:27545)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:27546)
        ExprList:  (at pp.c:27546)
          StructRef: type='.' (at pp.c:27546)
            StructRef: type='->' (at pp.c:27546)
              ID: name='header' (at pp.c:27546)
              ID: name='length' (at pp.c:27546)
            ID: name='nxdata' (at pp.c:27546)
          ID: name='len' (at pp.c:27546)
      Return:  (at pp.c:27548)
        FuncCall:  (at None)
          ID: name='SerialActiveMessageP__0__SubSend__send' (at pp.c:27548)
          ExprList:  (at pp.c:27548)
            ID: name='msg' (at pp.c:27548)
            ID: name='len' (at pp.c:27548)
  FuncDef:  (at pp.c:27552)
    Decl: name='SerialP__MaybeScheduleTx', quals=[], storage=['static'] (at pp.c:27552)
      FuncDecl: quals=None (at pp.c:27552)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__MaybeScheduleTx', quals=[] (at pp.c:27552)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27554)
      Compound:  (at pp.c:27555)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27555)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27555)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27555)
        Compound:  (at pp.c:27557)
          If:  (at pp.c:27558)
            BinaryOp: op='==' (at pp.c:27558)
              ID: name='SerialP__txPending' (at pp.c:27558)
              Constant: type='int', value='0' (at pp.c:27558)
            Compound:  (at pp.c:27558)
              If:  (at pp.c:27559)
                BinaryOp: op='==' (at None)
                  FuncCall:  (at None)
                    ID: name='SerialP__RunTx__postTask' (at pp.c:27559)
                  ID: name='SUCCESS' (at pp.c:27559)
                Compound:  (at pp.c:27559)
                  Assignment: op='=' (at pp.c:27560)
                    ID: name='SerialP__txPending' (at pp.c:27560)
                    Constant: type='int', value='1' (at pp.c:27560)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27565)
          ExprList:  (at pp.c:27565)
            ID: name='__nesc_atomic' (at pp.c:27565)
  FuncDef:  (at pp.c:27569)
    Decl: name='AMQueueImplP__1__sendDone', quals=[], storage=['static'] (at pp.c:27569)
      FuncDecl: quals=None (at pp.c:27569)
        ParamList:  (at pp.c:27569)
          Decl: name='last', quals=[], storage=[] (at pp.c:27569)
            TypeDecl: declname='last', quals=[] (at pp.c:27569)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27569)
            PtrDecl: quals=[] (at pp.c:27569)
              TypeDecl: declname='msg', quals=[] (at pp.c:27569)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:27569)
            TypeDecl: declname='err', quals=[] (at pp.c:27569)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__1__sendDone', quals=[] (at pp.c:27569)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27571)
      Assignment: op='=' (at pp.c:27572)
        StructRef: type='.' (at pp.c:27572)
          ArrayRef:  (at pp.c:27572)
            ID: name='AMQueueImplP__1__queue' (at pp.c:27572)
            ID: name='last' (at pp.c:27572)
          ID: name='msg' (at pp.c:27572)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:27572)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['void'] (at None)
          Constant: type='int', value='0' (at pp.c:27572)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__1__tryToSend' (at pp.c:27573)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__1__Send__sendDone' (at pp.c:27574)
        ExprList:  (at pp.c:27574)
          ID: name='last' (at pp.c:27574)
          ID: name='msg' (at pp.c:27574)
          ID: name='err' (at pp.c:27574)
  FuncDef:  (at pp.c:27578)
    Decl: name='AMQueueImplP__0__sendDone', quals=[], storage=['static'] (at pp.c:27578)
      FuncDecl: quals=None (at pp.c:27578)
        ParamList:  (at pp.c:27578)
          Decl: name='last', quals=[], storage=[] (at pp.c:27578)
            TypeDecl: declname='last', quals=[] (at pp.c:27578)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27578)
            PtrDecl: quals=[] (at pp.c:27578)
              TypeDecl: declname='msg', quals=[] (at pp.c:27578)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:27578)
            TypeDecl: declname='err', quals=[] (at pp.c:27578)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__sendDone', quals=[] (at pp.c:27578)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27580)
      Assignment: op='=' (at pp.c:27581)
        StructRef: type='.' (at pp.c:27581)
          ArrayRef:  (at pp.c:27581)
            ID: name='AMQueueImplP__0__queue' (at pp.c:27581)
            ID: name='last' (at pp.c:27581)
          ID: name='msg' (at pp.c:27581)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:27581)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['void'] (at None)
          Constant: type='int', value='0' (at pp.c:27581)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__tryToSend' (at pp.c:27582)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__Send__sendDone' (at pp.c:27583)
        ExprList:  (at pp.c:27583)
          ID: name='last' (at pp.c:27583)
          ID: name='msg' (at pp.c:27583)
          ID: name='err' (at pp.c:27583)
  FuncDef:  (at pp.c:27587)
    Decl: name='CC2420ActiveMessageP__AMPacket__destination', quals=[], storage=['static'] (at pp.c:27587)
      FuncDecl: quals=None (at pp.c:27587)
        ParamList:  (at pp.c:27587)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:27587)
            PtrDecl: quals=[] (at pp.c:27587)
              TypeDecl: declname='amsg', quals=[] (at pp.c:27587)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__destination', quals=[] (at pp.c:27587)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:27589)
      Decl: name='header', quals=[], storage=[] (at pp.c:27590)
        PtrDecl: quals=[] (at pp.c:27590)
          TypeDecl: declname='header', quals=[] (at pp.c:27590)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:27590)
          ExprList:  (at pp.c:27590)
            ID: name='amsg' (at pp.c:27590)
      Return:  (at pp.c:27593)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_leuint16' (at pp.c:27593)
          ExprList:  (at pp.c:27593)
            StructRef: type='.' (at pp.c:27593)
              StructRef: type='->' (at pp.c:27593)
                ID: name='header' (at pp.c:27593)
                ID: name='dest' (at pp.c:27593)
              ID: name='nxdata' (at pp.c:27593)
  FuncDef:  (at pp.c:27597)
    Decl: name='CC2420ActiveMessageP__AMSend__send', quals=[], storage=['static'] (at pp.c:27597)
      FuncDecl: quals=None (at pp.c:27597)
        ParamList:  (at pp.c:27597)
          Decl: name='id', quals=[], storage=[] (at pp.c:27597)
            TypeDecl: declname='id', quals=[] (at pp.c:27597)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:27597)
            TypeDecl: declname='addr', quals=[] (at pp.c:27597)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27598)
            PtrDecl: quals=[] (at pp.c:27598)
              TypeDecl: declname='msg', quals=[] (at pp.c:27598)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:27599)
            TypeDecl: declname='len', quals=[] (at pp.c:27599)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMSend__send', quals=[] (at pp.c:27597)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27601)
      Decl: name='__nesc_temp48', quals=[], storage=[] (at pp.c:27602)
        PtrDecl: quals=[] (at pp.c:27602)
          TypeDecl: declname='__nesc_temp48', quals=[] (at pp.c:27602)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='header', quals=[], storage=[] (at pp.c:27604)
        PtrDecl: quals=[] (at pp.c:27604)
          TypeDecl: declname='header', quals=[] (at pp.c:27604)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:27604)
          ExprList:  (at pp.c:27604)
            ID: name='msg' (at pp.c:27604)
      If:  (at pp.c:27606)
        BinaryOp: op='>' (at pp.c:27606)
          ID: name='len' (at pp.c:27606)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__Packet__maxPayloadLength' (at pp.c:27606)
        Compound:  (at pp.c:27606)
          Return:  (at pp.c:27607)
            ID: name='ESIZE' (at pp.c:27607)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint8' (at pp.c:27610)
        ExprList:  (at pp.c:27610)
          StructRef: type='.' (at pp.c:27610)
            StructRef: type='->' (at pp.c:27610)
              ID: name='header' (at pp.c:27610)
              ID: name='type' (at pp.c:27610)
            ID: name='nxdata' (at pp.c:27610)
          ID: name='id' (at pp.c:27610)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint16' (at pp.c:27611)
        ExprList:  (at pp.c:27611)
          StructRef: type='.' (at pp.c:27611)
            StructRef: type='->' (at pp.c:27611)
              ID: name='header' (at pp.c:27611)
              ID: name='dest' (at pp.c:27611)
            ID: name='nxdata' (at pp.c:27611)
          ID: name='addr' (at pp.c:27611)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint16' (at pp.c:27612)
        ExprList:  (at pp.c:27612)
          StructRef: type='.' (at pp.c:27612)
            StructRef: type='->' (at pp.c:27612)
              ID: name='header' (at pp.c:27612)
              ID: name='destpan' (at pp.c:27612)
            ID: name='nxdata' (at pp.c:27612)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__CC2420Config__getPanAddr' (at pp.c:27612)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint16' (at pp.c:27613)
        ExprList:  (at pp.c:27613)
          StructRef: type='.' (at pp.c:27613)
            StructRef: type='->' (at pp.c:27613)
              ID: name='header' (at pp.c:27613)
              ID: name='src' (at pp.c:27613)
            ID: name='nxdata' (at pp.c:27613)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__AMPacket__address' (at pp.c:27613)
      ExprList:  (at pp.c:27614)
        Assignment: op='=' (at pp.c:27614)
          ID: name='__nesc_temp48' (at pp.c:27614)
          StructRef: type='.' (at pp.c:27614)
            StructRef: type='->' (at pp.c:27614)
              ID: name='header' (at pp.c:27614)
              ID: name='fcf' (at pp.c:27614)
            ID: name='nxdata' (at pp.c:27614)
        FuncCall:  (at None)
          ID: name='__nesc_hton_leuint16' (at pp.c:27614)
          ExprList:  (at pp.c:27614)
            ID: name='__nesc_temp48' (at pp.c:27614)
            BinaryOp: op='|' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:27614)
                ExprList:  (at pp.c:27614)
                  ID: name='__nesc_temp48' (at pp.c:27614)
              BinaryOp: op='|' (at pp.c:27614)
                BinaryOp: op='|' (at pp.c:27614)
                  BinaryOp: op='<<' (at pp.c:27614)
                    Constant: type='int', value='1' (at pp.c:27614)
                    ID: name='IEEE154_FCF_INTRAPAN' (at pp.c:27614)
                  BinaryOp: op='<<' (at pp.c:27615)
                    ID: name='IEEE154_ADDR_SHORT' (at pp.c:27615)
                    ID: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:27615)
                BinaryOp: op='<<' (at pp.c:27616)
                  ID: name='IEEE154_ADDR_SHORT' (at pp.c:27616)
                  ID: name='IEEE154_FCF_SRC_ADDR_MODE' (at pp.c:27616)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint8' (at pp.c:27617)
        ExprList:  (at pp.c:27617)
          StructRef: type='.' (at pp.c:27617)
            StructRef: type='->' (at pp.c:27617)
              ID: name='header' (at pp.c:27617)
              ID: name='length' (at pp.c:27617)
            ID: name='nxdata' (at pp.c:27617)
          BinaryOp: op='+' (at pp.c:27617)
            ID: name='len' (at pp.c:27617)
            ID: name='CC2420_SIZE' (at pp.c:27617)
      If:  (at pp.c:27619)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__RadioResource__immediateRequest' (at pp.c:27619)
          ID: name='SUCCESS' (at pp.c:27619)
        Compound:  (at pp.c:27619)
          Decl: name='rc', quals=[], storage=[] (at pp.c:27620)
            TypeDecl: declname='rc', quals=[] (at pp.c:27620)
              IdentifierType: names=['error_t'] (at None)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__SendNotifier__aboutToSend' (at pp.c:27623)
            ExprList:  (at pp.c:27623)
              ID: name='id' (at pp.c:27623)
              ID: name='addr' (at pp.c:27623)
              ID: name='msg' (at pp.c:27623)
          Assignment: op='=' (at pp.c:27625)
            ID: name='rc' (at pp.c:27625)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__SubSend__send' (at pp.c:27625)
              ExprList:  (at pp.c:27625)
                ID: name='msg' (at pp.c:27625)
                ID: name='len' (at pp.c:27625)
          If:  (at pp.c:27626)
            BinaryOp: op='!=' (at pp.c:27626)
              ID: name='rc' (at pp.c:27626)
              ID: name='SUCCESS' (at pp.c:27626)
            Compound:  (at pp.c:27626)
              FuncCall:  (at None)
                ID: name='CC2420ActiveMessageP__RadioResource__release' (at pp.c:27627)
          Return:  (at pp.c:27630)
            ID: name='rc' (at pp.c:27630)
        Compound:  (at pp.c:27634)
          Assignment: op='=' (at pp.c:27635)
            ID: name='CC2420ActiveMessageP__pending_length' (at pp.c:27635)
            ID: name='len' (at pp.c:27635)
          Assignment: op='=' (at pp.c:27636)
            ID: name='CC2420ActiveMessageP__pending_message' (at pp.c:27636)
            ID: name='msg' (at pp.c:27636)
          Return:  (at pp.c:27637)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__RadioResource__request' (at pp.c:27637)
  FuncDef:  (at pp.c:27642)
    Decl: name='ActiveMessageAddressC__amAddress', quals=[], storage=['static'] (at pp.c:27642)
      FuncDecl: quals=None (at pp.c:27642)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ActiveMessageAddressC__amAddress', quals=[] (at pp.c:27642)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:27644)
      Decl: name='myAddr', quals=[], storage=[] (at pp.c:27645)
        TypeDecl: declname='myAddr', quals=[] (at pp.c:27645)
          IdentifierType: names=['am_addr_t'] (at None)
      Compound:  (at pp.c:27648)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27648)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27648)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27648)
        Assignment: op='=' (at pp.c:27650)
          ID: name='myAddr' (at pp.c:27650)
          ID: name='ActiveMessageAddressC__addr' (at pp.c:27650)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27652)
          ExprList:  (at pp.c:27652)
            ID: name='__nesc_atomic' (at pp.c:27652)
      Return:  (at pp.c:27653)
        ID: name='myAddr' (at pp.c:27653)
  FuncDef:  (at pp.c:27657)
    Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[], storage=['static'] (at pp.c:27657)
      FuncDecl: quals=None (at pp.c:27657)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[] (at pp.c:27657)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:27659)
      Compound:  (at pp.c:27660)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27660)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27660)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27660)
        Compound:  (at pp.c:27662)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:27663)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:27663)
              IdentifierType: names=['char', 'unsigned'] (at None)
            BinaryOp: op='==' (at pp.c:27665)
              ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:27665)
              ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:27665)
          Compound:  (at pp.c:27667)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:27669)
              ExprList:  (at pp.c:27669)
                ID: name='__nesc_atomic' (at pp.c:27669)
            Return:  (at pp.c:27671)
              ID: name='__nesc_temp' (at pp.c:27671)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27675)
          ExprList:  (at pp.c:27675)
            ID: name='__nesc_atomic' (at pp.c:27675)
  FuncDef:  (at pp.c:27679)
    Decl: name='CC2420TinyosNetworkP__ActiveSend__send', quals=[], storage=['static'] (at pp.c:27679)
      FuncDecl: quals=None (at pp.c:27679)
        ParamList:  (at pp.c:27679)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27679)
            PtrDecl: quals=[] (at pp.c:27679)
              TypeDecl: declname='msg', quals=[] (at pp.c:27679)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:27679)
            TypeDecl: declname='len', quals=[] (at pp.c:27679)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__send', quals=[] (at pp.c:27679)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27681)
      FuncCall:  (at None)
        ID: name='CC2420TinyosNetworkP__CC2420Packet__setNetwork' (at pp.c:27682)
        ExprList:  (at pp.c:27682)
          ID: name='msg' (at pp.c:27682)
          Constant: type='int', value='0x3f' (at pp.c:27682)
      Assignment: op='=' (at pp.c:27683)
        ID: name='CC2420TinyosNetworkP__m_busy_client' (at pp.c:27683)
        ID: name='CC2420TinyosNetworkP__CLIENT_AM' (at pp.c:27683)
      Return:  (at pp.c:27684)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__SubSend__send' (at pp.c:27684)
          ExprList:  (at pp.c:27684)
            ID: name='msg' (at pp.c:27684)
            ID: name='len' (at pp.c:27684)
  FuncDef:  (at pp.c:27688)
    Decl: name='CC2420PacketP__getNetwork', quals=[], storage=['static'] (at pp.c:27688)
      FuncDecl: quals=None (at pp.c:27688)
        ParamList:  (at pp.c:27688)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27688)
            PtrDecl: quals=[] (at pp.c:27688)
              TypeDecl: declname='msg', quals=[] (at pp.c:27688)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:27688)
          TypeDecl: declname='CC2420PacketP__getNetwork', quals=[] (at pp.c:27688)
            IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:27690)
      Decl: name='hdr', quals=[], storage=[] (at pp.c:27691)
        PtrDecl: quals=[] (at pp.c:27691)
          TypeDecl: declname='hdr', quals=[] (at pp.c:27691)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:27691)
          ExprList:  (at pp.c:27691)
            ID: name='msg' (at pp.c:27691)
      Decl: name='offset', quals=[], storage=[] (at pp.c:27692)
        TypeDecl: declname='offset', quals=[] (at pp.c:27692)
          IdentifierType: names=['int'] (at None)
      Assignment: op='=' (at pp.c:27694)
        ID: name='offset' (at pp.c:27694)
        BinaryOp: op='+' (at None)
          BinaryOp: op='+' (at None)
            FuncCall:  (at None)
              ID: name='CC2420PacketP__getAddressLength' (at pp.c:27694)
              ExprList:  (at None)
                BinaryOp: op='&' (at None)
                  BinaryOp: op='>>' (at None)
                    FuncCall:  (at None)
                      ID: name='__nesc_ntoh_leuint16' (at pp.c:27694)
                      ExprList:  (at pp.c:27694)
                        StructRef: type='.' (at pp.c:27694)
                          StructRef: type='->' (at pp.c:27694)
                            ID: name='hdr' (at pp.c:27694)
                            ID: name='fcf' (at pp.c:27694)
                          ID: name='nxdata' (at pp.c:27694)
                    ID: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:27694)
                  Constant: type='int', value='0x3' (at pp.c:27694)
            FuncCall:  (at None)
              ID: name='CC2420PacketP__getAddressLength' (at pp.c:27695)
              ExprList:  (at None)
                BinaryOp: op='&' (at None)
                  BinaryOp: op='>>' (at None)
                    FuncCall:  (at None)
                      ID: name='__nesc_ntoh_leuint16' (at pp.c:27695)
                      ExprList:  (at pp.c:27695)
                        StructRef: type='.' (at pp.c:27695)
                          StructRef: type='->' (at pp.c:27695)
                            ID: name='hdr' (at pp.c:27695)
                            ID: name='fcf' (at pp.c:27695)
                          ID: name='nxdata' (at pp.c:27695)
                    ID: name='IEEE154_FCF_SRC_ADDR_MODE' (at pp.c:27695)
                  Constant: type='int', value='0x3' (at pp.c:27695)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['size_t'] (at None)
            UnaryOp: op='&' (at None)
              StructRef: type='->' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:27696)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['cc2420_header_t'] (at None)
                  Constant: type='int', value='0' (at pp.c:27696)
                ID: name='dest' (at pp.c:27696)
      Return:  (at pp.c:27698)
        BinaryOp: op='+' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:27698)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            ID: name='hdr' (at pp.c:27698)
          ID: name='offset' (at pp.c:27698)
  FuncDef:  (at pp.c:27702)
    Decl: name='StateImplP__State__getState', quals=[], storage=['static'] (at pp.c:27702)
      FuncDecl: quals=None (at pp.c:27702)
        ParamList:  (at pp.c:27702)
          Decl: name='id', quals=[], storage=[] (at pp.c:27702)
            TypeDecl: declname='id', quals=[] (at pp.c:27702)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__getState', quals=[] (at pp.c:27702)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:27704)
      Decl: name='theState', quals=[], storage=[] (at pp.c:27705)
        TypeDecl: declname='theState', quals=[] (at pp.c:27705)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:27708)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27708)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27708)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27708)
        Assignment: op='=' (at pp.c:27710)
          ID: name='theState' (at pp.c:27710)
          ArrayRef:  (at pp.c:27710)
            ID: name='StateImplP__state' (at pp.c:27710)
            ID: name='id' (at pp.c:27710)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27712)
          ExprList:  (at pp.c:27712)
            ID: name='__nesc_atomic' (at pp.c:27712)
      Return:  (at pp.c:27713)
        ID: name='theState' (at pp.c:27713)
  FuncDef:  (at pp.c:27717)
    Decl: name='DefaultLplP__initializeSend', quals=[], storage=['static'] (at pp.c:27717)
      FuncDecl: quals=None (at pp.c:27717)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__initializeSend', quals=[] (at pp.c:27717)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27719)
      If:  (at pp.c:27721)
        BinaryOp: op='>' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__LowPowerListening__getRemoteWakeupInterval' (at pp.c:27723)
            ExprList:  (at pp.c:27723)
              ID: name='DefaultLplP__currentSendMsg' (at pp.c:27723)
          ID: name='DefaultLplP__ONE_MESSAGE' (at pp.c:27724)
        Compound:  (at pp.c:27724)
          If:  (at pp.c:27726)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:27726)
                ExprList:  (at None)
                  StructRef: type='.' (at None)
                    StructRef: type='->' (at None)
                      FuncCall:  (at None)
                        ID: name='DefaultLplP__CC2420PacketBody__getHeader' (at pp.c:27726)
                        ExprList:  (at pp.c:27726)
                          ID: name='DefaultLplP__currentSendMsg' (at pp.c:27726)
                      ID: name='dest' (at pp.c:27726)
                    ID: name='nxdata' (at pp.c:27726)
              ID: name='IEEE154_BROADCAST_ADDR' (at pp.c:27726)
            Compound:  (at pp.c:27726)
              FuncCall:  (at None)
                ID: name='DefaultLplP__PacketAcknowledgements__noAck' (at pp.c:27727)
                ExprList:  (at pp.c:27727)
                  ID: name='DefaultLplP__currentSendMsg' (at pp.c:27727)
            Compound:  (at pp.c:27731)
              FuncCall:  (at None)
                ID: name='DefaultLplP__PacketAcknowledgements__requestAck' (at pp.c:27733)
                ExprList:  (at pp.c:27733)
                  ID: name='DefaultLplP__currentSendMsg' (at pp.c:27733)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendDoneTimer__startOneShot' (at pp.c:27736)
            ExprList:  (at None)
              BinaryOp: op='+' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__LowPowerListening__getRemoteWakeupInterval' (at pp.c:27737)
                  ExprList:  (at pp.c:27737)
                    ID: name='DefaultLplP__currentSendMsg' (at pp.c:27737)
                Constant: type='int', value='20' (at pp.c:27737)
      FuncCall:  (at None)
        ID: name='DefaultLplP__send__postTask' (at pp.c:27740)
  FuncDef:  (at pp.c:27744)
    Decl: name='VirtualizeTimerC__0__startTimer', quals=[], storage=['static'] (at pp.c:27744)
      FuncDecl: quals=None (at pp.c:27744)
        ParamList:  (at pp.c:27744)
          Decl: name='num', quals=[], storage=[] (at pp.c:27744)
            TypeDecl: declname='num', quals=[] (at pp.c:27744)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='t0', quals=[], storage=[] (at pp.c:27744)
            TypeDecl: declname='t0', quals=[] (at pp.c:27744)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:27744)
            TypeDecl: declname='dt', quals=[] (at pp.c:27744)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='isoneshot', quals=[], storage=[] (at pp.c:27744)
            TypeDecl: declname='isoneshot', quals=[] (at pp.c:27744)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__startTimer', quals=[] (at pp.c:27744)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27745)
      Decl: name='timer', quals=[], storage=[] (at pp.c:27746)
        PtrDecl: quals=[] (at pp.c:27746)
          TypeDecl: declname='timer', quals=[] (at pp.c:27746)
            IdentifierType: names=['VirtualizeTimerC__0__Timer_t'] (at None)
        UnaryOp: op='&' (at pp.c:27746)
          ArrayRef:  (at pp.c:27746)
            ID: name='VirtualizeTimerC__0__m_timers' (at pp.c:27746)
            ID: name='num' (at pp.c:27746)
      Assignment: op='=' (at pp.c:27749)
        StructRef: type='->' (at pp.c:27749)
          ID: name='timer' (at pp.c:27749)
          ID: name='t0' (at pp.c:27749)
        ID: name='t0' (at pp.c:27749)
      Assignment: op='=' (at pp.c:27750)
        StructRef: type='->' (at pp.c:27750)
          ID: name='timer' (at pp.c:27750)
          ID: name='dt' (at pp.c:27750)
        ID: name='dt' (at pp.c:27750)
      Assignment: op='=' (at pp.c:27751)
        StructRef: type='->' (at pp.c:27751)
          ID: name='timer' (at pp.c:27751)
          ID: name='isoneshot' (at pp.c:27751)
        ID: name='isoneshot' (at pp.c:27751)
      Assignment: op='=' (at pp.c:27752)
        StructRef: type='->' (at pp.c:27752)
          ID: name='timer' (at pp.c:27752)
          ID: name='isrunning' (at pp.c:27752)
        ID: name='TRUE' (at pp.c:27752)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__updateFromTimer__postTask' (at pp.c:27753)
  FuncDef:  (at pp.c:27757)
    Decl: name='UniqueSendP__State__toIdle', quals=[], storage=['static'] (at pp.c:27757)
      FuncDecl: quals=None (at pp.c:27757)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueSendP__State__toIdle', quals=[] (at pp.c:27757)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27757)
      FuncCall:  (at None)
        ID: name='StateImplP__State__toIdle' (at pp.c:27759)
        ExprList:  (at pp.c:27759)
          Constant: type='int', value='2U' (at pp.c:27759)
  FuncDef:  (at pp.c:27764)
    Decl: name='DefaultLplP__OffTimer__startOneShot', quals=[], storage=['static'] (at pp.c:27764)
      FuncDecl: quals=None (at pp.c:27764)
        ParamList:  (at pp.c:27764)
          Decl: name='dt', quals=[], storage=[] (at pp.c:27764)
            TypeDecl: declname='dt', quals=[] (at pp.c:27764)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='DefaultLplP__OffTimer__startOneShot', quals=[] (at pp.c:27764)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27764)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__startOneShot' (at pp.c:27766)
        ExprList:  (at pp.c:27766)
          Constant: type='int', value='3U' (at pp.c:27766)
          ID: name='dt' (at pp.c:27766)
  FuncDef:  (at pp.c:27771)
    Decl: name='CC2420CsmaP__SplitControl__start', quals=[], storage=['static'] (at pp.c:27771)
      FuncDecl: quals=None (at pp.c:27771)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControl__start', quals=[] (at pp.c:27771)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27773)
      If:  (at pp.c:27774)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__SplitControlState__requestState' (at pp.c:27774)
            ExprList:  (at pp.c:27774)
              ID: name='CC2420CsmaP__S_STARTING' (at pp.c:27774)
          ID: name='SUCCESS' (at pp.c:27774)
        Compound:  (at pp.c:27774)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__CC2420Power__startVReg' (at pp.c:27775)
          Return:  (at pp.c:27776)
            ID: name='SUCCESS' (at pp.c:27776)
        Compound:  (at pp.c:27778)
          If:  (at pp.c:27780)
            FuncCall:  (at None)
              ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27780)
              ExprList:  (at pp.c:27780)
                ID: name='CC2420CsmaP__S_STARTED' (at pp.c:27780)
            Compound:  (at pp.c:27780)
              Return:  (at pp.c:27781)
                ID: name='EALREADY' (at pp.c:27781)
            Compound:  (at pp.c:27783)
              If:  (at pp.c:27785)
                FuncCall:  (at None)
                  ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27785)
                  ExprList:  (at pp.c:27785)
                    ID: name='CC2420CsmaP__S_STARTING' (at pp.c:27785)
                Compound:  (at pp.c:27785)
                  Return:  (at pp.c:27786)
                    ID: name='SUCCESS' (at pp.c:27786)
      Return:  (at pp.c:27791)
        ID: name='EBUSY' (at pp.c:27791)
  FuncDef:  (at pp.c:27794)
    Decl: name='CC2420CsmaP__SplitControl__stop', quals=[], storage=['static'] (at pp.c:27794)
      FuncDecl: quals=None (at pp.c:27794)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControl__stop', quals=[] (at pp.c:27794)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27796)
      If:  (at pp.c:27797)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27797)
          ExprList:  (at pp.c:27797)
            ID: name='CC2420CsmaP__S_STARTED' (at pp.c:27797)
        Compound:  (at pp.c:27797)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:27798)
            ExprList:  (at pp.c:27798)
              ID: name='CC2420CsmaP__S_STOPPING' (at pp.c:27798)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__shutdown' (at pp.c:27799)
          Return:  (at pp.c:27800)
            ID: name='SUCCESS' (at pp.c:27800)
        Compound:  (at pp.c:27802)
          If:  (at pp.c:27804)
            FuncCall:  (at None)
              ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27804)
              ExprList:  (at pp.c:27804)
                ID: name='CC2420CsmaP__S_STOPPED' (at pp.c:27804)
            Compound:  (at pp.c:27804)
              Return:  (at pp.c:27805)
                ID: name='EALREADY' (at pp.c:27805)
            Compound:  (at pp.c:27807)
              If:  (at pp.c:27809)
                FuncCall:  (at None)
                  ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27809)
                  ExprList:  (at pp.c:27809)
                    ID: name='CC2420CsmaP__S_TRANSMITTING' (at pp.c:27809)
                Compound:  (at pp.c:27809)
                  FuncCall:  (at None)
                    ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:27810)
                    ExprList:  (at pp.c:27810)
                      ID: name='CC2420CsmaP__S_STOPPING' (at pp.c:27810)
                  Return:  (at pp.c:27812)
                    ID: name='SUCCESS' (at pp.c:27812)
                Compound:  (at pp.c:27814)
                  If:  (at pp.c:27816)
                    FuncCall:  (at None)
                      ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27816)
                      ExprList:  (at pp.c:27816)
                        ID: name='CC2420CsmaP__S_STOPPING' (at pp.c:27816)
                    Compound:  (at pp.c:27816)
                      Return:  (at pp.c:27817)
                        ID: name='SUCCESS' (at pp.c:27817)
      Return:  (at pp.c:27823)
        ID: name='EBUSY' (at pp.c:27823)
  FuncDef:  (at pp.c:27827)
    Decl: name='CC2420TransmitP__StdControl__stop', quals=[], storage=['static'] (at pp.c:27827)
      FuncDecl: quals=None (at pp.c:27827)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__StdControl__stop', quals=[] (at pp.c:27827)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27829)
      Compound:  (at pp.c:27830)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27830)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27830)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27830)
        Compound:  (at pp.c:27832)
          Assignment: op='=' (at pp.c:27833)
            ID: name='CC2420TransmitP__m_state' (at pp.c:27833)
            ID: name='CC2420TransmitP__S_STOPPED' (at pp.c:27833)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__BackoffTimer__stop' (at pp.c:27834)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CaptureSFD__disable' (at pp.c:27835)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__SpiResource__release' (at pp.c:27836)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CSN__set' (at pp.c:27837)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27840)
          ExprList:  (at pp.c:27840)
            ID: name='__nesc_atomic' (at pp.c:27840)
      Return:  (at pp.c:27841)
        ID: name='SUCCESS' (at pp.c:27841)
  FuncDef:  (at pp.c:27845)
    Decl: name='CC2420ReceiveP__StdControl__stop', quals=[], storage=['static'] (at pp.c:27845)
      FuncDecl: quals=None (at pp.c:27845)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__StdControl__stop', quals=[] (at pp.c:27845)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27847)
      Compound:  (at pp.c:27848)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27848)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27848)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27848)
        Compound:  (at pp.c:27850)
          Assignment: op='=' (at pp.c:27851)
            ID: name='CC2420ReceiveP__m_state' (at pp.c:27851)
            ID: name='CC2420ReceiveP__S_STOPPED' (at pp.c:27851)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__reset_state' (at pp.c:27852)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__CSN__set' (at pp.c:27853)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__InterruptFIFOP__disable' (at pp.c:27854)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27857)
          ExprList:  (at pp.c:27857)
            ID: name='__nesc_atomic' (at pp.c:27857)
      Return:  (at pp.c:27858)
        ID: name='SUCCESS' (at pp.c:27858)
  FuncDef:  (at pp.c:27862)
    Decl: name='CC2420ReceiveP__reset_state', quals=[], storage=['static'] (at pp.c:27862)
      FuncDecl: quals=None (at pp.c:27862)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__reset_state', quals=[] (at pp.c:27862)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27864)
      Assignment: op='=' (at pp.c:27865)
        ID: name='CC2420ReceiveP__m_bytes_left' (at pp.c:27865)
        ID: name='CC2420ReceiveP__RXFIFO_SIZE' (at pp.c:27865)
      Assignment: op='=' (at pp.c:27868)
        ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:27868)
        ID: name='FALSE' (at pp.c:27868)
      Assignment: op='=' (at pp.c:27869)
        ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:27869)
        Constant: type='int', value='0' (at pp.c:27869)
      Assignment: op='=' (at pp.c:27870)
        ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:27870)
        Constant: type='int', value='0' (at pp.c:27870)
      Assignment: op='=' (at pp.c:27871)
        ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:27871)
        Constant: type='int', value='0' (at pp.c:27871)
  FuncDef:  (at pp.c:27875)
    Decl: name='CC2420ControlP__CC2420Power__stopVReg', quals=[], storage=['static'] (at pp.c:27875)
      FuncDecl: quals=None (at pp.c:27875)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__stopVReg', quals=[] (at pp.c:27875)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27877)
      Assignment: op='=' (at pp.c:27878)
        ID: name='CC2420ControlP__m_state' (at pp.c:27878)
        ID: name='CC2420ControlP__S_VREG_STOPPED' (at pp.c:27878)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__RSTN__clr' (at pp.c:27879)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__VREN__clr' (at pp.c:27880)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__RSTN__set' (at pp.c:27881)
      Return:  (at pp.c:27882)
        ID: name='SUCCESS' (at pp.c:27882)
  FuncDef:  (at pp.c:27886)
    Decl: name='PowerCycleP__finishSplitControlRequests', quals=[], storage=['static'] (at pp.c:27886)
      FuncDecl: quals=None (at pp.c:27886)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__finishSplitControlRequests', quals=[] (at pp.c:27886)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:27888)
      If:  (at pp.c:27889)
        FuncCall:  (at None)
          ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:27889)
          ExprList:  (at pp.c:27889)
            ID: name='PowerCycleP__S_TURNING_OFF' (at pp.c:27889)
        Compound:  (at pp.c:27889)
          FuncCall:  (at None)
            ID: name='PowerCycleP__SplitControlState__forceState' (at pp.c:27890)
            ExprList:  (at pp.c:27890)
              ID: name='PowerCycleP__S_OFF' (at pp.c:27890)
          FuncCall:  (at None)
            ID: name='PowerCycleP__SplitControl__stopDone' (at pp.c:27891)
            ExprList:  (at pp.c:27891)
              ID: name='SUCCESS' (at pp.c:27891)
          Return:  (at pp.c:27892)
            ID: name='TRUE' (at pp.c:27892)
        Compound:  (at pp.c:27894)
          If:  (at pp.c:27896)
            FuncCall:  (at None)
              ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:27896)
              ExprList:  (at pp.c:27896)
                ID: name='PowerCycleP__S_TURNING_ON' (at pp.c:27896)
            Compound:  (at pp.c:27896)
              FuncCall:  (at None)
                ID: name='PowerCycleP__SplitControlState__forceState' (at pp.c:27898)
                ExprList:  (at pp.c:27898)
                  ID: name='PowerCycleP__S_ON' (at pp.c:27898)
              FuncCall:  (at None)
                ID: name='PowerCycleP__SplitControl__startDone' (at pp.c:27899)
                ExprList:  (at pp.c:27899)
                  ID: name='SUCCESS' (at pp.c:27899)
              Return:  (at pp.c:27900)
                ID: name='TRUE' (at pp.c:27900)
      Return:  (at pp.c:27903)
        ID: name='FALSE' (at pp.c:27903)
  FuncDef:  (at pp.c:27907)
    Decl: name='PowerCycleP__OnTimer__startOneShot', quals=[], storage=['static'] (at pp.c:27907)
      FuncDecl: quals=None (at pp.c:27907)
        ParamList:  (at pp.c:27907)
          Decl: name='dt', quals=[], storage=[] (at pp.c:27907)
            TypeDecl: declname='dt', quals=[] (at pp.c:27907)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='PowerCycleP__OnTimer__startOneShot', quals=[] (at pp.c:27907)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27907)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__startOneShot' (at pp.c:27909)
        ExprList:  (at pp.c:27909)
          Constant: type='int', value='1U' (at pp.c:27909)
          ID: name='dt' (at pp.c:27909)
  FuncDef:  (at pp.c:27914)
    Decl: name='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:27914)
      FuncDecl: quals=None (at pp.c:27914)
        ParamList:  (at pp.c:27914)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27914)
            PtrDecl: quals=[] (at pp.c:27914)
              TypeDecl: declname='msg', quals=[] (at pp.c:27914)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:27914)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27916)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__setInitialBackoff' (at pp.c:27917)
        ExprList:  (at None)
          BinaryOp: op='+' (at None)
            BinaryOp: op='%' (at None)
              FuncCall:  (at None)
                ID: name='CC2420CsmaP__Random__rand16' (at pp.c:27917)
              BinaryOp: op='*' (at pp.c:27918)
                Constant: type='int', value='0x1F' (at pp.c:27918)
                ID: name='CC2420_BACKOFF_PERIOD' (at pp.c:27918)
            ID: name='CC2420_MIN_BACKOFF' (at pp.c:27918)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__RadioBackoff__requestInitialBackoff' (at pp.c:27920)
        ExprList:  (at pp.c:27920)
          ID: name='msg' (at pp.c:27920)
  FuncDef:  (at pp.c:27924)
    Decl: name='CC2420TransmitP__loadTXFIFO', quals=[], storage=['static'] (at pp.c:27924)
      FuncDecl: quals=None (at pp.c:27924)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__loadTXFIFO', quals=[] (at pp.c:27924)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27926)
      Decl: name='header', quals=[], storage=[] (at pp.c:27927)
        PtrDecl: quals=[] (at pp.c:27927)
          TypeDecl: declname='header', quals=[] (at pp.c:27927)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__CC2420PacketBody__getHeader' (at pp.c:27927)
          ExprList:  (at pp.c:27927)
            ID: name='CC2420TransmitP__m_msg' (at pp.c:27927)
      Decl: name='tx_power', quals=[], storage=[] (at pp.c:27928)
        TypeDecl: declname='tx_power', quals=[] (at pp.c:27928)
          IdentifierType: names=['uint8_t'] (at None)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_uint8' (at pp.c:27928)
          ExprList:  (at None)
            StructRef: type='.' (at None)
              StructRef: type='->' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CC2420PacketBody__getMetadata' (at pp.c:27928)
                  ExprList:  (at pp.c:27928)
                    ID: name='CC2420TransmitP__m_msg' (at pp.c:27928)
                ID: name='tx_power' (at pp.c:27928)
              ID: name='nxdata' (at pp.c:27928)
      If:  (at pp.c:27930)
        UnaryOp: op='!' (at pp.c:27930)
          ID: name='tx_power' (at pp.c:27930)
        Compound:  (at pp.c:27930)
          Assignment: op='=' (at pp.c:27931)
            ID: name='tx_power' (at pp.c:27931)
            Constant: type='int', value='31' (at pp.c:27931)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CSN__clr' (at pp.c:27934)
      If:  (at pp.c:27936)
        BinaryOp: op='!=' (at pp.c:27936)
          ID: name='CC2420TransmitP__m_tx_power' (at pp.c:27936)
          ID: name='tx_power' (at pp.c:27936)
        Compound:  (at pp.c:27936)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__TXCTRL__write' (at pp.c:27937)
            ExprList:  (at pp.c:27937)
              BinaryOp: op='|' (at pp.c:27937)
                BinaryOp: op='|' (at pp.c:27937)
                  BinaryOp: op='|' (at pp.c:27937)
                    BinaryOp: op='<<' (at pp.c:27937)
                      Constant: type='int', value='2' (at pp.c:27937)
                      ID: name='CC2420_TXCTRL_TXMIXBUF_CUR' (at pp.c:27937)
                    BinaryOp: op='<<' (at pp.c:27938)
                      Constant: type='int', value='3' (at pp.c:27938)
                      ID: name='CC2420_TXCTRL_PA_CURRENT' (at pp.c:27938)
                  BinaryOp: op='<<' (at pp.c:27939)
                    Constant: type='int', value='1' (at pp.c:27939)
                    ID: name='CC2420_TXCTRL_RESERVED' (at pp.c:27939)
                BinaryOp: op='<<' (at pp.c:27940)
                  BinaryOp: op='&' (at pp.c:27940)
                    ID: name='tx_power' (at pp.c:27940)
                    Constant: type='int', value='0x1F' (at pp.c:27940)
                  ID: name='CC2420_TXCTRL_PA_LEVEL' (at pp.c:27940)
      Assignment: op='=' (at pp.c:27943)
        ID: name='CC2420TransmitP__m_tx_power' (at pp.c:27943)
        ID: name='tx_power' (at pp.c:27943)
      Compound:  (at pp.c:27945)
        Decl: name='tmpLen', quals=[], storage=[] (at pp.c:27946)
          TypeDecl: declname='tmpLen', quals=[] (at pp.c:27946)
            IdentifierType: names=['uint8_t'] (at None)
          BinaryOp: op='-' (at None)
            FuncCall:  (at None)
              ID: name='__nesc_ntoh_leuint8' (at pp.c:27946)
              ExprList:  (at pp.c:27946)
                StructRef: type='.' (at pp.c:27946)
                  StructRef: type='->' (at pp.c:27946)
                    ID: name='header' (at pp.c:27946)
                    ID: name='length' (at pp.c:27946)
                  ID: name='nxdata' (at pp.c:27946)
            Constant: type='int', value='1' (at pp.c:27946)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__TXFIFO__write' (at pp.c:27949)
          ExprList:  (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:27949)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              ID: name='header' (at pp.c:27949)
            BinaryOp: op='-' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint8' (at pp.c:27949)
                ExprList:  (at pp.c:27949)
                  StructRef: type='.' (at pp.c:27949)
                    StructRef: type='->' (at pp.c:27949)
                      ID: name='header' (at pp.c:27949)
                      ID: name='length' (at pp.c:27949)
                    ID: name='nxdata' (at pp.c:27949)
              Constant: type='int', value='1' (at pp.c:27949)
  FuncDef:  (at pp.c:27954)
    Decl: name='CC2420SpiP__Reg__write', quals=[], storage=['static'] (at pp.c:27954)
      FuncDecl: quals=None (at pp.c:27954)
        ParamList:  (at pp.c:27954)
          Decl: name='addr', quals=[], storage=[] (at pp.c:27954)
            TypeDecl: declname='addr', quals=[] (at pp.c:27954)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:27954)
            TypeDecl: declname='data', quals=[] (at pp.c:27954)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Reg__write', quals=[] (at pp.c:27954)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:27956)
      Compound:  (at pp.c:27957)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27957)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27957)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27957)
        Compound:  (at pp.c:27959)
          If:  (at pp.c:27960)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:27960)
            Compound:  (at pp.c:27960)
              Compound:  (at pp.c:27961)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:27962)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:27962)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  Constant: type='int', value='0' (at pp.c:27964)
                Compound:  (at pp.c:27966)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:27968)
                    ExprList:  (at pp.c:27968)
                      ID: name='__nesc_atomic' (at pp.c:27968)
                  Return:  (at pp.c:27970)
                    ID: name='__nesc_temp' (at pp.c:27970)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27976)
          ExprList:  (at pp.c:27976)
            ID: name='__nesc_atomic' (at pp.c:27976)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__SpiByte__write' (at pp.c:27978)
        ExprList:  (at pp.c:27978)
          ID: name='addr' (at pp.c:27978)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__SpiByte__write' (at pp.c:27979)
        ExprList:  (at pp.c:27979)
          BinaryOp: op='>>' (at pp.c:27979)
            ID: name='data' (at pp.c:27979)
            Constant: type='int', value='8' (at pp.c:27979)
      Return:  (at pp.c:27980)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:27980)
          ExprList:  (at pp.c:27980)
            BinaryOp: op='&' (at pp.c:27980)
              ID: name='data' (at pp.c:27980)
              Constant: type='int', value='0xff' (at pp.c:27980)
  FuncDef:  (at pp.c:27984)
    Decl: name='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[], storage=['static'] (at pp.c:27984)
      FuncDecl: quals=None (at pp.c:27984)
        ParamList:  (at pp.c:27984)
          Decl: name='id', quals=[], storage=[] (at pp.c:27984)
            TypeDecl: declname='id', quals=[] (at pp.c:27984)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:27984)
            PtrDecl: quals=[] (at pp.c:27984)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:27984)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:27985)
            PtrDecl: quals=[] (at pp.c:27985)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:27985)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:27986)
            TypeDecl: declname='len', quals=[] (at pp.c:27986)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[] (at pp.c:27984)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27988)
      Assignment: op='=' (at pp.c:27990)
        ID: name='Msp430SpiNoDmaP__0__m_client' (at pp.c:27990)
        ID: name='id' (at pp.c:27990)
      Assignment: op='=' (at pp.c:27991)
        ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:27991)
        ID: name='tx_buf' (at pp.c:27991)
      Assignment: op='=' (at pp.c:27992)
        ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:27992)
        ID: name='rx_buf' (at pp.c:27992)
      Assignment: op='=' (at pp.c:27993)
        ID: name='Msp430SpiNoDmaP__0__m_len' (at pp.c:27993)
        ID: name='len' (at pp.c:27993)
      Assignment: op='=' (at pp.c:27994)
        ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:27994)
        Constant: type='int', value='0' (at pp.c:27994)
      If:  (at pp.c:27996)
        ID: name='len' (at pp.c:27996)
        Compound:  (at pp.c:27996)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__Usart__enableRxIntr' (at pp.c:27997)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__continueOp' (at pp.c:27998)
        Compound:  (at pp.c:28000)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__signalDone_task__postTask' (at pp.c:28001)
      Return:  (at pp.c:28004)
        ID: name='SUCCESS' (at pp.c:28004)
  FuncDef:  (at pp.c:28008)
    Decl: name='Msp430SpiNoDmaP__0__continueOp', quals=[], storage=['static'] (at pp.c:28008)
      FuncDecl: quals=None (at pp.c:28008)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__continueOp', quals=[] (at pp.c:28008)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28010)
      Decl: name='end', quals=[], storage=[] (at pp.c:28012)
        TypeDecl: declname='end', quals=[] (at pp.c:28012)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='tmp', quals=[], storage=[] (at pp.c:28013)
        TypeDecl: declname='tmp', quals=[] (at pp.c:28013)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:28015)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28015)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28015)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28015)
        Compound:  (at pp.c:28017)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__Usart__tx' (at pp.c:28018)
            ExprList:  (at pp.c:28018)
              TernaryOp:  (at pp.c:28018)
                ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:28018)
                ArrayRef:  (at pp.c:28018)
                  ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:28018)
                  ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:28018)
                Constant: type='int', value='0' (at pp.c:28018)
          Assignment: op='=' (at pp.c:28020)
            ID: name='end' (at pp.c:28020)
            BinaryOp: op='+' (at pp.c:28020)
              ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:28020)
              ID: name='Msp430SpiNoDmaP__0__SPI_ATOMIC_SIZE' (at pp.c:28020)
          If:  (at pp.c:28021)
            BinaryOp: op='>' (at pp.c:28021)
              ID: name='end' (at pp.c:28021)
              ID: name='Msp430SpiNoDmaP__0__m_len' (at pp.c:28021)
            Compound:  (at pp.c:28021)
              Assignment: op='=' (at pp.c:28022)
                ID: name='end' (at pp.c:28022)
                ID: name='Msp430SpiNoDmaP__0__m_len' (at pp.c:28022)
          While:  (at pp.c:28024)
            BinaryOp: op='<' (at pp.c:28024)
              UnaryOp: op='++' (at pp.c:28024)
                ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:28024)
              ID: name='end' (at pp.c:28024)
            Compound:  (at pp.c:28024)
              While:  (at pp.c:28025)
                UnaryOp: op='!' (at None)
                  FuncCall:  (at None)
                    ID: name='Msp430SpiNoDmaP__0__Usart__isRxIntrPending' (at pp.c:28025)
              Assignment: op='=' (at pp.c:28026)
                ID: name='tmp' (at pp.c:28026)
                FuncCall:  (at None)
                  ID: name='Msp430SpiNoDmaP__0__Usart__rx' (at pp.c:28026)
              If:  (at pp.c:28027)
                ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:28027)
                Compound:  (at pp.c:28027)
                  Assignment: op='=' (at pp.c:28028)
                    ArrayRef:  (at pp.c:28028)
                      ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:28028)
                      BinaryOp: op='-' (at pp.c:28028)
                        ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:28028)
                        Constant: type='int', value='1' (at pp.c:28028)
                    ID: name='tmp' (at pp.c:28028)
              FuncCall:  (at None)
                ID: name='Msp430SpiNoDmaP__0__Usart__tx' (at pp.c:28031)
                ExprList:  (at pp.c:28031)
                  TernaryOp:  (at pp.c:28031)
                    ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:28031)
                    ArrayRef:  (at pp.c:28031)
                      ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:28031)
                      ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:28031)
                    Constant: type='int', value='0' (at pp.c:28031)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28035)
          ExprList:  (at pp.c:28035)
            ID: name='__nesc_atomic' (at pp.c:28035)
  FuncDef:  (at pp.c:28039)
    Decl: name='CC2420ActiveMessageP__RadioResource__granted', quals=[], storage=['static'] (at pp.c:28039)
      FuncDecl: quals=None (at pp.c:28039)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioResource__granted', quals=[] (at pp.c:28039)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28041)
      Decl: name='rc', quals=[], storage=[] (at pp.c:28042)
        TypeDecl: declname='rc', quals=[] (at pp.c:28042)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='header', quals=[], storage=[] (at pp.c:28043)
        PtrDecl: quals=[] (at pp.c:28043)
          TypeDecl: declname='header', quals=[] (at pp.c:28043)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:28043)
          ExprList:  (at pp.c:28043)
            ID: name='CC2420ActiveMessageP__pending_message' (at pp.c:28043)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SendNotifier__aboutToSend' (at pp.c:28045)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint8' (at pp.c:28045)
            ExprList:  (at pp.c:28045)
              StructRef: type='.' (at pp.c:28045)
                StructRef: type='->' (at pp.c:28045)
                  ID: name='header' (at pp.c:28045)
                  ID: name='type' (at pp.c:28045)
                ID: name='nxdata' (at pp.c:28045)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint16' (at pp.c:28045)
            ExprList:  (at pp.c:28045)
              StructRef: type='.' (at pp.c:28045)
                StructRef: type='->' (at pp.c:28045)
                  ID: name='header' (at pp.c:28045)
                  ID: name='dest' (at pp.c:28045)
                ID: name='nxdata' (at pp.c:28045)
          ID: name='CC2420ActiveMessageP__pending_message' (at pp.c:28045)
      Assignment: op='=' (at pp.c:28046)
        ID: name='rc' (at pp.c:28046)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__SubSend__send' (at pp.c:28046)
          ExprList:  (at pp.c:28046)
            ID: name='CC2420ActiveMessageP__pending_message' (at pp.c:28046)
            ID: name='CC2420ActiveMessageP__pending_length' (at pp.c:28046)
      If:  (at pp.c:28047)
        BinaryOp: op='!=' (at pp.c:28047)
          ID: name='rc' (at pp.c:28047)
          ID: name='SUCCESS' (at pp.c:28047)
        Compound:  (at pp.c:28047)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__RadioResource__release' (at pp.c:28048)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__AMSend__sendDone' (at pp.c:28049)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint8' (at pp.c:28049)
                ExprList:  (at pp.c:28049)
                  StructRef: type='.' (at pp.c:28049)
                    StructRef: type='->' (at pp.c:28049)
                      ID: name='header' (at pp.c:28049)
                      ID: name='type' (at pp.c:28049)
                    ID: name='nxdata' (at pp.c:28049)
              ID: name='CC2420ActiveMessageP__pending_message' (at pp.c:28049)
              ID: name='rc' (at pp.c:28049)
  FuncDef:  (at pp.c:28054)
    Decl: name='AMQueueImplP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:28054)
      FuncDecl: quals=None (at pp.c:28054)
        ParamList:  (at pp.c:28054)
          Decl: name='id', quals=[], storage=[] (at pp.c:28054)
            TypeDecl: declname='id', quals=[] (at pp.c:28054)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:28054)
            PtrDecl: quals=[] (at pp.c:28054)
              TypeDecl: declname='msg', quals=[] (at pp.c:28054)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:28054)
            TypeDecl: declname='err', quals=[] (at pp.c:28054)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__AMSend__sendDone', quals=[] (at pp.c:28054)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28056)
      If:  (at pp.c:28062)
        BinaryOp: op='>=' (at pp.c:28062)
          ID: name='AMQueueImplP__0__current' (at pp.c:28062)
          Constant: type='int', value='1' (at pp.c:28062)
        Compound:  (at pp.c:28062)
          Return:  (at pp.c:28063)
      If:  (at pp.c:28065)
        BinaryOp: op='==' (at pp.c:28065)
          StructRef: type='.' (at pp.c:28065)
            ArrayRef:  (at pp.c:28065)
              ID: name='AMQueueImplP__0__queue' (at pp.c:28065)
              ID: name='AMQueueImplP__0__current' (at pp.c:28065)
            ID: name='msg' (at pp.c:28065)
          ID: name='msg' (at pp.c:28065)
        Compound:  (at pp.c:28065)
          FuncCall:  (at None)
            ID: name='AMQueueImplP__0__sendDone' (at pp.c:28066)
            ExprList:  (at pp.c:28066)
              ID: name='AMQueueImplP__0__current' (at pp.c:28066)
              ID: name='msg' (at pp.c:28066)
              ID: name='err' (at pp.c:28066)
        Compound:  (at pp.c:28068)
  FuncDef:  (at pp.c:28074)
    Decl: name='VirtualizeTimerC__0__fireTimers', quals=[], storage=['static'] (at pp.c:28074)
      FuncDecl: quals=None (at pp.c:28074)
        ParamList:  (at pp.c:28074)
          Decl: name='now', quals=[], storage=[] (at pp.c:28074)
            TypeDecl: declname='now', quals=[] (at pp.c:28074)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__fireTimers', quals=[] (at pp.c:28074)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28075)
      Decl: name='num', quals=[], storage=[] (at pp.c:28076)
        TypeDecl: declname='num', quals=[] (at pp.c:28076)
          IdentifierType: names=['uint8_t'] (at None)
      For:  (at pp.c:28078)
        Assignment: op='=' (at pp.c:28078)
          ID: name='num' (at pp.c:28078)
          Constant: type='int', value='0' (at pp.c:28078)
        BinaryOp: op='<' (at pp.c:28078)
          ID: name='num' (at pp.c:28078)
          ID: name='VirtualizeTimerC__0__NUM_TIMERS' (at pp.c:28078)
        UnaryOp: op='p++' (at pp.c:28078)
          ID: name='num' (at pp.c:28078)
        Compound:  (at pp.c:28079)
          Decl: name='timer', quals=[], storage=[] (at pp.c:28080)
            PtrDecl: quals=[] (at pp.c:28080)
              TypeDecl: declname='timer', quals=[] (at pp.c:28080)
                IdentifierType: names=['VirtualizeTimerC__0__Timer_t'] (at None)
            UnaryOp: op='&' (at pp.c:28080)
              ArrayRef:  (at pp.c:28080)
                ID: name='VirtualizeTimerC__0__m_timers' (at pp.c:28080)
                ID: name='num' (at pp.c:28080)
          If:  (at pp.c:28082)
            StructRef: type='->' (at pp.c:28082)
              ID: name='timer' (at pp.c:28082)
              ID: name='isrunning' (at pp.c:28082)
            Compound:  (at pp.c:28083)
              Decl: name='elapsed', quals=[], storage=[] (at pp.c:28084)
                TypeDecl: declname='elapsed', quals=[] (at pp.c:28084)
                  IdentifierType: names=['uint32_t'] (at None)
                BinaryOp: op='-' (at pp.c:28084)
                  ID: name='now' (at pp.c:28084)
                  StructRef: type='->' (at pp.c:28084)
                    ID: name='timer' (at pp.c:28084)
                    ID: name='t0' (at pp.c:28084)
              If:  (at pp.c:28086)
                BinaryOp: op='>=' (at pp.c:28086)
                  ID: name='elapsed' (at pp.c:28086)
                  StructRef: type='->' (at pp.c:28086)
                    ID: name='timer' (at pp.c:28086)
                    ID: name='dt' (at pp.c:28086)
                Compound:  (at pp.c:28087)
                  If:  (at pp.c:28088)
                    StructRef: type='->' (at pp.c:28088)
                      ID: name='timer' (at pp.c:28088)
                      ID: name='isoneshot' (at pp.c:28088)
                    Compound:  (at pp.c:28088)
                      Assignment: op='=' (at pp.c:28089)
                        StructRef: type='->' (at pp.c:28089)
                          ID: name='timer' (at pp.c:28089)
                          ID: name='isrunning' (at pp.c:28089)
                        ID: name='FALSE' (at pp.c:28089)
                    Compound:  (at pp.c:28091)
                      Assignment: op='+=' (at pp.c:28093)
                        StructRef: type='->' (at pp.c:28093)
                          ID: name='timer' (at pp.c:28093)
                          ID: name='t0' (at pp.c:28093)
                        StructRef: type='->' (at pp.c:28093)
                          ID: name='timer' (at pp.c:28093)
                          ID: name='dt' (at pp.c:28093)
                  FuncCall:  (at None)
                    ID: name='VirtualizeTimerC__0__Timer__fired' (at pp.c:28095)
                    ExprList:  (at pp.c:28095)
                      ID: name='num' (at pp.c:28095)
                  Break:  (at pp.c:28096)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__updateFromTimer__postTask' (at pp.c:28100)
  FuncDef:  (at pp.c:28104)
    Decl: name='TransformAlarmC__1__Alarm__startAt', quals=[], storage=['static'] (at pp.c:28104)
      FuncDecl: quals=None (at pp.c:28104)
        ParamList:  (at pp.c:28104)
          Decl: name='t0', quals=[], storage=[] (at pp.c:28104)
            TypeDecl: declname='t0', quals=[] (at pp.c:28104)
              IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:28104)
            TypeDecl: declname='dt', quals=[] (at pp.c:28104)
              IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Alarm__startAt', quals=[] (at pp.c:28104)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28105)
      Compound:  (at pp.c:28106)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28106)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28106)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28106)
        Compound:  (at pp.c:28107)
          Assignment: op='=' (at pp.c:28108)
            ID: name='TransformAlarmC__1__m_t0' (at pp.c:28108)
            ID: name='t0' (at pp.c:28108)
          Assignment: op='=' (at pp.c:28109)
            ID: name='TransformAlarmC__1__m_dt' (at pp.c:28109)
            ID: name='dt' (at pp.c:28109)
          FuncCall:  (at None)
            ID: name='TransformAlarmC__1__set_alarm' (at pp.c:28110)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28113)
          ExprList:  (at pp.c:28113)
            ID: name='__nesc_atomic' (at pp.c:28113)
  FuncDef:  (at pp.c:28117)
    Decl: name='CC2420ControlP__CC2420Config__getShortAddr', quals=[], storage=['static'] (at pp.c:28117)
      FuncDecl: quals=None (at pp.c:28117)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__getShortAddr', quals=[] (at pp.c:28117)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:28119)
      Compound:  (at pp.c:28120)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28120)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28120)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28120)
        Compound:  (at pp.c:28122)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28123)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28123)
              IdentifierType: names=['int', 'unsigned'] (at None)
            ID: name='CC2420ControlP__m_short_addr' (at pp.c:28125)
          Compound:  (at pp.c:28127)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:28129)
              ExprList:  (at pp.c:28129)
                ID: name='__nesc_atomic' (at pp.c:28129)
            Return:  (at pp.c:28131)
              ID: name='__nesc_temp' (at pp.c:28131)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28135)
          ExprList:  (at pp.c:28135)
            ID: name='__nesc_atomic' (at pp.c:28135)
  FuncDef:  (at pp.c:28139)
    Decl: name='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[], storage=['static'] (at pp.c:28139)
      FuncDecl: quals=None (at pp.c:28139)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[] (at pp.c:28139)
          IdentifierType: names=['ieee_eui64_t'] (at None)
    Compound:  (at pp.c:28141)
      Decl: name='id', quals=[], storage=[] (at pp.c:28142)
        ArrayDecl:  (at pp.c:28142)
          TypeDecl: declname='id', quals=[] (at pp.c:28142)
            IdentifierType: names=['uint8_t'] (at None)
          Constant: type='int', value='6' (at pp.c:28142)
      Decl: name='eui', quals=[], storage=[] (at pp.c:28143)
        TypeDecl: declname='eui', quals=[] (at pp.c:28143)
          IdentifierType: names=['ieee_eui64_t'] (at None)
      If:  (at pp.c:28146)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='DallasId48ToIeeeEui64C__ReadId48__read' (at pp.c:28146)
            ExprList:  (at pp.c:28146)
              ID: name='id' (at pp.c:28146)
          ID: name='SUCCESS' (at pp.c:28146)
        Compound:  (at pp.c:28146)
          FuncCall:  (at None)
            ID: name='memset' (at pp.c:28147)
            ExprList:  (at pp.c:28147)
              StructRef: type='.' (at pp.c:28147)
                ID: name='eui' (at pp.c:28147)
                ID: name='data' (at pp.c:28147)
              Constant: type='int', value='0' (at pp.c:28147)
              Constant: type='int', value='8' (at pp.c:28147)
          Goto: name='done' (at pp.c:28148)
      Assignment: op='=' (at pp.c:28151)
        ArrayRef:  (at pp.c:28151)
          StructRef: type='.' (at pp.c:28151)
            ID: name='eui' (at pp.c:28151)
            ID: name='data' (at pp.c:28151)
          Constant: type='int', value='0' (at pp.c:28151)
        ID: name='IEEE_EUI64_COMPANY_ID_0' (at pp.c:28151)
      Assignment: op='=' (at pp.c:28152)
        ArrayRef:  (at pp.c:28152)
          StructRef: type='.' (at pp.c:28152)
            ID: name='eui' (at pp.c:28152)
            ID: name='data' (at pp.c:28152)
          Constant: type='int', value='1' (at pp.c:28152)
        ID: name='IEEE_EUI64_COMPANY_ID_1' (at pp.c:28152)
      Assignment: op='=' (at pp.c:28153)
        ArrayRef:  (at pp.c:28153)
          StructRef: type='.' (at pp.c:28153)
            ID: name='eui' (at pp.c:28153)
            ID: name='data' (at pp.c:28153)
          Constant: type='int', value='2' (at pp.c:28153)
        ID: name='IEEE_EUI64_COMPANY_ID_2' (at pp.c:28153)
      Assignment: op='=' (at pp.c:28157)
        ArrayRef:  (at pp.c:28157)
          StructRef: type='.' (at pp.c:28157)
            ID: name='eui' (at pp.c:28157)
            ID: name='data' (at pp.c:28157)
          Constant: type='int', value='3' (at pp.c:28157)
        ID: name='IEEE_EUI64_SERIAL_ID_0' (at pp.c:28157)
      Assignment: op='=' (at pp.c:28158)
        ArrayRef:  (at pp.c:28158)
          StructRef: type='.' (at pp.c:28158)
            ID: name='eui' (at pp.c:28158)
            ID: name='data' (at pp.c:28158)
          Constant: type='int', value='4' (at pp.c:28158)
        ID: name='IEEE_EUI64_SERIAL_ID_1' (at pp.c:28158)
      Assignment: op='=' (at pp.c:28161)
        ArrayRef:  (at pp.c:28161)
          StructRef: type='.' (at pp.c:28161)
            ID: name='eui' (at pp.c:28161)
            ID: name='data' (at pp.c:28161)
          Constant: type='int', value='5' (at pp.c:28161)
        ArrayRef:  (at pp.c:28161)
          ID: name='id' (at pp.c:28161)
          Constant: type='int', value='2' (at pp.c:28161)
      Assignment: op='=' (at pp.c:28162)
        ArrayRef:  (at pp.c:28162)
          StructRef: type='.' (at pp.c:28162)
            ID: name='eui' (at pp.c:28162)
            ID: name='data' (at pp.c:28162)
          Constant: type='int', value='6' (at pp.c:28162)
        ArrayRef:  (at pp.c:28162)
          ID: name='id' (at pp.c:28162)
          Constant: type='int', value='1' (at pp.c:28162)
      Assignment: op='=' (at pp.c:28163)
        ArrayRef:  (at pp.c:28163)
          StructRef: type='.' (at pp.c:28163)
            ID: name='eui' (at pp.c:28163)
            ID: name='data' (at pp.c:28163)
          Constant: type='int', value='7' (at pp.c:28163)
        ArrayRef:  (at pp.c:28163)
          ID: name='id' (at pp.c:28163)
          Constant: type='int', value='0' (at pp.c:28163)
      Label: name='done' (at pp.c:28165)
        Return:  (at pp.c:28166)
          ID: name='eui' (at pp.c:28166)
  FuncDef:  (at pp.c:28170)
    Decl: name='BusyWaitCounterC__0__BusyWait__wait', quals=[], storage=['static'] (at pp.c:28170)
      FuncDecl: quals=None (at pp.c:28170)
        ParamList:  (at pp.c:28170)
          Decl: name='dt', quals=[], storage=[] (at pp.c:28170)
            TypeDecl: declname='dt', quals=[] (at pp.c:28170)
              IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
        TypeDecl: declname='BusyWaitCounterC__0__BusyWait__wait', quals=[] (at pp.c:28170)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28171)
      Compound:  (at pp.c:28173)
        Decl: name='t0', quals=[], storage=[] (at pp.c:28176)
          TypeDecl: declname='t0', quals=[] (at pp.c:28176)
            IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
          FuncCall:  (at None)
            ID: name='BusyWaitCounterC__0__Counter__get' (at pp.c:28176)
        If:  (at pp.c:28178)
          BinaryOp: op='>' (at pp.c:28178)
            ID: name='dt' (at pp.c:28178)
            ID: name='BusyWaitCounterC__0__HALF_MAX_SIZE_TYPE' (at pp.c:28178)
          Compound:  (at pp.c:28179)
            Assignment: op='-=' (at pp.c:28180)
              ID: name='dt' (at pp.c:28180)
              ID: name='BusyWaitCounterC__0__HALF_MAX_SIZE_TYPE' (at pp.c:28180)
            While:  (at pp.c:28181)
              BinaryOp: op='<=' (at None)
                BinaryOp: op='-' (at None)
                  FuncCall:  (at None)
                    ID: name='BusyWaitCounterC__0__Counter__get' (at pp.c:28181)
                  ID: name='t0' (at pp.c:28181)
                ID: name='dt' (at pp.c:28181)
            Assignment: op='+=' (at pp.c:28182)
              ID: name='t0' (at pp.c:28182)
              ID: name='dt' (at pp.c:28182)
            Assignment: op='=' (at pp.c:28183)
              ID: name='dt' (at pp.c:28183)
              ID: name='BusyWaitCounterC__0__HALF_MAX_SIZE_TYPE' (at pp.c:28183)
        While:  (at pp.c:28186)
          BinaryOp: op='<=' (at None)
            BinaryOp: op='-' (at None)
              FuncCall:  (at None)
                ID: name='BusyWaitCounterC__0__Counter__get' (at pp.c:28186)
              ID: name='t0' (at pp.c:28186)
            ID: name='dt' (at pp.c:28186)
  FuncDef:  (at pp.c:28191)
    Decl: name='CC2420ReceiveP__waitForNextPacket', quals=[], storage=['static'] (at pp.c:28191)
      FuncDecl: quals=None (at pp.c:28191)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__waitForNextPacket', quals=[] (at pp.c:28191)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28193)
      Compound:  (at pp.c:28194)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28194)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28194)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28194)
        Compound:  (at pp.c:28196)
          If:  (at pp.c:28197)
            BinaryOp: op='==' (at pp.c:28197)
              ID: name='CC2420ReceiveP__m_state' (at pp.c:28197)
              ID: name='CC2420ReceiveP__S_STOPPED' (at pp.c:28197)
            Compound:  (at pp.c:28197)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:28198)
              Compound:  (at pp.c:28199)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:28201)
                  ExprList:  (at pp.c:28201)
                    ID: name='__nesc_atomic' (at pp.c:28201)
                Return:  (at pp.c:28203)
          Assignment: op='=' (at pp.c:28206)
            ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:28206)
            ID: name='FALSE' (at pp.c:28206)
          If:  (at pp.c:28208)
            BinaryOp: op='||' (at pp.c:28208)
              BinaryOp: op='&&' (at pp.c:28208)
                ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:28208)
                FuncCall:  (at None)
                  ID: name='CC2420ReceiveP__FIFO__get' (at pp.c:28208)
              UnaryOp: op='!' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420ReceiveP__FIFOP__get' (at pp.c:28208)
            Compound:  (at pp.c:28208)
              If:  (at pp.c:28210)
                ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:28210)
                Compound:  (at pp.c:28210)
                  UnaryOp: op='p--' (at pp.c:28211)
                    ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:28211)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__beginReceive' (at pp.c:28218)
            Compound:  (at pp.c:28221)
              Assignment: op='=' (at pp.c:28223)
                ID: name='CC2420ReceiveP__m_state' (at pp.c:28223)
                ID: name='CC2420ReceiveP__S_STARTED' (at pp.c:28223)
              Assignment: op='=' (at pp.c:28224)
                ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:28224)
                Constant: type='int', value='0' (at pp.c:28224)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:28225)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28229)
          ExprList:  (at pp.c:28229)
            ID: name='__nesc_atomic' (at pp.c:28229)
  FuncDef:  (at pp.c:28233)
    Decl: name='CC2420ReceiveP__beginReceive', quals=[], storage=['static'] (at pp.c:28233)
      FuncDecl: quals=None (at pp.c:28233)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__beginReceive', quals=[] (at pp.c:28233)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28235)
      Assignment: op='=' (at pp.c:28236)
        ID: name='CC2420ReceiveP__m_state' (at pp.c:28236)
        ID: name='CC2420ReceiveP__S_RX_LENGTH' (at pp.c:28236)
      Assignment: op='=' (at pp.c:28239)
        ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:28239)
        ID: name='TRUE' (at pp.c:28239)
      If:  (at pp.c:28240)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__SpiResource__isOwner' (at pp.c:28240)
        Compound:  (at pp.c:28240)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__receive' (at pp.c:28241)
        Compound:  (at pp.c:28243)
          If:  (at pp.c:28245)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__SpiResource__immediateRequest' (at pp.c:28245)
              ID: name='SUCCESS' (at pp.c:28245)
            Compound:  (at pp.c:28245)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__receive' (at pp.c:28246)
            Compound:  (at pp.c:28248)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__SpiResource__request' (at pp.c:28249)
  FuncDef:  (at pp.c:28255)
    Decl: name='CC2420ReceiveP__receive', quals=[], storage=['static'] (at pp.c:28255)
      FuncDecl: quals=None (at pp.c:28255)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__receive', quals=[] (at pp.c:28255)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28257)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CSN__clr' (at pp.c:28258)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__RXFIFO__beginRead' (at pp.c:28259)
        ExprList:  (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:28259)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__CC2420PacketBody__getHeader' (at pp.c:28259)
              ExprList:  (at pp.c:28259)
                ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:28259)
          Constant: type='int', value='1' (at pp.c:28259)
  FuncDef:  (at pp.c:28263)
    Decl: name='CC2420SpiP__Fifo__beginRead', quals=[], storage=['static'] (at pp.c:28263)
      FuncDecl: quals=None (at pp.c:28263)
        ParamList:  (at pp.c:28263)
          Decl: name='addr', quals=[], storage=[] (at pp.c:28263)
            TypeDecl: declname='addr', quals=[] (at pp.c:28263)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:28263)
            PtrDecl: quals=[] (at pp.c:28263)
              TypeDecl: declname='data', quals=[] (at pp.c:28263)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:28264)
            TypeDecl: declname='len', quals=[] (at pp.c:28264)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__beginRead', quals=[] (at pp.c:28263)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:28266)
      Decl: name='status', quals=[], storage=[] (at pp.c:28268)
        TypeDecl: declname='status', quals=[] (at pp.c:28268)
          IdentifierType: names=['cc2420_status_t'] (at None)
        Constant: type='int', value='0' (at pp.c:28268)
      Compound:  (at pp.c:28270)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28270)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28270)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28270)
        Compound:  (at pp.c:28272)
          If:  (at pp.c:28273)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:28273)
            Compound:  (at pp.c:28273)
              Compound:  (at pp.c:28274)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28275)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28275)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='status' (at pp.c:28277)
                Compound:  (at pp.c:28279)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:28281)
                    ExprList:  (at pp.c:28281)
                      ID: name='__nesc_atomic' (at pp.c:28281)
                  Return:  (at pp.c:28283)
                    ID: name='__nesc_temp' (at pp.c:28283)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28289)
          ExprList:  (at pp.c:28289)
            ID: name='__nesc_atomic' (at pp.c:28289)
      Assignment: op='=' (at pp.c:28291)
        ID: name='CC2420SpiP__m_addr' (at pp.c:28291)
        BinaryOp: op='|' (at pp.c:28291)
          ID: name='addr' (at pp.c:28291)
          Constant: type='int', value='0x40' (at pp.c:28291)
      Assignment: op='=' (at pp.c:28293)
        ID: name='status' (at pp.c:28293)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:28293)
          ExprList:  (at pp.c:28293)
            ID: name='CC2420SpiP__m_addr' (at pp.c:28293)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__Fifo__continueRead' (at pp.c:28294)
        ExprList:  (at pp.c:28294)
          ID: name='addr' (at pp.c:28294)
          ID: name='data' (at pp.c:28294)
          ID: name='len' (at pp.c:28294)
      Return:  (at pp.c:28296)
        ID: name='status' (at pp.c:28296)
  FuncDef:  (at pp.c:28300)
    Decl: name='CC2420SpiP__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:28300)
      FuncDecl: quals=None (at pp.c:28300)
        ParamList:  (at pp.c:28300)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:28300)
            PtrDecl: quals=[] (at pp.c:28300)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:28300)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:28300)
            PtrDecl: quals=[] (at pp.c:28300)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:28300)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:28301)
            TypeDecl: declname='len', quals=[] (at pp.c:28301)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:28301)
            TypeDecl: declname='error', quals=[] (at pp.c:28301)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiPacket__sendDone', quals=[] (at pp.c:28300)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28303)
      If:  (at pp.c:28304)
        BinaryOp: op='&' (at pp.c:28304)
          ID: name='CC2420SpiP__m_addr' (at pp.c:28304)
          Constant: type='int', value='0x40' (at pp.c:28304)
        Compound:  (at pp.c:28304)
          FuncCall:  (at None)
            ID: name='CC2420SpiP__Fifo__readDone' (at pp.c:28305)
            ExprList:  (at pp.c:28305)
              BinaryOp: op='&' (at pp.c:28305)
                ID: name='CC2420SpiP__m_addr' (at pp.c:28305)
                UnaryOp: op='~' (at pp.c:28305)
                  Constant: type='int', value='0x40' (at pp.c:28305)
              ID: name='rx_buf' (at pp.c:28305)
              ID: name='len' (at pp.c:28305)
              ID: name='error' (at pp.c:28305)
        Compound:  (at pp.c:28309)
          FuncCall:  (at None)
            ID: name='CC2420SpiP__Fifo__writeDone' (at pp.c:28310)
            ExprList:  (at pp.c:28310)
              ID: name='CC2420SpiP__m_addr' (at pp.c:28310)
              ID: name='tx_buf' (at pp.c:28310)
              ID: name='len' (at pp.c:28310)
              ID: name='error' (at pp.c:28310)
  FuncDef:  (at pp.c:28315)
    Decl: name='CC2420ReceiveP__flush', quals=[], storage=['static'] (at pp.c:28315)
      FuncDecl: quals=None (at pp.c:28315)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__flush', quals=[] (at pp.c:28315)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28317)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__reset_state' (at pp.c:28326)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CSN__set' (at pp.c:28328)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CSN__clr' (at pp.c:28329)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__SFLUSHRX__strobe' (at pp.c:28330)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__SFLUSHRX__strobe' (at pp.c:28331)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CSN__set' (at pp.c:28332)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:28333)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__waitForNextPacket' (at pp.c:28334)
  FuncDef:  (at pp.c:28338)
    Decl: name='CC2420ControlP__writeFsctrl', quals=[], storage=['static'] (at pp.c:28338)
      FuncDecl: quals=None (at pp.c:28338)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__writeFsctrl', quals=[] (at pp.c:28338)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28340)
      Decl: name='channel', quals=[], storage=[] (at pp.c:28341)
        TypeDecl: declname='channel', quals=[] (at pp.c:28341)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:28343)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28343)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28343)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28343)
        Compound:  (at pp.c:28345)
          Assignment: op='=' (at pp.c:28346)
            ID: name='channel' (at pp.c:28346)
            ID: name='CC2420ControlP__m_channel' (at pp.c:28346)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28349)
          ExprList:  (at pp.c:28349)
            ID: name='__nesc_atomic' (at pp.c:28349)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__FSCTRL__write' (at pp.c:28351)
        ExprList:  (at pp.c:28351)
          BinaryOp: op='|' (at pp.c:28351)
            BinaryOp: op='<<' (at pp.c:28351)
              Constant: type='int', value='1' (at pp.c:28351)
              ID: name='CC2420_FSCTRL_LOCK_THR' (at pp.c:28351)
            BinaryOp: op='<<' (at pp.c:28352)
              BinaryOp: op='+' (at pp.c:28352)
                BinaryOp: op='*' (at pp.c:28352)
                  BinaryOp: op='-' (at pp.c:28352)
                    ID: name='channel' (at pp.c:28352)
                    Constant: type='int', value='11' (at pp.c:28352)
                  Constant: type='int', value='5' (at pp.c:28352)
                Constant: type='int', value='357' (at pp.c:28352)
              ID: name='CC2420_FSCTRL_FREQ' (at pp.c:28352)
  FuncDef:  (at pp.c:28361)
    Decl: name='CC2420ControlP__writeMdmctrl0', quals=[], storage=['static'] (at pp.c:28361)
      FuncDecl: quals=None (at pp.c:28361)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__writeMdmctrl0', quals=[] (at pp.c:28361)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28363)
      Compound:  (at pp.c:28364)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28364)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28364)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28364)
        Compound:  (at pp.c:28366)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__MDMCTRL0__write' (at pp.c:28367)
            ExprList:  (at pp.c:28367)
              BinaryOp: op='|' (at pp.c:28367)
                BinaryOp: op='|' (at pp.c:28367)
                  BinaryOp: op='|' (at pp.c:28367)
                    BinaryOp: op='|' (at pp.c:28367)
                      BinaryOp: op='|' (at pp.c:28367)
                        BinaryOp: op='|' (at pp.c:28367)
                          BinaryOp: op='|' (at pp.c:28367)
                            BinaryOp: op='<<' (at pp.c:28367)
                              Constant: type='int', value='1' (at pp.c:28367)
                              ID: name='CC2420_MDMCTRL0_RESERVED_FRAME_MODE' (at pp.c:28367)
                            BinaryOp: op='<<' (at pp.c:28368)
                              TernaryOp:  (at pp.c:28368)
                                BinaryOp: op='&&' (at pp.c:28368)
                                  ID: name='CC2420ControlP__addressRecognition' (at pp.c:28368)
                                  ID: name='CC2420ControlP__hwAddressRecognition' (at pp.c:28368)
                                Constant: type='int', value='1' (at pp.c:28368)
                                Constant: type='int', value='0' (at pp.c:28368)
                              ID: name='CC2420_MDMCTRL0_ADR_DECODE' (at pp.c:28368)
                          BinaryOp: op='<<' (at pp.c:28369)
                            Constant: type='int', value='2' (at pp.c:28369)
                            ID: name='CC2420_MDMCTRL0_CCA_HYST' (at pp.c:28369)
                        BinaryOp: op='<<' (at pp.c:28370)
                          Constant: type='int', value='3' (at pp.c:28370)
                          ID: name='CC2420_MDMCTRL0_CCA_MOD' (at pp.c:28370)
                      BinaryOp: op='<<' (at pp.c:28371)
                        Constant: type='int', value='1' (at pp.c:28371)
                        ID: name='CC2420_MDMCTRL0_AUTOCRC' (at pp.c:28371)
                    BinaryOp: op='<<' (at pp.c:28372)
                      BinaryOp: op='&&' (at pp.c:28372)
                        ID: name='CC2420ControlP__autoAckEnabled' (at pp.c:28372)
                        ID: name='CC2420ControlP__hwAutoAckDefault' (at pp.c:28372)
                      ID: name='CC2420_MDMCTRL0_AUTOACK' (at pp.c:28372)
                  BinaryOp: op='<<' (at pp.c:28373)
                    Constant: type='int', value='0' (at pp.c:28373)
                    ID: name='CC2420_MDMCTRL0_AUTOACK' (at pp.c:28373)
                BinaryOp: op='<<' (at pp.c:28374)
                  Constant: type='int', value='2' (at pp.c:28374)
                  ID: name='CC2420_MDMCTRL0_PREAMBLE_LENGTH' (at pp.c:28374)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28377)
          ExprList:  (at pp.c:28377)
            ID: name='__nesc_atomic' (at pp.c:28377)
  FuncDef:  (at pp.c:28386)
    Decl: name='CC2420ControlP__writeId', quals=[], storage=['static'] (at pp.c:28386)
      FuncDecl: quals=None (at pp.c:28386)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__writeId', quals=[] (at pp.c:28386)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28388)
      Decl: name='id', quals=[], storage=[] (at pp.c:28389)
        ArrayDecl:  (at pp.c:28389)
          TypeDecl: declname='id', quals=[] (at pp.c:28389)
            IdentifierType: names=['nxle_uint16_t'] (at None)
          Constant: type='int', value='6' (at pp.c:28389)
      Compound:  (at pp.c:28391)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28391)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28391)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28391)
        Compound:  (at pp.c:28393)
          Assignment: op='=' (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  PtrDecl: quals=[] (at pp.c:28394)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['ieee_eui64_t'] (at None)
                UnaryOp: op='&' (at pp.c:28394)
                  ArrayRef:  (at pp.c:28394)
                    ID: name='id' (at pp.c:28394)
                    Constant: type='int', value='0' (at pp.c:28394)
            ID: name='CC2420ControlP__m_ext_addr' (at pp.c:28394)
          FuncCall:  (at None)
            ID: name='__nesc_hton_leuint16' (at pp.c:28395)
            ExprList:  (at pp.c:28395)
              StructRef: type='.' (at pp.c:28395)
                ArrayRef:  (at pp.c:28395)
                  ID: name='id' (at pp.c:28395)
                  Constant: type='int', value='4' (at pp.c:28395)
                ID: name='nxdata' (at pp.c:28395)
              ID: name='CC2420ControlP__m_pan' (at pp.c:28395)
          FuncCall:  (at None)
            ID: name='__nesc_hton_leuint16' (at pp.c:28396)
            ExprList:  (at pp.c:28396)
              StructRef: type='.' (at pp.c:28396)
                ArrayRef:  (at pp.c:28396)
                  ID: name='id' (at pp.c:28396)
                  Constant: type='int', value='5' (at pp.c:28396)
                ID: name='nxdata' (at pp.c:28396)
              ID: name='CC2420ControlP__m_short_addr' (at pp.c:28396)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28399)
          ExprList:  (at pp.c:28399)
            ID: name='__nesc_atomic' (at pp.c:28399)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__IEEEADR__write' (at pp.c:28401)
        ExprList:  (at pp.c:28401)
          Constant: type='int', value='0' (at pp.c:28401)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:28401)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            UnaryOp: op='&' (at pp.c:28401)
              ID: name='id' (at pp.c:28401)
          Constant: type='int', value='12' (at pp.c:28401)
  FuncDef:  (at pp.c:28405)
    Decl: name='Msp430UartP__0__ResourceConfigure__configure', quals=[], storage=['static'] (at pp.c:28405)
      FuncDecl: quals=None (at pp.c:28405)
        ParamList:  (at pp.c:28405)
          Decl: name='id', quals=[], storage=[] (at pp.c:28405)
            TypeDecl: declname='id', quals=[] (at pp.c:28405)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__ResourceConfigure__configure', quals=[] (at pp.c:28405)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28407)
      Decl: name='config', quals=[], storage=[] (at pp.c:28408)
        PtrDecl: quals=[] (at pp.c:28408)
          TypeDecl: declname='config', quals=[] (at pp.c:28408)
            IdentifierType: names=['msp430_uart_union_config_t'] (at None)
        FuncCall:  (at None)
          ID: name='Msp430UartP__0__Msp430UartConfigure__getConfig' (at pp.c:28408)
          ExprList:  (at pp.c:28408)
            ID: name='id' (at pp.c:28408)
      Assignment: op='=' (at pp.c:28411)
        ID: name='Msp430UartP__0__m_byte_time' (at pp.c:28411)
        BinaryOp: op='/' (at pp.c:28411)
          StructRef: type='.' (at pp.c:28411)
            StructRef: type='->' (at pp.c:28411)
              ID: name='config' (at pp.c:28411)
              ID: name='uartConfig' (at pp.c:28411)
            ID: name='ubr' (at pp.c:28411)
          Constant: type='int', value='2' (at pp.c:28411)
      FuncCall:  (at None)
        ID: name='Msp430UartP__0__Usart__setModeUart' (at pp.c:28412)
        ExprList:  (at pp.c:28412)
          ID: name='config' (at pp.c:28412)
      FuncCall:  (at None)
        ID: name='Msp430UartP__0__Usart__enableIntr' (at pp.c:28413)
  FuncDef:  (at pp.c:28417)
    Decl: name='HplMsp430Usart1P__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:28417)
      FuncDecl: quals=None (at pp.c:28417)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__disableSpi', quals=[] (at pp.c:28417)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28419)
      Compound:  (at pp.c:28422)
        Assignment: op='&=' (at pp.c:28423)
          ID: name='HplMsp430Usart1P__ME2' (at pp.c:28423)
          UnaryOp: op='~' (at pp.c:28423)
            BinaryOp: op='<<' (at pp.c:28423)
              Constant: type='int', value='1' (at pp.c:28423)
              Constant: type='int', value='4' (at pp.c:28423)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart1P__SIMO__selectIOFunc' (at pp.c:28424)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart1P__SOMI__selectIOFunc' (at pp.c:28425)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart1P__UCLK__selectIOFunc' (at pp.c:28426)
  FuncDef:  (at pp.c:28431)
    Decl: name='HplMsp430Usart1P__Usart__disableUart', quals=[], storage=['static'] (at pp.c:28431)
      FuncDecl: quals=None (at pp.c:28431)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart1P__Usart__disableUart', quals=[] (at pp.c:28431)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28433)
      Compound:  (at pp.c:28436)
        Assignment: op='&=' (at pp.c:28437)
          ID: name='HplMsp430Usart1P__ME2' (at pp.c:28437)
          UnaryOp: op='~' (at pp.c:28437)
            BinaryOp: op='|' (at pp.c:28437)
              BinaryOp: op='<<' (at pp.c:28437)
                Constant: type='int', value='1' (at pp.c:28437)
                Constant: type='int', value='5' (at pp.c:28437)
              BinaryOp: op='<<' (at pp.c:28437)
                Constant: type='int', value='1' (at pp.c:28437)
                Constant: type='int', value='4' (at pp.c:28437)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart1P__UTXD__selectIOFunc' (at pp.c:28438)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart1P__URXD__selectIOFunc' (at pp.c:28439)
  FuncDef:  (at pp.c:28444)
    Decl: name='ArbiterP__0__Resource__isOwner', quals=[], storage=['static'] (at pp.c:28444)
      FuncDecl: quals=None (at pp.c:28444)
        ParamList:  (at pp.c:28444)
          Decl: name='id', quals=[], storage=[] (at pp.c:28444)
            TypeDecl: declname='id', quals=[] (at pp.c:28444)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__Resource__isOwner', quals=[] (at pp.c:28444)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:28446)
      Compound:  (at pp.c:28447)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28447)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28447)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28447)
        Compound:  (at pp.c:28449)
          If:  (at pp.c:28450)
            BinaryOp: op='&&' (at pp.c:28450)
              BinaryOp: op='==' (at pp.c:28450)
                ID: name='ArbiterP__0__resId' (at pp.c:28450)
                ID: name='id' (at pp.c:28450)
              BinaryOp: op='==' (at pp.c:28450)
                ID: name='ArbiterP__0__state' (at pp.c:28450)
                ID: name='ArbiterP__0__RES_BUSY' (at pp.c:28450)
            Compound:  (at pp.c:28450)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28451)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28451)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='TRUE' (at pp.c:28453)
              Compound:  (at pp.c:28455)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:28457)
                  ExprList:  (at pp.c:28457)
                    ID: name='__nesc_atomic' (at pp.c:28457)
                Return:  (at pp.c:28459)
                  ID: name='__nesc_temp' (at pp.c:28459)
            Compound:  (at pp.c:28464)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28465)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28465)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='FALSE' (at pp.c:28467)
              Compound:  (at pp.c:28469)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:28471)
                  ExprList:  (at pp.c:28471)
                    ID: name='__nesc_atomic' (at pp.c:28471)
                Return:  (at pp.c:28473)
                  ID: name='__nesc_temp' (at pp.c:28473)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28478)
          ExprList:  (at pp.c:28478)
            ID: name='__nesc_atomic' (at pp.c:28478)
  FuncDef:  (at pp.c:28482)
    Decl: name='SerialP__testOff', quals=[], storage=['static'] (at pp.c:28482)
      FuncDecl: quals=None (at pp.c:28482)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SerialP__testOff', quals=[] (at pp.c:28482)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28484)
      Decl: name='turnOff', quals=[], storage=[] (at pp.c:28485)
        TypeDecl: declname='turnOff', quals=[] (at pp.c:28485)
          IdentifierType: names=['bool'] (at None)
        ID: name='FALSE' (at pp.c:28485)
      Compound:  (at pp.c:28489)
        If:  (at pp.c:28490)
          BinaryOp: op='&&' (at pp.c:28490)
            BinaryOp: op='==' (at pp.c:28490)
              ID: name='SerialP__txState' (at pp.c:28490)
              ID: name='SerialP__TXSTATE_INACTIVE' (at pp.c:28490)
            BinaryOp: op='==' (at pp.c:28491)
              ID: name='SerialP__rxState' (at pp.c:28491)
              ID: name='SerialP__RXSTATE_INACTIVE' (at pp.c:28491)
          Compound:  (at pp.c:28491)
            Assignment: op='=' (at pp.c:28492)
              ID: name='turnOff' (at pp.c:28492)
              ID: name='TRUE' (at pp.c:28492)
      If:  (at pp.c:28495)
        ID: name='turnOff' (at pp.c:28495)
        Compound:  (at pp.c:28495)
          FuncCall:  (at None)
            ID: name='SerialP__stopDoneTask__postTask' (at pp.c:28496)
          Assignment: op='=' (at pp.c:28499)
            ID: name='SerialP__offPending' (at pp.c:28499)
            ID: name='FALSE' (at pp.c:28499)
        Compound:  (at pp.c:28501)
          Assignment: op='=' (at pp.c:28504)
            ID: name='SerialP__offPending' (at pp.c:28504)
            ID: name='TRUE' (at pp.c:28504)
  FuncDef:  (at pp.c:28509)
    Decl: name='HdlcTranslateC__SerialFrameComm__putDelimiter', quals=[], storage=['static'] (at pp.c:28509)
      FuncDecl: quals=None (at pp.c:28509)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HdlcTranslateC__SerialFrameComm__putDelimiter', quals=[] (at pp.c:28509)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:28511)
      Compound:  (at pp.c:28512)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28512)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28512)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28512)
        Compound:  (at pp.c:28514)
          Assignment: op='=' (at pp.c:28515)
            StructRef: type='.' (at pp.c:28515)
              ID: name='HdlcTranslateC__state' (at pp.c:28515)
              ID: name='sendEscape' (at pp.c:28515)
            Constant: type='int', value='0' (at pp.c:28515)
          Assignment: op='=' (at pp.c:28516)
            ID: name='HdlcTranslateC__m_data' (at pp.c:28516)
            ID: name='HDLC_FLAG_BYTE' (at pp.c:28516)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28519)
          ExprList:  (at pp.c:28519)
            ID: name='__nesc_atomic' (at pp.c:28519)
      Return:  (at pp.c:28520)
        FuncCall:  (at None)
          ID: name='HdlcTranslateC__UartStream__send' (at pp.c:28520)
          ExprList:  (at pp.c:28520)
            UnaryOp: op='&' (at pp.c:28520)
              ID: name='HdlcTranslateC__m_data' (at pp.c:28520)
            Constant: type='int', value='1' (at pp.c:28520)
  FuncDef:  (at pp.c:28524)
    Decl: name='Msp430UartP__0__UartStream__send', quals=[], storage=['static'] (at pp.c:28524)
      FuncDecl: quals=None (at pp.c:28524)
        ParamList:  (at pp.c:28524)
          Decl: name='id', quals=[], storage=[] (at pp.c:28524)
            TypeDecl: declname='id', quals=[] (at pp.c:28524)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:28524)
            PtrDecl: quals=[] (at pp.c:28524)
              TypeDecl: declname='buf', quals=[] (at pp.c:28524)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:28524)
            TypeDecl: declname='len', quals=[] (at pp.c:28524)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430UartP__0__UartStream__send', quals=[] (at pp.c:28524)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:28526)
      If:  (at pp.c:28527)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='Msp430UartP__0__UsartResource__isOwner' (at pp.c:28527)
            ExprList:  (at pp.c:28527)
              ID: name='id' (at pp.c:28527)
          ID: name='FALSE' (at pp.c:28527)
        Compound:  (at pp.c:28527)
          Return:  (at pp.c:28528)
            ID: name='FAIL' (at pp.c:28528)
      If:  (at pp.c:28531)
        BinaryOp: op='==' (at pp.c:28531)
          ID: name='len' (at pp.c:28531)
          Constant: type='int', value='0' (at pp.c:28531)
        Compound:  (at pp.c:28531)
          Return:  (at pp.c:28532)
            ID: name='FAIL' (at pp.c:28532)
        Compound:  (at pp.c:28534)
          If:  (at pp.c:28536)
            ID: name='Msp430UartP__0__m_tx_buf' (at pp.c:28536)
            Compound:  (at pp.c:28536)
              Return:  (at pp.c:28537)
                ID: name='EBUSY' (at pp.c:28537)
      Assignment: op='=' (at pp.c:28541)
        ID: name='Msp430UartP__0__m_tx_buf' (at pp.c:28541)
        ID: name='buf' (at pp.c:28541)
      Assignment: op='=' (at pp.c:28542)
        ID: name='Msp430UartP__0__m_tx_len' (at pp.c:28542)
        ID: name='len' (at pp.c:28542)
      Assignment: op='=' (at pp.c:28543)
        ID: name='Msp430UartP__0__m_tx_pos' (at pp.c:28543)
        Constant: type='int', value='0' (at pp.c:28543)
      Assignment: op='=' (at pp.c:28544)
        ID: name='Msp430UartP__0__current_owner' (at pp.c:28544)
        ID: name='id' (at pp.c:28544)
      FuncCall:  (at None)
        ID: name='Msp430UartP__0__Usart__tx' (at pp.c:28545)
        ExprList:  (at pp.c:28545)
          ArrayRef:  (at pp.c:28545)
            ID: name='buf' (at pp.c:28545)
            UnaryOp: op='p++' (at pp.c:28545)
              ID: name='Msp430UartP__0__m_tx_pos' (at pp.c:28545)
      Return:  (at pp.c:28546)
        ID: name='SUCCESS' (at pp.c:28546)
  FuncDef:  (at pp.c:28550)
    Decl: name='SerialActiveMessageP__0__Packet__getPayload', quals=[], storage=['static'] (at pp.c:28550)
      FuncDecl: quals=None (at pp.c:28550)
        ParamList:  (at pp.c:28550)
          Decl: name='msg', quals=[], storage=[] (at pp.c:28550)
            PtrDecl: quals=[] (at pp.c:28550)
              TypeDecl: declname='msg', quals=[] (at pp.c:28550)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:28550)
            TypeDecl: declname='len', quals=[] (at pp.c:28550)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:28550)
          TypeDecl: declname='SerialActiveMessageP__0__Packet__getPayload', quals=[] (at pp.c:28550)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28552)
      If:  (at pp.c:28553)
        BinaryOp: op='>' (at pp.c:28553)
          ID: name='len' (at pp.c:28553)
          FuncCall:  (at None)
            ID: name='SerialActiveMessageP__0__Packet__maxPayloadLength' (at pp.c:28553)
        Compound:  (at pp.c:28553)
          Return:  (at pp.c:28554)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:28554)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['void'] (at None)
              Constant: type='int', value='0' (at pp.c:28554)
        Compound:  (at pp.c:28556)
          Return:  (at pp.c:28557)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:28557)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['void'] (at None)
              StructRef: type='->' (at pp.c:28557)
                ID: name='msg' (at pp.c:28557)
                ID: name='data' (at pp.c:28557)
  FuncDef:  (at pp.c:28562)
    Decl: name='sig_UART1RX_VECTOR', quals=[], storage=[] (at pp.c:28562)
      FuncDecl: quals=None (at pp.c:28562)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_UART1RX_VECTOR', quals=[] (at pp.c:28562)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28564)
      Decl: name='temp', quals=[], storage=[] (at pp.c:28565)
        TypeDecl: declname='temp', quals=[] (at pp.c:28565)
          IdentifierType: names=['uint8_t'] (at None)
        ID: name='U1RXBUF' (at pp.c:28565)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Interrupts__rxDone' (at pp.c:28568)
        ExprList:  (at pp.c:28568)
          ID: name='temp' (at pp.c:28568)
  FuncDef:  (at pp.c:28572)
    Decl: name='ArbiterP__0__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:28572)
      FuncDecl: quals=None (at pp.c:28572)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__ArbiterInfo__inUse', quals=[] (at pp.c:28572)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:28574)
      Compound:  (at pp.c:28577)
        If:  (at pp.c:28578)
          BinaryOp: op='==' (at pp.c:28578)
            ID: name='ArbiterP__0__state' (at pp.c:28578)
            ID: name='ArbiterP__0__RES_CONTROLLED' (at pp.c:28578)
          Compound:  (at pp.c:28579)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28580)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28580)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='FALSE' (at pp.c:28582)
            Return:  (at pp.c:28585)
              ID: name='__nesc_temp' (at pp.c:28585)
      Return:  (at pp.c:28589)
        ID: name='TRUE' (at pp.c:28589)
  FuncDef:  (at pp.c:28593)
    Decl: name='SerialP__rx_state_machine', quals=[], storage=['static'] (at pp.c:28593)
      FuncDecl: quals=None (at pp.c:28593)
        ParamList:  (at pp.c:28593)
          Decl: name='isDelimeter', quals=[], storage=[] (at pp.c:28593)
            TypeDecl: declname='isDelimeter', quals=[] (at pp.c:28593)
              IdentifierType: names=['bool'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:28593)
            TypeDecl: declname='data', quals=[] (at pp.c:28593)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SerialP__rx_state_machine', quals=[] (at pp.c:28593)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28595)
      Switch:  (at pp.c:28597)
        ID: name='SerialP__rxState' (at pp.c:28597)
        Compound:  (at pp.c:28597)
          Case:  (at pp.c:28599)
            ID: name='SerialP__RXSTATE_NOSYNC' (at pp.c:28599)
            If:  (at pp.c:28600)
              ID: name='isDelimeter' (at pp.c:28600)
              Compound:  (at pp.c:28600)
                FuncCall:  (at None)
                  ID: name='SerialP__rxInit' (at pp.c:28601)
                Assignment: op='=' (at pp.c:28602)
                  ID: name='SerialP__rxState' (at pp.c:28602)
                  ID: name='SerialP__RXSTATE_PROTO' (at pp.c:28602)
          Break:  (at pp.c:28604)
          Case:  (at pp.c:28606)
            ID: name='SerialP__RXSTATE_PROTO' (at pp.c:28606)
            If:  (at pp.c:28607)
              UnaryOp: op='!' (at pp.c:28607)
                ID: name='isDelimeter' (at pp.c:28607)
              Compound:  (at pp.c:28607)
                Assignment: op='=' (at pp.c:28608)
                  ID: name='SerialP__rxCRC' (at pp.c:28608)
                  FuncCall:  (at None)
                    ID: name='crcByte' (at pp.c:28608)
                    ExprList:  (at pp.c:28608)
                      ID: name='SerialP__rxCRC' (at pp.c:28608)
                      ID: name='data' (at pp.c:28608)
                Assignment: op='=' (at pp.c:28609)
                  ID: name='SerialP__rxState' (at pp.c:28609)
                  ID: name='SerialP__RXSTATE_TOKEN' (at pp.c:28609)
                Assignment: op='=' (at pp.c:28610)
                  ID: name='SerialP__rxProto' (at pp.c:28610)
                  ID: name='data' (at pp.c:28610)
                If:  (at pp.c:28611)
                  UnaryOp: op='!' (at None)
                    FuncCall:  (at None)
                      ID: name='SerialP__valid_rx_proto' (at pp.c:28611)
                      ExprList:  (at pp.c:28611)
                        ID: name='SerialP__rxProto' (at pp.c:28611)
                  Compound:  (at pp.c:28611)
                    Goto: name='nosync' (at pp.c:28612)
                If:  (at pp.c:28614)
                  BinaryOp: op='!=' (at pp.c:28614)
                    ID: name='SerialP__rxProto' (at pp.c:28614)
                    ID: name='SERIAL_PROTO_PACKET_ACK' (at pp.c:28614)
                  Compound:  (at pp.c:28614)
                    Goto: name='nosync' (at pp.c:28615)
                If:  (at pp.c:28617)
                  BinaryOp: op='!=' (at None)
                    FuncCall:  (at None)
                      ID: name='SerialP__ReceiveBytePacket__startPacket' (at pp.c:28617)
                    ID: name='SUCCESS' (at pp.c:28617)
                  Compound:  (at pp.c:28617)
                    Goto: name='nosync' (at pp.c:28618)
          Break:  (at pp.c:28621)
          Case:  (at pp.c:28623)
            ID: name='SerialP__RXSTATE_TOKEN' (at pp.c:28623)
            If:  (at pp.c:28624)
              ID: name='isDelimeter' (at pp.c:28624)
              Compound:  (at pp.c:28624)
                Goto: name='nosync' (at pp.c:28625)
              Compound:  (at pp.c:28627)
                Assignment: op='=' (at pp.c:28628)
                  ID: name='SerialP__rxSeqno' (at pp.c:28628)
                  ID: name='data' (at pp.c:28628)
                Assignment: op='=' (at pp.c:28629)
                  ID: name='SerialP__rxCRC' (at pp.c:28629)
                  FuncCall:  (at None)
                    ID: name='crcByte' (at pp.c:28629)
                    ExprList:  (at pp.c:28629)
                      ID: name='SerialP__rxCRC' (at pp.c:28629)
                      ID: name='SerialP__rxSeqno' (at pp.c:28629)
                Assignment: op='=' (at pp.c:28630)
                  ID: name='SerialP__rxState' (at pp.c:28630)
                  ID: name='SerialP__RXSTATE_INFO' (at pp.c:28630)
          Break:  (at pp.c:28632)
          Case:  (at pp.c:28634)
            ID: name='SerialP__RXSTATE_INFO' (at pp.c:28634)
            If:  (at pp.c:28635)
              BinaryOp: op='<' (at pp.c:28635)
                ID: name='SerialP__rxByteCnt' (at pp.c:28635)
                ID: name='SerialP__SERIAL_MTU' (at pp.c:28635)
              Compound:  (at pp.c:28635)
                If:  (at pp.c:28636)
                  ID: name='isDelimeter' (at pp.c:28636)
                  Compound:  (at pp.c:28636)
                    If:  (at pp.c:28637)
                      BinaryOp: op='>=' (at pp.c:28637)
                        ID: name='SerialP__rxByteCnt' (at pp.c:28637)
                        Constant: type='int', value='2' (at pp.c:28637)
                      Compound:  (at pp.c:28637)
                        If:  (at pp.c:28638)
                          BinaryOp: op='==' (at None)
                            FuncCall:  (at None)
                              ID: name='SerialP__rx_current_crc' (at pp.c:28638)
                            ID: name='SerialP__rxCRC' (at pp.c:28638)
                          Compound:  (at pp.c:28638)
                            FuncCall:  (at None)
                              ID: name='SerialP__ReceiveBytePacket__endPacket' (at pp.c:28639)
                              ExprList:  (at pp.c:28639)
                                ID: name='SUCCESS' (at pp.c:28639)
                            FuncCall:  (at None)
                              ID: name='SerialP__ack_queue_push' (at pp.c:28640)
                              ExprList:  (at pp.c:28640)
                                ID: name='SerialP__rxSeqno' (at pp.c:28640)
                            FuncCall:  (at None)
                              ID: name='SerialP__rxInit' (at pp.c:28641)
                            FuncCall:  (at None)
                              ID: name='SerialP__SerialFrameComm__resetReceive' (at pp.c:28642)
                            If:  (at pp.c:28643)
                              ID: name='SerialP__offPending' (at pp.c:28643)
                              Compound:  (at pp.c:28643)
                                Assignment: op='=' (at pp.c:28644)
                                  ID: name='SerialP__rxState' (at pp.c:28644)
                                  ID: name='SerialP__RXSTATE_INACTIVE' (at pp.c:28644)
                                FuncCall:  (at None)
                                  ID: name='SerialP__testOff' (at pp.c:28645)
                            Goto: name='done' (at pp.c:28647)
                          Compound:  (at pp.c:28649)
                            Goto: name='nosync' (at pp.c:28650)
                      Compound:  (at pp.c:28653)
                        Goto: name='nosync' (at pp.c:28654)
                  Compound:  (at pp.c:28657)
                    If:  (at pp.c:28658)
                      BinaryOp: op='>=' (at pp.c:28658)
                        ID: name='SerialP__rxByteCnt' (at pp.c:28658)
                        Constant: type='int', value='2' (at pp.c:28658)
                      Compound:  (at pp.c:28658)
                        FuncCall:  (at None)
                          ID: name='SerialP__ReceiveBytePacket__byteReceived' (at pp.c:28659)
                          ExprList:  (at None)
                            FuncCall:  (at None)
                              ID: name='SerialP__rx_buffer_top' (at pp.c:28659)
                        Assignment: op='=' (at pp.c:28660)
                          ID: name='SerialP__rxCRC' (at pp.c:28660)
                          FuncCall:  (at None)
                            ID: name='crcByte' (at pp.c:28660)
                            ExprList:  (at pp.c:28660)
                              ID: name='SerialP__rxCRC' (at pp.c:28660)
                              FuncCall:  (at None)
                                ID: name='SerialP__rx_buffer_pop' (at pp.c:28660)
                    FuncCall:  (at None)
                      ID: name='SerialP__rx_buffer_push' (at pp.c:28662)
                      ExprList:  (at pp.c:28662)
                        ID: name='data' (at pp.c:28662)
                    UnaryOp: op='p++' (at pp.c:28663)
                      ID: name='SerialP__rxByteCnt' (at pp.c:28663)
              Compound:  (at pp.c:28668)
                Goto: name='nosync' (at pp.c:28669)
          Break:  (at pp.c:28671)
          Default:  (at pp.c:28673)
            Goto: name='nosync' (at pp.c:28674)
      Goto: name='done' (at pp.c:28676)
      Label: name='nosync' (at pp.c:28678)
        FuncCall:  (at None)
          ID: name='SerialP__rxInit' (at pp.c:28680)
      FuncCall:  (at None)
        ID: name='SerialP__SerialFrameComm__resetReceive' (at pp.c:28681)
      FuncCall:  (at None)
        ID: name='SerialP__ReceiveBytePacket__endPacket' (at pp.c:28682)
        ExprList:  (at pp.c:28682)
          ID: name='FAIL' (at pp.c:28682)
      If:  (at pp.c:28683)
        ID: name='SerialP__offPending' (at pp.c:28683)
        Compound:  (at pp.c:28683)
          Assignment: op='=' (at pp.c:28684)
            ID: name='SerialP__rxState' (at pp.c:28684)
            ID: name='SerialP__RXSTATE_INACTIVE' (at pp.c:28684)
          FuncCall:  (at None)
            ID: name='SerialP__testOff' (at pp.c:28685)
        Compound:  (at pp.c:28687)
          If:  (at pp.c:28688)
            ID: name='isDelimeter' (at pp.c:28688)
            Compound:  (at pp.c:28688)
              Assignment: op='=' (at pp.c:28689)
                ID: name='SerialP__rxState' (at pp.c:28689)
                ID: name='SerialP__RXSTATE_PROTO' (at pp.c:28689)
      Label: name='done' (at pp.c:28692)
  FuncDef:  (at pp.c:28696)
    Decl: name='crcByte', quals=[], storage=['static'] (at pp.c:28696)
      FuncDecl: quals=None (at pp.c:28696)
        ParamList:  (at pp.c:28696)
          Decl: name='crc', quals=[], storage=[] (at pp.c:28696)
            TypeDecl: declname='crc', quals=[] (at pp.c:28696)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='b', quals=[], storage=[] (at pp.c:28696)
            TypeDecl: declname='b', quals=[] (at pp.c:28696)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='crcByte', quals=[] (at pp.c:28696)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:28698)
      Assignment: op='=' (at pp.c:28699)
        ID: name='crc' (at pp.c:28699)
        BinaryOp: op='|' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
            BinaryOp: op='>>' (at pp.c:28699)
              ID: name='crc' (at pp.c:28699)
              Constant: type='int', value='8' (at pp.c:28699)
          BinaryOp: op='<<' (at pp.c:28699)
            ID: name='crc' (at pp.c:28699)
            Constant: type='int', value='8' (at pp.c:28699)
      Assignment: op='^=' (at pp.c:28700)
        ID: name='crc' (at pp.c:28700)
        ID: name='b' (at pp.c:28700)
      Assignment: op='^=' (at pp.c:28701)
        ID: name='crc' (at pp.c:28701)
        BinaryOp: op='>>' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
            BinaryOp: op='&' (at pp.c:28701)
              ID: name='crc' (at pp.c:28701)
              Constant: type='int', value='0xff' (at pp.c:28701)
          Constant: type='int', value='4' (at pp.c:28701)
      Assignment: op='^=' (at pp.c:28702)
        ID: name='crc' (at pp.c:28702)
        BinaryOp: op='<<' (at pp.c:28702)
          ID: name='crc' (at pp.c:28702)
          Constant: type='int', value='12' (at pp.c:28702)
      Assignment: op='^=' (at pp.c:28703)
        ID: name='crc' (at pp.c:28703)
        BinaryOp: op='<<' (at pp.c:28703)
          BinaryOp: op='&' (at pp.c:28703)
            ID: name='crc' (at pp.c:28703)
            Constant: type='int', value='0xff' (at pp.c:28703)
          Constant: type='int', value='5' (at pp.c:28703)
      Return:  (at pp.c:28704)
        ID: name='crc' (at pp.c:28704)
  FuncDef:  (at pp.c:28708)
    Decl: name='SerialDispatcherP__0__ReceiveBytePacket__endPacket', quals=[], storage=['static'] (at pp.c:28708)
      FuncDecl: quals=None (at pp.c:28708)
        ParamList:  (at pp.c:28708)
          Decl: name='result', quals=[], storage=[] (at pp.c:28708)
            TypeDecl: declname='result', quals=[] (at pp.c:28708)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SerialDispatcherP__0__ReceiveBytePacket__endPacket', quals=[] (at pp.c:28708)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28710)
      Decl: name='postsignalreceive', quals=[], storage=[] (at pp.c:28711)
        TypeDecl: declname='postsignalreceive', quals=[] (at pp.c:28711)
          IdentifierType: names=['uint8_t'] (at None)
        ID: name='FALSE' (at pp.c:28711)
      Compound:  (at pp.c:28715)
        If:  (at pp.c:28716)
          BinaryOp: op='&&' (at pp.c:28716)
            UnaryOp: op='!' (at pp.c:28716)
              ID: name='SerialDispatcherP__0__receiveTaskPending' (at pp.c:28716)
            BinaryOp: op='==' (at pp.c:28716)
              ID: name='result' (at pp.c:28716)
              ID: name='SUCCESS' (at pp.c:28716)
          Compound:  (at pp.c:28716)
            Assignment: op='=' (at pp.c:28717)
              ID: name='postsignalreceive' (at pp.c:28717)
              ID: name='TRUE' (at pp.c:28717)
            Assignment: op='=' (at pp.c:28718)
              ID: name='SerialDispatcherP__0__receiveTaskPending' (at pp.c:28718)
              ID: name='TRUE' (at pp.c:28718)
            Assignment: op='=' (at pp.c:28719)
              ID: name='SerialDispatcherP__0__receiveTaskType' (at pp.c:28719)
              ID: name='SerialDispatcherP__0__recvType' (at pp.c:28719)
            Assignment: op='=' (at pp.c:28720)
              ID: name='SerialDispatcherP__0__receiveTaskWhich' (at pp.c:28720)
              StructRef: type='.' (at pp.c:28720)
                ID: name='SerialDispatcherP__0__receiveState' (at pp.c:28720)
                ID: name='which' (at pp.c:28720)
            Assignment: op='=' (at pp.c:28721)
              ID: name='SerialDispatcherP__0__receiveTaskBuf' (at pp.c:28721)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  PtrDecl: quals=[] (at pp.c:28721)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['message_t'] (at None)
                ID: name='SerialDispatcherP__0__receiveBuffer' (at pp.c:28721)
            Assignment: op='=' (at pp.c:28722)
              ID: name='SerialDispatcherP__0__receiveTaskSize' (at pp.c:28722)
              ID: name='SerialDispatcherP__0__recvIndex' (at pp.c:28722)
            FuncCall:  (at None)
              ID: name='SerialDispatcherP__0__receiveBufferSwap' (at pp.c:28723)
            Assignment: op='=' (at pp.c:28724)
              StructRef: type='.' (at pp.c:28724)
                ID: name='SerialDispatcherP__0__receiveState' (at pp.c:28724)
                ID: name='state' (at pp.c:28724)
              ID: name='SerialDispatcherP__0__RECV_STATE_IDLE' (at pp.c:28724)
          Compound:  (at pp.c:28728)
            FuncCall:  (at None)
              ID: name='SerialDispatcherP__0__unlockBuffer' (at pp.c:28730)
              ExprList:  (at pp.c:28730)
                StructRef: type='.' (at pp.c:28730)
                  ID: name='SerialDispatcherP__0__receiveState' (at pp.c:28730)
                  ID: name='which' (at pp.c:28730)
      If:  (at pp.c:28733)
        ID: name='postsignalreceive' (at pp.c:28733)
        Compound:  (at pp.c:28733)
          FuncCall:  (at None)
            ID: name='SerialDispatcherP__0__receiveTask__postTask' (at pp.c:28734)
  FuncDef:  (at pp.c:28739)
    Decl: name='ArbiterP__0__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:28739)
      FuncDecl: quals=None (at pp.c:28739)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__ArbiterInfo__userId', quals=[] (at pp.c:28739)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:28741)
      Compound:  (at pp.c:28744)
        If:  (at pp.c:28745)
          BinaryOp: op='!=' (at pp.c:28745)
            ID: name='ArbiterP__0__state' (at pp.c:28745)
            ID: name='ArbiterP__0__RES_BUSY' (at pp.c:28745)
          Compound:  (at pp.c:28746)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28747)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28747)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='ArbiterP__0__NO_RES' (at pp.c:28749)
            Return:  (at pp.c:28752)
              ID: name='__nesc_temp' (at pp.c:28752)
        Compound:  (at pp.c:28755)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28756)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28756)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='ArbiterP__0__resId' (at pp.c:28758)
          Return:  (at pp.c:28761)
            ID: name='__nesc_temp' (at pp.c:28761)
  FuncDef:  (at pp.c:28767)
    Decl: name='sig_UART1TX_VECTOR', quals=[], storage=[] (at pp.c:28767)
      FuncDecl: quals=None (at pp.c:28767)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_UART1TX_VECTOR', quals=[] (at pp.c:28767)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28769)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart1P__Interrupts__txDone' (at pp.c:28770)
  FuncDef:  (at pp.c:28774)
    Decl: name='HdlcTranslateC__UartStream__sendDone', quals=[], storage=['static'] (at pp.c:28774)
      FuncDecl: quals=None (at pp.c:28774)
        ParamList:  (at pp.c:28774)
          Decl: name='buf', quals=[], storage=[] (at pp.c:28774)
            PtrDecl: quals=[] (at pp.c:28774)
              TypeDecl: declname='buf', quals=[] (at pp.c:28774)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:28774)
            TypeDecl: declname='len', quals=[] (at pp.c:28774)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:28775)
            TypeDecl: declname='error', quals=[] (at pp.c:28775)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='HdlcTranslateC__UartStream__sendDone', quals=[] (at pp.c:28774)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28777)
      Compound:  (at pp.c:28780)
        If:  (at pp.c:28781)
          StructRef: type='.' (at pp.c:28781)
            ID: name='HdlcTranslateC__state' (at pp.c:28781)
            ID: name='sendEscape' (at pp.c:28781)
          Compound:  (at pp.c:28781)
            Assignment: op='=' (at pp.c:28782)
              StructRef: type='.' (at pp.c:28782)
                ID: name='HdlcTranslateC__state' (at pp.c:28782)
                ID: name='sendEscape' (at pp.c:28782)
              Constant: type='int', value='0' (at pp.c:28782)
            Assignment: op='=' (at pp.c:28783)
              ID: name='HdlcTranslateC__m_data' (at pp.c:28783)
              ID: name='HdlcTranslateC__txTemp' (at pp.c:28783)
            FuncCall:  (at None)
              ID: name='HdlcTranslateC__UartStream__send' (at pp.c:28784)
              ExprList:  (at pp.c:28784)
                UnaryOp: op='&' (at pp.c:28784)
                  ID: name='HdlcTranslateC__m_data' (at pp.c:28784)
                Constant: type='int', value='1' (at pp.c:28784)
          Compound:  (at pp.c:28786)
            FuncCall:  (at None)
              ID: name='HdlcTranslateC__SerialFrameComm__putDone' (at pp.c:28787)
  FuncDef:  (at pp.c:28793)
    Decl: name='HdlcTranslateC__SerialFrameComm__putData', quals=[], storage=['static'] (at pp.c:28793)
      FuncDecl: quals=None (at pp.c:28793)
        ParamList:  (at pp.c:28793)
          Decl: name='data', quals=[], storage=[] (at pp.c:28793)
            TypeDecl: declname='data', quals=[] (at pp.c:28793)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HdlcTranslateC__SerialFrameComm__putData', quals=[] (at pp.c:28793)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:28795)
      If:  (at pp.c:28796)
        BinaryOp: op='||' (at pp.c:28796)
          BinaryOp: op='==' (at pp.c:28796)
            ID: name='data' (at pp.c:28796)
            ID: name='HDLC_CTLESC_BYTE' (at pp.c:28796)
          BinaryOp: op='==' (at pp.c:28796)
            ID: name='data' (at pp.c:28796)
            ID: name='HDLC_FLAG_BYTE' (at pp.c:28796)
        Compound:  (at pp.c:28796)
          Assignment: op='=' (at pp.c:28797)
            StructRef: type='.' (at pp.c:28797)
              ID: name='HdlcTranslateC__state' (at pp.c:28797)
              ID: name='sendEscape' (at pp.c:28797)
            Constant: type='int', value='1' (at pp.c:28797)
          Assignment: op='=' (at pp.c:28798)
            ID: name='HdlcTranslateC__txTemp' (at pp.c:28798)
            BinaryOp: op='^' (at pp.c:28798)
              ID: name='data' (at pp.c:28798)
              Constant: type='int', value='0x20' (at pp.c:28798)
          Assignment: op='=' (at pp.c:28799)
            ID: name='HdlcTranslateC__m_data' (at pp.c:28799)
            ID: name='HDLC_CTLESC_BYTE' (at pp.c:28799)
        Compound:  (at pp.c:28801)
          Assignment: op='=' (at pp.c:28802)
            ID: name='HdlcTranslateC__m_data' (at pp.c:28802)
            ID: name='data' (at pp.c:28802)
      Return:  (at pp.c:28804)
        FuncCall:  (at None)
          ID: name='HdlcTranslateC__UartStream__send' (at pp.c:28804)
          ExprList:  (at pp.c:28804)
            UnaryOp: op='&' (at pp.c:28804)
              ID: name='HdlcTranslateC__m_data' (at pp.c:28804)
            Constant: type='int', value='1' (at pp.c:28804)
  FuncDef:  (at pp.c:28808)
    Decl: name='sig_PORT1_VECTOR', quals=[], storage=[] (at pp.c:28808)
      FuncDecl: quals=None (at pp.c:28808)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_PORT1_VECTOR', quals=[] (at pp.c:28808)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28809)
      Decl: name='n', quals=['volatile'], storage=[] (at pp.c:28810)
        TypeDecl: declname='n', quals=['volatile'] (at pp.c:28810)
          IdentifierType: names=['int'] (at None)
        BinaryOp: op='&' (at pp.c:28810)
          ID: name='P1IFG' (at pp.c:28810)
          ID: name='P1IE' (at pp.c:28810)
      If:  (at pp.c:28812)
        BinaryOp: op='&' (at pp.c:28812)
          ID: name='n' (at pp.c:28812)
          BinaryOp: op='<<' (at pp.c:28812)
            Constant: type='int', value='1' (at pp.c:28812)
            Constant: type='int', value='0' (at pp.c:28812)
        Compound:  (at pp.c:28812)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port10__fired' (at pp.c:28814)
          Return:  (at pp.c:28816)
      If:  (at pp.c:28819)
        BinaryOp: op='&' (at pp.c:28819)
          ID: name='n' (at pp.c:28819)
          BinaryOp: op='<<' (at pp.c:28819)
            Constant: type='int', value='1' (at pp.c:28819)
            Constant: type='int', value='1' (at pp.c:28819)
        Compound:  (at pp.c:28819)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port11__fired' (at pp.c:28821)
          Return:  (at pp.c:28823)
      If:  (at pp.c:28826)
        BinaryOp: op='&' (at pp.c:28826)
          ID: name='n' (at pp.c:28826)
          BinaryOp: op='<<' (at pp.c:28826)
            Constant: type='int', value='1' (at pp.c:28826)
            Constant: type='int', value='2' (at pp.c:28826)
        Compound:  (at pp.c:28826)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port12__fired' (at pp.c:28828)
          Return:  (at pp.c:28830)
      If:  (at pp.c:28833)
        BinaryOp: op='&' (at pp.c:28833)
          ID: name='n' (at pp.c:28833)
          BinaryOp: op='<<' (at pp.c:28833)
            Constant: type='int', value='1' (at pp.c:28833)
            Constant: type='int', value='3' (at pp.c:28833)
        Compound:  (at pp.c:28833)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port13__fired' (at pp.c:28835)
          Return:  (at pp.c:28837)
      If:  (at pp.c:28840)
        BinaryOp: op='&' (at pp.c:28840)
          ID: name='n' (at pp.c:28840)
          BinaryOp: op='<<' (at pp.c:28840)
            Constant: type='int', value='1' (at pp.c:28840)
            Constant: type='int', value='4' (at pp.c:28840)
        Compound:  (at pp.c:28840)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port14__fired' (at pp.c:28842)
          Return:  (at pp.c:28844)
      If:  (at pp.c:28847)
        BinaryOp: op='&' (at pp.c:28847)
          ID: name='n' (at pp.c:28847)
          BinaryOp: op='<<' (at pp.c:28847)
            Constant: type='int', value='1' (at pp.c:28847)
            Constant: type='int', value='5' (at pp.c:28847)
        Compound:  (at pp.c:28847)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port15__fired' (at pp.c:28849)
          Return:  (at pp.c:28851)
      If:  (at pp.c:28854)
        BinaryOp: op='&' (at pp.c:28854)
          ID: name='n' (at pp.c:28854)
          BinaryOp: op='<<' (at pp.c:28854)
            Constant: type='int', value='1' (at pp.c:28854)
            Constant: type='int', value='6' (at pp.c:28854)
        Compound:  (at pp.c:28854)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port16__fired' (at pp.c:28856)
          Return:  (at pp.c:28858)
      If:  (at pp.c:28861)
        BinaryOp: op='&' (at pp.c:28861)
          ID: name='n' (at pp.c:28861)
          BinaryOp: op='<<' (at pp.c:28861)
            Constant: type='int', value='1' (at pp.c:28861)
            Constant: type='int', value='7' (at pp.c:28861)
        Compound:  (at pp.c:28861)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port17__fired' (at pp.c:28863)
          Return:  (at pp.c:28865)
  FuncDef:  (at pp.c:28870)
    Decl: name='sig_PORT2_VECTOR', quals=[], storage=[] (at pp.c:28870)
      FuncDecl: quals=None (at pp.c:28870)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_PORT2_VECTOR', quals=[] (at pp.c:28870)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28871)
      Decl: name='n', quals=['volatile'], storage=[] (at pp.c:28872)
        TypeDecl: declname='n', quals=['volatile'] (at pp.c:28872)
          IdentifierType: names=['int'] (at None)
        BinaryOp: op='&' (at pp.c:28872)
          ID: name='P2IFG' (at pp.c:28872)
          ID: name='P2IE' (at pp.c:28872)
      If:  (at pp.c:28874)
        BinaryOp: op='&' (at pp.c:28874)
          ID: name='n' (at pp.c:28874)
          BinaryOp: op='<<' (at pp.c:28874)
            Constant: type='int', value='1' (at pp.c:28874)
            Constant: type='int', value='0' (at pp.c:28874)
        Compound:  (at pp.c:28874)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port20__fired' (at pp.c:28876)
          Return:  (at pp.c:28878)
      If:  (at pp.c:28881)
        BinaryOp: op='&' (at pp.c:28881)
          ID: name='n' (at pp.c:28881)
          BinaryOp: op='<<' (at pp.c:28881)
            Constant: type='int', value='1' (at pp.c:28881)
            Constant: type='int', value='1' (at pp.c:28881)
        Compound:  (at pp.c:28881)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port21__fired' (at pp.c:28883)
          Return:  (at pp.c:28885)
      If:  (at pp.c:28888)
        BinaryOp: op='&' (at pp.c:28888)
          ID: name='n' (at pp.c:28888)
          BinaryOp: op='<<' (at pp.c:28888)
            Constant: type='int', value='1' (at pp.c:28888)
            Constant: type='int', value='2' (at pp.c:28888)
        Compound:  (at pp.c:28888)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port22__fired' (at pp.c:28890)
          Return:  (at pp.c:28892)
      If:  (at pp.c:28895)
        BinaryOp: op='&' (at pp.c:28895)
          ID: name='n' (at pp.c:28895)
          BinaryOp: op='<<' (at pp.c:28895)
            Constant: type='int', value='1' (at pp.c:28895)
            Constant: type='int', value='3' (at pp.c:28895)
        Compound:  (at pp.c:28895)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port23__fired' (at pp.c:28897)
          Return:  (at pp.c:28899)
      If:  (at pp.c:28902)
        BinaryOp: op='&' (at pp.c:28902)
          ID: name='n' (at pp.c:28902)
          BinaryOp: op='<<' (at pp.c:28902)
            Constant: type='int', value='1' (at pp.c:28902)
            Constant: type='int', value='4' (at pp.c:28902)
        Compound:  (at pp.c:28902)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port24__fired' (at pp.c:28904)
          Return:  (at pp.c:28906)
      If:  (at pp.c:28909)
        BinaryOp: op='&' (at pp.c:28909)
          ID: name='n' (at pp.c:28909)
          BinaryOp: op='<<' (at pp.c:28909)
            Constant: type='int', value='1' (at pp.c:28909)
            Constant: type='int', value='5' (at pp.c:28909)
        Compound:  (at pp.c:28909)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port25__fired' (at pp.c:28911)
          Return:  (at pp.c:28913)
      If:  (at pp.c:28916)
        BinaryOp: op='&' (at pp.c:28916)
          ID: name='n' (at pp.c:28916)
          BinaryOp: op='<<' (at pp.c:28916)
            Constant: type='int', value='1' (at pp.c:28916)
            Constant: type='int', value='6' (at pp.c:28916)
        Compound:  (at pp.c:28916)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port26__fired' (at pp.c:28918)
          Return:  (at pp.c:28920)
      If:  (at pp.c:28923)
        BinaryOp: op='&' (at pp.c:28923)
          ID: name='n' (at pp.c:28923)
          BinaryOp: op='<<' (at pp.c:28923)
            Constant: type='int', value='1' (at pp.c:28923)
            Constant: type='int', value='7' (at pp.c:28923)
        Compound:  (at pp.c:28923)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port27__fired' (at pp.c:28925)
          Return:  (at pp.c:28927)
  FuncDef:  (at pp.c:28932)
    Decl: name='sig_UART0RX_VECTOR', quals=[], storage=[] (at pp.c:28932)
      FuncDecl: quals=None (at pp.c:28932)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_UART0RX_VECTOR', quals=[] (at pp.c:28932)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28934)
      Decl: name='temp', quals=[], storage=[] (at pp.c:28935)
        TypeDecl: declname='temp', quals=[] (at pp.c:28935)
          IdentifierType: names=['uint8_t'] (at None)
        ID: name='U0RXBUF' (at pp.c:28935)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Interrupts__rxDone' (at pp.c:28938)
        ExprList:  (at pp.c:28938)
          ID: name='temp' (at pp.c:28938)
  FuncDef:  (at pp.c:28942)
    Decl: name='ArbiterP__1__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:28942)
      FuncDecl: quals=None (at pp.c:28942)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ArbiterInfo__inUse', quals=[] (at pp.c:28942)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:28944)
      Compound:  (at pp.c:28947)
        If:  (at pp.c:28948)
          BinaryOp: op='==' (at pp.c:28948)
            ID: name='ArbiterP__1__state' (at pp.c:28948)
            ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:28948)
          Compound:  (at pp.c:28949)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28950)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28950)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='FALSE' (at pp.c:28952)
            Return:  (at pp.c:28955)
              ID: name='__nesc_temp' (at pp.c:28955)
      Return:  (at pp.c:28959)
        ID: name='TRUE' (at pp.c:28959)
  FuncDef:  (at pp.c:28967)
    Decl: name='ArbiterP__1__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:28967)
      FuncDecl: quals=None (at pp.c:28967)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ArbiterInfo__userId', quals=[] (at pp.c:28967)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:28969)
      Compound:  (at pp.c:28972)
        If:  (at pp.c:28973)
          BinaryOp: op='!=' (at pp.c:28973)
            ID: name='ArbiterP__1__state' (at pp.c:28973)
            ID: name='ArbiterP__1__RES_BUSY' (at pp.c:28973)
          Compound:  (at pp.c:28974)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28975)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28975)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='ArbiterP__1__NO_RES' (at pp.c:28977)
            Return:  (at pp.c:28980)
              ID: name='__nesc_temp' (at pp.c:28980)
        Compound:  (at pp.c:28983)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28984)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28984)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='ArbiterP__1__resId' (at pp.c:28986)
          Return:  (at pp.c:28989)
            ID: name='__nesc_temp' (at pp.c:28989)
  FuncDef:  (at pp.c:28995)
    Decl: name='sig_UART0TX_VECTOR', quals=[], storage=[] (at pp.c:28995)
      FuncDecl: quals=None (at pp.c:28995)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_UART0TX_VECTOR', quals=[] (at pp.c:28995)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28997)
      If:  (at pp.c:28998)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__HplI2C__isI2C' (at pp.c:28998)
        Compound:  (at pp.c:28998)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__I2CInterrupts__fired' (at pp.c:28999)
        Compound:  (at pp.c:29001)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Interrupts__txDone' (at pp.c:29003)
[Log] Parsed preprocessed file into AST.
