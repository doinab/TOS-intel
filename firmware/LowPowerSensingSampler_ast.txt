[Log] Preprocessed input file.
FileAST:  (at None)
  Typedef: name='ptrdiff_t', quals=[], storage=['typedef'] (at pp.c:7)
    TypeDecl: declname='ptrdiff_t', quals=[] (at pp.c:7)
      IdentifierType: names=['int'] (at None)
  Typedef: name='size_t', quals=[], storage=['typedef'] (at pp.c:9)
    TypeDecl: declname='size_t', quals=[] (at pp.c:9)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='wchar_t', quals=[], storage=['typedef'] (at pp.c:11)
    TypeDecl: declname='wchar_t', quals=[] (at pp.c:11)
      IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:13)
    Struct: name='__nesc_attr_nonnull', packed=False (at pp.c:13)
      Decl: name='dummy', quals=[], storage=[] (at 0)
        TypeDecl: declname='dummy', quals=[] (at pp.c:15)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:18)
    Struct: name='__nesc_attr_bnd', packed=False (at pp.c:18)
      Decl: name='lo', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:20)
          TypeDecl: declname='lo', quals=[] (at pp.c:20)
            IdentifierType: names=['void'] (at None)
      Decl: name='hi', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:20)
          TypeDecl: declname='hi', quals=[] (at pp.c:20)
            IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:23)
    Struct: name='__nesc_attr_bnd_nok', packed=False (at pp.c:23)
      Decl: name='lo', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:25)
          TypeDecl: declname='lo', quals=[] (at pp.c:25)
            IdentifierType: names=['void'] (at None)
      Decl: name='hi', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:25)
          TypeDecl: declname='hi', quals=[] (at pp.c:25)
            IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:28)
    Struct: name='__nesc_attr_count', packed=False (at pp.c:28)
      Decl: name='n', quals=[], storage=[] (at 0)
        TypeDecl: declname='n', quals=[] (at pp.c:30)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:33)
    Struct: name='__nesc_attr_count_nok', packed=False (at pp.c:33)
      Decl: name='n', quals=[], storage=[] (at 0)
        TypeDecl: declname='n', quals=[] (at pp.c:35)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:38)
    Struct: name='__nesc_attr_one', packed=False (at pp.c:38)
      Decl: name='dummy', quals=[], storage=[] (at 0)
        TypeDecl: declname='dummy', quals=[] (at pp.c:40)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:43)
    Struct: name='__nesc_attr_one_nok', packed=False (at pp.c:43)
      Decl: name='dummy', quals=[], storage=[] (at 0)
        TypeDecl: declname='dummy', quals=[] (at pp.c:45)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:48)
    Struct: name='__nesc_attr_dmemset', packed=False (at pp.c:48)
      Decl: name='a1', quals=[], storage=[] (at 0)
        TypeDecl: declname='a1', quals=[] (at pp.c:50)
          IdentifierType: names=['int'] (at None)
      Decl: name='a2', quals=[], storage=[] (at 0)
        TypeDecl: declname='a2', quals=[] (at pp.c:50)
          IdentifierType: names=['int'] (at None)
      Decl: name='a3', quals=[], storage=[] (at 0)
        TypeDecl: declname='a3', quals=[] (at pp.c:50)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:53)
    Struct: name='__nesc_attr_dmemcpy', packed=False (at pp.c:53)
      Decl: name='a1', quals=[], storage=[] (at 0)
        TypeDecl: declname='a1', quals=[] (at pp.c:55)
          IdentifierType: names=['int'] (at None)
      Decl: name='a2', quals=[], storage=[] (at 0)
        TypeDecl: declname='a2', quals=[] (at pp.c:55)
          IdentifierType: names=['int'] (at None)
      Decl: name='a3', quals=[], storage=[] (at 0)
        TypeDecl: declname='a3', quals=[] (at pp.c:55)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:58)
    Struct: name='__nesc_attr_nts', packed=False (at pp.c:58)
      Decl: name='dummy', quals=[], storage=[] (at 0)
        TypeDecl: declname='dummy', quals=[] (at pp.c:60)
          IdentifierType: names=['int'] (at None)
  Typedef: name='int8_t', quals=[], storage=['typedef'] (at pp.c:63)
    TypeDecl: declname='int8_t', quals=[] (at pp.c:63)
      IdentifierType: names=['char', 'signed'] (at None)
  Typedef: name='uint8_t', quals=[], storage=['typedef'] (at pp.c:64)
    TypeDecl: declname='uint8_t', quals=[] (at pp.c:64)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Typedef: name='int16_t', quals=[], storage=['typedef'] (at pp.c:66)
    TypeDecl: declname='int16_t', quals=[] (at pp.c:66)
      IdentifierType: names=['int'] (at None)
  Typedef: name='uint16_t', quals=[], storage=['typedef'] (at pp.c:67)
    TypeDecl: declname='uint16_t', quals=[] (at pp.c:67)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='int32_t', quals=[], storage=['typedef'] (at pp.c:69)
    TypeDecl: declname='int32_t', quals=[] (at pp.c:69)
      IdentifierType: names=['long'] (at None)
  Typedef: name='uint32_t', quals=[], storage=['typedef'] (at pp.c:70)
    TypeDecl: declname='uint32_t', quals=[] (at pp.c:70)
      IdentifierType: names=['long', 'unsigned'] (at None)
  Typedef: name='int64_t', quals=[], storage=['typedef'] (at pp.c:72)
    TypeDecl: declname='int64_t', quals=[] (at pp.c:72)
      IdentifierType: names=['long', 'long'] (at None)
  Typedef: name='uint64_t', quals=[], storage=['typedef'] (at pp.c:73)
    TypeDecl: declname='uint64_t', quals=[] (at pp.c:73)
      IdentifierType: names=['long', 'long', 'unsigned'] (at None)
  Typedef: name='intptr_t', quals=[], storage=['typedef'] (at pp.c:78)
    TypeDecl: declname='intptr_t', quals=[] (at pp.c:78)
      IdentifierType: names=['int16_t'] (at None)
  Typedef: name='uintptr_t', quals=[], storage=['typedef'] (at pp.c:79)
    TypeDecl: declname='uintptr_t', quals=[] (at pp.c:79)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='__nesc_ntoh_uint8', quals=[], storage=['__inline', 'static'] (at pp.c:81)
    FuncDecl: quals=None (at pp.c:81)
      ParamList:  (at pp.c:81)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:81)
          PtrDecl: quals=[] (at pp.c:81)
            TypeDecl: declname='source', quals=['const'] (at pp.c:81)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_uint8', quals=[] (at pp.c:81)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='__nesc_hton_uint8', quals=[], storage=['__inline', 'static'] (at pp.c:86)
    FuncDecl: quals=None (at pp.c:86)
      ParamList:  (at pp.c:86)
        Decl: name='target', quals=[], storage=[] (at pp.c:86)
          PtrDecl: quals=[] (at pp.c:86)
            TypeDecl: declname='target', quals=[] (at pp.c:86)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:86)
          TypeDecl: declname='value', quals=[] (at pp.c:86)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='__nesc_hton_uint8', quals=[] (at pp.c:86)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='__nesc_ntoh_leuint8', quals=[], storage=['__inline', 'static'] (at pp.c:92)
    FuncDecl: quals=None (at pp.c:92)
      ParamList:  (at pp.c:92)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:92)
          PtrDecl: quals=[] (at pp.c:92)
            TypeDecl: declname='source', quals=['const'] (at pp.c:92)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_leuint8', quals=[] (at pp.c:92)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='__nesc_hton_leuint8', quals=[], storage=['__inline', 'static'] (at pp.c:97)
    FuncDecl: quals=None (at pp.c:97)
      ParamList:  (at pp.c:97)
        Decl: name='target', quals=[], storage=[] (at pp.c:97)
          PtrDecl: quals=[] (at pp.c:97)
            TypeDecl: declname='target', quals=[] (at pp.c:97)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:97)
          TypeDecl: declname='value', quals=[] (at pp.c:97)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='__nesc_hton_leuint8', quals=[] (at pp.c:97)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='__nesc_ntoh_int8', quals=[], storage=['__inline', 'static'] (at pp.c:103)
    FuncDecl: quals=None (at pp.c:103)
      ParamList:  (at pp.c:103)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:103)
          PtrDecl: quals=[] (at pp.c:103)
            TypeDecl: declname='source', quals=['const'] (at pp.c:103)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_int8', quals=[] (at pp.c:103)
        IdentifierType: names=['int8_t'] (at None)
  Decl: name='__nesc_hton_int8', quals=[], storage=['__inline', 'static'] (at pp.c:105)
    FuncDecl: quals=None (at pp.c:105)
      ParamList:  (at pp.c:105)
        Decl: name='target', quals=[], storage=[] (at pp.c:105)
          PtrDecl: quals=[] (at pp.c:105)
            TypeDecl: declname='target', quals=[] (at pp.c:105)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:105)
          TypeDecl: declname='value', quals=[] (at pp.c:105)
            IdentifierType: names=['int8_t'] (at None)
      TypeDecl: declname='__nesc_hton_int8', quals=[] (at pp.c:105)
        IdentifierType: names=['int8_t'] (at None)
  Decl: name='__nesc_ntoh_uint16', quals=[], storage=['__inline', 'static'] (at pp.c:112)
    FuncDecl: quals=None (at pp.c:112)
      ParamList:  (at pp.c:112)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:112)
          PtrDecl: quals=[] (at pp.c:112)
            TypeDecl: declname='source', quals=['const'] (at pp.c:112)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_uint16', quals=[] (at pp.c:112)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='__nesc_hton_uint16', quals=[], storage=['__inline', 'static'] (at pp.c:117)
    FuncDecl: quals=None (at pp.c:117)
      ParamList:  (at pp.c:117)
        Decl: name='target', quals=[], storage=[] (at pp.c:117)
          PtrDecl: quals=[] (at pp.c:117)
            TypeDecl: declname='target', quals=[] (at pp.c:117)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:117)
          TypeDecl: declname='value', quals=[] (at pp.c:117)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='__nesc_hton_uint16', quals=[] (at pp.c:117)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='__nesc_ntoh_leuint16', quals=[], storage=['__inline', 'static'] (at pp.c:124)
    FuncDecl: quals=None (at pp.c:124)
      ParamList:  (at pp.c:124)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:124)
          PtrDecl: quals=[] (at pp.c:124)
            TypeDecl: declname='source', quals=['const'] (at pp.c:124)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_leuint16', quals=[] (at pp.c:124)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='__nesc_hton_leuint16', quals=[], storage=['__inline', 'static'] (at pp.c:129)
    FuncDecl: quals=None (at pp.c:129)
      ParamList:  (at pp.c:129)
        Decl: name='target', quals=[], storage=[] (at pp.c:129)
          PtrDecl: quals=[] (at pp.c:129)
            TypeDecl: declname='target', quals=[] (at pp.c:129)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:129)
          TypeDecl: declname='value', quals=[] (at pp.c:129)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='__nesc_hton_leuint16', quals=[] (at pp.c:129)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='__nesc_ntoh_uint32', quals=[], storage=['__inline', 'static'] (at pp.c:131)
    FuncDecl: quals=None (at pp.c:131)
      ParamList:  (at pp.c:131)
        Decl: name='source', quals=['const'], storage=[] (at pp.c:131)
          PtrDecl: quals=[] (at pp.c:131)
            TypeDecl: declname='source', quals=['const'] (at pp.c:131)
              IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_ntoh_uint32', quals=[] (at pp.c:131)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='__nesc_hton_uint32', quals=[], storage=['__inline', 'static'] (at pp.c:138)
    FuncDecl: quals=None (at pp.c:138)
      ParamList:  (at pp.c:138)
        Decl: name='target', quals=[], storage=[] (at pp.c:138)
          PtrDecl: quals=[] (at pp.c:138)
            TypeDecl: declname='target', quals=[] (at pp.c:138)
              IdentifierType: names=['void'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:138)
          TypeDecl: declname='value', quals=[] (at pp.c:138)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='__nesc_hton_uint32', quals=[] (at pp.c:138)
        IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='nx_int8_t', quals=[], storage=['typedef'] (at pp.c:140)
    TypeDecl: declname='nx_int8_t', quals=[] (at pp.c:140)
      Struct: name=None, packed=False (at pp.c:140)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:140)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:140)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='1' (at pp.c:140)
  Typedef: name='__nesc_nxbase_nx_int8_t', quals=[], storage=['typedef'] (at pp.c:140)
    TypeDecl: declname='__nesc_nxbase_nx_int8_t', quals=[] (at pp.c:140)
      IdentifierType: names=['int8_t'] (at None)
  Typedef: name='nx_int16_t', quals=[], storage=['typedef'] (at pp.c:141)
    TypeDecl: declname='nx_int16_t', quals=[] (at pp.c:141)
      Struct: name=None, packed=False (at pp.c:141)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:141)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:141)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='2' (at pp.c:141)
  Typedef: name='__nesc_nxbase_nx_int16_t', quals=[], storage=['typedef'] (at pp.c:141)
    TypeDecl: declname='__nesc_nxbase_nx_int16_t', quals=[] (at pp.c:141)
      IdentifierType: names=['int16_t'] (at None)
  Typedef: name='nx_int32_t', quals=[], storage=['typedef'] (at pp.c:142)
    TypeDecl: declname='nx_int32_t', quals=[] (at pp.c:142)
      Struct: name=None, packed=False (at pp.c:142)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:142)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:142)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='4' (at pp.c:142)
  Typedef: name='__nesc_nxbase_nx_int32_t', quals=[], storage=['typedef'] (at pp.c:142)
    TypeDecl: declname='__nesc_nxbase_nx_int32_t', quals=[] (at pp.c:142)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='nx_int64_t', quals=[], storage=['typedef'] (at pp.c:143)
    TypeDecl: declname='nx_int64_t', quals=[] (at pp.c:143)
      Struct: name=None, packed=False (at pp.c:143)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:143)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:143)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='8' (at pp.c:143)
  Typedef: name='__nesc_nxbase_nx_int64_t', quals=[], storage=['typedef'] (at pp.c:143)
    TypeDecl: declname='__nesc_nxbase_nx_int64_t', quals=[] (at pp.c:143)
      IdentifierType: names=['int64_t'] (at None)
  Typedef: name='nx_uint8_t', quals=[], storage=['typedef'] (at pp.c:144)
    TypeDecl: declname='nx_uint8_t', quals=[] (at pp.c:144)
      Struct: name=None, packed=False (at pp.c:144)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:144)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:144)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='1' (at pp.c:144)
  Typedef: name='__nesc_nxbase_nx_uint8_t', quals=[], storage=['typedef'] (at pp.c:144)
    TypeDecl: declname='__nesc_nxbase_nx_uint8_t', quals=[] (at pp.c:144)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='nx_uint16_t', quals=[], storage=['typedef'] (at pp.c:145)
    TypeDecl: declname='nx_uint16_t', quals=[] (at pp.c:145)
      Struct: name=None, packed=False (at pp.c:145)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:145)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:145)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='2' (at pp.c:145)
  Typedef: name='__nesc_nxbase_nx_uint16_t', quals=[], storage=['typedef'] (at pp.c:145)
    TypeDecl: declname='__nesc_nxbase_nx_uint16_t', quals=[] (at pp.c:145)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='nx_uint32_t', quals=[], storage=['typedef'] (at pp.c:146)
    TypeDecl: declname='nx_uint32_t', quals=[] (at pp.c:146)
      Struct: name=None, packed=False (at pp.c:146)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:146)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:146)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='4' (at pp.c:146)
  Typedef: name='__nesc_nxbase_nx_uint32_t', quals=[], storage=['typedef'] (at pp.c:146)
    TypeDecl: declname='__nesc_nxbase_nx_uint32_t', quals=[] (at pp.c:146)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='nx_uint64_t', quals=[], storage=['typedef'] (at pp.c:147)
    TypeDecl: declname='nx_uint64_t', quals=[] (at pp.c:147)
      Struct: name=None, packed=False (at pp.c:147)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:147)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:147)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='8' (at pp.c:147)
  Typedef: name='__nesc_nxbase_nx_uint64_t', quals=[], storage=['typedef'] (at pp.c:147)
    TypeDecl: declname='__nesc_nxbase_nx_uint64_t', quals=[] (at pp.c:147)
      IdentifierType: names=['uint64_t'] (at None)
  Typedef: name='nxle_int8_t', quals=[], storage=['typedef'] (at pp.c:150)
    TypeDecl: declname='nxle_int8_t', quals=[] (at pp.c:150)
      Struct: name=None, packed=False (at pp.c:150)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:150)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:150)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='1' (at pp.c:150)
  Typedef: name='__nesc_nxbase_nxle_int8_t', quals=[], storage=['typedef'] (at pp.c:150)
    TypeDecl: declname='__nesc_nxbase_nxle_int8_t', quals=[] (at pp.c:150)
      IdentifierType: names=['int8_t'] (at None)
  Typedef: name='nxle_int16_t', quals=[], storage=['typedef'] (at pp.c:151)
    TypeDecl: declname='nxle_int16_t', quals=[] (at pp.c:151)
      Struct: name=None, packed=False (at pp.c:151)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:151)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:151)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='2' (at pp.c:151)
  Typedef: name='__nesc_nxbase_nxle_int16_t', quals=[], storage=['typedef'] (at pp.c:151)
    TypeDecl: declname='__nesc_nxbase_nxle_int16_t', quals=[] (at pp.c:151)
      IdentifierType: names=['int16_t'] (at None)
  Typedef: name='nxle_int32_t', quals=[], storage=['typedef'] (at pp.c:152)
    TypeDecl: declname='nxle_int32_t', quals=[] (at pp.c:152)
      Struct: name=None, packed=False (at pp.c:152)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:152)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:152)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='4' (at pp.c:152)
  Typedef: name='__nesc_nxbase_nxle_int32_t', quals=[], storage=['typedef'] (at pp.c:152)
    TypeDecl: declname='__nesc_nxbase_nxle_int32_t', quals=[] (at pp.c:152)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='nxle_int64_t', quals=[], storage=['typedef'] (at pp.c:153)
    TypeDecl: declname='nxle_int64_t', quals=[] (at pp.c:153)
      Struct: name=None, packed=False (at pp.c:153)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:153)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:153)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='8' (at pp.c:153)
  Typedef: name='__nesc_nxbase_nxle_int64_t', quals=[], storage=['typedef'] (at pp.c:153)
    TypeDecl: declname='__nesc_nxbase_nxle_int64_t', quals=[] (at pp.c:153)
      IdentifierType: names=['int64_t'] (at None)
  Typedef: name='nxle_uint8_t', quals=[], storage=['typedef'] (at pp.c:154)
    TypeDecl: declname='nxle_uint8_t', quals=[] (at pp.c:154)
      Struct: name=None, packed=False (at pp.c:154)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:154)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:154)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='1' (at pp.c:154)
  Typedef: name='__nesc_nxbase_nxle_uint8_t', quals=[], storage=['typedef'] (at pp.c:154)
    TypeDecl: declname='__nesc_nxbase_nxle_uint8_t', quals=[] (at pp.c:154)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='nxle_uint16_t', quals=[], storage=['typedef'] (at pp.c:155)
    TypeDecl: declname='nxle_uint16_t', quals=[] (at pp.c:155)
      Struct: name=None, packed=False (at pp.c:155)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:155)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:155)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='2' (at pp.c:155)
  Typedef: name='__nesc_nxbase_nxle_uint16_t', quals=[], storage=['typedef'] (at pp.c:155)
    TypeDecl: declname='__nesc_nxbase_nxle_uint16_t', quals=[] (at pp.c:155)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='nxle_uint32_t', quals=[], storage=['typedef'] (at pp.c:156)
    TypeDecl: declname='nxle_uint32_t', quals=[] (at pp.c:156)
      Struct: name=None, packed=False (at pp.c:156)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:156)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:156)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='4' (at pp.c:156)
  Typedef: name='__nesc_nxbase_nxle_uint32_t', quals=[], storage=['typedef'] (at pp.c:156)
    TypeDecl: declname='__nesc_nxbase_nxle_uint32_t', quals=[] (at pp.c:156)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='nxle_uint64_t', quals=[], storage=['typedef'] (at pp.c:157)
    TypeDecl: declname='nxle_uint64_t', quals=[] (at pp.c:157)
      Struct: name=None, packed=False (at pp.c:157)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:157)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:157)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='8' (at pp.c:157)
  Typedef: name='__nesc_nxbase_nxle_uint64_t', quals=[], storage=['typedef'] (at pp.c:157)
    TypeDecl: declname='__nesc_nxbase_nxle_uint64_t', quals=[] (at pp.c:157)
      IdentifierType: names=['uint64_t'] (at None)
  Typedef: name='u_char', quals=[], storage=['typedef'] (at pp.c:159)
    TypeDecl: declname='u_char', quals=[] (at pp.c:159)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Typedef: name='u_short', quals=[], storage=['typedef'] (at pp.c:160)
    TypeDecl: declname='u_short', quals=[] (at pp.c:160)
      IdentifierType: names=['short', 'unsigned'] (at None)
  Typedef: name='u_int', quals=[], storage=['typedef'] (at pp.c:161)
    TypeDecl: declname='u_int', quals=[] (at pp.c:161)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='u_long', quals=[], storage=['typedef'] (at pp.c:162)
    TypeDecl: declname='u_long', quals=[] (at pp.c:162)
      IdentifierType: names=['long', 'unsigned'] (at None)
  Typedef: name='ushort', quals=[], storage=['typedef'] (at pp.c:163)
    TypeDecl: declname='ushort', quals=[] (at pp.c:163)
      IdentifierType: names=['short', 'unsigned'] (at None)
  Typedef: name='uint', quals=[], storage=['typedef'] (at pp.c:164)
    TypeDecl: declname='uint', quals=[] (at pp.c:164)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='u_int8_t', quals=[], storage=['typedef'] (at pp.c:166)
    TypeDecl: declname='u_int8_t', quals=[] (at pp.c:166)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='u_int16_t', quals=[], storage=['typedef'] (at pp.c:167)
    TypeDecl: declname='u_int16_t', quals=[] (at pp.c:167)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='u_int32_t', quals=[], storage=['typedef'] (at pp.c:168)
    TypeDecl: declname='u_int32_t', quals=[] (at pp.c:168)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='u_int64_t', quals=[], storage=['typedef'] (at pp.c:169)
    TypeDecl: declname='u_int64_t', quals=[] (at pp.c:169)
      IdentifierType: names=['uint64_t'] (at None)
  Typedef: name='u_quad_t', quals=[], storage=['typedef'] (at pp.c:171)
    TypeDecl: declname='u_quad_t', quals=[] (at pp.c:171)
      IdentifierType: names=['u_int64_t'] (at None)
  Typedef: name='quad_t', quals=[], storage=['typedef'] (at pp.c:172)
    TypeDecl: declname='quad_t', quals=[] (at pp.c:172)
      IdentifierType: names=['int64_t'] (at None)
  Typedef: name='qaddr_t', quals=[], storage=['typedef'] (at pp.c:173)
    PtrDecl: quals=[] (at pp.c:173)
      TypeDecl: declname='qaddr_t', quals=[] (at pp.c:173)
        IdentifierType: names=['quad_t'] (at None)
  Typedef: name='caddr_t', quals=[], storage=['typedef'] (at pp.c:175)
    PtrDecl: quals=[] (at pp.c:175)
      TypeDecl: declname='caddr_t', quals=[] (at pp.c:175)
        IdentifierType: names=['char'] (at None)
  Typedef: name='c_caddr_t', quals=['const'], storage=['typedef'] (at pp.c:176)
    PtrDecl: quals=[] (at pp.c:176)
      TypeDecl: declname='c_caddr_t', quals=['const'] (at pp.c:176)
        IdentifierType: names=['char'] (at None)
  Typedef: name='v_caddr_t', quals=['volatile'], storage=['typedef'] (at pp.c:177)
    PtrDecl: quals=[] (at pp.c:177)
      TypeDecl: declname='v_caddr_t', quals=['volatile'] (at pp.c:177)
        IdentifierType: names=['char'] (at None)
  Typedef: name='fixpt_t', quals=[], storage=['typedef'] (at pp.c:178)
    TypeDecl: declname='fixpt_t', quals=[] (at pp.c:178)
      IdentifierType: names=['u_int32_t'] (at None)
  Typedef: name='gid_t', quals=[], storage=['typedef'] (at pp.c:179)
    TypeDecl: declname='gid_t', quals=[] (at pp.c:179)
      IdentifierType: names=['u_int32_t'] (at None)
  Typedef: name='in_addr_t', quals=[], storage=['typedef'] (at pp.c:180)
    TypeDecl: declname='in_addr_t', quals=[] (at pp.c:180)
      IdentifierType: names=['u_int32_t'] (at None)
  Typedef: name='in_port_t', quals=[], storage=['typedef'] (at pp.c:181)
    TypeDecl: declname='in_port_t', quals=[] (at pp.c:181)
      IdentifierType: names=['u_int16_t'] (at None)
  Typedef: name='ino_t', quals=[], storage=['typedef'] (at pp.c:182)
    TypeDecl: declname='ino_t', quals=[] (at pp.c:182)
      IdentifierType: names=['u_int32_t'] (at None)
  Typedef: name='key_t', quals=[], storage=['typedef'] (at pp.c:183)
    TypeDecl: declname='key_t', quals=[] (at pp.c:183)
      IdentifierType: names=['long'] (at None)
  Typedef: name='mode_t', quals=[], storage=['typedef'] (at pp.c:184)
    TypeDecl: declname='mode_t', quals=[] (at pp.c:184)
      IdentifierType: names=['u_int16_t'] (at None)
  Typedef: name='nlink_t', quals=[], storage=['typedef'] (at pp.c:185)
    TypeDecl: declname='nlink_t', quals=[] (at pp.c:185)
      IdentifierType: names=['u_int16_t'] (at None)
  Typedef: name='rlim_t', quals=[], storage=['typedef'] (at pp.c:186)
    TypeDecl: declname='rlim_t', quals=[] (at pp.c:186)
      IdentifierType: names=['quad_t'] (at None)
  Typedef: name='segsz_t', quals=[], storage=['typedef'] (at pp.c:187)
    TypeDecl: declname='segsz_t', quals=[] (at pp.c:187)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='swblk_t', quals=[], storage=['typedef'] (at pp.c:188)
    TypeDecl: declname='swblk_t', quals=[] (at pp.c:188)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='ufs_daddr_t', quals=[], storage=['typedef'] (at pp.c:189)
    TypeDecl: declname='ufs_daddr_t', quals=[] (at pp.c:189)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='ufs_time_t', quals=[], storage=['typedef'] (at pp.c:190)
    TypeDecl: declname='ufs_time_t', quals=[] (at pp.c:190)
      IdentifierType: names=['int32_t'] (at None)
  Typedef: name='uid_t', quals=[], storage=['typedef'] (at pp.c:191)
    TypeDecl: declname='uid_t', quals=[] (at pp.c:191)
      IdentifierType: names=['u_int32_t'] (at None)
  Decl: name='memcmp', quals=[], storage=['extern'] (at pp.c:193)
    FuncDecl: quals=None (at pp.c:193)
      ParamList:  (at pp.c:193)
        Decl: name='arg_0x100744de8', quals=['const'], storage=[] (at pp.c:193)
          PtrDecl: quals=[] (at pp.c:193)
            TypeDecl: declname='arg_0x100744de8', quals=['const'] (at pp.c:193)
              IdentifierType: names=['void'] (at None)
        Decl: name='arg_0x10074a100', quals=['const'], storage=[] (at pp.c:193)
          PtrDecl: quals=[] (at pp.c:193)
            TypeDecl: declname='arg_0x10074a100', quals=['const'] (at pp.c:193)
              IdentifierType: names=['void'] (at None)
        Decl: name='arg_0x10074a3a8', quals=[], storage=[] (at pp.c:193)
          TypeDecl: declname='arg_0x10074a3a8', quals=[] (at pp.c:193)
            IdentifierType: names=['size_t'] (at None)
      TypeDecl: declname='memcmp', quals=[] (at pp.c:193)
        IdentifierType: names=['int'] (at None)
  Decl: name='memset', quals=[], storage=['extern'] (at pp.c:196)
    FuncDecl: quals=None (at pp.c:196)
      ParamList:  (at pp.c:196)
        Decl: name='arg_0x100748980', quals=[], storage=[] (at pp.c:196)
          PtrDecl: quals=[] (at pp.c:196)
            TypeDecl: declname='arg_0x100748980', quals=[] (at pp.c:196)
              IdentifierType: names=['void'] (at None)
        Decl: name='arg_0x100748be8', quals=[], storage=[] (at pp.c:196)
          TypeDecl: declname='arg_0x100748be8', quals=[] (at pp.c:196)
            IdentifierType: names=['int'] (at None)
        Decl: name='arg_0x10074e020', quals=[], storage=[] (at pp.c:196)
          TypeDecl: declname='arg_0x10074e020', quals=[] (at pp.c:196)
            IdentifierType: names=['size_t'] (at None)
      PtrDecl: quals=[] (at pp.c:196)
        TypeDecl: declname='memset', quals=[] (at pp.c:196)
          IdentifierType: names=['void'] (at None)
  Decl: name='memset', quals=[], storage=['extern'] (at pp.c:198)
    FuncDecl: quals=None (at pp.c:198)
      ParamList:  (at pp.c:198)
        Decl: name='arg_0x100761b10', quals=[], storage=[] (at pp.c:198)
          PtrDecl: quals=[] (at pp.c:198)
            TypeDecl: declname='arg_0x100761b10', quals=[] (at pp.c:198)
              IdentifierType: names=['void'] (at None)
        Decl: name='arg_0x100761d78', quals=[], storage=[] (at pp.c:198)
          TypeDecl: declname='arg_0x100761d78', quals=[] (at pp.c:198)
            IdentifierType: names=['int'] (at None)
        Decl: name='arg_0x100767060', quals=[], storage=[] (at pp.c:198)
          TypeDecl: declname='arg_0x100767060', quals=[] (at pp.c:198)
            IdentifierType: names=['size_t'] (at None)
      PtrDecl: quals=[] (at pp.c:198)
        TypeDecl: declname='memset', quals=[] (at pp.c:198)
          IdentifierType: names=['void'] (at None)
  Typedef: name='div_t', quals=[], storage=['typedef'] (at pp.c:204)
    TypeDecl: declname='div_t', quals=[] (at pp.c:204)
      Struct: name='__nesc_unnamed4242', packed=False (at pp.c:201)
        Decl: name='quot', quals=[], storage=[] (at 0)
          TypeDecl: declname='quot', quals=[] (at pp.c:202)
            IdentifierType: names=['int'] (at None)
        Decl: name='rem', quals=[], storage=[] (at 0)
          TypeDecl: declname='rem', quals=[] (at pp.c:203)
            IdentifierType: names=['int'] (at None)
  Typedef: name='ldiv_t', quals=[], storage=['typedef'] (at pp.c:216)
    TypeDecl: declname='ldiv_t', quals=[] (at pp.c:216)
      Struct: name='__nesc_unnamed4243', packed=False (at pp.c:213)
        Decl: name='quot', quals=[], storage=[] (at 0)
          TypeDecl: declname='quot', quals=[] (at pp.c:214)
            IdentifierType: names=['long'] (at None)
        Decl: name='rem', quals=[], storage=[] (at 0)
          TypeDecl: declname='rem', quals=[] (at pp.c:215)
            IdentifierType: names=['long'] (at None)
  Typedef: name='__int32_t', quals=[], storage=['typedef'] (at pp.c:218)
    TypeDecl: declname='__int32_t', quals=[] (at pp.c:218)
      IdentifierType: names=['int', 'long'] (at None)
  Typedef: name='__uint32_t', quals=[], storage=['typedef'] (at pp.c:219)
    TypeDecl: declname='__uint32_t', quals=[] (at pp.c:219)
      IdentifierType: names=['int', 'long', 'unsigned'] (at None)
  Typedef: name='_off_t', quals=[], storage=['typedef'] (at pp.c:221)
    TypeDecl: declname='_off_t', quals=[] (at pp.c:221)
      IdentifierType: names=['long'] (at None)
  Typedef: name='_ssize_t', quals=[], storage=['typedef'] (at pp.c:222)
    TypeDecl: declname='_ssize_t', quals=[] (at pp.c:222)
      IdentifierType: names=['long'] (at None)
  Typedef: name='__ULong', quals=[], storage=['typedef'] (at pp.c:224)
    TypeDecl: declname='__ULong', quals=[] (at pp.c:224)
      IdentifierType: names=['__uint32_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:227)
    Struct: name='_glue', packed=False (at pp.c:227)
      Decl: name='_next', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:229)
          TypeDecl: declname='_next', quals=[] (at pp.c:229)
            Struct: name='_glue', packed=False (at pp.c:229)
      Decl: name='_niobs', quals=[], storage=[] (at 0)
        TypeDecl: declname='_niobs', quals=[] (at pp.c:230)
          IdentifierType: names=['int'] (at None)
      Decl: name='_iobs', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:231)
          TypeDecl: declname='_iobs', quals=[] (at pp.c:231)
            Struct: name='__sFILE', packed=False (at pp.c:231)
  Decl: name=None, quals=[], storage=[] (at pp.c:234)
    Struct: name='_Bigint', packed=False (at pp.c:234)
      Decl: name='_next', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:236)
          TypeDecl: declname='_next', quals=[] (at pp.c:236)
            Struct: name='_Bigint', packed=False (at pp.c:236)
      Decl: name='_k', quals=[], storage=[] (at 0)
        TypeDecl: declname='_k', quals=[] (at pp.c:237)
          IdentifierType: names=['int'] (at None)
      Decl: name='_maxwds', quals=[], storage=[] (at 0)
        TypeDecl: declname='_maxwds', quals=[] (at pp.c:237)
          IdentifierType: names=['int'] (at None)
      Decl: name='_sign', quals=[], storage=[] (at 0)
        TypeDecl: declname='_sign', quals=[] (at pp.c:237)
          IdentifierType: names=['int'] (at None)
      Decl: name='_wds', quals=[], storage=[] (at 0)
        TypeDecl: declname='_wds', quals=[] (at pp.c:237)
          IdentifierType: names=['int'] (at None)
      Decl: name='_x', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:238)
          TypeDecl: declname='_x', quals=[] (at pp.c:238)
            IdentifierType: names=['__ULong'] (at None)
          Constant: type='int', value='1' (at pp.c:238)
  Decl: name=None, quals=[], storage=[] (at pp.c:242)
    Struct: name='__tm', packed=False (at pp.c:242)
      Decl: name='__tm_sec', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_sec', quals=[] (at pp.c:244)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_min', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_min', quals=[] (at pp.c:245)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_hour', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_hour', quals=[] (at pp.c:246)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_mday', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_mday', quals=[] (at pp.c:247)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_mon', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_mon', quals=[] (at pp.c:248)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_year', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_year', quals=[] (at pp.c:249)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_wday', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_wday', quals=[] (at pp.c:250)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_yday', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_yday', quals=[] (at pp.c:251)
          IdentifierType: names=['int'] (at None)
      Decl: name='__tm_isdst', quals=[], storage=[] (at 0)
        TypeDecl: declname='__tm_isdst', quals=[] (at pp.c:252)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:261)
    Struct: name='_atexit', packed=False (at pp.c:261)
      Decl: name='_next', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:262)
          TypeDecl: declname='_next', quals=[] (at pp.c:262)
            Struct: name='_atexit', packed=False (at pp.c:262)
      Decl: name='_ind', quals=[], storage=[] (at 0)
        TypeDecl: declname='_ind', quals=[] (at pp.c:263)
          IdentifierType: names=['int'] (at None)
      Decl: name='_fns', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:264)
          PtrDecl: quals=[] (at pp.c:264)
            FuncDecl: quals=None (at pp.c:264)
              ParamList:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['void'] (at None)
              TypeDecl: declname='_fns', quals=[] (at pp.c:264)
                IdentifierType: names=['void'] (at None)
          Constant: type='int', value='32' (at pp.c:264)
  Decl: name=None, quals=[], storage=[] (at pp.c:274)
    Struct: name='__sbuf', packed=False (at pp.c:274)
      Decl: name='_base', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:275)
          TypeDecl: declname='_base', quals=[] (at pp.c:275)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='_size', quals=[], storage=[] (at 0)
        TypeDecl: declname='_size', quals=[] (at pp.c:276)
          IdentifierType: names=['int'] (at None)
  Typedef: name='_fpos_t', quals=[], storage=['typedef'] (at pp.c:284)
    TypeDecl: declname='_fpos_t', quals=[] (at pp.c:284)
      IdentifierType: names=['long'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:286)
    Struct: name='__sFILE', packed=False (at pp.c:286)
      Decl: name='_p', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:287)
          TypeDecl: declname='_p', quals=[] (at pp.c:287)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='_r', quals=[], storage=[] (at 0)
        TypeDecl: declname='_r', quals=[] (at pp.c:288)
          IdentifierType: names=['int'] (at None)
      Decl: name='_w', quals=[], storage=[] (at 0)
        TypeDecl: declname='_w', quals=[] (at pp.c:289)
          IdentifierType: names=['int'] (at None)
      Decl: name='_flags', quals=[], storage=[] (at 0)
        TypeDecl: declname='_flags', quals=[] (at pp.c:290)
          IdentifierType: names=['short'] (at None)
      Decl: name='_file', quals=[], storage=[] (at 0)
        TypeDecl: declname='_file', quals=[] (at pp.c:291)
          IdentifierType: names=['short'] (at None)
      Decl: name='_bf', quals=[], storage=[] (at 0)
        TypeDecl: declname='_bf', quals=[] (at pp.c:292)
          Struct: name='__sbuf', packed=False (at pp.c:292)
      Decl: name='_lbfsize', quals=[], storage=[] (at 0)
        TypeDecl: declname='_lbfsize', quals=[] (at pp.c:293)
          IdentifierType: names=['int'] (at None)
      Decl: name='_cookie', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:296)
          TypeDecl: declname='_cookie', quals=[] (at pp.c:296)
            IdentifierType: names=['void'] (at None)
      Decl: name='_read', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:298)
          FuncDecl: quals=None (at pp.c:298)
            ParamList:  (at pp.c:298)
              Decl: name='_cookie', quals=[], storage=[] (at pp.c:298)
                PtrDecl: quals=[] (at pp.c:298)
                  TypeDecl: declname='_cookie', quals=[] (at pp.c:298)
                    IdentifierType: names=['void'] (at None)
              Decl: name='_buf', quals=[], storage=[] (at pp.c:298)
                PtrDecl: quals=[] (at pp.c:298)
                  TypeDecl: declname='_buf', quals=[] (at pp.c:298)
                    IdentifierType: names=['char'] (at None)
              Decl: name='_n', quals=[], storage=[] (at pp.c:298)
                TypeDecl: declname='_n', quals=[] (at pp.c:298)
                  IdentifierType: names=['int'] (at None)
            TypeDecl: declname='_read', quals=[] (at pp.c:298)
              IdentifierType: names=['int'] (at None)
      Decl: name='_write', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:299)
          FuncDecl: quals=None (at pp.c:299)
            ParamList:  (at pp.c:299)
              Decl: name='_cookie', quals=[], storage=[] (at pp.c:299)
                PtrDecl: quals=[] (at pp.c:299)
                  TypeDecl: declname='_cookie', quals=[] (at pp.c:299)
                    IdentifierType: names=['void'] (at None)
              Decl: name='_buf', quals=['const'], storage=[] (at pp.c:299)
                PtrDecl: quals=[] (at pp.c:299)
                  TypeDecl: declname='_buf', quals=['const'] (at pp.c:299)
                    IdentifierType: names=['char'] (at None)
              Decl: name='_n', quals=[], storage=[] (at pp.c:299)
                TypeDecl: declname='_n', quals=[] (at pp.c:299)
                  IdentifierType: names=['int'] (at None)
            TypeDecl: declname='_write', quals=[] (at pp.c:299)
              IdentifierType: names=['int'] (at None)
      Decl: name='_seek', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:301)
          FuncDecl: quals=None (at pp.c:301)
            ParamList:  (at pp.c:301)
              Decl: name='_cookie', quals=[], storage=[] (at pp.c:301)
                PtrDecl: quals=[] (at pp.c:301)
                  TypeDecl: declname='_cookie', quals=[] (at pp.c:301)
                    IdentifierType: names=['void'] (at None)
              Decl: name='_offset', quals=[], storage=[] (at pp.c:301)
                TypeDecl: declname='_offset', quals=[] (at pp.c:301)
                  IdentifierType: names=['_fpos_t'] (at None)
              Decl: name='_whence', quals=[], storage=[] (at pp.c:301)
                TypeDecl: declname='_whence', quals=[] (at pp.c:301)
                  IdentifierType: names=['int'] (at None)
            TypeDecl: declname='_seek', quals=[] (at pp.c:301)
              IdentifierType: names=['_fpos_t'] (at None)
      Decl: name='_close', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:302)
          FuncDecl: quals=None (at pp.c:302)
            ParamList:  (at pp.c:302)
              Decl: name='_cookie', quals=[], storage=[] (at pp.c:302)
                PtrDecl: quals=[] (at pp.c:302)
                  TypeDecl: declname='_cookie', quals=[] (at pp.c:302)
                    IdentifierType: names=['void'] (at None)
            TypeDecl: declname='_close', quals=[] (at pp.c:302)
              IdentifierType: names=['int'] (at None)
      Decl: name='_ub', quals=[], storage=[] (at 0)
        TypeDecl: declname='_ub', quals=[] (at pp.c:305)
          Struct: name='__sbuf', packed=False (at pp.c:305)
      Decl: name='_up', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:306)
          TypeDecl: declname='_up', quals=[] (at pp.c:306)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='_ur', quals=[], storage=[] (at 0)
        TypeDecl: declname='_ur', quals=[] (at pp.c:307)
          IdentifierType: names=['int'] (at None)
      Decl: name='_ubuf', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:310)
          TypeDecl: declname='_ubuf', quals=[] (at pp.c:310)
            IdentifierType: names=['char', 'unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:310)
      Decl: name='_nbuf', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:311)
          TypeDecl: declname='_nbuf', quals=[] (at pp.c:311)
            IdentifierType: names=['char', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:311)
      Decl: name='_lb', quals=[], storage=[] (at 0)
        TypeDecl: declname='_lb', quals=[] (at pp.c:314)
          Struct: name='__sbuf', packed=False (at pp.c:314)
      Decl: name='_blksize', quals=[], storage=[] (at 0)
        TypeDecl: declname='_blksize', quals=[] (at pp.c:317)
          IdentifierType: names=['int'] (at None)
      Decl: name='_offset', quals=[], storage=[] (at 0)
        TypeDecl: declname='_offset', quals=[] (at pp.c:318)
          IdentifierType: names=['int'] (at None)
      Decl: name='_data', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:320)
          TypeDecl: declname='_data', quals=[] (at pp.c:320)
            Struct: name='_reent', packed=False (at pp.c:320)
  Decl: name=None, quals=[], storage=[] (at pp.c:323)
    Struct: name='_rand48', packed=False (at pp.c:323)
      Decl: name='_seed', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:324)
          TypeDecl: declname='_seed', quals=[] (at pp.c:324)
            IdentifierType: names=['short', 'unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:324)
      Decl: name='_mult', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:325)
          TypeDecl: declname='_mult', quals=[] (at pp.c:325)
            IdentifierType: names=['short', 'unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:325)
      Decl: name='_add', quals=[], storage=[] (at 0)
        TypeDecl: declname='_add', quals=[] (at pp.c:326)
          IdentifierType: names=['short', 'unsigned'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:337)
    Struct: name='_reent', packed=False (at pp.c:337)
      Decl: name='_errno', quals=[], storage=[] (at 0)
        TypeDecl: declname='_errno', quals=[] (at pp.c:340)
          IdentifierType: names=['int'] (at None)
      Decl: name='_stdin', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:345)
          TypeDecl: declname='_stdin', quals=[] (at pp.c:345)
            Struct: name='__sFILE', packed=False (at pp.c:345)
      Decl: name='_stdout', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:345)
          TypeDecl: declname='_stdout', quals=[] (at pp.c:345)
            Struct: name='__sFILE', packed=False (at pp.c:345)
      Decl: name='_stderr', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:345)
          TypeDecl: declname='_stderr', quals=[] (at pp.c:345)
            Struct: name='__sFILE', packed=False (at pp.c:345)
      Decl: name='_inc', quals=[], storage=[] (at 0)
        TypeDecl: declname='_inc', quals=[] (at pp.c:347)
          IdentifierType: names=['int'] (at None)
      Decl: name='_emergency', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:348)
          TypeDecl: declname='_emergency', quals=[] (at pp.c:348)
            IdentifierType: names=['char'] (at None)
          Constant: type='int', value='25' (at pp.c:348)
      Decl: name='_current_category', quals=[], storage=[] (at 0)
        TypeDecl: declname='_current_category', quals=[] (at pp.c:350)
          IdentifierType: names=['int'] (at None)
      Decl: name='_current_locale', quals=['const'], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:351)
          TypeDecl: declname='_current_locale', quals=['const'] (at pp.c:351)
            IdentifierType: names=['char'] (at None)
      Decl: name='__sdidinit', quals=[], storage=[] (at 0)
        TypeDecl: declname='__sdidinit', quals=[] (at pp.c:353)
          IdentifierType: names=['int'] (at None)
      Decl: name='__cleanup', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:355)
          FuncDecl: quals=None (at pp.c:355)
            ParamList:  (at pp.c:355)
              Decl: name='arg_0x10079c0c8', quals=[], storage=[] (at pp.c:355)
                PtrDecl: quals=[] (at pp.c:355)
                  TypeDecl: declname='arg_0x10079c0c8', quals=[] (at pp.c:355)
                    Struct: name='_reent', packed=False (at pp.c:355)
            TypeDecl: declname='__cleanup', quals=[] (at pp.c:355)
              IdentifierType: names=['void'] (at None)
      Decl: name='_result', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:358)
          TypeDecl: declname='_result', quals=[] (at pp.c:358)
            Struct: name='_Bigint', packed=False (at pp.c:358)
      Decl: name='_result_k', quals=[], storage=[] (at 0)
        TypeDecl: declname='_result_k', quals=[] (at pp.c:359)
          IdentifierType: names=['int'] (at None)
      Decl: name='_p5s', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:360)
          TypeDecl: declname='_p5s', quals=[] (at pp.c:360)
            Struct: name='_Bigint', packed=False (at pp.c:360)
      Decl: name='_freelist', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:361)
          PtrDecl: quals=[] (at pp.c:361)
            TypeDecl: declname='_freelist', quals=[] (at pp.c:361)
              Struct: name='_Bigint', packed=False (at pp.c:361)
      Decl: name='_cvtlen', quals=[], storage=[] (at 0)
        TypeDecl: declname='_cvtlen', quals=[] (at pp.c:364)
          IdentifierType: names=['int'] (at None)
      Decl: name='_cvtbuf', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:365)
          TypeDecl: declname='_cvtbuf', quals=[] (at pp.c:365)
            IdentifierType: names=['char'] (at None)
      Decl: name='_new', quals=[], storage=[] (at 0)
        TypeDecl: declname='_new', quals=[] (at pp.c:388)
          Union: name='__nesc_unnamed4244', packed=False (at pp.c:367)
            Decl: name='_reent', quals=[], storage=[] (at 0)
              TypeDecl: declname='_reent', quals=[] (at pp.c:378)
                Struct: name='__nesc_unnamed4245', packed=False (at pp.c:369)
                  Decl: name='_unused_rand', quals=[], storage=[] (at 0)
                    TypeDecl: declname='_unused_rand', quals=[] (at pp.c:371)
                      IdentifierType: names=['int', 'unsigned'] (at None)
                  Decl: name='_strtok_last', quals=[], storage=[] (at 0)
                    PtrDecl: quals=[] (at pp.c:372)
                      TypeDecl: declname='_strtok_last', quals=[] (at pp.c:372)
                        IdentifierType: names=['char'] (at None)
                  Decl: name='_asctime_buf', quals=[], storage=[] (at 0)
                    ArrayDecl:  (at pp.c:373)
                      TypeDecl: declname='_asctime_buf', quals=[] (at pp.c:373)
                        IdentifierType: names=['char'] (at None)
                      Constant: type='int', value='26' (at pp.c:373)
                  Decl: name='_localtime_buf', quals=[], storage=[] (at 0)
                    TypeDecl: declname='_localtime_buf', quals=[] (at pp.c:374)
                      Struct: name='__tm', packed=False (at pp.c:374)
                  Decl: name='_gamma_signgam', quals=[], storage=[] (at 0)
                    TypeDecl: declname='_gamma_signgam', quals=[] (at pp.c:375)
                      IdentifierType: names=['int'] (at None)
                  Decl: name='_rand_next', quals=[], storage=[] (at 0)
                    TypeDecl: declname='_rand_next', quals=[] (at pp.c:376)
                      IdentifierType: names=['long', 'long', 'unsigned'] (at None)
                  Decl: name='_r48', quals=[], storage=[] (at 0)
                    TypeDecl: declname='_r48', quals=[] (at pp.c:377)
                      Struct: name='_rand48', packed=False (at pp.c:377)
            Decl: name='_unused', quals=[], storage=[] (at 0)
              TypeDecl: declname='_unused', quals=[] (at pp.c:387)
                Struct: name='__nesc_unnamed4246', packed=False (at pp.c:382)
                  Decl: name='_nextf', quals=[], storage=[] (at 0)
                    ArrayDecl:  (at pp.c:385)
                      PtrDecl: quals=[] (at pp.c:385)
                        TypeDecl: declname='_nextf', quals=[] (at pp.c:385)
                          IdentifierType: names=['char', 'unsigned'] (at None)
                      Constant: type='int', value='30' (at pp.c:385)
                  Decl: name='_nmalloc', quals=[], storage=[] (at 0)
                    ArrayDecl:  (at pp.c:386)
                      TypeDecl: declname='_nmalloc', quals=[] (at pp.c:386)
                        IdentifierType: names=['int', 'unsigned'] (at None)
                      Constant: type='int', value='30' (at pp.c:386)
      Decl: name='_atexit', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:391)
          TypeDecl: declname='_atexit', quals=[] (at pp.c:391)
            Struct: name='_atexit', packed=False (at pp.c:391)
      Decl: name='_atexit0', quals=[], storage=[] (at 0)
        TypeDecl: declname='_atexit0', quals=[] (at pp.c:392)
          Struct: name='_atexit', packed=False (at pp.c:392)
      Decl: name='_sig_func', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:395)
          PtrDecl: quals=[] (at pp.c:395)
            FuncDecl: quals=None (at pp.c:395)
              ParamList:  (at pp.c:395)
                Decl: name='arg_0x10079f180', quals=[], storage=[] (at pp.c:395)
                  TypeDecl: declname='arg_0x10079f180', quals=[] (at pp.c:395)
                    IdentifierType: names=['int'] (at None)
              TypeDecl: declname='_sig_func', quals=[] (at pp.c:395)
                IdentifierType: names=['void'] (at None)
      Decl: name='__sglue', quals=[], storage=[] (at 0)
        TypeDecl: declname='__sglue', quals=[] (at pp.c:400)
          Struct: name='_glue', packed=False (at pp.c:400)
      Decl: name='__sf', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:401)
          TypeDecl: declname='__sf', quals=[] (at pp.c:401)
            Struct: name='__sFILE', packed=False (at pp.c:401)
          Constant: type='int', value='3' (at pp.c:401)
  Decl: name=None, quals=[], storage=[] (at pp.c:404)
    Struct: name='_reent', packed=False (at pp.c:404)
  Decl: name=None, quals=[], storage=[] (at pp.c:406)
    Union: name='__dmath', packed=False (at pp.c:406)
      Decl: name='i', quals=[], storage=[] (at 0)
        ArrayDecl:  (at pp.c:408)
          TypeDecl: declname='i', quals=[] (at pp.c:408)
            IdentifierType: names=['__uint32_t'] (at None)
          Constant: type='int', value='2' (at pp.c:408)
      Decl: name='d', quals=[], storage=[] (at 0)
        TypeDecl: declname='d', quals=[] (at pp.c:409)
          IdentifierType: names=['double'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:415)
    Union: name='__dmath', packed=False (at pp.c:415)
  Decl: name='sin', quals=[], storage=['extern'] (at pp.c:426)
    FuncDecl: quals=None (at pp.c:426)
      ParamList:  (at pp.c:426)
        Decl: name='arg_0x1007a8ad8', quals=[], storage=[] (at pp.c:426)
          TypeDecl: declname='arg_0x1007a8ad8', quals=[] (at pp.c:426)
            IdentifierType: names=['double'] (at None)
      TypeDecl: declname='sin', quals=[] (at pp.c:426)
        IdentifierType: names=['double'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:428)
    Struct: name='exception', packed=False (at pp.c:428)
      Decl: name='type', quals=[], storage=[] (at 0)
        TypeDecl: declname='type', quals=[] (at pp.c:431)
          IdentifierType: names=['int'] (at None)
      Decl: name='name', quals=[], storage=[] (at 0)
        PtrDecl: quals=[] (at pp.c:432)
          TypeDecl: declname='name', quals=[] (at pp.c:432)
            IdentifierType: names=['char'] (at None)
      Decl: name='arg1', quals=[], storage=[] (at 0)
        TypeDecl: declname='arg1', quals=[] (at pp.c:433)
          IdentifierType: names=['double'] (at None)
      Decl: name='arg2', quals=[], storage=[] (at 0)
        TypeDecl: declname='arg2', quals=[] (at pp.c:434)
          IdentifierType: names=['double'] (at None)
      Decl: name='retval', quals=[], storage=[] (at 0)
        TypeDecl: declname='retval', quals=[] (at pp.c:435)
          IdentifierType: names=['double'] (at None)
      Decl: name='err', quals=[], storage=[] (at 0)
        TypeDecl: declname='err', quals=[] (at pp.c:436)
          IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:439)
    Enum: name='__fdlibm_version' (at pp.c:439)
      EnumeratorList:  (at pp.c:441)
        Enumerator: name='__fdlibm_ieee' (at pp.c:441)
          UnaryOp: op='-' (at pp.c:441)
            Constant: type='int', value='1' (at pp.c:441)
        Enumerator: name='__fdlibm_svid' (at pp.c:442)
        Enumerator: name='__fdlibm_xopen' (at pp.c:443)
        Enumerator: name='__fdlibm_posix' (at pp.c:444)
  Decl: name=None, quals=[], storage=[] (at pp.c:450)
    Enum: name='__fdlibm_version' (at pp.c:450)
  Typedef: name='bool', quals=[], storage=['typedef'] (at pp.c:452)
    TypeDecl: declname='bool', quals=[] (at pp.c:452)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:453)
    Enum: name='__nesc_unnamed4247' (at pp.c:453)
      EnumeratorList:  (at pp.c:455)
        Enumerator: name='FALSE' (at pp.c:455)
          Constant: type='int', value='0' (at pp.c:455)
        Enumerator: name='TRUE' (at pp.c:455)
          Constant: type='int', value='1' (at pp.c:455)
  Typedef: name='nx_bool', quals=[], storage=['typedef'] (at pp.c:457)
    TypeDecl: declname='nx_bool', quals=[] (at pp.c:457)
      IdentifierType: names=['nx_int8_t'] (at None)
  Decl: name='TOS_NODE_ID', quals=[], storage=[] (at pp.c:458)
    TypeDecl: declname='TOS_NODE_ID', quals=[] (at pp.c:458)
      IdentifierType: names=['uint16_t'] (at None)
    Constant: type='int', value='1' (at pp.c:458)
  Decl: name=None, quals=[], storage=[] (at pp.c:465)
    Struct: name='__nesc_attr_atmostonce', packed=False (at pp.c:465)
  Decl: name=None, quals=[], storage=[] (at pp.c:468)
    Struct: name='__nesc_attr_atleastonce', packed=False (at pp.c:468)
  Decl: name=None, quals=[], storage=[] (at pp.c:471)
    Struct: name='__nesc_attr_exactlyonce', packed=False (at pp.c:471)
  Decl: name=None, quals=[], storage=[] (at pp.c:474)
    Enum: name='__nesc_unnamed4248' (at pp.c:474)
      EnumeratorList:  (at pp.c:475)
        Enumerator: name='SUCCESS' (at pp.c:475)
          Constant: type='int', value='0' (at pp.c:475)
        Enumerator: name='FAIL' (at pp.c:476)
          Constant: type='int', value='1' (at pp.c:476)
        Enumerator: name='ESIZE' (at pp.c:477)
          Constant: type='int', value='2' (at pp.c:477)
        Enumerator: name='ECANCEL' (at pp.c:478)
          Constant: type='int', value='3' (at pp.c:478)
        Enumerator: name='EOFF' (at pp.c:479)
          Constant: type='int', value='4' (at pp.c:479)
        Enumerator: name='EBUSY' (at pp.c:480)
          Constant: type='int', value='5' (at pp.c:480)
        Enumerator: name='EINVAL' (at pp.c:481)
          Constant: type='int', value='6' (at pp.c:481)
        Enumerator: name='ERETRY' (at pp.c:482)
          Constant: type='int', value='7' (at pp.c:482)
        Enumerator: name='ERESERVE' (at pp.c:483)
          Constant: type='int', value='8' (at pp.c:483)
        Enumerator: name='EALREADY' (at pp.c:484)
          Constant: type='int', value='9' (at pp.c:484)
        Enumerator: name='ENOMEM' (at pp.c:485)
          Constant: type='int', value='10' (at pp.c:485)
        Enumerator: name='ENOACK' (at pp.c:486)
          Constant: type='int', value='11' (at pp.c:486)
        Enumerator: name='ELAST' (at pp.c:487)
          Constant: type='int', value='11' (at pp.c:487)
  Typedef: name='error_t', quals=[], storage=['typedef'] (at pp.c:490)
    TypeDecl: declname='error_t', quals=[] (at pp.c:490)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ecombine', quals=[], storage=['inline', 'static'] (at pp.c:492)
    FuncDecl: quals=None (at pp.c:492)
      ParamList:  (at pp.c:492)
        Decl: name='r1', quals=[], storage=[] (at pp.c:492)
          TypeDecl: declname='r1', quals=[] (at pp.c:492)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='r2', quals=[], storage=[] (at pp.c:492)
          TypeDecl: declname='r2', quals=[] (at pp.c:492)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='ecombine', quals=[] (at pp.c:492)
        IdentifierType: names=['error_t'] (at None)
  Typedef: name='ioregister_t', quals=[], storage=['typedef'] (at pp.c:507)
    TypeDecl: declname='ioregister_t', quals=[] (at pp.c:507)
      Union: name='port', packed=True (at pp.c:495)
        Decl: name='reg_p', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='reg_p', quals=['volatile'] (at pp.c:496)
            IdentifierType: names=['char', 'unsigned'] (at None)
        Decl: name='__pin', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='__pin', quals=['volatile'] (at pp.c:506)
            Struct: name='__nesc_unnamed4249', packed=False (at pp.c:497)
              Decl: name='__p0', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p0', quals=[] (at pp.c:498)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:498)
              Decl: name='__p1', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p1', quals=[] (at pp.c:499)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:499)
              Decl: name='__p2', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p2', quals=[] (at pp.c:500)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:500)
              Decl: name='__p3', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p3', quals=[] (at pp.c:501)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:501)
              Decl: name='__p4', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p4', quals=[] (at pp.c:502)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:502)
              Decl: name='__p5', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p5', quals=[] (at pp.c:503)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:503)
              Decl: name='__p6', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p6', quals=[] (at pp.c:504)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:504)
              Decl: name='__p7', quals=[], storage=[] (at 0)
                TypeDecl: declname='__p7', quals=[] (at pp.c:505)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                Constant: type='int', value='1' (at pp.c:505)
  Decl: name=None, quals=[], storage=[] (at pp.c:509)
    Struct: name='port_full_t', packed=False (at pp.c:509)
      Decl: name='in', quals=[], storage=[] (at 0)
        TypeDecl: declname='in', quals=[] (at pp.c:510)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='out', quals=[], storage=[] (at 0)
        TypeDecl: declname='out', quals=[] (at pp.c:511)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='dir', quals=[], storage=[] (at 0)
        TypeDecl: declname='dir', quals=[] (at pp.c:512)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='ifg', quals=[], storage=[] (at 0)
        TypeDecl: declname='ifg', quals=[] (at pp.c:513)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='ies', quals=[], storage=[] (at 0)
        TypeDecl: declname='ies', quals=[] (at pp.c:514)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='ie', quals=[], storage=[] (at 0)
        TypeDecl: declname='ie', quals=[] (at pp.c:515)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='sel', quals=[], storage=[] (at 0)
        TypeDecl: declname='sel', quals=[] (at pp.c:516)
          IdentifierType: names=['ioregister_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:527)
    Struct: name='port_simple_t', packed=False (at pp.c:527)
      Decl: name='in', quals=[], storage=[] (at 0)
        TypeDecl: declname='in', quals=[] (at pp.c:528)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='out', quals=[], storage=[] (at 0)
        TypeDecl: declname='out', quals=[] (at pp.c:529)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='dir', quals=[], storage=[] (at 0)
        TypeDecl: declname='dir', quals=[] (at pp.c:530)
          IdentifierType: names=['ioregister_t'] (at None)
      Decl: name='sel', quals=[], storage=[] (at 0)
        TypeDecl: declname='sel', quals=[] (at pp.c:531)
          IdentifierType: names=['ioregister_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:537)
    Struct: name='port_full_t', packed=False (at pp.c:537)
  Decl: name=None, quals=[], storage=[] (at pp.c:541)
    Struct: name='port_full_t', packed=False (at pp.c:541)
  Decl: name=None, quals=[], storage=[] (at pp.c:545)
    Struct: name='port_simple_t', packed=False (at pp.c:545)
  Decl: name=None, quals=[], storage=[] (at pp.c:549)
    Struct: name='port_simple_t', packed=False (at pp.c:549)
  Decl: name=None, quals=[], storage=[] (at pp.c:553)
    Struct: name='port_simple_t', packed=False (at pp.c:553)
  Decl: name=None, quals=[], storage=[] (at pp.c:557)
    Struct: name='port_simple_t', packed=False (at pp.c:557)
  Decl: name='P1OUT@"0x0021"', quals=['volatile'], storage=[] (at pp.c:559)
    TypeDecl: declname='P1OUT@"0x0021"', quals=['volatile'] (at pp.c:559)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P1DIR@"0x0022"', quals=['volatile'], storage=[] (at pp.c:561)
    TypeDecl: declname='P1DIR@"0x0022"', quals=['volatile'] (at pp.c:561)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P1IFG@"0x0023"', quals=['volatile'], storage=[] (at pp.c:563)
    TypeDecl: declname='P1IFG@"0x0023"', quals=['volatile'] (at pp.c:563)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P1IES@"0x0024"', quals=['volatile'], storage=[] (at pp.c:565)
    TypeDecl: declname='P1IES@"0x0024"', quals=['volatile'] (at pp.c:565)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P1IE@"0x0025"', quals=['volatile'], storage=[] (at pp.c:567)
    TypeDecl: declname='P1IE@"0x0025"', quals=['volatile'] (at pp.c:567)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P1SEL@"0x0026"', quals=['volatile'], storage=[] (at pp.c:569)
    TypeDecl: declname='P1SEL@"0x0026"', quals=['volatile'] (at pp.c:569)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P2OUT@"0x0029"', quals=['volatile'], storage=[] (at pp.c:580)
    TypeDecl: declname='P2OUT@"0x0029"', quals=['volatile'] (at pp.c:580)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P2DIR@"0x002A"', quals=['volatile'], storage=[] (at pp.c:582)
    TypeDecl: declname='P2DIR@"0x002A"', quals=['volatile'] (at pp.c:582)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P2IFG@"0x002B"', quals=['volatile'], storage=[] (at pp.c:584)
    TypeDecl: declname='P2IFG@"0x002B"', quals=['volatile'] (at pp.c:584)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P2IE@"0x002D"', quals=['volatile'], storage=[] (at pp.c:588)
    TypeDecl: declname='P2IE@"0x002D"', quals=['volatile'] (at pp.c:588)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P2SEL@"0x002E"', quals=['volatile'], storage=[] (at pp.c:590)
    TypeDecl: declname='P2SEL@"0x002E"', quals=['volatile'] (at pp.c:590)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P3OUT@"0x0019"', quals=['volatile'], storage=[] (at pp.c:601)
    TypeDecl: declname='P3OUT@"0x0019"', quals=['volatile'] (at pp.c:601)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P3DIR@"0x001A"', quals=['volatile'], storage=[] (at pp.c:603)
    TypeDecl: declname='P3DIR@"0x001A"', quals=['volatile'] (at pp.c:603)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P3SEL@"0x001B"', quals=['volatile'], storage=[] (at pp.c:605)
    TypeDecl: declname='P3SEL@"0x001B"', quals=['volatile'] (at pp.c:605)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P4OUT@"0x001D"', quals=['volatile'], storage=[] (at pp.c:616)
    TypeDecl: declname='P4OUT@"0x001D"', quals=['volatile'] (at pp.c:616)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P4DIR@"0x001E"', quals=['volatile'], storage=[] (at pp.c:618)
    TypeDecl: declname='P4DIR@"0x001E"', quals=['volatile'] (at pp.c:618)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P4SEL@"0x001F"', quals=['volatile'], storage=[] (at pp.c:620)
    TypeDecl: declname='P4SEL@"0x001F"', quals=['volatile'] (at pp.c:620)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P5OUT@"0x0031"', quals=['volatile'], storage=[] (at pp.c:631)
    TypeDecl: declname='P5OUT@"0x0031"', quals=['volatile'] (at pp.c:631)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P5DIR@"0x0032"', quals=['volatile'], storage=[] (at pp.c:633)
    TypeDecl: declname='P5DIR@"0x0032"', quals=['volatile'] (at pp.c:633)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P5SEL@"0x0033"', quals=['volatile'], storage=[] (at pp.c:635)
    TypeDecl: declname='P5SEL@"0x0033"', quals=['volatile'] (at pp.c:635)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P6OUT@"0x0035"', quals=['volatile'], storage=[] (at pp.c:646)
    TypeDecl: declname='P6OUT@"0x0035"', quals=['volatile'] (at pp.c:646)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P6DIR@"0x0036"', quals=['volatile'], storage=[] (at pp.c:648)
    TypeDecl: declname='P6DIR@"0x0036"', quals=['volatile'] (at pp.c:648)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='P6SEL@"0x0037"', quals=['volatile'], storage=[] (at pp.c:650)
    TypeDecl: declname='P6SEL@"0x0037"', quals=['volatile'] (at pp.c:650)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0CTL@"0x0070"', quals=['volatile'], storage=[] (at pp.c:652)
    TypeDecl: declname='U0CTL@"0x0070"', quals=['volatile'] (at pp.c:652)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0TCTL@"0x0071"', quals=['volatile'], storage=[] (at pp.c:654)
    TypeDecl: declname='U0TCTL@"0x0071"', quals=['volatile'] (at pp.c:654)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0MCTL@"0x0073"', quals=['volatile'], storage=[] (at pp.c:658)
    TypeDecl: declname='U0MCTL@"0x0073"', quals=['volatile'] (at pp.c:658)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0BR0@"0x0074"', quals=['volatile'], storage=[] (at pp.c:660)
    TypeDecl: declname='U0BR0@"0x0074"', quals=['volatile'] (at pp.c:660)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0BR1@"0x0075"', quals=['volatile'], storage=[] (at pp.c:662)
    TypeDecl: declname='U0BR1@"0x0075"', quals=['volatile'] (at pp.c:662)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0RXBUF@"0x0076"', quals=['volatile'], storage=[] (at pp.c:664)
    TypeDecl: declname='U0RXBUF@"0x0076"', quals=['volatile'] (at pp.c:664)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U1TCTL@"0x0079"', quals=['volatile'], storage=[] (at pp.c:666)
    TypeDecl: declname='U1TCTL@"0x0079"', quals=['volatile'] (at pp.c:666)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='TA0CTL@"0x0160"', quals=['volatile'], storage=[] (at pp.c:668)
    TypeDecl: declname='TA0CTL@"0x0160"', quals=['volatile'] (at pp.c:668)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TA0R@"0x0170"', quals=['volatile'], storage=[] (at pp.c:670)
    TypeDecl: declname='TA0R@"0x0170"', quals=['volatile'] (at pp.c:670)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TA0CCTL0@"0x0162"', quals=['volatile'], storage=[] (at pp.c:673)
    TypeDecl: declname='TA0CCTL0@"0x0162"', quals=['volatile'] (at pp.c:673)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TA0CCTL1@"0x0164"', quals=['volatile'], storage=[] (at pp.c:675)
    TypeDecl: declname='TA0CCTL1@"0x0164"', quals=['volatile'] (at pp.c:675)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TA0CCTL2@"0x0166"', quals=['volatile'], storage=[] (at pp.c:677)
    TypeDecl: declname='TA0CCTL2@"0x0166"', quals=['volatile'] (at pp.c:677)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='tactl_t', quals=[], storage=['typedef'] (at pp.c:689)
    TypeDecl: declname='tactl_t', quals=[] (at pp.c:689)
      Struct: name='__nesc_unnamed4250', packed=True (at pp.c:680)
        Decl: name='taifg', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='taifg', quals=['volatile'] (at pp.c:682)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:682)
        Decl: name='taie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='taie', quals=['volatile'] (at pp.c:683)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:683)
        Decl: name='taclr', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='taclr', quals=['volatile'] (at pp.c:684)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:684)
        Decl: name='dummy', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='dummy', quals=['volatile'] (at pp.c:685)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:685)
        Decl: name='tamc', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tamc', quals=['volatile'] (at pp.c:686)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:686)
        Decl: name='taid', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='taid', quals=['volatile'] (at pp.c:687)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:687)
        Decl: name='tassel', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tassel', quals=['volatile'] (at pp.c:688)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:688)
  Typedef: name='tacctl_t', quals=[], storage=['typedef'] (at pp.c:706)
    TypeDecl: declname='tacctl_t', quals=[] (at pp.c:706)
      Struct: name='__nesc_unnamed4251', packed=True (at pp.c:692)
        Decl: name='ccifg', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccifg', quals=['volatile'] (at pp.c:694)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:694)
        Decl: name='cov', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cov', quals=['volatile'] (at pp.c:695)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:695)
        Decl: name='out', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='out', quals=['volatile'] (at pp.c:696)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:696)
        Decl: name='cci', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cci', quals=['volatile'] (at pp.c:697)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:697)
        Decl: name='ccie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccie', quals=['volatile'] (at pp.c:698)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:698)
        Decl: name='outmod', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='outmod', quals=['volatile'] (at pp.c:699)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:699)
        Decl: name='cap', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cap', quals=['volatile'] (at pp.c:700)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:700)
        Decl: name='dummy', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='dummy', quals=['volatile'] (at pp.c:701)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:701)
        Decl: name='scci', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='scci', quals=['volatile'] (at pp.c:702)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:702)
        Decl: name='scs', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='scs', quals=['volatile'] (at pp.c:703)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:703)
        Decl: name='ccis', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccis', quals=['volatile'] (at pp.c:704)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:704)
        Decl: name='cm', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cm', quals=['volatile'] (at pp.c:705)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:705)
  Decl: name=None, quals=[], storage=[] (at pp.c:709)
    Struct: name='timera_t', packed=False (at pp.c:709)
      Decl: name='ctl', quals=[], storage=[] (at 0)
        TypeDecl: declname='ctl', quals=[] (at pp.c:710)
          IdentifierType: names=['tactl_t'] (at None)
      Decl: name='cctl0', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl0', quals=[] (at pp.c:711)
          IdentifierType: names=['tacctl_t'] (at None)
      Decl: name='cctl1', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl1', quals=[] (at pp.c:712)
          IdentifierType: names=['tacctl_t'] (at None)
      Decl: name='cctl2', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl2', quals=[] (at pp.c:713)
          IdentifierType: names=['tacctl_t'] (at None)
      Decl: name='dummy', quals=['volatile'], storage=[] (at 0)
        ArrayDecl:  (at pp.c:714)
          TypeDecl: declname='dummy', quals=['volatile'] (at pp.c:714)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:714)
      Decl: name='tar', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tar', quals=['volatile'] (at pp.c:715)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='taccr0', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='taccr0', quals=['volatile'] (at pp.c:716)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='taccr1', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='taccr1', quals=['volatile'] (at pp.c:717)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='taccr2', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='taccr2', quals=['volatile'] (at pp.c:718)
          IdentifierType: names=['unsigned'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:723)
    Struct: name='timera_t', packed=False (at pp.c:723)
  Decl: name='TBR@"0x0190"', quals=['volatile'], storage=[] (at pp.c:725)
    TypeDecl: declname='TBR@"0x0190"', quals=['volatile'] (at pp.c:725)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TBCCTL0@"0x0182"', quals=['volatile'], storage=[] (at pp.c:728)
    TypeDecl: declname='TBCCTL0@"0x0182"', quals=['volatile'] (at pp.c:728)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='TBCCR0@"0x0192"', quals=['volatile'], storage=[] (at pp.c:734)
    TypeDecl: declname='TBCCR0@"0x0192"', quals=['volatile'] (at pp.c:734)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='tbctl_t', quals=[], storage=['typedef'] (at pp.c:749)
    TypeDecl: declname='tbctl_t', quals=[] (at pp.c:749)
      Struct: name='__nesc_unnamed4252', packed=True (at pp.c:737)
        Decl: name='tbifg', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbifg', quals=['volatile'] (at pp.c:739)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:739)
        Decl: name='tbie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbie', quals=['volatile'] (at pp.c:740)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:740)
        Decl: name='tbclr', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbclr', quals=['volatile'] (at pp.c:741)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:741)
        Decl: name='dummy1', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='dummy1', quals=['volatile'] (at pp.c:742)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:742)
        Decl: name='tbmc', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbmc', quals=['volatile'] (at pp.c:743)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:743)
        Decl: name='tbid', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbid', quals=['volatile'] (at pp.c:744)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:744)
        Decl: name='tbssel', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbssel', quals=['volatile'] (at pp.c:745)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:745)
        Decl: name='dummy2', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='dummy2', quals=['volatile'] (at pp.c:746)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:746)
        Decl: name='tbcntl', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbcntl', quals=['volatile'] (at pp.c:747)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:747)
        Decl: name='tbclgrp', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='tbclgrp', quals=['volatile'] (at pp.c:748)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:748)
  Typedef: name='tbcctl_t', quals=[], storage=['typedef'] (at pp.c:765)
    TypeDecl: declname='tbcctl_t', quals=[] (at pp.c:765)
      Struct: name='__nesc_unnamed4253', packed=True (at pp.c:752)
        Decl: name='ccifg', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccifg', quals=['volatile'] (at pp.c:754)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:754)
        Decl: name='cov', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cov', quals=['volatile'] (at pp.c:755)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:755)
        Decl: name='out', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='out', quals=['volatile'] (at pp.c:756)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:756)
        Decl: name='cci', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cci', quals=['volatile'] (at pp.c:757)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:757)
        Decl: name='ccie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccie', quals=['volatile'] (at pp.c:758)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:758)
        Decl: name='outmod', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='outmod', quals=['volatile'] (at pp.c:759)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:759)
        Decl: name='cap', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cap', quals=['volatile'] (at pp.c:760)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:760)
        Decl: name='clld', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='clld', quals=['volatile'] (at pp.c:761)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:761)
        Decl: name='scs', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='scs', quals=['volatile'] (at pp.c:762)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:762)
        Decl: name='ccis', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='ccis', quals=['volatile'] (at pp.c:763)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:763)
        Decl: name='cm', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cm', quals=['volatile'] (at pp.c:764)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:764)
  Decl: name=None, quals=[], storage=[] (at pp.c:768)
    Struct: name='timerb_t', packed=False (at pp.c:768)
      Decl: name='ctl', quals=[], storage=[] (at 0)
        TypeDecl: declname='ctl', quals=[] (at pp.c:769)
          IdentifierType: names=['tbctl_t'] (at None)
      Decl: name='cctl0', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl0', quals=[] (at pp.c:770)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl1', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl1', quals=[] (at pp.c:771)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl2', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl2', quals=[] (at pp.c:772)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl3', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl3', quals=[] (at pp.c:774)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl4', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl4', quals=[] (at pp.c:775)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl5', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl5', quals=[] (at pp.c:776)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='cctl6', quals=[], storage=[] (at 0)
        TypeDecl: declname='cctl6', quals=[] (at pp.c:777)
          IdentifierType: names=['tbcctl_t'] (at None)
      Decl: name='tbr', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbr', quals=['volatile'] (at pp.c:781)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr0', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr0', quals=['volatile'] (at pp.c:782)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr1', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr1', quals=['volatile'] (at pp.c:783)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr2', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr2', quals=['volatile'] (at pp.c:784)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr3', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr3', quals=['volatile'] (at pp.c:786)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr4', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr4', quals=['volatile'] (at pp.c:787)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr5', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr5', quals=['volatile'] (at pp.c:788)
          IdentifierType: names=['unsigned'] (at None)
      Decl: name='tbccr6', quals=['volatile'], storage=[] (at 0)
        TypeDecl: declname='tbccr6', quals=['volatile'] (at pp.c:789)
          IdentifierType: names=['unsigned'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:796)
    Struct: name='timerb_t', packed=False (at pp.c:796)
  Decl: name='DCOCTL@"0x0056"', quals=['volatile'], storage=[] (at pp.c:798)
    TypeDecl: declname='DCOCTL@"0x0056"', quals=['volatile'] (at pp.c:798)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='BCSCTL1@"0x0057"', quals=['volatile'], storage=[] (at pp.c:800)
    TypeDecl: declname='BCSCTL1@"0x0057"', quals=['volatile'] (at pp.c:800)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='BCSCTL2@"0x0058"', quals=['volatile'], storage=[] (at pp.c:802)
    TypeDecl: declname='BCSCTL2@"0x0058"', quals=['volatile'] (at pp.c:802)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='ADC12CTL0@"0x01A0"', quals=['volatile'], storage=[] (at pp.c:804)
    TypeDecl: declname='ADC12CTL0@"0x01A0"', quals=['volatile'] (at pp.c:804)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Decl: name='ADC12CTL1@"0x01A2"', quals=['volatile'], storage=[] (at pp.c:806)
    TypeDecl: declname='ADC12CTL1@"0x01A2"', quals=['volatile'] (at pp.c:806)
      IdentifierType: names=['int', 'unsigned'] (at None)
  Typedef: name='adc12ctl0_t', quals=[], storage=['typedef'] (at pp.c:821)
    TypeDecl: declname='adc12ctl0_t', quals=[] (at pp.c:821)
      Struct: name='__nesc_unnamed4254', packed=True (at pp.c:809)
        Decl: name='adc12sc', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12sc', quals=['volatile'] (at pp.c:811)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:811)
        Decl: name='enc', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='enc', quals=['volatile'] (at pp.c:812)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:812)
        Decl: name='adc12tovie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12tovie', quals=['volatile'] (at pp.c:813)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:813)
        Decl: name='adc12ovie', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12ovie', quals=['volatile'] (at pp.c:814)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:814)
        Decl: name='adc12on', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12on', quals=['volatile'] (at pp.c:815)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:815)
        Decl: name='refon', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='refon', quals=['volatile'] (at pp.c:816)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:816)
        Decl: name='r2_5v', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='r2_5v', quals=['volatile'] (at pp.c:817)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:817)
        Decl: name='msc', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='msc', quals=['volatile'] (at pp.c:818)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:818)
        Decl: name='sht0', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='sht0', quals=['volatile'] (at pp.c:819)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:819)
        Decl: name='sht1', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='sht1', quals=['volatile'] (at pp.c:820)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:820)
  Typedef: name='adc12ctl1_t', quals=[], storage=['typedef'] (at pp.c:834)
    TypeDecl: declname='adc12ctl1_t', quals=[] (at pp.c:834)
      Struct: name='__nesc_unnamed4255', packed=True (at pp.c:824)
        Decl: name='adc12busy', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12busy', quals=['volatile'] (at pp.c:826)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:826)
        Decl: name='conseq', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='conseq', quals=['volatile'] (at pp.c:827)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:827)
        Decl: name='adc12ssel', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12ssel', quals=['volatile'] (at pp.c:828)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:828)
        Decl: name='adc12div', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='adc12div', quals=['volatile'] (at pp.c:829)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:829)
        Decl: name='issh', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='issh', quals=['volatile'] (at pp.c:830)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:830)
        Decl: name='shp', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='shp', quals=['volatile'] (at pp.c:831)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:831)
        Decl: name='shs', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='shs', quals=['volatile'] (at pp.c:832)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:832)
        Decl: name='cstartadd', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='cstartadd', quals=['volatile'] (at pp.c:833)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:833)
  Typedef: name='adc12xflg_t', quals=[], storage=['typedef'] (at pp.c:855)
    TypeDecl: declname='adc12xflg_t', quals=[] (at pp.c:855)
      Struct: name='__nesc_unnamed4256', packed=True (at pp.c:837)
        Decl: name='bit0', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit0', quals=['volatile'] (at pp.c:839)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:839)
        Decl: name='bit1', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit1', quals=['volatile'] (at pp.c:840)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:840)
        Decl: name='bit2', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit2', quals=['volatile'] (at pp.c:841)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:841)
        Decl: name='bit3', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit3', quals=['volatile'] (at pp.c:842)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:842)
        Decl: name='bit4', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit4', quals=['volatile'] (at pp.c:843)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:843)
        Decl: name='bit5', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit5', quals=['volatile'] (at pp.c:844)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:844)
        Decl: name='bit6', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit6', quals=['volatile'] (at pp.c:845)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:845)
        Decl: name='bit7', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit7', quals=['volatile'] (at pp.c:846)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:846)
        Decl: name='bit8', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit8', quals=['volatile'] (at pp.c:847)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:847)
        Decl: name='bit9', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit9', quals=['volatile'] (at pp.c:848)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:848)
        Decl: name='bit10', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit10', quals=['volatile'] (at pp.c:849)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:849)
        Decl: name='bit11', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit11', quals=['volatile'] (at pp.c:850)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:850)
        Decl: name='bit12', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit12', quals=['volatile'] (at pp.c:851)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:851)
        Decl: name='bit13', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit13', quals=['volatile'] (at pp.c:852)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:852)
        Decl: name='bit14', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit14', quals=['volatile'] (at pp.c:853)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:853)
        Decl: name='bit15', quals=['volatile'], storage=[] (at 0)
          TypeDecl: declname='bit15', quals=['volatile'] (at pp.c:854)
            IdentifierType: names=['unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:854)
  Decl: name=None, quals=[], storage=[] (at pp.c:858)
    Struct: name='adc12_t', packed=False (at pp.c:858)
      Decl: name='ctl0', quals=[], storage=[] (at 0)
        TypeDecl: declname='ctl0', quals=[] (at pp.c:859)
          IdentifierType: names=['adc12ctl0_t'] (at None)
      Decl: name='ctl1', quals=[], storage=[] (at 0)
        TypeDecl: declname='ctl1', quals=[] (at pp.c:860)
          IdentifierType: names=['adc12ctl1_t'] (at None)
      Decl: name='ifg', quals=[], storage=[] (at 0)
        TypeDecl: declname='ifg', quals=[] (at pp.c:861)
          IdentifierType: names=['adc12xflg_t'] (at None)
      Decl: name='ie', quals=[], storage=[] (at 0)
        TypeDecl: declname='ie', quals=[] (at pp.c:862)
          IdentifierType: names=['adc12xflg_t'] (at None)
      Decl: name='iv', quals=[], storage=[] (at 0)
        TypeDecl: declname='iv', quals=[] (at pp.c:863)
          IdentifierType: names=['adc12xflg_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:869)
    Struct: name='adc12_t', packed=False (at pp.c:869)
  Decl: name='ME1@"0x0004"', quals=['volatile'], storage=[] (at pp.c:871)
    TypeDecl: declname='ME1@"0x0004"', quals=['volatile'] (at pp.c:871)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='ME2@"0x0005"', quals=['volatile'], storage=[] (at pp.c:877)
    TypeDecl: declname='ME2@"0x0005"', quals=['volatile'] (at pp.c:877)
      IdentifierType: names=['char', 'unsigned'] (at None)
  Decl: name='U0CTLnr@"0x0070"', quals=['volatile'], storage=['static'] (at pp.c:879)
    TypeDecl: declname='U0CTLnr@"0x0070"', quals=['volatile'] (at pp.c:879)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='I2CTCTLnr@"0x0071"', quals=['volatile'], storage=['static'] (at pp.c:880)
    TypeDecl: declname='I2CTCTLnr@"0x0071"', quals=['volatile'] (at pp.c:880)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='I2CDCTLnr@"0x0072"', quals=['volatile'], storage=['static'] (at pp.c:881)
    TypeDecl: declname='I2CDCTLnr@"0x0072"', quals=['volatile'] (at pp.c:881)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='mcu_power_t', quals=[], storage=['typedef'] (at pp.c:883)
    TypeDecl: declname='mcu_power_t', quals=[] (at pp.c:883)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='mcombine', quals=[], storage=['inline', 'static'] (at pp.c:884)
    FuncDecl: quals=None (at pp.c:884)
      ParamList:  (at pp.c:884)
        Decl: name='m1', quals=[], storage=[] (at pp.c:884)
          TypeDecl: declname='m1', quals=[] (at pp.c:884)
            IdentifierType: names=['mcu_power_t'] (at None)
        Decl: name='m2', quals=[], storage=[] (at pp.c:884)
          TypeDecl: declname='m2', quals=[] (at pp.c:884)
            IdentifierType: names=['mcu_power_t'] (at None)
      TypeDecl: declname='mcombine', quals=[] (at pp.c:884)
        IdentifierType: names=['mcu_power_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:887)
    Enum: name='__nesc_unnamed4257' (at pp.c:887)
      EnumeratorList:  (at pp.c:888)
        Enumerator: name='MSP430_POWER_ACTIVE' (at pp.c:888)
          Constant: type='int', value='0' (at pp.c:888)
        Enumerator: name='MSP430_POWER_LPM0' (at pp.c:889)
          Constant: type='int', value='1' (at pp.c:889)
        Enumerator: name='MSP430_POWER_LPM1' (at pp.c:890)
          Constant: type='int', value='2' (at pp.c:890)
        Enumerator: name='MSP430_POWER_LPM2' (at pp.c:891)
          Constant: type='int', value='3' (at pp.c:891)
        Enumerator: name='MSP430_POWER_LPM3' (at pp.c:892)
          Constant: type='int', value='4' (at pp.c:892)
        Enumerator: name='MSP430_POWER_LPM4' (at pp.c:893)
          Constant: type='int', value='5' (at pp.c:893)
  Decl: name='__nesc_disable_interrupt', quals=[], storage=['inline', 'static'] (at pp.c:896)
    FuncDecl: quals=None (at pp.c:896)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_disable_interrupt', quals=[] (at pp.c:896)
        IdentifierType: names=['void'] (at None)
  Decl: name='__nesc_enable_interrupt', quals=[], storage=['inline', 'static'] (at pp.c:902)
    FuncDecl: quals=None (at pp.c:902)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_enable_interrupt', quals=[] (at pp.c:902)
        IdentifierType: names=['void'] (at None)
  Typedef: name='__nesc_atomic_t', quals=[], storage=['typedef'] (at pp.c:907)
    TypeDecl: declname='__nesc_atomic_t', quals=[] (at pp.c:907)
      IdentifierType: names=['bool'] (at None)
  Decl: name='__nesc_atomic_start', quals=[], storage=[] (at pp.c:908)
    FuncDecl: quals=None (at pp.c:908)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_atomic_start', quals=[] (at pp.c:908)
        IdentifierType: names=['__nesc_atomic_t'] (at None)
  Decl: name='__nesc_atomic_end', quals=[], storage=[] (at pp.c:909)
    FuncDecl: quals=None (at pp.c:909)
      ParamList:  (at pp.c:909)
        Decl: name='reenable_interrupts', quals=[], storage=[] (at pp.c:909)
          TypeDecl: declname='reenable_interrupts', quals=[] (at pp.c:909)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
      TypeDecl: declname='__nesc_atomic_end', quals=[] (at pp.c:909)
        IdentifierType: names=['void'] (at None)
  Decl: name='__nesc_atomic_start', quals=[], storage=[] (at pp.c:916)
    FuncDecl: quals=None (at pp.c:916)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='__nesc_atomic_start', quals=[] (at pp.c:916)
        IdentifierType: names=['__nesc_atomic_t'] (at None)
  Decl: name='__nesc_atomic_end', quals=[], storage=[] (at pp.c:924)
    FuncDecl: quals=None (at pp.c:924)
      ParamList:  (at pp.c:924)
        Decl: name='reenable_interrupts', quals=[], storage=[] (at pp.c:924)
          TypeDecl: declname='reenable_interrupts', quals=[] (at pp.c:924)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
      TypeDecl: declname='__nesc_atomic_end', quals=[] (at pp.c:924)
        IdentifierType: names=['void'] (at None)
  Typedef: name='nx_float', quals=[], storage=['typedef'] (at pp.c:926)
    TypeDecl: declname='nx_float', quals=[] (at pp.c:926)
      Struct: name=None, packed=False (at pp.c:926)
        Decl: name='nxdata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:926)
            TypeDecl: declname='nxdata', quals=[] (at pp.c:926)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='4' (at pp.c:926)
  Typedef: name='__nesc_nxbase_nx_float', quals=[], storage=['typedef'] (at pp.c:926)
    TypeDecl: declname='__nesc_nxbase_nx_float', quals=[] (at pp.c:926)
      IdentifierType: names=['float'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:928)
    Enum: name='__nesc_unnamed4258' (at pp.c:928)
      EnumeratorList:  (at pp.c:929)
        Enumerator: name='TOS_SLEEP_NONE' (at pp.c:929)
          ID: name='MSP430_POWER_ACTIVE' (at pp.c:929)
  Decl: name='TOSH_SET_SIMO0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:932)
    FuncDecl: quals=None (at pp.c:932)
      TypeDecl: declname='TOSH_SET_SIMO0_PIN', quals=[] (at pp.c:932)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_CLR_SIMO0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:934)
    FuncDecl: quals=None (at pp.c:934)
      TypeDecl: declname='TOSH_CLR_SIMO0_PIN', quals=[] (at pp.c:934)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_MAKE_SIMO0_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:936)
    FuncDecl: quals=None (at pp.c:936)
      TypeDecl: declname='TOSH_MAKE_SIMO0_OUTPUT', quals=[] (at pp.c:936)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_SET_UCLK0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:937)
    FuncDecl: quals=None (at pp.c:937)
      TypeDecl: declname='TOSH_SET_UCLK0_PIN', quals=[] (at pp.c:937)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_CLR_UCLK0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:939)
    FuncDecl: quals=None (at pp.c:939)
      TypeDecl: declname='TOSH_CLR_UCLK0_PIN', quals=[] (at pp.c:939)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_MAKE_UCLK0_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:941)
    FuncDecl: quals=None (at pp.c:941)
      TypeDecl: declname='TOSH_MAKE_UCLK0_OUTPUT', quals=[] (at pp.c:941)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:943)
    Enum: name='__nesc_unnamed4259' (at pp.c:943)
      EnumeratorList:  (at pp.c:945)
        Enumerator: name='TOSH_HUMIDITY_ADDR' (at pp.c:945)
          Constant: type='int', value='5' (at pp.c:945)
        Enumerator: name='TOSH_HUMIDTEMP_ADDR' (at pp.c:946)
          Constant: type='int', value='3' (at pp.c:946)
        Enumerator: name='TOSH_HUMIDITY_RESET' (at pp.c:947)
          Constant: type='int', value='0x1E' (at pp.c:947)
  Decl: name='TOSH_SET_FLASH_CS_PIN', quals=[], storage=['inline', 'static'] (at pp.c:952)
    FuncDecl: quals=None (at pp.c:952)
      TypeDecl: declname='TOSH_SET_FLASH_CS_PIN', quals=[] (at pp.c:952)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_CLR_FLASH_CS_PIN', quals=[], storage=['inline', 'static'] (at pp.c:954)
    FuncDecl: quals=None (at pp.c:954)
      TypeDecl: declname='TOSH_CLR_FLASH_CS_PIN', quals=[] (at pp.c:954)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:956)
    FuncDecl: quals=None (at pp.c:956)
      TypeDecl: declname='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[] (at pp.c:956)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_SET_FLASH_HOLD_PIN', quals=[], storage=['inline', 'static'] (at pp.c:957)
    FuncDecl: quals=None (at pp.c:957)
      TypeDecl: declname='TOSH_SET_FLASH_HOLD_PIN', quals=[] (at pp.c:957)
        IdentifierType: names=['void'] (at None)
  Decl: name='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:959)
    FuncDecl: quals=None (at pp.c:959)
      TypeDecl: declname='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[] (at pp.c:959)
        IdentifierType: names=['void'] (at None)
  Typedef: name='volume_id_t', quals=[], storage=['typedef'] (at pp.c:961)
    TypeDecl: declname='volume_id_t', quals=[] (at pp.c:961)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='storage_addr_t', quals=[], storage=['typedef'] (at pp.c:962)
    TypeDecl: declname='storage_addr_t', quals=[] (at pp.c:962)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='storage_len_t', quals=[], storage=['typedef'] (at pp.c:963)
    TypeDecl: declname='storage_len_t', quals=[] (at pp.c:963)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='storage_cookie_t', quals=[], storage=['typedef'] (at pp.c:964)
    TypeDecl: declname='storage_cookie_t', quals=[] (at pp.c:964)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:966)
    Enum: name='__nesc_unnamed4260' (at pp.c:966)
      EnumeratorList:  (at pp.c:967)
        Enumerator: name='SEEK_BEGINNING' (at pp.c:967)
          Constant: type='int', value='0' (at pp.c:967)
  Typedef: name='stm25p_addr_t', quals=[], storage=['typedef'] (at pp.c:970)
    TypeDecl: declname='stm25p_addr_t', quals=[] (at pp.c:970)
      IdentifierType: names=['storage_addr_t'] (at None)
  Typedef: name='stm25p_len_t', quals=[], storage=['typedef'] (at pp.c:971)
    TypeDecl: declname='stm25p_len_t', quals=[] (at pp.c:971)
      IdentifierType: names=['storage_len_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:973)
    Enum: name='__nesc_unnamed4261' (at pp.c:973)
      EnumeratorList:  (at pp.c:974)
        Enumerator: name='STM25P_NUM_SECTORS' (at pp.c:974)
          Constant: type='int', value='16' (at pp.c:974)
        Enumerator: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:975)
          Constant: type='int', value='16' (at pp.c:975)
        Enumerator: name='STM25P_SECTOR_SIZE' (at pp.c:976)
          BinaryOp: op='<<' (at pp.c:976)
            Constant: type='int', value='1L' (at pp.c:976)
            ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:976)
        Enumerator: name='STM25P_SECTOR_MASK' (at pp.c:977)
          Constant: type='int', value='0xffff' (at pp.c:977)
        Enumerator: name='STM25P_PAGE_SIZE_LOG2' (at pp.c:978)
          Constant: type='int', value='8' (at pp.c:978)
        Enumerator: name='STM25P_PAGE_SIZE' (at pp.c:979)
          BinaryOp: op='<<' (at pp.c:979)
            Constant: type='int', value='1' (at pp.c:979)
            ID: name='STM25P_PAGE_SIZE_LOG2' (at pp.c:979)
        Enumerator: name='STM25P_PAGE_MASK' (at pp.c:980)
          BinaryOp: op='-' (at pp.c:980)
            ID: name='STM25P_PAGE_SIZE' (at pp.c:980)
            Constant: type='int', value='1' (at pp.c:980)
        Enumerator: name='STM25P_INVALID_ADDRESS' (at pp.c:981)
          Constant: type='int', value='0xffffffff' (at pp.c:981)
  Typedef: name='stm25p_volume_info_t', quals=[], storage=['typedef'] (at pp.c:991)
    TypeDecl: declname='stm25p_volume_info_t', quals=[] (at pp.c:991)
      Struct: name='stm25p_volume_info_t', packed=False (at pp.c:988)
        Decl: name='base', quals=[], storage=[] (at 0)
          TypeDecl: declname='base', quals=[] (at pp.c:989)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='size', quals=[], storage=[] (at 0)
          TypeDecl: declname='size', quals=[] (at pp.c:990)
            IdentifierType: names=['uint8_t'] (at None)
  Decl: name='STM25P_VMAP', quals=['const'], storage=['static'] (at pp.c:993)
    ArrayDecl:  (at pp.c:993)
      TypeDecl: declname='STM25P_VMAP', quals=['const'] (at pp.c:993)
        IdentifierType: names=['stm25p_volume_info_t'] (at None)
      Constant: type='int', value='1' (at pp.c:993)
    ExprList:  (at pp.c:994)
      ExprList:  (at pp.c:994)
        Assignment: op='=' (at pp.c:994)
          StructRef: type='.' (at pp.c:994)
            ID: name='base' (at pp.c:994)
          Constant: type='int', value='0' (at pp.c:994)
        Assignment: op='=' (at pp.c:994)
          StructRef: type='.' (at pp.c:994)
            ID: name='size' (at pp.c:994)
          Constant: type='int', value='12' (at pp.c:994)
  Typedef: name='cc2420_status_t', quals=[], storage=['typedef'] (at pp.c:996)
    TypeDecl: declname='cc2420_status_t', quals=[] (at pp.c:996)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='security_header_t', quals=[], storage=['typedef'] (at pp.c:1005)
    TypeDecl: declname='security_header_t', quals=[] (at pp.c:1005)
      Struct: name='security_header_t', packed=False (at pp.c:999)
        Decl: name='__nesc_filler0', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1000)
            TypeDecl: declname='__nesc_filler0', quals=[] (at pp.c:1000)
              IdentifierType: names=['char', 'unsigned'] (at None)
            Constant: type='int', value='1' (at pp.c:1000)
        Decl: name='frameCounter', quals=[], storage=[] (at 0)
          TypeDecl: declname='frameCounter', quals=[] (at pp.c:1003)
            IdentifierType: names=['nx_uint32_t'] (at None)
        Decl: name='keyID', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1004)
            TypeDecl: declname='keyID', quals=[] (at pp.c:1004)
              IdentifierType: names=['nx_uint8_t'] (at None)
            Constant: type='int', value='1' (at pp.c:1004)
  Typedef: name='cc2420_header_t', quals=[], storage=['typedef'] (at pp.c:1026)
    TypeDecl: declname='cc2420_header_t', quals=[] (at pp.c:1026)
      Struct: name='cc2420_header_t', packed=False (at pp.c:1008)
        Decl: name='length', quals=[], storage=[] (at 0)
          TypeDecl: declname='length', quals=[] (at pp.c:1009)
            IdentifierType: names=['nxle_uint8_t'] (at None)
        Decl: name='fcf', quals=[], storage=[] (at 0)
          TypeDecl: declname='fcf', quals=[] (at pp.c:1010)
            IdentifierType: names=['nxle_uint16_t'] (at None)
        Decl: name='dsn', quals=[], storage=[] (at 0)
          TypeDecl: declname='dsn', quals=[] (at pp.c:1011)
            IdentifierType: names=['nxle_uint8_t'] (at None)
        Decl: name='destpan', quals=[], storage=[] (at 0)
          TypeDecl: declname='destpan', quals=[] (at pp.c:1012)
            IdentifierType: names=['nxle_uint16_t'] (at None)
        Decl: name='dest', quals=[], storage=[] (at 0)
          TypeDecl: declname='dest', quals=[] (at pp.c:1013)
            IdentifierType: names=['nxle_uint16_t'] (at None)
        Decl: name='src', quals=[], storage=[] (at 0)
          TypeDecl: declname='src', quals=[] (at pp.c:1014)
            IdentifierType: names=['nxle_uint16_t'] (at None)
        Decl: name='network', quals=[], storage=[] (at 0)
          TypeDecl: declname='network', quals=[] (at pp.c:1022)
            IdentifierType: names=['nxle_uint8_t'] (at None)
        Decl: name='type', quals=[], storage=[] (at 0)
          TypeDecl: declname='type', quals=[] (at pp.c:1025)
            IdentifierType: names=['nxle_uint8_t'] (at None)
  Typedef: name='cc2420_footer_t', quals=[], storage=['typedef'] (at pp.c:1034)
    TypeDecl: declname='cc2420_footer_t', quals=[] (at pp.c:1034)
      Struct: name='cc2420_footer_t', packed=False (at pp.c:1033)
  Typedef: name='cc2420_metadata_t', quals=[], storage=['typedef'] (at pp.c:1052)
    TypeDecl: declname='cc2420_metadata_t', quals=[] (at pp.c:1052)
      Struct: name='cc2420_metadata_t', packed=False (at pp.c:1037)
        Decl: name='rssi', quals=[], storage=[] (at 0)
          TypeDecl: declname='rssi', quals=[] (at pp.c:1038)
            IdentifierType: names=['nx_uint8_t'] (at None)
        Decl: name='lqi', quals=[], storage=[] (at 0)
          TypeDecl: declname='lqi', quals=[] (at pp.c:1039)
            IdentifierType: names=['nx_uint8_t'] (at None)
        Decl: name='tx_power', quals=[], storage=[] (at 0)
          TypeDecl: declname='tx_power', quals=[] (at pp.c:1040)
            IdentifierType: names=['nx_uint8_t'] (at None)
        Decl: name='crc', quals=[], storage=[] (at 0)
          TypeDecl: declname='crc', quals=[] (at pp.c:1041)
            IdentifierType: names=['nx_bool'] (at None)
        Decl: name='ack', quals=[], storage=[] (at 0)
          TypeDecl: declname='ack', quals=[] (at pp.c:1042)
            IdentifierType: names=['nx_bool'] (at None)
        Decl: name='timesync', quals=[], storage=[] (at 0)
          TypeDecl: declname='timesync', quals=[] (at pp.c:1043)
            IdentifierType: names=['nx_bool'] (at None)
        Decl: name='timestamp', quals=[], storage=[] (at 0)
          TypeDecl: declname='timestamp', quals=[] (at pp.c:1044)
            IdentifierType: names=['nx_uint32_t'] (at None)
        Decl: name='rxInterval', quals=[], storage=[] (at 0)
          TypeDecl: declname='rxInterval', quals=[] (at pp.c:1045)
            IdentifierType: names=['nx_uint16_t'] (at None)
  Typedef: name='cc2420_packet_t', quals=[], storage=['typedef'] (at pp.c:1062)
    TypeDecl: declname='cc2420_packet_t', quals=[] (at pp.c:1062)
      Struct: name='cc2420_packet_t', packed=False (at pp.c:1059)
        Decl: name='packet', quals=[], storage=[] (at 0)
          TypeDecl: declname='packet', quals=[] (at pp.c:1060)
            IdentifierType: names=['cc2420_header_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1061)
            TypeDecl: declname='data', quals=[] (at pp.c:1061)
              IdentifierType: names=['nx_uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1064)
    Enum: name='__nesc_unnamed4262' (at pp.c:1064)
      EnumeratorList:  (at pp.c:1066)
        Enumerator: name='MAC_HEADER_SIZE' (at pp.c:1066)
          BinaryOp: op='-' (at pp.c:1066)
            UnaryOp: op='sizeof' (at pp.c:1066)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['cc2420_header_t'] (at None)
            Constant: type='int', value='1' (at pp.c:1066)
        Enumerator: name='MAC_FOOTER_SIZE' (at pp.c:1068)
          UnaryOp: op='sizeof' (at pp.c:1068)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint16_t'] (at None)
        Enumerator: name='MAC_PACKET_SIZE' (at pp.c:1070)
          BinaryOp: op='+' (at pp.c:1070)
            BinaryOp: op='+' (at pp.c:1070)
              ID: name='MAC_HEADER_SIZE' (at pp.c:1070)
              Constant: type='int', value='28' (at pp.c:1070)
            ID: name='MAC_FOOTER_SIZE' (at pp.c:1070)
        Enumerator: name='CC2420_SIZE' (at pp.c:1072)
          BinaryOp: op='+' (at pp.c:1072)
            ID: name='MAC_HEADER_SIZE' (at pp.c:1072)
            ID: name='MAC_FOOTER_SIZE' (at pp.c:1072)
  Decl: name=None, quals=[], storage=[] (at pp.c:1075)
    Enum: name='cc2420_enums' (at pp.c:1075)
      EnumeratorList:  (at pp.c:1076)
        Enumerator: name='CC2420_TIME_ACK_TURNAROUND' (at pp.c:1076)
          Constant: type='int', value='7' (at pp.c:1076)
        Enumerator: name='CC2420_TIME_VREN' (at pp.c:1077)
          Constant: type='int', value='20' (at pp.c:1077)
        Enumerator: name='CC2420_TIME_SYMBOL' (at pp.c:1078)
          Constant: type='int', value='2' (at pp.c:1078)
        Enumerator: name='CC2420_BACKOFF_PERIOD' (at pp.c:1079)
          BinaryOp: op='/' (at pp.c:1079)
            Constant: type='int', value='20' (at pp.c:1079)
            ID: name='CC2420_TIME_SYMBOL' (at pp.c:1079)
        Enumerator: name='CC2420_MIN_BACKOFF' (at pp.c:1080)
          BinaryOp: op='/' (at pp.c:1080)
            Constant: type='int', value='20' (at pp.c:1080)
            ID: name='CC2420_TIME_SYMBOL' (at pp.c:1080)
        Enumerator: name='CC2420_ACK_WAIT_DELAY' (at pp.c:1081)
          Constant: type='int', value='256' (at pp.c:1081)
  Decl: name=None, quals=[], storage=[] (at pp.c:1084)
    Enum: name='cc2420_status_enums' (at pp.c:1084)
      EnumeratorList:  (at pp.c:1085)
        Enumerator: name='CC2420_STATUS_RSSI_VALID' (at pp.c:1085)
          BinaryOp: op='<<' (at pp.c:1085)
            Constant: type='int', value='1' (at pp.c:1085)
            Constant: type='int', value='1' (at pp.c:1085)
        Enumerator: name='CC2420_STATUS_LOCK' (at pp.c:1086)
          BinaryOp: op='<<' (at pp.c:1086)
            Constant: type='int', value='1' (at pp.c:1086)
            Constant: type='int', value='2' (at pp.c:1086)
        Enumerator: name='CC2420_STATUS_TX_ACTIVE' (at pp.c:1087)
          BinaryOp: op='<<' (at pp.c:1087)
            Constant: type='int', value='1' (at pp.c:1087)
            Constant: type='int', value='3' (at pp.c:1087)
        Enumerator: name='CC2420_STATUS_ENC_BUSY' (at pp.c:1088)
          BinaryOp: op='<<' (at pp.c:1088)
            Constant: type='int', value='1' (at pp.c:1088)
            Constant: type='int', value='4' (at pp.c:1088)
        Enumerator: name='CC2420_STATUS_TX_UNDERFLOW' (at pp.c:1089)
          BinaryOp: op='<<' (at pp.c:1089)
            Constant: type='int', value='1' (at pp.c:1089)
            Constant: type='int', value='5' (at pp.c:1089)
        Enumerator: name='CC2420_STATUS_XOSC16M_STABLE' (at pp.c:1090)
          BinaryOp: op='<<' (at pp.c:1090)
            Constant: type='int', value='1' (at pp.c:1090)
            Constant: type='int', value='6' (at pp.c:1090)
  Decl: name=None, quals=[], storage=[] (at pp.c:1093)
    Enum: name='cc2420_config_reg_enums' (at pp.c:1093)
      EnumeratorList:  (at pp.c:1094)
        Enumerator: name='CC2420_SNOP' (at pp.c:1094)
          Constant: type='int', value='0x00' (at pp.c:1094)
        Enumerator: name='CC2420_SXOSCON' (at pp.c:1095)
          Constant: type='int', value='0x01' (at pp.c:1095)
        Enumerator: name='CC2420_STXCAL' (at pp.c:1096)
          Constant: type='int', value='0x02' (at pp.c:1096)
        Enumerator: name='CC2420_SRXON' (at pp.c:1097)
          Constant: type='int', value='0x03' (at pp.c:1097)
        Enumerator: name='CC2420_STXON' (at pp.c:1098)
          Constant: type='int', value='0x04' (at pp.c:1098)
        Enumerator: name='CC2420_STXONCCA' (at pp.c:1099)
          Constant: type='int', value='0x05' (at pp.c:1099)
        Enumerator: name='CC2420_SRFOFF' (at pp.c:1100)
          Constant: type='int', value='0x06' (at pp.c:1100)
        Enumerator: name='CC2420_SXOSCOFF' (at pp.c:1101)
          Constant: type='int', value='0x07' (at pp.c:1101)
        Enumerator: name='CC2420_SFLUSHRX' (at pp.c:1102)
          Constant: type='int', value='0x08' (at pp.c:1102)
        Enumerator: name='CC2420_SFLUSHTX' (at pp.c:1103)
          Constant: type='int', value='0x09' (at pp.c:1103)
        Enumerator: name='CC2420_SACK' (at pp.c:1104)
          Constant: type='int', value='0x0a' (at pp.c:1104)
        Enumerator: name='CC2420_SACKPEND' (at pp.c:1105)
          Constant: type='int', value='0x0b' (at pp.c:1105)
        Enumerator: name='CC2420_SRXDEC' (at pp.c:1106)
          Constant: type='int', value='0x0c' (at pp.c:1106)
        Enumerator: name='CC2420_STXENC' (at pp.c:1107)
          Constant: type='int', value='0x0d' (at pp.c:1107)
        Enumerator: name='CC2420_SAES' (at pp.c:1108)
          Constant: type='int', value='0x0e' (at pp.c:1108)
        Enumerator: name='CC2420_MAIN' (at pp.c:1109)
          Constant: type='int', value='0x10' (at pp.c:1109)
        Enumerator: name='CC2420_MDMCTRL0' (at pp.c:1110)
          Constant: type='int', value='0x11' (at pp.c:1110)
        Enumerator: name='CC2420_MDMCTRL1' (at pp.c:1111)
          Constant: type='int', value='0x12' (at pp.c:1111)
        Enumerator: name='CC2420_RSSI' (at pp.c:1112)
          Constant: type='int', value='0x13' (at pp.c:1112)
        Enumerator: name='CC2420_SYNCWORD' (at pp.c:1113)
          Constant: type='int', value='0x14' (at pp.c:1113)
        Enumerator: name='CC2420_TXCTRL' (at pp.c:1114)
          Constant: type='int', value='0x15' (at pp.c:1114)
        Enumerator: name='CC2420_RXCTRL0' (at pp.c:1115)
          Constant: type='int', value='0x16' (at pp.c:1115)
        Enumerator: name='CC2420_RXCTRL1' (at pp.c:1116)
          Constant: type='int', value='0x17' (at pp.c:1116)
        Enumerator: name='CC2420_FSCTRL' (at pp.c:1117)
          Constant: type='int', value='0x18' (at pp.c:1117)
        Enumerator: name='CC2420_SECCTRL0' (at pp.c:1118)
          Constant: type='int', value='0x19' (at pp.c:1118)
        Enumerator: name='CC2420_SECCTRL1' (at pp.c:1119)
          Constant: type='int', value='0x1a' (at pp.c:1119)
        Enumerator: name='CC2420_BATTMON' (at pp.c:1120)
          Constant: type='int', value='0x1b' (at pp.c:1120)
        Enumerator: name='CC2420_IOCFG0' (at pp.c:1121)
          Constant: type='int', value='0x1c' (at pp.c:1121)
        Enumerator: name='CC2420_IOCFG1' (at pp.c:1122)
          Constant: type='int', value='0x1d' (at pp.c:1122)
        Enumerator: name='CC2420_MANFIDL' (at pp.c:1123)
          Constant: type='int', value='0x1e' (at pp.c:1123)
        Enumerator: name='CC2420_MANFIDH' (at pp.c:1124)
          Constant: type='int', value='0x1f' (at pp.c:1124)
        Enumerator: name='CC2420_FSMTC' (at pp.c:1125)
          Constant: type='int', value='0x20' (at pp.c:1125)
        Enumerator: name='CC2420_MANAND' (at pp.c:1126)
          Constant: type='int', value='0x21' (at pp.c:1126)
        Enumerator: name='CC2420_MANOR' (at pp.c:1127)
          Constant: type='int', value='0x22' (at pp.c:1127)
        Enumerator: name='CC2420_AGCCTRL' (at pp.c:1128)
          Constant: type='int', value='0x23' (at pp.c:1128)
        Enumerator: name='CC2420_AGCTST0' (at pp.c:1129)
          Constant: type='int', value='0x24' (at pp.c:1129)
        Enumerator: name='CC2420_AGCTST1' (at pp.c:1130)
          Constant: type='int', value='0x25' (at pp.c:1130)
        Enumerator: name='CC2420_AGCTST2' (at pp.c:1131)
          Constant: type='int', value='0x26' (at pp.c:1131)
        Enumerator: name='CC2420_FSTST0' (at pp.c:1132)
          Constant: type='int', value='0x27' (at pp.c:1132)
        Enumerator: name='CC2420_FSTST1' (at pp.c:1133)
          Constant: type='int', value='0x28' (at pp.c:1133)
        Enumerator: name='CC2420_FSTST2' (at pp.c:1134)
          Constant: type='int', value='0x29' (at pp.c:1134)
        Enumerator: name='CC2420_FSTST3' (at pp.c:1135)
          Constant: type='int', value='0x2a' (at pp.c:1135)
        Enumerator: name='CC2420_RXBPFTST' (at pp.c:1136)
          Constant: type='int', value='0x2b' (at pp.c:1136)
        Enumerator: name='CC2420_FMSTATE' (at pp.c:1137)
          Constant: type='int', value='0x2c' (at pp.c:1137)
        Enumerator: name='CC2420_ADCTST' (at pp.c:1138)
          Constant: type='int', value='0x2d' (at pp.c:1138)
        Enumerator: name='CC2420_DACTST' (at pp.c:1139)
          Constant: type='int', value='0x2e' (at pp.c:1139)
        Enumerator: name='CC2420_TOPTST' (at pp.c:1140)
          Constant: type='int', value='0x2f' (at pp.c:1140)
        Enumerator: name='CC2420_TXFIFO' (at pp.c:1141)
          Constant: type='int', value='0x3e' (at pp.c:1141)
        Enumerator: name='CC2420_RXFIFO' (at pp.c:1142)
          Constant: type='int', value='0x3f' (at pp.c:1142)
  Decl: name=None, quals=[], storage=[] (at pp.c:1145)
    Enum: name='cc2420_ram_addr_enums' (at pp.c:1145)
      EnumeratorList:  (at pp.c:1146)
        Enumerator: name='CC2420_RAM_TXFIFO' (at pp.c:1146)
          Constant: type='int', value='0x000' (at pp.c:1146)
        Enumerator: name='CC2420_RAM_RXFIFO' (at pp.c:1147)
          Constant: type='int', value='0x080' (at pp.c:1147)
        Enumerator: name='CC2420_RAM_KEY0' (at pp.c:1148)
          Constant: type='int', value='0x100' (at pp.c:1148)
        Enumerator: name='CC2420_RAM_RXNONCE' (at pp.c:1149)
          Constant: type='int', value='0x110' (at pp.c:1149)
        Enumerator: name='CC2420_RAM_SABUF' (at pp.c:1150)
          Constant: type='int', value='0x120' (at pp.c:1150)
        Enumerator: name='CC2420_RAM_KEY1' (at pp.c:1151)
          Constant: type='int', value='0x130' (at pp.c:1151)
        Enumerator: name='CC2420_RAM_TXNONCE' (at pp.c:1152)
          Constant: type='int', value='0x140' (at pp.c:1152)
        Enumerator: name='CC2420_RAM_CBCSTATE' (at pp.c:1153)
          Constant: type='int', value='0x150' (at pp.c:1153)
        Enumerator: name='CC2420_RAM_IEEEADR' (at pp.c:1154)
          Constant: type='int', value='0x160' (at pp.c:1154)
        Enumerator: name='CC2420_RAM_PANID' (at pp.c:1155)
          Constant: type='int', value='0x168' (at pp.c:1155)
        Enumerator: name='CC2420_RAM_SHORTADR' (at pp.c:1156)
          Constant: type='int', value='0x16a' (at pp.c:1156)
  Decl: name=None, quals=[], storage=[] (at pp.c:1159)
    Enum: name='cc2420_nonce_enums' (at pp.c:1159)
      EnumeratorList:  (at pp.c:1160)
        Enumerator: name='CC2420_NONCE_BLOCK_COUNTER' (at pp.c:1160)
          Constant: type='int', value='0' (at pp.c:1160)
        Enumerator: name='CC2420_NONCE_KEY_SEQ_COUNTER' (at pp.c:1161)
          Constant: type='int', value='2' (at pp.c:1161)
        Enumerator: name='CC2420_NONCE_FRAME_COUNTER' (at pp.c:1162)
          Constant: type='int', value='3' (at pp.c:1162)
        Enumerator: name='CC2420_NONCE_SOURCE_ADDRESS' (at pp.c:1163)
          Constant: type='int', value='7' (at pp.c:1163)
        Enumerator: name='CC2420_NONCE_FLAGS' (at pp.c:1164)
          Constant: type='int', value='15' (at pp.c:1164)
  Decl: name=None, quals=[], storage=[] (at pp.c:1167)
    Enum: name='cc2420_main_enums' (at pp.c:1167)
      EnumeratorList:  (at pp.c:1168)
        Enumerator: name='CC2420_MAIN_RESETn' (at pp.c:1168)
          Constant: type='int', value='15' (at pp.c:1168)
        Enumerator: name='CC2420_MAIN_ENC_RESETn' (at pp.c:1169)
          Constant: type='int', value='14' (at pp.c:1169)
        Enumerator: name='CC2420_MAIN_DEMOD_RESETn' (at pp.c:1170)
          Constant: type='int', value='13' (at pp.c:1170)
        Enumerator: name='CC2420_MAIN_MOD_RESETn' (at pp.c:1171)
          Constant: type='int', value='12' (at pp.c:1171)
        Enumerator: name='CC2420_MAIN_FS_RESETn' (at pp.c:1172)
          Constant: type='int', value='11' (at pp.c:1172)
        Enumerator: name='CC2420_MAIN_XOSC16M_BYPASS' (at pp.c:1173)
          Constant: type='int', value='0' (at pp.c:1173)
  Decl: name=None, quals=[], storage=[] (at pp.c:1176)
    Enum: name='cc2420_mdmctrl0_enums' (at pp.c:1176)
      EnumeratorList:  (at pp.c:1177)
        Enumerator: name='CC2420_MDMCTRL0_RESERVED_FRAME_MODE' (at pp.c:1177)
          Constant: type='int', value='13' (at pp.c:1177)
        Enumerator: name='CC2420_MDMCTRL0_PAN_COORDINATOR' (at pp.c:1178)
          Constant: type='int', value='12' (at pp.c:1178)
        Enumerator: name='CC2420_MDMCTRL0_ADR_DECODE' (at pp.c:1179)
          Constant: type='int', value='11' (at pp.c:1179)
        Enumerator: name='CC2420_MDMCTRL0_CCA_HYST' (at pp.c:1180)
          Constant: type='int', value='8' (at pp.c:1180)
        Enumerator: name='CC2420_MDMCTRL0_CCA_MOD' (at pp.c:1181)
          Constant: type='int', value='6' (at pp.c:1181)
        Enumerator: name='CC2420_MDMCTRL0_AUTOCRC' (at pp.c:1182)
          Constant: type='int', value='5' (at pp.c:1182)
        Enumerator: name='CC2420_MDMCTRL0_AUTOACK' (at pp.c:1183)
          Constant: type='int', value='4' (at pp.c:1183)
        Enumerator: name='CC2420_MDMCTRL0_PREAMBLE_LENGTH' (at pp.c:1184)
          Constant: type='int', value='0' (at pp.c:1184)
  Decl: name=None, quals=[], storage=[] (at pp.c:1187)
    Enum: name='cc2420_mdmctrl1_enums' (at pp.c:1187)
      EnumeratorList:  (at pp.c:1188)
        Enumerator: name='CC2420_MDMCTRL1_CORR_THR' (at pp.c:1188)
          Constant: type='int', value='6' (at pp.c:1188)
        Enumerator: name='CC2420_MDMCTRL1_DEMOD_AVG_MODE' (at pp.c:1189)
          Constant: type='int', value='5' (at pp.c:1189)
        Enumerator: name='CC2420_MDMCTRL1_MODULATION_MODE' (at pp.c:1190)
          Constant: type='int', value='4' (at pp.c:1190)
        Enumerator: name='CC2420_MDMCTRL1_TX_MODE' (at pp.c:1191)
          Constant: type='int', value='2' (at pp.c:1191)
        Enumerator: name='CC2420_MDMCTRL1_RX_MODE' (at pp.c:1192)
          Constant: type='int', value='0' (at pp.c:1192)
  Decl: name=None, quals=[], storage=[] (at pp.c:1195)
    Enum: name='cc2420_rssi_enums' (at pp.c:1195)
      EnumeratorList:  (at pp.c:1196)
        Enumerator: name='CC2420_RSSI_CCA_THR' (at pp.c:1196)
          Constant: type='int', value='8' (at pp.c:1196)
        Enumerator: name='CC2420_RSSI_RSSI_VAL' (at pp.c:1197)
          Constant: type='int', value='0' (at pp.c:1197)
  Decl: name=None, quals=[], storage=[] (at pp.c:1200)
    Enum: name='cc2420_syncword_enums' (at pp.c:1200)
      EnumeratorList:  (at pp.c:1201)
        Enumerator: name='CC2420_SYNCWORD_SYNCWORD' (at pp.c:1201)
          Constant: type='int', value='0' (at pp.c:1201)
  Decl: name=None, quals=[], storage=[] (at pp.c:1204)
    Enum: name='cc2420_txctrl_enums' (at pp.c:1204)
      EnumeratorList:  (at pp.c:1205)
        Enumerator: name='CC2420_TXCTRL_TXMIXBUF_CUR' (at pp.c:1205)
          Constant: type='int', value='14' (at pp.c:1205)
        Enumerator: name='CC2420_TXCTRL_TX_TURNAROUND' (at pp.c:1206)
          Constant: type='int', value='13' (at pp.c:1206)
        Enumerator: name='CC2420_TXCTRL_TXMIX_CAP_ARRAY' (at pp.c:1207)
          Constant: type='int', value='11' (at pp.c:1207)
        Enumerator: name='CC2420_TXCTRL_TXMIX_CURRENT' (at pp.c:1208)
          Constant: type='int', value='9' (at pp.c:1208)
        Enumerator: name='CC2420_TXCTRL_PA_CURRENT' (at pp.c:1209)
          Constant: type='int', value='6' (at pp.c:1209)
        Enumerator: name='CC2420_TXCTRL_RESERVED' (at pp.c:1210)
          Constant: type='int', value='5' (at pp.c:1210)
        Enumerator: name='CC2420_TXCTRL_PA_LEVEL' (at pp.c:1211)
          Constant: type='int', value='0' (at pp.c:1211)
  Decl: name=None, quals=[], storage=[] (at pp.c:1214)
    Enum: name='cc2420_rxctrl0_enums' (at pp.c:1214)
      EnumeratorList:  (at pp.c:1215)
        Enumerator: name='CC2420_RXCTRL0_RXMIXBUF_CUR' (at pp.c:1215)
          Constant: type='int', value='12' (at pp.c:1215)
        Enumerator: name='CC2420_RXCTRL0_HIGH_LNA_GAIN' (at pp.c:1216)
          Constant: type='int', value='10' (at pp.c:1216)
        Enumerator: name='CC2420_RXCTRL0_MED_LNA_GAIN' (at pp.c:1217)
          Constant: type='int', value='8' (at pp.c:1217)
        Enumerator: name='CC2420_RXCTRL0_LOW_LNA_GAIN' (at pp.c:1218)
          Constant: type='int', value='6' (at pp.c:1218)
        Enumerator: name='CC2420_RXCTRL0_HIGH_LNA_CURRENT' (at pp.c:1219)
          Constant: type='int', value='4' (at pp.c:1219)
        Enumerator: name='CC2420_RXCTRL0_MED_LNA_CURRENT' (at pp.c:1220)
          Constant: type='int', value='2' (at pp.c:1220)
        Enumerator: name='CC2420_RXCTRL0_LOW_LNA_CURRENT' (at pp.c:1221)
          Constant: type='int', value='0' (at pp.c:1221)
  Decl: name=None, quals=[], storage=[] (at pp.c:1224)
    Enum: name='cc2420_rxctrl1_enums' (at pp.c:1224)
      EnumeratorList:  (at pp.c:1225)
        Enumerator: name='CC2420_RXCTRL1_RXBPF_LOCUR' (at pp.c:1225)
          Constant: type='int', value='13' (at pp.c:1225)
        Enumerator: name='CC2420_RXCTRL1_RXBPF_MIDCUR' (at pp.c:1226)
          Constant: type='int', value='12' (at pp.c:1226)
        Enumerator: name='CC2420_RXCTRL1_LOW_LOWGAIN' (at pp.c:1227)
          Constant: type='int', value='11' (at pp.c:1227)
        Enumerator: name='CC2420_RXCTRL1_MED_LOWGAIN' (at pp.c:1228)
          Constant: type='int', value='10' (at pp.c:1228)
        Enumerator: name='CC2420_RXCTRL1_HIGH_HGM' (at pp.c:1229)
          Constant: type='int', value='9' (at pp.c:1229)
        Enumerator: name='CC2420_RXCTRL1_MED_HGM' (at pp.c:1230)
          Constant: type='int', value='8' (at pp.c:1230)
        Enumerator: name='CC2420_RXCTRL1_LNA_CAP_ARRAY' (at pp.c:1231)
          Constant: type='int', value='6' (at pp.c:1231)
        Enumerator: name='CC2420_RXCTRL1_RXMIX_TAIL' (at pp.c:1232)
          Constant: type='int', value='4' (at pp.c:1232)
        Enumerator: name='CC2420_RXCTRL1_RXMIX_VCM' (at pp.c:1233)
          Constant: type='int', value='2' (at pp.c:1233)
        Enumerator: name='CC2420_RXCTRL1_RXMIX_CURRENT' (at pp.c:1234)
          Constant: type='int', value='0' (at pp.c:1234)
  Decl: name=None, quals=[], storage=[] (at pp.c:1237)
    Enum: name='cc2420_rsctrl_enums' (at pp.c:1237)
      EnumeratorList:  (at pp.c:1238)
        Enumerator: name='CC2420_FSCTRL_LOCK_THR' (at pp.c:1238)
          Constant: type='int', value='14' (at pp.c:1238)
        Enumerator: name='CC2420_FSCTRL_CAL_DONE' (at pp.c:1239)
          Constant: type='int', value='13' (at pp.c:1239)
        Enumerator: name='CC2420_FSCTRL_CAL_RUNNING' (at pp.c:1240)
          Constant: type='int', value='12' (at pp.c:1240)
        Enumerator: name='CC2420_FSCTRL_LOCK_LENGTH' (at pp.c:1241)
          Constant: type='int', value='11' (at pp.c:1241)
        Enumerator: name='CC2420_FSCTRL_LOCK_STATUS' (at pp.c:1242)
          Constant: type='int', value='10' (at pp.c:1242)
        Enumerator: name='CC2420_FSCTRL_FREQ' (at pp.c:1243)
          Constant: type='int', value='0' (at pp.c:1243)
  Decl: name=None, quals=[], storage=[] (at pp.c:1246)
    Enum: name='cc2420_secctrl0_enums' (at pp.c:1246)
      EnumeratorList:  (at pp.c:1247)
        Enumerator: name='CC2420_SECCTRL0_RXFIFO_PROTECTION' (at pp.c:1247)
          Constant: type='int', value='9' (at pp.c:1247)
        Enumerator: name='CC2420_SECCTRL0_SEC_CBC_HEAD' (at pp.c:1248)
          Constant: type='int', value='8' (at pp.c:1248)
        Enumerator: name='CC2420_SECCTRL0_SEC_SAKEYSEL' (at pp.c:1249)
          Constant: type='int', value='7' (at pp.c:1249)
        Enumerator: name='CC2420_SECCTRL0_SEC_TXKEYSEL' (at pp.c:1250)
          Constant: type='int', value='6' (at pp.c:1250)
        Enumerator: name='CC2420_SECCTRL0_SEC_RXKEYSEL' (at pp.c:1251)
          Constant: type='int', value='5' (at pp.c:1251)
        Enumerator: name='CC2420_SECCTRL0_SEC_M' (at pp.c:1252)
          Constant: type='int', value='2' (at pp.c:1252)
        Enumerator: name='CC2420_SECCTRL0_SEC_MODE' (at pp.c:1253)
          Constant: type='int', value='0' (at pp.c:1253)
  Decl: name=None, quals=[], storage=[] (at pp.c:1256)
    Enum: name='cc2420_secctrl1_enums' (at pp.c:1256)
      EnumeratorList:  (at pp.c:1257)
        Enumerator: name='CC2420_SECCTRL1_SEC_TXL' (at pp.c:1257)
          Constant: type='int', value='8' (at pp.c:1257)
        Enumerator: name='CC2420_SECCTRL1_SEC_RXL' (at pp.c:1258)
          Constant: type='int', value='0' (at pp.c:1258)
  Decl: name=None, quals=[], storage=[] (at pp.c:1261)
    Enum: name='cc2420_battmon_enums' (at pp.c:1261)
      EnumeratorList:  (at pp.c:1262)
        Enumerator: name='CC2420_BATTMON_BATT_OK' (at pp.c:1262)
          Constant: type='int', value='6' (at pp.c:1262)
        Enumerator: name='CC2420_BATTMON_BATTMON_EN' (at pp.c:1263)
          Constant: type='int', value='5' (at pp.c:1263)
        Enumerator: name='CC2420_BATTMON_BATTMON_VOLTAGE' (at pp.c:1264)
          Constant: type='int', value='0' (at pp.c:1264)
  Decl: name=None, quals=[], storage=[] (at pp.c:1267)
    Enum: name='cc2420_iocfg0_enums' (at pp.c:1267)
      EnumeratorList:  (at pp.c:1268)
        Enumerator: name='CC2420_IOCFG0_BCN_ACCEPT' (at pp.c:1268)
          Constant: type='int', value='11' (at pp.c:1268)
        Enumerator: name='CC2420_IOCFG0_FIFO_POLARITY' (at pp.c:1269)
          Constant: type='int', value='10' (at pp.c:1269)
        Enumerator: name='CC2420_IOCFG0_FIFOP_POLARITY' (at pp.c:1270)
          Constant: type='int', value='9' (at pp.c:1270)
        Enumerator: name='CC2420_IOCFG0_SFD_POLARITY' (at pp.c:1271)
          Constant: type='int', value='8' (at pp.c:1271)
        Enumerator: name='CC2420_IOCFG0_CCA_POLARITY' (at pp.c:1272)
          Constant: type='int', value='7' (at pp.c:1272)
        Enumerator: name='CC2420_IOCFG0_FIFOP_THR' (at pp.c:1273)
          Constant: type='int', value='0' (at pp.c:1273)
  Decl: name=None, quals=[], storage=[] (at pp.c:1276)
    Enum: name='cc2420_iocfg1_enums' (at pp.c:1276)
      EnumeratorList:  (at pp.c:1277)
        Enumerator: name='CC2420_IOCFG1_HSSD_SRC' (at pp.c:1277)
          Constant: type='int', value='10' (at pp.c:1277)
        Enumerator: name='CC2420_IOCFG1_SFDMUX' (at pp.c:1278)
          Constant: type='int', value='5' (at pp.c:1278)
        Enumerator: name='CC2420_IOCFG1_CCAMUX' (at pp.c:1279)
          Constant: type='int', value='0' (at pp.c:1279)
  Decl: name=None, quals=[], storage=[] (at pp.c:1282)
    Enum: name='cc2420_manfidl_enums' (at pp.c:1282)
      EnumeratorList:  (at pp.c:1283)
        Enumerator: name='CC2420_MANFIDL_PARTNUM' (at pp.c:1283)
          Constant: type='int', value='12' (at pp.c:1283)
        Enumerator: name='CC2420_MANFIDL_MANFID' (at pp.c:1284)
          Constant: type='int', value='0' (at pp.c:1284)
  Decl: name=None, quals=[], storage=[] (at pp.c:1287)
    Enum: name='cc2420_manfidh_enums' (at pp.c:1287)
      EnumeratorList:  (at pp.c:1288)
        Enumerator: name='CC2420_MANFIDH_VERSION' (at pp.c:1288)
          Constant: type='int', value='12' (at pp.c:1288)
        Enumerator: name='CC2420_MANFIDH_PARTNUM' (at pp.c:1289)
          Constant: type='int', value='0' (at pp.c:1289)
  Decl: name=None, quals=[], storage=[] (at pp.c:1292)
    Enum: name='cc2420_fsmtc_enums' (at pp.c:1292)
      EnumeratorList:  (at pp.c:1293)
        Enumerator: name='CC2420_FSMTC_TC_RXCHAIN2RX' (at pp.c:1293)
          Constant: type='int', value='13' (at pp.c:1293)
        Enumerator: name='CC2420_FSMTC_TC_SWITCH2TX' (at pp.c:1294)
          Constant: type='int', value='10' (at pp.c:1294)
        Enumerator: name='CC2420_FSMTC_TC_PAON2TX' (at pp.c:1295)
          Constant: type='int', value='6' (at pp.c:1295)
        Enumerator: name='CC2420_FSMTC_TC_TXEND2SWITCH' (at pp.c:1296)
          Constant: type='int', value='3' (at pp.c:1296)
        Enumerator: name='CC2420_FSMTC_TC_TXEND2PAOFF' (at pp.c:1297)
          Constant: type='int', value='0' (at pp.c:1297)
  Decl: name=None, quals=[], storage=[] (at pp.c:1300)
    Enum: name='cc2420_sfdmux_enums' (at pp.c:1300)
      EnumeratorList:  (at pp.c:1301)
        Enumerator: name='CC2420_SFDMUX_SFD' (at pp.c:1301)
          Constant: type='int', value='0' (at pp.c:1301)
        Enumerator: name='CC2420_SFDMUX_XOSC16M_STABLE' (at pp.c:1302)
          Constant: type='int', value='24' (at pp.c:1302)
  Decl: name=None, quals=[], storage=[] (at pp.c:1305)
    Enum: name='cc2420_security_enums' (at pp.c:1305)
      EnumeratorList:  (at pp.c:1306)
        Enumerator: name='CC2420_NO_SEC' (at pp.c:1306)
          Constant: type='int', value='0' (at pp.c:1306)
        Enumerator: name='CC2420_CBC_MAC' (at pp.c:1307)
          Constant: type='int', value='1' (at pp.c:1307)
        Enumerator: name='CC2420_CTR' (at pp.c:1308)
          Constant: type='int', value='2' (at pp.c:1308)
        Enumerator: name='CC2420_CCM' (at pp.c:1309)
          Constant: type='int', value='3' (at pp.c:1309)
        Enumerator: name='NO_SEC' (at pp.c:1310)
          Constant: type='int', value='0' (at pp.c:1310)
        Enumerator: name='CBC_MAC_4' (at pp.c:1311)
          Constant: type='int', value='1' (at pp.c:1311)
        Enumerator: name='CBC_MAC_8' (at pp.c:1312)
          Constant: type='int', value='2' (at pp.c:1312)
        Enumerator: name='CBC_MAC_16' (at pp.c:1313)
          Constant: type='int', value='3' (at pp.c:1313)
        Enumerator: name='CTR' (at pp.c:1314)
          Constant: type='int', value='4' (at pp.c:1314)
        Enumerator: name='CCM_4' (at pp.c:1315)
          Constant: type='int', value='5' (at pp.c:1315)
        Enumerator: name='CCM_8' (at pp.c:1316)
          Constant: type='int', value='6' (at pp.c:1316)
        Enumerator: name='CCM_16' (at pp.c:1317)
          Constant: type='int', value='7' (at pp.c:1317)
  Decl: name=None, quals=[], storage=[] (at pp.c:1321)
    Enum: name='__nesc_unnamed4263' (at pp.c:1321)
      EnumeratorList:  (at pp.c:1323)
        Enumerator: name='CC2420_INVALID_TIMESTAMP' (at pp.c:1323)
          Constant: type='int', value='0x80000000L' (at pp.c:1323)
  Typedef: name='nx_am_id_t', quals=[], storage=['typedef'] (at pp.c:1326)
    TypeDecl: declname='nx_am_id_t', quals=[] (at pp.c:1326)
      IdentifierType: names=['nx_uint8_t'] (at None)
  Typedef: name='nx_am_group_t', quals=[], storage=['typedef'] (at pp.c:1327)
    TypeDecl: declname='nx_am_group_t', quals=[] (at pp.c:1327)
      IdentifierType: names=['nx_uint8_t'] (at None)
  Typedef: name='nx_am_addr_t', quals=[], storage=['typedef'] (at pp.c:1328)
    TypeDecl: declname='nx_am_addr_t', quals=[] (at pp.c:1328)
      IdentifierType: names=['nx_uint16_t'] (at None)
  Typedef: name='am_id_t', quals=[], storage=['typedef'] (at pp.c:1330)
    TypeDecl: declname='am_id_t', quals=[] (at pp.c:1330)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='am_group_t', quals=[], storage=['typedef'] (at pp.c:1331)
    TypeDecl: declname='am_group_t', quals=[] (at pp.c:1331)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='am_addr_t', quals=[], storage=['typedef'] (at pp.c:1332)
    TypeDecl: declname='am_addr_t', quals=[] (at pp.c:1332)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1334)
    Enum: name='__nesc_unnamed4264' (at pp.c:1334)
      EnumeratorList:  (at pp.c:1335)
        Enumerator: name='AM_BROADCAST_ADDR' (at pp.c:1335)
          Constant: type='int', value='0xffff' (at pp.c:1335)
  Decl: name=None, quals=[], storage=[] (at pp.c:1346)
    Enum: name='__nesc_unnamed4265' (at pp.c:1346)
      EnumeratorList:  (at pp.c:1347)
        Enumerator: name='TOS_AM_GROUP' (at pp.c:1347)
          Constant: type='int', value='0x22' (at pp.c:1347)
        Enumerator: name='TOS_AM_ADDRESS' (at pp.c:1348)
          Constant: type='int', value='1' (at pp.c:1348)
  Typedef: name='uart_id_t', quals=[], storage=['typedef'] (at pp.c:1351)
    TypeDecl: declname='uart_id_t', quals=[] (at pp.c:1351)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1355)
    Enum: name='__nesc_unnamed4266' (at pp.c:1355)
      EnumeratorList:  (at pp.c:1356)
        Enumerator: name='HDLC_FLAG_BYTE' (at pp.c:1356)
          Constant: type='int', value='0x7e' (at pp.c:1356)
        Enumerator: name='HDLC_CTLESC_BYTE' (at pp.c:1357)
          Constant: type='int', value='0x7d' (at pp.c:1357)
  Decl: name=None, quals=[], storage=[] (at pp.c:1362)
    Enum: name='__nesc_unnamed4267' (at pp.c:1362)
      EnumeratorList:  (at pp.c:1363)
        Enumerator: name='TOS_SERIAL_ACTIVE_MESSAGE_ID' (at pp.c:1363)
          Constant: type='int', value='0' (at pp.c:1363)
        Enumerator: name='TOS_SERIAL_CC1000_ID' (at pp.c:1364)
          Constant: type='int', value='1' (at pp.c:1364)
        Enumerator: name='TOS_SERIAL_802_15_4_ID' (at pp.c:1365)
          Constant: type='int', value='2' (at pp.c:1365)
        Enumerator: name='TOS_SERIAL_UNKNOWN_ID' (at pp.c:1366)
          Constant: type='int', value='255' (at pp.c:1366)
  Decl: name=None, quals=[], storage=[] (at pp.c:1370)
    Enum: name='__nesc_unnamed4268' (at pp.c:1370)
      EnumeratorList:  (at pp.c:1371)
        Enumerator: name='SERIAL_PROTO_ACK' (at pp.c:1371)
          Constant: type='int', value='67' (at pp.c:1371)
        Enumerator: name='SERIAL_PROTO_PACKET_ACK' (at pp.c:1372)
          Constant: type='int', value='68' (at pp.c:1372)
        Enumerator: name='SERIAL_PROTO_PACKET_NOACK' (at pp.c:1373)
          Constant: type='int', value='69' (at pp.c:1373)
        Enumerator: name='SERIAL_PROTO_PACKET_UNKNOWN' (at pp.c:1374)
          Constant: type='int', value='255' (at pp.c:1374)
  Typedef: name='radio_stats_t', quals=[], storage=['typedef'] (at pp.c:1390)
    TypeDecl: declname='radio_stats_t', quals=[] (at pp.c:1390)
      Struct: name='radio_stats', packed=False (at pp.c:1378)
        Decl: name='version', quals=[], storage=[] (at 0)
          TypeDecl: declname='version', quals=[] (at pp.c:1379)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='flags', quals=[], storage=[] (at 0)
          TypeDecl: declname='flags', quals=[] (at pp.c:1380)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='reserved', quals=[], storage=[] (at 0)
          TypeDecl: declname='reserved', quals=[] (at pp.c:1381)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='platform', quals=[], storage=[] (at 0)
          TypeDecl: declname='platform', quals=[] (at pp.c:1382)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='MTU', quals=[], storage=[] (at 0)
          TypeDecl: declname='MTU', quals=[] (at pp.c:1383)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='radio_crc_fail', quals=[], storage=[] (at 0)
          TypeDecl: declname='radio_crc_fail', quals=[] (at pp.c:1384)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='radio_queue_drops', quals=[], storage=[] (at 0)
          TypeDecl: declname='radio_queue_drops', quals=[] (at pp.c:1385)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='serial_crc_fail', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial_crc_fail', quals=[] (at pp.c:1386)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='serial_tx_fail', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial_tx_fail', quals=[] (at pp.c:1387)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='serial_short_packets', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial_short_packets', quals=[] (at pp.c:1388)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='serial_proto_drops', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial_proto_drops', quals=[] (at pp.c:1389)
            IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='serial_header_t', quals=[], storage=['typedef'] (at pp.c:1405)
    TypeDecl: declname='serial_header_t', quals=[] (at pp.c:1405)
      Struct: name='serial_header', packed=False (at pp.c:1399)
        Decl: name='dest', quals=[], storage=[] (at 0)
          TypeDecl: declname='dest', quals=[] (at pp.c:1400)
            IdentifierType: names=['nx_am_addr_t'] (at None)
        Decl: name='src', quals=[], storage=[] (at 0)
          TypeDecl: declname='src', quals=[] (at pp.c:1401)
            IdentifierType: names=['nx_am_addr_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at 0)
          TypeDecl: declname='length', quals=[] (at pp.c:1402)
            IdentifierType: names=['nx_uint8_t'] (at None)
        Decl: name='group', quals=[], storage=[] (at 0)
          TypeDecl: declname='group', quals=[] (at pp.c:1403)
            IdentifierType: names=['nx_am_group_t'] (at None)
        Decl: name='type', quals=[], storage=[] (at 0)
          TypeDecl: declname='type', quals=[] (at pp.c:1404)
            IdentifierType: names=['nx_am_id_t'] (at None)
  Typedef: name='serial_packet_t', quals=[], storage=['typedef'] (at pp.c:1414)
    TypeDecl: declname='serial_packet_t', quals=[] (at pp.c:1414)
      Struct: name='serial_packet', packed=False (at pp.c:1411)
        Decl: name='header', quals=[], storage=[] (at 0)
          TypeDecl: declname='header', quals=[] (at pp.c:1412)
            IdentifierType: names=['serial_header_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1413)
            TypeDecl: declname='data', quals=[] (at pp.c:1413)
              IdentifierType: names=['nx_uint8_t'] (at None)
  Typedef: name='serial_metadata_t', quals=[], storage=['typedef'] (at pp.c:1421)
    TypeDecl: declname='serial_metadata_t', quals=[] (at pp.c:1421)
      Struct: name='serial_metadata', packed=False (at pp.c:1419)
        Decl: name='ack', quals=[], storage=[] (at 0)
          TypeDecl: declname='ack', quals=[] (at pp.c:1420)
            IdentifierType: names=['nx_uint8_t'] (at None)
  Typedef: name='message_header_t', quals=[], storage=['typedef'] (at pp.c:1427)
    TypeDecl: declname='message_header_t', quals=[] (at pp.c:1427)
      Union: name='message_header', packed=False (at pp.c:1424)
        Decl: name='cc2420', quals=[], storage=[] (at 0)
          TypeDecl: declname='cc2420', quals=[] (at pp.c:1425)
            IdentifierType: names=['cc2420_header_t'] (at None)
        Decl: name='serial', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial', quals=[] (at pp.c:1426)
            IdentifierType: names=['serial_header_t'] (at None)
  Typedef: name='message_footer_t', quals=[], storage=['typedef'] (at pp.c:1434)
    TypeDecl: declname='message_footer_t', quals=[] (at pp.c:1434)
      Union: name='TOSRadioFooter', packed=False (at pp.c:1432)
        Decl: name='cc2420', quals=[], storage=[] (at 0)
          TypeDecl: declname='cc2420', quals=[] (at pp.c:1433)
            IdentifierType: names=['cc2420_footer_t'] (at None)
  Typedef: name='message_metadata_t', quals=[], storage=['typedef'] (at pp.c:1443)
    TypeDecl: declname='message_metadata_t', quals=[] (at pp.c:1443)
      Union: name='TOSRadioMetadata', packed=False (at pp.c:1440)
        Decl: name='cc2420', quals=[], storage=[] (at 0)
          TypeDecl: declname='cc2420', quals=[] (at pp.c:1441)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
        Decl: name='serial', quals=[], storage=[] (at 0)
          TypeDecl: declname='serial', quals=[] (at pp.c:1442)
            IdentifierType: names=['serial_metadata_t'] (at None)
  Typedef: name='message_t', quals=[], storage=['typedef'] (at pp.c:1451)
    TypeDecl: declname='message_t', quals=[] (at pp.c:1451)
      Struct: name='message_t', packed=False (at pp.c:1446)
        Decl: name='header', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1447)
            TypeDecl: declname='header', quals=[] (at pp.c:1447)
              IdentifierType: names=['nx_uint8_t'] (at None)
            UnaryOp: op='sizeof' (at pp.c:1447)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['message_header_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1448)
            TypeDecl: declname='data', quals=[] (at pp.c:1448)
              IdentifierType: names=['nx_uint8_t'] (at None)
            Constant: type='int', value='28' (at pp.c:1448)
        Decl: name='footer', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1449)
            TypeDecl: declname='footer', quals=[] (at pp.c:1449)
              IdentifierType: names=['nx_uint8_t'] (at None)
            UnaryOp: op='sizeof' (at pp.c:1449)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['message_footer_t'] (at None)
        Decl: name='metadata', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1450)
            TypeDecl: declname='metadata', quals=[] (at pp.c:1450)
              IdentifierType: names=['nx_uint8_t'] (at None)
            UnaryOp: op='sizeof' (at pp.c:1450)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['message_metadata_t'] (at None)
  Typedef: name='sensor_sample_t', quals=[], storage=['typedef'] (at pp.c:1457)
    TypeDecl: declname='sensor_sample_t', quals=[] (at pp.c:1457)
      Struct: name='sensor_sample', packed=False (at pp.c:1454)
        Decl: name='sample_num', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample_num', quals=[] (at pp.c:1455)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='sin_value', quals=[], storage=[] (at 0)
          TypeDecl: declname='sin_value', quals=[] (at pp.c:1456)
            IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='nx_sensor_sample_t', quals=[], storage=['typedef'] (at pp.c:1466)
    TypeDecl: declname='nx_sensor_sample_t', quals=[] (at pp.c:1466)
      Struct: name='nx_sensor_sample', packed=False (at pp.c:1463)
        Decl: name='sample_num', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample_num', quals=[] (at pp.c:1464)
            IdentifierType: names=['nx_uint32_t'] (at None)
        Decl: name='sin_value', quals=[], storage=[] (at 0)
          TypeDecl: declname='sin_value', quals=[] (at pp.c:1465)
            IdentifierType: names=['nx_uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1468)
    Enum: name='__nesc_unnamed4269' (at pp.c:1468)
      EnumeratorList:  (at pp.c:1469)
        Enumerator: name='AM_SERIAL_REQUEST_SAMPLES_MSG' (at pp.c:1469)
          Constant: type='int', value='0x92' (at pp.c:1469)
        Enumerator: name='AM_REQUEST_SAMPLES_MSG' (at pp.c:1470)
          Constant: type='int', value='0x93' (at pp.c:1470)
        Enumerator: name='AM_SAMPLE_MSG' (at pp.c:1472)
          Constant: type='int', value='0x98' (at pp.c:1472)
        Enumerator: name='AM_SERIAL_SAMPLE_MSG' (at pp.c:1473)
          Constant: type='int', value='0x99' (at pp.c:1473)
  Typedef: name='serial_request_samples_msg_t', quals=[], storage=['typedef'] (at pp.c:1483)
    TypeDecl: declname='serial_request_samples_msg_t', quals=[] (at pp.c:1483)
      Struct: name='serial_request_samples_msg', packed=False (at pp.c:1480)
        Decl: name='addr', quals=[], storage=[] (at 0)
          TypeDecl: declname='addr', quals=[] (at pp.c:1481)
            IdentifierType: names=['nx_am_addr_t'] (at None)
        Decl: name='sample_num', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample_num', quals=[] (at pp.c:1482)
            IdentifierType: names=['nx_uint32_t'] (at None)
  Typedef: name='request_samples_msg_t', quals=[], storage=['typedef'] (at pp.c:1488)
    TypeDecl: declname='request_samples_msg_t', quals=[] (at pp.c:1488)
      Struct: name='request_samples_msg', packed=False (at pp.c:1487)
  Typedef: name='sample_msg_t', quals=[], storage=['typedef'] (at pp.c:1495)
    TypeDecl: declname='sample_msg_t', quals=[] (at pp.c:1495)
      Struct: name='sample_msg', packed=False (at pp.c:1493)
        Decl: name='sample', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample', quals=[] (at pp.c:1494)
            IdentifierType: names=['nx_sensor_sample_t'] (at None)
  Typedef: name='serial_sample_msg_t', quals=[], storage=['typedef'] (at pp.c:1504)
    TypeDecl: declname='serial_sample_msg_t', quals=[] (at pp.c:1504)
      Struct: name='serial_sample_msg', packed=False (at pp.c:1501)
        Decl: name='src_addr', quals=[], storage=[] (at 0)
          TypeDecl: declname='src_addr', quals=[] (at pp.c:1502)
            IdentifierType: names=['nx_am_addr_t'] (at None)
        Decl: name='sample', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample', quals=[] (at pp.c:1503)
            IdentifierType: names=['nx_sensor_sample_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1506)
    Enum: name='__nesc_unnamed4270' (at pp.c:1506)
      EnumeratorList:  (at pp.c:1507)
        Enumerator: name='LPL_INTERVAL' (at pp.c:1507)
          Constant: type='int', value='2000' (at pp.c:1507)
        Enumerator: name='SAMPLING_INTERVAL' (at pp.c:1508)
          Constant: type='int', value='3000' (at pp.c:1508)
        Enumerator: name='MSG_QUEUE_SIZE' (at pp.c:1509)
          Constant: type='int', value='50' (at pp.c:1509)
        Enumerator: name='BASE_STATION_ADDR' (at pp.c:1510)
          Constant: type='int', value='0' (at pp.c:1510)
  Typedef: name='TMilli', quals=[], storage=['typedef'] (at pp.c:1518)
    TypeDecl: declname='TMilli', quals=[] (at pp.c:1518)
      Struct: name='__nesc_unnamed4271', packed=False (at pp.c:1513)
        Decl: name='notUsed', quals=[], storage=[] (at 0)
          TypeDecl: declname='notUsed', quals=[] (at pp.c:1515)
            IdentifierType: names=['int'] (at None)
  Typedef: name='T32khz', quals=[], storage=['typedef'] (at pp.c:1524)
    TypeDecl: declname='T32khz', quals=[] (at pp.c:1524)
      Struct: name='__nesc_unnamed4272', packed=False (at pp.c:1519)
        Decl: name='notUsed', quals=[], storage=[] (at 0)
          TypeDecl: declname='notUsed', quals=[] (at pp.c:1521)
            IdentifierType: names=['int'] (at None)
  Typedef: name='TMicro', quals=[], storage=['typedef'] (at pp.c:1530)
    TypeDecl: declname='TMicro', quals=[] (at pp.c:1530)
      Struct: name='__nesc_unnamed4273', packed=False (at pp.c:1525)
        Decl: name='notUsed', quals=[], storage=[] (at 0)
          TypeDecl: declname='notUsed', quals=[] (at pp.c:1527)
            IdentifierType: names=['int'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1532)
    Enum: name='__nesc_unnamed4274' (at pp.c:1532)
      EnumeratorList:  (at pp.c:1533)
        Enumerator: name='LEDS_LED0' (at pp.c:1533)
          BinaryOp: op='<<' (at pp.c:1533)
            Constant: type='int', value='1' (at pp.c:1533)
            Constant: type='int', value='0' (at pp.c:1533)
        Enumerator: name='LEDS_LED1' (at pp.c:1534)
          BinaryOp: op='<<' (at pp.c:1534)
            Constant: type='int', value='1' (at pp.c:1534)
            Constant: type='int', value='1' (at pp.c:1534)
        Enumerator: name='LEDS_LED2' (at pp.c:1535)
          BinaryOp: op='<<' (at pp.c:1535)
            Constant: type='int', value='1' (at pp.c:1535)
            Constant: type='int', value='2' (at pp.c:1535)
        Enumerator: name='LEDS_LED3' (at pp.c:1536)
          BinaryOp: op='<<' (at pp.c:1536)
            Constant: type='int', value='1' (at pp.c:1536)
            Constant: type='int', value='3' (at pp.c:1536)
        Enumerator: name='LEDS_LED4' (at pp.c:1537)
          BinaryOp: op='<<' (at pp.c:1537)
            Constant: type='int', value='1' (at pp.c:1537)
            Constant: type='int', value='4' (at pp.c:1537)
        Enumerator: name='LEDS_LED5' (at pp.c:1538)
          BinaryOp: op='<<' (at pp.c:1538)
            Constant: type='int', value='1' (at pp.c:1538)
            Constant: type='int', value='5' (at pp.c:1538)
        Enumerator: name='LEDS_LED6' (at pp.c:1539)
          BinaryOp: op='<<' (at pp.c:1539)
            Constant: type='int', value='1' (at pp.c:1539)
            Constant: type='int', value='6' (at pp.c:1539)
        Enumerator: name='LEDS_LED7' (at pp.c:1540)
          BinaryOp: op='<<' (at pp.c:1540)
            Constant: type='int', value='1' (at pp.c:1540)
            Constant: type='int', value='7' (at pp.c:1540)
  Decl: name=None, quals=[], storage=[] (at pp.c:1543)
    Enum: name='__nesc_unnamed4275' (at pp.c:1543)
      EnumeratorList:  (at pp.c:1544)
        Enumerator: name='MSP430TIMER_CM_NONE' (at pp.c:1544)
          Constant: type='int', value='0' (at pp.c:1544)
        Enumerator: name='MSP430TIMER_CM_RISING' (at pp.c:1545)
          Constant: type='int', value='1' (at pp.c:1545)
        Enumerator: name='MSP430TIMER_CM_FALLING' (at pp.c:1546)
          Constant: type='int', value='2' (at pp.c:1546)
        Enumerator: name='MSP430TIMER_CM_BOTH' (at pp.c:1547)
          Constant: type='int', value='3' (at pp.c:1547)
        Enumerator: name='MSP430TIMER_STOP_MODE' (at pp.c:1549)
          Constant: type='int', value='0' (at pp.c:1549)
        Enumerator: name='MSP430TIMER_UP_MODE' (at pp.c:1550)
          Constant: type='int', value='1' (at pp.c:1550)
        Enumerator: name='MSP430TIMER_CONTINUOUS_MODE' (at pp.c:1551)
          Constant: type='int', value='2' (at pp.c:1551)
        Enumerator: name='MSP430TIMER_UPDOWN_MODE' (at pp.c:1552)
          Constant: type='int', value='3' (at pp.c:1552)
        Enumerator: name='MSP430TIMER_TACLK' (at pp.c:1554)
          Constant: type='int', value='0' (at pp.c:1554)
        Enumerator: name='MSP430TIMER_TBCLK' (at pp.c:1555)
          Constant: type='int', value='0' (at pp.c:1555)
        Enumerator: name='MSP430TIMER_ACLK' (at pp.c:1556)
          Constant: type='int', value='1' (at pp.c:1556)
        Enumerator: name='MSP430TIMER_SMCLK' (at pp.c:1557)
          Constant: type='int', value='2' (at pp.c:1557)
        Enumerator: name='MSP430TIMER_INCLK' (at pp.c:1558)
          Constant: type='int', value='3' (at pp.c:1558)
        Enumerator: name='MSP430TIMER_CLOCKDIV_1' (at pp.c:1560)
          Constant: type='int', value='0' (at pp.c:1560)
        Enumerator: name='MSP430TIMER_CLOCKDIV_2' (at pp.c:1561)
          Constant: type='int', value='1' (at pp.c:1561)
        Enumerator: name='MSP430TIMER_CLOCKDIV_4' (at pp.c:1562)
          Constant: type='int', value='2' (at pp.c:1562)
        Enumerator: name='MSP430TIMER_CLOCKDIV_8' (at pp.c:1563)
          Constant: type='int', value='3' (at pp.c:1563)
  Typedef: name='msp430_compare_control_t', quals=[], storage=['typedef'] (at pp.c:1580)
    TypeDecl: declname='msp430_compare_control_t', quals=[] (at pp.c:1580)
      Struct: name='__nesc_unnamed4276', packed=False (at pp.c:1567)
        Decl: name='ccifg', quals=[], storage=[] (at 0)
          TypeDecl: declname='ccifg', quals=[] (at pp.c:1569)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1569)
        Decl: name='cov', quals=[], storage=[] (at 0)
          TypeDecl: declname='cov', quals=[] (at pp.c:1570)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1570)
        Decl: name='out', quals=[], storage=[] (at 0)
          TypeDecl: declname='out', quals=[] (at pp.c:1571)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1571)
        Decl: name='cci', quals=[], storage=[] (at 0)
          TypeDecl: declname='cci', quals=[] (at pp.c:1572)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1572)
        Decl: name='ccie', quals=[], storage=[] (at 0)
          TypeDecl: declname='ccie', quals=[] (at pp.c:1573)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1573)
        Decl: name='outmod', quals=[], storage=[] (at 0)
          TypeDecl: declname='outmod', quals=[] (at pp.c:1574)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='3' (at pp.c:1574)
        Decl: name='cap', quals=[], storage=[] (at 0)
          TypeDecl: declname='cap', quals=[] (at pp.c:1575)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1575)
        Decl: name='clld', quals=[], storage=[] (at 0)
          TypeDecl: declname='clld', quals=[] (at pp.c:1576)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1576)
        Decl: name='scs', quals=[], storage=[] (at 0)
          TypeDecl: declname='scs', quals=[] (at pp.c:1577)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1577)
        Decl: name='ccis', quals=[], storage=[] (at 0)
          TypeDecl: declname='ccis', quals=[] (at pp.c:1578)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1578)
        Decl: name='cm', quals=[], storage=[] (at 0)
          TypeDecl: declname='cm', quals=[] (at pp.c:1579)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1579)
  Typedef: name='msp430_timer_a_control_t', quals=[], storage=['typedef'] (at pp.c:1593)
    TypeDecl: declname='msp430_timer_a_control_t', quals=[] (at pp.c:1593)
      Struct: name='__nesc_unnamed4277', packed=False (at pp.c:1583)
        Decl: name='taifg', quals=[], storage=[] (at 0)
          TypeDecl: declname='taifg', quals=[] (at pp.c:1585)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1585)
        Decl: name='taie', quals=[], storage=[] (at 0)
          TypeDecl: declname='taie', quals=[] (at pp.c:1586)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1586)
        Decl: name='taclr', quals=[], storage=[] (at 0)
          TypeDecl: declname='taclr', quals=[] (at pp.c:1587)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1587)
        Decl: name='_unused0', quals=[], storage=[] (at 0)
          TypeDecl: declname='_unused0', quals=[] (at pp.c:1588)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1588)
        Decl: name='mc', quals=[], storage=[] (at 0)
          TypeDecl: declname='mc', quals=[] (at pp.c:1589)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1589)
        Decl: name='id', quals=[], storage=[] (at 0)
          TypeDecl: declname='id', quals=[] (at pp.c:1590)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1590)
        Decl: name='tassel', quals=[], storage=[] (at 0)
          TypeDecl: declname='tassel', quals=[] (at pp.c:1591)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1591)
        Decl: name='_unused1', quals=[], storage=[] (at 0)
          TypeDecl: declname='_unused1', quals=[] (at pp.c:1592)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='6' (at pp.c:1592)
  Typedef: name='msp430_timer_b_control_t', quals=[], storage=['typedef'] (at pp.c:1609)
    TypeDecl: declname='msp430_timer_b_control_t', quals=[] (at pp.c:1609)
      Struct: name='__nesc_unnamed4278', packed=False (at pp.c:1596)
        Decl: name='tbifg', quals=[], storage=[] (at 0)
          TypeDecl: declname='tbifg', quals=[] (at pp.c:1598)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1598)
        Decl: name='tbie', quals=[], storage=[] (at 0)
          TypeDecl: declname='tbie', quals=[] (at pp.c:1599)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1599)
        Decl: name='tbclr', quals=[], storage=[] (at 0)
          TypeDecl: declname='tbclr', quals=[] (at pp.c:1600)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1600)
        Decl: name='_unused0', quals=[], storage=[] (at 0)
          TypeDecl: declname='_unused0', quals=[] (at pp.c:1601)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1601)
        Decl: name='mc', quals=[], storage=[] (at 0)
          TypeDecl: declname='mc', quals=[] (at pp.c:1602)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1602)
        Decl: name='id', quals=[], storage=[] (at 0)
          TypeDecl: declname='id', quals=[] (at pp.c:1603)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1603)
        Decl: name='tbssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='tbssel', quals=[] (at pp.c:1604)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1604)
        Decl: name='_unused1', quals=[], storage=[] (at 0)
          TypeDecl: declname='_unused1', quals=[] (at pp.c:1605)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1605)
        Decl: name='cntl', quals=[], storage=[] (at 0)
          TypeDecl: declname='cntl', quals=[] (at pp.c:1606)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1606)
        Decl: name='tbclgrp', quals=[], storage=[] (at 0)
          TypeDecl: declname='tbclgrp', quals=[] (at pp.c:1607)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='2' (at pp.c:1607)
        Decl: name='_unused2', quals=[], storage=[] (at 0)
          TypeDecl: declname='_unused2', quals=[] (at pp.c:1608)
            IdentifierType: names=['int'] (at None)
          Constant: type='int', value='1' (at pp.c:1608)
  Typedef: name='resource_client_id_t', quals=[], storage=['typedef'] (at pp.c:1611)
    TypeDecl: declname='resource_client_id_t', quals=[] (at pp.c:1611)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='crcByte', quals=[], storage=['inline', 'static'] (at pp.c:1613)
    FuncDecl: quals=None (at pp.c:1613)
      ParamList:  (at pp.c:1613)
        Decl: name='crc', quals=[], storage=[] (at pp.c:1613)
          TypeDecl: declname='crc', quals=[] (at pp.c:1613)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='b', quals=[], storage=[] (at pp.c:1613)
          TypeDecl: declname='b', quals=[] (at pp.c:1613)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='crcByte', quals=[] (at pp.c:1613)
        IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='msp430_usartmode_t', quals=[], storage=['typedef'] (at pp.c:1624)
    TypeDecl: declname='msp430_usartmode_t', quals=[] (at pp.c:1624)
      Enum: name='__nesc_unnamed4279' (at pp.c:1616)
        EnumeratorList:  (at pp.c:1618)
          Enumerator: name='USART_NONE' (at pp.c:1618)
            Constant: type='int', value='0' (at pp.c:1618)
          Enumerator: name='USART_UART' (at pp.c:1619)
            Constant: type='int', value='1' (at pp.c:1619)
          Enumerator: name='USART_UART_TX' (at pp.c:1620)
            Constant: type='int', value='2' (at pp.c:1620)
          Enumerator: name='USART_UART_RX' (at pp.c:1621)
            Constant: type='int', value='3' (at pp.c:1621)
          Enumerator: name='USART_SPI' (at pp.c:1622)
            Constant: type='int', value='4' (at pp.c:1622)
          Enumerator: name='USART_I2C' (at pp.c:1623)
            Constant: type='int', value='5' (at pp.c:1623)
  Typedef: name='msp430_uctl_t', quals=[], storage=['typedef'] (at pp.c:1645)
    TypeDecl: declname='msp430_uctl_t', quals=[] (at pp.c:1645)
      Struct: name='__nesc_unnamed4280', packed=True (at pp.c:1636)
        Decl: name='swrst', quals=[], storage=[] (at 0)
          TypeDecl: declname='swrst', quals=[] (at pp.c:1637)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1637)
        Decl: name='mm', quals=[], storage=[] (at 0)
          TypeDecl: declname='mm', quals=[] (at pp.c:1638)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1638)
        Decl: name='sync', quals=[], storage=[] (at 0)
          TypeDecl: declname='sync', quals=[] (at pp.c:1639)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1639)
        Decl: name='listen', quals=[], storage=[] (at 0)
          TypeDecl: declname='listen', quals=[] (at pp.c:1640)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1640)
        Decl: name='clen', quals=[], storage=[] (at 0)
          TypeDecl: declname='clen', quals=[] (at pp.c:1641)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1641)
        Decl: name='spb', quals=[], storage=[] (at 0)
          TypeDecl: declname='spb', quals=[] (at pp.c:1642)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1642)
        Decl: name='pev', quals=[], storage=[] (at 0)
          TypeDecl: declname='pev', quals=[] (at pp.c:1643)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1643)
        Decl: name='pena', quals=[], storage=[] (at 0)
          TypeDecl: declname='pena', quals=[] (at pp.c:1644)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1644)
  Typedef: name='msp430_utctl_t', quals=[], storage=['typedef'] (at pp.c:1664)
    TypeDecl: declname='msp430_utctl_t', quals=[] (at pp.c:1664)
      Struct: name='__nesc_unnamed4281', packed=True (at pp.c:1656)
        Decl: name='txept', quals=[], storage=[] (at 0)
          TypeDecl: declname='txept', quals=[] (at pp.c:1657)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1657)
        Decl: name='stc', quals=[], storage=[] (at 0)
          TypeDecl: declname='stc', quals=[] (at pp.c:1658)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1658)
        Decl: name='txwake', quals=[], storage=[] (at 0)
          TypeDecl: declname='txwake', quals=[] (at pp.c:1659)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1659)
        Decl: name='urxse', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxse', quals=[] (at pp.c:1660)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1660)
        Decl: name='ssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='ssel', quals=[] (at pp.c:1661)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1661)
        Decl: name='ckpl', quals=[], storage=[] (at 0)
          TypeDecl: declname='ckpl', quals=[] (at pp.c:1662)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1662)
        Decl: name='ckph', quals=[], storage=[] (at 0)
          TypeDecl: declname='ckph', quals=[] (at pp.c:1663)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1663)
  Typedef: name='msp430_urctl_t', quals=[], storage=['typedef'] (at pp.c:1685)
    TypeDecl: declname='msp430_urctl_t', quals=[] (at pp.c:1685)
      Struct: name='__nesc_unnamed4282', packed=True (at pp.c:1676)
        Decl: name='rxerr', quals=[], storage=[] (at 0)
          TypeDecl: declname='rxerr', quals=[] (at pp.c:1677)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1677)
        Decl: name='rxwake', quals=[], storage=[] (at 0)
          TypeDecl: declname='rxwake', quals=[] (at pp.c:1678)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1678)
        Decl: name='urxwie', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxwie', quals=[] (at pp.c:1679)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1679)
        Decl: name='urxeie', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxeie', quals=[] (at pp.c:1680)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1680)
        Decl: name='brk', quals=[], storage=[] (at 0)
          TypeDecl: declname='brk', quals=[] (at pp.c:1681)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1681)
        Decl: name='oe', quals=[], storage=[] (at 0)
          TypeDecl: declname='oe', quals=[] (at pp.c:1682)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1682)
        Decl: name='pe', quals=[], storage=[] (at 0)
          TypeDecl: declname='pe', quals=[] (at pp.c:1683)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1683)
        Decl: name='fe', quals=[], storage=[] (at 0)
          TypeDecl: declname='fe', quals=[] (at pp.c:1684)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1684)
  Typedef: name='msp430_spi_config_t', quals=[], storage=['typedef'] (at pp.c:1705)
    TypeDecl: declname='msp430_spi_config_t', quals=[] (at pp.c:1705)
      Struct: name='__nesc_unnamed4283', packed=False (at pp.c:1688)
        Decl: name='ubr', quals=[], storage=[] (at 0)
          TypeDecl: declname='ubr', quals=[] (at pp.c:1689)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='16' (at pp.c:1689)
        Decl: name='wkbof', quals=[], storage=[] (at 0)
          TypeDecl: declname='wkbof', quals=[] (at pp.c:1691)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1691)
        Decl: name='mm', quals=[], storage=[] (at 0)
          TypeDecl: declname='mm', quals=[] (at pp.c:1692)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1692)
        Decl: name='jxyff', quals=[], storage=[] (at 0)
          TypeDecl: declname='jxyff', quals=[] (at pp.c:1693)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1693)
        Decl: name='listen', quals=[], storage=[] (at 0)
          TypeDecl: declname='listen', quals=[] (at pp.c:1694)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1694)
        Decl: name='clen', quals=[], storage=[] (at 0)
          TypeDecl: declname='clen', quals=[] (at pp.c:1695)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1695)
        Decl: name='qirvn', quals=[], storage=[] (at 0)
          TypeDecl: declname='qirvn', quals=[] (at pp.c:1696)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:1696)
        Decl: name='bclaq', quals=[], storage=[] (at 0)
          TypeDecl: declname='bclaq', quals=[] (at pp.c:1698)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1698)
        Decl: name='stc', quals=[], storage=[] (at 0)
          TypeDecl: declname='stc', quals=[] (at pp.c:1699)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1699)
        Decl: name='ifaxl', quals=[], storage=[] (at 0)
          TypeDecl: declname='ifaxl', quals=[] (at pp.c:1700)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1700)
        Decl: name='ssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='ssel', quals=[] (at pp.c:1701)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1701)
        Decl: name='ckpl', quals=[], storage=[] (at 0)
          TypeDecl: declname='ckpl', quals=[] (at pp.c:1702)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1702)
        Decl: name='ckph', quals=[], storage=[] (at 0)
          TypeDecl: declname='ckph', quals=[] (at pp.c:1703)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1703)
        Decl: name='klitj', quals=[], storage=[] (at 0)
          TypeDecl: declname='klitj', quals=[] (at pp.c:1704)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='0' (at pp.c:1704)
  Typedef: name='msp430_spi_registers_t', quals=[], storage=['typedef'] (at pp.c:1716)
    TypeDecl: declname='msp430_spi_registers_t', quals=[] (at pp.c:1716)
      Struct: name='__nesc_unnamed4284', packed=False (at pp.c:1712)
        Decl: name='ubr', quals=[], storage=[] (at 0)
          TypeDecl: declname='ubr', quals=[] (at pp.c:1713)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='uctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='uctl', quals=[] (at pp.c:1714)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='utctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='utctl', quals=[] (at pp.c:1715)
            IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='msp430_spi_union_config_t', quals=[], storage=['typedef'] (at pp.c:1725)
    TypeDecl: declname='msp430_spi_union_config_t', quals=[] (at pp.c:1725)
      Union: name='__nesc_unnamed4285', packed=False (at pp.c:1722)
        Decl: name='spiConfig', quals=[], storage=[] (at 0)
          TypeDecl: declname='spiConfig', quals=[] (at pp.c:1723)
            IdentifierType: names=['msp430_spi_config_t'] (at None)
        Decl: name='spiRegisters', quals=[], storage=[] (at 0)
          TypeDecl: declname='spiRegisters', quals=[] (at pp.c:1724)
            IdentifierType: names=['msp430_spi_registers_t'] (at None)
  Decl: name='msp430_spi_default_config', quals=[], storage=[] (at pp.c:1727)
    TypeDecl: declname='msp430_spi_default_config', quals=[] (at pp.c:1727)
      IdentifierType: names=['msp430_spi_union_config_t'] (at None)
    ExprList:  (at pp.c:1729)
      ExprList:  (at pp.c:1729)
        Assignment: op='=' (at pp.c:1729)
          StructRef: type='.' (at pp.c:1729)
            ID: name='ubr' (at pp.c:1729)
          Constant: type='int', value='0x0002' (at pp.c:1729)
        Assignment: op='=' (at pp.c:1730)
          StructRef: type='.' (at pp.c:1730)
            ID: name='ssel' (at pp.c:1730)
          Constant: type='int', value='0x02' (at pp.c:1730)
        Assignment: op='=' (at pp.c:1731)
          StructRef: type='.' (at pp.c:1731)
            ID: name='clen' (at pp.c:1731)
          Constant: type='int', value='1' (at pp.c:1731)
        Assignment: op='=' (at pp.c:1732)
          StructRef: type='.' (at pp.c:1732)
            ID: name='listen' (at pp.c:1732)
          Constant: type='int', value='0' (at pp.c:1732)
        Assignment: op='=' (at pp.c:1733)
          StructRef: type='.' (at pp.c:1733)
            ID: name='mm' (at pp.c:1733)
          Constant: type='int', value='1' (at pp.c:1733)
        Assignment: op='=' (at pp.c:1734)
          StructRef: type='.' (at pp.c:1734)
            ID: name='ckph' (at pp.c:1734)
          Constant: type='int', value='1' (at pp.c:1734)
        Assignment: op='=' (at pp.c:1735)
          StructRef: type='.' (at pp.c:1735)
            ID: name='ckpl' (at pp.c:1735)
          Constant: type='int', value='0' (at pp.c:1735)
        Assignment: op='=' (at pp.c:1736)
          StructRef: type='.' (at pp.c:1736)
            ID: name='stc' (at pp.c:1736)
          Constant: type='int', value='1' (at pp.c:1736)
  Typedef: name='msp430_uart_rate_t', quals=[], storage=['typedef'] (at pp.c:1758)
    TypeDecl: declname='msp430_uart_rate_t', quals=[] (at pp.c:1758)
      Enum: name='__nesc_unnamed4286' (at pp.c:1739)
        EnumeratorList:  (at pp.c:1741)
          Enumerator: name='UBR_32KHZ_1200' (at pp.c:1741)
            Constant: type='int', value='0x001B' (at pp.c:1741)
          Enumerator: name='UMCTL_32KHZ_1200' (at pp.c:1741)
            Constant: type='int', value='0x94' (at pp.c:1741)
          Enumerator: name='UBR_32KHZ_1800' (at pp.c:1742)
            Constant: type='int', value='0x0012' (at pp.c:1742)
          Enumerator: name='UMCTL_32KHZ_1800' (at pp.c:1742)
            Constant: type='int', value='0x84' (at pp.c:1742)
          Enumerator: name='UBR_32KHZ_2400' (at pp.c:1743)
            Constant: type='int', value='0x000D' (at pp.c:1743)
          Enumerator: name='UMCTL_32KHZ_2400' (at pp.c:1743)
            Constant: type='int', value='0x6D' (at pp.c:1743)
          Enumerator: name='UBR_32KHZ_4800' (at pp.c:1744)
            Constant: type='int', value='0x0006' (at pp.c:1744)
          Enumerator: name='UMCTL_32KHZ_4800' (at pp.c:1744)
            Constant: type='int', value='0x77' (at pp.c:1744)
          Enumerator: name='UBR_32KHZ_9600' (at pp.c:1745)
            Constant: type='int', value='0x0003' (at pp.c:1745)
          Enumerator: name='UMCTL_32KHZ_9600' (at pp.c:1745)
            Constant: type='int', value='0x29' (at pp.c:1745)
          Enumerator: name='UBR_1MHZ_1200' (at pp.c:1747)
            Constant: type='int', value='0x0369' (at pp.c:1747)
          Enumerator: name='UMCTL_1MHZ_1200' (at pp.c:1747)
            Constant: type='int', value='0x7B' (at pp.c:1747)
          Enumerator: name='UBR_1MHZ_1800' (at pp.c:1748)
            Constant: type='int', value='0x0246' (at pp.c:1748)
          Enumerator: name='UMCTL_1MHZ_1800' (at pp.c:1748)
            Constant: type='int', value='0x55' (at pp.c:1748)
          Enumerator: name='UBR_1MHZ_2400' (at pp.c:1749)
            Constant: type='int', value='0x01B4' (at pp.c:1749)
          Enumerator: name='UMCTL_1MHZ_2400' (at pp.c:1749)
            Constant: type='int', value='0xDF' (at pp.c:1749)
          Enumerator: name='UBR_1MHZ_4800' (at pp.c:1750)
            Constant: type='int', value='0x00DA' (at pp.c:1750)
          Enumerator: name='UMCTL_1MHZ_4800' (at pp.c:1750)
            Constant: type='int', value='0xAA' (at pp.c:1750)
          Enumerator: name='UBR_1MHZ_9600' (at pp.c:1751)
            Constant: type='int', value='0x006D' (at pp.c:1751)
          Enumerator: name='UMCTL_1MHZ_9600' (at pp.c:1751)
            Constant: type='int', value='0x44' (at pp.c:1751)
          Enumerator: name='UBR_1MHZ_19200' (at pp.c:1752)
            Constant: type='int', value='0x0036' (at pp.c:1752)
          Enumerator: name='UMCTL_1MHZ_19200' (at pp.c:1752)
            Constant: type='int', value='0xB5' (at pp.c:1752)
          Enumerator: name='UBR_1MHZ_38400' (at pp.c:1753)
            Constant: type='int', value='0x001B' (at pp.c:1753)
          Enumerator: name='UMCTL_1MHZ_38400' (at pp.c:1753)
            Constant: type='int', value='0x94' (at pp.c:1753)
          Enumerator: name='UBR_1MHZ_57600' (at pp.c:1754)
            Constant: type='int', value='0x0012' (at pp.c:1754)
          Enumerator: name='UMCTL_1MHZ_57600' (at pp.c:1754)
            Constant: type='int', value='0x84' (at pp.c:1754)
          Enumerator: name='UBR_1MHZ_76800' (at pp.c:1755)
            Constant: type='int', value='0x000D' (at pp.c:1755)
          Enumerator: name='UMCTL_1MHZ_76800' (at pp.c:1755)
            Constant: type='int', value='0x6D' (at pp.c:1755)
          Enumerator: name='UBR_1MHZ_115200' (at pp.c:1756)
            Constant: type='int', value='0x0009' (at pp.c:1756)
          Enumerator: name='UMCTL_1MHZ_115200' (at pp.c:1756)
            Constant: type='int', value='0x10' (at pp.c:1756)
          Enumerator: name='UBR_1MHZ_230400' (at pp.c:1757)
            Constant: type='int', value='0x0004' (at pp.c:1757)
          Enumerator: name='UMCTL_1MHZ_230400' (at pp.c:1757)
            Constant: type='int', value='0x55' (at pp.c:1757)
  Typedef: name='msp430_uart_config_t', quals=[], storage=['typedef'] (at pp.c:1790)
    TypeDecl: declname='msp430_uart_config_t', quals=[] (at pp.c:1790)
      Struct: name='__nesc_unnamed4287', packed=False (at pp.c:1761)
        Decl: name='ubr', quals=[], storage=[] (at 0)
          TypeDecl: declname='ubr', quals=[] (at pp.c:1762)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='16' (at pp.c:1762)
        Decl: name='umctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='umctl', quals=[] (at pp.c:1764)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='8' (at pp.c:1764)
        Decl: name='gngrv', quals=[], storage=[] (at 0)
          TypeDecl: declname='gngrv', quals=[] (at pp.c:1766)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1766)
        Decl: name='mm', quals=[], storage=[] (at 0)
          TypeDecl: declname='mm', quals=[] (at pp.c:1767)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1767)
        Decl: name='qokro', quals=[], storage=[] (at 0)
          TypeDecl: declname='qokro', quals=[] (at pp.c:1768)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1768)
        Decl: name='listen', quals=[], storage=[] (at 0)
          TypeDecl: declname='listen', quals=[] (at pp.c:1769)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1769)
        Decl: name='clen', quals=[], storage=[] (at 0)
          TypeDecl: declname='clen', quals=[] (at pp.c:1770)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1770)
        Decl: name='spb', quals=[], storage=[] (at 0)
          TypeDecl: declname='spb', quals=[] (at pp.c:1771)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1771)
        Decl: name='pev', quals=[], storage=[] (at 0)
          TypeDecl: declname='pev', quals=[] (at pp.c:1772)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1772)
        Decl: name='pena', quals=[], storage=[] (at 0)
          TypeDecl: declname='pena', quals=[] (at pp.c:1773)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1773)
        Decl: name='ubxba', quals=[], storage=[] (at 0)
          TypeDecl: declname='ubxba', quals=[] (at pp.c:1774)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='0' (at pp.c:1774)
        Decl: name='apubh', quals=[], storage=[] (at 0)
          TypeDecl: declname='apubh', quals=[] (at pp.c:1776)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='3' (at pp.c:1776)
        Decl: name='urxse', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxse', quals=[] (at pp.c:1777)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1777)
        Decl: name='ssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='ssel', quals=[] (at pp.c:1778)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1778)
        Decl: name='ckpl', quals=[], storage=[] (at 0)
          TypeDecl: declname='ckpl', quals=[] (at pp.c:1779)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1779)
        Decl: name='qjxbl', quals=[], storage=[] (at 0)
          TypeDecl: declname='qjxbl', quals=[] (at pp.c:1780)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1780)
        Decl: name='drvla', quals=[], storage=[] (at 0)
          TypeDecl: declname='drvla', quals=[] (at pp.c:1782)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1782)
        Decl: name='urxwie', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxwie', quals=[] (at pp.c:1783)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1783)
        Decl: name='urxeie', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxeie', quals=[] (at pp.c:1784)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1784)
        Decl: name='sezwq', quals=[], storage=[] (at 0)
          TypeDecl: declname='sezwq', quals=[] (at pp.c:1785)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:1785)
        Decl: name='ukyzp', quals=[], storage=[] (at 0)
          TypeDecl: declname='ukyzp', quals=[] (at pp.c:1786)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='0' (at pp.c:1786)
        Decl: name='utxe', quals=[], storage=[] (at 0)
          TypeDecl: declname='utxe', quals=[] (at pp.c:1788)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1788)
        Decl: name='urxe', quals=[], storage=[] (at 0)
          TypeDecl: declname='urxe', quals=[] (at pp.c:1789)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1789)
  Typedef: name='msp430_uart_registers_t', quals=[], storage=['typedef'] (at pp.c:1807)
    TypeDecl: declname='msp430_uart_registers_t', quals=[] (at pp.c:1807)
      Struct: name='__nesc_unnamed4288', packed=False (at pp.c:1800)
        Decl: name='ubr', quals=[], storage=[] (at 0)
          TypeDecl: declname='ubr', quals=[] (at pp.c:1801)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='umctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='umctl', quals=[] (at pp.c:1802)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='uctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='uctl', quals=[] (at pp.c:1803)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='utctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='utctl', quals=[] (at pp.c:1804)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='urctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='urctl', quals=[] (at pp.c:1805)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='ume', quals=[], storage=[] (at 0)
          TypeDecl: declname='ume', quals=[] (at pp.c:1806)
            IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='msp430_uart_union_config_t', quals=[], storage=['typedef'] (at pp.c:1816)
    TypeDecl: declname='msp430_uart_union_config_t', quals=[] (at pp.c:1816)
      Union: name='__nesc_unnamed4289', packed=False (at pp.c:1813)
        Decl: name='uartConfig', quals=[], storage=[] (at 0)
          TypeDecl: declname='uartConfig', quals=[] (at pp.c:1814)
            IdentifierType: names=['msp430_uart_config_t'] (at None)
        Decl: name='uartRegisters', quals=[], storage=[] (at 0)
          TypeDecl: declname='uartRegisters', quals=[] (at pp.c:1815)
            IdentifierType: names=['msp430_uart_registers_t'] (at None)
  Typedef: name='msp430_i2ctctl_t', quals=[], storage=['typedef'] (at pp.c:1827)
    TypeDecl: declname='msp430_i2ctctl_t', quals=[] (at pp.c:1827)
      Struct: name='__nesc_unnamed4290', packed=True (at pp.c:1819)
        Decl: name='i2cstt', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cstt', quals=[] (at pp.c:1820)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1820)
        Decl: name='i2cstp', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cstp', quals=[] (at pp.c:1821)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1821)
        Decl: name='i2cstb', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cstb', quals=[] (at pp.c:1822)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1822)
        Decl: name='i2cctrx', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cctrx', quals=[] (at pp.c:1823)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1823)
        Decl: name='i2cssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cssel', quals=[] (at pp.c:1824)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1824)
        Decl: name='i2ccrm', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2ccrm', quals=[] (at pp.c:1825)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1825)
        Decl: name='i2cword', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cword', quals=[] (at pp.c:1826)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1826)
  Typedef: name='msp430_i2c_config_t', quals=[], storage=['typedef'] (at pp.c:1853)
    TypeDecl: declname='msp430_i2c_config_t', quals=[] (at pp.c:1853)
      Struct: name='__nesc_unnamed4291', packed=False (at pp.c:1830)
        Decl: name='oupho', quals=[], storage=[] (at 0)
          TypeDecl: declname='oupho', quals=[] (at pp.c:1831)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1831)
        Decl: name='mst', quals=[], storage=[] (at 0)
          TypeDecl: declname='mst', quals=[] (at pp.c:1832)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1832)
        Decl: name='onsae', quals=[], storage=[] (at 0)
          TypeDecl: declname='onsae', quals=[] (at pp.c:1833)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1833)
        Decl: name='listen', quals=[], storage=[] (at 0)
          TypeDecl: declname='listen', quals=[] (at pp.c:1834)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1834)
        Decl: name='xa', quals=[], storage=[] (at 0)
          TypeDecl: declname='xa', quals=[] (at pp.c:1835)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1835)
        Decl: name='nwiat', quals=[], storage=[] (at 0)
          TypeDecl: declname='nwiat', quals=[] (at pp.c:1836)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1836)
        Decl: name='txdmaen', quals=[], storage=[] (at 0)
          TypeDecl: declname='txdmaen', quals=[] (at pp.c:1837)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1837)
        Decl: name='rxdmaen', quals=[], storage=[] (at 0)
          TypeDecl: declname='rxdmaen', quals=[] (at pp.c:1838)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1838)
        Decl: name='evgdk', quals=[], storage=[] (at 0)
          TypeDecl: declname='evgdk', quals=[] (at pp.c:1840)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='4' (at pp.c:1840)
        Decl: name='i2cssel', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cssel', quals=[] (at pp.c:1841)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='2' (at pp.c:1841)
        Decl: name='i2crm', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2crm', quals=[] (at pp.c:1842)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1842)
        Decl: name='i2cword', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cword', quals=[] (at pp.c:1843)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='1' (at pp.c:1843)
        Decl: name='i2cpsc', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cpsc', quals=[] (at pp.c:1845)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='8' (at pp.c:1845)
        Decl: name='i2csclh', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2csclh', quals=[] (at pp.c:1847)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='8' (at pp.c:1847)
        Decl: name='i2cscll', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cscll', quals=[] (at pp.c:1849)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='8' (at pp.c:1849)
        Decl: name='i2coa', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2coa', quals=[] (at pp.c:1851)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='10' (at pp.c:1851)
        Decl: name='rkitg', quals=[], storage=[] (at 0)
          TypeDecl: declname='rkitg', quals=[] (at pp.c:1852)
            IdentifierType: names=['int', 'unsigned'] (at None)
          Constant: type='int', value='6' (at pp.c:1852)
  Typedef: name='msp430_i2c_registers_t', quals=[], storage=['typedef'] (at pp.c:1870)
    TypeDecl: declname='msp430_i2c_registers_t', quals=[] (at pp.c:1870)
      Struct: name='__nesc_unnamed4292', packed=False (at pp.c:1863)
        Decl: name='uctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='uctl', quals=[] (at pp.c:1864)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='i2ctctl', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2ctctl', quals=[] (at pp.c:1865)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='i2cpsc', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cpsc', quals=[] (at pp.c:1866)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='i2csclh', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2csclh', quals=[] (at pp.c:1867)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='i2cscll', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cscll', quals=[] (at pp.c:1868)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='i2coa', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2coa', quals=[] (at pp.c:1869)
            IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='msp430_i2c_union_config_t', quals=[], storage=['typedef'] (at pp.c:1879)
    TypeDecl: declname='msp430_i2c_union_config_t', quals=[] (at pp.c:1879)
      Union: name='__nesc_unnamed4293', packed=False (at pp.c:1876)
        Decl: name='i2cConfig', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cConfig', quals=[] (at pp.c:1877)
            IdentifierType: names=['msp430_i2c_config_t'] (at None)
        Decl: name='i2cRegisters', quals=[], storage=[] (at 0)
          TypeDecl: declname='i2cRegisters', quals=[] (at pp.c:1878)
            IdentifierType: names=['msp430_i2c_registers_t'] (at None)
  Typedef: name='uart_speed_t', quals=[], storage=['typedef'] (at pp.c:1881)
    TypeDecl: declname='uart_speed_t', quals=[] (at pp.c:1881)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='uart_parity_t', quals=[], storage=['typedef'] (at pp.c:1882)
    TypeDecl: declname='uart_parity_t', quals=[] (at pp.c:1882)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='uart_duplex_t', quals=[], storage=['typedef'] (at pp.c:1883)
    TypeDecl: declname='uart_duplex_t', quals=[] (at pp.c:1883)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1885)
    Enum: name='__nesc_unnamed4294' (at pp.c:1885)
      EnumeratorList:  (at pp.c:1886)
        Enumerator: name='TOS_UART_1200' (at pp.c:1886)
          Constant: type='int', value='0' (at pp.c:1886)
        Enumerator: name='TOS_UART_1800' (at pp.c:1887)
          Constant: type='int', value='1' (at pp.c:1887)
        Enumerator: name='TOS_UART_2400' (at pp.c:1888)
          Constant: type='int', value='2' (at pp.c:1888)
        Enumerator: name='TOS_UART_4800' (at pp.c:1889)
          Constant: type='int', value='3' (at pp.c:1889)
        Enumerator: name='TOS_UART_9600' (at pp.c:1890)
          Constant: type='int', value='4' (at pp.c:1890)
        Enumerator: name='TOS_UART_19200' (at pp.c:1891)
          Constant: type='int', value='5' (at pp.c:1891)
        Enumerator: name='TOS_UART_38400' (at pp.c:1892)
          Constant: type='int', value='6' (at pp.c:1892)
        Enumerator: name='TOS_UART_57600' (at pp.c:1893)
          Constant: type='int', value='7' (at pp.c:1893)
        Enumerator: name='TOS_UART_76800' (at pp.c:1894)
          Constant: type='int', value='8' (at pp.c:1894)
        Enumerator: name='TOS_UART_115200' (at pp.c:1895)
          Constant: type='int', value='9' (at pp.c:1895)
        Enumerator: name='TOS_UART_230400' (at pp.c:1896)
          Constant: type='int', value='10' (at pp.c:1896)
  Decl: name=None, quals=[], storage=[] (at pp.c:1899)
    Enum: name='__nesc_unnamed4295' (at pp.c:1899)
      EnumeratorList:  (at pp.c:1900)
        Enumerator: name='TOS_UART_OFF' (at pp.c:1900)
        Enumerator: name='TOS_UART_RONLY' (at pp.c:1901)
        Enumerator: name='TOS_UART_TONLY' (at pp.c:1902)
        Enumerator: name='TOS_UART_DUPLEX' (at pp.c:1903)
  Decl: name=None, quals=[], storage=[] (at pp.c:1906)
    Enum: name='__nesc_unnamed4296' (at pp.c:1906)
      EnumeratorList:  (at pp.c:1907)
        Enumerator: name='TOS_UART_PARITY_NONE' (at pp.c:1907)
        Enumerator: name='TOS_UART_PARITY_EVEN' (at pp.c:1908)
        Enumerator: name='TOS_UART_PARITY_ODD' (at pp.c:1909)
  Decl: name=None, quals=[], storage=[] (at pp.c:1912)
    Enum: name='__nesc_unnamed4297' (at pp.c:1912)
      EnumeratorList:  (at pp.c:1914)
        Enumerator: name='IEEE_EUI64_LENGTH' (at pp.c:1914)
          Constant: type='int', value='8' (at pp.c:1914)
  Typedef: name='ieee_eui64_t', quals=[], storage=['typedef'] (at pp.c:1921)
    TypeDecl: declname='ieee_eui64_t', quals=[] (at pp.c:1921)
      Struct: name='ieee_eui64', packed=False (at pp.c:1919)
        Decl: name='data', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1920)
            TypeDecl: declname='data', quals=[] (at pp.c:1920)
              IdentifierType: names=['uint8_t'] (at None)
            ID: name='IEEE_EUI64_LENGTH' (at pp.c:1920)
  Typedef: name='ieee154_panid_t', quals=[], storage=['typedef'] (at pp.c:1923)
    TypeDecl: declname='ieee154_panid_t', quals=[] (at pp.c:1923)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='ieee154_saddr_t', quals=[], storage=['typedef'] (at pp.c:1924)
    TypeDecl: declname='ieee154_saddr_t', quals=[] (at pp.c:1924)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='ieee154_laddr_t', quals=[], storage=['typedef'] (at pp.c:1925)
    TypeDecl: declname='ieee154_laddr_t', quals=[] (at pp.c:1925)
      IdentifierType: names=['ieee_eui64_t'] (at None)
  Typedef: name='ieee154_addr_t', quals=[], storage=['typedef'] (at pp.c:1940)
    TypeDecl: declname='ieee154_addr_t', quals=[] (at pp.c:1940)
      Struct: name='__nesc_unnamed4298', packed=False (at pp.c:1934)
        Decl: name='ieee_mode', quals=[], storage=[] (at 0)
          TypeDecl: declname='ieee_mode', quals=[] (at pp.c:1935)
            IdentifierType: names=['uint8_t'] (at None)
          Constant: type='int', value='2' (at pp.c:1935)
        Decl: name='ieee_addr', quals=[], storage=[] (at 0)
          TypeDecl: declname='ieee_addr', quals=[] (at pp.c:1939)
            Union: name='__nesc_unnamed4299', packed=False (at pp.c:1936)
              Decl: name='saddr', quals=[], storage=[] (at 0)
                TypeDecl: declname='saddr', quals=[] (at pp.c:1937)
                  IdentifierType: names=['ieee154_saddr_t'] (at None)
              Decl: name='laddr', quals=[], storage=[] (at 0)
                TypeDecl: declname='laddr', quals=[] (at pp.c:1938)
                  IdentifierType: names=['ieee154_laddr_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1944)
    Enum: name='__nesc_unnamed4300' (at pp.c:1944)
      EnumeratorList:  (at pp.c:1945)
        Enumerator: name='IEEE154_BROADCAST_ADDR' (at pp.c:1945)
          Constant: type='int', value='0xffff' (at pp.c:1945)
        Enumerator: name='IEEE154_LINK_MTU' (at pp.c:1946)
          Constant: type='int', value='127' (at pp.c:1946)
  Decl: name=None, quals=[], storage=[] (at pp.c:1949)
    Struct: name='ieee154_frame_addr', packed=False (at pp.c:1949)
      Decl: name='ieee_src', quals=[], storage=[] (at 0)
        TypeDecl: declname='ieee_src', quals=[] (at pp.c:1950)
          IdentifierType: names=['ieee154_addr_t'] (at None)
      Decl: name='ieee_dst', quals=[], storage=[] (at 0)
        TypeDecl: declname='ieee_dst', quals=[] (at pp.c:1951)
          IdentifierType: names=['ieee154_addr_t'] (at None)
      Decl: name='ieee_dstpan', quals=[], storage=[] (at 0)
        TypeDecl: declname='ieee_dstpan', quals=[] (at pp.c:1952)
          IdentifierType: names=['ieee154_panid_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:1955)
    Enum: name='__nesc_unnamed4301' (at pp.c:1955)
      EnumeratorList:  (at pp.c:1956)
        Enumerator: name='IEEE154_MIN_HDR_SZ' (at pp.c:1956)
          Constant: type='int', value='6' (at pp.c:1956)
  Decl: name=None, quals=[], storage=[] (at pp.c:1959)
    Enum: name='ieee154_fcf_enums' (at pp.c:1959)
      EnumeratorList:  (at pp.c:1960)
        Enumerator: name='IEEE154_FCF_FRAME_TYPE' (at pp.c:1960)
          Constant: type='int', value='0' (at pp.c:1960)
        Enumerator: name='IEEE154_FCF_SECURITY_ENABLED' (at pp.c:1961)
          Constant: type='int', value='3' (at pp.c:1961)
        Enumerator: name='IEEE154_FCF_FRAME_PENDING' (at pp.c:1962)
          Constant: type='int', value='4' (at pp.c:1962)
        Enumerator: name='IEEE154_FCF_ACK_REQ' (at pp.c:1963)
          Constant: type='int', value='5' (at pp.c:1963)
        Enumerator: name='IEEE154_FCF_INTRAPAN' (at pp.c:1964)
          Constant: type='int', value='6' (at pp.c:1964)
        Enumerator: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:1965)
          Constant: type='int', value='10' (at pp.c:1965)
        Enumerator: name='IEEE154_FCF_SRC_ADDR_MODE' (at pp.c:1966)
          Constant: type='int', value='14' (at pp.c:1966)
  Decl: name=None, quals=[], storage=[] (at pp.c:1969)
    Enum: name='ieee154_fcf_type_enums' (at pp.c:1969)
      EnumeratorList:  (at pp.c:1970)
        Enumerator: name='IEEE154_TYPE_BEACON' (at pp.c:1970)
          Constant: type='int', value='0' (at pp.c:1970)
        Enumerator: name='IEEE154_TYPE_DATA' (at pp.c:1971)
          Constant: type='int', value='1' (at pp.c:1971)
        Enumerator: name='IEEE154_TYPE_ACK' (at pp.c:1972)
          Constant: type='int', value='2' (at pp.c:1972)
        Enumerator: name='IEEE154_TYPE_MAC_CMD' (at pp.c:1973)
          Constant: type='int', value='3' (at pp.c:1973)
  Decl: name=None, quals=[], storage=[] (at pp.c:1976)
    Enum: name='iee154_fcf_addr_mode_enums' (at pp.c:1976)
      EnumeratorList:  (at pp.c:1977)
        Enumerator: name='IEEE154_ADDR_NONE' (at pp.c:1977)
          Constant: type='int', value='0' (at pp.c:1977)
        Enumerator: name='IEEE154_ADDR_SHORT' (at pp.c:1978)
          Constant: type='int', value='2' (at pp.c:1978)
        Enumerator: name='IEEE154_ADDR_EXT' (at pp.c:1979)
          Constant: type='int', value='3' (at pp.c:1979)
  Decl: name=None, quals=[], storage=[] (at pp.c:1982)
    Enum: name='__nesc_unnamed4302' (at pp.c:1982)
      EnumeratorList:  (at pp.c:1983)
        Enumerator: name='DALLASID48_SERIAL_LENGTH' (at pp.c:1983)
          Constant: type='int', value='6' (at pp.c:1983)
        Enumerator: name='DALLASID48_DATA_LENGTH' (at pp.c:1984)
          Constant: type='int', value='8' (at pp.c:1984)
  Typedef: name='dallasid48_serial_t', quals=[], storage=['typedef'] (at pp.c:2002)
    TypeDecl: declname='dallasid48_serial_t', quals=[] (at pp.c:2002)
      Union: name='dallasid48_serial_t', packed=False (at pp.c:1995)
        Decl: name='data', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:1996)
            TypeDecl: declname='data', quals=[] (at pp.c:1996)
              IdentifierType: names=['uint8_t'] (at None)
            ID: name='DALLASID48_DATA_LENGTH' (at pp.c:1996)
        Decl: name='temp', quals=[], storage=[] (at 0)
          TypeDecl: declname='temp', quals=[] (at pp.c:2001)
            Struct: name=None, packed=False (at pp.c:1997)
              Decl: name='family_code', quals=[], storage=[] (at 0)
                TypeDecl: declname='family_code', quals=[] (at pp.c:1998)
                  IdentifierType: names=['uint8_t'] (at None)
              Decl: name='serial', quals=[], storage=[] (at 0)
                ArrayDecl:  (at pp.c:1999)
                  TypeDecl: declname='serial', quals=[] (at pp.c:1999)
                    IdentifierType: names=['uint8_t'] (at None)
                  ID: name='DALLASID48_SERIAL_LENGTH' (at pp.c:1999)
              Decl: name='crc', quals=[], storage=[] (at 0)
                TypeDecl: declname='crc', quals=[] (at pp.c:2000)
                  IdentifierType: names=['uint8_t'] (at None)
  Decl: name='dallasid48checkCrc', quals=[], storage=['inline', 'static'] (at pp.c:2007)
    FuncDecl: quals=None (at pp.c:2007)
      ParamList:  (at pp.c:2007)
        Decl: name='id', quals=['const'], storage=[] (at pp.c:2007)
          PtrDecl: quals=[] (at pp.c:2007)
            TypeDecl: declname='id', quals=['const'] (at pp.c:2007)
              IdentifierType: names=['dallasid48_serial_t'] (at None)
      TypeDecl: declname='dallasid48checkCrc', quals=[] (at pp.c:2007)
        IdentifierType: names=['bool'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2009)
    Enum: name='__nesc_unnamed4303' (at pp.c:2009)
      EnumeratorList:  (at pp.c:2010)
        Enumerator: name='IEEE_EUI64_COMPANY_ID_0' (at pp.c:2010)
          Constant: type='int', value='0x00' (at pp.c:2010)
        Enumerator: name='IEEE_EUI64_COMPANY_ID_1' (at pp.c:2011)
          Constant: type='int', value='0x12' (at pp.c:2011)
        Enumerator: name='IEEE_EUI64_COMPANY_ID_2' (at pp.c:2012)
          Constant: type='int', value='0x6d' (at pp.c:2012)
        Enumerator: name='IEEE_EUI64_SERIAL_ID_0' (at pp.c:2013)
          Constant: type='char', value="'E'" (at pp.c:2013)
        Enumerator: name='IEEE_EUI64_SERIAL_ID_1' (at pp.c:2014)
          Constant: type='char', value="'P'" (at pp.c:2014)
  Typedef: name='timesync_radio_t', quals=[], storage=['typedef'] (at pp.c:2017)
    TypeDecl: declname='timesync_radio_t', quals=[] (at pp.c:2017)
      IdentifierType: names=['nx_uint32_t'] (at None)
  Typedef: name='timesync_footer_t', quals=[], storage=['typedef'] (at pp.c:2028)
    TypeDecl: declname='timesync_footer_t', quals=[] (at pp.c:2028)
      Struct: name='timesync_footer_t', packed=False (at pp.c:2024)
        Decl: name='type', quals=[], storage=[] (at 0)
          TypeDecl: declname='type', quals=[] (at pp.c:2026)
            IdentifierType: names=['nx_am_id_t'] (at None)
        Decl: name='timestamp', quals=[], storage=[] (at 0)
          TypeDecl: declname='timestamp', quals=[] (at pp.c:2027)
            IdentifierType: names=['timesync_radio_t'] (at None)
  Typedef: name='lpl_sendstate_t', quals=[], storage=['typedef'] (at pp.c:2036)
    TypeDecl: declname='lpl_sendstate_t', quals=[] (at pp.c:2036)
      Enum: name='__nesc_unnamed4304' (at pp.c:2031)
        EnumeratorList:  (at pp.c:2032)
          Enumerator: name='S_LPL_NOT_SENDING' (at pp.c:2032)
          Enumerator: name='S_LPL_FIRST_MESSAGE' (at pp.c:2033)
          Enumerator: name='S_LPL_SENDING' (at pp.c:2034)
          Enumerator: name='S_LPL_CLEAN_UP' (at pp.c:2035)
  Typedef: name='PeriodicSampleLoggerP__0__sensor_type_t', quals=[], storage=['typedef'] (at pp.c:2037)
    TypeDecl: declname='PeriodicSampleLoggerP__0__sensor_type_t', quals=[] (at pp.c:2037)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='PeriodicSampleLoggerP__0__Sensor__val_t', quals=[], storage=['typedef'] (at pp.c:2038)
    TypeDecl: declname='PeriodicSampleLoggerP__0__Sensor__val_t', quals=[] (at pp.c:2038)
      IdentifierType: names=['PeriodicSampleLoggerP__0__sensor_type_t'] (at None)
  Typedef: name='PeriodicSampleLoggerP__0__Timer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2039)
    TypeDecl: declname='PeriodicSampleLoggerP__0__Timer__precision_tag', quals=[] (at pp.c:2039)
      IdentifierType: names=['TMilli'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2040)
    Enum: name='Msp430Timer32khzC__0____nesc_unnamed4305' (at pp.c:2040)
      EnumeratorList:  (at pp.c:2041)
        Enumerator: name='Msp430Timer32khzC__0__ALARM_ID' (at pp.c:2041)
          Constant: type='int', value='0U' (at pp.c:2041)
  Typedef: name='Msp430AlarmC__0__frequency_tag', quals=[], storage=['typedef'] (at pp.c:2043)
    TypeDecl: declname='Msp430AlarmC__0__frequency_tag', quals=[] (at pp.c:2043)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='Msp430AlarmC__0__Alarm__precision_tag', quals=[], storage=['typedef'] (at pp.c:2044)
    TypeDecl: declname='Msp430AlarmC__0__Alarm__precision_tag', quals=[] (at pp.c:2044)
      IdentifierType: names=['Msp430AlarmC__0__frequency_tag'] (at None)
  Typedef: name='Msp430AlarmC__0__Alarm__size_type', quals=[], storage=['typedef'] (at pp.c:2045)
    TypeDecl: declname='Msp430AlarmC__0__Alarm__size_type', quals=[] (at pp.c:2045)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='Msp430CounterC__0__frequency_tag', quals=[], storage=['typedef'] (at pp.c:2046)
    TypeDecl: declname='Msp430CounterC__0__frequency_tag', quals=[] (at pp.c:2046)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='Msp430CounterC__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2047)
    TypeDecl: declname='Msp430CounterC__0__Counter__precision_tag', quals=[] (at pp.c:2047)
      IdentifierType: names=['Msp430CounterC__0__frequency_tag'] (at None)
  Typedef: name='Msp430CounterC__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2048)
    TypeDecl: declname='Msp430CounterC__0__Counter__size_type', quals=[] (at pp.c:2048)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformCounterC__0__to_precision_tag', quals=[], storage=['typedef'] (at pp.c:2049)
    TypeDecl: declname='TransformCounterC__0__to_precision_tag', quals=[] (at pp.c:2049)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='TransformCounterC__0__to_size_type', quals=[], storage=['typedef'] (at pp.c:2050)
    TypeDecl: declname='TransformCounterC__0__to_size_type', quals=[] (at pp.c:2050)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='TransformCounterC__0__from_precision_tag', quals=[], storage=['typedef'] (at pp.c:2051)
    TypeDecl: declname='TransformCounterC__0__from_precision_tag', quals=[] (at pp.c:2051)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformCounterC__0__from_size_type', quals=[], storage=['typedef'] (at pp.c:2052)
    TypeDecl: declname='TransformCounterC__0__from_size_type', quals=[] (at pp.c:2052)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformCounterC__0__upper_count_type', quals=[], storage=['typedef'] (at pp.c:2053)
    TypeDecl: declname='TransformCounterC__0__upper_count_type', quals=[] (at pp.c:2053)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='TransformCounterC__0__CounterFrom__precision_tag', quals=[], storage=['typedef'] (at pp.c:2054)
    TypeDecl: declname='TransformCounterC__0__CounterFrom__precision_tag', quals=[] (at pp.c:2054)
      IdentifierType: names=['TransformCounterC__0__from_precision_tag'] (at None)
  Typedef: name='TransformCounterC__0__CounterFrom__size_type', quals=[], storage=['typedef'] (at pp.c:2055)
    TypeDecl: declname='TransformCounterC__0__CounterFrom__size_type', quals=[] (at pp.c:2055)
      IdentifierType: names=['TransformCounterC__0__from_size_type'] (at None)
  Typedef: name='TransformCounterC__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2056)
    TypeDecl: declname='TransformCounterC__0__Counter__precision_tag', quals=[] (at pp.c:2056)
      IdentifierType: names=['TransformCounterC__0__to_precision_tag'] (at None)
  Typedef: name='TransformCounterC__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2057)
    TypeDecl: declname='TransformCounterC__0__Counter__size_type', quals=[] (at pp.c:2057)
      IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
  Typedef: name='TransformAlarmC__0__to_precision_tag', quals=[], storage=['typedef'] (at pp.c:2058)
    TypeDecl: declname='TransformAlarmC__0__to_precision_tag', quals=[] (at pp.c:2058)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='TransformAlarmC__0__to_size_type', quals=[], storage=['typedef'] (at pp.c:2059)
    TypeDecl: declname='TransformAlarmC__0__to_size_type', quals=[] (at pp.c:2059)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='TransformAlarmC__0__from_precision_tag', quals=[], storage=['typedef'] (at pp.c:2060)
    TypeDecl: declname='TransformAlarmC__0__from_precision_tag', quals=[] (at pp.c:2060)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformAlarmC__0__from_size_type', quals=[], storage=['typedef'] (at pp.c:2061)
    TypeDecl: declname='TransformAlarmC__0__from_size_type', quals=[] (at pp.c:2061)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformAlarmC__0__Alarm__precision_tag', quals=[], storage=['typedef'] (at pp.c:2062)
    TypeDecl: declname='TransformAlarmC__0__Alarm__precision_tag', quals=[] (at pp.c:2062)
      IdentifierType: names=['TransformAlarmC__0__to_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__0__Alarm__size_type', quals=[], storage=['typedef'] (at pp.c:2063)
    TypeDecl: declname='TransformAlarmC__0__Alarm__size_type', quals=[] (at pp.c:2063)
      IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Typedef: name='TransformAlarmC__0__AlarmFrom__precision_tag', quals=[], storage=['typedef'] (at pp.c:2064)
    TypeDecl: declname='TransformAlarmC__0__AlarmFrom__precision_tag', quals=[] (at pp.c:2064)
      IdentifierType: names=['TransformAlarmC__0__from_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__0__AlarmFrom__size_type', quals=[], storage=['typedef'] (at pp.c:2065)
    TypeDecl: declname='TransformAlarmC__0__AlarmFrom__size_type', quals=[] (at pp.c:2065)
      IdentifierType: names=['TransformAlarmC__0__from_size_type'] (at None)
  Typedef: name='TransformAlarmC__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2066)
    TypeDecl: declname='TransformAlarmC__0__Counter__precision_tag', quals=[] (at pp.c:2066)
      IdentifierType: names=['TransformAlarmC__0__to_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2067)
    TypeDecl: declname='TransformAlarmC__0__Counter__size_type', quals=[] (at pp.c:2067)
      IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Typedef: name='AlarmToTimerC__0__precision_tag', quals=[], storage=['typedef'] (at pp.c:2068)
    TypeDecl: declname='AlarmToTimerC__0__precision_tag', quals=[] (at pp.c:2068)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='AlarmToTimerC__0__Alarm__precision_tag', quals=[], storage=['typedef'] (at pp.c:2069)
    TypeDecl: declname='AlarmToTimerC__0__Alarm__precision_tag', quals=[] (at pp.c:2069)
      IdentifierType: names=['AlarmToTimerC__0__precision_tag'] (at None)
  Typedef: name='AlarmToTimerC__0__Alarm__size_type', quals=[], storage=['typedef'] (at pp.c:2070)
    TypeDecl: declname='AlarmToTimerC__0__Alarm__size_type', quals=[] (at pp.c:2070)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='AlarmToTimerC__0__Timer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2071)
    TypeDecl: declname='AlarmToTimerC__0__Timer__precision_tag', quals=[] (at pp.c:2071)
      IdentifierType: names=['AlarmToTimerC__0__precision_tag'] (at None)
  Typedef: name='VirtualizeTimerC__0__precision_tag', quals=[], storage=['typedef'] (at pp.c:2072)
    TypeDecl: declname='VirtualizeTimerC__0__precision_tag', quals=[] (at pp.c:2072)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='VirtualizeTimerC__0__TimerFrom__precision_tag', quals=[], storage=['typedef'] (at pp.c:2073)
    TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__precision_tag', quals=[] (at pp.c:2073)
      IdentifierType: names=['VirtualizeTimerC__0__precision_tag'] (at None)
  Typedef: name='VirtualizeTimerC__0__Timer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2074)
    TypeDecl: declname='VirtualizeTimerC__0__Timer__precision_tag', quals=[] (at pp.c:2074)
      IdentifierType: names=['VirtualizeTimerC__0__precision_tag'] (at None)
  Typedef: name='CounterToLocalTimeC__0__precision_tag', quals=[], storage=['typedef'] (at pp.c:2075)
    TypeDecl: declname='CounterToLocalTimeC__0__precision_tag', quals=[] (at pp.c:2075)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='CounterToLocalTimeC__0__LocalTime__precision_tag', quals=[], storage=['typedef'] (at pp.c:2076)
    TypeDecl: declname='CounterToLocalTimeC__0__LocalTime__precision_tag', quals=[] (at pp.c:2076)
      IdentifierType: names=['CounterToLocalTimeC__0__precision_tag'] (at None)
  Typedef: name='CounterToLocalTimeC__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2077)
    TypeDecl: declname='CounterToLocalTimeC__0__Counter__precision_tag', quals=[] (at pp.c:2077)
      IdentifierType: names=['CounterToLocalTimeC__0__precision_tag'] (at None)
  Typedef: name='CounterToLocalTimeC__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2078)
    TypeDecl: declname='CounterToLocalTimeC__0__Counter__size_type', quals=[] (at pp.c:2078)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='SineSensorC__0__Read__val_t', quals=[], storage=['typedef'] (at pp.c:2079)
    TypeDecl: declname='SineSensorC__0__Read__val_t', quals=[] (at pp.c:2079)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2080)
    Enum: name='LogStorageC__0____nesc_unnamed4306' (at pp.c:2080)
      EnumeratorList:  (at pp.c:2081)
        Enumerator: name='LogStorageC__0__LOG_ID' (at pp.c:2081)
          Constant: type='int', value='0U' (at pp.c:2081)
        Enumerator: name='LogStorageC__0__VOLUME_ID' (at pp.c:2081)
          Constant: type='int', value='0U' (at pp.c:2081)
  Typedef: name='Stm25pLogP__Circular__val_t', quals=[], storage=['typedef'] (at pp.c:2083)
    TypeDecl: declname='Stm25pLogP__Circular__val_t', quals=[] (at pp.c:2083)
      IdentifierType: names=['bool'] (at None)
  Typedef: name='DeferredPowerManagerP__0__TimerMilli__precision_tag', quals=[], storage=['typedef'] (at pp.c:2084)
    TypeDecl: declname='DeferredPowerManagerP__0__TimerMilli__precision_tag', quals=[] (at pp.c:2084)
      IdentifierType: names=['TMilli'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2085)
    Enum: name='Msp430Spi0C__0____nesc_unnamed4307' (at pp.c:2085)
      EnumeratorList:  (at pp.c:2086)
        Enumerator: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:2086)
          Constant: type='int', value='0U' (at pp.c:2086)
  Decl: name=None, quals=[], storage=[] (at pp.c:2088)
    Enum: name='Msp430Usart0C__0____nesc_unnamed4308' (at pp.c:2088)
      EnumeratorList:  (at pp.c:2089)
        Enumerator: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:2089)
          Constant: type='int', value='0U' (at pp.c:2089)
  Typedef: name='Stm25pLogConfigP__0__Circular__val_t', quals=[], storage=['typedef'] (at pp.c:2091)
    TypeDecl: declname='Stm25pLogConfigP__0__Circular__val_t', quals=[] (at pp.c:2091)
      IdentifierType: names=['bool'] (at None)
  Typedef: name='SampleLogReaderC__0__sample_type_t', quals=[], storage=['typedef'] (at pp.c:2092)
    TypeDecl: declname='SampleLogReaderC__0__sample_type_t', quals=[] (at pp.c:2092)
      IdentifierType: names=['sensor_sample_t'] (at None)
  Typedef: name='SampleLogReaderP__0__sample_type_t', quals=[], storage=['typedef'] (at pp.c:2093)
    TypeDecl: declname='SampleLogReaderP__0__sample_type_t', quals=[] (at pp.c:2093)
      IdentifierType: names=['SampleLogReaderC__0__sample_type_t'] (at None)
  Typedef: name='SampleLogReaderP__0__SampleLogRead__sample_type_t', quals=[], storage=['typedef'] (at pp.c:2094)
    TypeDecl: declname='SampleLogReaderP__0__SampleLogRead__sample_type_t', quals=[] (at pp.c:2094)
      IdentifierType: names=['SampleLogReaderP__0__sample_type_t'] (at None)
  Typedef: name='LowPowerSensingPeriodicSamplerC__SampleLogRead__sample_type_t', quals=[], storage=['typedef'] (at pp.c:2095)
    TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleLogRead__sample_type_t', quals=[] (at pp.c:2095)
      IdentifierType: names=['sensor_sample_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2096)
    Enum: name='CC2420ActiveMessageC____nesc_unnamed4309' (at pp.c:2096)
      EnumeratorList:  (at pp.c:2097)
        Enumerator: name='CC2420ActiveMessageC__CC2420_AM_SEND_ID' (at pp.c:2097)
          Constant: type='int', value='0U' (at pp.c:2097)
  Typedef: name='CC2420ControlP__StartupTimer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2099)
    TypeDecl: declname='CC2420ControlP__StartupTimer__precision_tag', quals=[] (at pp.c:2099)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420ControlP__StartupTimer__size_type', quals=[], storage=['typedef'] (at pp.c:2100)
    TypeDecl: declname='CC2420ControlP__StartupTimer__size_type', quals=[] (at pp.c:2100)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='CC2420ControlP__ReadRssi__val_t', quals=[], storage=['typedef'] (at pp.c:2101)
    TypeDecl: declname='CC2420ControlP__ReadRssi__val_t', quals=[] (at pp.c:2101)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2102)
    Enum: name='Msp430Timer32khzC__1____nesc_unnamed4310' (at pp.c:2102)
      EnumeratorList:  (at pp.c:2103)
        Enumerator: name='Msp430Timer32khzC__1__ALARM_ID' (at pp.c:2103)
          Constant: type='int', value='1U' (at pp.c:2103)
  Typedef: name='Msp430AlarmC__1__frequency_tag', quals=[], storage=['typedef'] (at pp.c:2105)
    TypeDecl: declname='Msp430AlarmC__1__frequency_tag', quals=[] (at pp.c:2105)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='Msp430AlarmC__1__Alarm__precision_tag', quals=[], storage=['typedef'] (at pp.c:2106)
    TypeDecl: declname='Msp430AlarmC__1__Alarm__precision_tag', quals=[] (at pp.c:2106)
      IdentifierType: names=['Msp430AlarmC__1__frequency_tag'] (at None)
  Typedef: name='Msp430AlarmC__1__Alarm__size_type', quals=[], storage=['typedef'] (at pp.c:2107)
    TypeDecl: declname='Msp430AlarmC__1__Alarm__size_type', quals=[] (at pp.c:2107)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformCounterC__1__to_precision_tag', quals=[], storage=['typedef'] (at pp.c:2108)
    TypeDecl: declname='TransformCounterC__1__to_precision_tag', quals=[] (at pp.c:2108)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformCounterC__1__to_size_type', quals=[], storage=['typedef'] (at pp.c:2109)
    TypeDecl: declname='TransformCounterC__1__to_size_type', quals=[] (at pp.c:2109)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='TransformCounterC__1__from_precision_tag', quals=[], storage=['typedef'] (at pp.c:2110)
    TypeDecl: declname='TransformCounterC__1__from_precision_tag', quals=[] (at pp.c:2110)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformCounterC__1__from_size_type', quals=[], storage=['typedef'] (at pp.c:2111)
    TypeDecl: declname='TransformCounterC__1__from_size_type', quals=[] (at pp.c:2111)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformCounterC__1__upper_count_type', quals=[], storage=['typedef'] (at pp.c:2112)
    TypeDecl: declname='TransformCounterC__1__upper_count_type', quals=[] (at pp.c:2112)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformCounterC__1__CounterFrom__precision_tag', quals=[], storage=['typedef'] (at pp.c:2113)
    TypeDecl: declname='TransformCounterC__1__CounterFrom__precision_tag', quals=[] (at pp.c:2113)
      IdentifierType: names=['TransformCounterC__1__from_precision_tag'] (at None)
  Typedef: name='TransformCounterC__1__CounterFrom__size_type', quals=[], storage=['typedef'] (at pp.c:2114)
    TypeDecl: declname='TransformCounterC__1__CounterFrom__size_type', quals=[] (at pp.c:2114)
      IdentifierType: names=['TransformCounterC__1__from_size_type'] (at None)
  Typedef: name='TransformCounterC__1__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2115)
    TypeDecl: declname='TransformCounterC__1__Counter__precision_tag', quals=[] (at pp.c:2115)
      IdentifierType: names=['TransformCounterC__1__to_precision_tag'] (at None)
  Typedef: name='TransformCounterC__1__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2116)
    TypeDecl: declname='TransformCounterC__1__Counter__size_type', quals=[] (at pp.c:2116)
      IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
  Typedef: name='TransformAlarmC__1__to_precision_tag', quals=[], storage=['typedef'] (at pp.c:2117)
    TypeDecl: declname='TransformAlarmC__1__to_precision_tag', quals=[] (at pp.c:2117)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformAlarmC__1__to_size_type', quals=[], storage=['typedef'] (at pp.c:2118)
    TypeDecl: declname='TransformAlarmC__1__to_size_type', quals=[] (at pp.c:2118)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='TransformAlarmC__1__from_precision_tag', quals=[], storage=['typedef'] (at pp.c:2119)
    TypeDecl: declname='TransformAlarmC__1__from_precision_tag', quals=[] (at pp.c:2119)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='TransformAlarmC__1__from_size_type', quals=[], storage=['typedef'] (at pp.c:2120)
    TypeDecl: declname='TransformAlarmC__1__from_size_type', quals=[] (at pp.c:2120)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='TransformAlarmC__1__Alarm__precision_tag', quals=[], storage=['typedef'] (at pp.c:2121)
    TypeDecl: declname='TransformAlarmC__1__Alarm__precision_tag', quals=[] (at pp.c:2121)
      IdentifierType: names=['TransformAlarmC__1__to_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__1__Alarm__size_type', quals=[], storage=['typedef'] (at pp.c:2122)
    TypeDecl: declname='TransformAlarmC__1__Alarm__size_type', quals=[] (at pp.c:2122)
      IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Typedef: name='TransformAlarmC__1__AlarmFrom__precision_tag', quals=[], storage=['typedef'] (at pp.c:2123)
    TypeDecl: declname='TransformAlarmC__1__AlarmFrom__precision_tag', quals=[] (at pp.c:2123)
      IdentifierType: names=['TransformAlarmC__1__from_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__1__AlarmFrom__size_type', quals=[], storage=['typedef'] (at pp.c:2124)
    TypeDecl: declname='TransformAlarmC__1__AlarmFrom__size_type', quals=[] (at pp.c:2124)
      IdentifierType: names=['TransformAlarmC__1__from_size_type'] (at None)
  Typedef: name='TransformAlarmC__1__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2125)
    TypeDecl: declname='TransformAlarmC__1__Counter__precision_tag', quals=[] (at pp.c:2125)
      IdentifierType: names=['TransformAlarmC__1__to_precision_tag'] (at None)
  Typedef: name='TransformAlarmC__1__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2126)
    TypeDecl: declname='TransformAlarmC__1__Counter__size_type', quals=[] (at pp.c:2126)
      IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2127)
    Enum: name='CC2420SpiC__0____nesc_unnamed4311' (at pp.c:2127)
      EnumeratorList:  (at pp.c:2128)
        Enumerator: name='CC2420SpiC__0__CLIENT_ID' (at pp.c:2128)
          Constant: type='int', value='0U' (at pp.c:2128)
  Decl: name=None, quals=[], storage=[] (at pp.c:2130)
    Enum: name='Msp430Spi0C__1____nesc_unnamed4312' (at pp.c:2130)
      EnumeratorList:  (at pp.c:2131)
        Enumerator: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:2131)
          Constant: type='int', value='1U' (at pp.c:2131)
  Decl: name=None, quals=[], storage=[] (at pp.c:2133)
    Enum: name='Msp430Usart0C__1____nesc_unnamed4313' (at pp.c:2133)
      EnumeratorList:  (at pp.c:2134)
        Enumerator: name='Msp430Usart0C__1__CLIENT_ID' (at pp.c:2134)
          Constant: type='int', value='1U' (at pp.c:2134)
  Decl: name=None, quals=[], storage=[] (at pp.c:2136)
    Enum: name='CC2420SpiC__1____nesc_unnamed4314' (at pp.c:2136)
      EnumeratorList:  (at pp.c:2137)
        Enumerator: name='CC2420SpiC__1__CLIENT_ID' (at pp.c:2137)
          Constant: type='int', value='1U' (at pp.c:2137)
  Decl: name=None, quals=[], storage=[] (at pp.c:2139)
    Enum: name='CC2420SpiC__2____nesc_unnamed4315' (at pp.c:2139)
      EnumeratorList:  (at pp.c:2140)
        Enumerator: name='CC2420SpiC__2__CLIENT_ID' (at pp.c:2140)
          Constant: type='int', value='2U' (at pp.c:2140)
  Typedef: name='OneWireMasterC__BusyWait__precision_tag', quals=[], storage=['typedef'] (at pp.c:2142)
    TypeDecl: declname='OneWireMasterC__BusyWait__precision_tag', quals=[] (at pp.c:2142)
      IdentifierType: names=['TMicro'] (at None)
  Typedef: name='OneWireMasterC__BusyWait__size_type', quals=[], storage=['typedef'] (at pp.c:2143)
    TypeDecl: declname='OneWireMasterC__BusyWait__size_type', quals=[] (at pp.c:2143)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='BusyWaitCounterC__0__precision_tag', quals=[], storage=['typedef'] (at pp.c:2144)
    TypeDecl: declname='BusyWaitCounterC__0__precision_tag', quals=[] (at pp.c:2144)
      IdentifierType: names=['TMicro'] (at None)
  Typedef: name='BusyWaitCounterC__0__size_type', quals=[], storage=['typedef'] (at pp.c:2145)
    TypeDecl: declname='BusyWaitCounterC__0__size_type', quals=[] (at pp.c:2145)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='BusyWaitCounterC__0__BusyWait__precision_tag', quals=[], storage=['typedef'] (at pp.c:2146)
    TypeDecl: declname='BusyWaitCounterC__0__BusyWait__precision_tag', quals=[] (at pp.c:2146)
      IdentifierType: names=['BusyWaitCounterC__0__precision_tag'] (at None)
  Typedef: name='BusyWaitCounterC__0__BusyWait__size_type', quals=[], storage=['typedef'] (at pp.c:2147)
    TypeDecl: declname='BusyWaitCounterC__0__BusyWait__size_type', quals=[] (at pp.c:2147)
      IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
  Typedef: name='BusyWaitCounterC__0__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2148)
    TypeDecl: declname='BusyWaitCounterC__0__Counter__precision_tag', quals=[] (at pp.c:2148)
      IdentifierType: names=['BusyWaitCounterC__0__precision_tag'] (at None)
  Typedef: name='BusyWaitCounterC__0__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2149)
    TypeDecl: declname='BusyWaitCounterC__0__Counter__size_type', quals=[] (at pp.c:2149)
      IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
  Typedef: name='Msp430CounterC__1__frequency_tag', quals=[], storage=['typedef'] (at pp.c:2150)
    TypeDecl: declname='Msp430CounterC__1__frequency_tag', quals=[] (at pp.c:2150)
      IdentifierType: names=['TMicro'] (at None)
  Typedef: name='Msp430CounterC__1__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2151)
    TypeDecl: declname='Msp430CounterC__1__Counter__precision_tag', quals=[] (at pp.c:2151)
      IdentifierType: names=['Msp430CounterC__1__frequency_tag'] (at None)
  Typedef: name='Msp430CounterC__1__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2152)
    TypeDecl: declname='Msp430CounterC__1__Counter__size_type', quals=[] (at pp.c:2152)
      IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='CC2420TransmitP__PacketTimeStamp__precision_tag', quals=[], storage=['typedef'] (at pp.c:2153)
    TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__precision_tag', quals=[] (at pp.c:2153)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420TransmitP__PacketTimeStamp__size_type', quals=[], storage=['typedef'] (at pp.c:2154)
    TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__size_type', quals=[] (at pp.c:2154)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='CC2420TransmitP__BackoffTimer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2155)
    TypeDecl: declname='CC2420TransmitP__BackoffTimer__precision_tag', quals=[] (at pp.c:2155)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420TransmitP__BackoffTimer__size_type', quals=[], storage=['typedef'] (at pp.c:2156)
    TypeDecl: declname='CC2420TransmitP__BackoffTimer__size_type', quals=[] (at pp.c:2156)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2157)
    Enum: name='CC2420SpiC__3____nesc_unnamed4316' (at pp.c:2157)
      EnumeratorList:  (at pp.c:2158)
        Enumerator: name='CC2420SpiC__3__CLIENT_ID' (at pp.c:2158)
          Constant: type='int', value='3U' (at pp.c:2158)
  Typedef: name='CC2420ReceiveP__PacketTimeStamp__precision_tag', quals=[], storage=['typedef'] (at pp.c:2160)
    TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__precision_tag', quals=[] (at pp.c:2160)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420ReceiveP__PacketTimeStamp__size_type', quals=[], storage=['typedef'] (at pp.c:2161)
    TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__size_type', quals=[] (at pp.c:2161)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='CC2420PacketP__PacketTimeStamp32khz__precision_tag', quals=[], storage=['typedef'] (at pp.c:2162)
    TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__precision_tag', quals=[] (at pp.c:2162)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420PacketP__PacketTimeStamp32khz__size_type', quals=[], storage=['typedef'] (at pp.c:2163)
    TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__size_type', quals=[] (at pp.c:2163)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='CC2420PacketP__LocalTime32khz__precision_tag', quals=[], storage=['typedef'] (at pp.c:2164)
    TypeDecl: declname='CC2420PacketP__LocalTime32khz__precision_tag', quals=[] (at pp.c:2164)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CC2420PacketP__LocalTimeMilli__precision_tag', quals=[], storage=['typedef'] (at pp.c:2165)
    TypeDecl: declname='CC2420PacketP__LocalTimeMilli__precision_tag', quals=[] (at pp.c:2165)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='CC2420PacketP__PacketTimeStampMilli__precision_tag', quals=[], storage=['typedef'] (at pp.c:2166)
    TypeDecl: declname='CC2420PacketP__PacketTimeStampMilli__precision_tag', quals=[] (at pp.c:2166)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='CC2420PacketP__PacketTimeStampMilli__size_type', quals=[], storage=['typedef'] (at pp.c:2167)
    TypeDecl: declname='CC2420PacketP__PacketTimeStampMilli__size_type', quals=[] (at pp.c:2167)
      IdentifierType: names=['uint32_t'] (at None)
  Typedef: name='CounterToLocalTimeC__1__precision_tag', quals=[], storage=['typedef'] (at pp.c:2168)
    TypeDecl: declname='CounterToLocalTimeC__1__precision_tag', quals=[] (at pp.c:2168)
      IdentifierType: names=['T32khz'] (at None)
  Typedef: name='CounterToLocalTimeC__1__LocalTime__precision_tag', quals=[], storage=['typedef'] (at pp.c:2169)
    TypeDecl: declname='CounterToLocalTimeC__1__LocalTime__precision_tag', quals=[] (at pp.c:2169)
      IdentifierType: names=['CounterToLocalTimeC__1__precision_tag'] (at None)
  Typedef: name='CounterToLocalTimeC__1__Counter__precision_tag', quals=[], storage=['typedef'] (at pp.c:2170)
    TypeDecl: declname='CounterToLocalTimeC__1__Counter__precision_tag', quals=[] (at pp.c:2170)
      IdentifierType: names=['CounterToLocalTimeC__1__precision_tag'] (at None)
  Typedef: name='CounterToLocalTimeC__1__Counter__size_type', quals=[], storage=['typedef'] (at pp.c:2171)
    TypeDecl: declname='CounterToLocalTimeC__1__Counter__size_type', quals=[] (at pp.c:2171)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2172)
    Enum: name='CC2420SpiC__4____nesc_unnamed4317' (at pp.c:2172)
      EnumeratorList:  (at pp.c:2173)
        Enumerator: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:2173)
          Constant: type='int', value='4U' (at pp.c:2173)
  Typedef: name='RandomMlcgC__SeedInit__parameter', quals=[], storage=['typedef'] (at pp.c:2175)
    TypeDecl: declname='RandomMlcgC__SeedInit__parameter', quals=[] (at pp.c:2175)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2176)
    Enum: name='CC2420TinyosNetworkC____nesc_unnamed4318' (at pp.c:2176)
      EnumeratorList:  (at pp.c:2177)
        Enumerator: name='CC2420TinyosNetworkC__TINYOS_N_NETWORKS' (at pp.c:2177)
          Constant: type='int', value='1U' (at pp.c:2177)
  Typedef: name='DefaultLplP__OffTimer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2179)
    TypeDecl: declname='DefaultLplP__OffTimer__precision_tag', quals=[] (at pp.c:2179)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='DefaultLplP__SendDoneTimer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2180)
    TypeDecl: declname='DefaultLplP__SendDoneTimer__precision_tag', quals=[] (at pp.c:2180)
      IdentifierType: names=['TMilli'] (at None)
  Typedef: name='PowerCycleP__OnTimer__precision_tag', quals=[], storage=['typedef'] (at pp.c:2181)
    TypeDecl: declname='PowerCycleP__OnTimer__precision_tag', quals=[] (at pp.c:2181)
      IdentifierType: names=['TMilli'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:2182)
    Enum: name='AMQueueP____nesc_unnamed4319' (at pp.c:2182)
      EnumeratorList:  (at pp.c:2183)
        Enumerator: name='AMQueueP__NUM_CLIENTS' (at pp.c:2183)
          Constant: type='int', value='1U' (at pp.c:2183)
  Decl: name='PeriodicSampleLoggerP__0__LogWrite__syncDone', quals=[], storage=['static'] (at pp.c:2186)
    FuncDecl: quals=None (at pp.c:2186)
      ParamList:  (at pp.c:2186)
        Decl: name='error', quals=[], storage=[] (at pp.c:2186)
          TypeDecl: declname='error', quals=[] (at pp.c:2186)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__syncDone', quals=[] (at pp.c:2186)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__LogWrite__eraseDone', quals=[], storage=['static'] (at pp.c:2188)
    FuncDecl: quals=None (at pp.c:2188)
      ParamList:  (at pp.c:2188)
        Decl: name='error', quals=[], storage=[] (at pp.c:2188)
          TypeDecl: declname='error', quals=[] (at pp.c:2188)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__eraseDone', quals=[] (at pp.c:2188)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__LogWrite__appendDone', quals=[], storage=['static'] (at pp.c:2190)
    FuncDecl: quals=None (at pp.c:2190)
      ParamList:  (at pp.c:2192)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2192)
          PtrDecl: quals=[] (at pp.c:2192)
            TypeDecl: declname='buf', quals=[] (at pp.c:2192)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2199)
          TypeDecl: declname='len', quals=[] (at pp.c:2199)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='recordsLost', quals=[], storage=[] (at pp.c:2199)
          TypeDecl: declname='recordsLost', quals=[] (at pp.c:2199)
            IdentifierType: names=['bool'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2200)
          TypeDecl: declname='error', quals=[] (at pp.c:2200)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__appendDone', quals=[] (at pp.c:2190)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__eraseTask__runTask', quals=[], storage=['static'] (at pp.c:2202)
    FuncDecl: quals=None (at pp.c:2202)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__eraseTask__runTask', quals=[] (at pp.c:2202)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Boot__booted', quals=[], storage=['static'] (at pp.c:2204)
    FuncDecl: quals=None (at pp.c:2204)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Boot__booted', quals=[] (at pp.c:2204)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__appendTask__runTask', quals=[], storage=['static'] (at pp.c:2206)
    FuncDecl: quals=None (at pp.c:2206)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__appendTask__runTask', quals=[] (at pp.c:2206)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Sensor__default__read', quals=[], storage=['static'] (at pp.c:2208)
    FuncDecl: quals=None (at pp.c:2208)
      ParamList:  (at pp.c:2210)
        Decl: name='arg_0x101541798', quals=[], storage=[] (at pp.c:2210)
          TypeDecl: declname='arg_0x101541798', quals=[] (at pp.c:2210)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Sensor__default__read', quals=[] (at pp.c:2208)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Sensor__readDone', quals=[], storage=['static'] (at pp.c:2212)
    FuncDecl: quals=None (at pp.c:2212)
      ParamList:  (at pp.c:2214)
        Decl: name='arg_0x101541798', quals=[], storage=[] (at pp.c:2214)
          TypeDecl: declname='arg_0x101541798', quals=[] (at pp.c:2214)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='result', quals=[], storage=[] (at pp.c:2216)
          TypeDecl: declname='result', quals=[] (at pp.c:2216)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='val', quals=[], storage=[] (at pp.c:2216)
          TypeDecl: declname='val', quals=[] (at pp.c:2216)
            IdentifierType: names=['PeriodicSampleLoggerP__0__Sensor__val_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Sensor__readDone', quals=[] (at pp.c:2212)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Timer__fired', quals=[], storage=['static'] (at pp.c:2218)
    FuncDecl: quals=None (at pp.c:2218)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Timer__fired', quals=[] (at pp.c:2218)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__VectorTimerX0__fired', quals=[], storage=['static'] (at pp.c:2220)
    FuncDecl: quals=None (at pp.c:2220)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__VectorTimerX0__fired', quals=[] (at pp.c:2220)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Overflow__fired', quals=[], storage=['static'] (at pp.c:2222)
    FuncDecl: quals=None (at pp.c:2222)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Overflow__fired', quals=[] (at pp.c:2222)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__VectorTimerX1__fired', quals=[], storage=['static'] (at pp.c:2224)
    FuncDecl: quals=None (at pp.c:2224)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__VectorTimerX1__fired', quals=[] (at pp.c:2224)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Event__default__fired', quals=[], storage=['static'] (at pp.c:2226)
    FuncDecl: quals=None (at pp.c:2226)
      ParamList:  (at pp.c:2228)
        Decl: name='arg_0x101629c98', quals=[], storage=[] (at pp.c:2228)
          TypeDecl: declname='arg_0x101629c98', quals=[] (at pp.c:2228)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Event__default__fired', quals=[] (at pp.c:2226)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Timer__get', quals=[], storage=['static'] (at pp.c:2230)
    FuncDecl: quals=None (at pp.c:2230)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Timer__get', quals=[] (at pp.c:2230)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerP__1__VectorTimerX0__fired', quals=[], storage=['static'] (at pp.c:2232)
    FuncDecl: quals=None (at pp.c:2232)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__VectorTimerX0__fired', quals=[] (at pp.c:2232)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Overflow__fired', quals=[], storage=['static'] (at pp.c:2234)
    FuncDecl: quals=None (at pp.c:2234)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Overflow__fired', quals=[] (at pp.c:2234)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__VectorTimerX1__fired', quals=[], storage=['static'] (at pp.c:2236)
    FuncDecl: quals=None (at pp.c:2236)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__VectorTimerX1__fired', quals=[] (at pp.c:2236)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Event__default__fired', quals=[], storage=['static'] (at pp.c:2238)
    FuncDecl: quals=None (at pp.c:2238)
      ParamList:  (at pp.c:2240)
        Decl: name='arg_0x101629c98', quals=[], storage=[] (at pp.c:2240)
          TypeDecl: declname='arg_0x101629c98', quals=[] (at pp.c:2240)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Event__default__fired', quals=[] (at pp.c:2238)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Timer__get', quals=[], storage=['static'] (at pp.c:2242)
    FuncDecl: quals=None (at pp.c:2242)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Timer__get', quals=[] (at pp.c:2242)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerP__1__Timer__isOverflowPending', quals=[], storage=['static'] (at pp.c:2243)
    FuncDecl: quals=None (at pp.c:2243)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Timer__isOverflowPending', quals=[] (at pp.c:2243)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430TimerCapComP__0__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2245)
    FuncDecl: quals=None (at pp.c:2245)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Capture__getEvent', quals=[] (at pp.c:2245)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2247)
    FuncDecl: quals=None (at pp.c:2247)
      ParamList:  (at pp.c:2247)
        Decl: name='time', quals=[], storage=[] (at pp.c:2247)
          TypeDecl: declname='time', quals=[] (at pp.c:2247)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Capture__default__captured', quals=[] (at pp.c:2247)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Control__getControl', quals=[], storage=['static'] (at pp.c:2249)
    FuncDecl: quals=None (at pp.c:2249)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Control__getControl', quals=[] (at pp.c:2249)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__Event__fired', quals=[], storage=['static'] (at pp.c:2251)
    FuncDecl: quals=None (at pp.c:2251)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Event__fired', quals=[] (at pp.c:2251)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2253)
    FuncDecl: quals=None (at pp.c:2253)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Compare__default__fired', quals=[] (at pp.c:2253)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Timer__overflow', quals=[], storage=['static'] (at pp.c:2255)
    FuncDecl: quals=None (at pp.c:2255)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Timer__overflow', quals=[] (at pp.c:2255)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2257)
    FuncDecl: quals=None (at pp.c:2257)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Capture__getEvent', quals=[] (at pp.c:2257)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2259)
    FuncDecl: quals=None (at pp.c:2259)
      ParamList:  (at pp.c:2259)
        Decl: name='time', quals=[], storage=[] (at pp.c:2259)
          TypeDecl: declname='time', quals=[] (at pp.c:2259)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Capture__default__captured', quals=[] (at pp.c:2259)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Control__getControl', quals=[], storage=['static'] (at pp.c:2261)
    FuncDecl: quals=None (at pp.c:2261)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Control__getControl', quals=[] (at pp.c:2261)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__Event__fired', quals=[], storage=['static'] (at pp.c:2263)
    FuncDecl: quals=None (at pp.c:2263)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Event__fired', quals=[] (at pp.c:2263)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2265)
    FuncDecl: quals=None (at pp.c:2265)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Compare__default__fired', quals=[] (at pp.c:2265)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Timer__overflow', quals=[], storage=['static'] (at pp.c:2267)
    FuncDecl: quals=None (at pp.c:2267)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Timer__overflow', quals=[] (at pp.c:2267)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2269)
    FuncDecl: quals=None (at pp.c:2269)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Capture__getEvent', quals=[] (at pp.c:2269)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2271)
    FuncDecl: quals=None (at pp.c:2271)
      ParamList:  (at pp.c:2271)
        Decl: name='time', quals=[], storage=[] (at pp.c:2271)
          TypeDecl: declname='time', quals=[] (at pp.c:2271)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Capture__default__captured', quals=[] (at pp.c:2271)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Control__getControl', quals=[], storage=['static'] (at pp.c:2273)
    FuncDecl: quals=None (at pp.c:2273)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Control__getControl', quals=[] (at pp.c:2273)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__Event__fired', quals=[], storage=['static'] (at pp.c:2275)
    FuncDecl: quals=None (at pp.c:2275)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Event__fired', quals=[] (at pp.c:2275)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2277)
    FuncDecl: quals=None (at pp.c:2277)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Compare__default__fired', quals=[] (at pp.c:2277)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Timer__overflow', quals=[], storage=['static'] (at pp.c:2279)
    FuncDecl: quals=None (at pp.c:2279)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Timer__overflow', quals=[] (at pp.c:2279)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2281)
    FuncDecl: quals=None (at pp.c:2281)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Capture__getEvent', quals=[] (at pp.c:2281)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2283)
    FuncDecl: quals=None (at pp.c:2283)
      ParamList:  (at pp.c:2283)
        Decl: name='time', quals=[], storage=[] (at pp.c:2283)
          TypeDecl: declname='time', quals=[] (at pp.c:2283)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Capture__default__captured', quals=[] (at pp.c:2283)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__getControl', quals=[], storage=['static'] (at pp.c:2285)
    FuncDecl: quals=None (at pp.c:2285)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__getControl', quals=[] (at pp.c:2285)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__enableEvents', quals=[], storage=['static'] (at pp.c:2287)
    FuncDecl: quals=None (at pp.c:2287)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__enableEvents', quals=[] (at pp.c:2287)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[], storage=['static'] (at pp.c:2289)
    FuncDecl: quals=None (at pp.c:2289)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[] (at pp.c:2289)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__disableEvents', quals=[], storage=['static'] (at pp.c:2300)
    FuncDecl: quals=None (at pp.c:2300)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__disableEvents', quals=[] (at pp.c:2300)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:2302)
    FuncDecl: quals=None (at pp.c:2302)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[] (at pp.c:2302)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Event__fired', quals=[], storage=['static'] (at pp.c:2304)
    FuncDecl: quals=None (at pp.c:2304)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Event__fired', quals=[] (at pp.c:2304)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Compare__setEvent', quals=[], storage=['static'] (at pp.c:2306)
    FuncDecl: quals=None (at pp.c:2306)
      ParamList:  (at pp.c:2306)
        Decl: name='time', quals=[], storage=[] (at pp.c:2306)
          TypeDecl: declname='time', quals=[] (at pp.c:2306)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEvent', quals=[] (at pp.c:2306)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[], storage=['static'] (at pp.c:2308)
    FuncDecl: quals=None (at pp.c:2308)
      ParamList:  (at pp.c:2308)
        Decl: name='delta', quals=[], storage=[] (at pp.c:2308)
          TypeDecl: declname='delta', quals=[] (at pp.c:2308)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[] (at pp.c:2308)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Timer__overflow', quals=[], storage=['static'] (at pp.c:2310)
    FuncDecl: quals=None (at pp.c:2310)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Timer__overflow', quals=[] (at pp.c:2310)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2312)
    FuncDecl: quals=None (at pp.c:2312)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Capture__getEvent', quals=[] (at pp.c:2312)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[], storage=['static'] (at pp.c:2314)
    FuncDecl: quals=None (at pp.c:2314)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[] (at pp.c:2314)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[], storage=['static'] (at pp.c:2316)
    FuncDecl: quals=None (at pp.c:2316)
      ParamList:  (at pp.c:2316)
        Decl: name='cm', quals=[], storage=[] (at pp.c:2316)
          TypeDecl: declname='cm', quals=[] (at pp.c:2316)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[] (at pp.c:2316)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__getControl', quals=[], storage=['static'] (at pp.c:2318)
    FuncDecl: quals=None (at pp.c:2318)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__getControl', quals=[] (at pp.c:2318)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__enableEvents', quals=[], storage=['static'] (at pp.c:2320)
    FuncDecl: quals=None (at pp.c:2320)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__enableEvents', quals=[] (at pp.c:2320)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__disableEvents', quals=[], storage=['static'] (at pp.c:2321)
    FuncDecl: quals=None (at pp.c:2321)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__disableEvents', quals=[] (at pp.c:2321)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:2323)
    FuncDecl: quals=None (at pp.c:2323)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[] (at pp.c:2323)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Event__fired', quals=[], storage=['static'] (at pp.c:2325)
    FuncDecl: quals=None (at pp.c:2325)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Event__fired', quals=[] (at pp.c:2325)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2327)
    FuncDecl: quals=None (at pp.c:2327)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Compare__default__fired', quals=[] (at pp.c:2327)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Timer__overflow', quals=[], storage=['static'] (at pp.c:2329)
    FuncDecl: quals=None (at pp.c:2329)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Timer__overflow', quals=[] (at pp.c:2329)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2331)
    FuncDecl: quals=None (at pp.c:2331)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Capture__getEvent', quals=[] (at pp.c:2331)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2333)
    FuncDecl: quals=None (at pp.c:2333)
      ParamList:  (at pp.c:2333)
        Decl: name='time', quals=[], storage=[] (at pp.c:2333)
          TypeDecl: declname='time', quals=[] (at pp.c:2333)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Capture__default__captured', quals=[] (at pp.c:2333)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__getControl', quals=[], storage=['static'] (at pp.c:2335)
    FuncDecl: quals=None (at pp.c:2335)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__getControl', quals=[] (at pp.c:2335)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__enableEvents', quals=[], storage=['static'] (at pp.c:2337)
    FuncDecl: quals=None (at pp.c:2337)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__enableEvents', quals=[] (at pp.c:2337)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[], storage=['static'] (at pp.c:2339)
    FuncDecl: quals=None (at pp.c:2339)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[] (at pp.c:2339)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__disableEvents', quals=[], storage=['static'] (at pp.c:2350)
    FuncDecl: quals=None (at pp.c:2350)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__disableEvents', quals=[] (at pp.c:2350)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:2352)
    FuncDecl: quals=None (at pp.c:2352)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[] (at pp.c:2352)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Event__fired', quals=[], storage=['static'] (at pp.c:2354)
    FuncDecl: quals=None (at pp.c:2354)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Event__fired', quals=[] (at pp.c:2354)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Compare__setEvent', quals=[], storage=['static'] (at pp.c:2356)
    FuncDecl: quals=None (at pp.c:2356)
      ParamList:  (at pp.c:2356)
        Decl: name='time', quals=[], storage=[] (at pp.c:2356)
          TypeDecl: declname='time', quals=[] (at pp.c:2356)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEvent', quals=[] (at pp.c:2356)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[], storage=['static'] (at pp.c:2358)
    FuncDecl: quals=None (at pp.c:2358)
      ParamList:  (at pp.c:2358)
        Decl: name='delta', quals=[], storage=[] (at pp.c:2358)
          TypeDecl: declname='delta', quals=[] (at pp.c:2358)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[] (at pp.c:2358)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Timer__overflow', quals=[], storage=['static'] (at pp.c:2360)
    FuncDecl: quals=None (at pp.c:2360)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Timer__overflow', quals=[] (at pp.c:2360)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2362)
    FuncDecl: quals=None (at pp.c:2362)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Capture__getEvent', quals=[] (at pp.c:2362)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2364)
    FuncDecl: quals=None (at pp.c:2364)
      ParamList:  (at pp.c:2364)
        Decl: name='time', quals=[], storage=[] (at pp.c:2364)
          TypeDecl: declname='time', quals=[] (at pp.c:2364)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Capture__default__captured', quals=[] (at pp.c:2364)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Control__getControl', quals=[], storage=['static'] (at pp.c:2366)
    FuncDecl: quals=None (at pp.c:2366)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Control__getControl', quals=[] (at pp.c:2366)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__Event__fired', quals=[], storage=['static'] (at pp.c:2368)
    FuncDecl: quals=None (at pp.c:2368)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Event__fired', quals=[] (at pp.c:2368)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2370)
    FuncDecl: quals=None (at pp.c:2370)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Compare__default__fired', quals=[] (at pp.c:2370)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Timer__overflow', quals=[], storage=['static'] (at pp.c:2372)
    FuncDecl: quals=None (at pp.c:2372)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Timer__overflow', quals=[] (at pp.c:2372)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2374)
    FuncDecl: quals=None (at pp.c:2374)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Capture__getEvent', quals=[] (at pp.c:2374)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2376)
    FuncDecl: quals=None (at pp.c:2376)
      ParamList:  (at pp.c:2376)
        Decl: name='time', quals=[], storage=[] (at pp.c:2376)
          TypeDecl: declname='time', quals=[] (at pp.c:2376)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Capture__default__captured', quals=[] (at pp.c:2376)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Control__getControl', quals=[], storage=['static'] (at pp.c:2378)
    FuncDecl: quals=None (at pp.c:2378)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Control__getControl', quals=[] (at pp.c:2378)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__Event__fired', quals=[], storage=['static'] (at pp.c:2380)
    FuncDecl: quals=None (at pp.c:2380)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Event__fired', quals=[] (at pp.c:2380)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2382)
    FuncDecl: quals=None (at pp.c:2382)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Compare__default__fired', quals=[] (at pp.c:2382)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Timer__overflow', quals=[], storage=['static'] (at pp.c:2384)
    FuncDecl: quals=None (at pp.c:2384)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Timer__overflow', quals=[] (at pp.c:2384)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2386)
    FuncDecl: quals=None (at pp.c:2386)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Capture__getEvent', quals=[] (at pp.c:2386)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2388)
    FuncDecl: quals=None (at pp.c:2388)
      ParamList:  (at pp.c:2388)
        Decl: name='time', quals=[], storage=[] (at pp.c:2388)
          TypeDecl: declname='time', quals=[] (at pp.c:2388)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Capture__default__captured', quals=[] (at pp.c:2388)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Control__getControl', quals=[], storage=['static'] (at pp.c:2390)
    FuncDecl: quals=None (at pp.c:2390)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Control__getControl', quals=[] (at pp.c:2390)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__Event__fired', quals=[], storage=['static'] (at pp.c:2392)
    FuncDecl: quals=None (at pp.c:2392)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Event__fired', quals=[] (at pp.c:2392)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2394)
    FuncDecl: quals=None (at pp.c:2394)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Compare__default__fired', quals=[] (at pp.c:2394)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Timer__overflow', quals=[], storage=['static'] (at pp.c:2396)
    FuncDecl: quals=None (at pp.c:2396)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Timer__overflow', quals=[] (at pp.c:2396)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Capture__getEvent', quals=[], storage=['static'] (at pp.c:2398)
    FuncDecl: quals=None (at pp.c:2398)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Capture__getEvent', quals=[] (at pp.c:2398)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__Capture__default__captured', quals=[], storage=['static'] (at pp.c:2400)
    FuncDecl: quals=None (at pp.c:2400)
      ParamList:  (at pp.c:2400)
        Decl: name='time', quals=[], storage=[] (at pp.c:2400)
          TypeDecl: declname='time', quals=[] (at pp.c:2400)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Capture__default__captured', quals=[] (at pp.c:2400)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Control__getControl', quals=[], storage=['static'] (at pp.c:2402)
    FuncDecl: quals=None (at pp.c:2402)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Control__getControl', quals=[] (at pp.c:2402)
        IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__Event__fired', quals=[], storage=['static'] (at pp.c:2404)
    FuncDecl: quals=None (at pp.c:2404)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Event__fired', quals=[] (at pp.c:2404)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Compare__default__fired', quals=[], storage=['static'] (at pp.c:2406)
    FuncDecl: quals=None (at pp.c:2406)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Compare__default__fired', quals=[] (at pp.c:2406)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Timer__overflow', quals=[], storage=['static'] (at pp.c:2408)
    FuncDecl: quals=None (at pp.c:2408)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Timer__overflow', quals=[] (at pp.c:2408)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Compare__fired', quals=[], storage=['static'] (at pp.c:2410)
    FuncDecl: quals=None (at pp.c:2410)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__fired', quals=[] (at pp.c:2410)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Timer__overflow', quals=[], storage=['static'] (at pp.c:2412)
    FuncDecl: quals=None (at pp.c:2412)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Timer__overflow', quals=[] (at pp.c:2412)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Alarm__startAt', quals=[], storage=['static'] (at pp.c:2414)
    FuncDecl: quals=None (at pp.c:2414)
      ParamList:  (at pp.c:2414)
        Decl: name='t0', quals=[], storage=[] (at pp.c:2414)
          TypeDecl: declname='t0', quals=[] (at pp.c:2414)
            IdentifierType: names=['Msp430AlarmC__0__Alarm__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:2414)
          TypeDecl: declname='dt', quals=[] (at pp.c:2414)
            IdentifierType: names=['Msp430AlarmC__0__Alarm__size_type'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Alarm__startAt', quals=[] (at pp.c:2414)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Alarm__stop', quals=[], storage=['static'] (at pp.c:2416)
    FuncDecl: quals=None (at pp.c:2416)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Alarm__stop', quals=[] (at pp.c:2416)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Init__init', quals=[], storage=['static'] (at pp.c:2418)
    FuncDecl: quals=None (at pp.c:2418)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Init__init', quals=[] (at pp.c:2418)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430CounterC__0__Msp430Timer__overflow', quals=[], storage=['static'] (at pp.c:2420)
    FuncDecl: quals=None (at pp.c:2420)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Msp430Timer__overflow', quals=[] (at pp.c:2420)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__0__Counter__get', quals=[], storage=['static'] (at pp.c:2422)
    FuncDecl: quals=None (at pp.c:2422)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Counter__get', quals=[] (at pp.c:2422)
        IdentifierType: names=['Msp430CounterC__0__Counter__size_type'] (at None)
  Decl: name='Msp430CounterC__0__Counter__isOverflowPending', quals=[], storage=['static'] (at pp.c:2429)
    FuncDecl: quals=None (at pp.c:2429)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Counter__isOverflowPending', quals=[] (at pp.c:2429)
        IdentifierType: names=['bool'] (at None)
  Decl: name='TransformCounterC__0__CounterFrom__overflow', quals=[], storage=['static'] (at pp.c:2440)
    FuncDecl: quals=None (at pp.c:2440)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__CounterFrom__overflow', quals=[] (at pp.c:2440)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__0__Counter__get', quals=[], storage=['static'] (at pp.c:2442)
    FuncDecl: quals=None (at pp.c:2442)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__Counter__get', quals=[] (at pp.c:2442)
        IdentifierType: names=['TransformCounterC__0__Counter__size_type'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__getNow', quals=[], storage=['static'] (at pp.c:2444)
    FuncDecl: quals=None (at pp.c:2444)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__getNow', quals=[] (at pp.c:2444)
        IdentifierType: names=['TransformAlarmC__0__Alarm__size_type'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__startAt', quals=[], storage=['static'] (at pp.c:2446)
    FuncDecl: quals=None (at pp.c:2446)
      ParamList:  (at pp.c:2446)
        Decl: name='t0', quals=[], storage=[] (at pp.c:2446)
          TypeDecl: declname='t0', quals=[] (at pp.c:2446)
            IdentifierType: names=['TransformAlarmC__0__Alarm__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:2446)
          TypeDecl: declname='dt', quals=[] (at pp.c:2446)
            IdentifierType: names=['TransformAlarmC__0__Alarm__size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__startAt', quals=[] (at pp.c:2446)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__getAlarm', quals=[], storage=['static'] (at pp.c:2448)
    FuncDecl: quals=None (at pp.c:2448)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__getAlarm', quals=[] (at pp.c:2448)
        IdentifierType: names=['TransformAlarmC__0__Alarm__size_type'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__stop', quals=[], storage=['static'] (at pp.c:2450)
    FuncDecl: quals=None (at pp.c:2450)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__stop', quals=[] (at pp.c:2450)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__AlarmFrom__fired', quals=[], storage=['static'] (at pp.c:2455)
    FuncDecl: quals=None (at pp.c:2455)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__AlarmFrom__fired', quals=[] (at pp.c:2455)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:2457)
    FuncDecl: quals=None (at pp.c:2457)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Counter__overflow', quals=[] (at pp.c:2457)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__fired__runTask', quals=[], storage=['static'] (at pp.c:2459)
    FuncDecl: quals=None (at pp.c:2459)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__fired__runTask', quals=[] (at pp.c:2459)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__fired', quals=[], storage=['static'] (at pp.c:2461)
    FuncDecl: quals=None (at pp.c:2461)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__fired', quals=[] (at pp.c:2461)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__getNow', quals=[], storage=['static'] (at pp.c:2463)
    FuncDecl: quals=None (at pp.c:2463)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__getNow', quals=[] (at pp.c:2463)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__startOneShotAt', quals=[], storage=['static'] (at pp.c:2465)
    FuncDecl: quals=None (at pp.c:2465)
      ParamList:  (at pp.c:2465)
        Decl: name='t0', quals=[], storage=[] (at pp.c:2465)
          TypeDecl: declname='t0', quals=[] (at pp.c:2465)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:2465)
          TypeDecl: declname='dt', quals=[] (at pp.c:2465)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__startOneShotAt', quals=[] (at pp.c:2465)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__stop', quals=[], storage=['static'] (at pp.c:2467)
    FuncDecl: quals=None (at pp.c:2467)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__stop', quals=[] (at pp.c:2467)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[], storage=['static'] (at pp.c:2469)
    FuncDecl: quals=None (at pp.c:2469)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[] (at pp.c:2469)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__TimerFrom__fired', quals=[], storage=['static'] (at pp.c:2471)
    FuncDecl: quals=None (at pp.c:2471)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__fired', quals=[] (at pp.c:2471)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__default__fired', quals=[], storage=['static'] (at pp.c:2473)
    FuncDecl: quals=None (at pp.c:2473)
      ParamList:  (at pp.c:2475)
        Decl: name='arg_0x1018055d8', quals=[], storage=[] (at pp.c:2475)
          TypeDecl: declname='arg_0x1018055d8', quals=[] (at pp.c:2475)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__default__fired', quals=[] (at pp.c:2473)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__isRunning', quals=[], storage=['static'] (at pp.c:2477)
    FuncDecl: quals=None (at pp.c:2477)
      ParamList:  (at pp.c:2479)
        Decl: name='arg_0x1018055d8', quals=[], storage=[] (at pp.c:2479)
          TypeDecl: declname='arg_0x1018055d8', quals=[] (at pp.c:2479)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__isRunning', quals=[] (at pp.c:2477)
        IdentifierType: names=['bool'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__startPeriodic', quals=[], storage=['static'] (at pp.c:2481)
    FuncDecl: quals=None (at pp.c:2481)
      ParamList:  (at pp.c:2483)
        Decl: name='arg_0x1018055d8', quals=[], storage=[] (at pp.c:2483)
          TypeDecl: declname='arg_0x1018055d8', quals=[] (at pp.c:2483)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:2485)
          TypeDecl: declname='dt', quals=[] (at pp.c:2485)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__startPeriodic', quals=[] (at pp.c:2481)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__startOneShot', quals=[], storage=['static'] (at pp.c:2494)
    FuncDecl: quals=None (at pp.c:2494)
      ParamList:  (at pp.c:2496)
        Decl: name='arg_0x1018055d8', quals=[], storage=[] (at pp.c:2496)
          TypeDecl: declname='arg_0x1018055d8', quals=[] (at pp.c:2496)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:2498)
          TypeDecl: declname='dt', quals=[] (at pp.c:2498)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__startOneShot', quals=[] (at pp.c:2494)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__stop', quals=[], storage=['static'] (at pp.c:2503)
    FuncDecl: quals=None (at pp.c:2503)
      ParamList:  (at pp.c:2505)
        Decl: name='arg_0x1018055d8', quals=[], storage=[] (at pp.c:2505)
          TypeDecl: declname='arg_0x1018055d8', quals=[] (at pp.c:2505)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__stop', quals=[] (at pp.c:2503)
        IdentifierType: names=['void'] (at None)
  Decl: name='CounterToLocalTimeC__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:2507)
    FuncDecl: quals=None (at pp.c:2507)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CounterToLocalTimeC__0__Counter__overflow', quals=[] (at pp.c:2507)
        IdentifierType: names=['void'] (at None)
  Decl: name='PlatformP__Init__init', quals=[], storage=['static'] (at pp.c:2509)
    FuncDecl: quals=None (at pp.c:2509)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PlatformP__Init__init', quals=[] (at pp.c:2509)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='MotePlatformC__Init__init', quals=[], storage=['static'] (at pp.c:2511)
    FuncDecl: quals=None (at pp.c:2511)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='MotePlatformC__Init__init', quals=[] (at pp.c:2511)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[], storage=['static'] (at pp.c:2513)
    FuncDecl: quals=None (at pp.c:2513)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[] (at pp.c:2513)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[], storage=['static'] (at pp.c:2515)
    FuncDecl: quals=None (at pp.c:2515)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[] (at pp.c:2515)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[], storage=['static'] (at pp.c:2519)
    FuncDecl: quals=None (at pp.c:2519)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[] (at pp.c:2519)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[], storage=['static'] (at pp.c:2521)
    FuncDecl: quals=None (at pp.c:2521)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[] (at pp.c:2521)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[], storage=['static'] (at pp.c:2527)
    FuncDecl: quals=None (at pp.c:2527)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[] (at pp.c:2527)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[], storage=['static'] (at pp.c:2529)
    FuncDecl: quals=None (at pp.c:2529)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[] (at pp.c:2529)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[], storage=['static'] (at pp.c:2531)
    FuncDecl: quals=None (at pp.c:2531)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[] (at pp.c:2531)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[], storage=['static'] (at pp.c:2532)
    FuncDecl: quals=None (at pp.c:2532)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[] (at pp.c:2532)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__McuPowerOverride__lowestState', quals=[], storage=['static'] (at pp.c:2534)
    FuncDecl: quals=None (at pp.c:2534)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__McuPowerOverride__lowestState', quals=[] (at pp.c:2534)
        IdentifierType: names=['mcu_power_t'] (at None)
  Decl: name='Msp430ClockP__Init__init', quals=[], storage=['static'] (at pp.c:2536)
    FuncDecl: quals=None (at pp.c:2536)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Init__init', quals=[] (at pp.c:2536)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='McuSleepC__McuSleep__sleep', quals=[], storage=['static'] (at pp.c:2538)
    FuncDecl: quals=None (at pp.c:2538)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='McuSleepC__McuSleep__sleep', quals=[] (at pp.c:2538)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__TaskBasic__postTask', quals=[], storage=['static'] (at pp.c:2540)
    FuncDecl: quals=None (at pp.c:2540)
      ParamList:  (at pp.c:2542)
        Decl: name='arg_0x101487d50', quals=[], storage=[] (at pp.c:2542)
          TypeDecl: declname='arg_0x101487d50', quals=[] (at pp.c:2542)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__TaskBasic__postTask', quals=[] (at pp.c:2540)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SchedulerBasicP__TaskBasic__default__runTask', quals=[], storage=['static'] (at pp.c:2544)
    FuncDecl: quals=None (at pp.c:2544)
      ParamList:  (at pp.c:2546)
        Decl: name='arg_0x101487d50', quals=[], storage=[] (at pp.c:2546)
          TypeDecl: declname='arg_0x101487d50', quals=[] (at pp.c:2546)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__TaskBasic__default__runTask', quals=[] (at pp.c:2544)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__init', quals=[], storage=['static'] (at pp.c:2548)
    FuncDecl: quals=None (at pp.c:2548)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__init', quals=[] (at pp.c:2548)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__taskLoop', quals=[], storage=['static'] (at pp.c:2550)
    FuncDecl: quals=None (at pp.c:2550)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__taskLoop', quals=[] (at pp.c:2550)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__runNextTask', quals=[], storage=['static'] (at pp.c:2552)
    FuncDecl: quals=None (at pp.c:2552)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__runNextTask', quals=[] (at pp.c:2552)
        IdentifierType: names=['bool'] (at None)
  Decl: name='NoLedsC__Leds__led0Toggle', quals=[], storage=['static'] (at pp.c:2554)
    FuncDecl: quals=None (at pp.c:2554)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='NoLedsC__Leds__led0Toggle', quals=[] (at pp.c:2554)
        IdentifierType: names=['void'] (at None)
  Decl: name='NoLedsC__Leds__led1Toggle', quals=[], storage=['static'] (at pp.c:2556)
    FuncDecl: quals=None (at pp.c:2556)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='NoLedsC__Leds__led1Toggle', quals=[] (at pp.c:2556)
        IdentifierType: names=['void'] (at None)
  Decl: name='NoLedsC__Leds__led2Toggle', quals=[], storage=['static'] (at pp.c:2558)
    FuncDecl: quals=None (at pp.c:2558)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='NoLedsC__Leds__led2Toggle', quals=[] (at pp.c:2558)
        IdentifierType: names=['void'] (at None)
  Decl: name='SineSensorC__0__readTask__runTask', quals=[], storage=['static'] (at pp.c:2560)
    FuncDecl: quals=None (at pp.c:2560)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SineSensorC__0__readTask__runTask', quals=[] (at pp.c:2560)
        IdentifierType: names=['void'] (at None)
  Decl: name='SineSensorC__0__Read__read', quals=[], storage=['static'] (at pp.c:2562)
    FuncDecl: quals=None (at pp.c:2562)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SineSensorC__0__Read__read', quals=[] (at pp.c:2562)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Sector__default__read', quals=[], storage=['static'] (at pp.c:2564)
    FuncDecl: quals=None (at pp.c:2564)
      ParamList:  (at pp.c:2566)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:2566)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:2566)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2568)
          TypeDecl: declname='addr', quals=[] (at pp.c:2568)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2568)
          PtrDecl: quals=[] (at pp.c:2568)
            TypeDecl: declname='buf', quals=[] (at pp.c:2568)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2568)
          TypeDecl: declname='len', quals=[] (at pp.c:2568)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__default__read', quals=[] (at pp.c:2564)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Sector__writeDone', quals=[], storage=['static'] (at pp.c:2570)
    FuncDecl: quals=None (at pp.c:2570)
      ParamList:  (at pp.c:2572)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:2572)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:2572)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2574)
          TypeDecl: declname='addr', quals=[] (at pp.c:2574)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2574)
          PtrDecl: quals=[] (at pp.c:2574)
            TypeDecl: declname='buf', quals=[] (at pp.c:2574)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2574)
          TypeDecl: declname='len', quals=[] (at pp.c:2574)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2575)
          TypeDecl: declname='error', quals=[] (at pp.c:2575)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__writeDone', quals=[] (at pp.c:2570)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Sector__default__erase', quals=[], storage=['static'] (at pp.c:2585)
    FuncDecl: quals=None (at pp.c:2585)
      ParamList:  (at pp.c:2587)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:2587)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:2587)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='sector', quals=[], storage=[] (at pp.c:2589)
          TypeDecl: declname='sector', quals=[] (at pp.c:2589)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='num_sectors', quals=[], storage=[] (at pp.c:2589)
          TypeDecl: declname='num_sectors', quals=[] (at pp.c:2589)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__default__erase', quals=[] (at pp.c:2585)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Sector__eraseDone', quals=[], storage=['static'] (at pp.c:2598)
    FuncDecl: quals=None (at pp.c:2598)
      ParamList:  (at pp.c:2600)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:2600)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:2600)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='sector', quals=[], storage=[] (at pp.c:2602)
          TypeDecl: declname='sector', quals=[] (at pp.c:2602)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='num_sectors', quals=[], storage=[] (at pp.c:2602)
          TypeDecl: declname='num_sectors', quals=[] (at pp.c:2602)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2602)
          TypeDecl: declname='error', quals=[] (at pp.c:2602)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__eraseDone', quals=[] (at pp.c:2598)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Sector__computeCrcDone', quals=[], storage=['static'] (at pp.c:2604)
    FuncDecl: quals=None (at pp.c:2604)
      ParamList:  (at pp.c:2606)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:2606)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:2606)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2608)
          TypeDecl: declname='addr', quals=[] (at pp.c:2608)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2608)
          TypeDecl: declname='len', quals=[] (at pp.c:2608)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='crc', quals=[], storage=[] (at pp.c:2609)
          TypeDecl: declname='crc', quals=[] (at pp.c:2609)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2609)
          TypeDecl: declname='error', quals=[] (at pp.c:2609)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__computeCrcDone', quals=[] (at pp.c:2604)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Sector__default__write', quals=[], storage=['static'] (at pp.c:2611)
    FuncDecl: quals=None (at pp.c:2611)
      ParamList:  (at pp.c:2613)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:2613)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:2613)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2615)
          TypeDecl: declname='addr', quals=[] (at pp.c:2615)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2615)
          PtrDecl: quals=[] (at pp.c:2615)
            TypeDecl: declname='buf', quals=[] (at pp.c:2615)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2615)
          TypeDecl: declname='len', quals=[] (at pp.c:2615)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__default__write', quals=[] (at pp.c:2611)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Sector__default__getNumSectors', quals=[], storage=['static'] (at pp.c:2617)
    FuncDecl: quals=None (at pp.c:2617)
      ParamList:  (at pp.c:2619)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:2619)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:2619)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__default__getNumSectors', quals=[] (at pp.c:2617)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pLogP__Sector__readDone', quals=[], storage=['static'] (at pp.c:2621)
    FuncDecl: quals=None (at pp.c:2621)
      ParamList:  (at pp.c:2623)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:2623)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:2623)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2625)
          TypeDecl: declname='addr', quals=[] (at pp.c:2625)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2625)
          PtrDecl: quals=[] (at pp.c:2625)
            TypeDecl: declname='buf', quals=[] (at pp.c:2625)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2625)
          TypeDecl: declname='len', quals=[] (at pp.c:2625)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2626)
          TypeDecl: declname='error', quals=[] (at pp.c:2626)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__readDone', quals=[] (at pp.c:2621)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Read__default__readDone', quals=[], storage=['static'] (at pp.c:2628)
    FuncDecl: quals=None (at pp.c:2628)
      ParamList:  (at pp.c:2630)
        Decl: name='arg_0x101931728', quals=[], storage=[] (at pp.c:2630)
          TypeDecl: declname='arg_0x101931728', quals=[] (at pp.c:2630)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2632)
          PtrDecl: quals=[] (at pp.c:2632)
            TypeDecl: declname='buf', quals=[] (at pp.c:2632)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2637)
          TypeDecl: declname='len', quals=[] (at pp.c:2637)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2637)
          TypeDecl: declname='error', quals=[] (at pp.c:2637)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Read__default__readDone', quals=[] (at pp.c:2628)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Read__currentOffset', quals=[], storage=['static'] (at pp.c:2639)
    FuncDecl: quals=None (at pp.c:2639)
      ParamList:  (at pp.c:2641)
        Decl: name='arg_0x101931728', quals=[], storage=[] (at pp.c:2641)
          TypeDecl: declname='arg_0x101931728', quals=[] (at pp.c:2641)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Read__currentOffset', quals=[] (at pp.c:2639)
        IdentifierType: names=['storage_cookie_t'] (at None)
  Decl: name='Stm25pLogP__Read__read', quals=[], storage=['static'] (at pp.c:2643)
    FuncDecl: quals=None (at pp.c:2643)
      ParamList:  (at pp.c:2645)
        Decl: name='arg_0x101931728', quals=[], storage=[] (at pp.c:2645)
          TypeDecl: declname='arg_0x101931728', quals=[] (at pp.c:2645)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2647)
          PtrDecl: quals=[] (at pp.c:2647)
            TypeDecl: declname='buf', quals=[] (at pp.c:2647)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2653)
          TypeDecl: declname='len', quals=[] (at pp.c:2653)
            IdentifierType: names=['storage_len_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Read__read', quals=[] (at pp.c:2643)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Read__default__seekDone', quals=[], storage=['static'] (at pp.c:2655)
    FuncDecl: quals=None (at pp.c:2655)
      ParamList:  (at pp.c:2657)
        Decl: name='arg_0x101931728', quals=[], storage=[] (at pp.c:2657)
          TypeDecl: declname='arg_0x101931728', quals=[] (at pp.c:2657)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2659)
          TypeDecl: declname='error', quals=[] (at pp.c:2659)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Read__default__seekDone', quals=[] (at pp.c:2655)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Circular__default__get', quals=[], storage=['static'] (at pp.c:2661)
    FuncDecl: quals=None (at pp.c:2661)
      ParamList:  (at pp.c:2663)
        Decl: name='arg_0x101944858', quals=[], storage=[] (at pp.c:2663)
          TypeDecl: declname='arg_0x101944858', quals=[] (at pp.c:2663)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Circular__default__get', quals=[] (at pp.c:2661)
        IdentifierType: names=['Stm25pLogP__Circular__val_t'] (at None)
  Decl: name='Stm25pLogP__Init__init', quals=[], storage=['static'] (at pp.c:2665)
    FuncDecl: quals=None (at pp.c:2665)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pLogP__Init__init', quals=[] (at pp.c:2665)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Write__currentOffset', quals=[], storage=['static'] (at pp.c:2667)
    FuncDecl: quals=None (at pp.c:2667)
      ParamList:  (at pp.c:2669)
        Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:2669)
          TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:2669)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__currentOffset', quals=[] (at pp.c:2667)
        IdentifierType: names=['storage_cookie_t'] (at None)
  Decl: name='Stm25pLogP__Write__default__syncDone', quals=[], storage=['static'] (at pp.c:2671)
    FuncDecl: quals=None (at pp.c:2671)
      ParamList:  (at pp.c:2673)
        Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:2673)
          TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:2673)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2675)
          TypeDecl: declname='error', quals=[] (at pp.c:2675)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__default__syncDone', quals=[] (at pp.c:2671)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Write__erase', quals=[], storage=['static'] (at pp.c:2677)
    FuncDecl: quals=None (at pp.c:2677)
      ParamList:  (at pp.c:2679)
        Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:2679)
          TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:2679)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__erase', quals=[] (at pp.c:2677)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Write__default__eraseDone', quals=[], storage=['static'] (at pp.c:2681)
    FuncDecl: quals=None (at pp.c:2681)
      ParamList:  (at pp.c:2683)
        Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:2683)
          TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:2683)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2685)
          TypeDecl: declname='error', quals=[] (at pp.c:2685)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__default__eraseDone', quals=[] (at pp.c:2681)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Write__default__appendDone', quals=[], storage=['static'] (at pp.c:2687)
    FuncDecl: quals=None (at pp.c:2687)
      ParamList:  (at pp.c:2689)
        Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:2689)
          TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:2689)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2691)
          PtrDecl: quals=[] (at pp.c:2691)
            TypeDecl: declname='buf', quals=[] (at pp.c:2691)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2698)
          TypeDecl: declname='len', quals=[] (at pp.c:2698)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='recordsLost', quals=[], storage=[] (at pp.c:2698)
          TypeDecl: declname='recordsLost', quals=[] (at pp.c:2698)
            IdentifierType: names=['bool'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2699)
          TypeDecl: declname='error', quals=[] (at pp.c:2699)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__default__appendDone', quals=[] (at pp.c:2687)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Write__append', quals=[], storage=['static'] (at pp.c:2701)
    FuncDecl: quals=None (at pp.c:2701)
      ParamList:  (at pp.c:2703)
        Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:2703)
          TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:2703)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2705)
          PtrDecl: quals=[] (at pp.c:2705)
            TypeDecl: declname='buf', quals=[] (at pp.c:2705)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2712)
          TypeDecl: declname='len', quals=[] (at pp.c:2712)
            IdentifierType: names=['storage_len_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__append', quals=[] (at pp.c:2701)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__ClientResource__default__release', quals=[], storage=['static'] (at pp.c:2714)
    FuncDecl: quals=None (at pp.c:2714)
      ParamList:  (at pp.c:2716)
        Decl: name='arg_0x10194c220', quals=[], storage=[] (at pp.c:2716)
          TypeDecl: declname='arg_0x10194c220', quals=[] (at pp.c:2716)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__ClientResource__default__release', quals=[] (at pp.c:2714)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__ClientResource__default__request', quals=[], storage=['static'] (at pp.c:2718)
    FuncDecl: quals=None (at pp.c:2718)
      ParamList:  (at pp.c:2720)
        Decl: name='arg_0x10194c220', quals=[], storage=[] (at pp.c:2720)
          TypeDecl: declname='arg_0x10194c220', quals=[] (at pp.c:2720)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__ClientResource__default__request', quals=[] (at pp.c:2718)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__ClientResource__granted', quals=[], storage=['static'] (at pp.c:2722)
    FuncDecl: quals=None (at pp.c:2722)
      ParamList:  (at pp.c:2724)
        Decl: name='arg_0x10194c220', quals=[], storage=[] (at pp.c:2724)
          TypeDecl: declname='arg_0x10194c220', quals=[] (at pp.c:2724)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__ClientResource__granted', quals=[] (at pp.c:2722)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__SplitControl__start', quals=[], storage=['static'] (at pp.c:2726)
    FuncDecl: quals=None (at pp.c:2726)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__SplitControl__start', quals=[] (at pp.c:2726)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__SplitControl__stop', quals=[], storage=['static'] (at pp.c:2728)
    FuncDecl: quals=None (at pp.c:2728)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__SplitControl__stop', quals=[] (at pp.c:2728)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Sector__read', quals=[], storage=['static'] (at pp.c:2730)
    FuncDecl: quals=None (at pp.c:2730)
      ParamList:  (at pp.c:2732)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:2732)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:2732)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2734)
          TypeDecl: declname='addr', quals=[] (at pp.c:2734)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2734)
          PtrDecl: quals=[] (at pp.c:2734)
            TypeDecl: declname='buf', quals=[] (at pp.c:2734)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2734)
          TypeDecl: declname='len', quals=[] (at pp.c:2734)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__read', quals=[] (at pp.c:2730)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Sector__default__writeDone', quals=[], storage=['static'] (at pp.c:2736)
    FuncDecl: quals=None (at pp.c:2736)
      ParamList:  (at pp.c:2738)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:2738)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:2738)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2740)
          TypeDecl: declname='addr', quals=[] (at pp.c:2740)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2740)
          PtrDecl: quals=[] (at pp.c:2740)
            TypeDecl: declname='buf', quals=[] (at pp.c:2740)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2740)
          TypeDecl: declname='len', quals=[] (at pp.c:2740)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2741)
          TypeDecl: declname='error', quals=[] (at pp.c:2741)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__default__writeDone', quals=[] (at pp.c:2736)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__erase', quals=[], storage=['static'] (at pp.c:2751)
    FuncDecl: quals=None (at pp.c:2751)
      ParamList:  (at pp.c:2753)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:2753)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:2753)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='sector', quals=[], storage=[] (at pp.c:2755)
          TypeDecl: declname='sector', quals=[] (at pp.c:2755)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='num_sectors', quals=[], storage=[] (at pp.c:2755)
          TypeDecl: declname='num_sectors', quals=[] (at pp.c:2755)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__erase', quals=[] (at pp.c:2751)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Sector__default__eraseDone', quals=[], storage=['static'] (at pp.c:2764)
    FuncDecl: quals=None (at pp.c:2764)
      ParamList:  (at pp.c:2766)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:2766)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:2766)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='sector', quals=[], storage=[] (at pp.c:2768)
          TypeDecl: declname='sector', quals=[] (at pp.c:2768)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='num_sectors', quals=[], storage=[] (at pp.c:2768)
          TypeDecl: declname='num_sectors', quals=[] (at pp.c:2768)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2768)
          TypeDecl: declname='error', quals=[] (at pp.c:2768)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__default__eraseDone', quals=[] (at pp.c:2764)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__default__computeCrcDone', quals=[], storage=['static'] (at pp.c:2770)
    FuncDecl: quals=None (at pp.c:2770)
      ParamList:  (at pp.c:2772)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:2772)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:2772)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2774)
          TypeDecl: declname='addr', quals=[] (at pp.c:2774)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2774)
          TypeDecl: declname='len', quals=[] (at pp.c:2774)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='crc', quals=[], storage=[] (at pp.c:2775)
          TypeDecl: declname='crc', quals=[] (at pp.c:2775)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2775)
          TypeDecl: declname='error', quals=[] (at pp.c:2775)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__default__computeCrcDone', quals=[] (at pp.c:2770)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__write', quals=[], storage=['static'] (at pp.c:2777)
    FuncDecl: quals=None (at pp.c:2777)
      ParamList:  (at pp.c:2779)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:2779)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:2779)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2781)
          TypeDecl: declname='addr', quals=[] (at pp.c:2781)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2781)
          PtrDecl: quals=[] (at pp.c:2781)
            TypeDecl: declname='buf', quals=[] (at pp.c:2781)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2781)
          TypeDecl: declname='len', quals=[] (at pp.c:2781)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__write', quals=[] (at pp.c:2777)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Sector__getNumSectors', quals=[], storage=['static'] (at pp.c:2783)
    FuncDecl: quals=None (at pp.c:2783)
      ParamList:  (at pp.c:2785)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:2785)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:2785)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__getNumSectors', quals=[] (at pp.c:2783)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pSectorP__Sector__default__readDone', quals=[], storage=['static'] (at pp.c:2787)
    FuncDecl: quals=None (at pp.c:2787)
      ParamList:  (at pp.c:2789)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:2789)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:2789)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2791)
          TypeDecl: declname='addr', quals=[] (at pp.c:2791)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2791)
          PtrDecl: quals=[] (at pp.c:2791)
            TypeDecl: declname='buf', quals=[] (at pp.c:2791)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2791)
          TypeDecl: declname='len', quals=[] (at pp.c:2791)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2792)
          TypeDecl: declname='error', quals=[] (at pp.c:2792)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__default__readDone', quals=[] (at pp.c:2787)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Stm25pResource__granted', quals=[], storage=['static'] (at pp.c:2794)
    FuncDecl: quals=None (at pp.c:2794)
      ParamList:  (at pp.c:2796)
        Decl: name='arg_0x101a03a68', quals=[], storage=[] (at pp.c:2796)
          TypeDecl: declname='arg_0x101a03a68', quals=[] (at pp.c:2796)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Stm25pResource__granted', quals=[] (at pp.c:2794)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Volume__default__getVolumeId', quals=[], storage=['static'] (at pp.c:2798)
    FuncDecl: quals=None (at pp.c:2798)
      ParamList:  (at pp.c:2800)
        Decl: name='arg_0x101a04d10', quals=[], storage=[] (at pp.c:2800)
          TypeDecl: declname='arg_0x101a04d10', quals=[] (at pp.c:2800)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Volume__default__getVolumeId', quals=[] (at pp.c:2798)
        IdentifierType: names=['volume_id_t'] (at None)
  Decl: name='Stm25pSectorP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:2802)
    FuncDecl: quals=None (at pp.c:2802)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__SpiResource__granted', quals=[] (at pp.c:2802)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Spi__sectorEraseDone', quals=[], storage=['static'] (at pp.c:2804)
    FuncDecl: quals=None (at pp.c:2804)
      ParamList:  (at pp.c:2804)
        Decl: name='sector', quals=[], storage=[] (at pp.c:2804)
          TypeDecl: declname='sector', quals=[] (at pp.c:2804)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2804)
          TypeDecl: declname='error', quals=[] (at pp.c:2804)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__sectorEraseDone', quals=[] (at pp.c:2804)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Spi__readDone', quals=[], storage=['static'] (at pp.c:2806)
    FuncDecl: quals=None (at pp.c:2806)
      ParamList:  (at pp.c:2806)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2806)
          TypeDecl: declname='addr', quals=[] (at pp.c:2806)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2806)
          PtrDecl: quals=[] (at pp.c:2806)
            TypeDecl: declname='buf', quals=[] (at pp.c:2806)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2807)
          TypeDecl: declname='len', quals=[] (at pp.c:2807)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2807)
          TypeDecl: declname='error', quals=[] (at pp.c:2807)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__readDone', quals=[] (at pp.c:2806)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Spi__pageProgramDone', quals=[], storage=['static'] (at pp.c:2809)
    FuncDecl: quals=None (at pp.c:2809)
      ParamList:  (at pp.c:2809)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2809)
          TypeDecl: declname='addr', quals=[] (at pp.c:2809)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2809)
          PtrDecl: quals=[] (at pp.c:2809)
            TypeDecl: declname='buf', quals=[] (at pp.c:2809)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2810)
          TypeDecl: declname='len', quals=[] (at pp.c:2810)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2810)
          TypeDecl: declname='error', quals=[] (at pp.c:2810)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__pageProgramDone', quals=[] (at pp.c:2809)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Spi__computeCrcDone', quals=[], storage=['static'] (at pp.c:2812)
    FuncDecl: quals=None (at pp.c:2812)
      ParamList:  (at pp.c:2812)
        Decl: name='crc', quals=[], storage=[] (at pp.c:2812)
          TypeDecl: declname='crc', quals=[] (at pp.c:2812)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2812)
          TypeDecl: declname='addr', quals=[] (at pp.c:2812)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2813)
          TypeDecl: declname='len', quals=[] (at pp.c:2813)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2813)
          TypeDecl: declname='error', quals=[] (at pp.c:2813)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__computeCrcDone', quals=[] (at pp.c:2812)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Spi__bulkEraseDone', quals=[], storage=['static'] (at pp.c:2815)
    FuncDecl: quals=None (at pp.c:2815)
      ParamList:  (at pp.c:2815)
        Decl: name='error', quals=[], storage=[] (at pp.c:2815)
          TypeDecl: declname='error', quals=[] (at pp.c:2815)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__bulkEraseDone', quals=[] (at pp.c:2815)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__ClientResource__release', quals=[], storage=['static'] (at pp.c:2817)
    FuncDecl: quals=None (at pp.c:2817)
      ParamList:  (at pp.c:2819)
        Decl: name='arg_0x101a0a108', quals=[], storage=[] (at pp.c:2819)
          TypeDecl: declname='arg_0x101a0a108', quals=[] (at pp.c:2819)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__ClientResource__release', quals=[] (at pp.c:2817)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__ClientResource__request', quals=[], storage=['static'] (at pp.c:2821)
    FuncDecl: quals=None (at pp.c:2821)
      ParamList:  (at pp.c:2823)
        Decl: name='arg_0x101a0a108', quals=[], storage=[] (at pp.c:2823)
          TypeDecl: declname='arg_0x101a0a108', quals=[] (at pp.c:2823)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__ClientResource__request', quals=[] (at pp.c:2821)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__ClientResource__default__granted', quals=[], storage=['static'] (at pp.c:2825)
    FuncDecl: quals=None (at pp.c:2825)
      ParamList:  (at pp.c:2827)
        Decl: name='arg_0x101a0a108', quals=[], storage=[] (at pp.c:2827)
          TypeDecl: declname='arg_0x101a0a108', quals=[] (at pp.c:2827)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__ClientResource__default__granted', quals=[] (at pp.c:2825)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__signalDone_task__runTask', quals=[], storage=['static'] (at pp.c:2829)
    FuncDecl: quals=None (at pp.c:2829)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__signalDone_task__runTask', quals=[] (at pp.c:2829)
        IdentifierType: names=['void'] (at None)
  Decl: name='FcfsResourceQueueC__1__Init__init', quals=[], storage=['static'] (at pp.c:2831)
    FuncDecl: quals=None (at pp.c:2831)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__Init__init', quals=[] (at pp.c:2831)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__enqueue', quals=[], storage=['static'] (at pp.c:2833)
    FuncDecl: quals=None (at pp.c:2833)
      ParamList:  (at pp.c:2833)
        Decl: name='id', quals=[], storage=[] (at pp.c:2833)
          TypeDecl: declname='id', quals=[] (at pp.c:2833)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__enqueue', quals=[] (at pp.c:2833)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[], storage=['static'] (at pp.c:2835)
    FuncDecl: quals=None (at pp.c:2835)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[] (at pp.c:2835)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__isEnqueued', quals=[], storage=['static'] (at pp.c:2844)
    FuncDecl: quals=None (at pp.c:2844)
      ParamList:  (at pp.c:2844)
        Decl: name='id', quals=[], storage=[] (at pp.c:2844)
          TypeDecl: declname='id', quals=[] (at pp.c:2844)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__isEnqueued', quals=[] (at pp.c:2844)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[], storage=['static'] (at pp.c:2852)
    FuncDecl: quals=None (at pp.c:2852)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[] (at pp.c:2852)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='ArbiterP__0__ResourceRequested__default__requested', quals=[], storage=['static'] (at pp.c:2854)
    FuncDecl: quals=None (at pp.c:2854)
      ParamList:  (at pp.c:2856)
        Decl: name='arg_0x101ac2020', quals=[], storage=[] (at pp.c:2856)
          TypeDecl: declname='arg_0x101ac2020', quals=[] (at pp.c:2856)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceRequested__default__requested', quals=[] (at pp.c:2854)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[], storage=['static'] (at pp.c:2858)
    FuncDecl: quals=None (at pp.c:2858)
      ParamList:  (at pp.c:2860)
        Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:2860)
          TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:2860)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:2858)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__default__configure', quals=[], storage=['static'] (at pp.c:2862)
    FuncDecl: quals=None (at pp.c:2862)
      ParamList:  (at pp.c:2864)
        Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:2864)
          TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:2864)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__configure', quals=[] (at pp.c:2862)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:2866)
    FuncDecl: quals=None (at pp.c:2866)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__release', quals=[] (at pp.c:2866)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__Resource__release', quals=[], storage=['static'] (at pp.c:2868)
    FuncDecl: quals=None (at pp.c:2868)
      ParamList:  (at pp.c:2870)
        Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:2870)
          TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:2870)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__release', quals=[] (at pp.c:2868)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__Resource__request', quals=[], storage=['static'] (at pp.c:2872)
    FuncDecl: quals=None (at pp.c:2872)
      ParamList:  (at pp.c:2874)
        Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:2874)
          TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:2874)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__request', quals=[] (at pp.c:2872)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__grantedTask__runTask', quals=[], storage=['static'] (at pp.c:2876)
    FuncDecl: quals=None (at pp.c:2876)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__grantedTask__runTask', quals=[] (at pp.c:2876)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__SplitControl__startDone', quals=[], storage=['static'] (at pp.c:2878)
    FuncDecl: quals=None (at pp.c:2878)
      ParamList:  (at pp.c:2878)
        Decl: name='error', quals=[], storage=[] (at pp.c:2878)
          TypeDecl: declname='error', quals=[] (at pp.c:2878)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__SplitControl__startDone', quals=[] (at pp.c:2878)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__SplitControl__stopDone', quals=[], storage=['static'] (at pp.c:2880)
    FuncDecl: quals=None (at pp.c:2880)
      ParamList:  (at pp.c:2880)
        Decl: name='error', quals=[], storage=[] (at pp.c:2880)
          TypeDecl: declname='error', quals=[] (at pp.c:2880)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__SplitControl__stopDone', quals=[] (at pp.c:2880)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__TimerMilli__fired', quals=[], storage=['static'] (at pp.c:2882)
    FuncDecl: quals=None (at pp.c:2882)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__TimerMilli__fired', quals=[] (at pp.c:2882)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[], storage=['static'] (at pp.c:2884)
    FuncDecl: quals=None (at pp.c:2884)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[] (at pp.c:2884)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__timerTask__runTask', quals=[], storage=['static'] (at pp.c:2886)
    FuncDecl: quals=None (at pp.c:2886)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__timerTask__runTask', quals=[] (at pp.c:2886)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__ResourceDefaultOwner__requested', quals=[], storage=['static'] (at pp.c:2888)
    FuncDecl: quals=None (at pp.c:2888)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__ResourceDefaultOwner__requested', quals=[] (at pp.c:2888)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__ResourceDefaultOwner__granted', quals=[], storage=['static'] (at pp.c:2890)
    FuncDecl: quals=None (at pp.c:2890)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__ResourceDefaultOwner__granted', quals=[] (at pp.c:2890)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__startTask__runTask', quals=[], storage=['static'] (at pp.c:2892)
    FuncDecl: quals=None (at pp.c:2892)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__startTask__runTask', quals=[] (at pp.c:2892)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__StdControl__default__start', quals=[], storage=['static'] (at pp.c:2894)
    FuncDecl: quals=None (at pp.c:2894)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__StdControl__default__start', quals=[] (at pp.c:2894)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DeferredPowerManagerP__0__StdControl__default__stop', quals=[], storage=['static'] (at pp.c:2904)
    FuncDecl: quals=None (at pp.c:2904)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__StdControl__default__stop', quals=[] (at pp.c:2904)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:2906)
    FuncDecl: quals=None (at pp.c:2906)
      ParamList:  (at pp.c:2908)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:2908)
          PtrDecl: quals=[] (at pp.c:2908)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:2908)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:2909)
          PtrDecl: quals=[] (at pp.c:2909)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:2909)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2915)
          TypeDecl: declname='len', quals=[] (at pp.c:2915)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2916)
          TypeDecl: declname='error', quals=[] (at pp.c:2916)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__SpiPacket__sendDone', quals=[] (at pp.c:2906)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__Init__init', quals=[], storage=['static'] (at pp.c:2918)
    FuncDecl: quals=None (at pp.c:2918)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__Init__init', quals=[] (at pp.c:2918)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__Spi__powerDown', quals=[], storage=['static'] (at pp.c:2920)
    FuncDecl: quals=None (at pp.c:2920)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__powerDown', quals=[] (at pp.c:2920)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__Spi__read', quals=[], storage=['static'] (at pp.c:2922)
    FuncDecl: quals=None (at pp.c:2922)
      ParamList:  (at pp.c:2922)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2922)
          TypeDecl: declname='addr', quals=[] (at pp.c:2922)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2922)
          PtrDecl: quals=[] (at pp.c:2922)
            TypeDecl: declname='buf', quals=[] (at pp.c:2922)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2923)
          TypeDecl: declname='len', quals=[] (at pp.c:2923)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__read', quals=[] (at pp.c:2922)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__Spi__sectorErase', quals=[], storage=['static'] (at pp.c:2925)
    FuncDecl: quals=None (at pp.c:2925)
      ParamList:  (at pp.c:2925)
        Decl: name='sector', quals=[], storage=[] (at pp.c:2925)
          TypeDecl: declname='sector', quals=[] (at pp.c:2925)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__sectorErase', quals=[] (at pp.c:2925)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__Spi__powerUp', quals=[], storage=['static'] (at pp.c:2927)
    FuncDecl: quals=None (at pp.c:2927)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__powerUp', quals=[] (at pp.c:2927)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__Spi__pageProgram', quals=[], storage=['static'] (at pp.c:2929)
    FuncDecl: quals=None (at pp.c:2929)
      ParamList:  (at pp.c:2929)
        Decl: name='addr', quals=[], storage=[] (at pp.c:2929)
          TypeDecl: declname='addr', quals=[] (at pp.c:2929)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:2929)
          PtrDecl: quals=[] (at pp.c:2929)
            TypeDecl: declname='buf', quals=[] (at pp.c:2929)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2930)
          TypeDecl: declname='len', quals=[] (at pp.c:2930)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__pageProgram', quals=[] (at pp.c:2929)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:2932)
    FuncDecl: quals=None (at pp.c:2932)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__SpiResource__granted', quals=[] (at pp.c:2932)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__ClientResource__release', quals=[], storage=['static'] (at pp.c:2934)
    FuncDecl: quals=None (at pp.c:2934)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__ClientResource__release', quals=[] (at pp.c:2934)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__ClientResource__request', quals=[], storage=['static'] (at pp.c:2936)
    FuncDecl: quals=None (at pp.c:2936)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__ClientResource__request', quals=[] (at pp.c:2936)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[], storage=['static'] (at pp.c:2938)
    FuncDecl: quals=None (at pp.c:2938)
      ParamList:  (at pp.c:2940)
        Decl: name='arg_0x101c3d220', quals=[], storage=[] (at pp.c:2940)
          TypeDecl: declname='arg_0x101c3d220', quals=[] (at pp.c:2940)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:2938)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[], storage=['static'] (at pp.c:2942)
    FuncDecl: quals=None (at pp.c:2942)
      ParamList:  (at pp.c:2944)
        Decl: name='arg_0x101c3d220', quals=[], storage=[] (at pp.c:2944)
          TypeDecl: declname='arg_0x101c3d220', quals=[] (at pp.c:2944)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[] (at pp.c:2942)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[], storage=['static'] (at pp.c:2946)
    FuncDecl: quals=None (at pp.c:2946)
      ParamList:  (at pp.c:2948)
        Decl: name='arg_0x101c3b158', quals=[], storage=[] (at pp.c:2948)
          TypeDecl: declname='arg_0x101c3b158', quals=[] (at pp.c:2948)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:2950)
          PtrDecl: quals=[] (at pp.c:2950)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:2950)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:2952)
          PtrDecl: quals=[] (at pp.c:2952)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:2952)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2961)
          TypeDecl: declname='len', quals=[] (at pp.c:2961)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[] (at pp.c:2946)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[], storage=['static'] (at pp.c:2963)
    FuncDecl: quals=None (at pp.c:2963)
      ParamList:  (at pp.c:2965)
        Decl: name='arg_0x101c3b158', quals=[], storage=[] (at pp.c:2965)
          TypeDecl: declname='arg_0x101c3b158', quals=[] (at pp.c:2965)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:2967)
          PtrDecl: quals=[] (at pp.c:2967)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:2967)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:2968)
          PtrDecl: quals=[] (at pp.c:2968)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:2968)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:2974)
          TypeDecl: declname='len', quals=[] (at pp.c:2974)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:2975)
          TypeDecl: declname='error', quals=[] (at pp.c:2975)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[] (at pp.c:2963)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[], storage=['static'] (at pp.c:2977)
    FuncDecl: quals=None (at pp.c:2977)
      ParamList:  (at pp.c:2979)
        Decl: name='arg_0x101c38220', quals=[], storage=[] (at pp.c:2979)
          TypeDecl: declname='arg_0x101c38220', quals=[] (at pp.c:2979)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:2977)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[] (at pp.c:2977)
          IdentifierType: names=['msp430_spi_union_config_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiByte__write', quals=[], storage=['static'] (at pp.c:2981)
    FuncDecl: quals=None (at pp.c:2981)
      ParamList:  (at pp.c:2981)
        Decl: name='tx', quals=[], storage=[] (at pp.c:2981)
          TypeDecl: declname='tx', quals=[] (at pp.c:2981)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiByte__write', quals=[] (at pp.c:2981)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[], storage=['static'] (at pp.c:2983)
    FuncDecl: quals=None (at pp.c:2983)
      ParamList:  (at pp.c:2985)
        Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:2985)
          TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:2985)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[] (at pp.c:2983)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[], storage=['static'] (at pp.c:2987)
    FuncDecl: quals=None (at pp.c:2987)
      ParamList:  (at pp.c:2989)
        Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:2989)
          TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:2989)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[] (at pp.c:2987)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[], storage=['static'] (at pp.c:2991)
    FuncDecl: quals=None (at pp.c:2991)
      ParamList:  (at pp.c:2993)
        Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:2993)
          TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:2993)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[] (at pp.c:2991)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[], storage=['static'] (at pp.c:2995)
    FuncDecl: quals=None (at pp.c:2995)
      ParamList:  (at pp.c:2997)
        Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:2997)
          TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:2997)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[] (at pp.c:2995)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[], storage=['static'] (at pp.c:2999)
    FuncDecl: quals=None (at pp.c:2999)
      ParamList:  (at pp.c:3001)
        Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:3001)
          TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:3001)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[] (at pp.c:2999)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__release', quals=[], storage=['static'] (at pp.c:3003)
    FuncDecl: quals=None (at pp.c:3003)
      ParamList:  (at pp.c:3005)
        Decl: name='arg_0x101c3e020', quals=[], storage=[] (at pp.c:3005)
          TypeDecl: declname='arg_0x101c3e020', quals=[] (at pp.c:3005)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__release', quals=[] (at pp.c:3003)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:3007)
    FuncDecl: quals=None (at pp.c:3007)
      ParamList:  (at pp.c:3009)
        Decl: name='arg_0x101c3e020', quals=[], storage=[] (at pp.c:3009)
          TypeDecl: declname='arg_0x101c3e020', quals=[] (at pp.c:3009)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[] (at pp.c:3007)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__request', quals=[], storage=['static'] (at pp.c:3011)
    FuncDecl: quals=None (at pp.c:3011)
      ParamList:  (at pp.c:3013)
        Decl: name='arg_0x101c3e020', quals=[], storage=[] (at pp.c:3013)
          TypeDecl: declname='arg_0x101c3e020', quals=[] (at pp.c:3013)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__request', quals=[] (at pp.c:3011)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[], storage=['static'] (at pp.c:3015)
    FuncDecl: quals=None (at pp.c:3015)
      ParamList:  (at pp.c:3017)
        Decl: name='arg_0x101c3e020', quals=[], storage=[] (at pp.c:3017)
          TypeDecl: declname='arg_0x101c3e020', quals=[] (at pp.c:3017)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[] (at pp.c:3015)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[], storage=['static'] (at pp.c:3019)
    FuncDecl: quals=None (at pp.c:3019)
      ParamList:  (at pp.c:3021)
        Decl: name='arg_0x101c3e020', quals=[], storage=[] (at pp.c:3021)
          TypeDecl: declname='arg_0x101c3e020', quals=[] (at pp.c:3021)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[] (at pp.c:3019)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[], storage=['static'] (at pp.c:3023)
    FuncDecl: quals=None (at pp.c:3023)
      ParamList:  (at pp.c:3023)
        Decl: name='data', quals=[], storage=[] (at pp.c:3023)
          TypeDecl: declname='data', quals=[] (at pp.c:3023)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[] (at pp.c:3023)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[], storage=['static'] (at pp.c:3025)
    FuncDecl: quals=None (at pp.c:3025)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[] (at pp.c:3025)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[], storage=['static'] (at pp.c:3027)
    FuncDecl: quals=None (at pp.c:3027)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[] (at pp.c:3027)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__enableRxIntr', quals=[], storage=['static'] (at pp.c:3029)
    FuncDecl: quals=None (at pp.c:3029)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__enableRxIntr', quals=[] (at pp.c:3029)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__clrRxIntr', quals=[], storage=['static'] (at pp.c:3031)
    FuncDecl: quals=None (at pp.c:3031)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__clrRxIntr', quals=[] (at pp.c:3031)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__resetUsart', quals=[], storage=['static'] (at pp.c:3033)
    FuncDecl: quals=None (at pp.c:3033)
      ParamList:  (at pp.c:3033)
        Decl: name='reset', quals=[], storage=[] (at pp.c:3033)
          TypeDecl: declname='reset', quals=[] (at pp.c:3033)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__resetUsart', quals=[] (at pp.c:3033)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableIntr', quals=[], storage=['static'] (at pp.c:3035)
    FuncDecl: quals=None (at pp.c:3035)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableIntr', quals=[] (at pp.c:3035)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setUmctl', quals=[], storage=['static'] (at pp.c:3037)
    FuncDecl: quals=None (at pp.c:3037)
      ParamList:  (at pp.c:3037)
        Decl: name='umctl', quals=[], storage=[] (at pp.c:3037)
          TypeDecl: declname='umctl', quals=[] (at pp.c:3037)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setUmctl', quals=[] (at pp.c:3037)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableRxIntr', quals=[], storage=['static'] (at pp.c:3039)
    FuncDecl: quals=None (at pp.c:3039)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableRxIntr', quals=[] (at pp.c:3039)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__clrIntr', quals=[], storage=['static'] (at pp.c:3041)
    FuncDecl: quals=None (at pp.c:3041)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__clrIntr', quals=[] (at pp.c:3041)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setUbr', quals=[], storage=['static'] (at pp.c:3043)
    FuncDecl: quals=None (at pp.c:3043)
      ParamList:  (at pp.c:3043)
        Decl: name='ubr', quals=[], storage=[] (at pp.c:3043)
          TypeDecl: declname='ubr', quals=[] (at pp.c:3043)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setUbr', quals=[] (at pp.c:3043)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__tx', quals=[], storage=['static'] (at pp.c:3045)
    FuncDecl: quals=None (at pp.c:3045)
      ParamList:  (at pp.c:3045)
        Decl: name='data', quals=[], storage=[] (at pp.c:3045)
          TypeDecl: declname='data', quals=[] (at pp.c:3045)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__tx', quals=[] (at pp.c:3045)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableUart', quals=[], storage=['static'] (at pp.c:3047)
    FuncDecl: quals=None (at pp.c:3047)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableUart', quals=[] (at pp.c:3047)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__enableSpi', quals=[], storage=['static'] (at pp.c:3049)
    FuncDecl: quals=None (at pp.c:3049)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__enableSpi', quals=[] (at pp.c:3049)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setModeSpi', quals=[], storage=['static'] (at pp.c:3051)
    FuncDecl: quals=None (at pp.c:3051)
      ParamList:  (at pp.c:3051)
        Decl: name='config', quals=[], storage=[] (at pp.c:3051)
          PtrDecl: quals=[] (at pp.c:3051)
            TypeDecl: declname='config', quals=[] (at pp.c:3051)
              IdentifierType: names=['msp430_spi_union_config_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setModeSpi', quals=[] (at pp.c:3051)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__rx', quals=[], storage=['static'] (at pp.c:3053)
    FuncDecl: quals=None (at pp.c:3053)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__rx', quals=[] (at pp.c:3053)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[], storage=['static'] (at pp.c:3055)
    FuncDecl: quals=None (at pp.c:3055)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[] (at pp.c:3055)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:3057)
    FuncDecl: quals=None (at pp.c:3057)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableSpi', quals=[] (at pp.c:3057)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__0__IO__get', quals=[], storage=['static'] (at pp.c:3059)
    FuncDecl: quals=None (at pp.c:3059)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__0__IO__get', quals=[] (at pp.c:3059)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__0__IO__getRaw', quals=[], storage=['static'] (at pp.c:3061)
    FuncDecl: quals=None (at pp.c:3061)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__0__IO__getRaw', quals=[] (at pp.c:3061)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__3__IO__get', quals=[], storage=['static'] (at pp.c:3068)
    FuncDecl: quals=None (at pp.c:3068)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__3__IO__get', quals=[] (at pp.c:3068)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__3__IO__getRaw', quals=[], storage=['static'] (at pp.c:3070)
    FuncDecl: quals=None (at pp.c:3070)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__3__IO__getRaw', quals=[] (at pp.c:3070)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__makeInput', quals=[], storage=['static'] (at pp.c:3072)
    FuncDecl: quals=None (at pp.c:3072)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__makeInput', quals=[] (at pp.c:3072)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__get', quals=[], storage=['static'] (at pp.c:3074)
    FuncDecl: quals=None (at pp.c:3074)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__get', quals=[] (at pp.c:3074)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__getRaw', quals=[], storage=['static'] (at pp.c:3076)
    FuncDecl: quals=None (at pp.c:3076)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__getRaw', quals=[] (at pp.c:3076)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__makeInput', quals=[], storage=['static'] (at pp.c:3078)
    FuncDecl: quals=None (at pp.c:3078)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeInput', quals=[] (at pp.c:3078)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[], storage=['static'] (at pp.c:3085)
    FuncDecl: quals=None (at pp.c:3085)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[] (at pp.c:3085)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__get', quals=[], storage=['static'] (at pp.c:3087)
    FuncDecl: quals=None (at pp.c:3087)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__get', quals=[] (at pp.c:3087)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__getRaw', quals=[], storage=['static'] (at pp.c:3089)
    FuncDecl: quals=None (at pp.c:3089)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__getRaw', quals=[] (at pp.c:3089)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__clr', quals=[], storage=['static'] (at pp.c:3091)
    FuncDecl: quals=None (at pp.c:3091)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__clr', quals=[] (at pp.c:3091)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:3093)
    FuncDecl: quals=None (at pp.c:3093)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[] (at pp.c:3093)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:3095)
    FuncDecl: quals=None (at pp.c:3095)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[] (at pp.c:3095)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:3102)
    FuncDecl: quals=None (at pp.c:3102)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[] (at pp.c:3102)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:3104)
    FuncDecl: quals=None (at pp.c:3104)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[] (at pp.c:3104)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:3111)
    FuncDecl: quals=None (at pp.c:3111)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[] (at pp.c:3111)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:3113)
    FuncDecl: quals=None (at pp.c:3113)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[] (at pp.c:3113)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:3120)
    FuncDecl: quals=None (at pp.c:3120)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[] (at pp.c:3120)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:3122)
    FuncDecl: quals=None (at pp.c:3122)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[] (at pp.c:3122)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__makeInput', quals=[], storage=['static'] (at pp.c:3124)
    FuncDecl: quals=None (at pp.c:3124)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__makeInput', quals=[] (at pp.c:3124)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__get', quals=[], storage=['static'] (at pp.c:3126)
    FuncDecl: quals=None (at pp.c:3126)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__get', quals=[] (at pp.c:3126)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[], storage=['static'] (at pp.c:3128)
    FuncDecl: quals=None (at pp.c:3128)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[] (at pp.c:3128)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__getRaw', quals=[], storage=['static'] (at pp.c:3130)
    FuncDecl: quals=None (at pp.c:3130)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__getRaw', quals=[] (at pp.c:3130)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:3132)
    FuncDecl: quals=None (at pp.c:3132)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[] (at pp.c:3132)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[], storage=['static'] (at pp.c:3134)
    FuncDecl: quals=None (at pp.c:3134)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[] (at pp.c:3134)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__set', quals=[], storage=['static'] (at pp.c:3136)
    FuncDecl: quals=None (at pp.c:3136)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__set', quals=[] (at pp.c:3136)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__clr', quals=[], storage=['static'] (at pp.c:3141)
    FuncDecl: quals=None (at pp.c:3141)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__clr', quals=[] (at pp.c:3141)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__28__IO__makeOutput', quals=[], storage=['static'] (at pp.c:3143)
    FuncDecl: quals=None (at pp.c:3143)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__28__IO__makeOutput', quals=[] (at pp.c:3143)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__28__IO__set', quals=[], storage=['static'] (at pp.c:3145)
    FuncDecl: quals=None (at pp.c:3145)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__28__IO__set', quals=[] (at pp.c:3145)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__28__IO__clr', quals=[], storage=['static'] (at pp.c:3150)
    FuncDecl: quals=None (at pp.c:3150)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__28__IO__clr', quals=[] (at pp.c:3150)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[], storage=['static'] (at pp.c:3152)
    FuncDecl: quals=None (at pp.c:3152)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[] (at pp.c:3152)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__set', quals=[], storage=['static'] (at pp.c:3154)
    FuncDecl: quals=None (at pp.c:3154)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__set', quals=[] (at pp.c:3154)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__clr', quals=[], storage=['static'] (at pp.c:3159)
    FuncDecl: quals=None (at pp.c:3159)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__clr', quals=[] (at pp.c:3159)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[], storage=['static'] (at pp.c:3161)
    FuncDecl: quals=None (at pp.c:3161)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[] (at pp.c:3161)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__set', quals=[], storage=['static'] (at pp.c:3163)
    FuncDecl: quals=None (at pp.c:3163)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__set', quals=[] (at pp.c:3163)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__clr', quals=[], storage=['static'] (at pp.c:3168)
    FuncDecl: quals=None (at pp.c:3168)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__clr', quals=[] (at pp.c:3168)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__31__IO__makeOutput', quals=[], storage=['static'] (at pp.c:3170)
    FuncDecl: quals=None (at pp.c:3170)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__31__IO__makeOutput', quals=[] (at pp.c:3170)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__31__IO__set', quals=[], storage=['static'] (at pp.c:3172)
    FuncDecl: quals=None (at pp.c:3172)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__31__IO__set', quals=[] (at pp.c:3172)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__toggle', quals=[], storage=['static'] (at pp.c:3182)
    FuncDecl: quals=None (at pp.c:3182)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__toggle', quals=[] (at pp.c:3182)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[], storage=['static'] (at pp.c:3184)
    FuncDecl: quals=None (at pp.c:3184)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[] (at pp.c:3184)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__set', quals=[], storage=['static'] (at pp.c:3186)
    FuncDecl: quals=None (at pp.c:3186)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__set', quals=[] (at pp.c:3186)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__37__IO__toggle', quals=[], storage=['static'] (at pp.c:3196)
    FuncDecl: quals=None (at pp.c:3196)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__37__IO__toggle', quals=[] (at pp.c:3196)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[], storage=['static'] (at pp.c:3198)
    FuncDecl: quals=None (at pp.c:3198)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[] (at pp.c:3198)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__37__IO__set', quals=[], storage=['static'] (at pp.c:3200)
    FuncDecl: quals=None (at pp.c:3200)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__37__IO__set', quals=[] (at pp.c:3200)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[], storage=['static'] (at pp.c:3202)
    FuncDecl: quals=None (at pp.c:3202)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[] (at pp.c:3202)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__set', quals=[], storage=['static'] (at pp.c:3204)
    FuncDecl: quals=None (at pp.c:3204)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__set', quals=[] (at pp.c:3204)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__clr', quals=[], storage=['static'] (at pp.c:3209)
    FuncDecl: quals=None (at pp.c:3209)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__clr', quals=[] (at pp.c:3209)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Init__init', quals=[], storage=['static'] (at pp.c:3211)
    FuncDecl: quals=None (at pp.c:3211)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Init__init', quals=[] (at pp.c:3211)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LedsP__Leds__led0Toggle', quals=[], storage=['static'] (at pp.c:3213)
    FuncDecl: quals=None (at pp.c:3213)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led0Toggle', quals=[] (at pp.c:3213)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Leds__led1Toggle', quals=[], storage=['static'] (at pp.c:3215)
    FuncDecl: quals=None (at pp.c:3215)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led1Toggle', quals=[] (at pp.c:3215)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Leds__led2Off', quals=[], storage=['static'] (at pp.c:3226)
    FuncDecl: quals=None (at pp.c:3226)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led2Off', quals=[] (at pp.c:3226)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Leds__led2On', quals=[], storage=['static'] (at pp.c:3228)
    FuncDecl: quals=None (at pp.c:3228)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led2On', quals=[] (at pp.c:3228)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__toggle', quals=[], storage=['static'] (at pp.c:3230)
    FuncDecl: quals=None (at pp.c:3230)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__toggle', quals=[] (at pp.c:3230)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3234)
    FuncDecl: quals=None (at pp.c:3234)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__makeOutput', quals=[] (at pp.c:3234)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3236)
    FuncDecl: quals=None (at pp.c:3236)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__set', quals=[] (at pp.c:3236)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__GeneralIO__toggle', quals=[], storage=['static'] (at pp.c:3238)
    FuncDecl: quals=None (at pp.c:3238)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__GeneralIO__toggle', quals=[] (at pp.c:3238)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3242)
    FuncDecl: quals=None (at pp.c:3242)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__GeneralIO__makeOutput', quals=[] (at pp.c:3242)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3244)
    FuncDecl: quals=None (at pp.c:3244)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__GeneralIO__set', quals=[] (at pp.c:3244)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3250)
    FuncDecl: quals=None (at pp.c:3250)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__makeOutput', quals=[] (at pp.c:3250)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3252)
    FuncDecl: quals=None (at pp.c:3252)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__set', quals=[] (at pp.c:3252)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:3253)
    FuncDecl: quals=None (at pp.c:3253)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__clr', quals=[] (at pp.c:3253)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[], storage=['static'] (at pp.c:3255)
    FuncDecl: quals=None (at pp.c:3255)
      ParamList:  (at pp.c:3257)
        Decl: name='arg_0x101f8c6b0', quals=[], storage=[] (at pp.c:3257)
          TypeDecl: declname='arg_0x101f8c6b0', quals=[] (at pp.c:3257)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3259)
          TypeDecl: declname='data', quals=[] (at pp.c:3259)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[] (at pp.c:3255)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[], storage=['static'] (at pp.c:3261)
    FuncDecl: quals=None (at pp.c:3261)
      ParamList:  (at pp.c:3263)
        Decl: name='arg_0x101f8c6b0', quals=[], storage=[] (at pp.c:3263)
          TypeDecl: declname='arg_0x101f8c6b0', quals=[] (at pp.c:3263)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[] (at pp.c:3261)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__RawI2CInterrupts__fired', quals=[], storage=['static'] (at pp.c:3265)
    FuncDecl: quals=None (at pp.c:3265)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__RawI2CInterrupts__fired', quals=[] (at pp.c:3265)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__I2CInterrupts__default__fired', quals=[], storage=['static'] (at pp.c:3267)
    FuncDecl: quals=None (at pp.c:3267)
      ParamList:  (at pp.c:3269)
        Decl: name='arg_0x101f8a4d0', quals=[], storage=[] (at pp.c:3269)
          TypeDecl: declname='arg_0x101f8a4d0', quals=[] (at pp.c:3269)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__I2CInterrupts__default__fired', quals=[] (at pp.c:3267)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[], storage=['static'] (at pp.c:3271)
    FuncDecl: quals=None (at pp.c:3271)
      ParamList:  (at pp.c:3271)
        Decl: name='data', quals=[], storage=[] (at pp.c:3271)
          TypeDecl: declname='data', quals=[] (at pp.c:3271)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[] (at pp.c:3271)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[], storage=['static'] (at pp.c:3273)
    FuncDecl: quals=None (at pp.c:3273)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[] (at pp.c:3273)
        IdentifierType: names=['void'] (at None)
  Decl: name='FcfsResourceQueueC__2__Init__init', quals=[], storage=['static'] (at pp.c:3275)
    FuncDecl: quals=None (at pp.c:3275)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__Init__init', quals=[] (at pp.c:3275)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[], storage=['static'] (at pp.c:3277)
    FuncDecl: quals=None (at pp.c:3277)
      ParamList:  (at pp.c:3277)
        Decl: name='id', quals=[], storage=[] (at pp.c:3277)
          TypeDecl: declname='id', quals=[] (at pp.c:3277)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[] (at pp.c:3277)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[], storage=['static'] (at pp.c:3279)
    FuncDecl: quals=None (at pp.c:3279)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[] (at pp.c:3279)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[], storage=['static'] (at pp.c:3288)
    FuncDecl: quals=None (at pp.c:3288)
      ParamList:  (at pp.c:3288)
        Decl: name='id', quals=[], storage=[] (at pp.c:3288)
          TypeDecl: declname='id', quals=[] (at pp.c:3288)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[] (at pp.c:3288)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[], storage=['static'] (at pp.c:3296)
    FuncDecl: quals=None (at pp.c:3296)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[] (at pp.c:3296)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__default__requested', quals=[], storage=['static'] (at pp.c:3298)
    FuncDecl: quals=None (at pp.c:3298)
      ParamList:  (at pp.c:3300)
        Decl: name='arg_0x101ac2020', quals=[], storage=[] (at pp.c:3300)
          TypeDecl: declname='arg_0x101ac2020', quals=[] (at pp.c:3300)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__default__requested', quals=[] (at pp.c:3298)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[], storage=['static'] (at pp.c:3302)
    FuncDecl: quals=None (at pp.c:3302)
      ParamList:  (at pp.c:3304)
        Decl: name='arg_0x101ac2020', quals=[], storage=[] (at pp.c:3304)
          TypeDecl: declname='arg_0x101ac2020', quals=[] (at pp.c:3304)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[] (at pp.c:3302)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[], storage=['static'] (at pp.c:3306)
    FuncDecl: quals=None (at pp.c:3306)
      ParamList:  (at pp.c:3308)
        Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:3308)
          TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:3308)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:3306)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__default__configure', quals=[], storage=['static'] (at pp.c:3310)
    FuncDecl: quals=None (at pp.c:3310)
      ParamList:  (at pp.c:3312)
        Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:3312)
          TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:3312)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__configure', quals=[] (at pp.c:3310)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:3314)
    FuncDecl: quals=None (at pp.c:3314)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__release', quals=[] (at pp.c:3314)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[], storage=['static'] (at pp.c:3316)
    FuncDecl: quals=None (at pp.c:3316)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[] (at pp.c:3316)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[], storage=['static'] (at pp.c:3318)
    FuncDecl: quals=None (at pp.c:3318)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[] (at pp.c:3318)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[], storage=['static'] (at pp.c:3320)
    FuncDecl: quals=None (at pp.c:3320)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[] (at pp.c:3320)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__Resource__release', quals=[], storage=['static'] (at pp.c:3322)
    FuncDecl: quals=None (at pp.c:3322)
      ParamList:  (at pp.c:3324)
        Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:3324)
          TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:3324)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__release', quals=[] (at pp.c:3322)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:3326)
    FuncDecl: quals=None (at pp.c:3326)
      ParamList:  (at pp.c:3328)
        Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:3328)
          TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:3328)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__immediateRequest', quals=[] (at pp.c:3326)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Resource__request', quals=[], storage=['static'] (at pp.c:3330)
    FuncDecl: quals=None (at pp.c:3330)
      ParamList:  (at pp.c:3332)
        Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:3332)
          TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:3332)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__request', quals=[] (at pp.c:3330)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Resource__default__granted', quals=[], storage=['static'] (at pp.c:3334)
    FuncDecl: quals=None (at pp.c:3334)
      ParamList:  (at pp.c:3336)
        Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:3336)
          TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:3336)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__default__granted', quals=[] (at pp.c:3334)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__Resource__isOwner', quals=[], storage=['static'] (at pp.c:3338)
    FuncDecl: quals=None (at pp.c:3338)
      ParamList:  (at pp.c:3340)
        Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:3340)
          TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:3340)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__isOwner', quals=[] (at pp.c:3338)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__1__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:3342)
    FuncDecl: quals=None (at pp.c:3342)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ArbiterInfo__inUse', quals=[] (at pp.c:3342)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__1__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:3350)
    FuncDecl: quals=None (at pp.c:3350)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ArbiterInfo__userId', quals=[] (at pp.c:3350)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__1__grantedTask__runTask', quals=[], storage=['static'] (at pp.c:3352)
    FuncDecl: quals=None (at pp.c:3352)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__grantedTask__runTask', quals=[] (at pp.c:3352)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[], storage=['static'] (at pp.c:3354)
    FuncDecl: quals=None (at pp.c:3354)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[] (at pp.c:3354)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430I2C0P__HplI2C__isI2C', quals=[], storage=['static'] (at pp.c:3356)
    FuncDecl: quals=None (at pp.c:3356)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430I2C0P__HplI2C__isI2C', quals=[] (at pp.c:3356)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__3__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3358)
    FuncDecl: quals=None (at pp.c:3358)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__GeneralIO__makeOutput', quals=[] (at pp.c:3358)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3360)
    FuncDecl: quals=None (at pp.c:3360)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__GeneralIO__set', quals=[] (at pp.c:3360)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:3361)
    FuncDecl: quals=None (at pp.c:3361)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__GeneralIO__clr', quals=[] (at pp.c:3361)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3366)
    FuncDecl: quals=None (at pp.c:3366)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__GeneralIO__makeOutput', quals=[] (at pp.c:3366)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3368)
    FuncDecl: quals=None (at pp.c:3368)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__GeneralIO__set', quals=[] (at pp.c:3368)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pBinderP__0__Volume__getVolumeId', quals=[], storage=['static'] (at pp.c:3370)
    FuncDecl: quals=None (at pp.c:3370)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pBinderP__0__Volume__getVolumeId', quals=[] (at pp.c:3370)
        IdentifierType: names=['volume_id_t'] (at None)
  Decl: name='Stm25pLogConfigP__0__Circular__get', quals=[], storage=['static'] (at pp.c:3372)
    FuncDecl: quals=None (at pp.c:3372)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pLogConfigP__0__Circular__get', quals=[] (at pp.c:3372)
        IdentifierType: names=['Stm25pLogConfigP__0__Circular__val_t'] (at None)
  Decl: name='SampleLogReaderP__0__LogRead__readDone', quals=[], storage=['static'] (at pp.c:3374)
    FuncDecl: quals=None (at pp.c:3374)
      ParamList:  (at pp.c:3376)
        Decl: name='buf', quals=[], storage=[] (at pp.c:3376)
          PtrDecl: quals=[] (at pp.c:3376)
            TypeDecl: declname='buf', quals=[] (at pp.c:3376)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3381)
          TypeDecl: declname='len', quals=[] (at pp.c:3381)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3381)
          TypeDecl: declname='error', quals=[] (at pp.c:3381)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogRead__readDone', quals=[] (at pp.c:3374)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleLogReaderP__0__LogRead__seekDone', quals=[], storage=['static'] (at pp.c:3383)
    FuncDecl: quals=None (at pp.c:3383)
      ParamList:  (at pp.c:3383)
        Decl: name='error', quals=[], storage=[] (at pp.c:3383)
          TypeDecl: declname='error', quals=[] (at pp.c:3383)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogRead__seekDone', quals=[] (at pp.c:3383)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleLogReaderP__0__SampleLogRead__readNext', quals=[], storage=['static'] (at pp.c:3385)
    FuncDecl: quals=None (at pp.c:3385)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__SampleLogRead__readNext', quals=[] (at pp.c:3385)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SampleLogReaderP__0__LogWrite__syncDone', quals=[], storage=['static'] (at pp.c:3387)
    FuncDecl: quals=None (at pp.c:3387)
      ParamList:  (at pp.c:3387)
        Decl: name='error', quals=[], storage=[] (at pp.c:3387)
          TypeDecl: declname='error', quals=[] (at pp.c:3387)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogWrite__syncDone', quals=[] (at pp.c:3387)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleLogReaderP__0__LogWrite__eraseDone', quals=[], storage=['static'] (at pp.c:3389)
    FuncDecl: quals=None (at pp.c:3389)
      ParamList:  (at pp.c:3389)
        Decl: name='error', quals=[], storage=[] (at pp.c:3389)
          TypeDecl: declname='error', quals=[] (at pp.c:3389)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogWrite__eraseDone', quals=[] (at pp.c:3389)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleLogReaderP__0__LogWrite__appendDone', quals=[], storage=['static'] (at pp.c:3391)
    FuncDecl: quals=None (at pp.c:3391)
      ParamList:  (at pp.c:3393)
        Decl: name='buf', quals=[], storage=[] (at pp.c:3393)
          PtrDecl: quals=[] (at pp.c:3393)
            TypeDecl: declname='buf', quals=[] (at pp.c:3393)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3400)
          TypeDecl: declname='len', quals=[] (at pp.c:3400)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='recordsLost', quals=[], storage=[] (at pp.c:3400)
          TypeDecl: declname='recordsLost', quals=[] (at pp.c:3400)
            IdentifierType: names=['bool'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3401)
          TypeDecl: declname='error', quals=[] (at pp.c:3401)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogWrite__appendDone', quals=[] (at pp.c:3391)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__AMControl__startDone', quals=[], storage=['static'] (at pp.c:3403)
    FuncDecl: quals=None (at pp.c:3403)
      ParamList:  (at pp.c:3403)
        Decl: name='error', quals=[], storage=[] (at pp.c:3403)
          TypeDecl: declname='error', quals=[] (at pp.c:3403)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__AMControl__startDone', quals=[] (at pp.c:3403)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__AMControl__stopDone', quals=[], storage=['static'] (at pp.c:3405)
    FuncDecl: quals=None (at pp.c:3405)
      ParamList:  (at pp.c:3405)
        Decl: name='error', quals=[], storage=[] (at pp.c:3405)
          TypeDecl: declname='error', quals=[] (at pp.c:3405)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__AMControl__stopDone', quals=[] (at pp.c:3405)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__Boot__booted', quals=[], storage=['static'] (at pp.c:3407)
    FuncDecl: quals=None (at pp.c:3407)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Boot__booted', quals=[] (at pp.c:3407)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__SampleSend__sendDone', quals=[], storage=['static'] (at pp.c:3409)
    FuncDecl: quals=None (at pp.c:3409)
      ParamList:  (at pp.c:3411)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3411)
          PtrDecl: quals=[] (at pp.c:3411)
            TypeDecl: declname='msg', quals=[] (at pp.c:3411)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3418)
          TypeDecl: declname='error', quals=[] (at pp.c:3418)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleSend__sendDone', quals=[] (at pp.c:3409)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__readNextTask__runTask', quals=[], storage=['static'] (at pp.c:3420)
    FuncDecl: quals=None (at pp.c:3420)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__readNextTask__runTask', quals=[] (at pp.c:3420)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__RequestSamplesReceive__receive', quals=[], storage=['static'] (at pp.c:3428)
    FuncDecl: quals=None (at pp.c:3428)
      ParamList:  (at pp.c:3430)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3430)
          PtrDecl: quals=[] (at pp.c:3430)
            TypeDecl: declname='msg', quals=[] (at pp.c:3430)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:3431)
          PtrDecl: quals=[] (at pp.c:3431)
            TypeDecl: declname='payload', quals=[] (at pp.c:3431)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3437)
          TypeDecl: declname='len', quals=[] (at pp.c:3437)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:3424)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__RequestSamplesReceive__receive', quals=[] (at pp.c:3428)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__SampleLogRead__readDone', quals=[], storage=['static'] (at pp.c:3439)
    FuncDecl: quals=None (at pp.c:3439)
      ParamList:  (at pp.c:3439)
        Decl: name='entry', quals=[], storage=[] (at pp.c:3439)
          PtrDecl: quals=[] (at pp.c:3439)
            TypeDecl: declname='entry', quals=[] (at pp.c:3439)
              IdentifierType: names=['LowPowerSensingPeriodicSamplerC__SampleLogRead__sample_type_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3439)
          TypeDecl: declname='error', quals=[] (at pp.c:3439)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleLogRead__readDone', quals=[] (at pp.c:3439)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__runTask', quals=[], storage=['static'] (at pp.c:3441)
    FuncDecl: quals=None (at pp.c:3441)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__runTask', quals=[] (at pp.c:3441)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleNxConverterC__SampleNxConverter__copyToNx', quals=[], storage=['static'] (at pp.c:3443)
    FuncDecl: quals=None (at pp.c:3443)
      ParamList:  (at pp.c:3443)
        Decl: name='dest', quals=[], storage=[] (at pp.c:3443)
          PtrDecl: quals=[] (at pp.c:3443)
            TypeDecl: declname='dest', quals=[] (at pp.c:3443)
              IdentifierType: names=['nx_sensor_sample_t'] (at None)
        Decl: name='src', quals=[], storage=[] (at pp.c:3443)
          PtrDecl: quals=[] (at pp.c:3443)
            TypeDecl: declname='src', quals=[] (at pp.c:3443)
              IdentifierType: names=['sensor_sample_t'] (at None)
      TypeDecl: declname='SampleNxConverterC__SampleNxConverter__copyToNx', quals=[] (at pp.c:3443)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__start', quals=[], storage=['static'] (at pp.c:3445)
    FuncDecl: quals=None (at pp.c:3445)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__start', quals=[] (at pp.c:3445)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__stop', quals=[], storage=['static'] (at pp.c:3447)
    FuncDecl: quals=None (at pp.c:3447)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__stop', quals=[] (at pp.c:3447)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[], storage=['static'] (at pp.c:3449)
    FuncDecl: quals=None (at pp.c:3449)
      ParamList:  (at pp.c:3449)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:3449)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:3449)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:3449)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[], storage=['static'] (at pp.c:3451)
    FuncDecl: quals=None (at pp.c:3451)
      ParamList:  (at pp.c:3451)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:3451)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:3451)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:3451)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:3453)
    FuncDecl: quals=None (at pp.c:3453)
      ParamList:  (at pp.c:3453)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3453)
          PtrDecl: quals=[] (at pp.c:3453)
            TypeDecl: declname='msg', quals=[] (at pp.c:3453)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:3453)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:3460)
    FuncDecl: quals=None (at pp.c:3460)
      ParamList:  (at pp.c:3460)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3460)
          PtrDecl: quals=[] (at pp.c:3460)
            TypeDecl: declname='msg', quals=[] (at pp.c:3460)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:3460)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Transmit__sendDone', quals=[], storage=['static'] (at pp.c:3462)
    FuncDecl: quals=None (at pp.c:3462)
      ParamList:  (at pp.c:3462)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:3462)
          PtrDecl: quals=[] (at pp.c:3462)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:3462)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3462)
          TypeDecl: declname='error', quals=[] (at pp.c:3462)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Transmit__sendDone', quals=[] (at pp.c:3462)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__Send__send', quals=[], storage=['static'] (at pp.c:3464)
    FuncDecl: quals=None (at pp.c:3464)
      ParamList:  (at pp.c:3466)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3466)
          PtrDecl: quals=[] (at pp.c:3466)
            TypeDecl: declname='msg', quals=[] (at pp.c:3466)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3474)
          TypeDecl: declname='len', quals=[] (at pp.c:3474)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__Send__send', quals=[] (at pp.c:3464)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Send__maxPayloadLength', quals=[], storage=['static'] (at pp.c:3476)
    FuncDecl: quals=None (at pp.c:3476)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Send__maxPayloadLength', quals=[] (at pp.c:3476)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[], storage=['static'] (at pp.c:3478)
    FuncDecl: quals=None (at pp.c:3478)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[] (at pp.c:3478)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startVRegDone', quals=[], storage=['static'] (at pp.c:3480)
    FuncDecl: quals=None (at pp.c:3480)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startVRegDone', quals=[] (at pp.c:3480)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__Resource__granted', quals=[], storage=['static'] (at pp.c:3482)
    FuncDecl: quals=None (at pp.c:3482)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Resource__granted', quals=[] (at pp.c:3482)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__sendDone_task__runTask', quals=[], storage=['static'] (at pp.c:3484)
    FuncDecl: quals=None (at pp.c:3484)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__sendDone_task__runTask', quals=[] (at pp.c:3484)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__stopDone_task__runTask', quals=[], storage=['static'] (at pp.c:3486)
    FuncDecl: quals=None (at pp.c:3486)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__stopDone_task__runTask', quals=[] (at pp.c:3486)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__startDone_task__runTask', quals=[], storage=['static'] (at pp.c:3488)
    FuncDecl: quals=None (at pp.c:3488)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__startDone_task__runTask', quals=[] (at pp.c:3488)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[], storage=['static'] (at pp.c:3490)
    FuncDecl: quals=None (at pp.c:3490)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[] (at pp.c:3490)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[], storage=['static'] (at pp.c:3492)
    FuncDecl: quals=None (at pp.c:3492)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[] (at pp.c:3492)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[], storage=['static'] (at pp.c:3494)
    FuncDecl: quals=None (at pp.c:3494)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[] (at pp.c:3494)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getExtAddr', quals=[], storage=['static'] (at pp.c:3496)
    FuncDecl: quals=None (at pp.c:3496)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getExtAddr', quals=[] (at pp.c:3496)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getShortAddr', quals=[], storage=['static'] (at pp.c:3501)
    FuncDecl: quals=None (at pp.c:3501)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getShortAddr', quals=[] (at pp.c:3501)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__sync', quals=[], storage=['static'] (at pp.c:3503)
    FuncDecl: quals=None (at pp.c:3503)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__sync', quals=[] (at pp.c:3503)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getPanAddr', quals=[], storage=['static'] (at pp.c:3505)
    FuncDecl: quals=None (at pp.c:3505)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getPanAddr', quals=[] (at pp.c:3505)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__StartupTimer__fired', quals=[], storage=['static'] (at pp.c:3507)
    FuncDecl: quals=None (at pp.c:3507)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__StartupTimer__fired', quals=[] (at pp.c:3507)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__ReadRssi__default__readDone', quals=[], storage=['static'] (at pp.c:3509)
    FuncDecl: quals=None (at pp.c:3509)
      ParamList:  (at pp.c:3509)
        Decl: name='result', quals=[], storage=[] (at pp.c:3509)
          TypeDecl: declname='result', quals=[] (at pp.c:3509)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='val', quals=[], storage=[] (at pp.c:3509)
          TypeDecl: declname='val', quals=[] (at pp.c:3509)
            IdentifierType: names=['CC2420ControlP__ReadRssi__val_t'] (at None)
      TypeDecl: declname='CC2420ControlP__ReadRssi__default__readDone', quals=[] (at pp.c:3509)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__syncDone__runTask', quals=[], storage=['static'] (at pp.c:3511)
    FuncDecl: quals=None (at pp.c:3511)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__syncDone__runTask', quals=[] (at pp.c:3511)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__Init__init', quals=[], storage=['static'] (at pp.c:3513)
    FuncDecl: quals=None (at pp.c:3513)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Init__init', quals=[] (at pp.c:3513)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:3515)
    FuncDecl: quals=None (at pp.c:3515)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SpiResource__granted', quals=[] (at pp.c:3515)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__SyncResource__granted', quals=[], storage=['static'] (at pp.c:3517)
    FuncDecl: quals=None (at pp.c:3517)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SyncResource__granted', quals=[] (at pp.c:3517)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startOscillator', quals=[], storage=['static'] (at pp.c:3519)
    FuncDecl: quals=None (at pp.c:3519)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startOscillator', quals=[] (at pp.c:3519)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__rxOn', quals=[], storage=['static'] (at pp.c:3521)
    FuncDecl: quals=None (at pp.c:3521)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__rxOn', quals=[] (at pp.c:3521)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startVReg', quals=[], storage=['static'] (at pp.c:3523)
    FuncDecl: quals=None (at pp.c:3523)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startVReg', quals=[] (at pp.c:3523)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__stopVReg', quals=[], storage=['static'] (at pp.c:3525)
    FuncDecl: quals=None (at pp.c:3525)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__stopVReg', quals=[] (at pp.c:3525)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__sync__runTask', quals=[], storage=['static'] (at pp.c:3527)
    FuncDecl: quals=None (at pp.c:3527)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__sync__runTask', quals=[] (at pp.c:3527)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__Resource__release', quals=[], storage=['static'] (at pp.c:3529)
    FuncDecl: quals=None (at pp.c:3529)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Resource__release', quals=[] (at pp.c:3529)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__Resource__request', quals=[], storage=['static'] (at pp.c:3531)
    FuncDecl: quals=None (at pp.c:3531)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Resource__request', quals=[] (at pp.c:3531)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__InterruptCCA__fired', quals=[], storage=['static'] (at pp.c:3533)
    FuncDecl: quals=None (at pp.c:3533)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__InterruptCCA__fired', quals=[] (at pp.c:3533)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__RssiResource__granted', quals=[], storage=['static'] (at pp.c:3535)
    FuncDecl: quals=None (at pp.c:3535)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RssiResource__granted', quals=[] (at pp.c:3535)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Compare__fired', quals=[], storage=['static'] (at pp.c:3537)
    FuncDecl: quals=None (at pp.c:3537)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__fired', quals=[] (at pp.c:3537)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Timer__overflow', quals=[], storage=['static'] (at pp.c:3539)
    FuncDecl: quals=None (at pp.c:3539)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Timer__overflow', quals=[] (at pp.c:3539)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Alarm__startAt', quals=[], storage=['static'] (at pp.c:3541)
    FuncDecl: quals=None (at pp.c:3541)
      ParamList:  (at pp.c:3541)
        Decl: name='t0', quals=[], storage=[] (at pp.c:3541)
          TypeDecl: declname='t0', quals=[] (at pp.c:3541)
            IdentifierType: names=['Msp430AlarmC__1__Alarm__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:3541)
          TypeDecl: declname='dt', quals=[] (at pp.c:3541)
            IdentifierType: names=['Msp430AlarmC__1__Alarm__size_type'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Alarm__startAt', quals=[] (at pp.c:3541)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Alarm__stop', quals=[], storage=['static'] (at pp.c:3543)
    FuncDecl: quals=None (at pp.c:3543)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Alarm__stop', quals=[] (at pp.c:3543)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Init__init', quals=[], storage=['static'] (at pp.c:3545)
    FuncDecl: quals=None (at pp.c:3545)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Init__init', quals=[] (at pp.c:3545)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='TransformCounterC__1__CounterFrom__overflow', quals=[], storage=['static'] (at pp.c:3547)
    FuncDecl: quals=None (at pp.c:3547)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__CounterFrom__overflow', quals=[] (at pp.c:3547)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__1__Counter__get', quals=[], storage=['static'] (at pp.c:3549)
    FuncDecl: quals=None (at pp.c:3549)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__Counter__get', quals=[] (at pp.c:3549)
        IdentifierType: names=['TransformCounterC__1__Counter__size_type'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__getNow', quals=[], storage=['static'] (at pp.c:3551)
    FuncDecl: quals=None (at pp.c:3551)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__getNow', quals=[] (at pp.c:3551)
        IdentifierType: names=['TransformAlarmC__1__Alarm__size_type'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__startAt', quals=[], storage=['static'] (at pp.c:3553)
    FuncDecl: quals=None (at pp.c:3553)
      ParamList:  (at pp.c:3553)
        Decl: name='t0', quals=[], storage=[] (at pp.c:3553)
          TypeDecl: declname='t0', quals=[] (at pp.c:3553)
            IdentifierType: names=['TransformAlarmC__1__Alarm__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:3553)
          TypeDecl: declname='dt', quals=[] (at pp.c:3553)
            IdentifierType: names=['TransformAlarmC__1__Alarm__size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__startAt', quals=[] (at pp.c:3553)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__start', quals=[], storage=['static'] (at pp.c:3555)
    FuncDecl: quals=None (at pp.c:3555)
      ParamList:  (at pp.c:3555)
        Decl: name='dt', quals=[], storage=[] (at pp.c:3555)
          TypeDecl: declname='dt', quals=[] (at pp.c:3555)
            IdentifierType: names=['TransformAlarmC__1__Alarm__size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__start', quals=[] (at pp.c:3555)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__stop', quals=[], storage=['static'] (at pp.c:3562)
    FuncDecl: quals=None (at pp.c:3562)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__stop', quals=[] (at pp.c:3562)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__AlarmFrom__fired', quals=[], storage=['static'] (at pp.c:3567)
    FuncDecl: quals=None (at pp.c:3567)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__AlarmFrom__fired', quals=[] (at pp.c:3567)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Counter__overflow', quals=[], storage=['static'] (at pp.c:3569)
    FuncDecl: quals=None (at pp.c:3569)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Counter__overflow', quals=[] (at pp.c:3569)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__5__GeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:3571)
    FuncDecl: quals=None (at pp.c:3571)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__5__GeneralIO__makeInput', quals=[] (at pp.c:3571)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__5__GeneralIO__get', quals=[], storage=['static'] (at pp.c:3573)
    FuncDecl: quals=None (at pp.c:3573)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__5__GeneralIO__get', quals=[] (at pp.c:3573)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__6__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3576)
    FuncDecl: quals=None (at pp.c:3576)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__GeneralIO__makeOutput', quals=[] (at pp.c:3576)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__6__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3578)
    FuncDecl: quals=None (at pp.c:3578)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__GeneralIO__set', quals=[] (at pp.c:3578)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__6__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:3579)
    FuncDecl: quals=None (at pp.c:3579)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__GeneralIO__clr', quals=[] (at pp.c:3579)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__7__GeneralIO__get', quals=[], storage=['static'] (at pp.c:3581)
    FuncDecl: quals=None (at pp.c:3581)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__GeneralIO__get', quals=[] (at pp.c:3581)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__8__GeneralIO__get', quals=[], storage=['static'] (at pp.c:3583)
    FuncDecl: quals=None (at pp.c:3583)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__8__GeneralIO__get', quals=[] (at pp.c:3583)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3586)
    FuncDecl: quals=None (at pp.c:3586)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__makeOutput', quals=[] (at pp.c:3586)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3588)
    FuncDecl: quals=None (at pp.c:3588)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__set', quals=[] (at pp.c:3588)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:3589)
    FuncDecl: quals=None (at pp.c:3589)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__clr', quals=[] (at pp.c:3589)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__10__GeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:3592)
    FuncDecl: quals=None (at pp.c:3592)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__10__GeneralIO__makeInput', quals=[] (at pp.c:3592)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__10__GeneralIO__get', quals=[], storage=['static'] (at pp.c:3594)
    FuncDecl: quals=None (at pp.c:3594)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__10__GeneralIO__get', quals=[] (at pp.c:3594)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3597)
    FuncDecl: quals=None (at pp.c:3597)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__makeOutput', quals=[] (at pp.c:3597)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__set', quals=[], storage=['static'] (at pp.c:3599)
    FuncDecl: quals=None (at pp.c:3599)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__set', quals=[] (at pp.c:3599)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:3600)
    FuncDecl: quals=None (at pp.c:3600)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__clr', quals=[] (at pp.c:3600)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430Capture__captured', quals=[], storage=['static'] (at pp.c:3602)
    FuncDecl: quals=None (at pp.c:3602)
      ParamList:  (at pp.c:3602)
        Decl: name='time', quals=[], storage=[] (at pp.c:3602)
          TypeDecl: declname='time', quals=[] (at pp.c:3602)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430Capture__captured', quals=[] (at pp.c:3602)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Capture__captureFallingEdge', quals=[], storage=['static'] (at pp.c:3604)
    FuncDecl: quals=None (at pp.c:3604)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__captureFallingEdge', quals=[] (at pp.c:3604)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='GpioCaptureC__0__Capture__disable', quals=[], storage=['static'] (at pp.c:3606)
    FuncDecl: quals=None (at pp.c:3606)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__disable', quals=[] (at pp.c:3606)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Capture__captureRisingEdge', quals=[], storage=['static'] (at pp.c:3608)
    FuncDecl: quals=None (at pp.c:3608)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__captureRisingEdge', quals=[] (at pp.c:3608)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__clear', quals=[], storage=['static'] (at pp.c:3610)
    FuncDecl: quals=None (at pp.c:3610)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__clear', quals=[] (at pp.c:3610)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__disable', quals=[], storage=['static'] (at pp.c:3612)
    FuncDecl: quals=None (at pp.c:3612)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__disable', quals=[] (at pp.c:3612)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__edge', quals=[], storage=['static'] (at pp.c:3614)
    FuncDecl: quals=None (at pp.c:3614)
      ParamList:  (at pp.c:3614)
        Decl: name='low_to_high', quals=[], storage=[] (at pp.c:3614)
          TypeDecl: declname='low_to_high', quals=[] (at pp.c:3614)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__edge', quals=[] (at pp.c:3614)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__enable', quals=[], storage=['static'] (at pp.c:3616)
    FuncDecl: quals=None (at pp.c:3616)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__enable', quals=[] (at pp.c:3616)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port26__clear', quals=[], storage=['static'] (at pp.c:3626)
    FuncDecl: quals=None (at pp.c:3626)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port26__clear', quals=[] (at pp.c:3626)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port26__default__fired', quals=[], storage=['static'] (at pp.c:3628)
    FuncDecl: quals=None (at pp.c:3628)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port26__default__fired', quals=[] (at pp.c:3628)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port17__clear', quals=[], storage=['static'] (at pp.c:3630)
    FuncDecl: quals=None (at pp.c:3630)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port17__clear', quals=[] (at pp.c:3630)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port17__default__fired', quals=[], storage=['static'] (at pp.c:3632)
    FuncDecl: quals=None (at pp.c:3632)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port17__default__fired', quals=[] (at pp.c:3632)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port21__clear', quals=[], storage=['static'] (at pp.c:3634)
    FuncDecl: quals=None (at pp.c:3634)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port21__clear', quals=[] (at pp.c:3634)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port21__default__fired', quals=[], storage=['static'] (at pp.c:3636)
    FuncDecl: quals=None (at pp.c:3636)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port21__default__fired', quals=[] (at pp.c:3636)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port12__clear', quals=[], storage=['static'] (at pp.c:3638)
    FuncDecl: quals=None (at pp.c:3638)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port12__clear', quals=[] (at pp.c:3638)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port12__default__fired', quals=[], storage=['static'] (at pp.c:3640)
    FuncDecl: quals=None (at pp.c:3640)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port12__default__fired', quals=[] (at pp.c:3640)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port24__clear', quals=[], storage=['static'] (at pp.c:3642)
    FuncDecl: quals=None (at pp.c:3642)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port24__clear', quals=[] (at pp.c:3642)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port24__default__fired', quals=[], storage=['static'] (at pp.c:3644)
    FuncDecl: quals=None (at pp.c:3644)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port24__default__fired', quals=[] (at pp.c:3644)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port15__clear', quals=[], storage=['static'] (at pp.c:3646)
    FuncDecl: quals=None (at pp.c:3646)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port15__clear', quals=[] (at pp.c:3646)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port15__default__fired', quals=[], storage=['static'] (at pp.c:3648)
    FuncDecl: quals=None (at pp.c:3648)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port15__default__fired', quals=[] (at pp.c:3648)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port27__clear', quals=[], storage=['static'] (at pp.c:3650)
    FuncDecl: quals=None (at pp.c:3650)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port27__clear', quals=[] (at pp.c:3650)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port27__default__fired', quals=[], storage=['static'] (at pp.c:3652)
    FuncDecl: quals=None (at pp.c:3652)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port27__default__fired', quals=[] (at pp.c:3652)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__clear', quals=[], storage=['static'] (at pp.c:3654)
    FuncDecl: quals=None (at pp.c:3654)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__clear', quals=[] (at pp.c:3654)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__disable', quals=[], storage=['static'] (at pp.c:3656)
    FuncDecl: quals=None (at pp.c:3656)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__disable', quals=[] (at pp.c:3656)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__edge', quals=[], storage=['static'] (at pp.c:3658)
    FuncDecl: quals=None (at pp.c:3658)
      ParamList:  (at pp.c:3658)
        Decl: name='low_to_high', quals=[], storage=[] (at pp.c:3658)
          TypeDecl: declname='low_to_high', quals=[] (at pp.c:3658)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__edge', quals=[] (at pp.c:3658)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__enable', quals=[], storage=['static'] (at pp.c:3660)
    FuncDecl: quals=None (at pp.c:3660)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__enable', quals=[] (at pp.c:3660)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port22__clear', quals=[], storage=['static'] (at pp.c:3670)
    FuncDecl: quals=None (at pp.c:3670)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port22__clear', quals=[] (at pp.c:3670)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port22__default__fired', quals=[], storage=['static'] (at pp.c:3672)
    FuncDecl: quals=None (at pp.c:3672)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port22__default__fired', quals=[] (at pp.c:3672)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port13__clear', quals=[], storage=['static'] (at pp.c:3674)
    FuncDecl: quals=None (at pp.c:3674)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port13__clear', quals=[] (at pp.c:3674)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port13__default__fired', quals=[], storage=['static'] (at pp.c:3676)
    FuncDecl: quals=None (at pp.c:3676)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port13__default__fired', quals=[] (at pp.c:3676)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port25__clear', quals=[], storage=['static'] (at pp.c:3678)
    FuncDecl: quals=None (at pp.c:3678)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port25__clear', quals=[] (at pp.c:3678)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port25__default__fired', quals=[], storage=['static'] (at pp.c:3680)
    FuncDecl: quals=None (at pp.c:3680)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port25__default__fired', quals=[] (at pp.c:3680)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port16__clear', quals=[], storage=['static'] (at pp.c:3682)
    FuncDecl: quals=None (at pp.c:3682)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port16__clear', quals=[] (at pp.c:3682)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port16__default__fired', quals=[], storage=['static'] (at pp.c:3684)
    FuncDecl: quals=None (at pp.c:3684)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port16__default__fired', quals=[] (at pp.c:3684)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port20__clear', quals=[], storage=['static'] (at pp.c:3686)
    FuncDecl: quals=None (at pp.c:3686)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port20__clear', quals=[] (at pp.c:3686)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port20__default__fired', quals=[], storage=['static'] (at pp.c:3688)
    FuncDecl: quals=None (at pp.c:3688)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port20__default__fired', quals=[] (at pp.c:3688)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port11__clear', quals=[], storage=['static'] (at pp.c:3690)
    FuncDecl: quals=None (at pp.c:3690)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port11__clear', quals=[] (at pp.c:3690)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port11__default__fired', quals=[], storage=['static'] (at pp.c:3692)
    FuncDecl: quals=None (at pp.c:3692)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port11__default__fired', quals=[] (at pp.c:3692)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port23__clear', quals=[], storage=['static'] (at pp.c:3694)
    FuncDecl: quals=None (at pp.c:3694)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port23__clear', quals=[] (at pp.c:3694)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port23__default__fired', quals=[], storage=['static'] (at pp.c:3696)
    FuncDecl: quals=None (at pp.c:3696)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port23__default__fired', quals=[] (at pp.c:3696)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__fired', quals=[], storage=['static'] (at pp.c:3698)
    FuncDecl: quals=None (at pp.c:3698)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__fired', quals=[] (at pp.c:3698)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__Interrupt__disable', quals=[], storage=['static'] (at pp.c:3700)
    FuncDecl: quals=None (at pp.c:3700)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__Interrupt__disable', quals=[] (at pp.c:3700)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[], storage=['static'] (at pp.c:3702)
    FuncDecl: quals=None (at pp.c:3702)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[] (at pp.c:3702)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__fired', quals=[], storage=['static'] (at pp.c:3704)
    FuncDecl: quals=None (at pp.c:3704)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__fired', quals=[] (at pp.c:3704)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__Interrupt__disable', quals=[], storage=['static'] (at pp.c:3706)
    FuncDecl: quals=None (at pp.c:3706)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__Interrupt__disable', quals=[] (at pp.c:3706)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[], storage=['static'] (at pp.c:3708)
    FuncDecl: quals=None (at pp.c:3708)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[] (at pp.c:3708)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:3710)
    FuncDecl: quals=None (at pp.c:3710)
      ParamList:  (at pp.c:3712)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:3712)
          PtrDecl: quals=[] (at pp.c:3712)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:3712)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:3713)
          PtrDecl: quals=[] (at pp.c:3713)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:3713)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3719)
          TypeDecl: declname='len', quals=[] (at pp.c:3719)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3720)
          TypeDecl: declname='error', quals=[] (at pp.c:3720)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiPacket__sendDone', quals=[] (at pp.c:3710)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__continueRead', quals=[], storage=['static'] (at pp.c:3722)
    FuncDecl: quals=None (at pp.c:3722)
      ParamList:  (at pp.c:3724)
        Decl: name='arg_0x102486328', quals=[], storage=[] (at pp.c:3724)
          TypeDecl: declname='arg_0x102486328', quals=[] (at pp.c:3724)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3726)
          PtrDecl: quals=[] (at pp.c:3726)
            TypeDecl: declname='data', quals=[] (at pp.c:3726)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3726)
          TypeDecl: declname='length', quals=[] (at pp.c:3726)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__continueRead', quals=[] (at pp.c:3722)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__default__writeDone', quals=[], storage=['static'] (at pp.c:3728)
    FuncDecl: quals=None (at pp.c:3728)
      ParamList:  (at pp.c:3730)
        Decl: name='arg_0x102486328', quals=[], storage=[] (at pp.c:3730)
          TypeDecl: declname='arg_0x102486328', quals=[] (at pp.c:3730)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3732)
          PtrDecl: quals=[] (at pp.c:3732)
            TypeDecl: declname='data', quals=[] (at pp.c:3732)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3732)
          TypeDecl: declname='length', quals=[] (at pp.c:3732)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3732)
          TypeDecl: declname='error', quals=[] (at pp.c:3732)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__default__writeDone', quals=[] (at pp.c:3728)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__write', quals=[], storage=['static'] (at pp.c:3734)
    FuncDecl: quals=None (at pp.c:3734)
      ParamList:  (at pp.c:3736)
        Decl: name='arg_0x102486328', quals=[], storage=[] (at pp.c:3736)
          TypeDecl: declname='arg_0x102486328', quals=[] (at pp.c:3736)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3738)
          PtrDecl: quals=[] (at pp.c:3738)
            TypeDecl: declname='data', quals=[] (at pp.c:3738)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3738)
          TypeDecl: declname='length', quals=[] (at pp.c:3738)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__write', quals=[] (at pp.c:3734)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__beginRead', quals=[], storage=['static'] (at pp.c:3740)
    FuncDecl: quals=None (at pp.c:3740)
      ParamList:  (at pp.c:3742)
        Decl: name='arg_0x102486328', quals=[], storage=[] (at pp.c:3742)
          TypeDecl: declname='arg_0x102486328', quals=[] (at pp.c:3742)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3744)
          PtrDecl: quals=[] (at pp.c:3744)
            TypeDecl: declname='data', quals=[] (at pp.c:3744)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3744)
          TypeDecl: declname='length', quals=[] (at pp.c:3744)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__beginRead', quals=[] (at pp.c:3740)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__default__readDone', quals=[], storage=['static'] (at pp.c:3746)
    FuncDecl: quals=None (at pp.c:3746)
      ParamList:  (at pp.c:3748)
        Decl: name='arg_0x102486328', quals=[], storage=[] (at pp.c:3748)
          TypeDecl: declname='arg_0x102486328', quals=[] (at pp.c:3748)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3750)
          PtrDecl: quals=[] (at pp.c:3750)
            TypeDecl: declname='data', quals=[] (at pp.c:3750)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3750)
          TypeDecl: declname='length', quals=[] (at pp.c:3750)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3750)
          TypeDecl: declname='error', quals=[] (at pp.c:3750)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__default__readDone', quals=[] (at pp.c:3746)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__ChipSpiResource__abortRelease', quals=[], storage=['static'] (at pp.c:3752)
    FuncDecl: quals=None (at pp.c:3752)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__ChipSpiResource__abortRelease', quals=[] (at pp.c:3752)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[], storage=['static'] (at pp.c:3760)
    FuncDecl: quals=None (at pp.c:3760)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[] (at pp.c:3760)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:3762)
    FuncDecl: quals=None (at pp.c:3762)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__granted', quals=[] (at pp.c:3762)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Ram__write', quals=[], storage=['static'] (at pp.c:3764)
    FuncDecl: quals=None (at pp.c:3764)
      ParamList:  (at pp.c:3766)
        Decl: name='arg_0x1024854d8', quals=[], storage=[] (at pp.c:3766)
          TypeDecl: declname='arg_0x1024854d8', quals=[] (at pp.c:3766)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='offset', quals=[], storage=[] (at pp.c:3768)
          TypeDecl: declname='offset', quals=[] (at pp.c:3768)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3768)
          PtrDecl: quals=[] (at pp.c:3768)
            TypeDecl: declname='data', quals=[] (at pp.c:3768)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3768)
          TypeDecl: declname='length', quals=[] (at pp.c:3768)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Ram__write', quals=[] (at pp.c:3764)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Reg__read', quals=[], storage=['static'] (at pp.c:3770)
    FuncDecl: quals=None (at pp.c:3770)
      ParamList:  (at pp.c:3772)
        Decl: name='arg_0x102484220', quals=[], storage=[] (at pp.c:3772)
          TypeDecl: declname='arg_0x102484220', quals=[] (at pp.c:3772)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3774)
          PtrDecl: quals=[] (at pp.c:3774)
            TypeDecl: declname='data', quals=[] (at pp.c:3774)
              IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Reg__read', quals=[] (at pp.c:3770)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Reg__write', quals=[], storage=['static'] (at pp.c:3782)
    FuncDecl: quals=None (at pp.c:3782)
      ParamList:  (at pp.c:3784)
        Decl: name='arg_0x102484220', quals=[], storage=[] (at pp.c:3784)
          TypeDecl: declname='arg_0x102484220', quals=[] (at pp.c:3784)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:3786)
          TypeDecl: declname='data', quals=[] (at pp.c:3786)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Reg__write', quals=[] (at pp.c:3782)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Resource__release', quals=[], storage=['static'] (at pp.c:3788)
    FuncDecl: quals=None (at pp.c:3788)
      ParamList:  (at pp.c:3790)
        Decl: name='arg_0x102488158', quals=[], storage=[] (at pp.c:3790)
          TypeDecl: declname='arg_0x102488158', quals=[] (at pp.c:3790)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__release', quals=[] (at pp.c:3788)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:3792)
    FuncDecl: quals=None (at pp.c:3792)
      ParamList:  (at pp.c:3794)
        Decl: name='arg_0x102488158', quals=[], storage=[] (at pp.c:3794)
          TypeDecl: declname='arg_0x102488158', quals=[] (at pp.c:3794)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__immediateRequest', quals=[] (at pp.c:3792)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__request', quals=[], storage=['static'] (at pp.c:3796)
    FuncDecl: quals=None (at pp.c:3796)
      ParamList:  (at pp.c:3798)
        Decl: name='arg_0x102488158', quals=[], storage=[] (at pp.c:3798)
          TypeDecl: declname='arg_0x102488158', quals=[] (at pp.c:3798)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__request', quals=[] (at pp.c:3796)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__default__granted', quals=[], storage=['static'] (at pp.c:3800)
    FuncDecl: quals=None (at pp.c:3800)
      ParamList:  (at pp.c:3802)
        Decl: name='arg_0x102488158', quals=[], storage=[] (at pp.c:3802)
          TypeDecl: declname='arg_0x102488158', quals=[] (at pp.c:3802)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__default__granted', quals=[] (at pp.c:3800)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Resource__isOwner', quals=[], storage=['static'] (at pp.c:3804)
    FuncDecl: quals=None (at pp.c:3804)
      ParamList:  (at pp.c:3806)
        Decl: name='arg_0x102488158', quals=[], storage=[] (at pp.c:3806)
          TypeDecl: declname='arg_0x102488158', quals=[] (at pp.c:3806)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__isOwner', quals=[] (at pp.c:3804)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420SpiP__grant__runTask', quals=[], storage=['static'] (at pp.c:3808)
    FuncDecl: quals=None (at pp.c:3808)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__grant__runTask', quals=[] (at pp.c:3808)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Strobe__strobe', quals=[], storage=['static'] (at pp.c:3810)
    FuncDecl: quals=None (at pp.c:3810)
      ParamList:  (at pp.c:3812)
        Decl: name='arg_0x102483020', quals=[], storage=[] (at pp.c:3812)
          TypeDecl: declname='arg_0x102483020', quals=[] (at pp.c:3812)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Strobe__strobe', quals=[] (at pp.c:3810)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='StateImplP__Init__init', quals=[], storage=['static'] (at pp.c:3814)
    FuncDecl: quals=None (at pp.c:3814)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='StateImplP__Init__init', quals=[] (at pp.c:3814)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='StateImplP__State__getState', quals=[], storage=['static'] (at pp.c:3816)
    FuncDecl: quals=None (at pp.c:3816)
      ParamList:  (at pp.c:3818)
        Decl: name='arg_0x102533270', quals=[], storage=[] (at pp.c:3818)
          TypeDecl: declname='arg_0x102533270', quals=[] (at pp.c:3818)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__getState', quals=[] (at pp.c:3816)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='StateImplP__State__toIdle', quals=[], storage=['static'] (at pp.c:3820)
    FuncDecl: quals=None (at pp.c:3820)
      ParamList:  (at pp.c:3822)
        Decl: name='arg_0x102533270', quals=[], storage=[] (at pp.c:3822)
          TypeDecl: declname='arg_0x102533270', quals=[] (at pp.c:3822)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__toIdle', quals=[] (at pp.c:3820)
        IdentifierType: names=['void'] (at None)
  Decl: name='StateImplP__State__isState', quals=[], storage=['static'] (at pp.c:3824)
    FuncDecl: quals=None (at pp.c:3824)
      ParamList:  (at pp.c:3826)
        Decl: name='arg_0x102533270', quals=[], storage=[] (at pp.c:3826)
          TypeDecl: declname='arg_0x102533270', quals=[] (at pp.c:3826)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='myState', quals=[], storage=[] (at pp.c:3828)
          TypeDecl: declname='myState', quals=[] (at pp.c:3828)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__isState', quals=[] (at pp.c:3824)
        IdentifierType: names=['bool'] (at None)
  Decl: name='StateImplP__State__isIdle', quals=[], storage=['static'] (at pp.c:3830)
    FuncDecl: quals=None (at pp.c:3830)
      ParamList:  (at pp.c:3832)
        Decl: name='arg_0x102533270', quals=[], storage=[] (at pp.c:3832)
          TypeDecl: declname='arg_0x102533270', quals=[] (at pp.c:3832)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__isIdle', quals=[] (at pp.c:3830)
        IdentifierType: names=['bool'] (at None)
  Decl: name='StateImplP__State__requestState', quals=[], storage=['static'] (at pp.c:3834)
    FuncDecl: quals=None (at pp.c:3834)
      ParamList:  (at pp.c:3836)
        Decl: name='arg_0x102533270', quals=[], storage=[] (at pp.c:3836)
          TypeDecl: declname='arg_0x102533270', quals=[] (at pp.c:3836)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:3838)
          TypeDecl: declname='reqState', quals=[] (at pp.c:3838)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__requestState', quals=[] (at pp.c:3834)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='StateImplP__State__forceState', quals=[], storage=['static'] (at pp.c:3844)
    FuncDecl: quals=None (at pp.c:3844)
      ParamList:  (at pp.c:3846)
        Decl: name='arg_0x102533270', quals=[], storage=[] (at pp.c:3846)
          TypeDecl: declname='arg_0x102533270', quals=[] (at pp.c:3846)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:3848)
          TypeDecl: declname='reqState', quals=[] (at pp.c:3848)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__forceState', quals=[] (at pp.c:3844)
        IdentifierType: names=['void'] (at None)
  Decl: name='ActiveMessageAddressC__amAddress', quals=[], storage=['static'] (at pp.c:3850)
    FuncDecl: quals=None (at pp.c:3850)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__amAddress', quals=[] (at pp.c:3850)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[], storage=['static'] (at pp.c:3852)
    FuncDecl: quals=None (at pp.c:3852)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[] (at pp.c:3852)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[], storage=['static'] (at pp.c:3857)
    FuncDecl: quals=None (at pp.c:3857)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[] (at pp.c:3857)
        IdentifierType: names=['am_group_t'] (at None)
  Decl: name='Ds2411P__ReadId48__read', quals=[], storage=['static'] (at pp.c:3859)
    FuncDecl: quals=None (at pp.c:3859)
      ParamList:  (at pp.c:3859)
        Decl: name='id', quals=[], storage=[] (at pp.c:3859)
          PtrDecl: quals=[] (at pp.c:3859)
            TypeDecl: declname='id', quals=[] (at pp.c:3859)
              IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Ds2411P__ReadId48__read', quals=[] (at pp.c:3859)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='OneWireMasterC__OneWire__read', quals=[], storage=['static'] (at pp.c:3861)
    FuncDecl: quals=None (at pp.c:3861)
      ParamList:  (at pp.c:3861)
        Decl: name='cmd', quals=[], storage=[] (at pp.c:3861)
          TypeDecl: declname='cmd', quals=[] (at pp.c:3861)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:3861)
          PtrDecl: quals=[] (at pp.c:3861)
            TypeDecl: declname='buf', quals=[] (at pp.c:3861)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:3861)
          TypeDecl: declname='len', quals=[] (at pp.c:3861)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='OneWireMasterC__OneWire__read', quals=[] (at pp.c:3861)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='BusyWaitCounterC__0__BusyWait__wait', quals=[], storage=['static'] (at pp.c:3863)
    FuncDecl: quals=None (at pp.c:3863)
      ParamList:  (at pp.c:3863)
        Decl: name='dt', quals=[], storage=[] (at pp.c:3863)
          TypeDecl: declname='dt', quals=[] (at pp.c:3863)
            IdentifierType: names=['BusyWaitCounterC__0__BusyWait__size_type'] (at None)
      TypeDecl: declname='BusyWaitCounterC__0__BusyWait__wait', quals=[] (at pp.c:3863)
        IdentifierType: names=['void'] (at None)
  Decl: name='BusyWaitCounterC__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:3865)
    FuncDecl: quals=None (at pp.c:3865)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='BusyWaitCounterC__0__Counter__overflow', quals=[] (at pp.c:3865)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__1__Msp430Timer__overflow', quals=[], storage=['static'] (at pp.c:3867)
    FuncDecl: quals=None (at pp.c:3867)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Msp430Timer__overflow', quals=[] (at pp.c:3867)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__1__Counter__get', quals=[], storage=['static'] (at pp.c:3869)
    FuncDecl: quals=None (at pp.c:3869)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Counter__get', quals=[] (at pp.c:3869)
        IdentifierType: names=['Msp430CounterC__1__Counter__size_type'] (at None)
  Decl: name='Msp430GpioC__13__GeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:3871)
    FuncDecl: quals=None (at pp.c:3871)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__GeneralIO__makeInput', quals=[] (at pp.c:3871)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__13__GeneralIO__get', quals=[], storage=['static'] (at pp.c:3873)
    FuncDecl: quals=None (at pp.c:3873)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__GeneralIO__get', quals=[] (at pp.c:3873)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__13__GeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:3876)
    FuncDecl: quals=None (at pp.c:3876)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__GeneralIO__makeOutput', quals=[] (at pp.c:3876)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__13__GeneralIO__clr', quals=[], storage=['static'] (at pp.c:3878)
    FuncDecl: quals=None (at pp.c:3878)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__GeneralIO__clr', quals=[] (at pp.c:3878)
        IdentifierType: names=['void'] (at None)
  Decl: name='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[], storage=['static'] (at pp.c:3880)
    FuncDecl: quals=None (at pp.c:3880)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[] (at pp.c:3880)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[], storage=['static'] (at pp.c:3882)
    FuncDecl: quals=None (at pp.c:3882)
      ParamList:  (at pp.c:3882)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:3882)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:3882)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:3882)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[], storage=['static'] (at pp.c:3884)
    FuncDecl: quals=None (at pp.c:3884)
      ParamList:  (at pp.c:3884)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:3884)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:3884)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:3884)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[], storage=['static'] (at pp.c:3886)
    FuncDecl: quals=None (at pp.c:3886)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[] (at pp.c:3886)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__CaptureSFD__captured', quals=[], storage=['static'] (at pp.c:3888)
    FuncDecl: quals=None (at pp.c:3888)
      ParamList:  (at pp.c:3888)
        Decl: name='time', quals=[], storage=[] (at pp.c:3888)
          TypeDecl: declname='time', quals=[] (at pp.c:3888)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__CaptureSFD__captured', quals=[] (at pp.c:3888)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__BackoffTimer__fired', quals=[], storage=['static'] (at pp.c:3890)
    FuncDecl: quals=None (at pp.c:3890)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__BackoffTimer__fired', quals=[] (at pp.c:3890)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CC2420Receive__receive', quals=[], storage=['static'] (at pp.c:3892)
    FuncDecl: quals=None (at pp.c:3892)
      ParamList:  (at pp.c:3892)
        Decl: name='type', quals=[], storage=[] (at pp.c:3892)
          TypeDecl: declname='type', quals=[] (at pp.c:3892)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='message', quals=[], storage=[] (at pp.c:3892)
          PtrDecl: quals=[] (at pp.c:3892)
            TypeDecl: declname='message', quals=[] (at pp.c:3892)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__CC2420Receive__receive', quals=[] (at pp.c:3892)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__Send__send', quals=[], storage=['static'] (at pp.c:3894)
    FuncDecl: quals=None (at pp.c:3894)
      ParamList:  (at pp.c:3894)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:3894)
          PtrDecl: quals=[] (at pp.c:3894)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:3894)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:3894)
          TypeDecl: declname='useCca', quals=[] (at pp.c:3894)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__Send__send', quals=[] (at pp.c:3894)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__Send__resend', quals=[], storage=['static'] (at pp.c:3901)
    FuncDecl: quals=None (at pp.c:3901)
      ParamList:  (at pp.c:3901)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:3901)
          TypeDecl: declname='useCca', quals=[] (at pp.c:3901)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__Send__resend', quals=[] (at pp.c:3901)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__ChipSpiResource__releasing', quals=[], storage=['static'] (at pp.c:3903)
    FuncDecl: quals=None (at pp.c:3903)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__ChipSpiResource__releasing', quals=[] (at pp.c:3903)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__Init__init', quals=[], storage=['static'] (at pp.c:3905)
    FuncDecl: quals=None (at pp.c:3905)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__Init__init', quals=[] (at pp.c:3905)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:3907)
    FuncDecl: quals=None (at pp.c:3907)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SpiResource__granted', quals=[] (at pp.c:3907)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__StdControl__start', quals=[], storage=['static'] (at pp.c:3909)
    FuncDecl: quals=None (at pp.c:3909)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__StdControl__start', quals=[] (at pp.c:3909)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__StdControl__stop', quals=[], storage=['static'] (at pp.c:3919)
    FuncDecl: quals=None (at pp.c:3919)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__StdControl__stop', quals=[] (at pp.c:3919)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO__writeDone', quals=[], storage=['static'] (at pp.c:3921)
    FuncDecl: quals=None (at pp.c:3921)
      ParamList:  (at pp.c:3921)
        Decl: name='data', quals=[], storage=[] (at pp.c:3921)
          PtrDecl: quals=[] (at pp.c:3921)
            TypeDecl: declname='data', quals=[] (at pp.c:3921)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3921)
          TypeDecl: declname='length', quals=[] (at pp.c:3921)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3921)
          TypeDecl: declname='error', quals=[] (at pp.c:3921)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO__writeDone', quals=[] (at pp.c:3921)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO__readDone', quals=[], storage=['static'] (at pp.c:3923)
    FuncDecl: quals=None (at pp.c:3923)
      ParamList:  (at pp.c:3923)
        Decl: name='data', quals=[], storage=[] (at pp.c:3923)
          PtrDecl: quals=[] (at pp.c:3923)
            TypeDecl: declname='data', quals=[] (at pp.c:3923)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3923)
          TypeDecl: declname='length', quals=[] (at pp.c:3923)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3923)
          TypeDecl: declname='error', quals=[] (at pp.c:3923)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO__readDone', quals=[] (at pp.c:3923)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__syncDone', quals=[], storage=['static'] (at pp.c:3925)
    FuncDecl: quals=None (at pp.c:3925)
      ParamList:  (at pp.c:3925)
        Decl: name='error', quals=[], storage=[] (at pp.c:3925)
          TypeDecl: declname='error', quals=[] (at pp.c:3925)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__syncDone', quals=[] (at pp.c:3925)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__receiveDone_task__runTask', quals=[], storage=['static'] (at pp.c:3927)
    FuncDecl: quals=None (at pp.c:3927)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__receiveDone_task__runTask', quals=[] (at pp.c:3927)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[], storage=['static'] (at pp.c:3929)
    FuncDecl: quals=None (at pp.c:3929)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[] (at pp.c:3929)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Receive__sfd', quals=[], storage=['static'] (at pp.c:3931)
    FuncDecl: quals=None (at pp.c:3931)
      ParamList:  (at pp.c:3931)
        Decl: name='time', quals=[], storage=[] (at pp.c:3931)
          TypeDecl: declname='time', quals=[] (at pp.c:3931)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd', quals=[] (at pp.c:3931)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__Init__init', quals=[], storage=['static'] (at pp.c:3933)
    FuncDecl: quals=None (at pp.c:3933)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__Init__init', quals=[] (at pp.c:3933)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:3935)
    FuncDecl: quals=None (at pp.c:3935)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__granted', quals=[] (at pp.c:3935)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__writeDone', quals=[], storage=['static'] (at pp.c:3937)
    FuncDecl: quals=None (at pp.c:3937)
      ParamList:  (at pp.c:3937)
        Decl: name='data', quals=[], storage=[] (at pp.c:3937)
          PtrDecl: quals=[] (at pp.c:3937)
            TypeDecl: declname='data', quals=[] (at pp.c:3937)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3937)
          TypeDecl: declname='length', quals=[] (at pp.c:3937)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3937)
          TypeDecl: declname='error', quals=[] (at pp.c:3937)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__writeDone', quals=[] (at pp.c:3937)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__readDone', quals=[], storage=['static'] (at pp.c:3939)
    FuncDecl: quals=None (at pp.c:3939)
      ParamList:  (at pp.c:3939)
        Decl: name='data', quals=[], storage=[] (at pp.c:3939)
          PtrDecl: quals=[] (at pp.c:3939)
            TypeDecl: declname='data', quals=[] (at pp.c:3939)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:3939)
          TypeDecl: declname='length', quals=[] (at pp.c:3939)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:3939)
          TypeDecl: declname='error', quals=[] (at pp.c:3939)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__readDone', quals=[] (at pp.c:3939)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[], storage=['static'] (at pp.c:3941)
    FuncDecl: quals=None (at pp.c:3941)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[] (at pp.c:3941)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__InterruptFIFOP__fired', quals=[], storage=['static'] (at pp.c:3943)
    FuncDecl: quals=None (at pp.c:3943)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__fired', quals=[] (at pp.c:3943)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__StdControl__start', quals=[], storage=['static'] (at pp.c:3945)
    FuncDecl: quals=None (at pp.c:3945)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__StdControl__start', quals=[] (at pp.c:3945)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__StdControl__stop', quals=[], storage=['static'] (at pp.c:3955)
    FuncDecl: quals=None (at pp.c:3955)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__StdControl__stop', quals=[] (at pp.c:3955)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420PacketP__CC2420Packet__setNetwork', quals=[], storage=['static'] (at pp.c:3957)
    FuncDecl: quals=None (at pp.c:3957)
      ParamList:  (at pp.c:3957)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:3957)
          PtrDecl: quals=[] (at pp.c:3957)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:3957)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='networkId', quals=[], storage=[] (at pp.c:3957)
          TypeDecl: declname='networkId', quals=[] (at pp.c:3957)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420PacketP__CC2420Packet__setNetwork', quals=[] (at pp.c:3957)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__CC2420Packet__getNetwork', quals=[], storage=['static'] (at pp.c:3959)
    FuncDecl: quals=None (at pp.c:3959)
      ParamList:  (at pp.c:3959)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:3959)
          PtrDecl: quals=[] (at pp.c:3959)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:3959)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__CC2420Packet__getNetwork', quals=[] (at pp.c:3959)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[], storage=['static'] (at pp.c:3961)
    FuncDecl: quals=None (at pp.c:3961)
      ParamList:  (at pp.c:3963)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3963)
          PtrDecl: quals=[] (at pp.c:3963)
            TypeDecl: declname='msg', quals=[] (at pp.c:3963)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[] (at pp.c:3961)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__PacketTimeStamp32khz__set', quals=[], storage=['static'] (at pp.c:3965)
    FuncDecl: quals=None (at pp.c:3965)
      ParamList:  (at pp.c:3967)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3967)
          PtrDecl: quals=[] (at pp.c:3967)
            TypeDecl: declname='msg', quals=[] (at pp.c:3967)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:3972)
          TypeDecl: declname='value', quals=[] (at pp.c:3972)
            IdentifierType: names=['CC2420PacketP__PacketTimeStamp32khz__size_type'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__set', quals=[] (at pp.c:3965)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:3974)
    FuncDecl: quals=None (at pp.c:3974)
      ParamList:  (at pp.c:3974)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3974)
          PtrDecl: quals=[] (at pp.c:3974)
            TypeDecl: declname='msg', quals=[] (at pp.c:3974)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:3974)
        TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getHeader', quals=[] (at pp.c:3974)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:3985)
    FuncDecl: quals=None (at pp.c:3985)
      ParamList:  (at pp.c:3985)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3985)
          PtrDecl: quals=[] (at pp.c:3985)
            TypeDecl: declname='msg', quals=[] (at pp.c:3985)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:3985)
        TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:3985)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420PacketP__PacketTimeSyncOffset__get', quals=[], storage=['static'] (at pp.c:3987)
    FuncDecl: quals=None (at pp.c:3987)
      ParamList:  (at pp.c:3989)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3989)
          PtrDecl: quals=[] (at pp.c:3989)
            TypeDecl: declname='msg', quals=[] (at pp.c:3989)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__get', quals=[] (at pp.c:3987)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[], storage=['static'] (at pp.c:3991)
    FuncDecl: quals=None (at pp.c:3991)
      ParamList:  (at pp.c:3993)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3993)
          PtrDecl: quals=[] (at pp.c:3993)
            TypeDecl: declname='msg', quals=[] (at pp.c:3993)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[] (at pp.c:3991)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420PacketP__Acks__requestAck', quals=[], storage=['static'] (at pp.c:3995)
    FuncDecl: quals=None (at pp.c:3995)
      ParamList:  (at pp.c:3997)
        Decl: name='msg', quals=[], storage=[] (at pp.c:3997)
          PtrDecl: quals=[] (at pp.c:3997)
            TypeDecl: declname='msg', quals=[] (at pp.c:3997)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__requestAck', quals=[] (at pp.c:3995)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420PacketP__Acks__noAck', quals=[], storage=['static'] (at pp.c:3999)
    FuncDecl: quals=None (at pp.c:3999)
      ParamList:  (at pp.c:4001)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4001)
          PtrDecl: quals=[] (at pp.c:4001)
            TypeDecl: declname='msg', quals=[] (at pp.c:4001)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__noAck', quals=[] (at pp.c:3999)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420PacketP__Acks__wasAcked', quals=[], storage=['static'] (at pp.c:4003)
    FuncDecl: quals=None (at pp.c:4003)
      ParamList:  (at pp.c:4005)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4005)
          PtrDecl: quals=[] (at pp.c:4005)
            TypeDecl: declname='msg', quals=[] (at pp.c:4005)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__wasAcked', quals=[] (at pp.c:4003)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CounterToLocalTimeC__1__Counter__overflow', quals=[], storage=['static'] (at pp.c:4007)
    FuncDecl: quals=None (at pp.c:4007)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CounterToLocalTimeC__1__Counter__overflow', quals=[] (at pp.c:4007)
        IdentifierType: names=['void'] (at None)
  Decl: name='RandomMlcgC__Random__rand16', quals=[], storage=['static'] (at pp.c:4009)
    FuncDecl: quals=None (at pp.c:4009)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Random__rand16', quals=[] (at pp.c:4009)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='RandomMlcgC__Random__rand32', quals=[], storage=['static'] (at pp.c:4011)
    FuncDecl: quals=None (at pp.c:4011)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Random__rand32', quals=[] (at pp.c:4011)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='RandomMlcgC__Init__init', quals=[], storage=['static'] (at pp.c:4013)
    FuncDecl: quals=None (at pp.c:4013)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Init__init', quals=[] (at pp.c:4013)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__SubSend__sendDone', quals=[], storage=['static'] (at pp.c:4015)
    FuncDecl: quals=None (at pp.c:4015)
      ParamList:  (at pp.c:4017)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4017)
          PtrDecl: quals=[] (at pp.c:4017)
            TypeDecl: declname='msg', quals=[] (at pp.c:4017)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4021)
          TypeDecl: declname='error', quals=[] (at pp.c:4021)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='UniqueSendP__SubSend__sendDone', quals=[] (at pp.c:4015)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueSendP__Send__send', quals=[], storage=['static'] (at pp.c:4023)
    FuncDecl: quals=None (at pp.c:4023)
      ParamList:  (at pp.c:4025)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4025)
          PtrDecl: quals=[] (at pp.c:4025)
            TypeDecl: declname='msg', quals=[] (at pp.c:4025)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4033)
          TypeDecl: declname='len', quals=[] (at pp.c:4033)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueSendP__Send__send', quals=[] (at pp.c:4023)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__Send__maxPayloadLength', quals=[], storage=['static'] (at pp.c:4035)
    FuncDecl: quals=None (at pp.c:4035)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__Send__maxPayloadLength', quals=[] (at pp.c:4035)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='UniqueSendP__Init__init', quals=[], storage=['static'] (at pp.c:4037)
    FuncDecl: quals=None (at pp.c:4037)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__Init__init', quals=[] (at pp.c:4037)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueReceiveP__SubReceive__receive', quals=[], storage=['static'] (at pp.c:4045)
    FuncDecl: quals=None (at pp.c:4045)
      ParamList:  (at pp.c:4047)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4047)
          PtrDecl: quals=[] (at pp.c:4047)
            TypeDecl: declname='msg', quals=[] (at pp.c:4047)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4048)
          PtrDecl: quals=[] (at pp.c:4048)
            TypeDecl: declname='payload', quals=[] (at pp.c:4048)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4054)
          TypeDecl: declname='len', quals=[] (at pp.c:4054)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4041)
        TypeDecl: declname='UniqueReceiveP__SubReceive__receive', quals=[] (at pp.c:4045)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='UniqueReceiveP__Init__init', quals=[], storage=['static'] (at pp.c:4056)
    FuncDecl: quals=None (at pp.c:4056)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueReceiveP__Init__init', quals=[] (at pp.c:4056)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueReceiveP__DuplicateReceive__default__receive', quals=[], storage=['static'] (at pp.c:4064)
    FuncDecl: quals=None (at pp.c:4064)
      ParamList:  (at pp.c:4066)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4066)
          PtrDecl: quals=[] (at pp.c:4066)
            TypeDecl: declname='msg', quals=[] (at pp.c:4066)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4067)
          PtrDecl: quals=[] (at pp.c:4067)
            TypeDecl: declname='payload', quals=[] (at pp.c:4067)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4073)
          TypeDecl: declname='len', quals=[] (at pp.c:4073)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4060)
        TypeDecl: declname='UniqueReceiveP__DuplicateReceive__default__receive', quals=[] (at pp.c:4064)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubSend__sendDone', quals=[], storage=['static'] (at pp.c:4075)
    FuncDecl: quals=None (at pp.c:4075)
      ParamList:  (at pp.c:4077)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4077)
          PtrDecl: quals=[] (at pp.c:4077)
            TypeDecl: declname='msg', quals=[] (at pp.c:4077)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4081)
          TypeDecl: declname='error', quals=[] (at pp.c:4081)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__SubSend__sendDone', quals=[] (at pp.c:4075)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubReceive__receive', quals=[], storage=['static'] (at pp.c:4089)
    FuncDecl: quals=None (at pp.c:4089)
      ParamList:  (at pp.c:4091)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4091)
          PtrDecl: quals=[] (at pp.c:4091)
            TypeDecl: declname='msg', quals=[] (at pp.c:4091)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4092)
          PtrDecl: quals=[] (at pp.c:4092)
            TypeDecl: declname='payload', quals=[] (at pp.c:4092)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4098)
          TypeDecl: declname='len', quals=[] (at pp.c:4098)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4085)
        TypeDecl: declname='CC2420TinyosNetworkP__SubReceive__receive', quals=[] (at pp.c:4089)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__grantTask__runTask', quals=[], storage=['static'] (at pp.c:4100)
    FuncDecl: quals=None (at pp.c:4100)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__grantTask__runTask', quals=[] (at pp.c:4100)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__send', quals=[], storage=['static'] (at pp.c:4102)
    FuncDecl: quals=None (at pp.c:4102)
      ParamList:  (at pp.c:4104)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4104)
          PtrDecl: quals=[] (at pp.c:4104)
            TypeDecl: declname='msg', quals=[] (at pp.c:4104)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4112)
          TypeDecl: declname='len', quals=[] (at pp.c:4112)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__send', quals=[] (at pp.c:4102)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__getPayload', quals=[], storage=['static'] (at pp.c:4118)
    FuncDecl: quals=None (at pp.c:4118)
      ParamList:  (at pp.c:4120)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4120)
          PtrDecl: quals=[] (at pp.c:4120)
            TypeDecl: declname='msg', quals=[] (at pp.c:4120)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4123)
          TypeDecl: declname='len', quals=[] (at pp.c:4123)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4116)
        TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__getPayload', quals=[] (at pp.c:4118)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[], storage=['static'] (at pp.c:4125)
    FuncDecl: quals=None (at pp.c:4125)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[] (at pp.c:4125)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[], storage=['static'] (at pp.c:4133)
    FuncDecl: quals=None (at pp.c:4133)
      ParamList:  (at pp.c:4135)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4135)
          PtrDecl: quals=[] (at pp.c:4135)
            TypeDecl: declname='msg', quals=[] (at pp.c:4135)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4136)
          PtrDecl: quals=[] (at pp.c:4136)
            TypeDecl: declname='payload', quals=[] (at pp.c:4136)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4142)
          TypeDecl: declname='len', quals=[] (at pp.c:4142)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4129)
        TypeDecl: declname='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[] (at pp.c:4133)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__release', quals=[], storage=['static'] (at pp.c:4144)
    FuncDecl: quals=None (at pp.c:4144)
      ParamList:  (at pp.c:4146)
        Decl: name='arg_0x102904060', quals=[], storage=[] (at pp.c:4146)
          TypeDecl: declname='arg_0x102904060', quals=[] (at pp.c:4146)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__release', quals=[] (at pp.c:4144)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:4148)
    FuncDecl: quals=None (at pp.c:4148)
      ParamList:  (at pp.c:4150)
        Decl: name='arg_0x102904060', quals=[], storage=[] (at pp.c:4150)
          TypeDecl: declname='arg_0x102904060', quals=[] (at pp.c:4150)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[] (at pp.c:4148)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__request', quals=[], storage=['static'] (at pp.c:4152)
    FuncDecl: quals=None (at pp.c:4152)
      ParamList:  (at pp.c:4154)
        Decl: name='arg_0x102904060', quals=[], storage=[] (at pp.c:4154)
          TypeDecl: declname='arg_0x102904060', quals=[] (at pp.c:4154)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__request', quals=[] (at pp.c:4152)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__default__granted', quals=[], storage=['static'] (at pp.c:4156)
    FuncDecl: quals=None (at pp.c:4156)
      ParamList:  (at pp.c:4158)
        Decl: name='arg_0x102904060', quals=[], storage=[] (at pp.c:4158)
          TypeDecl: declname='arg_0x102904060', quals=[] (at pp.c:4158)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__default__granted', quals=[] (at pp.c:4156)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareSend__getPayload', quals=[], storage=['static'] (at pp.c:4164)
    FuncDecl: quals=None (at pp.c:4164)
      ParamList:  (at pp.c:4166)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4166)
          PtrDecl: quals=[] (at pp.c:4166)
            TypeDecl: declname='msg', quals=[] (at pp.c:4166)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4169)
          TypeDecl: declname='len', quals=[] (at pp.c:4169)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4162)
        TypeDecl: declname='CC2420TinyosNetworkP__BareSend__getPayload', quals=[] (at pp.c:4164)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[], storage=['static'] (at pp.c:4171)
    FuncDecl: quals=None (at pp.c:4171)
      ParamList:  (at pp.c:4173)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4173)
          PtrDecl: quals=[] (at pp.c:4173)
            TypeDecl: declname='msg', quals=[] (at pp.c:4173)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4177)
          TypeDecl: declname='error', quals=[] (at pp.c:4177)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[] (at pp.c:4171)
        IdentifierType: names=['void'] (at None)
  Decl: name='FcfsResourceQueueC__0__Init__init', quals=[], storage=['static'] (at pp.c:4179)
    FuncDecl: quals=None (at pp.c:4179)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__Init__init', quals=[] (at pp.c:4179)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[], storage=['static'] (at pp.c:4181)
    FuncDecl: quals=None (at pp.c:4181)
      ParamList:  (at pp.c:4181)
        Decl: name='id', quals=[], storage=[] (at pp.c:4181)
          TypeDecl: declname='id', quals=[] (at pp.c:4181)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[] (at pp.c:4181)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[], storage=['static'] (at pp.c:4183)
    FuncDecl: quals=None (at pp.c:4183)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[] (at pp.c:4183)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[], storage=['static'] (at pp.c:4192)
    FuncDecl: quals=None (at pp.c:4192)
      ParamList:  (at pp.c:4192)
        Decl: name='id', quals=[], storage=[] (at pp.c:4192)
          TypeDecl: declname='id', quals=[] (at pp.c:4192)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[] (at pp.c:4192)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[], storage=['static'] (at pp.c:4200)
    FuncDecl: quals=None (at pp.c:4200)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[] (at pp.c:4200)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='DefaultLplP__SubReceive__receive', quals=[], storage=['static'] (at pp.c:4208)
    FuncDecl: quals=None (at pp.c:4208)
      ParamList:  (at pp.c:4210)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4210)
          PtrDecl: quals=[] (at pp.c:4210)
            TypeDecl: declname='msg', quals=[] (at pp.c:4210)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4211)
          PtrDecl: quals=[] (at pp.c:4211)
            TypeDecl: declname='payload', quals=[] (at pp.c:4211)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4217)
          TypeDecl: declname='len', quals=[] (at pp.c:4217)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4204)
        TypeDecl: declname='DefaultLplP__SubReceive__receive', quals=[] (at pp.c:4208)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='DefaultLplP__SubSend__sendDone', quals=[], storage=['static'] (at pp.c:4219)
    FuncDecl: quals=None (at pp.c:4219)
      ParamList:  (at pp.c:4221)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4221)
          PtrDecl: quals=[] (at pp.c:4221)
            TypeDecl: declname='msg', quals=[] (at pp.c:4221)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4225)
          TypeDecl: declname='error', quals=[] (at pp.c:4225)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubSend__sendDone', quals=[] (at pp.c:4219)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__send__runTask', quals=[], storage=['static'] (at pp.c:4227)
    FuncDecl: quals=None (at pp.c:4227)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__send__runTask', quals=[] (at pp.c:4227)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestCca', quals=[], storage=['static'] (at pp.c:4229)
    FuncDecl: quals=None (at pp.c:4229)
      ParamList:  (at pp.c:4229)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4229)
          PtrDecl: quals=[] (at pp.c:4229)
            TypeDecl: declname='msg', quals=[] (at pp.c:4229)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestCca', quals=[] (at pp.c:4229)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:4231)
    FuncDecl: quals=None (at pp.c:4231)
      ParamList:  (at pp.c:4231)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4231)
          PtrDecl: quals=[] (at pp.c:4231)
            TypeDecl: declname='msg', quals=[] (at pp.c:4231)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:4231)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:4238)
    FuncDecl: quals=None (at pp.c:4238)
      ParamList:  (at pp.c:4238)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4238)
          PtrDecl: quals=[] (at pp.c:4238)
            TypeDecl: declname='msg', quals=[] (at pp.c:4238)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:4238)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__OffTimer__fired', quals=[], storage=['static'] (at pp.c:4240)
    FuncDecl: quals=None (at pp.c:4240)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__OffTimer__fired', quals=[] (at pp.c:4240)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Send__send', quals=[], storage=['static'] (at pp.c:4242)
    FuncDecl: quals=None (at pp.c:4242)
      ParamList:  (at pp.c:4244)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4244)
          PtrDecl: quals=[] (at pp.c:4244)
            TypeDecl: declname='msg', quals=[] (at pp.c:4244)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4252)
          TypeDecl: declname='len', quals=[] (at pp.c:4252)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__Send__send', quals=[] (at pp.c:4242)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__Send__maxPayloadLength', quals=[], storage=['static'] (at pp.c:4254)
    FuncDecl: quals=None (at pp.c:4254)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__Send__maxPayloadLength', quals=[] (at pp.c:4254)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:4256)
    FuncDecl: quals=None (at pp.c:4256)
      ParamList:  (at pp.c:4258)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4258)
          PtrDecl: quals=[] (at pp.c:4258)
            TypeDecl: declname='msg', quals=[] (at pp.c:4258)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:4261)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:4261)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[] (at pp.c:4256)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:4267)
    FuncDecl: quals=None (at pp.c:4267)
      ParamList:  (at pp.c:4269)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4269)
          PtrDecl: quals=[] (at pp.c:4269)
            TypeDecl: declname='msg', quals=[] (at pp.c:4269)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[] (at pp.c:4267)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='DefaultLplP__LowPowerListening__setLocalWakeupInterval', quals=[], storage=['static'] (at pp.c:4271)
    FuncDecl: quals=None (at pp.c:4271)
      ParamList:  (at pp.c:4271)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:4271)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:4271)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__LowPowerListening__setLocalWakeupInterval', quals=[] (at pp.c:4271)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Resend__sendDone', quals=[], storage=['static'] (at pp.c:4273)
    FuncDecl: quals=None (at pp.c:4273)
      ParamList:  (at pp.c:4273)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:4273)
          PtrDecl: quals=[] (at pp.c:4273)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:4273)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4273)
          TypeDecl: declname='error', quals=[] (at pp.c:4273)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__Resend__sendDone', quals=[] (at pp.c:4273)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Init__init', quals=[], storage=['static'] (at pp.c:4275)
    FuncDecl: quals=None (at pp.c:4275)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__Init__init', quals=[] (at pp.c:4275)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SubControl__startDone', quals=[], storage=['static'] (at pp.c:4277)
    FuncDecl: quals=None (at pp.c:4277)
      ParamList:  (at pp.c:4277)
        Decl: name='error', quals=[], storage=[] (at pp.c:4277)
          TypeDecl: declname='error', quals=[] (at pp.c:4277)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__startDone', quals=[] (at pp.c:4277)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SubControl__stopDone', quals=[], storage=['static'] (at pp.c:4279)
    FuncDecl: quals=None (at pp.c:4279)
      ParamList:  (at pp.c:4279)
        Decl: name='error', quals=[], storage=[] (at pp.c:4279)
          TypeDecl: declname='error', quals=[] (at pp.c:4279)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__stopDone', quals=[] (at pp.c:4279)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__startRadio__runTask', quals=[], storage=['static'] (at pp.c:4281)
    FuncDecl: quals=None (at pp.c:4281)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__startRadio__runTask', quals=[] (at pp.c:4281)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SendDoneTimer__fired', quals=[], storage=['static'] (at pp.c:4283)
    FuncDecl: quals=None (at pp.c:4283)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendDoneTimer__fired', quals=[] (at pp.c:4283)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__resend__runTask', quals=[], storage=['static'] (at pp.c:4285)
    FuncDecl: quals=None (at pp.c:4285)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__resend__runTask', quals=[] (at pp.c:4285)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__PowerCycle__detected', quals=[], storage=['static'] (at pp.c:4287)
    FuncDecl: quals=None (at pp.c:4287)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__PowerCycle__detected', quals=[] (at pp.c:4287)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__stopRadio__runTask', quals=[], storage=['static'] (at pp.c:4289)
    FuncDecl: quals=None (at pp.c:4289)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__stopRadio__runTask', quals=[] (at pp.c:4289)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SplitControl__start', quals=[], storage=['static'] (at pp.c:4291)
    FuncDecl: quals=None (at pp.c:4291)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControl__start', quals=[] (at pp.c:4291)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__startRadio__runTask', quals=[], storage=['static'] (at pp.c:4293)
    FuncDecl: quals=None (at pp.c:4293)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__startRadio__runTask', quals=[] (at pp.c:4293)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SubControl__startDone', quals=[], storage=['static'] (at pp.c:4295)
    FuncDecl: quals=None (at pp.c:4295)
      ParamList:  (at pp.c:4295)
        Decl: name='error', quals=[], storage=[] (at pp.c:4295)
          TypeDecl: declname='error', quals=[] (at pp.c:4295)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__startDone', quals=[] (at pp.c:4295)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SubControl__stopDone', quals=[], storage=['static'] (at pp.c:4297)
    FuncDecl: quals=None (at pp.c:4297)
      ParamList:  (at pp.c:4297)
        Decl: name='error', quals=[], storage=[] (at pp.c:4297)
          TypeDecl: declname='error', quals=[] (at pp.c:4297)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__stopDone', quals=[] (at pp.c:4297)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__getCca__runTask', quals=[], storage=['static'] (at pp.c:4299)
    FuncDecl: quals=None (at pp.c:4299)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__getCca__runTask', quals=[] (at pp.c:4299)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__OnTimer__fired', quals=[], storage=['static'] (at pp.c:4301)
    FuncDecl: quals=None (at pp.c:4301)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__OnTimer__fired', quals=[] (at pp.c:4301)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__PowerCycle__getSleepInterval', quals=[], storage=['static'] (at pp.c:4303)
    FuncDecl: quals=None (at pp.c:4303)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__PowerCycle__getSleepInterval', quals=[] (at pp.c:4303)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='PowerCycleP__PowerCycle__setSleepInterval', quals=[], storage=['static'] (at pp.c:4305)
    FuncDecl: quals=None (at pp.c:4305)
      ParamList:  (at pp.c:4305)
        Decl: name='sleepIntervalMs', quals=[], storage=[] (at pp.c:4305)
          TypeDecl: declname='sleepIntervalMs', quals=[] (at pp.c:4305)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='PowerCycleP__PowerCycle__setSleepInterval', quals=[] (at pp.c:4305)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__stopRadio__runTask', quals=[], storage=['static'] (at pp.c:4307)
    FuncDecl: quals=None (at pp.c:4307)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__stopRadio__runTask', quals=[] (at pp.c:4307)
        IdentifierType: names=['void'] (at None)
  Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:4309)
    FuncDecl: quals=None (at pp.c:4309)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[] (at pp.c:4309)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[], storage=['static'] (at pp.c:4310)
    FuncDecl: quals=None (at pp.c:4310)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[] (at pp.c:4310)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SubReceive__receive', quals=[], storage=['static'] (at pp.c:4318)
    FuncDecl: quals=None (at pp.c:4318)
      ParamList:  (at pp.c:4320)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4320)
          PtrDecl: quals=[] (at pp.c:4320)
            TypeDecl: declname='msg', quals=[] (at pp.c:4320)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4321)
          PtrDecl: quals=[] (at pp.c:4321)
            TypeDecl: declname='payload', quals=[] (at pp.c:4321)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4327)
          TypeDecl: declname='len', quals=[] (at pp.c:4327)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4314)
        TypeDecl: declname='CC2420ActiveMessageP__SubReceive__receive', quals=[] (at pp.c:4318)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SubSend__sendDone', quals=[], storage=['static'] (at pp.c:4329)
    FuncDecl: quals=None (at pp.c:4329)
      ParamList:  (at pp.c:4331)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4331)
          PtrDecl: quals=[] (at pp.c:4331)
            TypeDecl: declname='msg', quals=[] (at pp.c:4331)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4335)
          TypeDecl: declname='error', quals=[] (at pp.c:4335)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubSend__sendDone', quals=[] (at pp.c:4329)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[], storage=['static'] (at pp.c:4337)
    FuncDecl: quals=None (at pp.c:4337)
      ParamList:  (at pp.c:4337)
        Decl: name='error', quals=[], storage=[] (at pp.c:4337)
          TypeDecl: declname='error', quals=[] (at pp.c:4337)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[] (at pp.c:4337)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[], storage=['static'] (at pp.c:4339)
    FuncDecl: quals=None (at pp.c:4339)
      ParamList:  (at pp.c:4341)
        Decl: name='arg_0x102a97d60', quals=[], storage=[] (at pp.c:4341)
          TypeDecl: declname='arg_0x102a97d60', quals=[] (at pp.c:4341)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4343)
          PtrDecl: quals=[] (at pp.c:4343)
            TypeDecl: declname='msg', quals=[] (at pp.c:4343)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[] (at pp.c:4339)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:4345)
    FuncDecl: quals=None (at pp.c:4345)
      ParamList:  (at pp.c:4347)
        Decl: name='arg_0x102a97d60', quals=[], storage=[] (at pp.c:4347)
          TypeDecl: declname='arg_0x102a97d60', quals=[] (at pp.c:4347)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4349)
          PtrDecl: quals=[] (at pp.c:4349)
            TypeDecl: declname='msg', quals=[] (at pp.c:4349)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[] (at pp.c:4345)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:4356)
    FuncDecl: quals=None (at pp.c:4356)
      ParamList:  (at pp.c:4358)
        Decl: name='arg_0x102a97d60', quals=[], storage=[] (at pp.c:4358)
          TypeDecl: declname='arg_0x102a97d60', quals=[] (at pp.c:4358)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4360)
          PtrDecl: quals=[] (at pp.c:4360)
            TypeDecl: declname='msg', quals=[] (at pp.c:4360)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[] (at pp.c:4356)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[], storage=['static'] (at pp.c:4362)
    FuncDecl: quals=None (at pp.c:4362)
      ParamList:  (at pp.c:4364)
        Decl: name='arg_0x102a97258', quals=[], storage=[] (at pp.c:4364)
          TypeDecl: declname='arg_0x102a97258', quals=[] (at pp.c:4364)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='dest', quals=[], storage=[] (at pp.c:4366)
          TypeDecl: declname='dest', quals=[] (at pp.c:4366)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4368)
          PtrDecl: quals=[] (at pp.c:4368)
            TypeDecl: declname='msg', quals=[] (at pp.c:4368)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[] (at pp.c:4362)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[], storage=['static'] (at pp.c:4370)
    FuncDecl: quals=None (at pp.c:4370)
      ParamList:  (at pp.c:4370)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4370)
          PtrDecl: quals=[] (at pp.c:4370)
            TypeDecl: declname='msg', quals=[] (at pp.c:4370)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[] (at pp.c:4370)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:4372)
    FuncDecl: quals=None (at pp.c:4372)
      ParamList:  (at pp.c:4372)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4372)
          PtrDecl: quals=[] (at pp.c:4372)
            TypeDecl: declname='msg', quals=[] (at pp.c:4372)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:4372)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:4379)
    FuncDecl: quals=None (at pp.c:4379)
      ParamList:  (at pp.c:4379)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4379)
          PtrDecl: quals=[] (at pp.c:4379)
            TypeDecl: declname='msg', quals=[] (at pp.c:4379)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:4379)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__payloadLength', quals=[], storage=['static'] (at pp.c:4381)
    FuncDecl: quals=None (at pp.c:4381)
      ParamList:  (at pp.c:4383)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4383)
          PtrDecl: quals=[] (at pp.c:4383)
            TypeDecl: declname='msg', quals=[] (at pp.c:4383)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__payloadLength', quals=[] (at pp.c:4381)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__getPayload', quals=[], storage=['static'] (at pp.c:4390)
    FuncDecl: quals=None (at pp.c:4390)
      ParamList:  (at pp.c:4392)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4392)
          PtrDecl: quals=[] (at pp.c:4392)
            TypeDecl: declname='msg', quals=[] (at pp.c:4392)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4397)
          TypeDecl: declname='len', quals=[] (at pp.c:4397)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4387)
        TypeDecl: declname='CC2420ActiveMessageP__Packet__getPayload', quals=[] (at pp.c:4390)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[], storage=['static'] (at pp.c:4399)
    FuncDecl: quals=None (at pp.c:4399)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[] (at pp.c:4399)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[], storage=['static'] (at pp.c:4401)
    FuncDecl: quals=None (at pp.c:4401)
      ParamList:  (at pp.c:4403)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4403)
          PtrDecl: quals=[] (at pp.c:4403)
            TypeDecl: declname='msg', quals=[] (at pp.c:4403)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4407)
          TypeDecl: declname='len', quals=[] (at pp.c:4407)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[] (at pp.c:4401)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMSend__send', quals=[], storage=['static'] (at pp.c:4409)
    FuncDecl: quals=None (at pp.c:4409)
      ParamList:  (at pp.c:4411)
        Decl: name='arg_0x102a9d7d8', quals=[], storage=[] (at pp.c:4411)
          TypeDecl: declname='arg_0x102a9d7d8', quals=[] (at pp.c:4411)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:4413)
          TypeDecl: declname='addr', quals=[] (at pp.c:4413)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4415)
          PtrDecl: quals=[] (at pp.c:4415)
            TypeDecl: declname='msg', quals=[] (at pp.c:4415)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4424)
          TypeDecl: declname='len', quals=[] (at pp.c:4424)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMSend__send', quals=[] (at pp.c:4409)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMSend__getPayload', quals=[], storage=['static'] (at pp.c:4430)
    FuncDecl: quals=None (at pp.c:4430)
      ParamList:  (at pp.c:4432)
        Decl: name='arg_0x102a9d7d8', quals=[], storage=[] (at pp.c:4432)
          TypeDecl: declname='arg_0x102a9d7d8', quals=[] (at pp.c:4432)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4434)
          PtrDecl: quals=[] (at pp.c:4434)
            TypeDecl: declname='msg', quals=[] (at pp.c:4434)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4437)
          TypeDecl: declname='len', quals=[] (at pp.c:4437)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4428)
        TypeDecl: declname='CC2420ActiveMessageP__AMSend__getPayload', quals=[] (at pp.c:4430)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Snoop__default__receive', quals=[], storage=['static'] (at pp.c:4445)
    FuncDecl: quals=None (at pp.c:4445)
      ParamList:  (at pp.c:4447)
        Decl: name='arg_0x102a9a480', quals=[], storage=[] (at pp.c:4447)
          TypeDecl: declname='arg_0x102a9a480', quals=[] (at pp.c:4447)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4449)
          PtrDecl: quals=[] (at pp.c:4449)
            TypeDecl: declname='msg', quals=[] (at pp.c:4449)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4450)
          PtrDecl: quals=[] (at pp.c:4450)
            TypeDecl: declname='payload', quals=[] (at pp.c:4450)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4456)
          TypeDecl: declname='len', quals=[] (at pp.c:4456)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4441)
        TypeDecl: declname='CC2420ActiveMessageP__Snoop__default__receive', quals=[] (at pp.c:4445)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Receive__default__receive', quals=[], storage=['static'] (at pp.c:4464)
    FuncDecl: quals=None (at pp.c:4464)
      ParamList:  (at pp.c:4466)
        Decl: name='arg_0x102a9c908', quals=[], storage=[] (at pp.c:4466)
          TypeDecl: declname='arg_0x102a9c908', quals=[] (at pp.c:4466)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4468)
          PtrDecl: quals=[] (at pp.c:4468)
            TypeDecl: declname='msg', quals=[] (at pp.c:4468)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:4469)
          PtrDecl: quals=[] (at pp.c:4469)
            TypeDecl: declname='payload', quals=[] (at pp.c:4469)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4475)
          TypeDecl: declname='len', quals=[] (at pp.c:4475)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4460)
        TypeDecl: declname='CC2420ActiveMessageP__Receive__default__receive', quals=[] (at pp.c:4464)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__address', quals=[], storage=['static'] (at pp.c:4477)
    FuncDecl: quals=None (at pp.c:4477)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__address', quals=[] (at pp.c:4477)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__destination', quals=[], storage=['static'] (at pp.c:4487)
    FuncDecl: quals=None (at pp.c:4487)
      ParamList:  (at pp.c:4489)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4489)
          PtrDecl: quals=[] (at pp.c:4489)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4489)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__destination', quals=[] (at pp.c:4487)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__setDestination', quals=[], storage=['static'] (at pp.c:4491)
    FuncDecl: quals=None (at pp.c:4491)
      ParamList:  (at pp.c:4493)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4493)
          PtrDecl: quals=[] (at pp.c:4493)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4493)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:4497)
          TypeDecl: declname='addr', quals=[] (at pp.c:4497)
            IdentifierType: names=['am_addr_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setDestination', quals=[] (at pp.c:4491)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__type', quals=[], storage=['static'] (at pp.c:4499)
    FuncDecl: quals=None (at pp.c:4499)
      ParamList:  (at pp.c:4501)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4501)
          PtrDecl: quals=[] (at pp.c:4501)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4501)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__type', quals=[] (at pp.c:4499)
        IdentifierType: names=['am_id_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__setType', quals=[], storage=['static'] (at pp.c:4503)
    FuncDecl: quals=None (at pp.c:4503)
      ParamList:  (at pp.c:4505)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4505)
          PtrDecl: quals=[] (at pp.c:4505)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4505)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='t', quals=[], storage=[] (at pp.c:4509)
          TypeDecl: declname='t', quals=[] (at pp.c:4509)
            IdentifierType: names=['am_id_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setType', quals=[] (at pp.c:4503)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__isForMe', quals=[], storage=['static'] (at pp.c:4511)
    FuncDecl: quals=None (at pp.c:4511)
      ParamList:  (at pp.c:4513)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:4513)
          PtrDecl: quals=[] (at pp.c:4513)
            TypeDecl: declname='amsg', quals=[] (at pp.c:4513)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__isForMe', quals=[] (at pp.c:4511)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioResource__granted', quals=[], storage=['static'] (at pp.c:4515)
    FuncDecl: quals=None (at pp.c:4515)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioResource__granted', quals=[] (at pp.c:4515)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__AMSend__send', quals=[], storage=['static'] (at pp.c:4517)
    FuncDecl: quals=None (at pp.c:4517)
      ParamList:  (at pp.c:4517)
        Decl: name='addr', quals=[], storage=[] (at pp.c:4517)
          TypeDecl: declname='addr', quals=[] (at pp.c:4517)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4519)
          PtrDecl: quals=[] (at pp.c:4519)
            TypeDecl: declname='msg', quals=[] (at pp.c:4519)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4528)
          TypeDecl: declname='len', quals=[] (at pp.c:4528)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__AMSend__send', quals=[] (at pp.c:4517)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueEntryP__0__AMSend__getPayload', quals=[], storage=['static'] (at pp.c:4534)
    FuncDecl: quals=None (at pp.c:4534)
      ParamList:  (at pp.c:4536)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4536)
          PtrDecl: quals=[] (at pp.c:4536)
            TypeDecl: declname='msg', quals=[] (at pp.c:4536)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4539)
          TypeDecl: declname='len', quals=[] (at pp.c:4539)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4532)
        TypeDecl: declname='AMQueueEntryP__0__AMSend__getPayload', quals=[] (at pp.c:4534)
          IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__Send__sendDone', quals=[], storage=['static'] (at pp.c:4541)
    FuncDecl: quals=None (at pp.c:4541)
      ParamList:  (at pp.c:4543)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4543)
          PtrDecl: quals=[] (at pp.c:4543)
            TypeDecl: declname='msg', quals=[] (at pp.c:4543)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4547)
          TypeDecl: declname='error', quals=[] (at pp.c:4547)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__Send__sendDone', quals=[] (at pp.c:4541)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:4549)
    FuncDecl: quals=None (at pp.c:4549)
      ParamList:  (at pp.c:4551)
        Decl: name='arg_0x102b39020', quals=[], storage=[] (at pp.c:4551)
          TypeDecl: declname='arg_0x102b39020', quals=[] (at pp.c:4551)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4553)
          PtrDecl: quals=[] (at pp.c:4553)
            TypeDecl: declname='msg', quals=[] (at pp.c:4553)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4560)
          TypeDecl: declname='error', quals=[] (at pp.c:4560)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__AMSend__sendDone', quals=[] (at pp.c:4549)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Send__send', quals=[], storage=['static'] (at pp.c:4562)
    FuncDecl: quals=None (at pp.c:4562)
      ParamList:  (at pp.c:4564)
        Decl: name='arg_0x102b3be18', quals=[], storage=[] (at pp.c:4564)
          TypeDecl: declname='arg_0x102b3be18', quals=[] (at pp.c:4564)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4566)
          PtrDecl: quals=[] (at pp.c:4566)
            TypeDecl: declname='msg', quals=[] (at pp.c:4566)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4574)
          TypeDecl: declname='len', quals=[] (at pp.c:4574)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Send__send', quals=[] (at pp.c:4562)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__0__Send__getPayload', quals=[], storage=['static'] (at pp.c:4580)
    FuncDecl: quals=None (at pp.c:4580)
      ParamList:  (at pp.c:4582)
        Decl: name='arg_0x102b3be18', quals=[], storage=[] (at pp.c:4582)
          TypeDecl: declname='arg_0x102b3be18', quals=[] (at pp.c:4582)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4584)
          PtrDecl: quals=[] (at pp.c:4584)
            TypeDecl: declname='msg', quals=[] (at pp.c:4584)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4587)
          TypeDecl: declname='len', quals=[] (at pp.c:4587)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4578)
        TypeDecl: declname='AMQueueImplP__0__Send__getPayload', quals=[] (at pp.c:4580)
          IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Send__default__sendDone', quals=[], storage=['static'] (at pp.c:4589)
    FuncDecl: quals=None (at pp.c:4589)
      ParamList:  (at pp.c:4591)
        Decl: name='arg_0x102b3be18', quals=[], storage=[] (at pp.c:4591)
          TypeDecl: declname='arg_0x102b3be18', quals=[] (at pp.c:4591)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4593)
          PtrDecl: quals=[] (at pp.c:4593)
            TypeDecl: declname='msg', quals=[] (at pp.c:4593)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4597)
          TypeDecl: declname='error', quals=[] (at pp.c:4597)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Send__default__sendDone', quals=[] (at pp.c:4589)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__errorTask__runTask', quals=[], storage=['static'] (at pp.c:4599)
    FuncDecl: quals=None (at pp.c:4599)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__errorTask__runTask', quals=[] (at pp.c:4599)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__CancelTask__runTask', quals=[], storage=['static'] (at pp.c:4601)
    FuncDecl: quals=None (at pp.c:4601)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__CancelTask__runTask', quals=[] (at pp.c:4601)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__SubAMSend__sendDone', quals=[], storage=['static'] (at pp.c:4603)
    FuncDecl: quals=None (at pp.c:4603)
      ParamList:  (at pp.c:4605)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4605)
          PtrDecl: quals=[] (at pp.c:4605)
            TypeDecl: declname='msg', quals=[] (at pp.c:4605)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4612)
          TypeDecl: declname='error', quals=[] (at pp.c:4612)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__SubAMSend__sendDone', quals=[] (at pp.c:4603)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__AMSend__send', quals=[], storage=['static'] (at pp.c:4614)
    FuncDecl: quals=None (at pp.c:4614)
      ParamList:  (at pp.c:4614)
        Decl: name='addr', quals=[], storage=[] (at pp.c:4614)
          TypeDecl: declname='addr', quals=[] (at pp.c:4614)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4616)
          PtrDecl: quals=[] (at pp.c:4616)
            TypeDecl: declname='msg', quals=[] (at pp.c:4616)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4625)
          TypeDecl: declname='len', quals=[] (at pp.c:4625)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__AMSend__send', quals=[] (at pp.c:4614)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LplAMSenderP__0__AMSend__getPayload', quals=[], storage=['static'] (at pp.c:4631)
    FuncDecl: quals=None (at pp.c:4631)
      ParamList:  (at pp.c:4633)
        Decl: name='msg', quals=[], storage=[] (at pp.c:4633)
          PtrDecl: quals=[] (at pp.c:4633)
            TypeDecl: declname='msg', quals=[] (at pp.c:4633)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4636)
          TypeDecl: declname='len', quals=[] (at pp.c:4636)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:4629)
        TypeDecl: declname='LplAMSenderP__0__AMSend__getPayload', quals=[] (at pp.c:4631)
          IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__LogWrite__erase', quals=[], storage=['static'] (at pp.c:4638)
    FuncDecl: quals=None (at pp.c:4638)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__erase', quals=[] (at pp.c:4638)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__LogWrite__append', quals=[], storage=['static'] (at pp.c:4640)
    FuncDecl: quals=None (at pp.c:4640)
      ParamList:  (at pp.c:4642)
        Decl: name='buf', quals=[], storage=[] (at pp.c:4642)
          PtrDecl: quals=[] (at pp.c:4642)
            TypeDecl: declname='buf', quals=[] (at pp.c:4642)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4649)
          TypeDecl: declname='len', quals=[] (at pp.c:4649)
            IdentifierType: names=['storage_len_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__append', quals=[] (at pp.c:4640)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__eraseTask__postTask', quals=[], storage=['static'] (at pp.c:4651)
    FuncDecl: quals=None (at pp.c:4651)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__eraseTask__postTask', quals=[] (at pp.c:4651)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__appendTask__postTask', quals=[], storage=['static'] (at pp.c:4653)
    FuncDecl: quals=None (at pp.c:4653)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__appendTask__postTask', quals=[] (at pp.c:4653)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Sensor__read', quals=[], storage=['static'] (at pp.c:4655)
    FuncDecl: quals=None (at pp.c:4655)
      ParamList:  (at pp.c:4657)
        Decl: name='arg_0x101541798', quals=[], storage=[] (at pp.c:4657)
          TypeDecl: declname='arg_0x101541798', quals=[] (at pp.c:4657)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Sensor__read', quals=[] (at pp.c:4655)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Leds__led0Toggle', quals=[], storage=['static'] (at pp.c:4659)
    FuncDecl: quals=None (at pp.c:4659)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Leds__led0Toggle', quals=[] (at pp.c:4659)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Leds__led1Toggle', quals=[], storage=['static'] (at pp.c:4661)
    FuncDecl: quals=None (at pp.c:4661)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Leds__led1Toggle', quals=[] (at pp.c:4661)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Leds__led2Toggle', quals=[], storage=['static'] (at pp.c:4663)
    FuncDecl: quals=None (at pp.c:4663)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Leds__led2Toggle', quals=[] (at pp.c:4663)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Timer__startPeriodic', quals=[], storage=['static'] (at pp.c:4665)
    FuncDecl: quals=None (at pp.c:4665)
      ParamList:  (at pp.c:4665)
        Decl: name='dt', quals=[], storage=[] (at pp.c:4665)
          TypeDecl: declname='dt', quals=[] (at pp.c:4665)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Timer__startPeriodic', quals=[] (at pp.c:4665)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:4667)
    Enum: name='PeriodicSampleLoggerP__0____nesc_unnamed4320' (at pp.c:4667)
      EnumeratorList:  (at pp.c:4669)
        Enumerator: name='PeriodicSampleLoggerP__0__eraseTask' (at pp.c:4669)
          Constant: type='int', value='0U' (at pp.c:4669)
  Typedef: name='PeriodicSampleLoggerP__0____nesc_sillytask_eraseTask', quals=[], storage=['typedef'] (at pp.c:4672)
    ArrayDecl:  (at pp.c:4672)
      TypeDecl: declname='PeriodicSampleLoggerP__0____nesc_sillytask_eraseTask', quals=[] (at pp.c:4672)
        IdentifierType: names=['int'] (at None)
      ID: name='PeriodicSampleLoggerP__0__eraseTask' (at pp.c:4672)
  Decl: name=None, quals=[], storage=[] (at pp.c:4673)
    Enum: name='PeriodicSampleLoggerP__0____nesc_unnamed4321' (at pp.c:4673)
      EnumeratorList:  (at pp.c:4675)
        Enumerator: name='PeriodicSampleLoggerP__0__appendTask' (at pp.c:4675)
          Constant: type='int', value='1U' (at pp.c:4675)
  Typedef: name='PeriodicSampleLoggerP__0____nesc_sillytask_appendTask', quals=[], storage=['typedef'] (at pp.c:4678)
    ArrayDecl:  (at pp.c:4678)
      TypeDecl: declname='PeriodicSampleLoggerP__0____nesc_sillytask_appendTask', quals=[] (at pp.c:4678)
        IdentifierType: names=['int'] (at None)
      ID: name='PeriodicSampleLoggerP__0__appendTask' (at pp.c:4678)
  Typedef: name='PeriodicSampleLoggerP__0__generic_sensor_sample_t', quals=[], storage=['typedef'] (at pp.c:4684)
    TypeDecl: declname='PeriodicSampleLoggerP__0__generic_sensor_sample_t', quals=[] (at pp.c:4684)
      Struct: name='PeriodicSampleLoggerP__0__generic_sensor_sample', packed=False (at pp.c:4681)
        Decl: name='sample_num', quals=[], storage=[] (at 0)
          TypeDecl: declname='sample_num', quals=[] (at pp.c:4682)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='values', quals=[], storage=[] (at 0)
          ArrayDecl:  (at pp.c:4683)
            TypeDecl: declname='values', quals=[] (at pp.c:4683)
              IdentifierType: names=['PeriodicSampleLoggerP__0__sensor_type_t'] (at None)
            Constant: type='int', value='1' (at pp.c:4683)
  Typedef: name='PeriodicSampleLoggerP__0__generic_sensor_sample_type_union_t', quals=[], storage=['typedef'] (at pp.c:4697)
    TypeDecl: declname='PeriodicSampleLoggerP__0__generic_sensor_sample_type_union_t', quals=[] (at pp.c:4697)
      Union: name='PeriodicSampleLoggerP__0__generic_sensor_sample_type_union', packed=False (at pp.c:4692)
        Decl: name='u8', quals=[], storage=[] (at 0)
          TypeDecl: declname='u8', quals=[] (at pp.c:4693)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='u16', quals=[], storage=[] (at 0)
          TypeDecl: declname='u16', quals=[] (at pp.c:4694)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='u32', quals=[], storage=[] (at 0)
          TypeDecl: declname='u32', quals=[] (at pp.c:4695)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='st', quals=[], storage=[] (at 0)
          TypeDecl: declname='st', quals=[] (at pp.c:4696)
            IdentifierType: names=['PeriodicSampleLoggerP__0__sensor_type_t'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__sample', quals=[], storage=[] (at pp.c:4699)
    ArrayDecl:  (at pp.c:4699)
      TypeDecl: declname='PeriodicSampleLoggerP__0__sample', quals=[] (at pp.c:4699)
        IdentifierType: names=['PeriodicSampleLoggerP__0__generic_sensor_sample_t'] (at None)
      Constant: type='int', value='2' (at pp.c:4699)
  Decl: name='PeriodicSampleLoggerP__0__current_sample', quals=[], storage=[] (at pp.c:4700)
    PtrDecl: quals=[] (at pp.c:4700)
      TypeDecl: declname='PeriodicSampleLoggerP__0__current_sample', quals=[] (at pp.c:4700)
        IdentifierType: names=['PeriodicSampleLoggerP__0__generic_sensor_sample_t'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__current_sample_id', quals=[], storage=[] (at pp.c:4701)
    TypeDecl: declname='PeriodicSampleLoggerP__0__current_sample_id', quals=[] (at pp.c:4701)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__readSensors', quals=[], storage=['static'] (at pp.c:4706)
    FuncDecl: quals=None (at pp.c:4706)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__readSensors', quals=[] (at pp.c:4706)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__appendSample', quals=[], storage=['static'] (at pp.c:4712)
    FuncDecl: quals=None (at pp.c:4712)
      ParamList:  (at pp.c:4712)
        Decl: name='s', quals=[], storage=[] (at pp.c:4712)
          PtrDecl: quals=[] (at pp.c:4712)
            TypeDecl: declname='s', quals=[] (at pp.c:4712)
              IdentifierType: names=['PeriodicSampleLoggerP__0__generic_sensor_sample_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__appendSample', quals=[] (at pp.c:4712)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__eraseTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:4718)
    FuncDecl: quals=None (at pp.c:4718)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__eraseTask__runTask', quals=[] (at pp.c:4718)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__appendTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:4723)
    FuncDecl: quals=None (at pp.c:4723)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__appendTask__runTask', quals=[] (at pp.c:4723)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Boot__booted', quals=[], storage=['inline', 'static'] (at pp.c:4727)
    FuncDecl: quals=None (at pp.c:4727)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Boot__booted', quals=[] (at pp.c:4727)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__LogWrite__eraseDone', quals=[], storage=['inline', 'static'] (at pp.c:4732)
    FuncDecl: quals=None (at pp.c:4732)
      ParamList:  (at pp.c:4732)
        Decl: name='error', quals=[], storage=[] (at pp.c:4732)
          TypeDecl: declname='error', quals=[] (at pp.c:4732)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__eraseDone', quals=[] (at pp.c:4732)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Timer__fired', quals=[], storage=['inline', 'static'] (at pp.c:4741)
    FuncDecl: quals=None (at pp.c:4741)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Timer__fired', quals=[] (at pp.c:4741)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Sensor__readDone', quals=[], storage=['inline', 'static'] (at pp.c:4749)
    FuncDecl: quals=None (at pp.c:4749)
      ParamList:  (at pp.c:4749)
        Decl: name='i', quals=[], storage=[] (at pp.c:4749)
          TypeDecl: declname='i', quals=[] (at pp.c:4749)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='result', quals=[], storage=[] (at pp.c:4749)
          TypeDecl: declname='result', quals=[] (at pp.c:4749)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='val', quals=[], storage=[] (at pp.c:4749)
          TypeDecl: declname='val', quals=[] (at pp.c:4749)
            IdentifierType: names=['PeriodicSampleLoggerP__0__sensor_type_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Sensor__readDone', quals=[] (at pp.c:4749)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__LogWrite__appendDone', quals=[], storage=['inline', 'static'] (at pp.c:4760)
    FuncDecl: quals=None (at pp.c:4760)
      ParamList:  (at pp.c:4760)
        Decl: name='buf', quals=[], storage=[] (at pp.c:4760)
          PtrDecl: quals=[] (at pp.c:4760)
            TypeDecl: declname='buf', quals=[] (at pp.c:4760)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:4760)
          TypeDecl: declname='len', quals=[] (at pp.c:4760)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='recordsLost', quals=[], storage=[] (at pp.c:4760)
          TypeDecl: declname='recordsLost', quals=[] (at pp.c:4760)
            IdentifierType: names=['bool'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:4760)
          TypeDecl: declname='error', quals=[] (at pp.c:4760)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__appendDone', quals=[] (at pp.c:4760)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__LogWrite__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:4765)
    FuncDecl: quals=None (at pp.c:4765)
      ParamList:  (at pp.c:4765)
        Decl: name='error', quals=[], storage=[] (at pp.c:4765)
          TypeDecl: declname='error', quals=[] (at pp.c:4765)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__syncDone', quals=[] (at pp.c:4765)
        IdentifierType: names=['void'] (at None)
  Decl: name='PeriodicSampleLoggerP__0__Sensor__default__read', quals=[], storage=['inline', 'static'] (at pp.c:4766)
    FuncDecl: quals=None (at pp.c:4766)
      ParamList:  (at pp.c:4766)
        Decl: name='i', quals=[], storage=[] (at pp.c:4766)
          TypeDecl: declname='i', quals=[] (at pp.c:4766)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='PeriodicSampleLoggerP__0__Sensor__default__read', quals=[] (at pp.c:4766)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430TimerP__0__Event__fired', quals=[], storage=['static'] (at pp.c:4768)
    FuncDecl: quals=None (at pp.c:4768)
      ParamList:  (at pp.c:4770)
        Decl: name='arg_0x101629c98', quals=[], storage=[] (at pp.c:4770)
          TypeDecl: declname='arg_0x101629c98', quals=[] (at pp.c:4770)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Event__fired', quals=[] (at pp.c:4768)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Timer__overflow', quals=[], storage=['static'] (at pp.c:4772)
    FuncDecl: quals=None (at pp.c:4772)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Timer__overflow', quals=[] (at pp.c:4772)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Timer__get', quals=[], storage=['inline', 'static'] (at pp.c:4774)
    FuncDecl: quals=None (at pp.c:4774)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Timer__get', quals=[] (at pp.c:4774)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerP__0__VectorTimerX0__fired', quals=[], storage=['inline', 'static'] (at pp.c:4776)
    FuncDecl: quals=None (at pp.c:4776)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__VectorTimerX0__fired', quals=[] (at pp.c:4776)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__VectorTimerX1__fired', quals=[], storage=['inline', 'static'] (at pp.c:4781)
    FuncDecl: quals=None (at pp.c:4781)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__VectorTimerX1__fired', quals=[] (at pp.c:4781)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Overflow__fired', quals=[], storage=['inline', 'static'] (at pp.c:4787)
    FuncDecl: quals=None (at pp.c:4787)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Overflow__fired', quals=[] (at pp.c:4787)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__0__Event__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:4796)
    FuncDecl: quals=None (at pp.c:4796)
      ParamList:  (at pp.c:4796)
        Decl: name='n', quals=[], storage=[] (at pp.c:4796)
          TypeDecl: declname='n', quals=[] (at pp.c:4796)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__0__Event__default__fired', quals=[] (at pp.c:4796)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Event__fired', quals=[], storage=['static'] (at pp.c:4798)
    FuncDecl: quals=None (at pp.c:4798)
      ParamList:  (at pp.c:4800)
        Decl: name='arg_0x101629c98', quals=[], storage=[] (at pp.c:4800)
          TypeDecl: declname='arg_0x101629c98', quals=[] (at pp.c:4800)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Event__fired', quals=[] (at pp.c:4798)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Timer__overflow', quals=[], storage=['static'] (at pp.c:4802)
    FuncDecl: quals=None (at pp.c:4802)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Timer__overflow', quals=[] (at pp.c:4802)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Timer__get', quals=[], storage=['static'] (at pp.c:4804)
    FuncDecl: quals=None (at pp.c:4804)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Timer__get', quals=[] (at pp.c:4804)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerP__1__Timer__isOverflowPending', quals=[], storage=['inline', 'static'] (at pp.c:4806)
    FuncDecl: quals=None (at pp.c:4806)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Timer__isOverflowPending', quals=[] (at pp.c:4806)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430TimerP__1__VectorTimerX0__fired', quals=[], storage=['inline', 'static'] (at pp.c:4808)
    FuncDecl: quals=None (at pp.c:4808)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__VectorTimerX0__fired', quals=[] (at pp.c:4808)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__VectorTimerX1__fired', quals=[], storage=['inline', 'static'] (at pp.c:4813)
    FuncDecl: quals=None (at pp.c:4813)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__VectorTimerX1__fired', quals=[] (at pp.c:4813)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Overflow__fired', quals=[], storage=['inline', 'static'] (at pp.c:4819)
    FuncDecl: quals=None (at pp.c:4819)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Overflow__fired', quals=[] (at pp.c:4819)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerP__1__Event__default__fired', quals=[], storage=['static'] (at pp.c:4828)
    FuncDecl: quals=None (at pp.c:4828)
      ParamList:  (at pp.c:4828)
        Decl: name='n', quals=[], storage=[] (at pp.c:4828)
          TypeDecl: declname='n', quals=[] (at pp.c:4828)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerP__1__Event__default__fired', quals=[] (at pp.c:4828)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Capture__captured', quals=[], storage=['static'] (at pp.c:4830)
    FuncDecl: quals=None (at pp.c:4830)
      ParamList:  (at pp.c:4830)
        Decl: name='time', quals=[], storage=[] (at pp.c:4830)
          TypeDecl: declname='time', quals=[] (at pp.c:4830)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Capture__captured', quals=[] (at pp.c:4830)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Compare__fired', quals=[], storage=['static'] (at pp.c:4832)
    FuncDecl: quals=None (at pp.c:4832)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Compare__fired', quals=[] (at pp.c:4832)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__0__cc_t', quals=[], storage=['typedef'] (at pp.c:4834)
    TypeDecl: declname='Msp430TimerCapComP__0__cc_t', quals=[] (at pp.c:4834)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:4837)
    FuncDecl: quals=None (at pp.c:4837)
      ParamList:  (at pp.c:4837)
        Decl: name='x', quals=[], storage=[] (at pp.c:4837)
          TypeDecl: declname='x', quals=[] (at pp.c:4837)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__int2CC', quals=[] (at pp.c:4837)
        IdentifierType: names=['Msp430TimerCapComP__0__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:4839)
    FuncDecl: quals=None (at pp.c:4839)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Control__getControl', quals=[] (at pp.c:4839)
        IdentifierType: names=['Msp430TimerCapComP__0__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:4841)
    FuncDecl: quals=None (at pp.c:4841)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Capture__getEvent', quals=[] (at pp.c:4841)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__0__Event__fired', quals=[], storage=['static'] (at pp.c:4843)
    FuncDecl: quals=None (at pp.c:4843)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Event__fired', quals=[] (at pp.c:4843)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:4851)
    FuncDecl: quals=None (at pp.c:4851)
      ParamList:  (at pp.c:4851)
        Decl: name='n', quals=[], storage=[] (at pp.c:4851)
          TypeDecl: declname='n', quals=[] (at pp.c:4851)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Capture__default__captured', quals=[] (at pp.c:4851)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:4855)
    FuncDecl: quals=None (at pp.c:4855)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Compare__default__fired', quals=[] (at pp.c:4855)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__0__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:4859)
    FuncDecl: quals=None (at pp.c:4859)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__0__Timer__overflow', quals=[] (at pp.c:4859)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Capture__captured', quals=[], storage=['static'] (at pp.c:4861)
    FuncDecl: quals=None (at pp.c:4861)
      ParamList:  (at pp.c:4861)
        Decl: name='time', quals=[], storage=[] (at pp.c:4861)
          TypeDecl: declname='time', quals=[] (at pp.c:4861)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Capture__captured', quals=[] (at pp.c:4861)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Compare__fired', quals=[], storage=['static'] (at pp.c:4863)
    FuncDecl: quals=None (at pp.c:4863)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Compare__fired', quals=[] (at pp.c:4863)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__1__cc_t', quals=[], storage=['typedef'] (at pp.c:4865)
    TypeDecl: declname='Msp430TimerCapComP__1__cc_t', quals=[] (at pp.c:4865)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:4868)
    FuncDecl: quals=None (at pp.c:4868)
      ParamList:  (at pp.c:4868)
        Decl: name='x', quals=[], storage=[] (at pp.c:4868)
          TypeDecl: declname='x', quals=[] (at pp.c:4868)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__int2CC', quals=[] (at pp.c:4868)
        IdentifierType: names=['Msp430TimerCapComP__1__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:4870)
    FuncDecl: quals=None (at pp.c:4870)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Control__getControl', quals=[] (at pp.c:4870)
        IdentifierType: names=['Msp430TimerCapComP__1__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:4872)
    FuncDecl: quals=None (at pp.c:4872)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Capture__getEvent', quals=[] (at pp.c:4872)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__1__Event__fired', quals=[], storage=['static'] (at pp.c:4874)
    FuncDecl: quals=None (at pp.c:4874)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Event__fired', quals=[] (at pp.c:4874)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:4882)
    FuncDecl: quals=None (at pp.c:4882)
      ParamList:  (at pp.c:4882)
        Decl: name='n', quals=[], storage=[] (at pp.c:4882)
          TypeDecl: declname='n', quals=[] (at pp.c:4882)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Capture__default__captured', quals=[] (at pp.c:4882)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:4886)
    FuncDecl: quals=None (at pp.c:4886)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Compare__default__fired', quals=[] (at pp.c:4886)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__1__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:4890)
    FuncDecl: quals=None (at pp.c:4890)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__1__Timer__overflow', quals=[] (at pp.c:4890)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Capture__captured', quals=[], storage=['static'] (at pp.c:4892)
    FuncDecl: quals=None (at pp.c:4892)
      ParamList:  (at pp.c:4892)
        Decl: name='time', quals=[], storage=[] (at pp.c:4892)
          TypeDecl: declname='time', quals=[] (at pp.c:4892)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Capture__captured', quals=[] (at pp.c:4892)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Compare__fired', quals=[], storage=['static'] (at pp.c:4894)
    FuncDecl: quals=None (at pp.c:4894)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Compare__fired', quals=[] (at pp.c:4894)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__2__cc_t', quals=[], storage=['typedef'] (at pp.c:4896)
    TypeDecl: declname='Msp430TimerCapComP__2__cc_t', quals=[] (at pp.c:4896)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:4899)
    FuncDecl: quals=None (at pp.c:4899)
      ParamList:  (at pp.c:4899)
        Decl: name='x', quals=[], storage=[] (at pp.c:4899)
          TypeDecl: declname='x', quals=[] (at pp.c:4899)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__int2CC', quals=[] (at pp.c:4899)
        IdentifierType: names=['Msp430TimerCapComP__2__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:4901)
    FuncDecl: quals=None (at pp.c:4901)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Control__getControl', quals=[] (at pp.c:4901)
        IdentifierType: names=['Msp430TimerCapComP__2__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:4903)
    FuncDecl: quals=None (at pp.c:4903)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Capture__getEvent', quals=[] (at pp.c:4903)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__2__Event__fired', quals=[], storage=['static'] (at pp.c:4905)
    FuncDecl: quals=None (at pp.c:4905)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Event__fired', quals=[] (at pp.c:4905)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:4913)
    FuncDecl: quals=None (at pp.c:4913)
      ParamList:  (at pp.c:4913)
        Decl: name='n', quals=[], storage=[] (at pp.c:4913)
          TypeDecl: declname='n', quals=[] (at pp.c:4913)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Capture__default__captured', quals=[] (at pp.c:4913)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:4917)
    FuncDecl: quals=None (at pp.c:4917)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Compare__default__fired', quals=[] (at pp.c:4917)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__2__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:4921)
    FuncDecl: quals=None (at pp.c:4921)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__2__Timer__overflow', quals=[] (at pp.c:4921)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Capture__captured', quals=[], storage=['static'] (at pp.c:4923)
    FuncDecl: quals=None (at pp.c:4923)
      ParamList:  (at pp.c:4923)
        Decl: name='time', quals=[], storage=[] (at pp.c:4923)
          TypeDecl: declname='time', quals=[] (at pp.c:4923)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Capture__captured', quals=[] (at pp.c:4923)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Compare__fired', quals=[], storage=['static'] (at pp.c:4925)
    FuncDecl: quals=None (at pp.c:4925)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Compare__fired', quals=[] (at pp.c:4925)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Timer__get', quals=[], storage=['static'] (at pp.c:4927)
    FuncDecl: quals=None (at pp.c:4927)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Timer__get', quals=[] (at pp.c:4927)
        IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='Msp430TimerCapComP__3__cc_t', quals=[], storage=['typedef'] (at pp.c:4929)
    TypeDecl: declname='Msp430TimerCapComP__3__cc_t', quals=[] (at pp.c:4929)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:4931)
    FuncDecl: quals=None (at pp.c:4931)
      ParamList:  (at pp.c:4931)
        Decl: name='x', quals=[], storage=[] (at pp.c:4931)
          TypeDecl: declname='x', quals=[] (at pp.c:4931)
            IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__CC2int', quals=[] (at pp.c:4931)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:4932)
    FuncDecl: quals=None (at pp.c:4932)
      ParamList:  (at pp.c:4932)
        Decl: name='x', quals=[], storage=[] (at pp.c:4932)
          TypeDecl: declname='x', quals=[] (at pp.c:4932)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__int2CC', quals=[] (at pp.c:4932)
        IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__compareControl', quals=[], storage=['inline', 'static'] (at pp.c:4934)
    FuncDecl: quals=None (at pp.c:4934)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__compareControl', quals=[] (at pp.c:4934)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:4936)
    FuncDecl: quals=None (at pp.c:4936)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__getControl', quals=[] (at pp.c:4936)
        IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:4946)
    FuncDecl: quals=None (at pp.c:4946)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[] (at pp.c:4946)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[], storage=['inline', 'static'] (at pp.c:4956)
    FuncDecl: quals=None (at pp.c:4956)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[] (at pp.c:4956)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:4958)
    FuncDecl: quals=None (at pp.c:4958)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__enableEvents', quals=[] (at pp.c:4958)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:4963)
    FuncDecl: quals=None (at pp.c:4963)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Control__disableEvents', quals=[] (at pp.c:4963)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:4965)
    FuncDecl: quals=None (at pp.c:4965)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Capture__getEvent', quals=[] (at pp.c:4965)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__3__Compare__setEvent', quals=[], storage=['inline', 'static'] (at pp.c:4970)
    FuncDecl: quals=None (at pp.c:4970)
      ParamList:  (at pp.c:4970)
        Decl: name='x', quals=[], storage=[] (at pp.c:4970)
          TypeDecl: declname='x', quals=[] (at pp.c:4970)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEvent', quals=[] (at pp.c:4970)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[], storage=['inline', 'static'] (at pp.c:4980)
    FuncDecl: quals=None (at pp.c:4980)
      ParamList:  (at pp.c:4980)
        Decl: name='x', quals=[], storage=[] (at pp.c:4980)
          TypeDecl: declname='x', quals=[] (at pp.c:4980)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[] (at pp.c:4980)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:4982)
    FuncDecl: quals=None (at pp.c:4982)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Event__fired', quals=[] (at pp.c:4982)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:4990)
    FuncDecl: quals=None (at pp.c:4990)
      ParamList:  (at pp.c:4990)
        Decl: name='n', quals=[], storage=[] (at pp.c:4990)
          TypeDecl: declname='n', quals=[] (at pp.c:4990)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Capture__default__captured', quals=[] (at pp.c:4990)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__3__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:4998)
    FuncDecl: quals=None (at pp.c:4998)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__3__Timer__overflow', quals=[] (at pp.c:4998)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Capture__captured', quals=[], storage=['static'] (at pp.c:5000)
    FuncDecl: quals=None (at pp.c:5000)
      ParamList:  (at pp.c:5000)
        Decl: name='time', quals=[], storage=[] (at pp.c:5000)
          TypeDecl: declname='time', quals=[] (at pp.c:5000)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Capture__captured', quals=[] (at pp.c:5000)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Compare__fired', quals=[], storage=['static'] (at pp.c:5002)
    FuncDecl: quals=None (at pp.c:5002)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Compare__fired', quals=[] (at pp.c:5002)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__4__cc_t', quals=[], storage=['typedef'] (at pp.c:5004)
    TypeDecl: declname='Msp430TimerCapComP__4__cc_t', quals=[] (at pp.c:5004)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:5006)
    FuncDecl: quals=None (at pp.c:5006)
      ParamList:  (at pp.c:5006)
        Decl: name='x', quals=[], storage=[] (at pp.c:5006)
          TypeDecl: declname='x', quals=[] (at pp.c:5006)
            IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__CC2int', quals=[] (at pp.c:5006)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5007)
    FuncDecl: quals=None (at pp.c:5007)
      ParamList:  (at pp.c:5007)
        Decl: name='x', quals=[], storage=[] (at pp.c:5007)
          TypeDecl: declname='x', quals=[] (at pp.c:5007)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__int2CC', quals=[] (at pp.c:5007)
        IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__captureControl', quals=[], storage=['inline', 'static'] (at pp.c:5009)
    FuncDecl: quals=None (at pp.c:5009)
      ParamList:  (at pp.c:5009)
        Decl: name='l_cm', quals=[], storage=[] (at pp.c:5009)
          TypeDecl: declname='l_cm', quals=[] (at pp.c:5009)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__captureControl', quals=[] (at pp.c:5009)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5011)
    FuncDecl: quals=None (at pp.c:5011)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__getControl', quals=[] (at pp.c:5011)
        IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:5021)
    FuncDecl: quals=None (at pp.c:5021)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[] (at pp.c:5021)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[], storage=['inline', 'static'] (at pp.c:5023)
    FuncDecl: quals=None (at pp.c:5023)
      ParamList:  (at pp.c:5023)
        Decl: name='cm', quals=[], storage=[] (at pp.c:5023)
          TypeDecl: declname='cm', quals=[] (at pp.c:5023)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[] (at pp.c:5023)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:5025)
    FuncDecl: quals=None (at pp.c:5025)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__enableEvents', quals=[] (at pp.c:5025)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:5030)
    FuncDecl: quals=None (at pp.c:5030)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Control__disableEvents', quals=[] (at pp.c:5030)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5032)
    FuncDecl: quals=None (at pp.c:5032)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Capture__getEvent', quals=[] (at pp.c:5032)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[], storage=['inline', 'static'] (at pp.c:5034)
    FuncDecl: quals=None (at pp.c:5034)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[] (at pp.c:5034)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5039)
    FuncDecl: quals=None (at pp.c:5039)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Event__fired', quals=[] (at pp.c:5039)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5041)
    FuncDecl: quals=None (at pp.c:5041)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Compare__default__fired', quals=[] (at pp.c:5041)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__4__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5045)
    FuncDecl: quals=None (at pp.c:5045)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__4__Timer__overflow', quals=[] (at pp.c:5045)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Capture__captured', quals=[], storage=['static'] (at pp.c:5047)
    FuncDecl: quals=None (at pp.c:5047)
      ParamList:  (at pp.c:5047)
        Decl: name='time', quals=[], storage=[] (at pp.c:5047)
          TypeDecl: declname='time', quals=[] (at pp.c:5047)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Capture__captured', quals=[] (at pp.c:5047)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Compare__fired', quals=[], storage=['static'] (at pp.c:5049)
    FuncDecl: quals=None (at pp.c:5049)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Compare__fired', quals=[] (at pp.c:5049)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Timer__get', quals=[], storage=['static'] (at pp.c:5051)
    FuncDecl: quals=None (at pp.c:5051)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Timer__get', quals=[] (at pp.c:5051)
        IdentifierType: names=['uint16_t'] (at None)
  Typedef: name='Msp430TimerCapComP__5__cc_t', quals=[], storage=['typedef'] (at pp.c:5053)
    TypeDecl: declname='Msp430TimerCapComP__5__cc_t', quals=[] (at pp.c:5053)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:5055)
    FuncDecl: quals=None (at pp.c:5055)
      ParamList:  (at pp.c:5055)
        Decl: name='x', quals=[], storage=[] (at pp.c:5055)
          TypeDecl: declname='x', quals=[] (at pp.c:5055)
            IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__CC2int', quals=[] (at pp.c:5055)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5056)
    FuncDecl: quals=None (at pp.c:5056)
      ParamList:  (at pp.c:5056)
        Decl: name='x', quals=[], storage=[] (at pp.c:5056)
          TypeDecl: declname='x', quals=[] (at pp.c:5056)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__int2CC', quals=[] (at pp.c:5056)
        IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__compareControl', quals=[], storage=['inline', 'static'] (at pp.c:5058)
    FuncDecl: quals=None (at pp.c:5058)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__compareControl', quals=[] (at pp.c:5058)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5060)
    FuncDecl: quals=None (at pp.c:5060)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__getControl', quals=[] (at pp.c:5060)
        IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:5070)
    FuncDecl: quals=None (at pp.c:5070)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[] (at pp.c:5070)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[], storage=['inline', 'static'] (at pp.c:5080)
    FuncDecl: quals=None (at pp.c:5080)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[] (at pp.c:5080)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:5082)
    FuncDecl: quals=None (at pp.c:5082)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__enableEvents', quals=[] (at pp.c:5082)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:5087)
    FuncDecl: quals=None (at pp.c:5087)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Control__disableEvents', quals=[] (at pp.c:5087)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5089)
    FuncDecl: quals=None (at pp.c:5089)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Capture__getEvent', quals=[] (at pp.c:5089)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__5__Compare__setEvent', quals=[], storage=['inline', 'static'] (at pp.c:5094)
    FuncDecl: quals=None (at pp.c:5094)
      ParamList:  (at pp.c:5094)
        Decl: name='x', quals=[], storage=[] (at pp.c:5094)
          TypeDecl: declname='x', quals=[] (at pp.c:5094)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEvent', quals=[] (at pp.c:5094)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[], storage=['inline', 'static'] (at pp.c:5104)
    FuncDecl: quals=None (at pp.c:5104)
      ParamList:  (at pp.c:5104)
        Decl: name='x', quals=[], storage=[] (at pp.c:5104)
          TypeDecl: declname='x', quals=[] (at pp.c:5104)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[] (at pp.c:5104)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5106)
    FuncDecl: quals=None (at pp.c:5106)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Event__fired', quals=[] (at pp.c:5106)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:5114)
    FuncDecl: quals=None (at pp.c:5114)
      ParamList:  (at pp.c:5114)
        Decl: name='n', quals=[], storage=[] (at pp.c:5114)
          TypeDecl: declname='n', quals=[] (at pp.c:5114)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Capture__default__captured', quals=[] (at pp.c:5114)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__5__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5122)
    FuncDecl: quals=None (at pp.c:5122)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__5__Timer__overflow', quals=[] (at pp.c:5122)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Capture__captured', quals=[], storage=['static'] (at pp.c:5124)
    FuncDecl: quals=None (at pp.c:5124)
      ParamList:  (at pp.c:5124)
        Decl: name='time', quals=[], storage=[] (at pp.c:5124)
          TypeDecl: declname='time', quals=[] (at pp.c:5124)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Capture__captured', quals=[] (at pp.c:5124)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Compare__fired', quals=[], storage=['static'] (at pp.c:5126)
    FuncDecl: quals=None (at pp.c:5126)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Compare__fired', quals=[] (at pp.c:5126)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__6__cc_t', quals=[], storage=['typedef'] (at pp.c:5128)
    TypeDecl: declname='Msp430TimerCapComP__6__cc_t', quals=[] (at pp.c:5128)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5131)
    FuncDecl: quals=None (at pp.c:5131)
      ParamList:  (at pp.c:5131)
        Decl: name='x', quals=[], storage=[] (at pp.c:5131)
          TypeDecl: declname='x', quals=[] (at pp.c:5131)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__int2CC', quals=[] (at pp.c:5131)
        IdentifierType: names=['Msp430TimerCapComP__6__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5133)
    FuncDecl: quals=None (at pp.c:5133)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Control__getControl', quals=[] (at pp.c:5133)
        IdentifierType: names=['Msp430TimerCapComP__6__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5135)
    FuncDecl: quals=None (at pp.c:5135)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Capture__getEvent', quals=[] (at pp.c:5135)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__6__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5137)
    FuncDecl: quals=None (at pp.c:5137)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Event__fired', quals=[] (at pp.c:5137)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:5145)
    FuncDecl: quals=None (at pp.c:5145)
      ParamList:  (at pp.c:5145)
        Decl: name='n', quals=[], storage=[] (at pp.c:5145)
          TypeDecl: declname='n', quals=[] (at pp.c:5145)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Capture__default__captured', quals=[] (at pp.c:5145)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5149)
    FuncDecl: quals=None (at pp.c:5149)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Compare__default__fired', quals=[] (at pp.c:5149)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__6__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5153)
    FuncDecl: quals=None (at pp.c:5153)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__6__Timer__overflow', quals=[] (at pp.c:5153)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Capture__captured', quals=[], storage=['static'] (at pp.c:5155)
    FuncDecl: quals=None (at pp.c:5155)
      ParamList:  (at pp.c:5155)
        Decl: name='time', quals=[], storage=[] (at pp.c:5155)
          TypeDecl: declname='time', quals=[] (at pp.c:5155)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Capture__captured', quals=[] (at pp.c:5155)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Compare__fired', quals=[], storage=['static'] (at pp.c:5157)
    FuncDecl: quals=None (at pp.c:5157)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Compare__fired', quals=[] (at pp.c:5157)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__7__cc_t', quals=[], storage=['typedef'] (at pp.c:5159)
    TypeDecl: declname='Msp430TimerCapComP__7__cc_t', quals=[] (at pp.c:5159)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5162)
    FuncDecl: quals=None (at pp.c:5162)
      ParamList:  (at pp.c:5162)
        Decl: name='x', quals=[], storage=[] (at pp.c:5162)
          TypeDecl: declname='x', quals=[] (at pp.c:5162)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__int2CC', quals=[] (at pp.c:5162)
        IdentifierType: names=['Msp430TimerCapComP__7__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5164)
    FuncDecl: quals=None (at pp.c:5164)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Control__getControl', quals=[] (at pp.c:5164)
        IdentifierType: names=['Msp430TimerCapComP__7__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5166)
    FuncDecl: quals=None (at pp.c:5166)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Capture__getEvent', quals=[] (at pp.c:5166)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__7__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5168)
    FuncDecl: quals=None (at pp.c:5168)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Event__fired', quals=[] (at pp.c:5168)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:5176)
    FuncDecl: quals=None (at pp.c:5176)
      ParamList:  (at pp.c:5176)
        Decl: name='n', quals=[], storage=[] (at pp.c:5176)
          TypeDecl: declname='n', quals=[] (at pp.c:5176)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Capture__default__captured', quals=[] (at pp.c:5176)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5180)
    FuncDecl: quals=None (at pp.c:5180)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Compare__default__fired', quals=[] (at pp.c:5180)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__7__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5184)
    FuncDecl: quals=None (at pp.c:5184)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__7__Timer__overflow', quals=[] (at pp.c:5184)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Capture__captured', quals=[], storage=['static'] (at pp.c:5186)
    FuncDecl: quals=None (at pp.c:5186)
      ParamList:  (at pp.c:5186)
        Decl: name='time', quals=[], storage=[] (at pp.c:5186)
          TypeDecl: declname='time', quals=[] (at pp.c:5186)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Capture__captured', quals=[] (at pp.c:5186)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Compare__fired', quals=[], storage=['static'] (at pp.c:5188)
    FuncDecl: quals=None (at pp.c:5188)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Compare__fired', quals=[] (at pp.c:5188)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__8__cc_t', quals=[], storage=['typedef'] (at pp.c:5190)
    TypeDecl: declname='Msp430TimerCapComP__8__cc_t', quals=[] (at pp.c:5190)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5193)
    FuncDecl: quals=None (at pp.c:5193)
      ParamList:  (at pp.c:5193)
        Decl: name='x', quals=[], storage=[] (at pp.c:5193)
          TypeDecl: declname='x', quals=[] (at pp.c:5193)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__int2CC', quals=[] (at pp.c:5193)
        IdentifierType: names=['Msp430TimerCapComP__8__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5195)
    FuncDecl: quals=None (at pp.c:5195)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Control__getControl', quals=[] (at pp.c:5195)
        IdentifierType: names=['Msp430TimerCapComP__8__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5197)
    FuncDecl: quals=None (at pp.c:5197)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Capture__getEvent', quals=[] (at pp.c:5197)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__8__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5199)
    FuncDecl: quals=None (at pp.c:5199)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Event__fired', quals=[] (at pp.c:5199)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:5207)
    FuncDecl: quals=None (at pp.c:5207)
      ParamList:  (at pp.c:5207)
        Decl: name='n', quals=[], storage=[] (at pp.c:5207)
          TypeDecl: declname='n', quals=[] (at pp.c:5207)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Capture__default__captured', quals=[] (at pp.c:5207)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5211)
    FuncDecl: quals=None (at pp.c:5211)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Compare__default__fired', quals=[] (at pp.c:5211)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__8__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5215)
    FuncDecl: quals=None (at pp.c:5215)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__8__Timer__overflow', quals=[] (at pp.c:5215)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Capture__captured', quals=[], storage=['static'] (at pp.c:5217)
    FuncDecl: quals=None (at pp.c:5217)
      ParamList:  (at pp.c:5217)
        Decl: name='time', quals=[], storage=[] (at pp.c:5217)
          TypeDecl: declname='time', quals=[] (at pp.c:5217)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Capture__captured', quals=[] (at pp.c:5217)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Compare__fired', quals=[], storage=['static'] (at pp.c:5219)
    FuncDecl: quals=None (at pp.c:5219)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Compare__fired', quals=[] (at pp.c:5219)
        IdentifierType: names=['void'] (at None)
  Typedef: name='Msp430TimerCapComP__9__cc_t', quals=[], storage=['typedef'] (at pp.c:5221)
    TypeDecl: declname='Msp430TimerCapComP__9__cc_t', quals=[] (at pp.c:5221)
      IdentifierType: names=['msp430_compare_control_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:5224)
    FuncDecl: quals=None (at pp.c:5224)
      ParamList:  (at pp.c:5224)
        Decl: name='x', quals=[], storage=[] (at pp.c:5224)
          TypeDecl: declname='x', quals=[] (at pp.c:5224)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__int2CC', quals=[] (at pp.c:5224)
        IdentifierType: names=['Msp430TimerCapComP__9__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:5226)
    FuncDecl: quals=None (at pp.c:5226)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Control__getControl', quals=[] (at pp.c:5226)
        IdentifierType: names=['Msp430TimerCapComP__9__cc_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:5228)
    FuncDecl: quals=None (at pp.c:5228)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Capture__getEvent', quals=[] (at pp.c:5228)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430TimerCapComP__9__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:5230)
    FuncDecl: quals=None (at pp.c:5230)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Event__fired', quals=[] (at pp.c:5230)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:5238)
    FuncDecl: quals=None (at pp.c:5238)
      ParamList:  (at pp.c:5238)
        Decl: name='n', quals=[], storage=[] (at pp.c:5238)
          TypeDecl: declname='n', quals=[] (at pp.c:5238)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Capture__default__captured', quals=[] (at pp.c:5238)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5242)
    FuncDecl: quals=None (at pp.c:5242)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Compare__default__fired', quals=[] (at pp.c:5242)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCapComP__9__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5246)
    FuncDecl: quals=None (at pp.c:5246)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCapComP__9__Timer__overflow', quals=[] (at pp.c:5246)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCommonP__VectorTimerB1__fired', quals=[], storage=['static'] (at pp.c:5248)
    FuncDecl: quals=None (at pp.c:5248)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCommonP__VectorTimerB1__fired', quals=[] (at pp.c:5248)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCommonP__VectorTimerA0__fired', quals=[], storage=['static'] (at pp.c:5250)
    FuncDecl: quals=None (at pp.c:5250)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCommonP__VectorTimerA0__fired', quals=[] (at pp.c:5250)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCommonP__VectorTimerA1__fired', quals=[], storage=['static'] (at pp.c:5252)
    FuncDecl: quals=None (at pp.c:5252)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCommonP__VectorTimerA1__fired', quals=[] (at pp.c:5252)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430TimerCommonP__VectorTimerB0__fired', quals=[], storage=['static'] (at pp.c:5254)
    FuncDecl: quals=None (at pp.c:5254)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430TimerCommonP__VectorTimerB0__fired', quals=[] (at pp.c:5254)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_TIMERA0_VECTOR', quals=[], storage=[] (at pp.c:5256)
    FuncDecl: quals=None (at pp.c:5256)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_TIMERA0_VECTOR', quals=[] (at pp.c:5256)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_TIMERA1_VECTOR', quals=[], storage=[] (at pp.c:5257)
    FuncDecl: quals=None (at pp.c:5257)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_TIMERA1_VECTOR', quals=[] (at pp.c:5257)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_TIMERB0_VECTOR', quals=[], storage=[] (at pp.c:5258)
    FuncDecl: quals=None (at pp.c:5258)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_TIMERB0_VECTOR', quals=[] (at pp.c:5258)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_TIMERB1_VECTOR', quals=[], storage=[] (at pp.c:5259)
    FuncDecl: quals=None (at pp.c:5259)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_TIMERB1_VECTOR', quals=[] (at pp.c:5259)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Compare__setEvent', quals=[], storage=['static'] (at pp.c:5261)
    FuncDecl: quals=None (at pp.c:5261)
      ParamList:  (at pp.c:5261)
        Decl: name='time', quals=[], storage=[] (at pp.c:5261)
          TypeDecl: declname='time', quals=[] (at pp.c:5261)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__setEvent', quals=[] (at pp.c:5261)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Compare__setEventFromNow', quals=[], storage=['static'] (at pp.c:5263)
    FuncDecl: quals=None (at pp.c:5263)
      ParamList:  (at pp.c:5263)
        Decl: name='delta', quals=[], storage=[] (at pp.c:5263)
          TypeDecl: declname='delta', quals=[] (at pp.c:5263)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__setEventFromNow', quals=[] (at pp.c:5263)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Timer__get', quals=[], storage=['static'] (at pp.c:5265)
    FuncDecl: quals=None (at pp.c:5265)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Timer__get', quals=[] (at pp.c:5265)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430AlarmC__0__Alarm__fired', quals=[], storage=['static'] (at pp.c:5267)
    FuncDecl: quals=None (at pp.c:5267)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Alarm__fired', quals=[] (at pp.c:5267)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430TimerControl__enableEvents', quals=[], storage=['static'] (at pp.c:5269)
    FuncDecl: quals=None (at pp.c:5269)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__enableEvents', quals=[] (at pp.c:5269)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430TimerControl__setControlAsCompare', quals=[], storage=['static'] (at pp.c:5271)
    FuncDecl: quals=None (at pp.c:5271)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__setControlAsCompare', quals=[] (at pp.c:5271)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430TimerControl__disableEvents', quals=[], storage=['static'] (at pp.c:5282)
    FuncDecl: quals=None (at pp.c:5282)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__disableEvents', quals=[] (at pp.c:5282)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:5284)
    FuncDecl: quals=None (at pp.c:5284)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:5284)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:5286)
    FuncDecl: quals=None (at pp.c:5286)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Init__init', quals=[] (at pp.c:5286)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430AlarmC__0__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:5288)
    FuncDecl: quals=None (at pp.c:5288)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Alarm__stop', quals=[] (at pp.c:5288)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Compare__fired', quals=[], storage=['inline', 'static'] (at pp.c:5293)
    FuncDecl: quals=None (at pp.c:5293)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__fired', quals=[] (at pp.c:5293)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Alarm__startAt', quals=[], storage=['inline', 'static'] (at pp.c:5304)
    FuncDecl: quals=None (at pp.c:5304)
      ParamList:  (at pp.c:5304)
        Decl: name='t0', quals=[], storage=[] (at pp.c:5304)
          TypeDecl: declname='t0', quals=[] (at pp.c:5304)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:5304)
          TypeDecl: declname='dt', quals=[] (at pp.c:5304)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Alarm__startAt', quals=[] (at pp.c:5304)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__0__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5306)
    FuncDecl: quals=None (at pp.c:5306)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__0__Msp430Timer__overflow', quals=[] (at pp.c:5306)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__0__Msp430Timer__get', quals=[], storage=['static'] (at pp.c:5308)
    FuncDecl: quals=None (at pp.c:5308)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Msp430Timer__get', quals=[] (at pp.c:5308)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430CounterC__0__Msp430Timer__isOverflowPending', quals=[], storage=['static'] (at pp.c:5309)
    FuncDecl: quals=None (at pp.c:5309)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Msp430Timer__isOverflowPending', quals=[] (at pp.c:5309)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430CounterC__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:5311)
    FuncDecl: quals=None (at pp.c:5311)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Counter__overflow', quals=[] (at pp.c:5311)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__0__Counter__get', quals=[], storage=['inline', 'static'] (at pp.c:5313)
    FuncDecl: quals=None (at pp.c:5313)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Counter__get', quals=[] (at pp.c:5313)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430CounterC__0__Counter__isOverflowPending', quals=[], storage=['inline', 'static'] (at pp.c:5318)
    FuncDecl: quals=None (at pp.c:5318)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Counter__isOverflowPending', quals=[] (at pp.c:5318)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430CounterC__0__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5328)
    FuncDecl: quals=None (at pp.c:5328)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__0__Msp430Timer__overflow', quals=[] (at pp.c:5328)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__0__CounterFrom__get', quals=[], storage=['static'] (at pp.c:5330)
    FuncDecl: quals=None (at pp.c:5330)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__CounterFrom__get', quals=[] (at pp.c:5330)
        IdentifierType: names=['TransformCounterC__0__CounterFrom__size_type'] (at None)
  Decl: name='TransformCounterC__0__CounterFrom__isOverflowPending', quals=[], storage=['static'] (at pp.c:5337)
    FuncDecl: quals=None (at pp.c:5337)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__CounterFrom__isOverflowPending', quals=[] (at pp.c:5337)
        IdentifierType: names=['bool'] (at None)
  Decl: name='TransformCounterC__0__Counter__overflow', quals=[], storage=['static'] (at pp.c:5348)
    FuncDecl: quals=None (at pp.c:5348)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__Counter__overflow', quals=[] (at pp.c:5348)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__0__m_upper', quals=[], storage=[] (at pp.c:5350)
    TypeDecl: declname='TransformCounterC__0__m_upper', quals=[] (at pp.c:5350)
      IdentifierType: names=['TransformCounterC__0__upper_count_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:5352)
    Enum: name='TransformCounterC__0____nesc_unnamed4322' (at pp.c:5352)
      EnumeratorList:  (at pp.c:5354)
        Enumerator: name='TransformCounterC__0__LOW_SHIFT_RIGHT' (at pp.c:5354)
          Constant: type='int', value='5' (at pp.c:5354)
        Enumerator: name='TransformCounterC__0__HIGH_SHIFT_LEFT' (at pp.c:5355)
          BinaryOp: op='-' (at pp.c:5355)
            BinaryOp: op='*' (at pp.c:5355)
              Constant: type='int', value='8' (at pp.c:5355)
              UnaryOp: op='sizeof' (at pp.c:5355)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['TransformCounterC__0__from_size_type'] (at None)
            ID: name='TransformCounterC__0__LOW_SHIFT_RIGHT' (at pp.c:5355)
        Enumerator: name='TransformCounterC__0__NUM_UPPER_BITS' (at pp.c:5356)
          BinaryOp: op='+' (at pp.c:5356)
            BinaryOp: op='-' (at pp.c:5356)
              BinaryOp: op='*' (at pp.c:5356)
                Constant: type='int', value='8' (at pp.c:5356)
                UnaryOp: op='sizeof' (at pp.c:5356)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
              BinaryOp: op='*' (at pp.c:5356)
                Constant: type='int', value='8' (at pp.c:5356)
                UnaryOp: op='sizeof' (at pp.c:5356)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__0__from_size_type'] (at None)
            Constant: type='int', value='5' (at pp.c:5356)
        Enumerator: name='TransformCounterC__0__OVERFLOW_MASK' (at pp.c:5360)
          TernaryOp:  (at pp.c:5360)
            ID: name='TransformCounterC__0__NUM_UPPER_BITS' (at pp.c:5360)
            BinaryOp: op='-' (at None)
              BinaryOp: op='<<' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__0__upper_count_type'] (at None)
                  Constant: type='int', value='2' (at pp.c:5360)
                BinaryOp: op='-' (at pp.c:5360)
                  ID: name='TransformCounterC__0__NUM_UPPER_BITS' (at pp.c:5360)
                  Constant: type='int', value='1' (at pp.c:5360)
              Constant: type='int', value='1' (at pp.c:5360)
            Constant: type='int', value='0' (at pp.c:5360)
  Decl: name='TransformCounterC__0__Counter__get', quals=[], storage=['static'] (at pp.c:5363)
    FuncDecl: quals=None (at pp.c:5363)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__Counter__get', quals=[] (at pp.c:5363)
        IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
  Decl: name='TransformCounterC__0__CounterFrom__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5365)
    FuncDecl: quals=None (at pp.c:5365)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__0__CounterFrom__overflow', quals=[] (at pp.c:5365)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__fired', quals=[], storage=['static'] (at pp.c:5367)
    FuncDecl: quals=None (at pp.c:5367)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__fired', quals=[] (at pp.c:5367)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__AlarmFrom__startAt', quals=[], storage=['static'] (at pp.c:5369)
    FuncDecl: quals=None (at pp.c:5369)
      ParamList:  (at pp.c:5369)
        Decl: name='t0', quals=[], storage=[] (at pp.c:5369)
          TypeDecl: declname='t0', quals=[] (at pp.c:5369)
            IdentifierType: names=['TransformAlarmC__0__AlarmFrom__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:5369)
          TypeDecl: declname='dt', quals=[] (at pp.c:5369)
            IdentifierType: names=['TransformAlarmC__0__AlarmFrom__size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__0__AlarmFrom__startAt', quals=[] (at pp.c:5369)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__AlarmFrom__stop', quals=[], storage=['static'] (at pp.c:5371)
    FuncDecl: quals=None (at pp.c:5371)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__AlarmFrom__stop', quals=[] (at pp.c:5371)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Counter__get', quals=[], storage=['static'] (at pp.c:5373)
    FuncDecl: quals=None (at pp.c:5373)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Counter__get', quals=[] (at pp.c:5373)
        IdentifierType: names=['TransformAlarmC__0__Counter__size_type'] (at None)
  Decl: name='TransformAlarmC__0__m_t0', quals=[], storage=[] (at pp.c:5375)
    TypeDecl: declname='TransformAlarmC__0__m_t0', quals=[] (at pp.c:5375)
      IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Decl: name='TransformAlarmC__0__m_dt', quals=[], storage=[] (at pp.c:5376)
    TypeDecl: declname='TransformAlarmC__0__m_dt', quals=[] (at pp.c:5376)
      IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:5378)
    Enum: name='TransformAlarmC__0____nesc_unnamed4323' (at pp.c:5378)
      EnumeratorList:  (at pp.c:5380)
        Enumerator: name='TransformAlarmC__0__MAX_DELAY_LOG2' (at pp.c:5380)
          BinaryOp: op='-' (at pp.c:5380)
            BinaryOp: op='-' (at pp.c:5380)
              BinaryOp: op='*' (at pp.c:5380)
                Constant: type='int', value='8' (at pp.c:5380)
                UnaryOp: op='sizeof' (at pp.c:5380)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformAlarmC__0__from_size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:5380)
            Constant: type='int', value='5' (at pp.c:5380)
        Enumerator: name='TransformAlarmC__0__MAX_DELAY' (at pp.c:5381)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:5381)
            ID: name='TransformAlarmC__0__MAX_DELAY_LOG2' (at pp.c:5381)
  Decl: name='TransformAlarmC__0__Alarm__getNow', quals=[], storage=['inline', 'static'] (at pp.c:5384)
    FuncDecl: quals=None (at pp.c:5384)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__getNow', quals=[] (at pp.c:5384)
        IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__getAlarm', quals=[], storage=['inline', 'static'] (at pp.c:5389)
    FuncDecl: quals=None (at pp.c:5389)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__getAlarm', quals=[] (at pp.c:5389)
        IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:5400)
    FuncDecl: quals=None (at pp.c:5400)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__stop', quals=[] (at pp.c:5400)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__set_alarm', quals=[], storage=['static'] (at pp.c:5405)
    FuncDecl: quals=None (at pp.c:5405)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__set_alarm', quals=[] (at pp.c:5405)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Alarm__startAt', quals=[], storage=['static'] (at pp.c:5407)
    FuncDecl: quals=None (at pp.c:5407)
      ParamList:  (at pp.c:5407)
        Decl: name='t0', quals=[], storage=[] (at pp.c:5407)
          TypeDecl: declname='t0', quals=[] (at pp.c:5407)
            IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:5407)
          TypeDecl: declname='dt', quals=[] (at pp.c:5407)
            IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Alarm__startAt', quals=[] (at pp.c:5407)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__AlarmFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:5409)
    FuncDecl: quals=None (at pp.c:5409)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__AlarmFrom__fired', quals=[] (at pp.c:5409)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5411)
    FuncDecl: quals=None (at pp.c:5411)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__0__Counter__overflow', quals=[] (at pp.c:5411)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__fired__postTask', quals=[], storage=['static'] (at pp.c:5413)
    FuncDecl: quals=None (at pp.c:5413)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__fired__postTask', quals=[] (at pp.c:5413)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__getNow', quals=[], storage=['static'] (at pp.c:5415)
    FuncDecl: quals=None (at pp.c:5415)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__getNow', quals=[] (at pp.c:5415)
        IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__startAt', quals=[], storage=['static'] (at pp.c:5417)
    FuncDecl: quals=None (at pp.c:5417)
      ParamList:  (at pp.c:5417)
        Decl: name='t0', quals=[], storage=[] (at pp.c:5417)
          TypeDecl: declname='t0', quals=[] (at pp.c:5417)
            IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:5417)
          TypeDecl: declname='dt', quals=[] (at pp.c:5417)
            IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__startAt', quals=[] (at pp.c:5417)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__getAlarm', quals=[], storage=['static'] (at pp.c:5419)
    FuncDecl: quals=None (at pp.c:5419)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__getAlarm', quals=[] (at pp.c:5419)
        IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__stop', quals=[], storage=['static'] (at pp.c:5421)
    FuncDecl: quals=None (at pp.c:5421)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__stop', quals=[] (at pp.c:5421)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__fired', quals=[], storage=['static'] (at pp.c:5423)
    FuncDecl: quals=None (at pp.c:5423)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__fired', quals=[] (at pp.c:5423)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:5425)
    Enum: name='AlarmToTimerC__0____nesc_unnamed4324' (at pp.c:5425)
      EnumeratorList:  (at pp.c:5427)
        Enumerator: name='AlarmToTimerC__0__fired' (at pp.c:5427)
          Constant: type='int', value='2U' (at pp.c:5427)
  Typedef: name='AlarmToTimerC__0____nesc_sillytask_fired', quals=[], storage=['typedef'] (at pp.c:5430)
    ArrayDecl:  (at pp.c:5430)
      TypeDecl: declname='AlarmToTimerC__0____nesc_sillytask_fired', quals=[] (at pp.c:5430)
        IdentifierType: names=['int'] (at None)
      ID: name='AlarmToTimerC__0__fired' (at pp.c:5430)
  Decl: name='AlarmToTimerC__0__m_dt', quals=[], storage=[] (at pp.c:5432)
    TypeDecl: declname='AlarmToTimerC__0__m_dt', quals=[] (at pp.c:5432)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name='AlarmToTimerC__0__m_oneshot', quals=[], storage=[] (at pp.c:5433)
    TypeDecl: declname='AlarmToTimerC__0__m_oneshot', quals=[] (at pp.c:5433)
      IdentifierType: names=['bool'] (at None)
  Decl: name='AlarmToTimerC__0__start', quals=[], storage=['inline', 'static'] (at pp.c:5435)
    FuncDecl: quals=None (at pp.c:5435)
      ParamList:  (at pp.c:5435)
        Decl: name='t0', quals=[], storage=[] (at pp.c:5435)
          TypeDecl: declname='t0', quals=[] (at pp.c:5435)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:5435)
          TypeDecl: declname='dt', quals=[] (at pp.c:5435)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='oneshot', quals=[], storage=[] (at pp.c:5435)
          TypeDecl: declname='oneshot', quals=[] (at pp.c:5435)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__start', quals=[] (at pp.c:5435)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__stop', quals=[], storage=['inline', 'static'] (at pp.c:5437)
    FuncDecl: quals=None (at pp.c:5437)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__stop', quals=[] (at pp.c:5437)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__fired__runTask', quals=[], storage=['inline', 'static'] (at pp.c:5440)
    FuncDecl: quals=None (at pp.c:5440)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__fired__runTask', quals=[] (at pp.c:5440)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Alarm__fired', quals=[], storage=['inline', 'static'] (at pp.c:5447)
    FuncDecl: quals=None (at pp.c:5447)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Alarm__fired', quals=[] (at pp.c:5447)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__startOneShotAt', quals=[], storage=['inline', 'static'] (at pp.c:5449)
    FuncDecl: quals=None (at pp.c:5449)
      ParamList:  (at pp.c:5449)
        Decl: name='t0', quals=[], storage=[] (at pp.c:5449)
          TypeDecl: declname='t0', quals=[] (at pp.c:5449)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:5449)
          TypeDecl: declname='dt', quals=[] (at pp.c:5449)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__startOneShotAt', quals=[] (at pp.c:5449)
        IdentifierType: names=['void'] (at None)
  Decl: name='AlarmToTimerC__0__Timer__getNow', quals=[], storage=['inline', 'static'] (at pp.c:5452)
    FuncDecl: quals=None (at pp.c:5452)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AlarmToTimerC__0__Timer__getNow', quals=[] (at pp.c:5452)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='VirtualizeTimerC__0__updateFromTimer__postTask', quals=[], storage=['static'] (at pp.c:5454)
    FuncDecl: quals=None (at pp.c:5454)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__updateFromTimer__postTask', quals=[] (at pp.c:5454)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='VirtualizeTimerC__0__TimerFrom__getNow', quals=[], storage=['static'] (at pp.c:5456)
    FuncDecl: quals=None (at pp.c:5456)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__getNow', quals=[] (at pp.c:5456)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='VirtualizeTimerC__0__TimerFrom__startOneShotAt', quals=[], storage=['static'] (at pp.c:5458)
    FuncDecl: quals=None (at pp.c:5458)
      ParamList:  (at pp.c:5458)
        Decl: name='t0', quals=[], storage=[] (at pp.c:5458)
          TypeDecl: declname='t0', quals=[] (at pp.c:5458)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:5458)
          TypeDecl: declname='dt', quals=[] (at pp.c:5458)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__startOneShotAt', quals=[] (at pp.c:5458)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__TimerFrom__stop', quals=[], storage=['static'] (at pp.c:5460)
    FuncDecl: quals=None (at pp.c:5460)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__stop', quals=[] (at pp.c:5460)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__fired', quals=[], storage=['static'] (at pp.c:5465)
    FuncDecl: quals=None (at pp.c:5465)
      ParamList:  (at pp.c:5467)
        Decl: name='arg_0x1018055d8', quals=[], storage=[] (at pp.c:5467)
          TypeDecl: declname='arg_0x1018055d8', quals=[] (at pp.c:5467)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__fired', quals=[] (at pp.c:5465)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:5469)
    Enum: name='VirtualizeTimerC__0____nesc_unnamed4325' (at pp.c:5469)
      EnumeratorList:  (at pp.c:5471)
        Enumerator: name='VirtualizeTimerC__0__updateFromTimer' (at pp.c:5471)
          Constant: type='int', value='3U' (at pp.c:5471)
  Typedef: name='VirtualizeTimerC__0____nesc_sillytask_updateFromTimer', quals=[], storage=['typedef'] (at pp.c:5474)
    ArrayDecl:  (at pp.c:5474)
      TypeDecl: declname='VirtualizeTimerC__0____nesc_sillytask_updateFromTimer', quals=[] (at pp.c:5474)
        IdentifierType: names=['int'] (at None)
      ID: name='VirtualizeTimerC__0__updateFromTimer' (at pp.c:5474)
  Decl: name=None, quals=[], storage=[] (at pp.c:5476)
    Enum: name='VirtualizeTimerC__0____nesc_unnamed4326' (at pp.c:5476)
      EnumeratorList:  (at pp.c:5478)
        Enumerator: name='VirtualizeTimerC__0__NUM_TIMERS' (at pp.c:5478)
          Constant: type='int', value='7U' (at pp.c:5478)
        Enumerator: name='VirtualizeTimerC__0__END_OF_LIST' (at pp.c:5479)
          Constant: type='int', value='255' (at pp.c:5479)
  Typedef: name='VirtualizeTimerC__0__Timer_t', quals=[], storage=['typedef'] (at pp.c:5497)
    TypeDecl: declname='VirtualizeTimerC__0__Timer_t', quals=[] (at pp.c:5497)
      Struct: name='VirtualizeTimerC__0____nesc_unnamed4327', packed=False (at pp.c:5490)
        Decl: name='t0', quals=[], storage=[] (at 0)
          TypeDecl: declname='t0', quals=[] (at pp.c:5492)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at 0)
          TypeDecl: declname='dt', quals=[] (at pp.c:5493)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='isoneshot', quals=[], storage=[] (at 0)
          TypeDecl: declname='isoneshot', quals=[] (at pp.c:5494)
            IdentifierType: names=['bool'] (at None)
          Constant: type='int', value='1' (at pp.c:5494)
        Decl: name='isrunning', quals=[], storage=[] (at 0)
          TypeDecl: declname='isrunning', quals=[] (at pp.c:5495)
            IdentifierType: names=['bool'] (at None)
          Constant: type='int', value='1' (at pp.c:5495)
        Decl: name='_reserved', quals=[], storage=[] (at 0)
          TypeDecl: declname='_reserved', quals=[] (at pp.c:5496)
            IdentifierType: names=['bool'] (at None)
          Constant: type='int', value='6' (at pp.c:5496)
  Decl: name='VirtualizeTimerC__0__m_timers', quals=[], storage=[] (at pp.c:5499)
    ArrayDecl:  (at pp.c:5499)
      TypeDecl: declname='VirtualizeTimerC__0__m_timers', quals=[] (at pp.c:5499)
        IdentifierType: names=['VirtualizeTimerC__0__Timer_t'] (at None)
      ID: name='VirtualizeTimerC__0__NUM_TIMERS' (at pp.c:5499)
  Decl: name='VirtualizeTimerC__0__fireTimers', quals=[], storage=['static'] (at pp.c:5504)
    FuncDecl: quals=None (at pp.c:5504)
      ParamList:  (at pp.c:5504)
        Decl: name='now', quals=[], storage=[] (at pp.c:5504)
          TypeDecl: declname='now', quals=[] (at pp.c:5504)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__fireTimers', quals=[] (at pp.c:5504)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[], storage=['inline', 'static'] (at pp.c:5506)
    FuncDecl: quals=None (at pp.c:5506)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[] (at pp.c:5506)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__TimerFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:5508)
    FuncDecl: quals=None (at pp.c:5508)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__fired', quals=[] (at pp.c:5508)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__startTimer', quals=[], storage=['static'] (at pp.c:5513)
    FuncDecl: quals=None (at pp.c:5513)
      ParamList:  (at pp.c:5513)
        Decl: name='num', quals=[], storage=[] (at pp.c:5513)
          TypeDecl: declname='num', quals=[] (at pp.c:5513)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='t0', quals=[], storage=[] (at pp.c:5513)
          TypeDecl: declname='t0', quals=[] (at pp.c:5513)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:5513)
          TypeDecl: declname='dt', quals=[] (at pp.c:5513)
            IdentifierType: names=['uint32_t'] (at None)
        Decl: name='isoneshot', quals=[], storage=[] (at pp.c:5513)
          TypeDecl: declname='isoneshot', quals=[] (at pp.c:5513)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__startTimer', quals=[] (at pp.c:5513)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__startPeriodic', quals=[], storage=['inline', 'static'] (at pp.c:5523)
    FuncDecl: quals=None (at pp.c:5523)
      ParamList:  (at pp.c:5523)
        Decl: name='num', quals=[], storage=[] (at pp.c:5523)
          TypeDecl: declname='num', quals=[] (at pp.c:5523)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:5523)
          TypeDecl: declname='dt', quals=[] (at pp.c:5523)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__startPeriodic', quals=[] (at pp.c:5523)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__startOneShot', quals=[], storage=['inline', 'static'] (at pp.c:5528)
    FuncDecl: quals=None (at pp.c:5528)
      ParamList:  (at pp.c:5528)
        Decl: name='num', quals=[], storage=[] (at pp.c:5528)
          TypeDecl: declname='num', quals=[] (at pp.c:5528)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:5528)
          TypeDecl: declname='dt', quals=[] (at pp.c:5528)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__startOneShot', quals=[] (at pp.c:5528)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__stop', quals=[], storage=['inline', 'static'] (at pp.c:5533)
    FuncDecl: quals=None (at pp.c:5533)
      ParamList:  (at pp.c:5533)
        Decl: name='num', quals=[], storage=[] (at pp.c:5533)
          TypeDecl: declname='num', quals=[] (at pp.c:5533)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__stop', quals=[] (at pp.c:5533)
        IdentifierType: names=['void'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__isRunning', quals=[], storage=['inline', 'static'] (at pp.c:5538)
    FuncDecl: quals=None (at pp.c:5538)
      ParamList:  (at pp.c:5538)
        Decl: name='num', quals=[], storage=[] (at pp.c:5538)
          TypeDecl: declname='num', quals=[] (at pp.c:5538)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__isRunning', quals=[] (at pp.c:5538)
        IdentifierType: names=['bool'] (at None)
  Decl: name='VirtualizeTimerC__0__Timer__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:5540)
    FuncDecl: quals=None (at pp.c:5540)
      ParamList:  (at pp.c:5540)
        Decl: name='num', quals=[], storage=[] (at pp.c:5540)
          TypeDecl: declname='num', quals=[] (at pp.c:5540)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='VirtualizeTimerC__0__Timer__default__fired', quals=[] (at pp.c:5540)
        IdentifierType: names=['void'] (at None)
  Decl: name='CounterToLocalTimeC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:5542)
    FuncDecl: quals=None (at pp.c:5542)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CounterToLocalTimeC__0__Counter__overflow', quals=[] (at pp.c:5542)
        IdentifierType: names=['void'] (at None)
  Decl: name='PlatformP__MoteInit__init', quals=[], storage=['static'] (at pp.c:5544)
    FuncDecl: quals=None (at pp.c:5544)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PlatformP__MoteInit__init', quals=[] (at pp.c:5544)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PlatformP__MoteClockInit__init', quals=[], storage=['static'] (at pp.c:5546)
    FuncDecl: quals=None (at pp.c:5546)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PlatformP__MoteClockInit__init', quals=[] (at pp.c:5546)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PlatformP__LedsInit__init', quals=[], storage=['static'] (at pp.c:5548)
    FuncDecl: quals=None (at pp.c:5548)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PlatformP__LedsInit__init', quals=[] (at pp.c:5548)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PlatformP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:5550)
    FuncDecl: quals=None (at pp.c:5550)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PlatformP__Init__init', quals=[] (at pp.c:5550)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='MotePlatformC__uwait', quals=[], storage=['__inline', 'static'] (at pp.c:5552)
    FuncDecl: quals=None (at pp.c:5552)
      ParamList:  (at pp.c:5552)
        Decl: name='u', quals=[], storage=[] (at pp.c:5552)
          TypeDecl: declname='u', quals=[] (at pp.c:5552)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='MotePlatformC__uwait', quals=[] (at pp.c:5552)
        IdentifierType: names=['void'] (at None)
  Decl: name='MotePlatformC__TOSH_wait', quals=[], storage=['__inline', 'static'] (at pp.c:5557)
    FuncDecl: quals=None (at pp.c:5557)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='MotePlatformC__TOSH_wait', quals=[] (at pp.c:5557)
        IdentifierType: names=['void'] (at None)
  Decl: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit', quals=[], storage=['static'] (at pp.c:5562)
    FuncDecl: quals=None (at pp.c:5562)
      ParamList:  (at pp.c:5562)
        Decl: name='set', quals=[], storage=[] (at pp.c:5562)
          TypeDecl: declname='set', quals=[] (at pp.c:5562)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='MotePlatformC__TOSH_FLASH_M25P_DP_bit', quals=[] (at pp.c:5562)
        IdentifierType: names=['void'] (at None)
  Decl: name='MotePlatformC__TOSH_FLASH_M25P_DP', quals=[], storage=['inline', 'static'] (at pp.c:5573)
    FuncDecl: quals=None (at pp.c:5573)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='MotePlatformC__TOSH_FLASH_M25P_DP', quals=[] (at pp.c:5573)
        IdentifierType: names=['void'] (at None)
  Decl: name='MotePlatformC__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:5575)
    FuncDecl: quals=None (at pp.c:5575)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='MotePlatformC__Init__init', quals=[] (at pp.c:5575)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__initTimerB', quals=[], storage=['static'] (at pp.c:5577)
    FuncDecl: quals=None (at pp.c:5577)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initTimerB', quals=[] (at pp.c:5577)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__initTimerA', quals=[], storage=['static'] (at pp.c:5579)
    FuncDecl: quals=None (at pp.c:5579)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initTimerA', quals=[] (at pp.c:5579)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__setupDcoCalibrate', quals=[], storage=['static'] (at pp.c:5581)
    FuncDecl: quals=None (at pp.c:5581)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__setupDcoCalibrate', quals=[] (at pp.c:5581)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__initClocks', quals=[], storage=['static'] (at pp.c:5582)
    FuncDecl: quals=None (at pp.c:5582)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initClocks', quals=[] (at pp.c:5582)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__IE1@"0x0000"', quals=['volatile'], storage=['static'] (at pp.c:5584)
    TypeDecl: declname='Msp430ClockP__IE1@"0x0000"', quals=['volatile'] (at pp.c:5584)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430ClockP__TA0CTL@"0x0160"', quals=['volatile'], storage=['static'] (at pp.c:5585)
    TypeDecl: declname='Msp430ClockP__TA0CTL@"0x0160"', quals=['volatile'] (at pp.c:5585)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430ClockP__TA0IV@"0x012E"', quals=['volatile'], storage=['static'] (at pp.c:5586)
    TypeDecl: declname='Msp430ClockP__TA0IV@"0x012E"', quals=['volatile'] (at pp.c:5586)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430ClockP__TBCTL@"0x0180"', quals=['volatile'], storage=['static'] (at pp.c:5587)
    TypeDecl: declname='Msp430ClockP__TBCTL@"0x0180"', quals=['volatile'] (at pp.c:5587)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430ClockP__TBIV@"0x011E"', quals=['volatile'], storage=['static'] (at pp.c:5588)
    TypeDecl: declname='Msp430ClockP__TBIV@"0x011E"', quals=['volatile'] (at pp.c:5588)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:5590)
    Enum: name='Msp430ClockP____nesc_unnamed4328' (at pp.c:5590)
      EnumeratorList:  (at pp.c:5592)
        Enumerator: name='Msp430ClockP__ACLK_CALIB_PERIOD' (at pp.c:5592)
          Constant: type='int', value='8' (at pp.c:5592)
        Enumerator: name='Msp430ClockP__TARGET_DCO_DELTA' (at pp.c:5593)
          BinaryOp: op='*' (at pp.c:5593)
            BinaryOp: op='/' (at pp.c:5593)
              Constant: type='int', value='4096' (at pp.c:5593)
              Constant: type='int', value='32' (at pp.c:5593)
            ID: name='Msp430ClockP__ACLK_CALIB_PERIOD' (at pp.c:5593)
  Decl: name='Msp430ClockP__McuPowerOverride__lowestState', quals=[], storage=['inline', 'static'] (at pp.c:5596)
    FuncDecl: quals=None (at pp.c:5596)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__McuPowerOverride__lowestState', quals=[] (at pp.c:5596)
        IdentifierType: names=['mcu_power_t'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[], storage=['inline', 'static'] (at pp.c:5600)
    FuncDecl: quals=None (at pp.c:5600)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[] (at pp.c:5600)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[], storage=['inline', 'static'] (at pp.c:5602)
    FuncDecl: quals=None (at pp.c:5602)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[] (at pp.c:5602)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[], storage=['inline', 'static'] (at pp.c:5604)
    FuncDecl: quals=None (at pp.c:5604)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[] (at pp.c:5604)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[], storage=['inline', 'static'] (at pp.c:5606)
    FuncDecl: quals=None (at pp.c:5606)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[] (at pp.c:5606)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[], storage=['inline', 'static'] (at pp.c:5608)
    FuncDecl: quals=None (at pp.c:5608)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[] (at pp.c:5608)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[], storage=['inline', 'static'] (at pp.c:5613)
    FuncDecl: quals=None (at pp.c:5613)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[] (at pp.c:5613)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[], storage=['inline', 'static'] (at pp.c:5618)
    FuncDecl: quals=None (at pp.c:5618)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[] (at pp.c:5618)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[], storage=['inline', 'static'] (at pp.c:5623)
    FuncDecl: quals=None (at pp.c:5623)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[] (at pp.c:5623)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__startTimerA', quals=[], storage=['inline', 'static'] (at pp.c:5629)
    FuncDecl: quals=None (at pp.c:5629)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__startTimerA', quals=[] (at pp.c:5629)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__startTimerB', quals=[], storage=['inline', 'static'] (at pp.c:5631)
    FuncDecl: quals=None (at pp.c:5631)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__startTimerB', quals=[] (at pp.c:5631)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__set_dco_calib', quals=[], storage=['static'] (at pp.c:5633)
    FuncDecl: quals=None (at pp.c:5633)
      ParamList:  (at pp.c:5633)
        Decl: name='calib', quals=[], storage=[] (at pp.c:5633)
          TypeDecl: declname='calib', quals=[] (at pp.c:5633)
            IdentifierType: names=['int'] (at None)
      TypeDecl: declname='Msp430ClockP__set_dco_calib', quals=[] (at pp.c:5633)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__test_calib_busywait_delta', quals=[], storage=['inline', 'static'] (at pp.c:5639)
    FuncDecl: quals=None (at pp.c:5639)
      ParamList:  (at pp.c:5639)
        Decl: name='calib', quals=[], storage=[] (at pp.c:5639)
          TypeDecl: declname='calib', quals=[] (at pp.c:5639)
            IdentifierType: names=['int'] (at None)
      TypeDecl: declname='Msp430ClockP__test_calib_busywait_delta', quals=[] (at pp.c:5639)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430ClockP__busyCalibrateDco', quals=[], storage=['inline', 'static'] (at pp.c:5641)
    FuncDecl: quals=None (at pp.c:5641)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__busyCalibrateDco', quals=[] (at pp.c:5641)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430ClockP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:5643)
    FuncDecl: quals=None (at pp.c:5643)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430ClockP__Init__init', quals=[] (at pp.c:5643)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='McuSleepC__McuPowerOverride__lowestState', quals=[], storage=['static'] (at pp.c:5645)
    FuncDecl: quals=None (at pp.c:5645)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='McuSleepC__McuPowerOverride__lowestState', quals=[] (at pp.c:5645)
        IdentifierType: names=['mcu_power_t'] (at None)
  Decl: name='McuSleepC__dirty', quals=[], storage=[] (at pp.c:5647)
    TypeDecl: declname='McuSleepC__dirty', quals=[] (at pp.c:5647)
      IdentifierType: names=['bool'] (at None)
    ID: name='TRUE' (at pp.c:5647)
  Decl: name='McuSleepC__powerState', quals=[], storage=[] (at pp.c:5648)
    TypeDecl: declname='McuSleepC__powerState', quals=[] (at pp.c:5648)
      IdentifierType: names=['mcu_power_t'] (at None)
    ID: name='MSP430_POWER_ACTIVE' (at pp.c:5648)
  Decl: name='McuSleepC__msp430PowerBits', quals=['const'], storage=[] (at pp.c:5653)
    ArrayDecl:  (at pp.c:5653)
      TypeDecl: declname='McuSleepC__msp430PowerBits', quals=['const'] (at pp.c:5653)
        IdentifierType: names=['uint16_t'] (at None)
      BinaryOp: op='+' (at pp.c:5653)
        ID: name='MSP430_POWER_LPM4' (at pp.c:5653)
        Constant: type='int', value='1' (at pp.c:5653)
    ExprList:  (at pp.c:5654)
      Constant: type='int', value='0' (at pp.c:5654)
      Constant: type='int', value='0x0010' (at pp.c:5655)
      BinaryOp: op='+' (at pp.c:5656)
        Constant: type='int', value='0x0040' (at pp.c:5656)
        Constant: type='int', value='0x0010' (at pp.c:5656)
      BinaryOp: op='+' (at pp.c:5657)
        Constant: type='int', value='0x0080' (at pp.c:5657)
        Constant: type='int', value='0x0010' (at pp.c:5657)
      BinaryOp: op='+' (at pp.c:5658)
        BinaryOp: op='+' (at pp.c:5658)
          Constant: type='int', value='0x0080' (at pp.c:5658)
          Constant: type='int', value='0x0040' (at pp.c:5658)
        Constant: type='int', value='0x0010' (at pp.c:5658)
      BinaryOp: op='+' (at pp.c:5659)
        BinaryOp: op='+' (at pp.c:5659)
          BinaryOp: op='+' (at pp.c:5659)
            Constant: type='int', value='0x0080' (at pp.c:5659)
            Constant: type='int', value='0x0040' (at pp.c:5659)
          Constant: type='int', value='0x0020' (at pp.c:5659)
        Constant: type='int', value='0x0010' (at pp.c:5659)
  Decl: name='McuSleepC__getPowerState', quals=[], storage=['inline', 'static'] (at pp.c:5662)
    FuncDecl: quals=None (at pp.c:5662)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='McuSleepC__getPowerState', quals=[] (at pp.c:5662)
        IdentifierType: names=['mcu_power_t'] (at None)
  Decl: name='McuSleepC__computePowerState', quals=[], storage=['inline', 'static'] (at pp.c:5664)
    FuncDecl: quals=None (at pp.c:5664)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='McuSleepC__computePowerState', quals=[] (at pp.c:5664)
        IdentifierType: names=['void'] (at None)
  Decl: name='McuSleepC__McuSleep__sleep', quals=[], storage=['inline', 'static'] (at pp.c:5669)
    FuncDecl: quals=None (at pp.c:5669)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='McuSleepC__McuSleep__sleep', quals=[] (at pp.c:5669)
        IdentifierType: names=['void'] (at None)
  Decl: name='RealMainP__SoftwareInit__init', quals=[], storage=['static'] (at pp.c:5671)
    FuncDecl: quals=None (at pp.c:5671)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__SoftwareInit__init', quals=[] (at pp.c:5671)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='RealMainP__Boot__booted', quals=[], storage=['static'] (at pp.c:5673)
    FuncDecl: quals=None (at pp.c:5673)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__Boot__booted', quals=[] (at pp.c:5673)
        IdentifierType: names=['void'] (at None)
  Decl: name='RealMainP__PlatformInit__init', quals=[], storage=['static'] (at pp.c:5675)
    FuncDecl: quals=None (at pp.c:5675)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__PlatformInit__init', quals=[] (at pp.c:5675)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='RealMainP__Scheduler__init', quals=[], storage=['static'] (at pp.c:5677)
    FuncDecl: quals=None (at pp.c:5677)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__Scheduler__init', quals=[] (at pp.c:5677)
        IdentifierType: names=['void'] (at None)
  Decl: name='RealMainP__Scheduler__taskLoop', quals=[], storage=['static'] (at pp.c:5679)
    FuncDecl: quals=None (at pp.c:5679)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__Scheduler__taskLoop', quals=[] (at pp.c:5679)
        IdentifierType: names=['void'] (at None)
  Decl: name='RealMainP__Scheduler__runNextTask', quals=[], storage=['static'] (at pp.c:5681)
    FuncDecl: quals=None (at pp.c:5681)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RealMainP__Scheduler__runNextTask', quals=[] (at pp.c:5681)
        IdentifierType: names=['bool'] (at None)
  Decl: name='main', quals=[], storage=[] (at pp.c:5683)
    FuncDecl: quals=None (at pp.c:5683)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='main', quals=[] (at pp.c:5683)
        IdentifierType: names=['int'] (at None)
  Decl: name='SchedulerBasicP__TaskBasic__runTask', quals=[], storage=['static'] (at pp.c:5685)
    FuncDecl: quals=None (at pp.c:5685)
      ParamList:  (at pp.c:5687)
        Decl: name='arg_0x101487d50', quals=[], storage=[] (at pp.c:5687)
          TypeDecl: declname='arg_0x101487d50', quals=[] (at pp.c:5687)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__TaskBasic__runTask', quals=[] (at pp.c:5685)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__McuSleep__sleep', quals=[], storage=['static'] (at pp.c:5689)
    FuncDecl: quals=None (at pp.c:5689)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__McuSleep__sleep', quals=[] (at pp.c:5689)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:5691)
    Enum: name='SchedulerBasicP____nesc_unnamed4329' (at pp.c:5691)
      EnumeratorList:  (at pp.c:5693)
        Enumerator: name='SchedulerBasicP__NUM_TASKS' (at pp.c:5693)
          Constant: type='int', value='30U' (at pp.c:5693)
        Enumerator: name='SchedulerBasicP__NO_TASK' (at pp.c:5694)
          Constant: type='int', value='255' (at pp.c:5694)
  Decl: name='SchedulerBasicP__m_head', quals=[], storage=[] (at pp.c:5697)
    TypeDecl: declname='SchedulerBasicP__m_head', quals=[] (at pp.c:5697)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SchedulerBasicP__m_tail', quals=[], storage=[] (at pp.c:5698)
    TypeDecl: declname='SchedulerBasicP__m_tail', quals=[] (at pp.c:5698)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SchedulerBasicP__m_next', quals=[], storage=[] (at pp.c:5699)
    ArrayDecl:  (at pp.c:5699)
      TypeDecl: declname='SchedulerBasicP__m_next', quals=[] (at pp.c:5699)
        IdentifierType: names=['uint8_t'] (at None)
      ID: name='SchedulerBasicP__NUM_TASKS' (at pp.c:5699)
  Decl: name='SchedulerBasicP__popTask', quals=[], storage=['__inline', 'static'] (at pp.c:5708)
    FuncDecl: quals=None (at pp.c:5708)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__popTask', quals=[] (at pp.c:5708)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='SchedulerBasicP__isWaiting', quals=[], storage=['inline', 'static'] (at pp.c:5710)
    FuncDecl: quals=None (at pp.c:5710)
      ParamList:  (at pp.c:5710)
        Decl: name='id', quals=[], storage=[] (at pp.c:5710)
          TypeDecl: declname='id', quals=[] (at pp.c:5710)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__isWaiting', quals=[] (at pp.c:5710)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SchedulerBasicP__pushTask', quals=[], storage=['inline', 'static'] (at pp.c:5715)
    FuncDecl: quals=None (at pp.c:5715)
      ParamList:  (at pp.c:5715)
        Decl: name='id', quals=[], storage=[] (at pp.c:5715)
          TypeDecl: declname='id', quals=[] (at pp.c:5715)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__pushTask', quals=[] (at pp.c:5715)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__init', quals=[], storage=['inline', 'static'] (at pp.c:5717)
    FuncDecl: quals=None (at pp.c:5717)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__init', quals=[] (at pp.c:5717)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__runNextTask', quals=[], storage=['static'] (at pp.c:5727)
    FuncDecl: quals=None (at pp.c:5727)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__runNextTask', quals=[] (at pp.c:5727)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SchedulerBasicP__Scheduler__taskLoop', quals=[], storage=['inline', 'static'] (at pp.c:5729)
    FuncDecl: quals=None (at pp.c:5729)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SchedulerBasicP__Scheduler__taskLoop', quals=[] (at pp.c:5729)
        IdentifierType: names=['void'] (at None)
  Decl: name='SchedulerBasicP__TaskBasic__postTask', quals=[], storage=['static'] (at pp.c:5731)
    FuncDecl: quals=None (at pp.c:5731)
      ParamList:  (at pp.c:5731)
        Decl: name='id', quals=[], storage=[] (at pp.c:5731)
          TypeDecl: declname='id', quals=[] (at pp.c:5731)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__TaskBasic__postTask', quals=[] (at pp.c:5731)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SchedulerBasicP__TaskBasic__default__runTask', quals=[], storage=['static'] (at pp.c:5736)
    FuncDecl: quals=None (at pp.c:5736)
      ParamList:  (at pp.c:5736)
        Decl: name='id', quals=[], storage=[] (at pp.c:5736)
          TypeDecl: declname='id', quals=[] (at pp.c:5736)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='SchedulerBasicP__TaskBasic__default__runTask', quals=[] (at pp.c:5736)
        IdentifierType: names=['void'] (at None)
  Decl: name='NoLedsC__Leds__led0Toggle', quals=[], storage=['inline', 'static'] (at pp.c:5738)
    FuncDecl: quals=None (at pp.c:5738)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='NoLedsC__Leds__led0Toggle', quals=[] (at pp.c:5738)
        IdentifierType: names=['void'] (at None)
  Decl: name='NoLedsC__Leds__led1Toggle', quals=[], storage=['inline', 'static'] (at pp.c:5742)
    FuncDecl: quals=None (at pp.c:5742)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='NoLedsC__Leds__led1Toggle', quals=[] (at pp.c:5742)
        IdentifierType: names=['void'] (at None)
  Decl: name='NoLedsC__Leds__led2Toggle', quals=[], storage=['inline', 'static'] (at pp.c:5746)
    FuncDecl: quals=None (at pp.c:5746)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='NoLedsC__Leds__led2Toggle', quals=[] (at pp.c:5746)
        IdentifierType: names=['void'] (at None)
  Decl: name='SineSensorC__0__readTask__postTask', quals=[], storage=['static'] (at pp.c:5748)
    FuncDecl: quals=None (at pp.c:5748)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SineSensorC__0__readTask__postTask', quals=[] (at pp.c:5748)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SineSensorC__0__Read__readDone', quals=[], storage=['static'] (at pp.c:5750)
    FuncDecl: quals=None (at pp.c:5750)
      ParamList:  (at pp.c:5750)
        Decl: name='result', quals=[], storage=[] (at pp.c:5750)
          TypeDecl: declname='result', quals=[] (at pp.c:5750)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='val', quals=[], storage=[] (at pp.c:5750)
          TypeDecl: declname='val', quals=[] (at pp.c:5750)
            IdentifierType: names=['SineSensorC__0__Read__val_t'] (at None)
      TypeDecl: declname='SineSensorC__0__Read__readDone', quals=[] (at pp.c:5750)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:5752)
    Enum: name='SineSensorC__0____nesc_unnamed4330' (at pp.c:5752)
      EnumeratorList:  (at pp.c:5754)
        Enumerator: name='SineSensorC__0__readTask' (at pp.c:5754)
          Constant: type='int', value='4U' (at pp.c:5754)
  Typedef: name='SineSensorC__0____nesc_sillytask_readTask', quals=[], storage=['typedef'] (at pp.c:5757)
    ArrayDecl:  (at pp.c:5757)
      TypeDecl: declname='SineSensorC__0____nesc_sillytask_readTask', quals=[] (at pp.c:5757)
        IdentifierType: names=['int'] (at None)
      ID: name='SineSensorC__0__readTask' (at pp.c:5757)
  Decl: name='SineSensorC__0__counter', quals=[], storage=[] (at pp.c:5759)
    TypeDecl: declname='SineSensorC__0__counter', quals=[] (at pp.c:5759)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name='SineSensorC__0__readTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:5766)
    FuncDecl: quals=None (at pp.c:5766)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SineSensorC__0__readTask__runTask', quals=[] (at pp.c:5766)
        IdentifierType: names=['void'] (at None)
  Decl: name='SineSensorC__0__Read__read', quals=[], storage=['inline', 'static'] (at pp.c:5774)
    FuncDecl: quals=None (at pp.c:5774)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SineSensorC__0__Read__read', quals=[] (at pp.c:5774)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Sector__read', quals=[], storage=['static'] (at pp.c:5776)
    FuncDecl: quals=None (at pp.c:5776)
      ParamList:  (at pp.c:5778)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:5778)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:5778)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:5780)
          TypeDecl: declname='addr', quals=[] (at pp.c:5780)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:5780)
          PtrDecl: quals=[] (at pp.c:5780)
            TypeDecl: declname='buf', quals=[] (at pp.c:5780)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5780)
          TypeDecl: declname='len', quals=[] (at pp.c:5780)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__read', quals=[] (at pp.c:5776)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Sector__erase', quals=[], storage=['static'] (at pp.c:5782)
    FuncDecl: quals=None (at pp.c:5782)
      ParamList:  (at pp.c:5784)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:5784)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:5784)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='sector', quals=[], storage=[] (at pp.c:5786)
          TypeDecl: declname='sector', quals=[] (at pp.c:5786)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='num_sectors', quals=[], storage=[] (at pp.c:5786)
          TypeDecl: declname='num_sectors', quals=[] (at pp.c:5786)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__erase', quals=[] (at pp.c:5782)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Sector__write', quals=[], storage=['static'] (at pp.c:5788)
    FuncDecl: quals=None (at pp.c:5788)
      ParamList:  (at pp.c:5790)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:5790)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:5790)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:5792)
          TypeDecl: declname='addr', quals=[] (at pp.c:5792)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:5792)
          PtrDecl: quals=[] (at pp.c:5792)
            TypeDecl: declname='buf', quals=[] (at pp.c:5792)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5792)
          TypeDecl: declname='len', quals=[] (at pp.c:5792)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__write', quals=[] (at pp.c:5788)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Sector__getNumSectors', quals=[], storage=['static'] (at pp.c:5794)
    FuncDecl: quals=None (at pp.c:5794)
      ParamList:  (at pp.c:5796)
        Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:5796)
          TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:5796)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__getNumSectors', quals=[] (at pp.c:5794)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pLogP__Read__readDone', quals=[], storage=['static'] (at pp.c:5798)
    FuncDecl: quals=None (at pp.c:5798)
      ParamList:  (at pp.c:5800)
        Decl: name='arg_0x101931728', quals=[], storage=[] (at pp.c:5800)
          TypeDecl: declname='arg_0x101931728', quals=[] (at pp.c:5800)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:5802)
          PtrDecl: quals=[] (at pp.c:5802)
            TypeDecl: declname='buf', quals=[] (at pp.c:5802)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5807)
          TypeDecl: declname='len', quals=[] (at pp.c:5807)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5807)
          TypeDecl: declname='error', quals=[] (at pp.c:5807)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Read__readDone', quals=[] (at pp.c:5798)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Read__seekDone', quals=[], storage=['static'] (at pp.c:5809)
    FuncDecl: quals=None (at pp.c:5809)
      ParamList:  (at pp.c:5811)
        Decl: name='arg_0x101931728', quals=[], storage=[] (at pp.c:5811)
          TypeDecl: declname='arg_0x101931728', quals=[] (at pp.c:5811)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5813)
          TypeDecl: declname='error', quals=[] (at pp.c:5813)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Read__seekDone', quals=[] (at pp.c:5809)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Circular__get', quals=[], storage=['static'] (at pp.c:5815)
    FuncDecl: quals=None (at pp.c:5815)
      ParamList:  (at pp.c:5817)
        Decl: name='arg_0x101944858', quals=[], storage=[] (at pp.c:5817)
          TypeDecl: declname='arg_0x101944858', quals=[] (at pp.c:5817)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Circular__get', quals=[] (at pp.c:5815)
        IdentifierType: names=['Stm25pLogP__Circular__val_t'] (at None)
  Decl: name='Stm25pLogP__Write__syncDone', quals=[], storage=['static'] (at pp.c:5819)
    FuncDecl: quals=None (at pp.c:5819)
      ParamList:  (at pp.c:5821)
        Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:5821)
          TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:5821)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5823)
          TypeDecl: declname='error', quals=[] (at pp.c:5823)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__syncDone', quals=[] (at pp.c:5819)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Write__eraseDone', quals=[], storage=['static'] (at pp.c:5825)
    FuncDecl: quals=None (at pp.c:5825)
      ParamList:  (at pp.c:5827)
        Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:5827)
          TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:5827)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5829)
          TypeDecl: declname='error', quals=[] (at pp.c:5829)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__eraseDone', quals=[] (at pp.c:5825)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Write__appendDone', quals=[], storage=['static'] (at pp.c:5831)
    FuncDecl: quals=None (at pp.c:5831)
      ParamList:  (at pp.c:5833)
        Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:5833)
          TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:5833)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:5835)
          PtrDecl: quals=[] (at pp.c:5835)
            TypeDecl: declname='buf', quals=[] (at pp.c:5835)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5842)
          TypeDecl: declname='len', quals=[] (at pp.c:5842)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='recordsLost', quals=[], storage=[] (at pp.c:5842)
          TypeDecl: declname='recordsLost', quals=[] (at pp.c:5842)
            IdentifierType: names=['bool'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5843)
          TypeDecl: declname='error', quals=[] (at pp.c:5843)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__appendDone', quals=[] (at pp.c:5831)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__ClientResource__release', quals=[], storage=['static'] (at pp.c:5845)
    FuncDecl: quals=None (at pp.c:5845)
      ParamList:  (at pp.c:5847)
        Decl: name='arg_0x10194c220', quals=[], storage=[] (at pp.c:5847)
          TypeDecl: declname='arg_0x10194c220', quals=[] (at pp.c:5847)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__ClientResource__release', quals=[] (at pp.c:5845)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__ClientResource__request', quals=[], storage=['static'] (at pp.c:5849)
    FuncDecl: quals=None (at pp.c:5849)
      ParamList:  (at pp.c:5851)
        Decl: name='arg_0x10194c220', quals=[], storage=[] (at pp.c:5851)
          TypeDecl: declname='arg_0x10194c220', quals=[] (at pp.c:5851)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__ClientResource__request', quals=[] (at pp.c:5849)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:5859)
    Enum: name='Stm25pLogP____nesc_unnamed4331' (at pp.c:5859)
      EnumeratorList:  (at pp.c:5860)
        Enumerator: name='Stm25pLogP__NUM_LOGS' (at pp.c:5860)
          Constant: type='int', value='1U' (at pp.c:5860)
        Enumerator: name='Stm25pLogP__BLOCK_SIZE' (at pp.c:5861)
          Constant: type='int', value='4096' (at pp.c:5861)
        Enumerator: name='Stm25pLogP__BLOCK_SIZE_LOG2' (at pp.c:5862)
          Constant: type='int', value='12' (at pp.c:5862)
        Enumerator: name='Stm25pLogP__BLOCK_MASK' (at pp.c:5863)
          BinaryOp: op='-' (at pp.c:5863)
            ID: name='Stm25pLogP__BLOCK_SIZE' (at pp.c:5863)
            Constant: type='int', value='1' (at pp.c:5863)
        Enumerator: name='Stm25pLogP__BLOCKS_PER_SECTOR' (at pp.c:5864)
          BinaryOp: op='/' (at pp.c:5864)
            ID: name='STM25P_SECTOR_SIZE' (at pp.c:5864)
            ID: name='Stm25pLogP__BLOCK_SIZE' (at pp.c:5864)
        Enumerator: name='Stm25pLogP__MAX_RECORD_SIZE' (at pp.c:5865)
          Constant: type='int', value='254' (at pp.c:5865)
        Enumerator: name='Stm25pLogP__INVALID_HEADER' (at pp.c:5866)
          Constant: type='int', value='0xff' (at pp.c:5866)
  Typedef: name='Stm25pLogP__stm25p_log_req_t', quals=[], storage=['typedef'] (at pp.c:5884)
    TypeDecl: declname='Stm25pLogP__stm25p_log_req_t', quals=[] (at pp.c:5884)
      Enum: name='Stm25pLogP____nesc_unnamed4332' (at pp.c:5877)
        EnumeratorList:  (at pp.c:5878)
          Enumerator: name='Stm25pLogP__S_IDLE' (at pp.c:5878)
          Enumerator: name='Stm25pLogP__S_READ' (at pp.c:5879)
          Enumerator: name='Stm25pLogP__S_SEEK' (at pp.c:5880)
          Enumerator: name='Stm25pLogP__S_ERASE' (at pp.c:5881)
          Enumerator: name='Stm25pLogP__S_APPEND' (at pp.c:5882)
          Enumerator: name='Stm25pLogP__S_SYNC' (at pp.c:5883)
  Typedef: name='Stm25pLogP__stm25p_log_state_t', quals=[], storage=['typedef'] (at pp.c:5897)
    TypeDecl: declname='Stm25pLogP__stm25p_log_state_t', quals=[] (at pp.c:5897)
      Struct: name='Stm25pLogP__stm25p_log_state_t', packed=False (at pp.c:5892)
        Decl: name='cookie', quals=[], storage=[] (at 0)
          TypeDecl: declname='cookie', quals=[] (at pp.c:5893)
            IdentifierType: names=['storage_cookie_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at 0)
          PtrDecl: quals=[] (at pp.c:5894)
            TypeDecl: declname='buf', quals=[] (at pp.c:5894)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at 0)
          TypeDecl: declname='len', quals=[] (at pp.c:5895)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='req', quals=[], storage=[] (at 0)
          TypeDecl: declname='req', quals=[] (at pp.c:5896)
            IdentifierType: names=['Stm25pLogP__stm25p_log_req_t'] (at None)
  Typedef: name='Stm25pLogP__stm25p_log_info_t', quals=[], storage=['typedef'] (at pp.c:5908)
    TypeDecl: declname='Stm25pLogP__stm25p_log_info_t', quals=[] (at pp.c:5908)
      Struct: name='Stm25pLogP__stm25p_log_info_t', packed=False (at pp.c:5904)
        Decl: name='read_addr', quals=[], storage=[] (at 0)
          TypeDecl: declname='read_addr', quals=[] (at pp.c:5905)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='remaining', quals=[], storage=[] (at 0)
          TypeDecl: declname='remaining', quals=[] (at pp.c:5906)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='write_addr', quals=[], storage=[] (at 0)
          TypeDecl: declname='write_addr', quals=[] (at pp.c:5907)
            IdentifierType: names=['stm25p_addr_t'] (at None)
  Decl: name='Stm25pLogP__m_log_state', quals=[], storage=[] (at pp.c:5910)
    ArrayDecl:  (at pp.c:5910)
      TypeDecl: declname='Stm25pLogP__m_log_state', quals=[] (at pp.c:5910)
        IdentifierType: names=['Stm25pLogP__stm25p_log_state_t'] (at None)
      ID: name='Stm25pLogP__NUM_LOGS' (at pp.c:5910)
  Decl: name='Stm25pLogP__m_req', quals=[], storage=[] (at pp.c:5911)
    TypeDecl: declname='Stm25pLogP__m_req', quals=[] (at pp.c:5911)
      IdentifierType: names=['Stm25pLogP__stm25p_log_state_t'] (at None)
  Decl: name='Stm25pLogP__m_log_info', quals=[], storage=[] (at pp.c:5912)
    ArrayDecl:  (at pp.c:5912)
      TypeDecl: declname='Stm25pLogP__m_log_info', quals=[] (at pp.c:5912)
        IdentifierType: names=['Stm25pLogP__stm25p_log_info_t'] (at None)
      ID: name='Stm25pLogP__NUM_LOGS' (at pp.c:5912)
  Decl: name='Stm25pLogP__m_addr', quals=[], storage=[] (at pp.c:5913)
    TypeDecl: declname='Stm25pLogP__m_addr', quals=[] (at pp.c:5913)
      IdentifierType: names=['stm25p_addr_t'] (at None)
  Decl: name='Stm25pLogP__m_records_lost', quals=[], storage=[] (at pp.c:5914)
    TypeDecl: declname='Stm25pLogP__m_records_lost', quals=[] (at pp.c:5914)
      IdentifierType: names=['bool'] (at None)
  Decl: name='Stm25pLogP__m_header', quals=[], storage=[] (at pp.c:5915)
    TypeDecl: declname='Stm25pLogP__m_header', quals=[] (at pp.c:5915)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pLogP__m_len', quals=[], storage=[] (at pp.c:5916)
    TypeDecl: declname='Stm25pLogP__m_len', quals=[] (at pp.c:5916)
      IdentifierType: names=['uint8_t'] (at None)
  Typedef: name='Stm25pLogP__stm25p_log_rw_state_t', quals=[], storage=['typedef'] (at pp.c:5931)
    TypeDecl: declname='Stm25pLogP__stm25p_log_rw_state_t', quals=[] (at pp.c:5931)
      Enum: name='Stm25pLogP____nesc_unnamed4333' (at pp.c:5925)
        EnumeratorList:  (at pp.c:5926)
          Enumerator: name='Stm25pLogP__S_SEARCH_BLOCKS' (at pp.c:5926)
          Enumerator: name='Stm25pLogP__S_SEARCH_RECORDS' (at pp.c:5927)
          Enumerator: name='Stm25pLogP__S_SEARCH_SEEK' (at pp.c:5928)
          Enumerator: name='Stm25pLogP__S_HEADER' (at pp.c:5929)
          Enumerator: name='Stm25pLogP__S_DATA' (at pp.c:5930)
  Decl: name='Stm25pLogP__m_rw_state', quals=[], storage=[] (at pp.c:5933)
    TypeDecl: declname='Stm25pLogP__m_rw_state', quals=[] (at pp.c:5933)
      IdentifierType: names=['Stm25pLogP__stm25p_log_rw_state_t'] (at None)
  Decl: name='Stm25pLogP__newRequest', quals=[], storage=['static'] (at pp.c:5935)
    FuncDecl: quals=None (at pp.c:5935)
      ParamList:  (at pp.c:5935)
        Decl: name='client', quals=[], storage=[] (at pp.c:5935)
          TypeDecl: declname='client', quals=[] (at pp.c:5935)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__newRequest', quals=[] (at pp.c:5935)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__continueReadOp', quals=[], storage=['static'] (at pp.c:5936)
    FuncDecl: quals=None (at pp.c:5936)
      ParamList:  (at pp.c:5936)
        Decl: name='client', quals=[], storage=[] (at pp.c:5936)
          TypeDecl: declname='client', quals=[] (at pp.c:5936)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__continueReadOp', quals=[] (at pp.c:5936)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__continueAppendOp', quals=[], storage=['static'] (at pp.c:5937)
    FuncDecl: quals=None (at pp.c:5937)
      ParamList:  (at pp.c:5937)
        Decl: name='client', quals=[], storage=[] (at pp.c:5937)
          TypeDecl: declname='client', quals=[] (at pp.c:5937)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__continueAppendOp', quals=[] (at pp.c:5937)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__signalDone', quals=[], storage=['static'] (at pp.c:5938)
    FuncDecl: quals=None (at pp.c:5938)
      ParamList:  (at pp.c:5938)
        Decl: name='id', quals=[], storage=[] (at pp.c:5938)
          TypeDecl: declname='id', quals=[] (at pp.c:5938)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5938)
          TypeDecl: declname='error', quals=[] (at pp.c:5938)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__signalDone', quals=[] (at pp.c:5938)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:5940)
    FuncDecl: quals=None (at pp.c:5940)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pLogP__Init__init', quals=[] (at pp.c:5940)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Read__read', quals=[], storage=['inline', 'static'] (at pp.c:5949)
    FuncDecl: quals=None (at pp.c:5949)
      ParamList:  (at pp.c:5949)
        Decl: name='id', quals=[], storage=[] (at pp.c:5949)
          TypeDecl: declname='id', quals=[] (at pp.c:5949)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:5949)
          PtrDecl: quals=[] (at pp.c:5949)
            TypeDecl: declname='buf', quals=[] (at pp.c:5949)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5949)
          TypeDecl: declname='len', quals=[] (at pp.c:5949)
            IdentifierType: names=['storage_len_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Read__read', quals=[] (at pp.c:5949)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Read__currentOffset', quals=[], storage=['inline', 'static'] (at pp.c:5951)
    FuncDecl: quals=None (at pp.c:5951)
      ParamList:  (at pp.c:5951)
        Decl: name='id', quals=[], storage=[] (at pp.c:5951)
          TypeDecl: declname='id', quals=[] (at pp.c:5951)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Read__currentOffset', quals=[] (at pp.c:5951)
        IdentifierType: names=['storage_cookie_t'] (at None)
  Decl: name='Stm25pLogP__Write__currentOffset', quals=[], storage=['inline', 'static'] (at pp.c:5960)
    FuncDecl: quals=None (at pp.c:5960)
      ParamList:  (at pp.c:5960)
        Decl: name='id', quals=[], storage=[] (at pp.c:5960)
          TypeDecl: declname='id', quals=[] (at pp.c:5960)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__currentOffset', quals=[] (at pp.c:5960)
        IdentifierType: names=['storage_cookie_t'] (at None)
  Decl: name='Stm25pLogP__Write__erase', quals=[], storage=['inline', 'static'] (at pp.c:5964)
    FuncDecl: quals=None (at pp.c:5964)
      ParamList:  (at pp.c:5964)
        Decl: name='id', quals=[], storage=[] (at pp.c:5964)
          TypeDecl: declname='id', quals=[] (at pp.c:5964)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__erase', quals=[] (at pp.c:5964)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Write__append', quals=[], storage=['inline', 'static'] (at pp.c:5969)
    FuncDecl: quals=None (at pp.c:5969)
      ParamList:  (at pp.c:5969)
        Decl: name='id', quals=[], storage=[] (at pp.c:5969)
          TypeDecl: declname='id', quals=[] (at pp.c:5969)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:5969)
          PtrDecl: quals=[] (at pp.c:5969)
            TypeDecl: declname='buf', quals=[] (at pp.c:5969)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5969)
          TypeDecl: declname='len', quals=[] (at pp.c:5969)
            IdentifierType: names=['storage_len_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__append', quals=[] (at pp.c:5969)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__newRequest', quals=[], storage=['static'] (at pp.c:5971)
    FuncDecl: quals=None (at pp.c:5971)
      ParamList:  (at pp.c:5971)
        Decl: name='client', quals=[], storage=[] (at pp.c:5971)
          TypeDecl: declname='client', quals=[] (at pp.c:5971)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__newRequest', quals=[] (at pp.c:5971)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__calcSector', quals=[], storage=['inline', 'static'] (at pp.c:5973)
    FuncDecl: quals=None (at pp.c:5973)
      ParamList:  (at pp.c:5973)
        Decl: name='client', quals=[], storage=[] (at pp.c:5973)
          TypeDecl: declname='client', quals=[] (at pp.c:5973)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:5973)
          TypeDecl: declname='addr', quals=[] (at pp.c:5973)
            IdentifierType: names=['stm25p_addr_t'] (at None)
      TypeDecl: declname='Stm25pLogP__calcSector', quals=[] (at pp.c:5973)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pLogP__calcAddr', quals=[], storage=['static'] (at pp.c:5978)
    FuncDecl: quals=None (at pp.c:5978)
      ParamList:  (at pp.c:5978)
        Decl: name='client', quals=[], storage=[] (at pp.c:5978)
          TypeDecl: declname='client', quals=[] (at pp.c:5978)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:5978)
          TypeDecl: declname='addr', quals=[] (at pp.c:5978)
            IdentifierType: names=['stm25p_addr_t'] (at None)
      TypeDecl: declname='Stm25pLogP__calcAddr', quals=[] (at pp.c:5978)
        IdentifierType: names=['stm25p_addr_t'] (at None)
  Decl: name='Stm25pLogP__ClientResource__granted', quals=[], storage=['static'] (at pp.c:5985)
    FuncDecl: quals=None (at pp.c:5985)
      ParamList:  (at pp.c:5985)
        Decl: name='id', quals=[], storage=[] (at pp.c:5985)
          TypeDecl: declname='id', quals=[] (at pp.c:5985)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__ClientResource__granted', quals=[] (at pp.c:5985)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__continueReadOp', quals=[], storage=['static'] (at pp.c:5987)
    FuncDecl: quals=None (at pp.c:5987)
      ParamList:  (at pp.c:5987)
        Decl: name='client', quals=[], storage=[] (at pp.c:5987)
          TypeDecl: declname='client', quals=[] (at pp.c:5987)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__continueReadOp', quals=[] (at pp.c:5987)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Sector__readDone', quals=[], storage=['inline', 'static'] (at pp.c:5989)
    FuncDecl: quals=None (at pp.c:5989)
      ParamList:  (at pp.c:5989)
        Decl: name='id', quals=[], storage=[] (at pp.c:5989)
          TypeDecl: declname='id', quals=[] (at pp.c:5989)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:5989)
          TypeDecl: declname='addr', quals=[] (at pp.c:5989)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:5989)
          PtrDecl: quals=[] (at pp.c:5989)
            TypeDecl: declname='buf', quals=[] (at pp.c:5989)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:5990)
          TypeDecl: declname='len', quals=[] (at pp.c:5990)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5990)
          TypeDecl: declname='error', quals=[] (at pp.c:5990)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__readDone', quals=[] (at pp.c:5989)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__continueAppendOp', quals=[], storage=['static'] (at pp.c:5992)
    FuncDecl: quals=None (at pp.c:5992)
      ParamList:  (at pp.c:5992)
        Decl: name='client', quals=[], storage=[] (at pp.c:5992)
          TypeDecl: declname='client', quals=[] (at pp.c:5992)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__continueAppendOp', quals=[] (at pp.c:5992)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Sector__eraseDone', quals=[], storage=['inline', 'static'] (at pp.c:5994)
    FuncDecl: quals=None (at pp.c:5994)
      ParamList:  (at pp.c:5994)
        Decl: name='id', quals=[], storage=[] (at pp.c:5994)
          TypeDecl: declname='id', quals=[] (at pp.c:5994)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='sector', quals=[], storage=[] (at pp.c:5994)
          TypeDecl: declname='sector', quals=[] (at pp.c:5994)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='num_sectors', quals=[], storage=[] (at pp.c:5995)
          TypeDecl: declname='num_sectors', quals=[] (at pp.c:5995)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:5996)
          TypeDecl: declname='error', quals=[] (at pp.c:5996)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__eraseDone', quals=[] (at pp.c:5994)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Sector__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:5998)
    FuncDecl: quals=None (at pp.c:5998)
      ParamList:  (at pp.c:5998)
        Decl: name='id', quals=[], storage=[] (at pp.c:5998)
          TypeDecl: declname='id', quals=[] (at pp.c:5998)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:5998)
          TypeDecl: declname='addr', quals=[] (at pp.c:5998)
            IdentifierType: names=['storage_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:5999)
          PtrDecl: quals=[] (at pp.c:5999)
            TypeDecl: declname='buf', quals=[] (at pp.c:5999)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6000)
          TypeDecl: declname='len', quals=[] (at pp.c:6000)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6001)
          TypeDecl: declname='error', quals=[] (at pp.c:6001)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__writeDone', quals=[] (at pp.c:5998)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__signalDone', quals=[], storage=['static'] (at pp.c:6003)
    FuncDecl: quals=None (at pp.c:6003)
      ParamList:  (at pp.c:6003)
        Decl: name='id', quals=[], storage=[] (at pp.c:6003)
          TypeDecl: declname='id', quals=[] (at pp.c:6003)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6003)
          TypeDecl: declname='error', quals=[] (at pp.c:6003)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__signalDone', quals=[] (at pp.c:6003)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Sector__computeCrcDone', quals=[], storage=['inline', 'static'] (at pp.c:6005)
    FuncDecl: quals=None (at pp.c:6005)
      ParamList:  (at pp.c:6005)
        Decl: name='id', quals=[], storage=[] (at pp.c:6005)
          TypeDecl: declname='id', quals=[] (at pp.c:6005)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6005)
          TypeDecl: declname='addr', quals=[] (at pp.c:6005)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6005)
          TypeDecl: declname='len', quals=[] (at pp.c:6005)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='crc', quals=[], storage=[] (at pp.c:6005)
          TypeDecl: declname='crc', quals=[] (at pp.c:6005)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6005)
          TypeDecl: declname='error', quals=[] (at pp.c:6005)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__computeCrcDone', quals=[] (at pp.c:6005)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Read__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:6007)
    FuncDecl: quals=None (at pp.c:6007)
      ParamList:  (at pp.c:6007)
        Decl: name='id', quals=[], storage=[] (at pp.c:6007)
          TypeDecl: declname='id', quals=[] (at pp.c:6007)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:6007)
          PtrDecl: quals=[] (at pp.c:6007)
            TypeDecl: declname='data', quals=[] (at pp.c:6007)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6007)
          TypeDecl: declname='len', quals=[] (at pp.c:6007)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6007)
          TypeDecl: declname='error', quals=[] (at pp.c:6007)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Read__default__readDone', quals=[] (at pp.c:6007)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Read__default__seekDone', quals=[], storage=['inline', 'static'] (at pp.c:6008)
    FuncDecl: quals=None (at pp.c:6008)
      ParamList:  (at pp.c:6008)
        Decl: name='id', quals=[], storage=[] (at pp.c:6008)
          TypeDecl: declname='id', quals=[] (at pp.c:6008)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6008)
          TypeDecl: declname='error', quals=[] (at pp.c:6008)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Read__default__seekDone', quals=[] (at pp.c:6008)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Write__default__eraseDone', quals=[], storage=['inline', 'static'] (at pp.c:6009)
    FuncDecl: quals=None (at pp.c:6009)
      ParamList:  (at pp.c:6009)
        Decl: name='id', quals=[], storage=[] (at pp.c:6009)
          TypeDecl: declname='id', quals=[] (at pp.c:6009)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6009)
          TypeDecl: declname='error', quals=[] (at pp.c:6009)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__default__eraseDone', quals=[] (at pp.c:6009)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Write__default__appendDone', quals=[], storage=['inline', 'static'] (at pp.c:6010)
    FuncDecl: quals=None (at pp.c:6010)
      ParamList:  (at pp.c:6010)
        Decl: name='id', quals=[], storage=[] (at pp.c:6010)
          TypeDecl: declname='id', quals=[] (at pp.c:6010)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:6010)
          PtrDecl: quals=[] (at pp.c:6010)
            TypeDecl: declname='data', quals=[] (at pp.c:6010)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6010)
          TypeDecl: declname='len', quals=[] (at pp.c:6010)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='recordsLost', quals=[], storage=[] (at pp.c:6010)
          TypeDecl: declname='recordsLost', quals=[] (at pp.c:6010)
            IdentifierType: names=['bool'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6010)
          TypeDecl: declname='error', quals=[] (at pp.c:6010)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__default__appendDone', quals=[] (at pp.c:6010)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Write__default__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:6011)
    FuncDecl: quals=None (at pp.c:6011)
      ParamList:  (at pp.c:6011)
        Decl: name='id', quals=[], storage=[] (at pp.c:6011)
          TypeDecl: declname='id', quals=[] (at pp.c:6011)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6011)
          TypeDecl: declname='error', quals=[] (at pp.c:6011)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Write__default__syncDone', quals=[] (at pp.c:6011)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pLogP__Sector__default__getNumSectors', quals=[], storage=['inline', 'static'] (at pp.c:6014)
    FuncDecl: quals=None (at pp.c:6014)
      ParamList:  (at pp.c:6014)
        Decl: name='id', quals=[], storage=[] (at pp.c:6014)
          TypeDecl: declname='id', quals=[] (at pp.c:6014)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__default__getNumSectors', quals=[] (at pp.c:6014)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pLogP__Sector__default__read', quals=[], storage=['inline', 'static'] (at pp.c:6015)
    FuncDecl: quals=None (at pp.c:6015)
      ParamList:  (at pp.c:6015)
        Decl: name='id', quals=[], storage=[] (at pp.c:6015)
          TypeDecl: declname='id', quals=[] (at pp.c:6015)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6015)
          TypeDecl: declname='addr', quals=[] (at pp.c:6015)
            IdentifierType: names=['storage_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6015)
          PtrDecl: quals=[] (at pp.c:6015)
            TypeDecl: declname='buf', quals=[] (at pp.c:6015)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6015)
          TypeDecl: declname='len', quals=[] (at pp.c:6015)
            IdentifierType: names=['storage_len_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__default__read', quals=[] (at pp.c:6015)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Sector__default__write', quals=[], storage=['inline', 'static'] (at pp.c:6016)
    FuncDecl: quals=None (at pp.c:6016)
      ParamList:  (at pp.c:6016)
        Decl: name='id', quals=[], storage=[] (at pp.c:6016)
          TypeDecl: declname='id', quals=[] (at pp.c:6016)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6016)
          TypeDecl: declname='addr', quals=[] (at pp.c:6016)
            IdentifierType: names=['storage_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6016)
          PtrDecl: quals=[] (at pp.c:6016)
            TypeDecl: declname='buf', quals=[] (at pp.c:6016)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6016)
          TypeDecl: declname='len', quals=[] (at pp.c:6016)
            IdentifierType: names=['storage_len_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__default__write', quals=[] (at pp.c:6016)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Sector__default__erase', quals=[], storage=['inline', 'static'] (at pp.c:6017)
    FuncDecl: quals=None (at pp.c:6017)
      ParamList:  (at pp.c:6017)
        Decl: name='id', quals=[], storage=[] (at pp.c:6017)
          TypeDecl: declname='id', quals=[] (at pp.c:6017)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='sector', quals=[], storage=[] (at pp.c:6017)
          TypeDecl: declname='sector', quals=[] (at pp.c:6017)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='num_sectors', quals=[], storage=[] (at pp.c:6017)
          TypeDecl: declname='num_sectors', quals=[] (at pp.c:6017)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Sector__default__erase', quals=[] (at pp.c:6017)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__ClientResource__default__request', quals=[], storage=['inline', 'static'] (at pp.c:6019)
    FuncDecl: quals=None (at pp.c:6019)
      ParamList:  (at pp.c:6019)
        Decl: name='id', quals=[], storage=[] (at pp.c:6019)
          TypeDecl: declname='id', quals=[] (at pp.c:6019)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__ClientResource__default__request', quals=[] (at pp.c:6019)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__ClientResource__default__release', quals=[], storage=['inline', 'static'] (at pp.c:6020)
    FuncDecl: quals=None (at pp.c:6020)
      ParamList:  (at pp.c:6020)
        Decl: name='id', quals=[], storage=[] (at pp.c:6020)
          TypeDecl: declname='id', quals=[] (at pp.c:6020)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__ClientResource__default__release', quals=[] (at pp.c:6020)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pLogP__Circular__default__get', quals=[], storage=['inline', 'static'] (at pp.c:6021)
    FuncDecl: quals=None (at pp.c:6021)
      ParamList:  (at pp.c:6021)
        Decl: name='id', quals=[], storage=[] (at pp.c:6021)
          TypeDecl: declname='id', quals=[] (at pp.c:6021)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pLogP__Circular__default__get', quals=[] (at pp.c:6021)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Stm25pSectorP__SplitControl__startDone', quals=[], storage=['static'] (at pp.c:6023)
    FuncDecl: quals=None (at pp.c:6023)
      ParamList:  (at pp.c:6023)
        Decl: name='error', quals=[], storage=[] (at pp.c:6023)
          TypeDecl: declname='error', quals=[] (at pp.c:6023)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__SplitControl__startDone', quals=[] (at pp.c:6023)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__SplitControl__stopDone', quals=[], storage=['static'] (at pp.c:6025)
    FuncDecl: quals=None (at pp.c:6025)
      ParamList:  (at pp.c:6025)
        Decl: name='error', quals=[], storage=[] (at pp.c:6025)
          TypeDecl: declname='error', quals=[] (at pp.c:6025)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__SplitControl__stopDone', quals=[] (at pp.c:6025)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__writeDone', quals=[], storage=['static'] (at pp.c:6027)
    FuncDecl: quals=None (at pp.c:6027)
      ParamList:  (at pp.c:6029)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:6029)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:6029)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6031)
          TypeDecl: declname='addr', quals=[] (at pp.c:6031)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6031)
          PtrDecl: quals=[] (at pp.c:6031)
            TypeDecl: declname='buf', quals=[] (at pp.c:6031)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6031)
          TypeDecl: declname='len', quals=[] (at pp.c:6031)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6032)
          TypeDecl: declname='error', quals=[] (at pp.c:6032)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__writeDone', quals=[] (at pp.c:6027)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__eraseDone', quals=[], storage=['static'] (at pp.c:6034)
    FuncDecl: quals=None (at pp.c:6034)
      ParamList:  (at pp.c:6036)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:6036)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:6036)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='sector', quals=[], storage=[] (at pp.c:6038)
          TypeDecl: declname='sector', quals=[] (at pp.c:6038)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='num_sectors', quals=[], storage=[] (at pp.c:6038)
          TypeDecl: declname='num_sectors', quals=[] (at pp.c:6038)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6038)
          TypeDecl: declname='error', quals=[] (at pp.c:6038)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__eraseDone', quals=[] (at pp.c:6034)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__computeCrcDone', quals=[], storage=['static'] (at pp.c:6040)
    FuncDecl: quals=None (at pp.c:6040)
      ParamList:  (at pp.c:6042)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:6042)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:6042)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6044)
          TypeDecl: declname='addr', quals=[] (at pp.c:6044)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6044)
          TypeDecl: declname='len', quals=[] (at pp.c:6044)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='crc', quals=[], storage=[] (at pp.c:6045)
          TypeDecl: declname='crc', quals=[] (at pp.c:6045)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6045)
          TypeDecl: declname='error', quals=[] (at pp.c:6045)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__computeCrcDone', quals=[] (at pp.c:6040)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__readDone', quals=[], storage=['static'] (at pp.c:6047)
    FuncDecl: quals=None (at pp.c:6047)
      ParamList:  (at pp.c:6049)
        Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:6049)
          TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:6049)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6051)
          TypeDecl: declname='addr', quals=[] (at pp.c:6051)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6051)
          PtrDecl: quals=[] (at pp.c:6051)
            TypeDecl: declname='buf', quals=[] (at pp.c:6051)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6051)
          TypeDecl: declname='len', quals=[] (at pp.c:6051)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6052)
          TypeDecl: declname='error', quals=[] (at pp.c:6052)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__readDone', quals=[] (at pp.c:6047)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Stm25pResource__release', quals=[], storage=['static'] (at pp.c:6054)
    FuncDecl: quals=None (at pp.c:6054)
      ParamList:  (at pp.c:6056)
        Decl: name='arg_0x101a03a68', quals=[], storage=[] (at pp.c:6056)
          TypeDecl: declname='arg_0x101a03a68', quals=[] (at pp.c:6056)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Stm25pResource__release', quals=[] (at pp.c:6054)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Stm25pResource__request', quals=[], storage=['static'] (at pp.c:6058)
    FuncDecl: quals=None (at pp.c:6058)
      ParamList:  (at pp.c:6060)
        Decl: name='arg_0x101a03a68', quals=[], storage=[] (at pp.c:6060)
          TypeDecl: declname='arg_0x101a03a68', quals=[] (at pp.c:6060)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Stm25pResource__request', quals=[] (at pp.c:6058)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Volume__getVolumeId', quals=[], storage=['static'] (at pp.c:6062)
    FuncDecl: quals=None (at pp.c:6062)
      ParamList:  (at pp.c:6064)
        Decl: name='arg_0x101a04d10', quals=[], storage=[] (at pp.c:6064)
          TypeDecl: declname='arg_0x101a04d10', quals=[] (at pp.c:6064)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Volume__getVolumeId', quals=[] (at pp.c:6062)
        IdentifierType: names=['volume_id_t'] (at None)
  Decl: name='Stm25pSectorP__SpiResource__release', quals=[], storage=['static'] (at pp.c:6066)
    FuncDecl: quals=None (at pp.c:6066)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__SpiResource__release', quals=[] (at pp.c:6066)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__SpiResource__request', quals=[], storage=['static'] (at pp.c:6068)
    FuncDecl: quals=None (at pp.c:6068)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__SpiResource__request', quals=[] (at pp.c:6068)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Spi__powerDown', quals=[], storage=['static'] (at pp.c:6070)
    FuncDecl: quals=None (at pp.c:6070)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__powerDown', quals=[] (at pp.c:6070)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Spi__read', quals=[], storage=['static'] (at pp.c:6072)
    FuncDecl: quals=None (at pp.c:6072)
      ParamList:  (at pp.c:6072)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6072)
          TypeDecl: declname='addr', quals=[] (at pp.c:6072)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6072)
          PtrDecl: quals=[] (at pp.c:6072)
            TypeDecl: declname='buf', quals=[] (at pp.c:6072)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6073)
          TypeDecl: declname='len', quals=[] (at pp.c:6073)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__read', quals=[] (at pp.c:6072)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Spi__sectorErase', quals=[], storage=['static'] (at pp.c:6075)
    FuncDecl: quals=None (at pp.c:6075)
      ParamList:  (at pp.c:6075)
        Decl: name='sector', quals=[], storage=[] (at pp.c:6075)
          TypeDecl: declname='sector', quals=[] (at pp.c:6075)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__sectorErase', quals=[] (at pp.c:6075)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Spi__powerUp', quals=[], storage=['static'] (at pp.c:6077)
    FuncDecl: quals=None (at pp.c:6077)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__powerUp', quals=[] (at pp.c:6077)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Spi__pageProgram', quals=[], storage=['static'] (at pp.c:6079)
    FuncDecl: quals=None (at pp.c:6079)
      ParamList:  (at pp.c:6079)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6079)
          TypeDecl: declname='addr', quals=[] (at pp.c:6079)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6079)
          PtrDecl: quals=[] (at pp.c:6079)
            TypeDecl: declname='buf', quals=[] (at pp.c:6079)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6080)
          TypeDecl: declname='len', quals=[] (at pp.c:6080)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__pageProgram', quals=[] (at pp.c:6079)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__ClientResource__granted', quals=[], storage=['static'] (at pp.c:6082)
    FuncDecl: quals=None (at pp.c:6082)
      ParamList:  (at pp.c:6084)
        Decl: name='arg_0x101a0a108', quals=[], storage=[] (at pp.c:6084)
          TypeDecl: declname='arg_0x101a0a108', quals=[] (at pp.c:6084)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__ClientResource__granted', quals=[] (at pp.c:6082)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__signalDone_task__postTask', quals=[], storage=['static'] (at pp.c:6086)
    FuncDecl: quals=None (at pp.c:6086)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__signalDone_task__postTask', quals=[] (at pp.c:6086)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:6088)
    Enum: name='Stm25pSectorP____nesc_unnamed4334' (at pp.c:6088)
      EnumeratorList:  (at pp.c:6090)
        Enumerator: name='Stm25pSectorP__signalDone_task' (at pp.c:6090)
          Constant: type='int', value='5U' (at pp.c:6090)
  Typedef: name='Stm25pSectorP____nesc_sillytask_signalDone_task', quals=[], storage=['typedef'] (at pp.c:6093)
    ArrayDecl:  (at pp.c:6093)
      TypeDecl: declname='Stm25pSectorP____nesc_sillytask_signalDone_task', quals=[] (at pp.c:6093)
        IdentifierType: names=['int'] (at None)
      ID: name='Stm25pSectorP__signalDone_task' (at pp.c:6093)
  Decl: name=None, quals=[], storage=[] (at pp.c:6095)
    Enum: name='Stm25pSectorP____nesc_unnamed4335' (at pp.c:6095)
      EnumeratorList:  (at pp.c:6096)
        Enumerator: name='Stm25pSectorP__NO_CLIENT' (at pp.c:6096)
          Constant: type='int', value='0xff' (at pp.c:6096)
  Typedef: name='Stm25pSectorP__stm25p_sector_state_t', quals=[], storage=['typedef'] (at pp.c:6112)
    TypeDecl: declname='Stm25pSectorP__stm25p_sector_state_t', quals=[] (at pp.c:6112)
      Enum: name='Stm25pSectorP____nesc_unnamed4336' (at pp.c:6106)
        EnumeratorList:  (at pp.c:6107)
          Enumerator: name='Stm25pSectorP__S_IDLE' (at pp.c:6107)
          Enumerator: name='Stm25pSectorP__S_READ' (at pp.c:6108)
          Enumerator: name='Stm25pSectorP__S_WRITE' (at pp.c:6109)
          Enumerator: name='Stm25pSectorP__S_ERASE' (at pp.c:6110)
          Enumerator: name='Stm25pSectorP__S_CRC' (at pp.c:6111)
  Decl: name='Stm25pSectorP__m_state', quals=[], storage=[] (at pp.c:6113)
    TypeDecl: declname='Stm25pSectorP__m_state', quals=[] (at pp.c:6113)
      IdentifierType: names=['Stm25pSectorP__stm25p_sector_state_t'] (at None)
  Typedef: name='Stm25pSectorP__stm25p_power_state_t', quals=[], storage=['typedef'] (at pp.c:6124)
    TypeDecl: declname='Stm25pSectorP__stm25p_power_state_t', quals=[] (at pp.c:6124)
      Enum: name='Stm25pSectorP____nesc_unnamed4337' (at pp.c:6120)
        EnumeratorList:  (at pp.c:6121)
          Enumerator: name='Stm25pSectorP__S_NONE' (at pp.c:6121)
          Enumerator: name='Stm25pSectorP__S_START' (at pp.c:6122)
          Enumerator: name='Stm25pSectorP__S_STOP' (at pp.c:6123)
  Decl: name='Stm25pSectorP__m_power_state', quals=[], storage=[] (at pp.c:6125)
    TypeDecl: declname='Stm25pSectorP__m_power_state', quals=[] (at pp.c:6125)
      IdentifierType: names=['Stm25pSectorP__stm25p_power_state_t'] (at None)
  Decl: name='Stm25pSectorP__m_client', quals=[], storage=[] (at pp.c:6127)
    TypeDecl: declname='Stm25pSectorP__m_client', quals=[] (at pp.c:6127)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pSectorP__m_addr', quals=[], storage=[] (at pp.c:6128)
    TypeDecl: declname='Stm25pSectorP__m_addr', quals=[] (at pp.c:6128)
      IdentifierType: names=['stm25p_addr_t'] (at None)
  Decl: name='Stm25pSectorP__m_len', quals=[], storage=[] (at pp.c:6129)
    TypeDecl: declname='Stm25pSectorP__m_len', quals=[] (at pp.c:6129)
      IdentifierType: names=['stm25p_len_t'] (at None)
  Decl: name='Stm25pSectorP__m_cur_len', quals=[], storage=[] (at pp.c:6130)
    TypeDecl: declname='Stm25pSectorP__m_cur_len', quals=[] (at pp.c:6130)
      IdentifierType: names=['stm25p_len_t'] (at None)
  Decl: name='Stm25pSectorP__m_buf', quals=[], storage=[] (at pp.c:6131)
    PtrDecl: quals=[] (at pp.c:6131)
      TypeDecl: declname='Stm25pSectorP__m_buf', quals=[] (at pp.c:6131)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pSectorP__m_error', quals=[], storage=[] (at pp.c:6132)
    TypeDecl: declname='Stm25pSectorP__m_error', quals=[] (at pp.c:6132)
      IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__m_crc', quals=[], storage=[] (at pp.c:6133)
    TypeDecl: declname='Stm25pSectorP__m_crc', quals=[] (at pp.c:6133)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Stm25pSectorP__signalDone', quals=[], storage=['inline', 'static'] (at pp.c:6136)
    FuncDecl: quals=None (at pp.c:6136)
      ParamList:  (at pp.c:6136)
        Decl: name='error', quals=[], storage=[] (at pp.c:6136)
          TypeDecl: declname='error', quals=[] (at pp.c:6136)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__signalDone', quals=[] (at pp.c:6136)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__SplitControl__start', quals=[], storage=['static'] (at pp.c:6139)
    FuncDecl: quals=None (at pp.c:6139)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__SplitControl__start', quals=[] (at pp.c:6139)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__SplitControl__stop', quals=[], storage=['inline', 'static'] (at pp.c:6146)
    FuncDecl: quals=None (at pp.c:6146)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__SplitControl__stop', quals=[] (at pp.c:6146)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__ClientResource__request', quals=[], storage=['inline', 'static'] (at pp.c:6153)
    FuncDecl: quals=None (at pp.c:6153)
      ParamList:  (at pp.c:6153)
        Decl: name='id', quals=[], storage=[] (at pp.c:6153)
          TypeDecl: declname='id', quals=[] (at pp.c:6153)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__ClientResource__request', quals=[] (at pp.c:6153)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__ClientResource__release', quals=[], storage=['inline', 'static'] (at pp.c:6161)
    FuncDecl: quals=None (at pp.c:6161)
      ParamList:  (at pp.c:6161)
        Decl: name='id', quals=[], storage=[] (at pp.c:6161)
          TypeDecl: declname='id', quals=[] (at pp.c:6161)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__ClientResource__release', quals=[] (at pp.c:6161)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Stm25pResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:6172)
    FuncDecl: quals=None (at pp.c:6172)
      ParamList:  (at pp.c:6172)
        Decl: name='id', quals=[], storage=[] (at pp.c:6172)
          TypeDecl: declname='id', quals=[] (at pp.c:6172)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Stm25pResource__granted', quals=[] (at pp.c:6172)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__getVolumeId', quals=[], storage=['inline', 'static'] (at pp.c:6177)
    FuncDecl: quals=None (at pp.c:6177)
      ParamList:  (at pp.c:6177)
        Decl: name='client', quals=[], storage=[] (at pp.c:6177)
          TypeDecl: declname='client', quals=[] (at pp.c:6177)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__getVolumeId', quals=[] (at pp.c:6177)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pSectorP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:6181)
    FuncDecl: quals=None (at pp.c:6181)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__SpiResource__granted', quals=[] (at pp.c:6181)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__physicalAddr', quals=[], storage=['inline', 'static'] (at pp.c:6183)
    FuncDecl: quals=None (at pp.c:6183)
      ParamList:  (at pp.c:6183)
        Decl: name='id', quals=[], storage=[] (at pp.c:6183)
          TypeDecl: declname='id', quals=[] (at pp.c:6183)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6183)
          TypeDecl: declname='addr', quals=[] (at pp.c:6183)
            IdentifierType: names=['stm25p_addr_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__physicalAddr', quals=[] (at pp.c:6183)
        IdentifierType: names=['stm25p_addr_t'] (at None)
  Decl: name='Stm25pSectorP__calcWriteLen', quals=[], storage=['static'] (at pp.c:6188)
    FuncDecl: quals=None (at pp.c:6188)
      ParamList:  (at pp.c:6188)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6188)
          TypeDecl: declname='addr', quals=[] (at pp.c:6188)
            IdentifierType: names=['stm25p_addr_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__calcWriteLen', quals=[] (at pp.c:6188)
        IdentifierType: names=['stm25p_len_t'] (at None)
  Decl: name='Stm25pSectorP__Sector__getNumSectors', quals=[], storage=['static'] (at pp.c:6197)
    FuncDecl: quals=None (at pp.c:6197)
      ParamList:  (at pp.c:6197)
        Decl: name='id', quals=[], storage=[] (at pp.c:6197)
          TypeDecl: declname='id', quals=[] (at pp.c:6197)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__getNumSectors', quals=[] (at pp.c:6197)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pSectorP__Sector__read', quals=[], storage=['static'] (at pp.c:6201)
    FuncDecl: quals=None (at pp.c:6201)
      ParamList:  (at pp.c:6201)
        Decl: name='id', quals=[], storage=[] (at pp.c:6201)
          TypeDecl: declname='id', quals=[] (at pp.c:6201)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6201)
          TypeDecl: declname='addr', quals=[] (at pp.c:6201)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6201)
          PtrDecl: quals=[] (at pp.c:6201)
            TypeDecl: declname='buf', quals=[] (at pp.c:6201)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6202)
          TypeDecl: declname='len', quals=[] (at pp.c:6202)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__read', quals=[] (at pp.c:6201)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Spi__readDone', quals=[], storage=['inline', 'static'] (at pp.c:6213)
    FuncDecl: quals=None (at pp.c:6213)
      ParamList:  (at pp.c:6213)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6213)
          TypeDecl: declname='addr', quals=[] (at pp.c:6213)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6213)
          PtrDecl: quals=[] (at pp.c:6213)
            TypeDecl: declname='buf', quals=[] (at pp.c:6213)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6214)
          TypeDecl: declname='len', quals=[] (at pp.c:6214)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6214)
          TypeDecl: declname='error', quals=[] (at pp.c:6214)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__readDone', quals=[] (at pp.c:6213)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__write', quals=[], storage=['static'] (at pp.c:6218)
    FuncDecl: quals=None (at pp.c:6218)
      ParamList:  (at pp.c:6218)
        Decl: name='id', quals=[], storage=[] (at pp.c:6218)
          TypeDecl: declname='id', quals=[] (at pp.c:6218)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6218)
          TypeDecl: declname='addr', quals=[] (at pp.c:6218)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6219)
          PtrDecl: quals=[] (at pp.c:6219)
            TypeDecl: declname='buf', quals=[] (at pp.c:6219)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6220)
          TypeDecl: declname='len', quals=[] (at pp.c:6220)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__write', quals=[] (at pp.c:6218)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Spi__pageProgramDone', quals=[], storage=['inline', 'static'] (at pp.c:6222)
    FuncDecl: quals=None (at pp.c:6222)
      ParamList:  (at pp.c:6222)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6222)
          TypeDecl: declname='addr', quals=[] (at pp.c:6222)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6222)
          PtrDecl: quals=[] (at pp.c:6222)
            TypeDecl: declname='buf', quals=[] (at pp.c:6222)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6223)
          TypeDecl: declname='len', quals=[] (at pp.c:6223)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6223)
          TypeDecl: declname='error', quals=[] (at pp.c:6223)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__pageProgramDone', quals=[] (at pp.c:6222)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__erase', quals=[], storage=['static'] (at pp.c:6233)
    FuncDecl: quals=None (at pp.c:6233)
      ParamList:  (at pp.c:6233)
        Decl: name='id', quals=[], storage=[] (at pp.c:6233)
          TypeDecl: declname='id', quals=[] (at pp.c:6233)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='sector', quals=[], storage=[] (at pp.c:6233)
          TypeDecl: declname='sector', quals=[] (at pp.c:6233)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='num_sectors', quals=[], storage=[] (at pp.c:6234)
          TypeDecl: declname='num_sectors', quals=[] (at pp.c:6234)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__erase', quals=[] (at pp.c:6233)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSectorP__Spi__sectorEraseDone', quals=[], storage=['inline', 'static'] (at pp.c:6236)
    FuncDecl: quals=None (at pp.c:6236)
      ParamList:  (at pp.c:6236)
        Decl: name='sector', quals=[], storage=[] (at pp.c:6236)
          TypeDecl: declname='sector', quals=[] (at pp.c:6236)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6236)
          TypeDecl: declname='error', quals=[] (at pp.c:6236)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__sectorEraseDone', quals=[] (at pp.c:6236)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Spi__computeCrcDone', quals=[], storage=['inline', 'static'] (at pp.c:6238)
    FuncDecl: quals=None (at pp.c:6238)
      ParamList:  (at pp.c:6238)
        Decl: name='crc', quals=[], storage=[] (at pp.c:6238)
          TypeDecl: declname='crc', quals=[] (at pp.c:6238)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6238)
          TypeDecl: declname='addr', quals=[] (at pp.c:6238)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6239)
          TypeDecl: declname='len', quals=[] (at pp.c:6239)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6239)
          TypeDecl: declname='error', quals=[] (at pp.c:6239)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__computeCrcDone', quals=[] (at pp.c:6238)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Spi__bulkEraseDone', quals=[], storage=['inline', 'static'] (at pp.c:6244)
    FuncDecl: quals=None (at pp.c:6244)
      ParamList:  (at pp.c:6244)
        Decl: name='error', quals=[], storage=[] (at pp.c:6244)
          TypeDecl: declname='error', quals=[] (at pp.c:6244)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Spi__bulkEraseDone', quals=[] (at pp.c:6244)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__signalDone', quals=[], storage=['inline', 'static'] (at pp.c:6248)
    FuncDecl: quals=None (at pp.c:6248)
      ParamList:  (at pp.c:6248)
        Decl: name='error', quals=[], storage=[] (at pp.c:6248)
          TypeDecl: declname='error', quals=[] (at pp.c:6248)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__signalDone', quals=[] (at pp.c:6248)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__signalDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6253)
    FuncDecl: quals=None (at pp.c:6253)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSectorP__signalDone_task__runTask', quals=[] (at pp.c:6253)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__ClientResource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:6255)
    FuncDecl: quals=None (at pp.c:6255)
      ParamList:  (at pp.c:6255)
        Decl: name='id', quals=[], storage=[] (at pp.c:6255)
          TypeDecl: declname='id', quals=[] (at pp.c:6255)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__ClientResource__default__granted', quals=[] (at pp.c:6255)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:6256)
    FuncDecl: quals=None (at pp.c:6256)
      ParamList:  (at pp.c:6256)
        Decl: name='id', quals=[], storage=[] (at pp.c:6256)
          TypeDecl: declname='id', quals=[] (at pp.c:6256)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6256)
          TypeDecl: declname='addr', quals=[] (at pp.c:6256)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6256)
          PtrDecl: quals=[] (at pp.c:6256)
            TypeDecl: declname='buf', quals=[] (at pp.c:6256)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6256)
          TypeDecl: declname='len', quals=[] (at pp.c:6256)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6256)
          TypeDecl: declname='error', quals=[] (at pp.c:6256)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__default__readDone', quals=[] (at pp.c:6256)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__default__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:6257)
    FuncDecl: quals=None (at pp.c:6257)
      ParamList:  (at pp.c:6257)
        Decl: name='id', quals=[], storage=[] (at pp.c:6257)
          TypeDecl: declname='id', quals=[] (at pp.c:6257)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6257)
          TypeDecl: declname='addr', quals=[] (at pp.c:6257)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6257)
          PtrDecl: quals=[] (at pp.c:6257)
            TypeDecl: declname='buf', quals=[] (at pp.c:6257)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6257)
          TypeDecl: declname='len', quals=[] (at pp.c:6257)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6257)
          TypeDecl: declname='error', quals=[] (at pp.c:6257)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__default__writeDone', quals=[] (at pp.c:6257)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__default__eraseDone', quals=[], storage=['inline', 'static'] (at pp.c:6258)
    FuncDecl: quals=None (at pp.c:6258)
      ParamList:  (at pp.c:6258)
        Decl: name='id', quals=[], storage=[] (at pp.c:6258)
          TypeDecl: declname='id', quals=[] (at pp.c:6258)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='sector', quals=[], storage=[] (at pp.c:6258)
          TypeDecl: declname='sector', quals=[] (at pp.c:6258)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='num_sectors', quals=[], storage=[] (at pp.c:6258)
          TypeDecl: declname='num_sectors', quals=[] (at pp.c:6258)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6258)
          TypeDecl: declname='error', quals=[] (at pp.c:6258)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__default__eraseDone', quals=[] (at pp.c:6258)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Sector__default__computeCrcDone', quals=[], storage=['inline', 'static'] (at pp.c:6259)
    FuncDecl: quals=None (at pp.c:6259)
      ParamList:  (at pp.c:6259)
        Decl: name='id', quals=[], storage=[] (at pp.c:6259)
          TypeDecl: declname='id', quals=[] (at pp.c:6259)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6259)
          TypeDecl: declname='addr', quals=[] (at pp.c:6259)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6259)
          TypeDecl: declname='len', quals=[] (at pp.c:6259)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='crc', quals=[], storage=[] (at pp.c:6259)
          TypeDecl: declname='crc', quals=[] (at pp.c:6259)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6259)
          TypeDecl: declname='error', quals=[] (at pp.c:6259)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Sector__default__computeCrcDone', quals=[] (at pp.c:6259)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSectorP__Volume__default__getVolumeId', quals=[], storage=['inline', 'static'] (at pp.c:6260)
    FuncDecl: quals=None (at pp.c:6260)
      ParamList:  (at pp.c:6260)
        Decl: name='id', quals=[], storage=[] (at pp.c:6260)
          TypeDecl: declname='id', quals=[] (at pp.c:6260)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSectorP__Volume__default__getVolumeId', quals=[] (at pp.c:6260)
        IdentifierType: names=['volume_id_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:6262)
    Enum: name='FcfsResourceQueueC__1____nesc_unnamed4338' (at pp.c:6262)
      EnumeratorList:  (at pp.c:6264)
        Enumerator: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:6264)
          Constant: type='int', value='0xFF' (at pp.c:6264)
  Decl: name='FcfsResourceQueueC__1__resQ', quals=[], storage=[] (at pp.c:6266)
    ArrayDecl:  (at pp.c:6266)
      TypeDecl: declname='FcfsResourceQueueC__1__resQ', quals=[] (at pp.c:6266)
        IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='1U' (at pp.c:6266)
  Decl: name='FcfsResourceQueueC__1__qHead', quals=[], storage=[] (at pp.c:6267)
    TypeDecl: declname='FcfsResourceQueueC__1__qHead', quals=[] (at pp.c:6267)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:6267)
  Decl: name='FcfsResourceQueueC__1__qTail', quals=[], storage=[] (at pp.c:6268)
    TypeDecl: declname='FcfsResourceQueueC__1__qTail', quals=[] (at pp.c:6268)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:6268)
  Decl: name='FcfsResourceQueueC__1__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:6270)
    FuncDecl: quals=None (at pp.c:6270)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__Init__init', quals=[] (at pp.c:6270)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[], storage=['inline', 'static'] (at pp.c:6275)
    FuncDecl: quals=None (at pp.c:6275)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[] (at pp.c:6275)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__isEnqueued', quals=[], storage=['inline', 'static'] (at pp.c:6279)
    FuncDecl: quals=None (at pp.c:6279)
      ParamList:  (at pp.c:6279)
        Decl: name='id', quals=[], storage=[] (at pp.c:6279)
          TypeDecl: declname='id', quals=[] (at pp.c:6279)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__isEnqueued', quals=[] (at pp.c:6279)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:6283)
    FuncDecl: quals=None (at pp.c:6283)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[] (at pp.c:6283)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='FcfsResourceQueueC__1__FcfsQueue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:6285)
    FuncDecl: quals=None (at pp.c:6285)
      ParamList:  (at pp.c:6285)
        Decl: name='id', quals=[], storage=[] (at pp.c:6285)
          TypeDecl: declname='id', quals=[] (at pp.c:6285)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__enqueue', quals=[] (at pp.c:6285)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__ResourceRequested__requested', quals=[], storage=['static'] (at pp.c:6287)
    FuncDecl: quals=None (at pp.c:6287)
      ParamList:  (at pp.c:6289)
        Decl: name='arg_0x101ac2020', quals=[], storage=[] (at pp.c:6289)
          TypeDecl: declname='arg_0x101ac2020', quals=[] (at pp.c:6289)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceRequested__requested', quals=[] (at pp.c:6287)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__unconfigure', quals=[], storage=['static'] (at pp.c:6291)
    FuncDecl: quals=None (at pp.c:6291)
      ParamList:  (at pp.c:6293)
        Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:6293)
          TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:6293)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:6291)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__configure', quals=[], storage=['static'] (at pp.c:6295)
    FuncDecl: quals=None (at pp.c:6295)
      ParamList:  (at pp.c:6297)
        Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:6297)
          TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:6297)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__configure', quals=[] (at pp.c:6295)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__Queue__enqueue', quals=[], storage=['static'] (at pp.c:6299)
    FuncDecl: quals=None (at pp.c:6299)
      ParamList:  (at pp.c:6299)
        Decl: name='id', quals=[], storage=[] (at pp.c:6299)
          TypeDecl: declname='id', quals=[] (at pp.c:6299)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Queue__enqueue', quals=[] (at pp.c:6299)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__Queue__isEmpty', quals=[], storage=['static'] (at pp.c:6301)
    FuncDecl: quals=None (at pp.c:6301)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__Queue__isEmpty', quals=[] (at pp.c:6301)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__0__Queue__dequeue', quals=[], storage=['static'] (at pp.c:6303)
    FuncDecl: quals=None (at pp.c:6303)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__Queue__dequeue', quals=[] (at pp.c:6303)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='ArbiterP__0__ResourceDefaultOwner__requested', quals=[], storage=['static'] (at pp.c:6305)
    FuncDecl: quals=None (at pp.c:6305)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__requested', quals=[] (at pp.c:6305)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceDefaultOwner__granted', quals=[], storage=['static'] (at pp.c:6307)
    FuncDecl: quals=None (at pp.c:6307)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__granted', quals=[] (at pp.c:6307)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__Resource__granted', quals=[], storage=['static'] (at pp.c:6309)
    FuncDecl: quals=None (at pp.c:6309)
      ParamList:  (at pp.c:6311)
        Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:6311)
          TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:6311)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__granted', quals=[] (at pp.c:6309)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__grantedTask__postTask', quals=[], storage=['static'] (at pp.c:6313)
    FuncDecl: quals=None (at pp.c:6313)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__grantedTask__postTask', quals=[] (at pp.c:6313)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:6315)
    Enum: name='ArbiterP__0____nesc_unnamed4339' (at pp.c:6315)
      EnumeratorList:  (at pp.c:6317)
        Enumerator: name='ArbiterP__0__grantedTask' (at pp.c:6317)
          Constant: type='int', value='6U' (at pp.c:6317)
  Typedef: name='ArbiterP__0____nesc_sillytask_grantedTask', quals=[], storage=['typedef'] (at pp.c:6320)
    ArrayDecl:  (at pp.c:6320)
      TypeDecl: declname='ArbiterP__0____nesc_sillytask_grantedTask', quals=[] (at pp.c:6320)
        IdentifierType: names=['int'] (at None)
      ID: name='ArbiterP__0__grantedTask' (at pp.c:6320)
  Decl: name=None, quals=[], storage=[] (at pp.c:6322)
    Enum: name='ArbiterP__0____nesc_unnamed4340' (at pp.c:6322)
      EnumeratorList:  (at pp.c:6324)
        Enumerator: name='ArbiterP__0__RES_CONTROLLED' (at pp.c:6324)
        Enumerator: name='ArbiterP__0__RES_GRANTING' (at pp.c:6324)
        Enumerator: name='ArbiterP__0__RES_IMM_GRANTING' (at pp.c:6324)
        Enumerator: name='ArbiterP__0__RES_BUSY' (at pp.c:6324)
  Decl: name=None, quals=[], storage=[] (at pp.c:6327)
    Enum: name='ArbiterP__0____nesc_unnamed4341' (at pp.c:6327)
      EnumeratorList:  (at pp.c:6329)
        Enumerator: name='ArbiterP__0__default_owner_id' (at pp.c:6329)
          Constant: type='int', value='1U' (at pp.c:6329)
  Decl: name=None, quals=[], storage=[] (at pp.c:6332)
    Enum: name='ArbiterP__0____nesc_unnamed4342' (at pp.c:6332)
      EnumeratorList:  (at pp.c:6334)
        Enumerator: name='ArbiterP__0__NO_RES' (at pp.c:6334)
          Constant: type='int', value='0xFF' (at pp.c:6334)
  Decl: name='ArbiterP__0__state', quals=[], storage=[] (at pp.c:6336)
    TypeDecl: declname='ArbiterP__0__state', quals=[] (at pp.c:6336)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='ArbiterP__0__RES_CONTROLLED' (at pp.c:6336)
  Decl: name='ArbiterP__0__resId', quals=[], storage=[] (at pp.c:6337)
    TypeDecl: declname='ArbiterP__0__resId', quals=[] (at pp.c:6337)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='ArbiterP__0__default_owner_id' (at pp.c:6337)
  Decl: name='ArbiterP__0__reqResId', quals=[], storage=[] (at pp.c:6338)
    TypeDecl: declname='ArbiterP__0__reqResId', quals=[] (at pp.c:6338)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__0__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:6342)
    FuncDecl: quals=None (at pp.c:6342)
      ParamList:  (at pp.c:6342)
        Decl: name='id', quals=[], storage=[] (at pp.c:6342)
          TypeDecl: declname='id', quals=[] (at pp.c:6342)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__request', quals=[] (at pp.c:6342)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:6344)
    FuncDecl: quals=None (at pp.c:6344)
      ParamList:  (at pp.c:6344)
        Decl: name='id', quals=[], storage=[] (at pp.c:6344)
          TypeDecl: declname='id', quals=[] (at pp.c:6344)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__Resource__release', quals=[] (at pp.c:6344)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:6346)
    FuncDecl: quals=None (at pp.c:6346)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__release', quals=[] (at pp.c:6346)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__0__grantedTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6348)
    FuncDecl: quals=None (at pp.c:6348)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__0__grantedTask__runTask', quals=[] (at pp.c:6348)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceRequested__default__requested', quals=[], storage=['inline', 'static'] (at pp.c:6350)
    FuncDecl: quals=None (at pp.c:6350)
      ParamList:  (at pp.c:6350)
        Decl: name='id', quals=[], storage=[] (at pp.c:6350)
          TypeDecl: declname='id', quals=[] (at pp.c:6350)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceRequested__default__requested', quals=[] (at pp.c:6350)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__default__configure', quals=[], storage=['inline', 'static'] (at pp.c:6352)
    FuncDecl: quals=None (at pp.c:6352)
      ParamList:  (at pp.c:6352)
        Decl: name='id', quals=[], storage=[] (at pp.c:6352)
          TypeDecl: declname='id', quals=[] (at pp.c:6352)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__configure', quals=[] (at pp.c:6352)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:6354)
    FuncDecl: quals=None (at pp.c:6354)
      ParamList:  (at pp.c:6354)
        Decl: name='id', quals=[], storage=[] (at pp.c:6354)
          TypeDecl: declname='id', quals=[] (at pp.c:6354)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:6354)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__SplitControl__start', quals=[], storage=['static'] (at pp.c:6356)
    FuncDecl: quals=None (at pp.c:6356)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__SplitControl__start', quals=[] (at pp.c:6356)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DeferredPowerManagerP__0__SplitControl__stop', quals=[], storage=['static'] (at pp.c:6358)
    FuncDecl: quals=None (at pp.c:6358)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__SplitControl__stop', quals=[] (at pp.c:6358)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DeferredPowerManagerP__0__TimerMilli__startOneShot', quals=[], storage=['static'] (at pp.c:6360)
    FuncDecl: quals=None (at pp.c:6360)
      ParamList:  (at pp.c:6360)
        Decl: name='dt', quals=[], storage=[] (at pp.c:6360)
          TypeDecl: declname='dt', quals=[] (at pp.c:6360)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__TimerMilli__startOneShot', quals=[] (at pp.c:6360)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__TimerMilli__stop', quals=[], storage=['static'] (at pp.c:6365)
    FuncDecl: quals=None (at pp.c:6365)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__TimerMilli__stop', quals=[] (at pp.c:6365)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__PowerDownCleanup__cleanup', quals=[], storage=['static'] (at pp.c:6367)
    FuncDecl: quals=None (at pp.c:6367)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__PowerDownCleanup__cleanup', quals=[] (at pp.c:6367)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__timerTask__postTask', quals=[], storage=['static'] (at pp.c:6369)
    FuncDecl: quals=None (at pp.c:6369)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__timerTask__postTask', quals=[] (at pp.c:6369)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DeferredPowerManagerP__0__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:6371)
    FuncDecl: quals=None (at pp.c:6371)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__ResourceDefaultOwner__release', quals=[] (at pp.c:6371)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DeferredPowerManagerP__0__startTask__postTask', quals=[], storage=['static'] (at pp.c:6373)
    FuncDecl: quals=None (at pp.c:6373)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__startTask__postTask', quals=[] (at pp.c:6373)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DeferredPowerManagerP__0__StdControl__start', quals=[], storage=['static'] (at pp.c:6375)
    FuncDecl: quals=None (at pp.c:6375)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__StdControl__start', quals=[] (at pp.c:6375)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DeferredPowerManagerP__0__StdControl__stop', quals=[], storage=['static'] (at pp.c:6385)
    FuncDecl: quals=None (at pp.c:6385)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__StdControl__stop', quals=[] (at pp.c:6385)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:6387)
    Enum: name='DeferredPowerManagerP__0____nesc_unnamed4343' (at pp.c:6387)
      EnumeratorList:  (at pp.c:6389)
        Enumerator: name='DeferredPowerManagerP__0__startTask' (at pp.c:6389)
          Constant: type='int', value='7U' (at pp.c:6389)
  Typedef: name='DeferredPowerManagerP__0____nesc_sillytask_startTask', quals=[], storage=['typedef'] (at pp.c:6392)
    ArrayDecl:  (at pp.c:6392)
      TypeDecl: declname='DeferredPowerManagerP__0____nesc_sillytask_startTask', quals=[] (at pp.c:6392)
        IdentifierType: names=['int'] (at None)
      ID: name='DeferredPowerManagerP__0__startTask' (at pp.c:6392)
  Decl: name=None, quals=[], storage=[] (at pp.c:6400)
    Enum: name='DeferredPowerManagerP__0____nesc_unnamed4344' (at pp.c:6400)
      EnumeratorList:  (at pp.c:6402)
        Enumerator: name='DeferredPowerManagerP__0__timerTask' (at pp.c:6402)
          Constant: type='int', value='8U' (at pp.c:6402)
  Typedef: name='DeferredPowerManagerP__0____nesc_sillytask_timerTask', quals=[], storage=['typedef'] (at pp.c:6405)
    ArrayDecl:  (at pp.c:6405)
      TypeDecl: declname='DeferredPowerManagerP__0____nesc_sillytask_timerTask', quals=[] (at pp.c:6405)
        IdentifierType: names=['int'] (at None)
      ID: name='DeferredPowerManagerP__0__timerTask' (at pp.c:6405)
  Decl: name='DeferredPowerManagerP__0__stopping', quals=[], storage=[] (at pp.c:6407)
    TypeDecl: declname='DeferredPowerManagerP__0__stopping', quals=[] (at pp.c:6407)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:6407)
  Decl: name='DeferredPowerManagerP__0__requested', quals=[], storage=[] (at pp.c:6408)
    TypeDecl: declname='DeferredPowerManagerP__0__requested', quals=[] (at pp.c:6408)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:6408)
  Decl: name='DeferredPowerManagerP__0__stopTimer', quals=[], storage=[] (at pp.c:6409)
    TypeDecl: declname='DeferredPowerManagerP__0__stopTimer', quals=[] (at pp.c:6409)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:6409)
  Decl: name='DeferredPowerManagerP__0__startTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6411)
    FuncDecl: quals=None (at pp.c:6411)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__startTask__runTask', quals=[] (at pp.c:6411)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__timerTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6419)
    FuncDecl: quals=None (at pp.c:6419)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__timerTask__runTask', quals=[] (at pp.c:6419)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__ResourceDefaultOwner__requested', quals=[], storage=['inline', 'static'] (at pp.c:6423)
    FuncDecl: quals=None (at pp.c:6423)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__ResourceDefaultOwner__requested', quals=[] (at pp.c:6423)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__StdControl__default__start', quals=[], storage=['inline', 'static'] (at pp.c:6434)
    FuncDecl: quals=None (at pp.c:6434)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__StdControl__default__start', quals=[] (at pp.c:6434)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DeferredPowerManagerP__0__SplitControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:6442)
    FuncDecl: quals=None (at pp.c:6442)
      ParamList:  (at pp.c:6442)
        Decl: name='error', quals=[], storage=[] (at pp.c:6442)
          TypeDecl: declname='error', quals=[] (at pp.c:6442)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__SplitControl__startDone', quals=[] (at pp.c:6442)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__ResourceDefaultOwner__granted', quals=[], storage=['inline', 'static'] (at pp.c:6446)
    FuncDecl: quals=None (at pp.c:6446)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__ResourceDefaultOwner__granted', quals=[] (at pp.c:6446)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__TimerMilli__fired', quals=[], storage=['inline', 'static'] (at pp.c:6450)
    FuncDecl: quals=None (at pp.c:6450)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__TimerMilli__fired', quals=[] (at pp.c:6450)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__SplitControl__stopDone', quals=[], storage=['static'] (at pp.c:6452)
    FuncDecl: quals=None (at pp.c:6452)
      ParamList:  (at pp.c:6452)
        Decl: name='error', quals=[], storage=[] (at pp.c:6452)
          TypeDecl: declname='error', quals=[] (at pp.c:6452)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__SplitControl__stopDone', quals=[] (at pp.c:6452)
        IdentifierType: names=['void'] (at None)
  Decl: name='DeferredPowerManagerP__0__StdControl__default__stop', quals=[], storage=['inline', 'static'] (at pp.c:6463)
    FuncDecl: quals=None (at pp.c:6463)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__StdControl__default__stop', quals=[] (at pp.c:6463)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DeferredPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[], storage=['inline', 'static'] (at pp.c:6471)
    FuncDecl: quals=None (at pp.c:6471)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DeferredPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[] (at pp.c:6471)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__SpiPacket__send', quals=[], storage=['static'] (at pp.c:6473)
    FuncDecl: quals=None (at pp.c:6473)
      ParamList:  (at pp.c:6475)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:6475)
          PtrDecl: quals=[] (at pp.c:6475)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:6475)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:6477)
          PtrDecl: quals=[] (at pp.c:6477)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:6477)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6486)
          TypeDecl: declname='len', quals=[] (at pp.c:6486)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__SpiPacket__send', quals=[] (at pp.c:6473)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__SpiByte__write', quals=[], storage=['static'] (at pp.c:6488)
    FuncDecl: quals=None (at pp.c:6488)
      ParamList:  (at pp.c:6488)
        Decl: name='tx', quals=[], storage=[] (at pp.c:6488)
          TypeDecl: declname='tx', quals=[] (at pp.c:6488)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__SpiByte__write', quals=[] (at pp.c:6488)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pSpiP__CSN__makeOutput', quals=[], storage=['static'] (at pp.c:6490)
    FuncDecl: quals=None (at pp.c:6490)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__CSN__makeOutput', quals=[] (at pp.c:6490)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__CSN__set', quals=[], storage=['static'] (at pp.c:6492)
    FuncDecl: quals=None (at pp.c:6492)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__CSN__set', quals=[] (at pp.c:6492)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__CSN__clr', quals=[], storage=['static'] (at pp.c:6493)
    FuncDecl: quals=None (at pp.c:6493)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__CSN__clr', quals=[] (at pp.c:6493)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__Spi__sectorEraseDone', quals=[], storage=['static'] (at pp.c:6495)
    FuncDecl: quals=None (at pp.c:6495)
      ParamList:  (at pp.c:6495)
        Decl: name='sector', quals=[], storage=[] (at pp.c:6495)
          TypeDecl: declname='sector', quals=[] (at pp.c:6495)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6495)
          TypeDecl: declname='error', quals=[] (at pp.c:6495)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__sectorEraseDone', quals=[] (at pp.c:6495)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__Spi__readDone', quals=[], storage=['static'] (at pp.c:6497)
    FuncDecl: quals=None (at pp.c:6497)
      ParamList:  (at pp.c:6497)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6497)
          TypeDecl: declname='addr', quals=[] (at pp.c:6497)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6497)
          PtrDecl: quals=[] (at pp.c:6497)
            TypeDecl: declname='buf', quals=[] (at pp.c:6497)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6498)
          TypeDecl: declname='len', quals=[] (at pp.c:6498)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6498)
          TypeDecl: declname='error', quals=[] (at pp.c:6498)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__readDone', quals=[] (at pp.c:6497)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__Spi__pageProgramDone', quals=[], storage=['static'] (at pp.c:6500)
    FuncDecl: quals=None (at pp.c:6500)
      ParamList:  (at pp.c:6500)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6500)
          TypeDecl: declname='addr', quals=[] (at pp.c:6500)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6500)
          PtrDecl: quals=[] (at pp.c:6500)
            TypeDecl: declname='buf', quals=[] (at pp.c:6500)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6501)
          TypeDecl: declname='len', quals=[] (at pp.c:6501)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6501)
          TypeDecl: declname='error', quals=[] (at pp.c:6501)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__pageProgramDone', quals=[] (at pp.c:6500)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__Spi__computeCrcDone', quals=[], storage=['static'] (at pp.c:6503)
    FuncDecl: quals=None (at pp.c:6503)
      ParamList:  (at pp.c:6503)
        Decl: name='crc', quals=[], storage=[] (at pp.c:6503)
          TypeDecl: declname='crc', quals=[] (at pp.c:6503)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6503)
          TypeDecl: declname='addr', quals=[] (at pp.c:6503)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6504)
          TypeDecl: declname='len', quals=[] (at pp.c:6504)
            IdentifierType: names=['stm25p_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6504)
          TypeDecl: declname='error', quals=[] (at pp.c:6504)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__computeCrcDone', quals=[] (at pp.c:6503)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__Spi__bulkEraseDone', quals=[], storage=['static'] (at pp.c:6506)
    FuncDecl: quals=None (at pp.c:6506)
      ParamList:  (at pp.c:6506)
        Decl: name='error', quals=[], storage=[] (at pp.c:6506)
          TypeDecl: declname='error', quals=[] (at pp.c:6506)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__bulkEraseDone', quals=[] (at pp.c:6506)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__SpiResource__release', quals=[], storage=['static'] (at pp.c:6508)
    FuncDecl: quals=None (at pp.c:6508)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__SpiResource__release', quals=[] (at pp.c:6508)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__SpiResource__request', quals=[], storage=['static'] (at pp.c:6510)
    FuncDecl: quals=None (at pp.c:6510)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__SpiResource__request', quals=[] (at pp.c:6510)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__ClientResource__granted', quals=[], storage=['static'] (at pp.c:6512)
    FuncDecl: quals=None (at pp.c:6512)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__ClientResource__granted', quals=[] (at pp.c:6512)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__Hold__makeOutput', quals=[], storage=['static'] (at pp.c:6514)
    FuncDecl: quals=None (at pp.c:6514)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__Hold__makeOutput', quals=[] (at pp.c:6514)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__Hold__set', quals=[], storage=['static'] (at pp.c:6516)
    FuncDecl: quals=None (at pp.c:6516)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__Hold__set', quals=[] (at pp.c:6516)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:6518)
    Enum: name='Stm25pSpiP____nesc_unnamed4345' (at pp.c:6518)
      EnumeratorList:  (at pp.c:6519)
        Enumerator: name='Stm25pSpiP__CRC_BUF_SIZE' (at pp.c:6519)
          Constant: type='int', value='16' (at pp.c:6519)
  Typedef: name='Stm25pSpiP__stm25p_cmd_t', quals=[], storage=['typedef'] (at pp.c:6539)
    TypeDecl: declname='Stm25pSpiP__stm25p_cmd_t', quals=[] (at pp.c:6539)
      Enum: name='Stm25pSpiP____nesc_unnamed4346' (at pp.c:6531)
        EnumeratorList:  (at pp.c:6532)
          Enumerator: name='Stm25pSpiP__S_READ' (at pp.c:6532)
            Constant: type='int', value='0x3' (at pp.c:6532)
          Enumerator: name='Stm25pSpiP__S_PAGE_PROGRAM' (at pp.c:6533)
            Constant: type='int', value='0x2' (at pp.c:6533)
          Enumerator: name='Stm25pSpiP__S_SECTOR_ERASE' (at pp.c:6534)
            Constant: type='int', value='0xd8' (at pp.c:6534)
          Enumerator: name='Stm25pSpiP__S_BULK_ERASE' (at pp.c:6535)
            Constant: type='int', value='0xc7' (at pp.c:6535)
          Enumerator: name='Stm25pSpiP__S_WRITE_ENABLE' (at pp.c:6536)
            Constant: type='int', value='0x6' (at pp.c:6536)
          Enumerator: name='Stm25pSpiP__S_POWER_ON' (at pp.c:6537)
            Constant: type='int', value='0xab' (at pp.c:6537)
          Enumerator: name='Stm25pSpiP__S_DEEP_SLEEP' (at pp.c:6538)
            Constant: type='int', value='0xb9' (at pp.c:6538)
  Decl: name='Stm25pSpiP__m_cmd', quals=[], storage=[] (at pp.c:6541)
    ArrayDecl:  (at pp.c:6541)
      TypeDecl: declname='Stm25pSpiP__m_cmd', quals=[] (at pp.c:6541)
        IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='4' (at pp.c:6541)
  Decl: name='Stm25pSpiP__m_is_writing', quals=[], storage=[] (at pp.c:6543)
    TypeDecl: declname='Stm25pSpiP__m_is_writing', quals=[] (at pp.c:6543)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:6543)
  Decl: name='Stm25pSpiP__m_computing_crc', quals=[], storage=[] (at pp.c:6544)
    TypeDecl: declname='Stm25pSpiP__m_computing_crc', quals=[] (at pp.c:6544)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:6544)
  Decl: name='Stm25pSpiP__m_addr', quals=[], storage=[] (at pp.c:6546)
    TypeDecl: declname='Stm25pSpiP__m_addr', quals=[] (at pp.c:6546)
      IdentifierType: names=['stm25p_addr_t'] (at None)
  Decl: name='Stm25pSpiP__m_buf', quals=[], storage=[] (at pp.c:6547)
    PtrDecl: quals=[] (at pp.c:6547)
      TypeDecl: declname='Stm25pSpiP__m_buf', quals=[] (at pp.c:6547)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pSpiP__m_len', quals=[], storage=[] (at pp.c:6548)
    TypeDecl: declname='Stm25pSpiP__m_len', quals=[] (at pp.c:6548)
      IdentifierType: names=['stm25p_len_t'] (at None)
  Decl: name='Stm25pSpiP__m_cur_addr', quals=[], storage=[] (at pp.c:6549)
    TypeDecl: declname='Stm25pSpiP__m_cur_addr', quals=[] (at pp.c:6549)
      IdentifierType: names=['stm25p_addr_t'] (at None)
  Decl: name='Stm25pSpiP__m_cur_len', quals=[], storage=[] (at pp.c:6550)
    TypeDecl: declname='Stm25pSpiP__m_cur_len', quals=[] (at pp.c:6550)
      IdentifierType: names=['stm25p_len_t'] (at None)
  Decl: name='Stm25pSpiP__m_crc_buf', quals=[], storage=[] (at pp.c:6551)
    ArrayDecl:  (at pp.c:6551)
      TypeDecl: declname='Stm25pSpiP__m_crc_buf', quals=[] (at pp.c:6551)
        IdentifierType: names=['uint8_t'] (at None)
      ID: name='Stm25pSpiP__CRC_BUF_SIZE' (at pp.c:6551)
  Decl: name='Stm25pSpiP__m_crc', quals=[], storage=[] (at pp.c:6552)
    TypeDecl: declname='Stm25pSpiP__m_crc', quals=[] (at pp.c:6552)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Stm25pSpiP__newRequest', quals=[], storage=['static'] (at pp.c:6554)
    FuncDecl: quals=None (at pp.c:6554)
      ParamList:  (at pp.c:6554)
        Decl: name='write', quals=[], storage=[] (at pp.c:6554)
          TypeDecl: declname='write', quals=[] (at pp.c:6554)
            IdentifierType: names=['bool'] (at None)
        Decl: name='cmd_len', quals=[], storage=[] (at pp.c:6554)
          TypeDecl: declname='cmd_len', quals=[] (at pp.c:6554)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__newRequest', quals=[] (at pp.c:6554)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__signalDone', quals=[], storage=['static'] (at pp.c:6555)
    FuncDecl: quals=None (at pp.c:6555)
      ParamList:  (at pp.c:6555)
        Decl: name='error', quals=[], storage=[] (at pp.c:6555)
          TypeDecl: declname='error', quals=[] (at pp.c:6555)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__signalDone', quals=[] (at pp.c:6555)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__sendCmd', quals=[], storage=['static'] (at pp.c:6557)
    FuncDecl: quals=None (at pp.c:6557)
      ParamList:  (at pp.c:6557)
        Decl: name='cmd', quals=[], storage=[] (at pp.c:6557)
          TypeDecl: declname='cmd', quals=[] (at pp.c:6557)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6557)
          TypeDecl: declname='len', quals=[] (at pp.c:6557)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__sendCmd', quals=[] (at pp.c:6557)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Stm25pSpiP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:6559)
    FuncDecl: quals=None (at pp.c:6559)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__Init__init', quals=[] (at pp.c:6559)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__ClientResource__request', quals=[], storage=['inline', 'static'] (at pp.c:6567)
    FuncDecl: quals=None (at pp.c:6567)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__ClientResource__request', quals=[] (at pp.c:6567)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__ClientResource__release', quals=[], storage=['inline', 'static'] (at pp.c:6575)
    FuncDecl: quals=None (at pp.c:6575)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__ClientResource__release', quals=[] (at pp.c:6575)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__calcReadLen', quals=[], storage=['inline', 'static'] (at pp.c:6583)
    FuncDecl: quals=None (at pp.c:6583)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__calcReadLen', quals=[] (at pp.c:6583)
        IdentifierType: names=['stm25p_len_t'] (at None)
  Decl: name='Stm25pSpiP__Spi__powerDown', quals=[], storage=['inline', 'static'] (at pp.c:6587)
    FuncDecl: quals=None (at pp.c:6587)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__powerDown', quals=[] (at pp.c:6587)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__Spi__powerUp', quals=[], storage=['inline', 'static'] (at pp.c:6592)
    FuncDecl: quals=None (at pp.c:6592)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__powerUp', quals=[] (at pp.c:6592)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__Spi__read', quals=[], storage=['inline', 'static'] (at pp.c:6597)
    FuncDecl: quals=None (at pp.c:6597)
      ParamList:  (at pp.c:6597)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6597)
          TypeDecl: declname='addr', quals=[] (at pp.c:6597)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6597)
          PtrDecl: quals=[] (at pp.c:6597)
            TypeDecl: declname='buf', quals=[] (at pp.c:6597)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6598)
          TypeDecl: declname='len', quals=[] (at pp.c:6598)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__read', quals=[] (at pp.c:6597)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__Spi__pageProgram', quals=[], storage=['static'] (at pp.c:6600)
    FuncDecl: quals=None (at pp.c:6600)
      ParamList:  (at pp.c:6600)
        Decl: name='addr', quals=[], storage=[] (at pp.c:6600)
          TypeDecl: declname='addr', quals=[] (at pp.c:6600)
            IdentifierType: names=['stm25p_addr_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:6600)
          PtrDecl: quals=[] (at pp.c:6600)
            TypeDecl: declname='buf', quals=[] (at pp.c:6600)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6601)
          TypeDecl: declname='len', quals=[] (at pp.c:6601)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__pageProgram', quals=[] (at pp.c:6600)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__Spi__sectorErase', quals=[], storage=['static'] (at pp.c:6609)
    FuncDecl: quals=None (at pp.c:6609)
      ParamList:  (at pp.c:6609)
        Decl: name='sector', quals=[], storage=[] (at pp.c:6609)
          TypeDecl: declname='sector', quals=[] (at pp.c:6609)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__Spi__sectorErase', quals=[] (at pp.c:6609)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__newRequest', quals=[], storage=['static'] (at pp.c:6620)
    FuncDecl: quals=None (at pp.c:6620)
      ParamList:  (at pp.c:6620)
        Decl: name='write', quals=[], storage=[] (at pp.c:6620)
          TypeDecl: declname='write', quals=[] (at pp.c:6620)
            IdentifierType: names=['bool'] (at None)
        Decl: name='cmd_len', quals=[], storage=[] (at pp.c:6620)
          TypeDecl: declname='cmd_len', quals=[] (at pp.c:6620)
            IdentifierType: names=['stm25p_len_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__newRequest', quals=[] (at pp.c:6620)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Stm25pSpiP__releaseAndRequest', quals=[], storage=['static'] (at pp.c:6631)
    FuncDecl: quals=None (at pp.c:6631)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__releaseAndRequest', quals=[] (at pp.c:6631)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:6636)
    FuncDecl: quals=None (at pp.c:6636)
      ParamList:  (at pp.c:6636)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:6636)
          PtrDecl: quals=[] (at pp.c:6636)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:6636)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:6636)
          PtrDecl: quals=[] (at pp.c:6636)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:6636)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6637)
          TypeDecl: declname='len', quals=[] (at pp.c:6637)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6637)
          TypeDecl: declname='error', quals=[] (at pp.c:6637)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__SpiPacket__sendDone', quals=[] (at pp.c:6636)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:6639)
    FuncDecl: quals=None (at pp.c:6639)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pSpiP__SpiResource__granted', quals=[] (at pp.c:6639)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pSpiP__signalDone', quals=[], storage=['static'] (at pp.c:6650)
    FuncDecl: quals=None (at pp.c:6650)
      ParamList:  (at pp.c:6650)
        Decl: name='error', quals=[], storage=[] (at pp.c:6650)
          TypeDecl: declname='error', quals=[] (at pp.c:6650)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Stm25pSpiP__signalDone', quals=[] (at pp.c:6650)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:6652)
    FuncDecl: quals=None (at pp.c:6652)
      ParamList:  (at pp.c:6654)
        Decl: name='arg_0x101c3b158', quals=[], storage=[] (at pp.c:6654)
          TypeDecl: declname='arg_0x101c3b158', quals=[] (at pp.c:6654)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:6656)
          PtrDecl: quals=[] (at pp.c:6656)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:6656)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:6657)
          PtrDecl: quals=[] (at pp.c:6657)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:6657)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6663)
          TypeDecl: declname='len', quals=[] (at pp.c:6663)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6664)
          TypeDecl: declname='error', quals=[] (at pp.c:6664)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__sendDone', quals=[] (at pp.c:6652)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__getConfig', quals=[], storage=['static'] (at pp.c:6666)
    FuncDecl: quals=None (at pp.c:6666)
      ParamList:  (at pp.c:6668)
        Decl: name='arg_0x101c38220', quals=[], storage=[] (at pp.c:6668)
          TypeDecl: declname='arg_0x101c38220', quals=[] (at pp.c:6668)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:6666)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Msp430SpiConfigure__getConfig', quals=[] (at pp.c:6666)
          IdentifierType: names=['msp430_spi_union_config_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__enableRxIntr', quals=[], storage=['static'] (at pp.c:6670)
    FuncDecl: quals=None (at pp.c:6670)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__enableRxIntr', quals=[] (at pp.c:6670)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__clrRxIntr', quals=[], storage=['static'] (at pp.c:6672)
    FuncDecl: quals=None (at pp.c:6672)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__clrRxIntr', quals=[] (at pp.c:6672)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__resetUsart', quals=[], storage=['static'] (at pp.c:6674)
    FuncDecl: quals=None (at pp.c:6674)
      ParamList:  (at pp.c:6674)
        Decl: name='reset', quals=[], storage=[] (at pp.c:6674)
          TypeDecl: declname='reset', quals=[] (at pp.c:6674)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__resetUsart', quals=[] (at pp.c:6674)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__disableRxIntr', quals=[], storage=['static'] (at pp.c:6676)
    FuncDecl: quals=None (at pp.c:6676)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__disableRxIntr', quals=[] (at pp.c:6676)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__tx', quals=[], storage=['static'] (at pp.c:6678)
    FuncDecl: quals=None (at pp.c:6678)
      ParamList:  (at pp.c:6678)
        Decl: name='data', quals=[], storage=[] (at pp.c:6678)
          TypeDecl: declname='data', quals=[] (at pp.c:6678)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__tx', quals=[] (at pp.c:6678)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__setModeSpi', quals=[], storage=['static'] (at pp.c:6680)
    FuncDecl: quals=None (at pp.c:6680)
      ParamList:  (at pp.c:6680)
        Decl: name='config', quals=[], storage=[] (at pp.c:6680)
          PtrDecl: quals=[] (at pp.c:6680)
            TypeDecl: declname='config', quals=[] (at pp.c:6680)
              IdentifierType: names=['msp430_spi_union_config_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__setModeSpi', quals=[] (at pp.c:6680)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__rx', quals=[], storage=['static'] (at pp.c:6682)
    FuncDecl: quals=None (at pp.c:6682)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__rx', quals=[] (at pp.c:6682)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__isRxIntrPending', quals=[], storage=['static'] (at pp.c:6684)
    FuncDecl: quals=None (at pp.c:6684)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__isRxIntrPending', quals=[] (at pp.c:6684)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:6686)
    FuncDecl: quals=None (at pp.c:6686)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__disableSpi', quals=[] (at pp.c:6686)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__release', quals=[], storage=['static'] (at pp.c:6688)
    FuncDecl: quals=None (at pp.c:6688)
      ParamList:  (at pp.c:6690)
        Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:6690)
          TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:6690)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__release', quals=[] (at pp.c:6688)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__immediateRequest', quals=[], storage=['static'] (at pp.c:6692)
    FuncDecl: quals=None (at pp.c:6692)
      ParamList:  (at pp.c:6694)
        Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:6694)
          TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:6694)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__immediateRequest', quals=[] (at pp.c:6692)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__request', quals=[], storage=['static'] (at pp.c:6696)
    FuncDecl: quals=None (at pp.c:6696)
      ParamList:  (at pp.c:6698)
        Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:6698)
          TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:6698)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__request', quals=[] (at pp.c:6696)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__isOwner', quals=[], storage=['static'] (at pp.c:6700)
    FuncDecl: quals=None (at pp.c:6700)
      ParamList:  (at pp.c:6702)
        Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:6702)
          TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:6702)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__isOwner', quals=[] (at pp.c:6700)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__granted', quals=[], storage=['static'] (at pp.c:6704)
    FuncDecl: quals=None (at pp.c:6704)
      ParamList:  (at pp.c:6706)
        Decl: name='arg_0x101c3e020', quals=[], storage=[] (at pp.c:6706)
          TypeDecl: declname='arg_0x101c3e020', quals=[] (at pp.c:6706)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__granted', quals=[] (at pp.c:6704)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__signalDone_task__postTask', quals=[], storage=['static'] (at pp.c:6708)
    FuncDecl: quals=None (at pp.c:6708)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone_task__postTask', quals=[] (at pp.c:6708)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:6710)
    Enum: name='Msp430SpiNoDmaP__0____nesc_unnamed4347' (at pp.c:6710)
      EnumeratorList:  (at pp.c:6712)
        Enumerator: name='Msp430SpiNoDmaP__0__signalDone_task' (at pp.c:6712)
          Constant: type='int', value='9U' (at pp.c:6712)
  Typedef: name='Msp430SpiNoDmaP__0____nesc_sillytask_signalDone_task', quals=[], storage=['typedef'] (at pp.c:6715)
    ArrayDecl:  (at pp.c:6715)
      TypeDecl: declname='Msp430SpiNoDmaP__0____nesc_sillytask_signalDone_task', quals=[] (at pp.c:6715)
        IdentifierType: names=['int'] (at None)
      ID: name='Msp430SpiNoDmaP__0__signalDone_task' (at pp.c:6715)
  Decl: name=None, quals=[], storage=[] (at pp.c:6717)
    Enum: name='Msp430SpiNoDmaP__0____nesc_unnamed4348' (at pp.c:6717)
      EnumeratorList:  (at pp.c:6718)
        Enumerator: name='Msp430SpiNoDmaP__0__SPI_ATOMIC_SIZE' (at pp.c:6718)
          Constant: type='int', value='2' (at pp.c:6718)
  Decl: name='Msp430SpiNoDmaP__0__m_len', quals=[], storage=[] (at pp.c:6721)
    TypeDecl: declname='Msp430SpiNoDmaP__0__m_len', quals=[] (at pp.c:6721)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__m_tx_buf', quals=[], storage=[] (at pp.c:6722)
    PtrDecl: quals=[] (at pp.c:6722)
      TypeDecl: declname='Msp430SpiNoDmaP__0__m_tx_buf', quals=[] (at pp.c:6722)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__m_rx_buf', quals=[], storage=[] (at pp.c:6723)
    PtrDecl: quals=[] (at pp.c:6723)
      TypeDecl: declname='Msp430SpiNoDmaP__0__m_rx_buf', quals=[] (at pp.c:6723)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__m_pos', quals=[], storage=[] (at pp.c:6724)
    TypeDecl: declname='Msp430SpiNoDmaP__0__m_pos', quals=[] (at pp.c:6724)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__m_client', quals=[], storage=[] (at pp.c:6725)
    TypeDecl: declname='Msp430SpiNoDmaP__0__m_client', quals=[] (at pp.c:6725)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__signalDone', quals=[], storage=['inline', 'static'] (at pp.c:6727)
    FuncDecl: quals=None (at pp.c:6727)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone', quals=[] (at pp.c:6727)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:6730)
    FuncDecl: quals=None (at pp.c:6730)
      ParamList:  (at pp.c:6730)
        Decl: name='id', quals=[], storage=[] (at pp.c:6730)
          TypeDecl: declname='id', quals=[] (at pp.c:6730)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[] (at pp.c:6730)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:6734)
    FuncDecl: quals=None (at pp.c:6734)
      ParamList:  (at pp.c:6734)
        Decl: name='id', quals=[], storage=[] (at pp.c:6734)
          TypeDecl: declname='id', quals=[] (at pp.c:6734)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__request', quals=[] (at pp.c:6734)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:6738)
    FuncDecl: quals=None (at pp.c:6738)
      ParamList:  (at pp.c:6738)
        Decl: name='id', quals=[], storage=[] (at pp.c:6738)
          TypeDecl: declname='id', quals=[] (at pp.c:6738)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[] (at pp.c:6738)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:6742)
    FuncDecl: quals=None (at pp.c:6742)
      ParamList:  (at pp.c:6742)
        Decl: name='id', quals=[], storage=[] (at pp.c:6742)
          TypeDecl: declname='id', quals=[] (at pp.c:6742)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__release', quals=[] (at pp.c:6742)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[], storage=['inline', 'static'] (at pp.c:6746)
    FuncDecl: quals=None (at pp.c:6746)
      ParamList:  (at pp.c:6746)
        Decl: name='id', quals=[], storage=[] (at pp.c:6746)
          TypeDecl: declname='id', quals=[] (at pp.c:6746)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[] (at pp.c:6746)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:6750)
    FuncDecl: quals=None (at pp.c:6750)
      ParamList:  (at pp.c:6750)
        Decl: name='id', quals=[], storage=[] (at pp.c:6750)
          TypeDecl: declname='id', quals=[] (at pp.c:6750)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:6750)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:6756)
    FuncDecl: quals=None (at pp.c:6756)
      ParamList:  (at pp.c:6756)
        Decl: name='id', quals=[], storage=[] (at pp.c:6756)
          TypeDecl: declname='id', quals=[] (at pp.c:6756)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[] (at pp.c:6756)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiByte__write', quals=[], storage=['static'] (at pp.c:6760)
    FuncDecl: quals=None (at pp.c:6760)
      ParamList:  (at pp.c:6760)
        Decl: name='tx', quals=[], storage=[] (at pp.c:6760)
          TypeDecl: declname='tx', quals=[] (at pp.c:6760)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiByte__write', quals=[] (at pp.c:6760)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:6762)
    FuncDecl: quals=None (at pp.c:6762)
      ParamList:  (at pp.c:6762)
        Decl: name='id', quals=[], storage=[] (at pp.c:6762)
          TypeDecl: declname='id', quals=[] (at pp.c:6762)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[] (at pp.c:6762)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[], storage=['inline', 'static'] (at pp.c:6763)
    FuncDecl: quals=None (at pp.c:6763)
      ParamList:  (at pp.c:6763)
        Decl: name='id', quals=[], storage=[] (at pp.c:6763)
          TypeDecl: declname='id', quals=[] (at pp.c:6763)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[] (at pp.c:6763)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:6764)
    FuncDecl: quals=None (at pp.c:6764)
      ParamList:  (at pp.c:6764)
        Decl: name='id', quals=[], storage=[] (at pp.c:6764)
          TypeDecl: declname='id', quals=[] (at pp.c:6764)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[] (at pp.c:6764)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[], storage=['inline', 'static'] (at pp.c:6765)
    FuncDecl: quals=None (at pp.c:6765)
      ParamList:  (at pp.c:6765)
        Decl: name='id', quals=[], storage=[] (at pp.c:6765)
          TypeDecl: declname='id', quals=[] (at pp.c:6765)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[] (at pp.c:6765)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[], storage=['inline', 'static'] (at pp.c:6766)
    FuncDecl: quals=None (at pp.c:6766)
      ParamList:  (at pp.c:6766)
        Decl: name='id', quals=[], storage=[] (at pp.c:6766)
          TypeDecl: declname='id', quals=[] (at pp.c:6766)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:6766)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[] (at pp.c:6766)
          IdentifierType: names=['msp430_spi_union_config_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:6770)
    FuncDecl: quals=None (at pp.c:6770)
      ParamList:  (at pp.c:6770)
        Decl: name='id', quals=[], storage=[] (at pp.c:6770)
          TypeDecl: declname='id', quals=[] (at pp.c:6770)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[] (at pp.c:6770)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__continueOp', quals=[], storage=['static'] (at pp.c:6772)
    FuncDecl: quals=None (at pp.c:6772)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__continueOp', quals=[] (at pp.c:6772)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[], storage=['static'] (at pp.c:6774)
    FuncDecl: quals=None (at pp.c:6774)
      ParamList:  (at pp.c:6774)
        Decl: name='id', quals=[], storage=[] (at pp.c:6774)
          TypeDecl: declname='id', quals=[] (at pp.c:6774)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:6774)
          PtrDecl: quals=[] (at pp.c:6774)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:6774)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:6775)
          PtrDecl: quals=[] (at pp.c:6775)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:6775)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6776)
          TypeDecl: declname='len', quals=[] (at pp.c:6776)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[] (at pp.c:6774)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:6778)
    FuncDecl: quals=None (at pp.c:6778)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[] (at pp.c:6778)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[], storage=['static'] (at pp.c:6782)
    FuncDecl: quals=None (at pp.c:6782)
      ParamList:  (at pp.c:6782)
        Decl: name='data', quals=[], storage=[] (at pp.c:6782)
          TypeDecl: declname='data', quals=[] (at pp.c:6782)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[] (at pp.c:6782)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__signalDone', quals=[], storage=['inline', 'static'] (at pp.c:6784)
    FuncDecl: quals=None (at pp.c:6784)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone', quals=[] (at pp.c:6784)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:6789)
    FuncDecl: quals=None (at pp.c:6789)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[] (at pp.c:6789)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:6791)
    FuncDecl: quals=None (at pp.c:6791)
      ParamList:  (at pp.c:6791)
        Decl: name='id', quals=[], storage=[] (at pp.c:6791)
          TypeDecl: declname='id', quals=[] (at pp.c:6791)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:6791)
          PtrDecl: quals=[] (at pp.c:6791)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:6791)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:6791)
          PtrDecl: quals=[] (at pp.c:6791)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:6791)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:6791)
          TypeDecl: declname='len', quals=[] (at pp.c:6791)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:6791)
          TypeDecl: declname='error', quals=[] (at pp.c:6791)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[] (at pp.c:6791)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__UCLK__selectIOFunc', quals=[], storage=['static'] (at pp.c:6793)
    FuncDecl: quals=None (at pp.c:6793)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__UCLK__selectIOFunc', quals=[] (at pp.c:6793)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__UCLK__selectModuleFunc', quals=[], storage=['static'] (at pp.c:6795)
    FuncDecl: quals=None (at pp.c:6795)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__UCLK__selectModuleFunc', quals=[] (at pp.c:6795)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Interrupts__rxDone', quals=[], storage=['static'] (at pp.c:6797)
    FuncDecl: quals=None (at pp.c:6797)
      ParamList:  (at pp.c:6797)
        Decl: name='data', quals=[], storage=[] (at pp.c:6797)
          TypeDecl: declname='data', quals=[] (at pp.c:6797)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Interrupts__rxDone', quals=[] (at pp.c:6797)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Interrupts__txDone', quals=[], storage=['static'] (at pp.c:6799)
    FuncDecl: quals=None (at pp.c:6799)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Interrupts__txDone', quals=[] (at pp.c:6799)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__URXD__selectIOFunc', quals=[], storage=['static'] (at pp.c:6801)
    FuncDecl: quals=None (at pp.c:6801)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__URXD__selectIOFunc', quals=[] (at pp.c:6801)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__UTXD__selectIOFunc', quals=[], storage=['static'] (at pp.c:6803)
    FuncDecl: quals=None (at pp.c:6803)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__UTXD__selectIOFunc', quals=[] (at pp.c:6803)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__HplI2C__clearModeI2C', quals=[], storage=['static'] (at pp.c:6805)
    FuncDecl: quals=None (at pp.c:6805)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__HplI2C__clearModeI2C', quals=[] (at pp.c:6805)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__HplI2C__isI2C', quals=[], storage=['static'] (at pp.c:6807)
    FuncDecl: quals=None (at pp.c:6807)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__HplI2C__isI2C', quals=[] (at pp.c:6807)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430Usart0P__SOMI__selectIOFunc', quals=[], storage=['static'] (at pp.c:6809)
    FuncDecl: quals=None (at pp.c:6809)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__SOMI__selectIOFunc', quals=[] (at pp.c:6809)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__SOMI__selectModuleFunc', quals=[], storage=['static'] (at pp.c:6811)
    FuncDecl: quals=None (at pp.c:6811)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__SOMI__selectModuleFunc', quals=[] (at pp.c:6811)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__I2CInterrupts__fired', quals=[], storage=['static'] (at pp.c:6813)
    FuncDecl: quals=None (at pp.c:6813)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__I2CInterrupts__fired', quals=[] (at pp.c:6813)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__SIMO__selectIOFunc', quals=[], storage=['static'] (at pp.c:6815)
    FuncDecl: quals=None (at pp.c:6815)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__SIMO__selectIOFunc', quals=[] (at pp.c:6815)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__SIMO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:6817)
    FuncDecl: quals=None (at pp.c:6817)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__SIMO__selectModuleFunc', quals=[] (at pp.c:6817)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__IE1@"0x0000"', quals=['volatile'], storage=['static'] (at pp.c:6819)
    TypeDecl: declname='HplMsp430Usart0P__IE1@"0x0000"', quals=['volatile'] (at pp.c:6819)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart0P__ME1@"0x0004"', quals=['volatile'], storage=['static'] (at pp.c:6820)
    TypeDecl: declname='HplMsp430Usart0P__ME1@"0x0004"', quals=['volatile'] (at pp.c:6820)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart0P__IFG1@"0x0002"', quals=['volatile'], storage=['static'] (at pp.c:6821)
    TypeDecl: declname='HplMsp430Usart0P__IFG1@"0x0002"', quals=['volatile'] (at pp.c:6821)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart0P__U0TCTL@"0x0071"', quals=['volatile'], storage=['static'] (at pp.c:6822)
    TypeDecl: declname='HplMsp430Usart0P__U0TCTL@"0x0071"', quals=['volatile'] (at pp.c:6822)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430Usart0P__U0TXBUF@"0x0077"', quals=['volatile'], storage=['static'] (at pp.c:6824)
    TypeDecl: declname='HplMsp430Usart0P__U0TXBUF@"0x0077"', quals=['volatile'] (at pp.c:6824)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='sig_UART0RX_VECTOR', quals=[], storage=[] (at pp.c:6826)
    FuncDecl: quals=None (at pp.c:6826)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_UART0RX_VECTOR', quals=[] (at pp.c:6826)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_UART0TX_VECTOR', quals=[], storage=[] (at pp.c:6831)
    FuncDecl: quals=None (at pp.c:6831)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_UART0TX_VECTOR', quals=[] (at pp.c:6831)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setUbr', quals=[], storage=['inline', 'static'] (at pp.c:6833)
    FuncDecl: quals=None (at pp.c:6833)
      ParamList:  (at pp.c:6833)
        Decl: name='control', quals=[], storage=[] (at pp.c:6833)
          TypeDecl: declname='control', quals=[] (at pp.c:6833)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setUbr', quals=[] (at pp.c:6833)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setUmctl', quals=[], storage=['inline', 'static'] (at pp.c:6844)
    FuncDecl: quals=None (at pp.c:6844)
      ParamList:  (at pp.c:6844)
        Decl: name='control', quals=[], storage=[] (at pp.c:6844)
          TypeDecl: declname='control', quals=[] (at pp.c:6844)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setUmctl', quals=[] (at pp.c:6844)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__resetUsart', quals=[], storage=['inline', 'static'] (at pp.c:6852)
    FuncDecl: quals=None (at pp.c:6852)
      ParamList:  (at pp.c:6852)
        Decl: name='reset', quals=[], storage=[] (at pp.c:6852)
          TypeDecl: declname='reset', quals=[] (at pp.c:6852)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__resetUsart', quals=[] (at pp.c:6852)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableUart', quals=[], storage=['inline', 'static'] (at pp.c:6854)
    FuncDecl: quals=None (at pp.c:6854)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableUart', quals=[] (at pp.c:6854)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__enableSpi', quals=[], storage=['inline', 'static'] (at pp.c:6856)
    FuncDecl: quals=None (at pp.c:6856)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__enableSpi', quals=[] (at pp.c:6856)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:6865)
    FuncDecl: quals=None (at pp.c:6865)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableSpi', quals=[] (at pp.c:6865)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__configSpi', quals=[], storage=['inline', 'static'] (at pp.c:6874)
    FuncDecl: quals=None (at pp.c:6874)
      ParamList:  (at pp.c:6874)
        Decl: name='config', quals=[], storage=[] (at pp.c:6874)
          PtrDecl: quals=[] (at pp.c:6874)
            TypeDecl: declname='config', quals=[] (at pp.c:6874)
              IdentifierType: names=['msp430_spi_union_config_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__configSpi', quals=[] (at pp.c:6874)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__setModeSpi', quals=[], storage=['static'] (at pp.c:6883)
    FuncDecl: quals=None (at pp.c:6883)
      ParamList:  (at pp.c:6883)
        Decl: name='config', quals=[], storage=[] (at pp.c:6883)
          PtrDecl: quals=[] (at pp.c:6883)
            TypeDecl: declname='config', quals=[] (at pp.c:6883)
              IdentifierType: names=['msp430_spi_union_config_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__setModeSpi', quals=[] (at pp.c:6883)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[], storage=['inline', 'static'] (at pp.c:6885)
    FuncDecl: quals=None (at pp.c:6885)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[] (at pp.c:6885)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__clrRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:6896)
    FuncDecl: quals=None (at pp.c:6896)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__clrRxIntr', quals=[] (at pp.c:6896)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__clrIntr', quals=[], storage=['inline', 'static'] (at pp.c:6900)
    FuncDecl: quals=None (at pp.c:6900)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__clrIntr', quals=[] (at pp.c:6900)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:6904)
    FuncDecl: quals=None (at pp.c:6904)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableRxIntr', quals=[] (at pp.c:6904)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__disableIntr', quals=[], storage=['inline', 'static'] (at pp.c:6912)
    FuncDecl: quals=None (at pp.c:6912)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__disableIntr', quals=[] (at pp.c:6912)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__enableRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:6916)
    FuncDecl: quals=None (at pp.c:6916)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__enableRxIntr', quals=[] (at pp.c:6916)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__tx', quals=[], storage=['inline', 'static'] (at pp.c:6918)
    FuncDecl: quals=None (at pp.c:6918)
      ParamList:  (at pp.c:6918)
        Decl: name='data', quals=[], storage=[] (at pp.c:6918)
          TypeDecl: declname='data', quals=[] (at pp.c:6918)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__tx', quals=[] (at pp.c:6918)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430Usart0P__Usart__rx', quals=[], storage=['inline', 'static'] (at pp.c:6922)
    FuncDecl: quals=None (at pp.c:6922)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430Usart0P__Usart__rx', quals=[] (at pp.c:6922)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__0__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:6924)
    FuncDecl: quals=None (at pp.c:6924)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__0__IO__getRaw', quals=[] (at pp.c:6924)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__0__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:6925)
    FuncDecl: quals=None (at pp.c:6925)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__0__IO__get', quals=[] (at pp.c:6925)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__3__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:6927)
    FuncDecl: quals=None (at pp.c:6927)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__3__IO__getRaw', quals=[] (at pp.c:6927)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__3__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:6928)
    FuncDecl: quals=None (at pp.c:6928)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__3__IO__get', quals=[] (at pp.c:6928)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:6930)
    FuncDecl: quals=None (at pp.c:6930)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__getRaw', quals=[] (at pp.c:6930)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:6931)
    FuncDecl: quals=None (at pp.c:6931)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__get', quals=[] (at pp.c:6931)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__4__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:6932)
    FuncDecl: quals=None (at pp.c:6932)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__4__IO__makeInput', quals=[] (at pp.c:6932)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:6934)
    FuncDecl: quals=None (at pp.c:6934)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__clr', quals=[] (at pp.c:6934)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:6936)
    FuncDecl: quals=None (at pp.c:6936)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__getRaw', quals=[] (at pp.c:6936)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:6937)
    FuncDecl: quals=None (at pp.c:6937)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__get', quals=[] (at pp.c:6937)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:6938)
    FuncDecl: quals=None (at pp.c:6938)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeInput', quals=[] (at pp.c:6938)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:6940)
    FuncDecl: quals=None (at pp.c:6940)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[] (at pp.c:6940)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:6942)
    FuncDecl: quals=None (at pp.c:6942)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[] (at pp.c:6942)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:6944)
    FuncDecl: quals=None (at pp.c:6944)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[] (at pp.c:6944)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:6946)
    FuncDecl: quals=None (at pp.c:6946)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[] (at pp.c:6946)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:6948)
    FuncDecl: quals=None (at pp.c:6948)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[] (at pp.c:6948)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:6950)
    FuncDecl: quals=None (at pp.c:6950)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[] (at pp.c:6950)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:6952)
    FuncDecl: quals=None (at pp.c:6952)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[] (at pp.c:6952)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:6954)
    FuncDecl: quals=None (at pp.c:6954)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[] (at pp.c:6954)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:6956)
    FuncDecl: quals=None (at pp.c:6956)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[] (at pp.c:6956)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:6958)
    FuncDecl: quals=None (at pp.c:6958)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__getRaw', quals=[] (at pp.c:6958)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:6959)
    FuncDecl: quals=None (at pp.c:6959)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__get', quals=[] (at pp.c:6959)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:6960)
    FuncDecl: quals=None (at pp.c:6960)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__makeInput', quals=[] (at pp.c:6960)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:6964)
    FuncDecl: quals=None (at pp.c:6964)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[] (at pp.c:6964)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:6966)
    FuncDecl: quals=None (at pp.c:6966)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[] (at pp.c:6966)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__set', quals=[], storage=['static'] (at pp.c:6968)
    FuncDecl: quals=None (at pp.c:6968)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__set', quals=[] (at pp.c:6968)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__clr', quals=[], storage=['static'] (at pp.c:6969)
    FuncDecl: quals=None (at pp.c:6969)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__clr', quals=[] (at pp.c:6969)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:6975)
    FuncDecl: quals=None (at pp.c:6975)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[] (at pp.c:6975)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__28__IO__set', quals=[], storage=['static'] (at pp.c:6977)
    FuncDecl: quals=None (at pp.c:6977)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__28__IO__set', quals=[] (at pp.c:6977)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__28__IO__clr', quals=[], storage=['static'] (at pp.c:6978)
    FuncDecl: quals=None (at pp.c:6978)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__28__IO__clr', quals=[] (at pp.c:6978)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__28__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:6984)
    FuncDecl: quals=None (at pp.c:6984)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__28__IO__makeOutput', quals=[] (at pp.c:6984)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:6986)
    FuncDecl: quals=None (at pp.c:6986)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__set', quals=[] (at pp.c:6986)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:6987)
    FuncDecl: quals=None (at pp.c:6987)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__clr', quals=[] (at pp.c:6987)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:6993)
    FuncDecl: quals=None (at pp.c:6993)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[] (at pp.c:6993)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__set', quals=[], storage=['static'] (at pp.c:6995)
    FuncDecl: quals=None (at pp.c:6995)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__set', quals=[] (at pp.c:6995)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__clr', quals=[], storage=['static'] (at pp.c:6996)
    FuncDecl: quals=None (at pp.c:6996)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__clr', quals=[] (at pp.c:6996)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7002)
    FuncDecl: quals=None (at pp.c:7002)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[] (at pp.c:7002)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__31__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:7004)
    FuncDecl: quals=None (at pp.c:7004)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__31__IO__set', quals=[] (at pp.c:7004)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__31__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7011)
    FuncDecl: quals=None (at pp.c:7011)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__31__IO__makeOutput', quals=[] (at pp.c:7011)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:7013)
    FuncDecl: quals=None (at pp.c:7013)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__set', quals=[] (at pp.c:7013)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:7015)
    FuncDecl: quals=None (at pp.c:7015)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__toggle', quals=[] (at pp.c:7015)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7020)
    FuncDecl: quals=None (at pp.c:7020)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[] (at pp.c:7020)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__37__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:7022)
    FuncDecl: quals=None (at pp.c:7022)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__37__IO__set', quals=[] (at pp.c:7022)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__37__IO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:7024)
    FuncDecl: quals=None (at pp.c:7024)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__37__IO__toggle', quals=[] (at pp.c:7024)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7029)
    FuncDecl: quals=None (at pp.c:7029)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[] (at pp.c:7029)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__set', quals=[], storage=['static'] (at pp.c:7031)
    FuncDecl: quals=None (at pp.c:7031)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__set', quals=[] (at pp.c:7031)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:7032)
    FuncDecl: quals=None (at pp.c:7032)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__clr', quals=[] (at pp.c:7032)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7038)
    FuncDecl: quals=None (at pp.c:7038)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[] (at pp.c:7038)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led0__toggle', quals=[], storage=['static'] (at pp.c:7040)
    FuncDecl: quals=None (at pp.c:7040)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led0__toggle', quals=[] (at pp.c:7040)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led0__makeOutput', quals=[], storage=['static'] (at pp.c:7044)
    FuncDecl: quals=None (at pp.c:7044)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led0__makeOutput', quals=[] (at pp.c:7044)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led0__set', quals=[], storage=['static'] (at pp.c:7046)
    FuncDecl: quals=None (at pp.c:7046)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led0__set', quals=[] (at pp.c:7046)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led1__toggle', quals=[], storage=['static'] (at pp.c:7048)
    FuncDecl: quals=None (at pp.c:7048)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led1__toggle', quals=[] (at pp.c:7048)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led1__makeOutput', quals=[], storage=['static'] (at pp.c:7052)
    FuncDecl: quals=None (at pp.c:7052)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led1__makeOutput', quals=[] (at pp.c:7052)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led1__set', quals=[], storage=['static'] (at pp.c:7054)
    FuncDecl: quals=None (at pp.c:7054)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led1__set', quals=[] (at pp.c:7054)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led2__makeOutput', quals=[], storage=['static'] (at pp.c:7060)
    FuncDecl: quals=None (at pp.c:7060)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led2__makeOutput', quals=[] (at pp.c:7060)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led2__set', quals=[], storage=['static'] (at pp.c:7062)
    FuncDecl: quals=None (at pp.c:7062)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led2__set', quals=[] (at pp.c:7062)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Led2__clr', quals=[], storage=['static'] (at pp.c:7063)
    FuncDecl: quals=None (at pp.c:7063)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Led2__clr', quals=[] (at pp.c:7063)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:7065)
    FuncDecl: quals=None (at pp.c:7065)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Init__init', quals=[] (at pp.c:7065)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LedsP__Leds__led0Toggle', quals=[], storage=['inline', 'static'] (at pp.c:7067)
    FuncDecl: quals=None (at pp.c:7067)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led0Toggle', quals=[] (at pp.c:7067)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Leds__led1Toggle', quals=[], storage=['inline', 'static'] (at pp.c:7069)
    FuncDecl: quals=None (at pp.c:7069)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led1Toggle', quals=[] (at pp.c:7069)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Leds__led2On', quals=[], storage=['inline', 'static'] (at pp.c:7074)
    FuncDecl: quals=None (at pp.c:7074)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led2On', quals=[] (at pp.c:7074)
        IdentifierType: names=['void'] (at None)
  Decl: name='LedsP__Leds__led2Off', quals=[], storage=['inline', 'static'] (at pp.c:7079)
    FuncDecl: quals=None (at pp.c:7079)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LedsP__Leds__led2Off', quals=[] (at pp.c:7079)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__HplGeneralIO__toggle', quals=[], storage=['static'] (at pp.c:7081)
    FuncDecl: quals=None (at pp.c:7081)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__toggle', quals=[] (at pp.c:7081)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:7083)
    FuncDecl: quals=None (at pp.c:7083)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__makeOutput', quals=[] (at pp.c:7083)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:7085)
    FuncDecl: quals=None (at pp.c:7085)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__set', quals=[] (at pp.c:7085)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:7087)
    FuncDecl: quals=None (at pp.c:7087)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__set', quals=[] (at pp.c:7087)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:7089)
    FuncDecl: quals=None (at pp.c:7089)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__toggle', quals=[] (at pp.c:7089)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__0__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7093)
    FuncDecl: quals=None (at pp.c:7093)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__0__GeneralIO__makeOutput', quals=[] (at pp.c:7093)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__HplGeneralIO__toggle', quals=[], storage=['static'] (at pp.c:7095)
    FuncDecl: quals=None (at pp.c:7095)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__HplGeneralIO__toggle', quals=[] (at pp.c:7095)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:7097)
    FuncDecl: quals=None (at pp.c:7097)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__HplGeneralIO__makeOutput', quals=[] (at pp.c:7097)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:7099)
    FuncDecl: quals=None (at pp.c:7099)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__HplGeneralIO__set', quals=[] (at pp.c:7099)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:7101)
    FuncDecl: quals=None (at pp.c:7101)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__GeneralIO__set', quals=[] (at pp.c:7101)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__GeneralIO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:7103)
    FuncDecl: quals=None (at pp.c:7103)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__GeneralIO__toggle', quals=[] (at pp.c:7103)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__1__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7107)
    FuncDecl: quals=None (at pp.c:7107)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__1__GeneralIO__makeOutput', quals=[] (at pp.c:7107)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:7109)
    FuncDecl: quals=None (at pp.c:7109)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__makeOutput', quals=[] (at pp.c:7109)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:7111)
    FuncDecl: quals=None (at pp.c:7111)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__set', quals=[] (at pp.c:7111)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:7116)
    FuncDecl: quals=None (at pp.c:7116)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__clr', quals=[] (at pp.c:7116)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:7118)
    FuncDecl: quals=None (at pp.c:7118)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__set', quals=[] (at pp.c:7118)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:7119)
    FuncDecl: quals=None (at pp.c:7119)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__clr', quals=[] (at pp.c:7119)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__2__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7124)
    FuncDecl: quals=None (at pp.c:7124)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__2__GeneralIO__makeOutput', quals=[] (at pp.c:7124)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:7126)
    FuncDecl: quals=None (at pp.c:7126)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__ArbiterInfo__inUse', quals=[] (at pp.c:7126)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430UsartShareP__0__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:7134)
    FuncDecl: quals=None (at pp.c:7134)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__ArbiterInfo__userId', quals=[] (at pp.c:7134)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__rxDone', quals=[], storage=['static'] (at pp.c:7136)
    FuncDecl: quals=None (at pp.c:7136)
      ParamList:  (at pp.c:7138)
        Decl: name='arg_0x101f8c6b0', quals=[], storage=[] (at pp.c:7138)
          TypeDecl: declname='arg_0x101f8c6b0', quals=[] (at pp.c:7138)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7140)
          TypeDecl: declname='data', quals=[] (at pp.c:7140)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__rxDone', quals=[] (at pp.c:7136)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__txDone', quals=[], storage=['static'] (at pp.c:7142)
    FuncDecl: quals=None (at pp.c:7142)
      ParamList:  (at pp.c:7144)
        Decl: name='arg_0x101f8c6b0', quals=[], storage=[] (at pp.c:7144)
          TypeDecl: declname='arg_0x101f8c6b0', quals=[] (at pp.c:7144)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__txDone', quals=[] (at pp.c:7142)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__I2CInterrupts__fired', quals=[], storage=['static'] (at pp.c:7146)
    FuncDecl: quals=None (at pp.c:7146)
      ParamList:  (at pp.c:7148)
        Decl: name='arg_0x101f8a4d0', quals=[], storage=[] (at pp.c:7148)
          TypeDecl: declname='arg_0x101f8a4d0', quals=[] (at pp.c:7148)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__I2CInterrupts__fired', quals=[] (at pp.c:7146)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:7157)
    FuncDecl: quals=None (at pp.c:7157)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[] (at pp.c:7157)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:7162)
    FuncDecl: quals=None (at pp.c:7162)
      ParamList:  (at pp.c:7162)
        Decl: name='data', quals=[], storage=[] (at pp.c:7162)
          TypeDecl: declname='data', quals=[] (at pp.c:7162)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[] (at pp.c:7162)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__RawI2CInterrupts__fired', quals=[], storage=['inline', 'static'] (at pp.c:7167)
    FuncDecl: quals=None (at pp.c:7167)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__RawI2CInterrupts__fired', quals=[] (at pp.c:7167)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[], storage=['inline', 'static'] (at pp.c:7172)
    FuncDecl: quals=None (at pp.c:7172)
      ParamList:  (at pp.c:7172)
        Decl: name='id', quals=[], storage=[] (at pp.c:7172)
          TypeDecl: declname='id', quals=[] (at pp.c:7172)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[] (at pp.c:7172)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:7173)
    FuncDecl: quals=None (at pp.c:7173)
      ParamList:  (at pp.c:7173)
        Decl: name='id', quals=[], storage=[] (at pp.c:7173)
          TypeDecl: declname='id', quals=[] (at pp.c:7173)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7173)
          TypeDecl: declname='data', quals=[] (at pp.c:7173)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[] (at pp.c:7173)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430UsartShareP__0__I2CInterrupts__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:7174)
    FuncDecl: quals=None (at pp.c:7174)
      ParamList:  (at pp.c:7174)
        Decl: name='id', quals=[], storage=[] (at pp.c:7174)
          TypeDecl: declname='id', quals=[] (at pp.c:7174)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Msp430UsartShareP__0__I2CInterrupts__default__fired', quals=[] (at pp.c:7174)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:7176)
    Enum: name='FcfsResourceQueueC__2____nesc_unnamed4349' (at pp.c:7176)
      EnumeratorList:  (at pp.c:7178)
        Enumerator: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:7178)
          Constant: type='int', value='0xFF' (at pp.c:7178)
  Decl: name='FcfsResourceQueueC__2__resQ', quals=[], storage=[] (at pp.c:7180)
    ArrayDecl:  (at pp.c:7180)
      TypeDecl: declname='FcfsResourceQueueC__2__resQ', quals=[] (at pp.c:7180)
        IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='2U' (at pp.c:7180)
  Decl: name='FcfsResourceQueueC__2__qHead', quals=[], storage=[] (at pp.c:7181)
    TypeDecl: declname='FcfsResourceQueueC__2__qHead', quals=[] (at pp.c:7181)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:7181)
  Decl: name='FcfsResourceQueueC__2__qTail', quals=[], storage=[] (at pp.c:7182)
    TypeDecl: declname='FcfsResourceQueueC__2__qTail', quals=[] (at pp.c:7182)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:7182)
  Decl: name='FcfsResourceQueueC__2__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:7184)
    FuncDecl: quals=None (at pp.c:7184)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__Init__init', quals=[] (at pp.c:7184)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[], storage=['inline', 'static'] (at pp.c:7189)
    FuncDecl: quals=None (at pp.c:7189)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[] (at pp.c:7189)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[], storage=['inline', 'static'] (at pp.c:7193)
    FuncDecl: quals=None (at pp.c:7193)
      ParamList:  (at pp.c:7193)
        Decl: name='id', quals=[], storage=[] (at pp.c:7193)
          TypeDecl: declname='id', quals=[] (at pp.c:7193)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[] (at pp.c:7193)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:7197)
    FuncDecl: quals=None (at pp.c:7197)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[] (at pp.c:7197)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:7199)
    FuncDecl: quals=None (at pp.c:7199)
      ParamList:  (at pp.c:7199)
        Decl: name='id', quals=[], storage=[] (at pp.c:7199)
          TypeDecl: declname='id', quals=[] (at pp.c:7199)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[] (at pp.c:7199)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__requested', quals=[], storage=['static'] (at pp.c:7201)
    FuncDecl: quals=None (at pp.c:7201)
      ParamList:  (at pp.c:7203)
        Decl: name='arg_0x101ac2020', quals=[], storage=[] (at pp.c:7203)
          TypeDecl: declname='arg_0x101ac2020', quals=[] (at pp.c:7203)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__requested', quals=[] (at pp.c:7201)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__immediateRequested', quals=[], storage=['static'] (at pp.c:7205)
    FuncDecl: quals=None (at pp.c:7205)
      ParamList:  (at pp.c:7207)
        Decl: name='arg_0x101ac2020', quals=[], storage=[] (at pp.c:7207)
          TypeDecl: declname='arg_0x101ac2020', quals=[] (at pp.c:7207)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__immediateRequested', quals=[] (at pp.c:7205)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__unconfigure', quals=[], storage=['static'] (at pp.c:7209)
    FuncDecl: quals=None (at pp.c:7209)
      ParamList:  (at pp.c:7211)
        Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:7211)
          TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:7211)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__unconfigure', quals=[] (at pp.c:7209)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__configure', quals=[], storage=['static'] (at pp.c:7213)
    FuncDecl: quals=None (at pp.c:7213)
      ParamList:  (at pp.c:7215)
        Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:7215)
          TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:7215)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__configure', quals=[] (at pp.c:7213)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__Queue__enqueue', quals=[], storage=['static'] (at pp.c:7217)
    FuncDecl: quals=None (at pp.c:7217)
      ParamList:  (at pp.c:7217)
        Decl: name='id', quals=[], storage=[] (at pp.c:7217)
          TypeDecl: declname='id', quals=[] (at pp.c:7217)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Queue__enqueue', quals=[] (at pp.c:7217)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Queue__isEmpty', quals=[], storage=['static'] (at pp.c:7219)
    FuncDecl: quals=None (at pp.c:7219)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__Queue__isEmpty', quals=[] (at pp.c:7219)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__1__Queue__dequeue', quals=[], storage=['static'] (at pp.c:7221)
    FuncDecl: quals=None (at pp.c:7221)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__Queue__dequeue', quals=[] (at pp.c:7221)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__requested', quals=[], storage=['static'] (at pp.c:7223)
    FuncDecl: quals=None (at pp.c:7223)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__requested', quals=[] (at pp.c:7223)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__granted', quals=[], storage=['static'] (at pp.c:7225)
    FuncDecl: quals=None (at pp.c:7225)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__granted', quals=[] (at pp.c:7225)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__immediateRequested', quals=[], storage=['static'] (at pp.c:7227)
    FuncDecl: quals=None (at pp.c:7227)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__immediateRequested', quals=[] (at pp.c:7227)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__Resource__granted', quals=[], storage=['static'] (at pp.c:7229)
    FuncDecl: quals=None (at pp.c:7229)
      ParamList:  (at pp.c:7231)
        Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:7231)
          TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:7231)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__granted', quals=[] (at pp.c:7229)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__grantedTask__postTask', quals=[], storage=['static'] (at pp.c:7233)
    FuncDecl: quals=None (at pp.c:7233)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__grantedTask__postTask', quals=[] (at pp.c:7233)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:7235)
    Enum: name='ArbiterP__1____nesc_unnamed4350' (at pp.c:7235)
      EnumeratorList:  (at pp.c:7237)
        Enumerator: name='ArbiterP__1__grantedTask' (at pp.c:7237)
          Constant: type='int', value='10U' (at pp.c:7237)
  Typedef: name='ArbiterP__1____nesc_sillytask_grantedTask', quals=[], storage=['typedef'] (at pp.c:7240)
    ArrayDecl:  (at pp.c:7240)
      TypeDecl: declname='ArbiterP__1____nesc_sillytask_grantedTask', quals=[] (at pp.c:7240)
        IdentifierType: names=['int'] (at None)
      ID: name='ArbiterP__1__grantedTask' (at pp.c:7240)
  Decl: name=None, quals=[], storage=[] (at pp.c:7242)
    Enum: name='ArbiterP__1____nesc_unnamed4351' (at pp.c:7242)
      EnumeratorList:  (at pp.c:7244)
        Enumerator: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:7244)
        Enumerator: name='ArbiterP__1__RES_GRANTING' (at pp.c:7244)
        Enumerator: name='ArbiterP__1__RES_IMM_GRANTING' (at pp.c:7244)
        Enumerator: name='ArbiterP__1__RES_BUSY' (at pp.c:7244)
  Decl: name=None, quals=[], storage=[] (at pp.c:7247)
    Enum: name='ArbiterP__1____nesc_unnamed4352' (at pp.c:7247)
      EnumeratorList:  (at pp.c:7249)
        Enumerator: name='ArbiterP__1__default_owner_id' (at pp.c:7249)
          Constant: type='int', value='2U' (at pp.c:7249)
  Decl: name=None, quals=[], storage=[] (at pp.c:7252)
    Enum: name='ArbiterP__1____nesc_unnamed4353' (at pp.c:7252)
      EnumeratorList:  (at pp.c:7254)
        Enumerator: name='ArbiterP__1__NO_RES' (at pp.c:7254)
          Constant: type='int', value='0xFF' (at pp.c:7254)
  Decl: name='ArbiterP__1__state', quals=[], storage=[] (at pp.c:7256)
    TypeDecl: declname='ArbiterP__1__state', quals=[] (at pp.c:7256)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:7256)
  Decl: name='ArbiterP__1__resId', quals=[], storage=[] (at pp.c:7257)
    TypeDecl: declname='ArbiterP__1__resId', quals=[] (at pp.c:7257)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='ArbiterP__1__default_owner_id' (at pp.c:7257)
  Decl: name='ArbiterP__1__reqResId', quals=[], storage=[] (at pp.c:7258)
    TypeDecl: declname='ArbiterP__1__reqResId', quals=[] (at pp.c:7258)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__1__Resource__request', quals=[], storage=['static'] (at pp.c:7262)
    FuncDecl: quals=None (at pp.c:7262)
      ParamList:  (at pp.c:7262)
        Decl: name='id', quals=[], storage=[] (at pp.c:7262)
          TypeDecl: declname='id', quals=[] (at pp.c:7262)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__request', quals=[] (at pp.c:7262)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:7264)
    FuncDecl: quals=None (at pp.c:7264)
      ParamList:  (at pp.c:7264)
        Decl: name='id', quals=[], storage=[] (at pp.c:7264)
          TypeDecl: declname='id', quals=[] (at pp.c:7264)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__immediateRequest', quals=[] (at pp.c:7264)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__Resource__release', quals=[], storage=['static'] (at pp.c:7266)
    FuncDecl: quals=None (at pp.c:7266)
      ParamList:  (at pp.c:7266)
        Decl: name='id', quals=[], storage=[] (at pp.c:7266)
          TypeDecl: declname='id', quals=[] (at pp.c:7266)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__release', quals=[] (at pp.c:7266)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:7268)
    FuncDecl: quals=None (at pp.c:7268)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__release', quals=[] (at pp.c:7268)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='ArbiterP__1__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:7270)
    FuncDecl: quals=None (at pp.c:7270)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ArbiterInfo__inUse', quals=[] (at pp.c:7270)
        IdentifierType: names=['bool'] (at None)
  Decl: name='ArbiterP__1__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:7272)
    FuncDecl: quals=None (at pp.c:7272)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ArbiterInfo__userId', quals=[] (at pp.c:7272)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__1__Resource__isOwner', quals=[], storage=['static'] (at pp.c:7283)
    FuncDecl: quals=None (at pp.c:7283)
      ParamList:  (at pp.c:7283)
        Decl: name='id', quals=[], storage=[] (at pp.c:7283)
          TypeDecl: declname='id', quals=[] (at pp.c:7283)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__isOwner', quals=[] (at pp.c:7283)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ArbiterP__1__grantedTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7285)
    FuncDecl: quals=None (at pp.c:7285)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__grantedTask__runTask', quals=[] (at pp.c:7285)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:7287)
    FuncDecl: quals=None (at pp.c:7287)
      ParamList:  (at pp.c:7287)
        Decl: name='id', quals=[], storage=[] (at pp.c:7287)
          TypeDecl: declname='id', quals=[] (at pp.c:7287)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__Resource__default__granted', quals=[] (at pp.c:7287)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__default__requested', quals=[], storage=['inline', 'static'] (at pp.c:7289)
    FuncDecl: quals=None (at pp.c:7289)
      ParamList:  (at pp.c:7289)
        Decl: name='id', quals=[], storage=[] (at pp.c:7289)
          TypeDecl: declname='id', quals=[] (at pp.c:7289)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__default__requested', quals=[] (at pp.c:7289)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:7291)
    FuncDecl: quals=None (at pp.c:7291)
      ParamList:  (at pp.c:7291)
        Decl: name='id', quals=[], storage=[] (at pp.c:7291)
          TypeDecl: declname='id', quals=[] (at pp.c:7291)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[] (at pp.c:7291)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:7293)
    FuncDecl: quals=None (at pp.c:7293)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[] (at pp.c:7293)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[], storage=['inline', 'static'] (at pp.c:7295)
    FuncDecl: quals=None (at pp.c:7295)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[] (at pp.c:7295)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:7298)
    FuncDecl: quals=None (at pp.c:7298)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[] (at pp.c:7298)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__default__configure', quals=[], storage=['inline', 'static'] (at pp.c:7301)
    FuncDecl: quals=None (at pp.c:7301)
      ParamList:  (at pp.c:7301)
        Decl: name='id', quals=[], storage=[] (at pp.c:7301)
          TypeDecl: declname='id', quals=[] (at pp.c:7301)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__configure', quals=[] (at pp.c:7301)
        IdentifierType: names=['void'] (at None)
  Decl: name='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:7303)
    FuncDecl: quals=None (at pp.c:7303)
      ParamList:  (at pp.c:7303)
        Decl: name='id', quals=[], storage=[] (at pp.c:7303)
          TypeDecl: declname='id', quals=[] (at pp.c:7303)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:7303)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430I2C0P__HplUsart__resetUsart', quals=[], storage=['static'] (at pp.c:7305)
    FuncDecl: quals=None (at pp.c:7305)
      ParamList:  (at pp.c:7305)
        Decl: name='reset', quals=[], storage=[] (at pp.c:7305)
          TypeDecl: declname='reset', quals=[] (at pp.c:7305)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430I2C0P__HplUsart__resetUsart', quals=[] (at pp.c:7305)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430I2C0P__U0CTL@"0x0070"', quals=['volatile'], storage=['static'] (at pp.c:7307)
    TypeDecl: declname='HplMsp430I2C0P__U0CTL@"0x0070"', quals=['volatile'] (at pp.c:7307)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='HplMsp430I2C0P__HplI2C__isI2C', quals=[], storage=['inline', 'static'] (at pp.c:7313)
    FuncDecl: quals=None (at pp.c:7313)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430I2C0P__HplI2C__isI2C', quals=[] (at pp.c:7313)
        IdentifierType: names=['bool'] (at None)
  Decl: name='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[], storage=['inline', 'static'] (at pp.c:7317)
    FuncDecl: quals=None (at pp.c:7317)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[] (at pp.c:7317)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:7319)
    FuncDecl: quals=None (at pp.c:7319)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__HplGeneralIO__makeOutput', quals=[] (at pp.c:7319)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:7321)
    FuncDecl: quals=None (at pp.c:7321)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__HplGeneralIO__set', quals=[] (at pp.c:7321)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:7326)
    FuncDecl: quals=None (at pp.c:7326)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__HplGeneralIO__clr', quals=[] (at pp.c:7326)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:7328)
    FuncDecl: quals=None (at pp.c:7328)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__GeneralIO__set', quals=[] (at pp.c:7328)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:7329)
    FuncDecl: quals=None (at pp.c:7329)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__GeneralIO__clr', quals=[] (at pp.c:7329)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__3__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7334)
    FuncDecl: quals=None (at pp.c:7334)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__3__GeneralIO__makeOutput', quals=[] (at pp.c:7334)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:7336)
    FuncDecl: quals=None (at pp.c:7336)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__HplGeneralIO__makeOutput', quals=[] (at pp.c:7336)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:7338)
    FuncDecl: quals=None (at pp.c:7338)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__HplGeneralIO__set', quals=[] (at pp.c:7338)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:7340)
    FuncDecl: quals=None (at pp.c:7340)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__GeneralIO__set', quals=[] (at pp.c:7340)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__4__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:7346)
    FuncDecl: quals=None (at pp.c:7346)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__4__GeneralIO__makeOutput', quals=[] (at pp.c:7346)
        IdentifierType: names=['void'] (at None)
  Decl: name='Stm25pBinderP__0__Volume__getVolumeId', quals=[], storage=['inline', 'static'] (at pp.c:7348)
    FuncDecl: quals=None (at pp.c:7348)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pBinderP__0__Volume__getVolumeId', quals=[] (at pp.c:7348)
        IdentifierType: names=['volume_id_t'] (at None)
  Decl: name='Stm25pLogConfigP__0__Circular__get', quals=[], storage=['inline', 'static'] (at pp.c:7350)
    FuncDecl: quals=None (at pp.c:7350)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Stm25pLogConfigP__0__Circular__get', quals=[] (at pp.c:7350)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SampleLogReaderP__0__LogRead__currentOffset', quals=[], storage=['static'] (at pp.c:7352)
    FuncDecl: quals=None (at pp.c:7352)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogRead__currentOffset', quals=[] (at pp.c:7352)
        IdentifierType: names=['storage_cookie_t'] (at None)
  Decl: name='SampleLogReaderP__0__LogRead__read', quals=[], storage=['static'] (at pp.c:7354)
    FuncDecl: quals=None (at pp.c:7354)
      ParamList:  (at pp.c:7356)
        Decl: name='buf', quals=[], storage=[] (at pp.c:7356)
          PtrDecl: quals=[] (at pp.c:7356)
            TypeDecl: declname='buf', quals=[] (at pp.c:7356)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7362)
          TypeDecl: declname='len', quals=[] (at pp.c:7362)
            IdentifierType: names=['storage_len_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogRead__read', quals=[] (at pp.c:7354)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SampleLogReaderP__0__SampleLogRead__readDone', quals=[], storage=['static'] (at pp.c:7364)
    FuncDecl: quals=None (at pp.c:7364)
      ParamList:  (at pp.c:7364)
        Decl: name='entry', quals=[], storage=[] (at pp.c:7364)
          PtrDecl: quals=[] (at pp.c:7364)
            TypeDecl: declname='entry', quals=[] (at pp.c:7364)
              IdentifierType: names=['SampleLogReaderP__0__SampleLogRead__sample_type_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7364)
          TypeDecl: declname='error', quals=[] (at pp.c:7364)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__SampleLogRead__readDone', quals=[] (at pp.c:7364)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleLogReaderP__0__LogWrite__currentOffset', quals=[], storage=['static'] (at pp.c:7366)
    FuncDecl: quals=None (at pp.c:7366)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogWrite__currentOffset', quals=[] (at pp.c:7366)
        IdentifierType: names=['storage_cookie_t'] (at None)
  Decl: name='SampleLogReaderP__0__sample', quals=[], storage=[] (at pp.c:7368)
    TypeDecl: declname='SampleLogReaderP__0__sample', quals=[] (at pp.c:7368)
      IdentifierType: names=['SampleLogReaderP__0__sample_type_t'] (at None)
  Decl: name='SampleLogReaderP__0__writeLocation', quals=[], storage=[] (at pp.c:7369)
    TypeDecl: declname='SampleLogReaderP__0__writeLocation', quals=[] (at pp.c:7369)
      IdentifierType: names=['storage_cookie_t'] (at None)
  Decl: name='SampleLogReaderP__0__SampleLogRead__readNext', quals=[], storage=['static'] (at pp.c:7375)
    FuncDecl: quals=None (at pp.c:7375)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__SampleLogRead__readNext', quals=[] (at pp.c:7375)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='SampleLogReaderP__0__LogRead__readDone', quals=[], storage=['inline', 'static'] (at pp.c:7382)
    FuncDecl: quals=None (at pp.c:7382)
      ParamList:  (at pp.c:7382)
        Decl: name='buf', quals=[], storage=[] (at pp.c:7382)
          PtrDecl: quals=[] (at pp.c:7382)
            TypeDecl: declname='buf', quals=[] (at pp.c:7382)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7382)
          TypeDecl: declname='len', quals=[] (at pp.c:7382)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7382)
          TypeDecl: declname='error', quals=[] (at pp.c:7382)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogRead__readDone', quals=[] (at pp.c:7382)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleLogReaderP__0__LogRead__seekDone', quals=[], storage=['inline', 'static'] (at pp.c:7386)
    FuncDecl: quals=None (at pp.c:7386)
      ParamList:  (at pp.c:7386)
        Decl: name='error', quals=[], storage=[] (at pp.c:7386)
          TypeDecl: declname='error', quals=[] (at pp.c:7386)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogRead__seekDone', quals=[] (at pp.c:7386)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleLogReaderP__0__LogWrite__appendDone', quals=[], storage=['inline', 'static'] (at pp.c:7394)
    FuncDecl: quals=None (at pp.c:7394)
      ParamList:  (at pp.c:7394)
        Decl: name='buf', quals=[], storage=[] (at pp.c:7394)
          PtrDecl: quals=[] (at pp.c:7394)
            TypeDecl: declname='buf', quals=[] (at pp.c:7394)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7394)
          TypeDecl: declname='len', quals=[] (at pp.c:7394)
            IdentifierType: names=['storage_len_t'] (at None)
        Decl: name='recordsLost', quals=[], storage=[] (at pp.c:7394)
          TypeDecl: declname='recordsLost', quals=[] (at pp.c:7394)
            IdentifierType: names=['bool'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7394)
          TypeDecl: declname='error', quals=[] (at pp.c:7394)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogWrite__appendDone', quals=[] (at pp.c:7394)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleLogReaderP__0__LogWrite__eraseDone', quals=[], storage=['inline', 'static'] (at pp.c:7395)
    FuncDecl: quals=None (at pp.c:7395)
      ParamList:  (at pp.c:7395)
        Decl: name='error', quals=[], storage=[] (at pp.c:7395)
          TypeDecl: declname='error', quals=[] (at pp.c:7395)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogWrite__eraseDone', quals=[] (at pp.c:7395)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleLogReaderP__0__LogWrite__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:7396)
    FuncDecl: quals=None (at pp.c:7396)
      ParamList:  (at pp.c:7396)
        Decl: name='error', quals=[], storage=[] (at pp.c:7396)
          TypeDecl: declname='error', quals=[] (at pp.c:7396)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='SampleLogReaderP__0__LogWrite__syncDone', quals=[] (at pp.c:7396)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__LPL__setRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:7398)
    FuncDecl: quals=None (at pp.c:7398)
      ParamList:  (at pp.c:7400)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7400)
          PtrDecl: quals=[] (at pp.c:7400)
            TypeDecl: declname='msg', quals=[] (at pp.c:7400)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:7403)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:7403)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__LPL__setRemoteWakeupInterval', quals=[] (at pp.c:7398)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__LPL__setLocalWakeupInterval', quals=[], storage=['static'] (at pp.c:7405)
    FuncDecl: quals=None (at pp.c:7405)
      ParamList:  (at pp.c:7405)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:7405)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:7405)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__LPL__setLocalWakeupInterval', quals=[] (at pp.c:7405)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__AMControl__start', quals=[], storage=['static'] (at pp.c:7407)
    FuncDecl: quals=None (at pp.c:7407)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__AMControl__start', quals=[] (at pp.c:7407)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__SampleNxConverter__copyToNx', quals=[], storage=['static'] (at pp.c:7409)
    FuncDecl: quals=None (at pp.c:7409)
      ParamList:  (at pp.c:7409)
        Decl: name='dest', quals=[], storage=[] (at pp.c:7409)
          PtrDecl: quals=[] (at pp.c:7409)
            TypeDecl: declname='dest', quals=[] (at pp.c:7409)
              IdentifierType: names=['nx_sensor_sample_t'] (at None)
        Decl: name='src', quals=[], storage=[] (at pp.c:7409)
          PtrDecl: quals=[] (at pp.c:7409)
            TypeDecl: declname='src', quals=[] (at pp.c:7409)
              IdentifierType: names=['sensor_sample_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleNxConverter__copyToNx', quals=[] (at pp.c:7409)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__SampleSend__send', quals=[], storage=['static'] (at pp.c:7411)
    FuncDecl: quals=None (at pp.c:7411)
      ParamList:  (at pp.c:7411)
        Decl: name='addr', quals=[], storage=[] (at pp.c:7411)
          TypeDecl: declname='addr', quals=[] (at pp.c:7411)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7413)
          PtrDecl: quals=[] (at pp.c:7413)
            TypeDecl: declname='msg', quals=[] (at pp.c:7413)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7422)
          TypeDecl: declname='len', quals=[] (at pp.c:7422)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleSend__send', quals=[] (at pp.c:7411)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__SampleSend__getPayload', quals=[], storage=['static'] (at pp.c:7428)
    FuncDecl: quals=None (at pp.c:7428)
      ParamList:  (at pp.c:7430)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7430)
          PtrDecl: quals=[] (at pp.c:7430)
            TypeDecl: declname='msg', quals=[] (at pp.c:7430)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7433)
          TypeDecl: declname='len', quals=[] (at pp.c:7433)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:7426)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleSend__getPayload', quals=[] (at pp.c:7428)
          IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__readNextTask__postTask', quals=[], storage=['static'] (at pp.c:7435)
    FuncDecl: quals=None (at pp.c:7435)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__readNextTask__postTask', quals=[] (at pp.c:7435)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__Leds__led0Toggle', quals=[], storage=['static'] (at pp.c:7437)
    FuncDecl: quals=None (at pp.c:7437)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Leds__led0Toggle', quals=[] (at pp.c:7437)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__Leds__led1Toggle', quals=[], storage=['static'] (at pp.c:7439)
    FuncDecl: quals=None (at pp.c:7439)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Leds__led1Toggle', quals=[] (at pp.c:7439)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__Leds__led2Off', quals=[], storage=['static'] (at pp.c:7450)
    FuncDecl: quals=None (at pp.c:7450)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Leds__led2Off', quals=[] (at pp.c:7450)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__Leds__led2On', quals=[], storage=['static'] (at pp.c:7452)
    FuncDecl: quals=None (at pp.c:7452)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Leds__led2On', quals=[] (at pp.c:7452)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__SampleLogRead__readNext', quals=[], storage=['static'] (at pp.c:7454)
    FuncDecl: quals=None (at pp.c:7454)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleLogRead__readNext', quals=[] (at pp.c:7454)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__postTask', quals=[], storage=['static'] (at pp.c:7456)
    FuncDecl: quals=None (at pp.c:7456)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__postTask', quals=[] (at pp.c:7456)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:7458)
    Enum: name='LowPowerSensingPeriodicSamplerC____nesc_unnamed4354' (at pp.c:7458)
      EnumeratorList:  (at pp.c:7460)
        Enumerator: name='LowPowerSensingPeriodicSamplerC__readNextTask' (at pp.c:7460)
          Constant: type='int', value='11U' (at pp.c:7460)
  Typedef: name='LowPowerSensingPeriodicSamplerC____nesc_sillytask_readNextTask', quals=[], storage=['typedef'] (at pp.c:7463)
    ArrayDecl:  (at pp.c:7463)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC____nesc_sillytask_readNextTask', quals=[] (at pp.c:7463)
        IdentifierType: names=['int'] (at None)
      ID: name='LowPowerSensingPeriodicSamplerC__readNextTask' (at pp.c:7463)
  Decl: name=None, quals=[], storage=[] (at pp.c:7464)
    Enum: name='LowPowerSensingPeriodicSamplerC____nesc_unnamed4355' (at pp.c:7464)
      EnumeratorList:  (at pp.c:7466)
        Enumerator: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask' (at pp.c:7466)
          Constant: type='int', value='12U' (at pp.c:7466)
  Typedef: name='LowPowerSensingPeriodicSamplerC____nesc_sillytask_sendSampleMsgTask', quals=[], storage=['typedef'] (at pp.c:7469)
    ArrayDecl:  (at pp.c:7469)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC____nesc_sillytask_sendSampleMsgTask', quals=[] (at pp.c:7469)
        IdentifierType: names=['int'] (at None)
      ID: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask' (at pp.c:7469)
  Decl: name='LowPowerSensingPeriodicSamplerC__sample_msg', quals=[], storage=[] (at pp.c:7471)
    TypeDecl: declname='LowPowerSensingPeriodicSamplerC__sample_msg', quals=[] (at pp.c:7471)
      IdentifierType: names=['message_t'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__sendBusy', quals=[], storage=[] (at pp.c:7472)
    TypeDecl: declname='LowPowerSensingPeriodicSamplerC__sendBusy', quals=[] (at pp.c:7472)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:7472)
  Decl: name='LowPowerSensingPeriodicSamplerC__readNext', quals=[], storage=['static'] (at pp.c:7477)
    FuncDecl: quals=None (at pp.c:7477)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__readNext', quals=[] (at pp.c:7477)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__sendSampleMsg', quals=[], storage=['static'] (at pp.c:7487)
    FuncDecl: quals=None (at pp.c:7487)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__sendSampleMsg', quals=[] (at pp.c:7487)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__readNextTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7494)
    FuncDecl: quals=None (at pp.c:7494)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__readNextTask__runTask', quals=[] (at pp.c:7494)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7495)
    FuncDecl: quals=None (at pp.c:7495)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__runTask', quals=[] (at pp.c:7495)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__Boot__booted', quals=[], storage=['inline', 'static'] (at pp.c:7497)
    FuncDecl: quals=None (at pp.c:7497)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Boot__booted', quals=[] (at pp.c:7497)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__AMControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:7502)
    FuncDecl: quals=None (at pp.c:7502)
      ParamList:  (at pp.c:7502)
        Decl: name='e', quals=[], storage=[] (at pp.c:7502)
          TypeDecl: declname='e', quals=[] (at pp.c:7502)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__AMControl__startDone', quals=[] (at pp.c:7502)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__AMControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:7507)
    FuncDecl: quals=None (at pp.c:7507)
      ParamList:  (at pp.c:7507)
        Decl: name='e', quals=[], storage=[] (at pp.c:7507)
          TypeDecl: declname='e', quals=[] (at pp.c:7507)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__AMControl__stopDone', quals=[] (at pp.c:7507)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__SampleLogRead__readDone', quals=[], storage=['static'] (at pp.c:7510)
    FuncDecl: quals=None (at pp.c:7510)
      ParamList:  (at pp.c:7510)
        Decl: name='sample', quals=[], storage=[] (at pp.c:7510)
          PtrDecl: quals=[] (at pp.c:7510)
            TypeDecl: declname='sample', quals=[] (at pp.c:7510)
              IdentifierType: names=['sensor_sample_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7510)
          TypeDecl: declname='error', quals=[] (at pp.c:7510)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleLogRead__readDone', quals=[] (at pp.c:7510)
        IdentifierType: names=['void'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__RequestSamplesReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:7519)
    FuncDecl: quals=None (at pp.c:7519)
      ParamList:  (at pp.c:7519)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7519)
          PtrDecl: quals=[] (at pp.c:7519)
            TypeDecl: declname='msg', quals=[] (at pp.c:7519)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:7519)
          PtrDecl: quals=[] (at pp.c:7519)
            TypeDecl: declname='payload', quals=[] (at pp.c:7519)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7519)
          TypeDecl: declname='len', quals=[] (at pp.c:7519)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:7519)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__RequestSamplesReceive__receive', quals=[] (at pp.c:7519)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='LowPowerSensingPeriodicSamplerC__SampleSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:7528)
    FuncDecl: quals=None (at pp.c:7528)
      ParamList:  (at pp.c:7528)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7528)
          PtrDecl: quals=[] (at pp.c:7528)
            TypeDecl: declname='msg', quals=[] (at pp.c:7528)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7528)
          TypeDecl: declname='error', quals=[] (at pp.c:7528)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleSend__sendDone', quals=[] (at pp.c:7528)
        IdentifierType: names=['void'] (at None)
  Decl: name='SampleNxConverterC__SampleNxConverter__copyToNx', quals=[], storage=['inline', 'static'] (at pp.c:7530)
    FuncDecl: quals=None (at pp.c:7530)
      ParamList:  (at pp.c:7530)
        Decl: name='dest', quals=[], storage=[] (at pp.c:7530)
          PtrDecl: quals=[] (at pp.c:7530)
            TypeDecl: declname='dest', quals=[] (at pp.c:7530)
              IdentifierType: names=['nx_sensor_sample_t'] (at None)
        Decl: name='src', quals=[], storage=[] (at pp.c:7530)
          PtrDecl: quals=[] (at pp.c:7530)
            TypeDecl: declname='src', quals=[] (at pp.c:7530)
              IdentifierType: names=['sensor_sample_t'] (at None)
      TypeDecl: declname='SampleNxConverterC__SampleNxConverter__copyToNx', quals=[] (at pp.c:7530)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__startDone', quals=[], storage=['static'] (at pp.c:7532)
    FuncDecl: quals=None (at pp.c:7532)
      ParamList:  (at pp.c:7532)
        Decl: name='error', quals=[], storage=[] (at pp.c:7532)
          TypeDecl: declname='error', quals=[] (at pp.c:7532)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__startDone', quals=[] (at pp.c:7532)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__stopDone', quals=[], storage=['static'] (at pp.c:7534)
    FuncDecl: quals=None (at pp.c:7534)
      ParamList:  (at pp.c:7534)
        Decl: name='error', quals=[], storage=[] (at pp.c:7534)
          TypeDecl: declname='error', quals=[] (at pp.c:7534)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__stopDone', quals=[] (at pp.c:7534)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__requestCca', quals=[], storage=['static'] (at pp.c:7536)
    FuncDecl: quals=None (at pp.c:7536)
      ParamList:  (at pp.c:7536)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7536)
          PtrDecl: quals=[] (at pp.c:7536)
            TypeDecl: declname='msg', quals=[] (at pp.c:7536)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestCca', quals=[] (at pp.c:7536)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:7538)
    FuncDecl: quals=None (at pp.c:7538)
      ParamList:  (at pp.c:7538)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7538)
          PtrDecl: quals=[] (at pp.c:7538)
            TypeDecl: declname='msg', quals=[] (at pp.c:7538)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:7538)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:7545)
    FuncDecl: quals=None (at pp.c:7545)
      ParamList:  (at pp.c:7545)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7545)
          PtrDecl: quals=[] (at pp.c:7545)
            TypeDecl: declname='msg', quals=[] (at pp.c:7545)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:7545)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__setCongestionBackoff', quals=[], storage=['static'] (at pp.c:7547)
    FuncDecl: quals=None (at pp.c:7547)
      ParamList:  (at pp.c:7547)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:7547)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:7547)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__setCongestionBackoff', quals=[] (at pp.c:7547)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__setInitialBackoff', quals=[], storage=['static'] (at pp.c:7549)
    FuncDecl: quals=None (at pp.c:7549)
      ParamList:  (at pp.c:7549)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:7549)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:7549)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__setInitialBackoff', quals=[] (at pp.c:7549)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Transmit__send', quals=[], storage=['static'] (at pp.c:7551)
    FuncDecl: quals=None (at pp.c:7551)
      ParamList:  (at pp.c:7551)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:7551)
          PtrDecl: quals=[] (at pp.c:7551)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:7551)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:7551)
          TypeDecl: declname='useCca', quals=[] (at pp.c:7551)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Transmit__send', quals=[] (at pp.c:7551)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Send__sendDone', quals=[], storage=['static'] (at pp.c:7553)
    FuncDecl: quals=None (at pp.c:7553)
      ParamList:  (at pp.c:7555)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7555)
          PtrDecl: quals=[] (at pp.c:7555)
            TypeDecl: declname='msg', quals=[] (at pp.c:7555)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:7559)
          TypeDecl: declname='error', quals=[] (at pp.c:7559)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__Send__sendDone', quals=[] (at pp.c:7553)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__Random__rand16', quals=[], storage=['static'] (at pp.c:7561)
    FuncDecl: quals=None (at pp.c:7561)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Random__rand16', quals=[] (at pp.c:7561)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420CsmaP__SubControl__start', quals=[], storage=['static'] (at pp.c:7563)
    FuncDecl: quals=None (at pp.c:7563)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubControl__start', quals=[] (at pp.c:7563)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__SubControl__stop', quals=[], storage=['static'] (at pp.c:7573)
    FuncDecl: quals=None (at pp.c:7573)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubControl__stop', quals=[] (at pp.c:7573)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:7575)
    FuncDecl: quals=None (at pp.c:7575)
      ParamList:  (at pp.c:7575)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7575)
          PtrDecl: quals=[] (at pp.c:7575)
            TypeDecl: declname='msg', quals=[] (at pp.c:7575)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:7575)
        TypeDecl: declname='CC2420CsmaP__CC2420PacketBody__getHeader', quals=[] (at pp.c:7575)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:7586)
    FuncDecl: quals=None (at pp.c:7586)
      ParamList:  (at pp.c:7586)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7586)
          PtrDecl: quals=[] (at pp.c:7586)
            TypeDecl: declname='msg', quals=[] (at pp.c:7586)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:7586)
        TypeDecl: declname='CC2420CsmaP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:7586)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startOscillator', quals=[], storage=['static'] (at pp.c:7588)
    FuncDecl: quals=None (at pp.c:7588)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startOscillator', quals=[] (at pp.c:7588)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__rxOn', quals=[], storage=['static'] (at pp.c:7590)
    FuncDecl: quals=None (at pp.c:7590)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__rxOn', quals=[] (at pp.c:7590)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startVReg', quals=[], storage=['static'] (at pp.c:7592)
    FuncDecl: quals=None (at pp.c:7592)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startVReg', quals=[] (at pp.c:7592)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__stopVReg', quals=[], storage=['static'] (at pp.c:7594)
    FuncDecl: quals=None (at pp.c:7594)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__stopVReg', quals=[] (at pp.c:7594)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Resource__release', quals=[], storage=['static'] (at pp.c:7596)
    FuncDecl: quals=None (at pp.c:7596)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Resource__release', quals=[] (at pp.c:7596)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Resource__request', quals=[], storage=['static'] (at pp.c:7598)
    FuncDecl: quals=None (at pp.c:7598)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Resource__request', quals=[] (at pp.c:7598)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__SplitControlState__isState', quals=[], storage=['static'] (at pp.c:7600)
    FuncDecl: quals=None (at pp.c:7600)
      ParamList:  (at pp.c:7600)
        Decl: name='myState', quals=[], storage=[] (at pp.c:7600)
          TypeDecl: declname='myState', quals=[] (at pp.c:7600)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControlState__isState', quals=[] (at pp.c:7600)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420CsmaP__SplitControlState__requestState', quals=[], storage=['static'] (at pp.c:7602)
    FuncDecl: quals=None (at pp.c:7602)
      ParamList:  (at pp.c:7602)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:7602)
          TypeDecl: declname='reqState', quals=[] (at pp.c:7602)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControlState__requestState', quals=[] (at pp.c:7602)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__SplitControlState__forceState', quals=[], storage=['static'] (at pp.c:7608)
    FuncDecl: quals=None (at pp.c:7608)
      ParamList:  (at pp.c:7608)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:7608)
          TypeDecl: declname='reqState', quals=[] (at pp.c:7608)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControlState__forceState', quals=[] (at pp.c:7608)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__sendDone_task__postTask', quals=[], storage=['static'] (at pp.c:7610)
    FuncDecl: quals=None (at pp.c:7610)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__sendDone_task__postTask', quals=[] (at pp.c:7610)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__stopDone_task__postTask', quals=[], storage=['static'] (at pp.c:7612)
    FuncDecl: quals=None (at pp.c:7612)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__stopDone_task__postTask', quals=[] (at pp.c:7612)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__startDone_task__postTask', quals=[], storage=['static'] (at pp.c:7614)
    FuncDecl: quals=None (at pp.c:7614)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__startDone_task__postTask', quals=[] (at pp.c:7614)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:7616)
    Enum: name='CC2420CsmaP____nesc_unnamed4356' (at pp.c:7616)
      EnumeratorList:  (at pp.c:7618)
        Enumerator: name='CC2420CsmaP__startDone_task' (at pp.c:7618)
          Constant: type='int', value='13U' (at pp.c:7618)
  Typedef: name='CC2420CsmaP____nesc_sillytask_startDone_task', quals=[], storage=['typedef'] (at pp.c:7621)
    ArrayDecl:  (at pp.c:7621)
      TypeDecl: declname='CC2420CsmaP____nesc_sillytask_startDone_task', quals=[] (at pp.c:7621)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420CsmaP__startDone_task' (at pp.c:7621)
  Decl: name=None, quals=[], storage=[] (at pp.c:7622)
    Enum: name='CC2420CsmaP____nesc_unnamed4357' (at pp.c:7622)
      EnumeratorList:  (at pp.c:7624)
        Enumerator: name='CC2420CsmaP__stopDone_task' (at pp.c:7624)
          Constant: type='int', value='14U' (at pp.c:7624)
  Typedef: name='CC2420CsmaP____nesc_sillytask_stopDone_task', quals=[], storage=['typedef'] (at pp.c:7627)
    ArrayDecl:  (at pp.c:7627)
      TypeDecl: declname='CC2420CsmaP____nesc_sillytask_stopDone_task', quals=[] (at pp.c:7627)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420CsmaP__stopDone_task' (at pp.c:7627)
  Decl: name=None, quals=[], storage=[] (at pp.c:7628)
    Enum: name='CC2420CsmaP____nesc_unnamed4358' (at pp.c:7628)
      EnumeratorList:  (at pp.c:7630)
        Enumerator: name='CC2420CsmaP__sendDone_task' (at pp.c:7630)
          Constant: type='int', value='15U' (at pp.c:7630)
  Typedef: name='CC2420CsmaP____nesc_sillytask_sendDone_task', quals=[], storage=['typedef'] (at pp.c:7633)
    ArrayDecl:  (at pp.c:7633)
      TypeDecl: declname='CC2420CsmaP____nesc_sillytask_sendDone_task', quals=[] (at pp.c:7633)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420CsmaP__sendDone_task' (at pp.c:7633)
  Decl: name=None, quals=[], storage=[] (at pp.c:7635)
    Enum: name='CC2420CsmaP____nesc_unnamed4359' (at pp.c:7635)
      EnumeratorList:  (at pp.c:7636)
        Enumerator: name='CC2420CsmaP__S_STOPPED' (at pp.c:7636)
        Enumerator: name='CC2420CsmaP__S_STARTING' (at pp.c:7637)
        Enumerator: name='CC2420CsmaP__S_STARTED' (at pp.c:7638)
        Enumerator: name='CC2420CsmaP__S_STOPPING' (at pp.c:7639)
        Enumerator: name='CC2420CsmaP__S_TRANSMITTING' (at pp.c:7640)
  Decl: name='CC2420CsmaP__m_msg', quals=[], storage=[] (at pp.c:7643)
    PtrDecl: quals=[] (at pp.c:7643)
      TypeDecl: declname='CC2420CsmaP__m_msg', quals=[] (at pp.c:7643)
        IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420CsmaP__sendErr', quals=[], storage=[] (at pp.c:7645)
    TypeDecl: declname='CC2420CsmaP__sendErr', quals=[] (at pp.c:7645)
      IdentifierType: names=['error_t'] (at None)
    ID: name='SUCCESS' (at pp.c:7645)
  Decl: name='CC2420CsmaP__ccaOn', quals=[], storage=[] (at pp.c:7648)
    TypeDecl: declname='CC2420CsmaP__ccaOn', quals=[] (at pp.c:7648)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420CsmaP__shutdown', quals=[], storage=['inline', 'static'] (at pp.c:7655)
    FuncDecl: quals=None (at pp.c:7655)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__shutdown', quals=[] (at pp.c:7655)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__start', quals=[], storage=['static'] (at pp.c:7658)
    FuncDecl: quals=None (at pp.c:7658)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__start', quals=[] (at pp.c:7658)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__SplitControl__stop', quals=[], storage=['static'] (at pp.c:7660)
    FuncDecl: quals=None (at pp.c:7660)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__SplitControl__stop', quals=[] (at pp.c:7660)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:7662)
    FuncDecl: quals=None (at pp.c:7662)
      ParamList:  (at pp.c:7662)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:7662)
          PtrDecl: quals=[] (at pp.c:7662)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:7662)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:7662)
          TypeDecl: declname='len', quals=[] (at pp.c:7662)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__Send__send', quals=[] (at pp.c:7662)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420CsmaP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:7664)
    FuncDecl: quals=None (at pp.c:7664)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Send__maxPayloadLength', quals=[] (at pp.c:7664)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:7673)
    FuncDecl: quals=None (at pp.c:7673)
      ParamList:  (at pp.c:7673)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:7673)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:7673)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:7673)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:7681)
    FuncDecl: quals=None (at pp.c:7681)
      ParamList:  (at pp.c:7681)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:7681)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:7681)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:7681)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Transmit__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:7683)
    FuncDecl: quals=None (at pp.c:7683)
      ParamList:  (at pp.c:7683)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:7683)
          PtrDecl: quals=[] (at pp.c:7683)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:7683)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:7683)
          TypeDecl: declname='err', quals=[] (at pp.c:7683)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Transmit__sendDone', quals=[] (at pp.c:7683)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startVRegDone', quals=[], storage=['inline', 'static'] (at pp.c:7688)
    FuncDecl: quals=None (at pp.c:7688)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startVRegDone', quals=[] (at pp.c:7688)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__Resource__granted', quals=[], storage=['inline', 'static'] (at pp.c:7692)
    FuncDecl: quals=None (at pp.c:7692)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__Resource__granted', quals=[] (at pp.c:7692)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[], storage=['inline', 'static'] (at pp.c:7696)
    FuncDecl: quals=None (at pp.c:7696)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[] (at pp.c:7696)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:7701)
    FuncDecl: quals=None (at pp.c:7701)
      ParamList:  (at pp.c:7701)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7701)
          PtrDecl: quals=[] (at pp.c:7701)
            TypeDecl: declname='msg', quals=[] (at pp.c:7701)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:7701)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:7708)
    FuncDecl: quals=None (at pp.c:7708)
      ParamList:  (at pp.c:7708)
        Decl: name='msg', quals=[], storage=[] (at pp.c:7708)
          PtrDecl: quals=[] (at pp.c:7708)
            TypeDecl: declname='msg', quals=[] (at pp.c:7708)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:7708)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__sendDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7710)
    FuncDecl: quals=None (at pp.c:7710)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__sendDone_task__runTask', quals=[] (at pp.c:7710)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__startDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7712)
    FuncDecl: quals=None (at pp.c:7712)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__startDone_task__runTask', quals=[] (at pp.c:7712)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__stopDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7720)
    FuncDecl: quals=None (at pp.c:7720)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__stopDone_task__runTask', quals=[] (at pp.c:7720)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420CsmaP__shutdown', quals=[], storage=['inline', 'static'] (at pp.c:7730)
    FuncDecl: quals=None (at pp.c:7730)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420CsmaP__shutdown', quals=[] (at pp.c:7730)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__syncDone', quals=[], storage=['static'] (at pp.c:7732)
    FuncDecl: quals=None (at pp.c:7732)
      ParamList:  (at pp.c:7732)
        Decl: name='error', quals=[], storage=[] (at pp.c:7732)
          TypeDecl: declname='error', quals=[] (at pp.c:7732)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__syncDone', quals=[] (at pp.c:7732)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__RXCTRL1__write', quals=[], storage=['static'] (at pp.c:7734)
    FuncDecl: quals=None (at pp.c:7734)
      ParamList:  (at pp.c:7734)
        Decl: name='data', quals=[], storage=[] (at pp.c:7734)
          TypeDecl: declname='data', quals=[] (at pp.c:7734)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__RXCTRL1__write', quals=[] (at pp.c:7734)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__LocalIeeeEui64__getId', quals=[], storage=['static'] (at pp.c:7736)
    FuncDecl: quals=None (at pp.c:7736)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__LocalIeeeEui64__getId', quals=[] (at pp.c:7736)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420ControlP__StartupTimer__start', quals=[], storage=['static'] (at pp.c:7738)
    FuncDecl: quals=None (at pp.c:7738)
      ParamList:  (at pp.c:7738)
        Decl: name='dt', quals=[], storage=[] (at pp.c:7738)
          TypeDecl: declname='dt', quals=[] (at pp.c:7738)
            IdentifierType: names=['CC2420ControlP__StartupTimer__size_type'] (at None)
      TypeDecl: declname='CC2420ControlP__StartupTimer__start', quals=[] (at pp.c:7738)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__MDMCTRL0__write', quals=[], storage=['static'] (at pp.c:7740)
    FuncDecl: quals=None (at pp.c:7740)
      ParamList:  (at pp.c:7740)
        Decl: name='data', quals=[], storage=[] (at pp.c:7740)
          TypeDecl: declname='data', quals=[] (at pp.c:7740)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__MDMCTRL0__write', quals=[] (at pp.c:7740)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__RSTN__makeOutput', quals=[], storage=['static'] (at pp.c:7742)
    FuncDecl: quals=None (at pp.c:7742)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RSTN__makeOutput', quals=[] (at pp.c:7742)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__RSTN__set', quals=[], storage=['static'] (at pp.c:7744)
    FuncDecl: quals=None (at pp.c:7744)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RSTN__set', quals=[] (at pp.c:7744)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__RSTN__clr', quals=[], storage=['static'] (at pp.c:7745)
    FuncDecl: quals=None (at pp.c:7745)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RSTN__clr', quals=[] (at pp.c:7745)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__ReadRssi__readDone', quals=[], storage=['static'] (at pp.c:7747)
    FuncDecl: quals=None (at pp.c:7747)
      ParamList:  (at pp.c:7747)
        Decl: name='result', quals=[], storage=[] (at pp.c:7747)
          TypeDecl: declname='result', quals=[] (at pp.c:7747)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='val', quals=[], storage=[] (at pp.c:7747)
          TypeDecl: declname='val', quals=[] (at pp.c:7747)
            IdentifierType: names=['CC2420ControlP__ReadRssi__val_t'] (at None)
      TypeDecl: declname='CC2420ControlP__ReadRssi__readDone', quals=[] (at pp.c:7747)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__syncDone__postTask', quals=[], storage=['static'] (at pp.c:7749)
    FuncDecl: quals=None (at pp.c:7749)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__syncDone__postTask', quals=[] (at pp.c:7749)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__RSSI__read', quals=[], storage=['static'] (at pp.c:7751)
    FuncDecl: quals=None (at pp.c:7751)
      ParamList:  (at pp.c:7751)
        Decl: name='data', quals=[], storage=[] (at pp.c:7751)
          PtrDecl: quals=[] (at pp.c:7751)
            TypeDecl: declname='data', quals=[] (at pp.c:7751)
              IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__RSSI__read', quals=[] (at pp.c:7751)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__IOCFG0__write', quals=[], storage=['static'] (at pp.c:7759)
    FuncDecl: quals=None (at pp.c:7759)
      ParamList:  (at pp.c:7759)
        Decl: name='data', quals=[], storage=[] (at pp.c:7759)
          TypeDecl: declname='data', quals=[] (at pp.c:7759)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__IOCFG0__write', quals=[] (at pp.c:7759)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__ActiveMessageAddress__amAddress', quals=[], storage=['static'] (at pp.c:7761)
    FuncDecl: quals=None (at pp.c:7761)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__ActiveMessageAddress__amAddress', quals=[] (at pp.c:7761)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ControlP__ActiveMessageAddress__amGroup', quals=[], storage=['static'] (at pp.c:7766)
    FuncDecl: quals=None (at pp.c:7766)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__ActiveMessageAddress__amGroup', quals=[] (at pp.c:7766)
        IdentifierType: names=['am_group_t'] (at None)
  Decl: name='CC2420ControlP__CSN__makeOutput', quals=[], storage=['static'] (at pp.c:7768)
    FuncDecl: quals=None (at pp.c:7768)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CSN__makeOutput', quals=[] (at pp.c:7768)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CSN__set', quals=[], storage=['static'] (at pp.c:7770)
    FuncDecl: quals=None (at pp.c:7770)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CSN__set', quals=[] (at pp.c:7770)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CSN__clr', quals=[], storage=['static'] (at pp.c:7771)
    FuncDecl: quals=None (at pp.c:7771)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CSN__clr', quals=[] (at pp.c:7771)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__VREN__makeOutput', quals=[], storage=['static'] (at pp.c:7776)
    FuncDecl: quals=None (at pp.c:7776)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__VREN__makeOutput', quals=[] (at pp.c:7776)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__VREN__set', quals=[], storage=['static'] (at pp.c:7778)
    FuncDecl: quals=None (at pp.c:7778)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__VREN__set', quals=[] (at pp.c:7778)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__VREN__clr', quals=[], storage=['static'] (at pp.c:7779)
    FuncDecl: quals=None (at pp.c:7779)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__VREN__clr', quals=[] (at pp.c:7779)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__SXOSCON__strobe', quals=[], storage=['static'] (at pp.c:7781)
    FuncDecl: quals=None (at pp.c:7781)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SXOSCON__strobe', quals=[] (at pp.c:7781)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__SpiResource__release', quals=[], storage=['static'] (at pp.c:7783)
    FuncDecl: quals=None (at pp.c:7783)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SpiResource__release', quals=[] (at pp.c:7783)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__SpiResource__request', quals=[], storage=['static'] (at pp.c:7785)
    FuncDecl: quals=None (at pp.c:7785)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SpiResource__request', quals=[] (at pp.c:7785)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__SyncResource__release', quals=[], storage=['static'] (at pp.c:7787)
    FuncDecl: quals=None (at pp.c:7787)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SyncResource__release', quals=[] (at pp.c:7787)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__SyncResource__request', quals=[], storage=['static'] (at pp.c:7789)
    FuncDecl: quals=None (at pp.c:7789)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SyncResource__request', quals=[] (at pp.c:7789)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startOscillatorDone', quals=[], storage=['static'] (at pp.c:7791)
    FuncDecl: quals=None (at pp.c:7791)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startOscillatorDone', quals=[] (at pp.c:7791)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startVRegDone', quals=[], storage=['static'] (at pp.c:7793)
    FuncDecl: quals=None (at pp.c:7793)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startVRegDone', quals=[] (at pp.c:7793)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__IOCFG1__write', quals=[], storage=['static'] (at pp.c:7795)
    FuncDecl: quals=None (at pp.c:7795)
      ParamList:  (at pp.c:7795)
        Decl: name='data', quals=[], storage=[] (at pp.c:7795)
          TypeDecl: declname='data', quals=[] (at pp.c:7795)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__IOCFG1__write', quals=[] (at pp.c:7795)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__FSCTRL__write', quals=[], storage=['static'] (at pp.c:7797)
    FuncDecl: quals=None (at pp.c:7797)
      ParamList:  (at pp.c:7797)
        Decl: name='data', quals=[], storage=[] (at pp.c:7797)
          TypeDecl: declname='data', quals=[] (at pp.c:7797)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__FSCTRL__write', quals=[] (at pp.c:7797)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__SRXON__strobe', quals=[], storage=['static'] (at pp.c:7799)
    FuncDecl: quals=None (at pp.c:7799)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SRXON__strobe', quals=[] (at pp.c:7799)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__Resource__granted', quals=[], storage=['static'] (at pp.c:7801)
    FuncDecl: quals=None (at pp.c:7801)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Resource__granted', quals=[] (at pp.c:7801)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__IEEEADR__write', quals=[], storage=['static'] (at pp.c:7803)
    FuncDecl: quals=None (at pp.c:7803)
      ParamList:  (at pp.c:7803)
        Decl: name='offset', quals=[], storage=[] (at pp.c:7803)
          TypeDecl: declname='offset', quals=[] (at pp.c:7803)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7803)
          PtrDecl: quals=[] (at pp.c:7803)
            TypeDecl: declname='data', quals=[] (at pp.c:7803)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:7803)
          TypeDecl: declname='length', quals=[] (at pp.c:7803)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ControlP__IEEEADR__write', quals=[] (at pp.c:7803)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ControlP__InterruptCCA__disable', quals=[], storage=['static'] (at pp.c:7805)
    FuncDecl: quals=None (at pp.c:7805)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__InterruptCCA__disable', quals=[] (at pp.c:7805)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__InterruptCCA__enableRisingEdge', quals=[], storage=['static'] (at pp.c:7807)
    FuncDecl: quals=None (at pp.c:7807)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__InterruptCCA__enableRisingEdge', quals=[] (at pp.c:7807)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__RssiResource__release', quals=[], storage=['static'] (at pp.c:7809)
    FuncDecl: quals=None (at pp.c:7809)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RssiResource__release', quals=[] (at pp.c:7809)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__SRFOFF__strobe', quals=[], storage=['static'] (at pp.c:7811)
    FuncDecl: quals=None (at pp.c:7811)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SRFOFF__strobe', quals=[] (at pp.c:7811)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:7813)
    Enum: name='CC2420ControlP____nesc_unnamed4360' (at pp.c:7813)
      EnumeratorList:  (at pp.c:7815)
        Enumerator: name='CC2420ControlP__sync' (at pp.c:7815)
          Constant: type='int', value='16U' (at pp.c:7815)
  Typedef: name='CC2420ControlP____nesc_sillytask_sync', quals=[], storage=['typedef'] (at pp.c:7818)
    ArrayDecl:  (at pp.c:7818)
      TypeDecl: declname='CC2420ControlP____nesc_sillytask_sync', quals=[] (at pp.c:7818)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420ControlP__sync' (at pp.c:7818)
  Decl: name=None, quals=[], storage=[] (at pp.c:7819)
    Enum: name='CC2420ControlP____nesc_unnamed4361' (at pp.c:7819)
      EnumeratorList:  (at pp.c:7821)
        Enumerator: name='CC2420ControlP__syncDone' (at pp.c:7821)
          Constant: type='int', value='17U' (at pp.c:7821)
  Typedef: name='CC2420ControlP____nesc_sillytask_syncDone', quals=[], storage=['typedef'] (at pp.c:7824)
    ArrayDecl:  (at pp.c:7824)
      TypeDecl: declname='CC2420ControlP____nesc_sillytask_syncDone', quals=[] (at pp.c:7824)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420ControlP__syncDone' (at pp.c:7824)
  Typedef: name='CC2420ControlP__cc2420_control_state_t', quals=[], storage=['typedef'] (at pp.c:7833)
    TypeDecl: declname='CC2420ControlP__cc2420_control_state_t', quals=[] (at pp.c:7833)
      Enum: name='CC2420ControlP____nesc_unnamed4362' (at pp.c:7827)
        EnumeratorList:  (at pp.c:7828)
          Enumerator: name='CC2420ControlP__S_VREG_STOPPED' (at pp.c:7828)
          Enumerator: name='CC2420ControlP__S_VREG_STARTING' (at pp.c:7829)
          Enumerator: name='CC2420ControlP__S_VREG_STARTED' (at pp.c:7830)
          Enumerator: name='CC2420ControlP__S_XOSC_STARTING' (at pp.c:7831)
          Enumerator: name='CC2420ControlP__S_XOSC_STARTED' (at pp.c:7832)
  Decl: name='CC2420ControlP__m_channel', quals=[], storage=[] (at pp.c:7835)
    TypeDecl: declname='CC2420ControlP__m_channel', quals=[] (at pp.c:7835)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ControlP__m_tx_power', quals=[], storage=[] (at pp.c:7837)
    TypeDecl: declname='CC2420ControlP__m_tx_power', quals=[] (at pp.c:7837)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ControlP__m_pan', quals=[], storage=[] (at pp.c:7839)
    TypeDecl: declname='CC2420ControlP__m_pan', quals=[] (at pp.c:7839)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__m_short_addr', quals=[], storage=[] (at pp.c:7841)
    TypeDecl: declname='CC2420ControlP__m_short_addr', quals=[] (at pp.c:7841)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__m_ext_addr', quals=[], storage=[] (at pp.c:7843)
    TypeDecl: declname='CC2420ControlP__m_ext_addr', quals=[] (at pp.c:7843)
      IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420ControlP__m_sync_busy', quals=[], storage=[] (at pp.c:7845)
    TypeDecl: declname='CC2420ControlP__m_sync_busy', quals=[] (at pp.c:7845)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__autoAckEnabled', quals=[], storage=[] (at pp.c:7848)
    TypeDecl: declname='CC2420ControlP__autoAckEnabled', quals=[] (at pp.c:7848)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__hwAutoAckDefault', quals=[], storage=[] (at pp.c:7851)
    TypeDecl: declname='CC2420ControlP__hwAutoAckDefault', quals=[] (at pp.c:7851)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__addressRecognition', quals=[], storage=[] (at pp.c:7854)
    TypeDecl: declname='CC2420ControlP__addressRecognition', quals=[] (at pp.c:7854)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__hwAddressRecognition', quals=[], storage=[] (at pp.c:7857)
    TypeDecl: declname='CC2420ControlP__hwAddressRecognition', quals=[] (at pp.c:7857)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__m_state', quals=[], storage=[] (at pp.c:7859)
    TypeDecl: declname='CC2420ControlP__m_state', quals=[] (at pp.c:7859)
      IdentifierType: names=['CC2420ControlP__cc2420_control_state_t'] (at None)
    ID: name='CC2420ControlP__S_VREG_STOPPED' (at pp.c:7859)
  Decl: name='CC2420ControlP__writeFsctrl', quals=[], storage=['static'] (at pp.c:7863)
    FuncDecl: quals=None (at pp.c:7863)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeFsctrl', quals=[] (at pp.c:7863)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__writeMdmctrl0', quals=[], storage=['static'] (at pp.c:7864)
    FuncDecl: quals=None (at pp.c:7864)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeMdmctrl0', quals=[] (at pp.c:7864)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__writeId', quals=[], storage=['static'] (at pp.c:7865)
    FuncDecl: quals=None (at pp.c:7865)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeId', quals=[] (at pp.c:7865)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:7871)
    FuncDecl: quals=None (at pp.c:7871)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Init__init', quals=[] (at pp.c:7871)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:7873)
    FuncDecl: quals=None (at pp.c:7873)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Resource__request', quals=[] (at pp.c:7873)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:7881)
    FuncDecl: quals=None (at pp.c:7881)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__Resource__release', quals=[] (at pp.c:7881)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startVReg', quals=[], storage=['inline', 'static'] (at pp.c:7889)
    FuncDecl: quals=None (at pp.c:7889)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startVReg', quals=[] (at pp.c:7889)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__stopVReg', quals=[], storage=['static'] (at pp.c:7891)
    FuncDecl: quals=None (at pp.c:7891)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__stopVReg', quals=[] (at pp.c:7891)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__startOscillator', quals=[], storage=['inline', 'static'] (at pp.c:7899)
    FuncDecl: quals=None (at pp.c:7899)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__startOscillator', quals=[] (at pp.c:7899)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Power__rxOn', quals=[], storage=['inline', 'static'] (at pp.c:7901)
    FuncDecl: quals=None (at pp.c:7901)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Power__rxOn', quals=[] (at pp.c:7901)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getExtAddr', quals=[], storage=['inline', 'static'] (at pp.c:7903)
    FuncDecl: quals=None (at pp.c:7903)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getExtAddr', quals=[] (at pp.c:7903)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getShortAddr', quals=[], storage=['static'] (at pp.c:7907)
    FuncDecl: quals=None (at pp.c:7907)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getShortAddr', quals=[] (at pp.c:7907)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__getPanAddr', quals=[], storage=['inline', 'static'] (at pp.c:7915)
    FuncDecl: quals=None (at pp.c:7915)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__getPanAddr', quals=[] (at pp.c:7915)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__sync', quals=[], storage=['inline', 'static'] (at pp.c:7917)
    FuncDecl: quals=None (at pp.c:7917)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__sync', quals=[] (at pp.c:7917)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[], storage=['inline', 'static'] (at pp.c:7919)
    FuncDecl: quals=None (at pp.c:7919)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[] (at pp.c:7919)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[], storage=['inline', 'static'] (at pp.c:7921)
    FuncDecl: quals=None (at pp.c:7921)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[] (at pp.c:7921)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[], storage=['inline', 'static'] (at pp.c:7928)
    FuncDecl: quals=None (at pp.c:7928)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[] (at pp.c:7928)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ControlP__SyncResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:7938)
    FuncDecl: quals=None (at pp.c:7938)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SyncResource__granted', quals=[] (at pp.c:7938)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:7940)
    FuncDecl: quals=None (at pp.c:7940)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__SpiResource__granted', quals=[] (at pp.c:7940)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__RssiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:7945)
    FuncDecl: quals=None (at pp.c:7945)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__RssiResource__granted', quals=[] (at pp.c:7945)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__StartupTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:7947)
    FuncDecl: quals=None (at pp.c:7947)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__StartupTimer__fired', quals=[] (at pp.c:7947)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__InterruptCCA__fired', quals=[], storage=['inline', 'static'] (at pp.c:7957)
    FuncDecl: quals=None (at pp.c:7957)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__InterruptCCA__fired', quals=[] (at pp.c:7957)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__sync__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7959)
    FuncDecl: quals=None (at pp.c:7959)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__sync__runTask', quals=[] (at pp.c:7959)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__syncDone__runTask', quals=[], storage=['inline', 'static'] (at pp.c:7963)
    FuncDecl: quals=None (at pp.c:7963)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__syncDone__runTask', quals=[] (at pp.c:7963)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__writeFsctrl', quals=[], storage=['static'] (at pp.c:7973)
    FuncDecl: quals=None (at pp.c:7973)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeFsctrl', quals=[] (at pp.c:7973)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__writeMdmctrl0', quals=[], storage=['static'] (at pp.c:7975)
    FuncDecl: quals=None (at pp.c:7975)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeMdmctrl0', quals=[] (at pp.c:7975)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__writeId', quals=[], storage=['static'] (at pp.c:7977)
    FuncDecl: quals=None (at pp.c:7977)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ControlP__writeId', quals=[] (at pp.c:7977)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ControlP__ReadRssi__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:7979)
    FuncDecl: quals=None (at pp.c:7979)
      ParamList:  (at pp.c:7979)
        Decl: name='error', quals=[], storage=[] (at pp.c:7979)
          TypeDecl: declname='error', quals=[] (at pp.c:7979)
            IdentifierType: names=['error_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:7979)
          TypeDecl: declname='data', quals=[] (at pp.c:7979)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420ControlP__ReadRssi__default__readDone', quals=[] (at pp.c:7979)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Compare__setEvent', quals=[], storage=['static'] (at pp.c:7981)
    FuncDecl: quals=None (at pp.c:7981)
      ParamList:  (at pp.c:7981)
        Decl: name='time', quals=[], storage=[] (at pp.c:7981)
          TypeDecl: declname='time', quals=[] (at pp.c:7981)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__setEvent', quals=[] (at pp.c:7981)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Compare__setEventFromNow', quals=[], storage=['static'] (at pp.c:7983)
    FuncDecl: quals=None (at pp.c:7983)
      ParamList:  (at pp.c:7983)
        Decl: name='delta', quals=[], storage=[] (at pp.c:7983)
          TypeDecl: declname='delta', quals=[] (at pp.c:7983)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__setEventFromNow', quals=[] (at pp.c:7983)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Timer__get', quals=[], storage=['static'] (at pp.c:7985)
    FuncDecl: quals=None (at pp.c:7985)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Timer__get', quals=[] (at pp.c:7985)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430AlarmC__1__Alarm__fired', quals=[], storage=['static'] (at pp.c:7987)
    FuncDecl: quals=None (at pp.c:7987)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Alarm__fired', quals=[] (at pp.c:7987)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430TimerControl__enableEvents', quals=[], storage=['static'] (at pp.c:7989)
    FuncDecl: quals=None (at pp.c:7989)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__enableEvents', quals=[] (at pp.c:7989)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430TimerControl__setControlAsCompare', quals=[], storage=['static'] (at pp.c:7991)
    FuncDecl: quals=None (at pp.c:7991)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__setControlAsCompare', quals=[] (at pp.c:7991)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430TimerControl__disableEvents', quals=[], storage=['static'] (at pp.c:8002)
    FuncDecl: quals=None (at pp.c:8002)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__disableEvents', quals=[] (at pp.c:8002)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:8004)
    FuncDecl: quals=None (at pp.c:8004)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:8004)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:8006)
    FuncDecl: quals=None (at pp.c:8006)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Init__init', quals=[] (at pp.c:8006)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430AlarmC__1__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:8008)
    FuncDecl: quals=None (at pp.c:8008)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Alarm__stop', quals=[] (at pp.c:8008)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Compare__fired', quals=[], storage=['inline', 'static'] (at pp.c:8013)
    FuncDecl: quals=None (at pp.c:8013)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__fired', quals=[] (at pp.c:8013)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Alarm__startAt', quals=[], storage=['inline', 'static'] (at pp.c:8024)
    FuncDecl: quals=None (at pp.c:8024)
      ParamList:  (at pp.c:8024)
        Decl: name='t0', quals=[], storage=[] (at pp.c:8024)
          TypeDecl: declname='t0', quals=[] (at pp.c:8024)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:8024)
          TypeDecl: declname='dt', quals=[] (at pp.c:8024)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Alarm__startAt', quals=[] (at pp.c:8024)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430AlarmC__1__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:8026)
    FuncDecl: quals=None (at pp.c:8026)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430AlarmC__1__Msp430Timer__overflow', quals=[] (at pp.c:8026)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__1__CounterFrom__get', quals=[], storage=['static'] (at pp.c:8028)
    FuncDecl: quals=None (at pp.c:8028)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__CounterFrom__get', quals=[] (at pp.c:8028)
        IdentifierType: names=['TransformCounterC__1__CounterFrom__size_type'] (at None)
  Decl: name='TransformCounterC__1__CounterFrom__isOverflowPending', quals=[], storage=['static'] (at pp.c:8035)
    FuncDecl: quals=None (at pp.c:8035)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__CounterFrom__isOverflowPending', quals=[] (at pp.c:8035)
        IdentifierType: names=['bool'] (at None)
  Decl: name='TransformCounterC__1__Counter__overflow', quals=[], storage=['static'] (at pp.c:8046)
    FuncDecl: quals=None (at pp.c:8046)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__Counter__overflow', quals=[] (at pp.c:8046)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformCounterC__1__m_upper', quals=[], storage=[] (at pp.c:8048)
    TypeDecl: declname='TransformCounterC__1__m_upper', quals=[] (at pp.c:8048)
      IdentifierType: names=['TransformCounterC__1__upper_count_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:8050)
    Enum: name='TransformCounterC__1____nesc_unnamed4363' (at pp.c:8050)
      EnumeratorList:  (at pp.c:8052)
        Enumerator: name='TransformCounterC__1__LOW_SHIFT_RIGHT' (at pp.c:8052)
          Constant: type='int', value='0' (at pp.c:8052)
        Enumerator: name='TransformCounterC__1__HIGH_SHIFT_LEFT' (at pp.c:8053)
          BinaryOp: op='-' (at pp.c:8053)
            BinaryOp: op='*' (at pp.c:8053)
              Constant: type='int', value='8' (at pp.c:8053)
              UnaryOp: op='sizeof' (at pp.c:8053)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['TransformCounterC__1__from_size_type'] (at None)
            ID: name='TransformCounterC__1__LOW_SHIFT_RIGHT' (at pp.c:8053)
        Enumerator: name='TransformCounterC__1__NUM_UPPER_BITS' (at pp.c:8054)
          BinaryOp: op='+' (at pp.c:8054)
            BinaryOp: op='-' (at pp.c:8054)
              BinaryOp: op='*' (at pp.c:8054)
                Constant: type='int', value='8' (at pp.c:8054)
                UnaryOp: op='sizeof' (at pp.c:8054)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
              BinaryOp: op='*' (at pp.c:8054)
                Constant: type='int', value='8' (at pp.c:8054)
                UnaryOp: op='sizeof' (at pp.c:8054)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__1__from_size_type'] (at None)
            Constant: type='int', value='0' (at pp.c:8054)
        Enumerator: name='TransformCounterC__1__OVERFLOW_MASK' (at pp.c:8058)
          TernaryOp:  (at pp.c:8058)
            ID: name='TransformCounterC__1__NUM_UPPER_BITS' (at pp.c:8058)
            BinaryOp: op='-' (at None)
              BinaryOp: op='<<' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformCounterC__1__upper_count_type'] (at None)
                  Constant: type='int', value='2' (at pp.c:8058)
                BinaryOp: op='-' (at pp.c:8058)
                  ID: name='TransformCounterC__1__NUM_UPPER_BITS' (at pp.c:8058)
                  Constant: type='int', value='1' (at pp.c:8058)
              Constant: type='int', value='1' (at pp.c:8058)
            Constant: type='int', value='0' (at pp.c:8058)
  Decl: name='TransformCounterC__1__Counter__get', quals=[], storage=['static'] (at pp.c:8061)
    FuncDecl: quals=None (at pp.c:8061)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__Counter__get', quals=[] (at pp.c:8061)
        IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
  Decl: name='TransformCounterC__1__CounterFrom__overflow', quals=[], storage=['inline', 'static'] (at pp.c:8063)
    FuncDecl: quals=None (at pp.c:8063)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformCounterC__1__CounterFrom__overflow', quals=[] (at pp.c:8063)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__fired', quals=[], storage=['static'] (at pp.c:8065)
    FuncDecl: quals=None (at pp.c:8065)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__fired', quals=[] (at pp.c:8065)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__AlarmFrom__startAt', quals=[], storage=['static'] (at pp.c:8067)
    FuncDecl: quals=None (at pp.c:8067)
      ParamList:  (at pp.c:8067)
        Decl: name='t0', quals=[], storage=[] (at pp.c:8067)
          TypeDecl: declname='t0', quals=[] (at pp.c:8067)
            IdentifierType: names=['TransformAlarmC__1__AlarmFrom__size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:8067)
          TypeDecl: declname='dt', quals=[] (at pp.c:8067)
            IdentifierType: names=['TransformAlarmC__1__AlarmFrom__size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__1__AlarmFrom__startAt', quals=[] (at pp.c:8067)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__AlarmFrom__stop', quals=[], storage=['static'] (at pp.c:8069)
    FuncDecl: quals=None (at pp.c:8069)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__AlarmFrom__stop', quals=[] (at pp.c:8069)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Counter__get', quals=[], storage=['static'] (at pp.c:8071)
    FuncDecl: quals=None (at pp.c:8071)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Counter__get', quals=[] (at pp.c:8071)
        IdentifierType: names=['TransformAlarmC__1__Counter__size_type'] (at None)
  Decl: name='TransformAlarmC__1__m_t0', quals=[], storage=[] (at pp.c:8073)
    TypeDecl: declname='TransformAlarmC__1__m_t0', quals=[] (at pp.c:8073)
      IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Decl: name='TransformAlarmC__1__m_dt', quals=[], storage=[] (at pp.c:8074)
    TypeDecl: declname='TransformAlarmC__1__m_dt', quals=[] (at pp.c:8074)
      IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:8076)
    Enum: name='TransformAlarmC__1____nesc_unnamed4364' (at pp.c:8076)
      EnumeratorList:  (at pp.c:8078)
        Enumerator: name='TransformAlarmC__1__MAX_DELAY_LOG2' (at pp.c:8078)
          BinaryOp: op='-' (at pp.c:8078)
            BinaryOp: op='-' (at pp.c:8078)
              BinaryOp: op='*' (at pp.c:8078)
                Constant: type='int', value='8' (at pp.c:8078)
                UnaryOp: op='sizeof' (at pp.c:8078)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['TransformAlarmC__1__from_size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:8078)
            Constant: type='int', value='0' (at pp.c:8078)
        Enumerator: name='TransformAlarmC__1__MAX_DELAY' (at pp.c:8079)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:8079)
            ID: name='TransformAlarmC__1__MAX_DELAY_LOG2' (at pp.c:8079)
  Decl: name='TransformAlarmC__1__Alarm__getNow', quals=[], storage=['inline', 'static'] (at pp.c:8082)
    FuncDecl: quals=None (at pp.c:8082)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__getNow', quals=[] (at pp.c:8082)
        IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:8084)
    FuncDecl: quals=None (at pp.c:8084)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__stop', quals=[] (at pp.c:8084)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__set_alarm', quals=[], storage=['static'] (at pp.c:8089)
    FuncDecl: quals=None (at pp.c:8089)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__set_alarm', quals=[] (at pp.c:8089)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__startAt', quals=[], storage=['static'] (at pp.c:8091)
    FuncDecl: quals=None (at pp.c:8091)
      ParamList:  (at pp.c:8091)
        Decl: name='t0', quals=[], storage=[] (at pp.c:8091)
          TypeDecl: declname='t0', quals=[] (at pp.c:8091)
            IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
        Decl: name='dt', quals=[], storage=[] (at pp.c:8091)
          TypeDecl: declname='dt', quals=[] (at pp.c:8091)
            IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__startAt', quals=[] (at pp.c:8091)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Alarm__start', quals=[], storage=['inline', 'static'] (at pp.c:8101)
    FuncDecl: quals=None (at pp.c:8101)
      ParamList:  (at pp.c:8101)
        Decl: name='dt', quals=[], storage=[] (at pp.c:8101)
          TypeDecl: declname='dt', quals=[] (at pp.c:8101)
            IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Alarm__start', quals=[] (at pp.c:8101)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__AlarmFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:8106)
    FuncDecl: quals=None (at pp.c:8106)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__AlarmFrom__fired', quals=[] (at pp.c:8106)
        IdentifierType: names=['void'] (at None)
  Decl: name='TransformAlarmC__1__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:8108)
    FuncDecl: quals=None (at pp.c:8108)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='TransformAlarmC__1__Counter__overflow', quals=[] (at pp.c:8108)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__5__HplGeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:8110)
    FuncDecl: quals=None (at pp.c:8110)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__5__HplGeneralIO__makeInput', quals=[] (at pp.c:8110)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__5__HplGeneralIO__get', quals=[], storage=['static'] (at pp.c:8112)
    FuncDecl: quals=None (at pp.c:8112)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__5__HplGeneralIO__get', quals=[] (at pp.c:8112)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__5__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:8114)
    FuncDecl: quals=None (at pp.c:8114)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__5__GeneralIO__get', quals=[] (at pp.c:8114)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__5__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:8115)
    FuncDecl: quals=None (at pp.c:8115)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__5__GeneralIO__makeInput', quals=[] (at pp.c:8115)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__6__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:8117)
    FuncDecl: quals=None (at pp.c:8117)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__HplGeneralIO__makeOutput', quals=[] (at pp.c:8117)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__6__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:8119)
    FuncDecl: quals=None (at pp.c:8119)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__HplGeneralIO__set', quals=[] (at pp.c:8119)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__6__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:8124)
    FuncDecl: quals=None (at pp.c:8124)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__HplGeneralIO__clr', quals=[] (at pp.c:8124)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__6__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:8126)
    FuncDecl: quals=None (at pp.c:8126)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__GeneralIO__set', quals=[] (at pp.c:8126)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__6__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:8127)
    FuncDecl: quals=None (at pp.c:8127)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__GeneralIO__clr', quals=[] (at pp.c:8127)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__6__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:8132)
    FuncDecl: quals=None (at pp.c:8132)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__6__GeneralIO__makeOutput', quals=[] (at pp.c:8132)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__7__HplGeneralIO__get', quals=[], storage=['static'] (at pp.c:8134)
    FuncDecl: quals=None (at pp.c:8134)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__HplGeneralIO__get', quals=[] (at pp.c:8134)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__7__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:8136)
    FuncDecl: quals=None (at pp.c:8136)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__7__GeneralIO__get', quals=[] (at pp.c:8136)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__8__HplGeneralIO__get', quals=[], storage=['static'] (at pp.c:8138)
    FuncDecl: quals=None (at pp.c:8138)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__8__HplGeneralIO__get', quals=[] (at pp.c:8138)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__8__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:8140)
    FuncDecl: quals=None (at pp.c:8140)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__8__GeneralIO__get', quals=[] (at pp.c:8140)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__9__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:8142)
    FuncDecl: quals=None (at pp.c:8142)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__makeOutput', quals=[] (at pp.c:8142)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:8144)
    FuncDecl: quals=None (at pp.c:8144)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__set', quals=[] (at pp.c:8144)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:8149)
    FuncDecl: quals=None (at pp.c:8149)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__clr', quals=[] (at pp.c:8149)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:8151)
    FuncDecl: quals=None (at pp.c:8151)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__set', quals=[] (at pp.c:8151)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:8152)
    FuncDecl: quals=None (at pp.c:8152)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__clr', quals=[] (at pp.c:8152)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__9__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:8157)
    FuncDecl: quals=None (at pp.c:8157)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__9__GeneralIO__makeOutput', quals=[] (at pp.c:8157)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__10__HplGeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:8159)
    FuncDecl: quals=None (at pp.c:8159)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__10__HplGeneralIO__makeInput', quals=[] (at pp.c:8159)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__10__HplGeneralIO__get', quals=[], storage=['static'] (at pp.c:8161)
    FuncDecl: quals=None (at pp.c:8161)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__10__HplGeneralIO__get', quals=[] (at pp.c:8161)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__10__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:8163)
    FuncDecl: quals=None (at pp.c:8163)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__10__GeneralIO__get', quals=[] (at pp.c:8163)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__10__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:8164)
    FuncDecl: quals=None (at pp.c:8164)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__10__GeneralIO__makeInput', quals=[] (at pp.c:8164)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:8166)
    FuncDecl: quals=None (at pp.c:8166)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__makeOutput', quals=[] (at pp.c:8166)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__HplGeneralIO__set', quals=[], storage=['static'] (at pp.c:8168)
    FuncDecl: quals=None (at pp.c:8168)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__set', quals=[] (at pp.c:8168)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:8173)
    FuncDecl: quals=None (at pp.c:8173)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__clr', quals=[] (at pp.c:8173)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:8175)
    FuncDecl: quals=None (at pp.c:8175)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__set', quals=[] (at pp.c:8175)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:8176)
    FuncDecl: quals=None (at pp.c:8176)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__clr', quals=[] (at pp.c:8176)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__11__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:8181)
    FuncDecl: quals=None (at pp.c:8181)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__11__GeneralIO__makeOutput', quals=[] (at pp.c:8181)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430Capture__clearOverflow', quals=[], storage=['static'] (at pp.c:8183)
    FuncDecl: quals=None (at pp.c:8183)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430Capture__clearOverflow', quals=[] (at pp.c:8183)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Capture__captured', quals=[], storage=['static'] (at pp.c:8185)
    FuncDecl: quals=None (at pp.c:8185)
      ParamList:  (at pp.c:8185)
        Decl: name='time', quals=[], storage=[] (at pp.c:8185)
          TypeDecl: declname='time', quals=[] (at pp.c:8185)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__captured', quals=[] (at pp.c:8185)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430TimerControl__setControlAsCapture', quals=[], storage=['static'] (at pp.c:8187)
    FuncDecl: quals=None (at pp.c:8187)
      ParamList:  (at pp.c:8187)
        Decl: name='cm', quals=[], storage=[] (at pp.c:8187)
          TypeDecl: declname='cm', quals=[] (at pp.c:8187)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__setControlAsCapture', quals=[] (at pp.c:8187)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430TimerControl__enableEvents', quals=[], storage=['static'] (at pp.c:8189)
    FuncDecl: quals=None (at pp.c:8189)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__enableEvents', quals=[] (at pp.c:8189)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430TimerControl__disableEvents', quals=[], storage=['static'] (at pp.c:8190)
    FuncDecl: quals=None (at pp.c:8190)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__disableEvents', quals=[] (at pp.c:8190)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static'] (at pp.c:8192)
    FuncDecl: quals=None (at pp.c:8192)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:8192)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__GeneralIO__selectIOFunc', quals=[], storage=['static'] (at pp.c:8194)
    FuncDecl: quals=None (at pp.c:8194)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__GeneralIO__selectIOFunc', quals=[] (at pp.c:8194)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__GeneralIO__selectModuleFunc', quals=[], storage=['static'] (at pp.c:8196)
    FuncDecl: quals=None (at pp.c:8196)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__GeneralIO__selectModuleFunc', quals=[] (at pp.c:8196)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__enableCapture', quals=[], storage=['static'] (at pp.c:8198)
    FuncDecl: quals=None (at pp.c:8198)
      ParamList:  (at pp.c:8198)
        Decl: name='mode', quals=[], storage=[] (at pp.c:8198)
          TypeDecl: declname='mode', quals=[] (at pp.c:8198)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='GpioCaptureC__0__enableCapture', quals=[] (at pp.c:8198)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='GpioCaptureC__0__Capture__captureRisingEdge', quals=[], storage=['inline', 'static'] (at pp.c:8200)
    FuncDecl: quals=None (at pp.c:8200)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__captureRisingEdge', quals=[] (at pp.c:8200)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='GpioCaptureC__0__Capture__captureFallingEdge', quals=[], storage=['inline', 'static'] (at pp.c:8204)
    FuncDecl: quals=None (at pp.c:8204)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__captureFallingEdge', quals=[] (at pp.c:8204)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='GpioCaptureC__0__Capture__disable', quals=[], storage=['inline', 'static'] (at pp.c:8208)
    FuncDecl: quals=None (at pp.c:8208)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Capture__disable', quals=[] (at pp.c:8208)
        IdentifierType: names=['void'] (at None)
  Decl: name='GpioCaptureC__0__Msp430Capture__captured', quals=[], storage=['inline', 'static'] (at pp.c:8215)
    FuncDecl: quals=None (at pp.c:8215)
      ParamList:  (at pp.c:8215)
        Decl: name='time', quals=[], storage=[] (at pp.c:8215)
          TypeDecl: declname='time', quals=[] (at pp.c:8215)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='GpioCaptureC__0__Msp430Capture__captured', quals=[] (at pp.c:8215)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__fired', quals=[], storage=['static'] (at pp.c:8217)
    FuncDecl: quals=None (at pp.c:8217)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__fired', quals=[] (at pp.c:8217)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port26__fired', quals=[], storage=['static'] (at pp.c:8219)
    FuncDecl: quals=None (at pp.c:8219)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port26__fired', quals=[] (at pp.c:8219)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port17__fired', quals=[], storage=['static'] (at pp.c:8221)
    FuncDecl: quals=None (at pp.c:8221)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port17__fired', quals=[] (at pp.c:8221)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port21__fired', quals=[], storage=['static'] (at pp.c:8223)
    FuncDecl: quals=None (at pp.c:8223)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port21__fired', quals=[] (at pp.c:8223)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port12__fired', quals=[], storage=['static'] (at pp.c:8225)
    FuncDecl: quals=None (at pp.c:8225)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port12__fired', quals=[] (at pp.c:8225)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port24__fired', quals=[], storage=['static'] (at pp.c:8227)
    FuncDecl: quals=None (at pp.c:8227)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port24__fired', quals=[] (at pp.c:8227)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port15__fired', quals=[], storage=['static'] (at pp.c:8229)
    FuncDecl: quals=None (at pp.c:8229)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port15__fired', quals=[] (at pp.c:8229)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port27__fired', quals=[], storage=['static'] (at pp.c:8231)
    FuncDecl: quals=None (at pp.c:8231)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port27__fired', quals=[] (at pp.c:8231)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__fired', quals=[], storage=['static'] (at pp.c:8233)
    FuncDecl: quals=None (at pp.c:8233)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__fired', quals=[] (at pp.c:8233)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port22__fired', quals=[], storage=['static'] (at pp.c:8235)
    FuncDecl: quals=None (at pp.c:8235)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port22__fired', quals=[] (at pp.c:8235)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port13__fired', quals=[], storage=['static'] (at pp.c:8237)
    FuncDecl: quals=None (at pp.c:8237)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port13__fired', quals=[] (at pp.c:8237)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port25__fired', quals=[], storage=['static'] (at pp.c:8239)
    FuncDecl: quals=None (at pp.c:8239)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port25__fired', quals=[] (at pp.c:8239)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port16__fired', quals=[], storage=['static'] (at pp.c:8241)
    FuncDecl: quals=None (at pp.c:8241)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port16__fired', quals=[] (at pp.c:8241)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port20__fired', quals=[], storage=['static'] (at pp.c:8243)
    FuncDecl: quals=None (at pp.c:8243)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port20__fired', quals=[] (at pp.c:8243)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port11__fired', quals=[], storage=['static'] (at pp.c:8245)
    FuncDecl: quals=None (at pp.c:8245)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port11__fired', quals=[] (at pp.c:8245)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port23__fired', quals=[], storage=['static'] (at pp.c:8247)
    FuncDecl: quals=None (at pp.c:8247)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port23__fired', quals=[] (at pp.c:8247)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_PORT1_VECTOR', quals=[], storage=[] (at pp.c:8249)
    FuncDecl: quals=None (at pp.c:8249)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_PORT1_VECTOR', quals=[] (at pp.c:8249)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port11__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8251)
    FuncDecl: quals=None (at pp.c:8251)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port11__default__fired', quals=[] (at pp.c:8251)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port12__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8252)
    FuncDecl: quals=None (at pp.c:8252)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port12__default__fired', quals=[] (at pp.c:8252)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port13__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8253)
    FuncDecl: quals=None (at pp.c:8253)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port13__default__fired', quals=[] (at pp.c:8253)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port15__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8255)
    FuncDecl: quals=None (at pp.c:8255)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port15__default__fired', quals=[] (at pp.c:8255)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port16__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8256)
    FuncDecl: quals=None (at pp.c:8256)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port16__default__fired', quals=[] (at pp.c:8256)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port17__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8257)
    FuncDecl: quals=None (at pp.c:8257)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port17__default__fired', quals=[] (at pp.c:8257)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__enable', quals=[], storage=['inline', 'static'] (at pp.c:8258)
    FuncDecl: quals=None (at pp.c:8258)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__enable', quals=[] (at pp.c:8258)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__enable', quals=[], storage=['inline', 'static'] (at pp.c:8262)
    FuncDecl: quals=None (at pp.c:8262)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__enable', quals=[] (at pp.c:8262)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__disable', quals=[], storage=['inline', 'static'] (at pp.c:8266)
    FuncDecl: quals=None (at pp.c:8266)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__disable', quals=[] (at pp.c:8266)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__disable', quals=[], storage=['inline', 'static'] (at pp.c:8270)
    FuncDecl: quals=None (at pp.c:8270)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__disable', quals=[] (at pp.c:8270)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__clear', quals=[], storage=['inline', 'static'] (at pp.c:8274)
    FuncDecl: quals=None (at pp.c:8274)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__clear', quals=[] (at pp.c:8274)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port11__clear', quals=[], storage=['inline', 'static'] (at pp.c:8275)
    FuncDecl: quals=None (at pp.c:8275)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port11__clear', quals=[] (at pp.c:8275)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port12__clear', quals=[], storage=['inline', 'static'] (at pp.c:8276)
    FuncDecl: quals=None (at pp.c:8276)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port12__clear', quals=[] (at pp.c:8276)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port13__clear', quals=[], storage=['inline', 'static'] (at pp.c:8277)
    FuncDecl: quals=None (at pp.c:8277)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port13__clear', quals=[] (at pp.c:8277)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__clear', quals=[], storage=['inline', 'static'] (at pp.c:8278)
    FuncDecl: quals=None (at pp.c:8278)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__clear', quals=[] (at pp.c:8278)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port15__clear', quals=[], storage=['inline', 'static'] (at pp.c:8279)
    FuncDecl: quals=None (at pp.c:8279)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port15__clear', quals=[] (at pp.c:8279)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port16__clear', quals=[], storage=['inline', 'static'] (at pp.c:8280)
    FuncDecl: quals=None (at pp.c:8280)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port16__clear', quals=[] (at pp.c:8280)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port17__clear', quals=[], storage=['inline', 'static'] (at pp.c:8281)
    FuncDecl: quals=None (at pp.c:8281)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port17__clear', quals=[] (at pp.c:8281)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port10__edge', quals=[], storage=['inline', 'static'] (at pp.c:8290)
    FuncDecl: quals=None (at pp.c:8290)
      ParamList:  (at pp.c:8290)
        Decl: name='l2h', quals=[], storage=[] (at pp.c:8290)
          TypeDecl: declname='l2h', quals=[] (at pp.c:8290)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port10__edge', quals=[] (at pp.c:8290)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port14__edge', quals=[], storage=['inline', 'static'] (at pp.c:8292)
    FuncDecl: quals=None (at pp.c:8292)
      ParamList:  (at pp.c:8292)
        Decl: name='l2h', quals=[], storage=[] (at pp.c:8292)
          TypeDecl: declname='l2h', quals=[] (at pp.c:8292)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port14__edge', quals=[] (at pp.c:8292)
        IdentifierType: names=['void'] (at None)
  Decl: name='sig_PORT2_VECTOR', quals=[], storage=[] (at pp.c:8294)
    FuncDecl: quals=None (at pp.c:8294)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='sig_PORT2_VECTOR', quals=[] (at pp.c:8294)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port20__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8296)
    FuncDecl: quals=None (at pp.c:8296)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port20__default__fired', quals=[] (at pp.c:8296)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port21__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8297)
    FuncDecl: quals=None (at pp.c:8297)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port21__default__fired', quals=[] (at pp.c:8297)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port22__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8298)
    FuncDecl: quals=None (at pp.c:8298)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port22__default__fired', quals=[] (at pp.c:8298)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port23__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8299)
    FuncDecl: quals=None (at pp.c:8299)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port23__default__fired', quals=[] (at pp.c:8299)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port24__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8300)
    FuncDecl: quals=None (at pp.c:8300)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port24__default__fired', quals=[] (at pp.c:8300)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port25__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8301)
    FuncDecl: quals=None (at pp.c:8301)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port25__default__fired', quals=[] (at pp.c:8301)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port26__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8302)
    FuncDecl: quals=None (at pp.c:8302)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port26__default__fired', quals=[] (at pp.c:8302)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port27__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:8303)
    FuncDecl: quals=None (at pp.c:8303)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port27__default__fired', quals=[] (at pp.c:8303)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port20__clear', quals=[], storage=['inline', 'static'] (at pp.c:8305)
    FuncDecl: quals=None (at pp.c:8305)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port20__clear', quals=[] (at pp.c:8305)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port21__clear', quals=[], storage=['inline', 'static'] (at pp.c:8306)
    FuncDecl: quals=None (at pp.c:8306)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port21__clear', quals=[] (at pp.c:8306)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port22__clear', quals=[], storage=['inline', 'static'] (at pp.c:8307)
    FuncDecl: quals=None (at pp.c:8307)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port22__clear', quals=[] (at pp.c:8307)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port23__clear', quals=[], storage=['inline', 'static'] (at pp.c:8308)
    FuncDecl: quals=None (at pp.c:8308)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port23__clear', quals=[] (at pp.c:8308)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port24__clear', quals=[], storage=['inline', 'static'] (at pp.c:8309)
    FuncDecl: quals=None (at pp.c:8309)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port24__clear', quals=[] (at pp.c:8309)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port25__clear', quals=[], storage=['inline', 'static'] (at pp.c:8310)
    FuncDecl: quals=None (at pp.c:8310)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port25__clear', quals=[] (at pp.c:8310)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port26__clear', quals=[], storage=['inline', 'static'] (at pp.c:8311)
    FuncDecl: quals=None (at pp.c:8311)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port26__clear', quals=[] (at pp.c:8311)
        IdentifierType: names=['void'] (at None)
  Decl: name='HplMsp430InterruptP__Port27__clear', quals=[], storage=['inline', 'static'] (at pp.c:8312)
    FuncDecl: quals=None (at pp.c:8312)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='HplMsp430InterruptP__Port27__clear', quals=[] (at pp.c:8312)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__clear', quals=[], storage=['static'] (at pp.c:8314)
    FuncDecl: quals=None (at pp.c:8314)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__clear', quals=[] (at pp.c:8314)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__disable', quals=[], storage=['static'] (at pp.c:8316)
    FuncDecl: quals=None (at pp.c:8316)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__disable', quals=[] (at pp.c:8316)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__edge', quals=[], storage=['static'] (at pp.c:8318)
    FuncDecl: quals=None (at pp.c:8318)
      ParamList:  (at pp.c:8318)
        Decl: name='low_to_high', quals=[], storage=[] (at pp.c:8318)
          TypeDecl: declname='low_to_high', quals=[] (at pp.c:8318)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__edge', quals=[] (at pp.c:8318)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__enable', quals=[], storage=['static'] (at pp.c:8320)
    FuncDecl: quals=None (at pp.c:8320)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__enable', quals=[] (at pp.c:8320)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__Interrupt__fired', quals=[], storage=['static'] (at pp.c:8322)
    FuncDecl: quals=None (at pp.c:8322)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__Interrupt__fired', quals=[] (at pp.c:8322)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__0__enable', quals=[], storage=['inline', 'static'] (at pp.c:8324)
    FuncDecl: quals=None (at pp.c:8324)
      ParamList:  (at pp.c:8324)
        Decl: name='rising', quals=[], storage=[] (at pp.c:8324)
          TypeDecl: declname='rising', quals=[] (at pp.c:8324)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__enable', quals=[] (at pp.c:8324)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[], storage=['inline', 'static'] (at pp.c:8333)
    FuncDecl: quals=None (at pp.c:8333)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[] (at pp.c:8333)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__0__Interrupt__disable', quals=[], storage=['inline', 'static'] (at pp.c:8341)
    FuncDecl: quals=None (at pp.c:8341)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__Interrupt__disable', quals=[] (at pp.c:8341)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__0__HplInterrupt__fired', quals=[], storage=['inline', 'static'] (at pp.c:8349)
    FuncDecl: quals=None (at pp.c:8349)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__fired', quals=[] (at pp.c:8349)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__clear', quals=[], storage=['static'] (at pp.c:8351)
    FuncDecl: quals=None (at pp.c:8351)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__clear', quals=[] (at pp.c:8351)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__disable', quals=[], storage=['static'] (at pp.c:8353)
    FuncDecl: quals=None (at pp.c:8353)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__disable', quals=[] (at pp.c:8353)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__edge', quals=[], storage=['static'] (at pp.c:8355)
    FuncDecl: quals=None (at pp.c:8355)
      ParamList:  (at pp.c:8355)
        Decl: name='low_to_high', quals=[], storage=[] (at pp.c:8355)
          TypeDecl: declname='low_to_high', quals=[] (at pp.c:8355)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__edge', quals=[] (at pp.c:8355)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__enable', quals=[], storage=['static'] (at pp.c:8357)
    FuncDecl: quals=None (at pp.c:8357)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__enable', quals=[] (at pp.c:8357)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__Interrupt__fired', quals=[], storage=['static'] (at pp.c:8359)
    FuncDecl: quals=None (at pp.c:8359)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__Interrupt__fired', quals=[] (at pp.c:8359)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430InterruptC__1__enable', quals=[], storage=['inline', 'static'] (at pp.c:8361)
    FuncDecl: quals=None (at pp.c:8361)
      ParamList:  (at pp.c:8361)
        Decl: name='rising', quals=[], storage=[] (at pp.c:8361)
          TypeDecl: declname='rising', quals=[] (at pp.c:8361)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__enable', quals=[] (at pp.c:8361)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[], storage=['inline', 'static'] (at pp.c:8363)
    FuncDecl: quals=None (at pp.c:8363)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[] (at pp.c:8363)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__1__Interrupt__disable', quals=[], storage=['inline', 'static'] (at pp.c:8367)
    FuncDecl: quals=None (at pp.c:8367)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__Interrupt__disable', quals=[] (at pp.c:8367)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Msp430InterruptC__1__HplInterrupt__fired', quals=[], storage=['inline', 'static'] (at pp.c:8375)
    FuncDecl: quals=None (at pp.c:8375)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__fired', quals=[] (at pp.c:8375)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__SpiPacket__send', quals=[], storage=['static'] (at pp.c:8377)
    FuncDecl: quals=None (at pp.c:8377)
      ParamList:  (at pp.c:8379)
        Decl: name='txBuf', quals=[], storage=[] (at pp.c:8379)
          PtrDecl: quals=[] (at pp.c:8379)
            TypeDecl: declname='txBuf', quals=[] (at pp.c:8379)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rxBuf', quals=[], storage=[] (at pp.c:8381)
          PtrDecl: quals=[] (at pp.c:8381)
            TypeDecl: declname='rxBuf', quals=[] (at pp.c:8381)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8390)
          TypeDecl: declname='len', quals=[] (at pp.c:8390)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiPacket__send', quals=[] (at pp.c:8377)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__writeDone', quals=[], storage=['static'] (at pp.c:8392)
    FuncDecl: quals=None (at pp.c:8392)
      ParamList:  (at pp.c:8394)
        Decl: name='arg_0x102486328', quals=[], storage=[] (at pp.c:8394)
          TypeDecl: declname='arg_0x102486328', quals=[] (at pp.c:8394)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8396)
          PtrDecl: quals=[] (at pp.c:8396)
            TypeDecl: declname='data', quals=[] (at pp.c:8396)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:8396)
          TypeDecl: declname='length', quals=[] (at pp.c:8396)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8396)
          TypeDecl: declname='error', quals=[] (at pp.c:8396)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__writeDone', quals=[] (at pp.c:8392)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__readDone', quals=[], storage=['static'] (at pp.c:8398)
    FuncDecl: quals=None (at pp.c:8398)
      ParamList:  (at pp.c:8400)
        Decl: name='arg_0x102486328', quals=[], storage=[] (at pp.c:8400)
          TypeDecl: declname='arg_0x102486328', quals=[] (at pp.c:8400)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8402)
          PtrDecl: quals=[] (at pp.c:8402)
            TypeDecl: declname='data', quals=[] (at pp.c:8402)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:8402)
          TypeDecl: declname='length', quals=[] (at pp.c:8402)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8402)
          TypeDecl: declname='error', quals=[] (at pp.c:8402)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__readDone', quals=[] (at pp.c:8398)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__ChipSpiResource__releasing', quals=[], storage=['static'] (at pp.c:8404)
    FuncDecl: quals=None (at pp.c:8404)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__ChipSpiResource__releasing', quals=[] (at pp.c:8404)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__SpiByte__write', quals=[], storage=['static'] (at pp.c:8406)
    FuncDecl: quals=None (at pp.c:8406)
      ParamList:  (at pp.c:8406)
        Decl: name='tx', quals=[], storage=[] (at pp.c:8406)
          TypeDecl: declname='tx', quals=[] (at pp.c:8406)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiByte__write', quals=[] (at pp.c:8406)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420SpiP__WorkingState__toIdle', quals=[], storage=['static'] (at pp.c:8408)
    FuncDecl: quals=None (at pp.c:8408)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__WorkingState__toIdle', quals=[] (at pp.c:8408)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__WorkingState__isIdle', quals=[], storage=['static'] (at pp.c:8413)
    FuncDecl: quals=None (at pp.c:8413)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__WorkingState__isIdle', quals=[] (at pp.c:8413)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420SpiP__WorkingState__requestState', quals=[], storage=['static'] (at pp.c:8415)
    FuncDecl: quals=None (at pp.c:8415)
      ParamList:  (at pp.c:8415)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:8415)
          TypeDecl: declname='reqState', quals=[] (at pp.c:8415)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__WorkingState__requestState', quals=[] (at pp.c:8415)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__release', quals=[], storage=['static'] (at pp.c:8417)
    FuncDecl: quals=None (at pp.c:8417)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__release', quals=[] (at pp.c:8417)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__immediateRequest', quals=[], storage=['static'] (at pp.c:8419)
    FuncDecl: quals=None (at pp.c:8419)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__immediateRequest', quals=[] (at pp.c:8419)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__request', quals=[], storage=['static'] (at pp.c:8421)
    FuncDecl: quals=None (at pp.c:8421)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__request', quals=[] (at pp.c:8421)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__isOwner', quals=[], storage=['static'] (at pp.c:8423)
    FuncDecl: quals=None (at pp.c:8423)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__isOwner', quals=[] (at pp.c:8423)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420SpiP__Resource__granted', quals=[], storage=['static'] (at pp.c:8425)
    FuncDecl: quals=None (at pp.c:8425)
      ParamList:  (at pp.c:8427)
        Decl: name='arg_0x102488158', quals=[], storage=[] (at pp.c:8427)
          TypeDecl: declname='arg_0x102488158', quals=[] (at pp.c:8427)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__granted', quals=[] (at pp.c:8425)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__grant__postTask', quals=[], storage=['static'] (at pp.c:8429)
    FuncDecl: quals=None (at pp.c:8429)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__grant__postTask', quals=[] (at pp.c:8429)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:8431)
    Enum: name='CC2420SpiP____nesc_unnamed4365' (at pp.c:8431)
      EnumeratorList:  (at pp.c:8433)
        Enumerator: name='CC2420SpiP__grant' (at pp.c:8433)
          Constant: type='int', value='18U' (at pp.c:8433)
  Typedef: name='CC2420SpiP____nesc_sillytask_grant', quals=[], storage=['typedef'] (at pp.c:8436)
    ArrayDecl:  (at pp.c:8436)
      TypeDecl: declname='CC2420SpiP____nesc_sillytask_grant', quals=[] (at pp.c:8436)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420SpiP__grant' (at pp.c:8436)
  Decl: name=None, quals=[], storage=[] (at pp.c:8438)
    Enum: name='CC2420SpiP____nesc_unnamed4366' (at pp.c:8438)
      EnumeratorList:  (at pp.c:8439)
        Enumerator: name='CC2420SpiP__RESOURCE_COUNT' (at pp.c:8439)
          Constant: type='int', value='5U' (at pp.c:8439)
        Enumerator: name='CC2420SpiP__NO_HOLDER' (at pp.c:8440)
          Constant: type='int', value='0xFF' (at pp.c:8440)
  Decl: name=None, quals=[], storage=[] (at pp.c:8444)
    Enum: name='CC2420SpiP____nesc_unnamed4367' (at pp.c:8444)
      EnumeratorList:  (at pp.c:8445)
        Enumerator: name='CC2420SpiP__S_IDLE' (at pp.c:8445)
        Enumerator: name='CC2420SpiP__S_BUSY' (at pp.c:8446)
  Decl: name='CC2420SpiP__m_addr', quals=[], storage=[] (at pp.c:8450)
    TypeDecl: declname='CC2420SpiP__m_addr', quals=[] (at pp.c:8450)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420SpiP__m_requests', quals=[], storage=[] (at pp.c:8453)
    TypeDecl: declname='CC2420SpiP__m_requests', quals=[] (at pp.c:8453)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:8453)
  Decl: name='CC2420SpiP__m_holder', quals=[], storage=[] (at pp.c:8456)
    TypeDecl: declname='CC2420SpiP__m_holder', quals=[] (at pp.c:8456)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='CC2420SpiP__NO_HOLDER' (at pp.c:8456)
  Decl: name='CC2420SpiP__release', quals=[], storage=[] (at pp.c:8459)
    TypeDecl: declname='CC2420SpiP__release', quals=[] (at pp.c:8459)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420SpiP__attemptRelease', quals=[], storage=['static'] (at pp.c:8462)
    FuncDecl: quals=None (at pp.c:8462)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__attemptRelease', quals=[] (at pp.c:8462)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__ChipSpiResource__abortRelease', quals=[], storage=['inline', 'static'] (at pp.c:8470)
    FuncDecl: quals=None (at pp.c:8470)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__ChipSpiResource__abortRelease', quals=[] (at pp.c:8470)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[], storage=['inline', 'static'] (at pp.c:8477)
    FuncDecl: quals=None (at pp.c:8477)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[] (at pp.c:8477)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__request', quals=[], storage=['static'] (at pp.c:8482)
    FuncDecl: quals=None (at pp.c:8482)
      ParamList:  (at pp.c:8482)
        Decl: name='id', quals=[], storage=[] (at pp.c:8482)
          TypeDecl: declname='id', quals=[] (at pp.c:8482)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__request', quals=[] (at pp.c:8482)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:8484)
    FuncDecl: quals=None (at pp.c:8484)
      ParamList:  (at pp.c:8484)
        Decl: name='id', quals=[], storage=[] (at pp.c:8484)
          TypeDecl: declname='id', quals=[] (at pp.c:8484)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__immediateRequest', quals=[] (at pp.c:8484)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__release', quals=[], storage=['static'] (at pp.c:8486)
    FuncDecl: quals=None (at pp.c:8486)
      ParamList:  (at pp.c:8486)
        Decl: name='id', quals=[], storage=[] (at pp.c:8486)
          TypeDecl: declname='id', quals=[] (at pp.c:8486)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__release', quals=[] (at pp.c:8486)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Resource__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:8488)
    FuncDecl: quals=None (at pp.c:8488)
      ParamList:  (at pp.c:8488)
        Decl: name='id', quals=[], storage=[] (at pp.c:8488)
          TypeDecl: declname='id', quals=[] (at pp.c:8488)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__isOwner', quals=[] (at pp.c:8488)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420SpiP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:8494)
    FuncDecl: quals=None (at pp.c:8494)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiResource__granted', quals=[] (at pp.c:8494)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__beginRead', quals=[], storage=['static'] (at pp.c:8499)
    FuncDecl: quals=None (at pp.c:8499)
      ParamList:  (at pp.c:8499)
        Decl: name='addr', quals=[], storage=[] (at pp.c:8499)
          TypeDecl: declname='addr', quals=[] (at pp.c:8499)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8499)
          PtrDecl: quals=[] (at pp.c:8499)
            TypeDecl: declname='data', quals=[] (at pp.c:8499)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8500)
          TypeDecl: declname='len', quals=[] (at pp.c:8500)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__beginRead', quals=[] (at pp.c:8499)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__continueRead', quals=[], storage=['inline', 'static'] (at pp.c:8502)
    FuncDecl: quals=None (at pp.c:8502)
      ParamList:  (at pp.c:8502)
        Decl: name='addr', quals=[], storage=[] (at pp.c:8502)
          TypeDecl: declname='addr', quals=[] (at pp.c:8502)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8502)
          PtrDecl: quals=[] (at pp.c:8502)
            TypeDecl: declname='data', quals=[] (at pp.c:8502)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8503)
          TypeDecl: declname='len', quals=[] (at pp.c:8503)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__continueRead', quals=[] (at pp.c:8502)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__Fifo__write', quals=[], storage=['inline', 'static'] (at pp.c:8507)
    FuncDecl: quals=None (at pp.c:8507)
      ParamList:  (at pp.c:8507)
        Decl: name='addr', quals=[], storage=[] (at pp.c:8507)
          TypeDecl: declname='addr', quals=[] (at pp.c:8507)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8507)
          PtrDecl: quals=[] (at pp.c:8507)
            TypeDecl: declname='data', quals=[] (at pp.c:8507)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8508)
          TypeDecl: declname='len', quals=[] (at pp.c:8508)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__write', quals=[] (at pp.c:8507)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Ram__write', quals=[], storage=['static'] (at pp.c:8510)
    FuncDecl: quals=None (at pp.c:8510)
      ParamList:  (at pp.c:8510)
        Decl: name='addr', quals=[], storage=[] (at pp.c:8510)
          TypeDecl: declname='addr', quals=[] (at pp.c:8510)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='offset', quals=[], storage=[] (at pp.c:8510)
          TypeDecl: declname='offset', quals=[] (at pp.c:8510)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8511)
          PtrDecl: quals=[] (at pp.c:8511)
            TypeDecl: declname='data', quals=[] (at pp.c:8511)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8512)
          TypeDecl: declname='len', quals=[] (at pp.c:8512)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Ram__write', quals=[] (at pp.c:8510)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Reg__read', quals=[], storage=['inline', 'static'] (at pp.c:8514)
    FuncDecl: quals=None (at pp.c:8514)
      ParamList:  (at pp.c:8514)
        Decl: name='addr', quals=[], storage=[] (at pp.c:8514)
          TypeDecl: declname='addr', quals=[] (at pp.c:8514)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8514)
          PtrDecl: quals=[] (at pp.c:8514)
            TypeDecl: declname='data', quals=[] (at pp.c:8514)
              IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Reg__read', quals=[] (at pp.c:8514)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Reg__write', quals=[], storage=['static'] (at pp.c:8516)
    FuncDecl: quals=None (at pp.c:8516)
      ParamList:  (at pp.c:8516)
        Decl: name='addr', quals=[], storage=[] (at pp.c:8516)
          TypeDecl: declname='addr', quals=[] (at pp.c:8516)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8516)
          TypeDecl: declname='data', quals=[] (at pp.c:8516)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Reg__write', quals=[] (at pp.c:8516)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__Strobe__strobe', quals=[], storage=['static'] (at pp.c:8518)
    FuncDecl: quals=None (at pp.c:8518)
      ParamList:  (at pp.c:8518)
        Decl: name='addr', quals=[], storage=[] (at pp.c:8518)
          TypeDecl: declname='addr', quals=[] (at pp.c:8518)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Strobe__strobe', quals=[] (at pp.c:8518)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420SpiP__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:8529)
    FuncDecl: quals=None (at pp.c:8529)
      ParamList:  (at pp.c:8529)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:8529)
          PtrDecl: quals=[] (at pp.c:8529)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:8529)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:8529)
          PtrDecl: quals=[] (at pp.c:8529)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:8529)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8530)
          TypeDecl: declname='len', quals=[] (at pp.c:8530)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8530)
          TypeDecl: declname='error', quals=[] (at pp.c:8530)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__SpiPacket__sendDone', quals=[] (at pp.c:8529)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__attemptRelease', quals=[], storage=['static'] (at pp.c:8539)
    FuncDecl: quals=None (at pp.c:8539)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__attemptRelease', quals=[] (at pp.c:8539)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420SpiP__grant__runTask', quals=[], storage=['inline', 'static'] (at pp.c:8541)
    FuncDecl: quals=None (at pp.c:8541)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420SpiP__grant__runTask', quals=[] (at pp.c:8541)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:8550)
    FuncDecl: quals=None (at pp.c:8550)
      ParamList:  (at pp.c:8550)
        Decl: name='id', quals=[], storage=[] (at pp.c:8550)
          TypeDecl: declname='id', quals=[] (at pp.c:8550)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Resource__default__granted', quals=[] (at pp.c:8550)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:8553)
    FuncDecl: quals=None (at pp.c:8553)
      ParamList:  (at pp.c:8553)
        Decl: name='addr', quals=[], storage=[] (at pp.c:8553)
          TypeDecl: declname='addr', quals=[] (at pp.c:8553)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:8553)
          PtrDecl: quals=[] (at pp.c:8553)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:8553)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_len', quals=[], storage=[] (at pp.c:8553)
          TypeDecl: declname='rx_len', quals=[] (at pp.c:8553)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8553)
          TypeDecl: declname='error', quals=[] (at pp.c:8553)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__default__readDone', quals=[] (at pp.c:8553)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420SpiP__Fifo__default__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:8556)
    FuncDecl: quals=None (at pp.c:8556)
      ParamList:  (at pp.c:8556)
        Decl: name='addr', quals=[], storage=[] (at pp.c:8556)
          TypeDecl: declname='addr', quals=[] (at pp.c:8556)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:8556)
          PtrDecl: quals=[] (at pp.c:8556)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:8556)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_len', quals=[], storage=[] (at pp.c:8556)
          TypeDecl: declname='tx_len', quals=[] (at pp.c:8556)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8556)
          TypeDecl: declname='error', quals=[] (at pp.c:8556)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420SpiP__Fifo__default__writeDone', quals=[] (at pp.c:8556)
        IdentifierType: names=['void'] (at None)
  Decl: name='StateImplP__state', quals=[], storage=[] (at pp.c:8558)
    ArrayDecl:  (at pp.c:8558)
      TypeDecl: declname='StateImplP__state', quals=[] (at pp.c:8558)
        IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='6U' (at pp.c:8558)
  Decl: name=None, quals=[], storage=[] (at pp.c:8560)
    Enum: name='StateImplP____nesc_unnamed4368' (at pp.c:8560)
      EnumeratorList:  (at pp.c:8561)
        Enumerator: name='StateImplP__S_IDLE' (at pp.c:8561)
          Constant: type='int', value='0' (at pp.c:8561)
  Decl: name='StateImplP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:8565)
    FuncDecl: quals=None (at pp.c:8565)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='StateImplP__Init__init', quals=[] (at pp.c:8565)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='StateImplP__State__requestState', quals=[], storage=['static'] (at pp.c:8567)
    FuncDecl: quals=None (at pp.c:8567)
      ParamList:  (at pp.c:8567)
        Decl: name='id', quals=[], storage=[] (at pp.c:8567)
          TypeDecl: declname='id', quals=[] (at pp.c:8567)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:8567)
          TypeDecl: declname='reqState', quals=[] (at pp.c:8567)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__requestState', quals=[] (at pp.c:8567)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='StateImplP__State__forceState', quals=[], storage=['inline', 'static'] (at pp.c:8569)
    FuncDecl: quals=None (at pp.c:8569)
      ParamList:  (at pp.c:8569)
        Decl: name='id', quals=[], storage=[] (at pp.c:8569)
          TypeDecl: declname='id', quals=[] (at pp.c:8569)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:8569)
          TypeDecl: declname='reqState', quals=[] (at pp.c:8569)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__forceState', quals=[] (at pp.c:8569)
        IdentifierType: names=['void'] (at None)
  Decl: name='StateImplP__State__toIdle', quals=[], storage=['inline', 'static'] (at pp.c:8576)
    FuncDecl: quals=None (at pp.c:8576)
      ParamList:  (at pp.c:8576)
        Decl: name='id', quals=[], storage=[] (at pp.c:8576)
          TypeDecl: declname='id', quals=[] (at pp.c:8576)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__toIdle', quals=[] (at pp.c:8576)
        IdentifierType: names=['void'] (at None)
  Decl: name='StateImplP__State__isIdle', quals=[], storage=['inline', 'static'] (at pp.c:8584)
    FuncDecl: quals=None (at pp.c:8584)
      ParamList:  (at pp.c:8584)
        Decl: name='id', quals=[], storage=[] (at pp.c:8584)
          TypeDecl: declname='id', quals=[] (at pp.c:8584)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__isIdle', quals=[] (at pp.c:8584)
        IdentifierType: names=['bool'] (at None)
  Decl: name='StateImplP__State__isState', quals=[], storage=['static'] (at pp.c:8591)
    FuncDecl: quals=None (at pp.c:8591)
      ParamList:  (at pp.c:8591)
        Decl: name='id', quals=[], storage=[] (at pp.c:8591)
          TypeDecl: declname='id', quals=[] (at pp.c:8591)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='myState', quals=[], storage=[] (at pp.c:8591)
          TypeDecl: declname='myState', quals=[] (at pp.c:8591)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__isState', quals=[] (at pp.c:8591)
        IdentifierType: names=['bool'] (at None)
  Decl: name='StateImplP__State__getState', quals=[], storage=['static'] (at pp.c:8601)
    FuncDecl: quals=None (at pp.c:8601)
      ParamList:  (at pp.c:8601)
        Decl: name='id', quals=[], storage=[] (at pp.c:8601)
          TypeDecl: declname='id', quals=[] (at pp.c:8601)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='StateImplP__State__getState', quals=[] (at pp.c:8601)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='ActiveMessageAddressC__addr', quals=[], storage=[] (at pp.c:8603)
    TypeDecl: declname='ActiveMessageAddressC__addr', quals=[] (at pp.c:8603)
      IdentifierType: names=['am_addr_t'] (at None)
    ID: name='TOS_AM_ADDRESS' (at pp.c:8603)
  Decl: name='ActiveMessageAddressC__group', quals=[], storage=[] (at pp.c:8606)
    TypeDecl: declname='ActiveMessageAddressC__group', quals=[] (at pp.c:8606)
      IdentifierType: names=['am_group_t'] (at None)
    ID: name='TOS_AM_GROUP' (at pp.c:8606)
  Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[], storage=['inline', 'static'] (at pp.c:8613)
    FuncDecl: quals=None (at pp.c:8613)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[] (at pp.c:8613)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[], storage=['inline', 'static'] (at pp.c:8615)
    FuncDecl: quals=None (at pp.c:8615)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[] (at pp.c:8615)
        IdentifierType: names=['am_group_t'] (at None)
  Decl: name='ActiveMessageAddressC__amAddress', quals=[], storage=['static'] (at pp.c:8617)
    FuncDecl: quals=None (at pp.c:8617)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='ActiveMessageAddressC__amAddress', quals=[] (at pp.c:8617)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='Ds2411P__OneWire__read', quals=[], storage=['static'] (at pp.c:8619)
    FuncDecl: quals=None (at pp.c:8619)
      ParamList:  (at pp.c:8619)
        Decl: name='cmd', quals=[], storage=[] (at pp.c:8619)
          TypeDecl: declname='cmd', quals=[] (at pp.c:8619)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:8619)
          PtrDecl: quals=[] (at pp.c:8619)
            TypeDecl: declname='buf', quals=[] (at pp.c:8619)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8619)
          TypeDecl: declname='len', quals=[] (at pp.c:8619)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Ds2411P__OneWire__read', quals=[] (at pp.c:8619)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Ds2411P__haveId', quals=[], storage=[] (at pp.c:8621)
    TypeDecl: declname='Ds2411P__haveId', quals=[] (at pp.c:8621)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:8621)
  Decl: name='Ds2411P__ds2411id', quals=[], storage=[] (at pp.c:8622)
    TypeDecl: declname='Ds2411P__ds2411id', quals=[] (at pp.c:8622)
      IdentifierType: names=['dallasid48_serial_t'] (at None)
  Decl: name='Ds2411P__readId', quals=[], storage=['inline', 'static'] (at pp.c:8624)
    FuncDecl: quals=None (at pp.c:8624)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Ds2411P__readId', quals=[] (at pp.c:8624)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='Ds2411P__ReadId48__read', quals=[], storage=['inline', 'static'] (at pp.c:8626)
    FuncDecl: quals=None (at pp.c:8626)
      ParamList:  (at pp.c:8626)
        Decl: name='id', quals=[], storage=[] (at pp.c:8626)
          PtrDecl: quals=[] (at pp.c:8626)
            TypeDecl: declname='id', quals=[] (at pp.c:8626)
              IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='Ds2411P__ReadId48__read', quals=[] (at pp.c:8626)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='OneWireMasterC__BusyWait__wait', quals=[], storage=['static'] (at pp.c:8628)
    FuncDecl: quals=None (at pp.c:8628)
      ParamList:  (at pp.c:8628)
        Decl: name='dt', quals=[], storage=[] (at pp.c:8628)
          TypeDecl: declname='dt', quals=[] (at pp.c:8628)
            IdentifierType: names=['OneWireMasterC__BusyWait__size_type'] (at None)
      TypeDecl: declname='OneWireMasterC__BusyWait__wait', quals=[] (at pp.c:8628)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__Pin__makeInput', quals=[], storage=['static'] (at pp.c:8630)
    FuncDecl: quals=None (at pp.c:8630)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__Pin__makeInput', quals=[] (at pp.c:8630)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__Pin__get', quals=[], storage=['static'] (at pp.c:8632)
    FuncDecl: quals=None (at pp.c:8632)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__Pin__get', quals=[] (at pp.c:8632)
        IdentifierType: names=['bool'] (at None)
  Decl: name='OneWireMasterC__Pin__makeOutput', quals=[], storage=['static'] (at pp.c:8635)
    FuncDecl: quals=None (at pp.c:8635)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__Pin__makeOutput', quals=[] (at pp.c:8635)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__Pin__clr', quals=[], storage=['static'] (at pp.c:8637)
    FuncDecl: quals=None (at pp.c:8637)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__Pin__clr', quals=[] (at pp.c:8637)
        IdentifierType: names=['void'] (at None)
  Typedef: name='OneWireMasterC__onewiretimes_t', quals=[], storage=['typedef'] (at pp.c:8647)
    TypeDecl: declname='OneWireMasterC__onewiretimes_t', quals=[] (at pp.c:8647)
      Enum: name='OneWireMasterC____nesc_unnamed4369' (at pp.c:8640)
        EnumeratorList:  (at pp.c:8641)
          Enumerator: name='OneWireMasterC__DELAY_5US' (at pp.c:8641)
            Constant: type='int', value='5' (at pp.c:8641)
          Enumerator: name='OneWireMasterC__RESET_LOW_TIME' (at pp.c:8642)
            Constant: type='int', value='560' (at pp.c:8642)
          Enumerator: name='OneWireMasterC__DELAY_60US' (at pp.c:8643)
            Constant: type='int', value='60' (at pp.c:8643)
          Enumerator: name='OneWireMasterC__PRESENCE_DETECT_LOW_TIME' (at pp.c:8644)
            Constant: type='int', value='240' (at pp.c:8644)
          Enumerator: name='OneWireMasterC__PRESENCE_RESET_HIGH_TIME' (at pp.c:8645)
            Constant: type='int', value='480' (at pp.c:8645)
          Enumerator: name='OneWireMasterC__SLOT_TIME' (at pp.c:8646)
            Constant: type='int', value='65' (at pp.c:8646)
  Decl: name='OneWireMasterC__reset', quals=[], storage=['inline', 'static'] (at pp.c:8649)
    FuncDecl: quals=None (at pp.c:8649)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__reset', quals=[] (at pp.c:8649)
        IdentifierType: names=['bool'] (at None)
  Decl: name='OneWireMasterC__writeOne', quals=[], storage=['inline', 'static'] (at pp.c:8651)
    FuncDecl: quals=None (at pp.c:8651)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__writeOne', quals=[] (at pp.c:8651)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__writeZero', quals=[], storage=['inline', 'static'] (at pp.c:8658)
    FuncDecl: quals=None (at pp.c:8658)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__writeZero', quals=[] (at pp.c:8658)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__readBit', quals=[], storage=['inline', 'static'] (at pp.c:8665)
    FuncDecl: quals=None (at pp.c:8665)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__readBit', quals=[] (at pp.c:8665)
        IdentifierType: names=['bool'] (at None)
  Decl: name='OneWireMasterC__writeByte', quals=[], storage=['inline', 'static'] (at pp.c:8676)
    FuncDecl: quals=None (at pp.c:8676)
      ParamList:  (at pp.c:8676)
        Decl: name='c', quals=[], storage=[] (at pp.c:8676)
          TypeDecl: declname='c', quals=[] (at pp.c:8676)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='OneWireMasterC__writeByte', quals=[] (at pp.c:8676)
        IdentifierType: names=['void'] (at None)
  Decl: name='OneWireMasterC__readByte', quals=[], storage=['inline', 'static'] (at pp.c:8678)
    FuncDecl: quals=None (at pp.c:8678)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='OneWireMasterC__readByte', quals=[] (at pp.c:8678)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='OneWireMasterC__OneWire__read', quals=[], storage=['inline', 'static'] (at pp.c:8689)
    FuncDecl: quals=None (at pp.c:8689)
      ParamList:  (at pp.c:8689)
        Decl: name='cmd', quals=[], storage=[] (at pp.c:8689)
          TypeDecl: declname='cmd', quals=[] (at pp.c:8689)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='buf', quals=[], storage=[] (at pp.c:8689)
          PtrDecl: quals=[] (at pp.c:8689)
            TypeDecl: declname='buf', quals=[] (at pp.c:8689)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:8689)
          TypeDecl: declname='len', quals=[] (at pp.c:8689)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='OneWireMasterC__OneWire__read', quals=[] (at pp.c:8689)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='BusyWaitCounterC__0__Counter__get', quals=[], storage=['static'] (at pp.c:8691)
    FuncDecl: quals=None (at pp.c:8691)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='BusyWaitCounterC__0__Counter__get', quals=[] (at pp.c:8691)
        IdentifierType: names=['BusyWaitCounterC__0__Counter__size_type'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:8693)
    Enum: name='BusyWaitCounterC__0____nesc_unnamed4370' (at pp.c:8693)
      EnumeratorList:  (at pp.c:8695)
        Enumerator: name='BusyWaitCounterC__0__HALF_MAX_SIZE_TYPE' (at pp.c:8695)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:8695)
            BinaryOp: op='-' (at pp.c:8695)
              BinaryOp: op='*' (at pp.c:8695)
                Constant: type='int', value='8' (at pp.c:8695)
                UnaryOp: op='sizeof' (at pp.c:8695)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
              Constant: type='int', value='1' (at pp.c:8695)
  Decl: name='BusyWaitCounterC__0__BusyWait__wait', quals=[], storage=['static'] (at pp.c:8698)
    FuncDecl: quals=None (at pp.c:8698)
      ParamList:  (at pp.c:8698)
        Decl: name='dt', quals=[], storage=[] (at pp.c:8698)
          TypeDecl: declname='dt', quals=[] (at pp.c:8698)
            IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
      TypeDecl: declname='BusyWaitCounterC__0__BusyWait__wait', quals=[] (at pp.c:8698)
        IdentifierType: names=['void'] (at None)
  Decl: name='BusyWaitCounterC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:8700)
    FuncDecl: quals=None (at pp.c:8700)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='BusyWaitCounterC__0__Counter__overflow', quals=[] (at pp.c:8700)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__1__Msp430Timer__get', quals=[], storage=['static'] (at pp.c:8702)
    FuncDecl: quals=None (at pp.c:8702)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Msp430Timer__get', quals=[] (at pp.c:8702)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430CounterC__1__Counter__overflow', quals=[], storage=['static'] (at pp.c:8704)
    FuncDecl: quals=None (at pp.c:8704)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Counter__overflow', quals=[] (at pp.c:8704)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430CounterC__1__Counter__get', quals=[], storage=['inline', 'static'] (at pp.c:8706)
    FuncDecl: quals=None (at pp.c:8706)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Counter__get', quals=[] (at pp.c:8706)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='Msp430CounterC__1__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:8708)
    FuncDecl: quals=None (at pp.c:8708)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430CounterC__1__Msp430Timer__overflow', quals=[] (at pp.c:8708)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__13__HplGeneralIO__makeInput', quals=[], storage=['static'] (at pp.c:8710)
    FuncDecl: quals=None (at pp.c:8710)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__HplGeneralIO__makeInput', quals=[] (at pp.c:8710)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__13__HplGeneralIO__makeOutput', quals=[], storage=['static'] (at pp.c:8717)
    FuncDecl: quals=None (at pp.c:8717)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__HplGeneralIO__makeOutput', quals=[] (at pp.c:8717)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__13__HplGeneralIO__get', quals=[], storage=['static'] (at pp.c:8719)
    FuncDecl: quals=None (at pp.c:8719)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__HplGeneralIO__get', quals=[] (at pp.c:8719)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__13__HplGeneralIO__clr', quals=[], storage=['static'] (at pp.c:8721)
    FuncDecl: quals=None (at pp.c:8721)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__HplGeneralIO__clr', quals=[] (at pp.c:8721)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__13__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:8723)
    FuncDecl: quals=None (at pp.c:8723)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__GeneralIO__clr', quals=[] (at pp.c:8723)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__13__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:8725)
    FuncDecl: quals=None (at pp.c:8725)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__GeneralIO__get', quals=[] (at pp.c:8725)
        IdentifierType: names=['bool'] (at None)
  Decl: name='Msp430GpioC__13__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:8726)
    FuncDecl: quals=None (at pp.c:8726)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__GeneralIO__makeInput', quals=[] (at pp.c:8726)
        IdentifierType: names=['void'] (at None)
  Decl: name='Msp430GpioC__13__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:8728)
    FuncDecl: quals=None (at pp.c:8728)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='Msp430GpioC__13__GeneralIO__makeOutput', quals=[] (at pp.c:8728)
        IdentifierType: names=['void'] (at None)
  Decl: name='DallasId48ToIeeeEui64C__ReadId48__read', quals=[], storage=['static'] (at pp.c:8730)
    FuncDecl: quals=None (at pp.c:8730)
      ParamList:  (at pp.c:8730)
        Decl: name='id', quals=[], storage=[] (at pp.c:8730)
          PtrDecl: quals=[] (at pp.c:8730)
            TypeDecl: declname='id', quals=[] (at pp.c:8730)
              IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DallasId48ToIeeeEui64C__ReadId48__read', quals=[] (at pp.c:8730)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[], storage=['static'] (at pp.c:8732)
    FuncDecl: quals=None (at pp.c:8732)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[] (at pp.c:8732)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:8734)
    FuncDecl: quals=None (at pp.c:8734)
      ParamList:  (at pp.c:8734)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8734)
          PtrDecl: quals=[] (at pp.c:8734)
            TypeDecl: declname='msg', quals=[] (at pp.c:8734)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:8734)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:8741)
    FuncDecl: quals=None (at pp.c:8741)
      ParamList:  (at pp.c:8741)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8741)
          PtrDecl: quals=[] (at pp.c:8741)
            TypeDecl: declname='msg', quals=[] (at pp.c:8741)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:8741)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__PacketTimeStamp__clear', quals=[], storage=['static'] (at pp.c:8743)
    FuncDecl: quals=None (at pp.c:8743)
      ParamList:  (at pp.c:8745)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8745)
          PtrDecl: quals=[] (at pp.c:8745)
            TypeDecl: declname='msg', quals=[] (at pp.c:8745)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__clear', quals=[] (at pp.c:8743)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__PacketTimeStamp__set', quals=[], storage=['static'] (at pp.c:8747)
    FuncDecl: quals=None (at pp.c:8747)
      ParamList:  (at pp.c:8749)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8749)
          PtrDecl: quals=[] (at pp.c:8749)
            TypeDecl: declname='msg', quals=[] (at pp.c:8749)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:8754)
          TypeDecl: declname='value', quals=[] (at pp.c:8754)
            IdentifierType: names=['CC2420TransmitP__PacketTimeStamp__size_type'] (at None)
      TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__set', quals=[] (at pp.c:8747)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__STXONCCA__strobe', quals=[], storage=['static'] (at pp.c:8756)
    FuncDecl: quals=None (at pp.c:8756)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__STXONCCA__strobe', quals=[] (at pp.c:8756)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__CaptureSFD__captureFallingEdge', quals=[], storage=['static'] (at pp.c:8758)
    FuncDecl: quals=None (at pp.c:8758)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CaptureSFD__captureFallingEdge', quals=[] (at pp.c:8758)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__CaptureSFD__disable', quals=[], storage=['static'] (at pp.c:8760)
    FuncDecl: quals=None (at pp.c:8760)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CaptureSFD__disable', quals=[] (at pp.c:8760)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CaptureSFD__captureRisingEdge', quals=[], storage=['static'] (at pp.c:8762)
    FuncDecl: quals=None (at pp.c:8762)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CaptureSFD__captureRisingEdge', quals=[] (at pp.c:8762)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__BackoffTimer__getNow', quals=[], storage=['static'] (at pp.c:8764)
    FuncDecl: quals=None (at pp.c:8764)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__BackoffTimer__getNow', quals=[] (at pp.c:8764)
        IdentifierType: names=['CC2420TransmitP__BackoffTimer__size_type'] (at None)
  Decl: name='CC2420TransmitP__BackoffTimer__start', quals=[], storage=['static'] (at pp.c:8766)
    FuncDecl: quals=None (at pp.c:8766)
      ParamList:  (at pp.c:8766)
        Decl: name='dt', quals=[], storage=[] (at pp.c:8766)
          TypeDecl: declname='dt', quals=[] (at pp.c:8766)
            IdentifierType: names=['CC2420TransmitP__BackoffTimer__size_type'] (at None)
      TypeDecl: declname='CC2420TransmitP__BackoffTimer__start', quals=[] (at pp.c:8766)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__BackoffTimer__stop', quals=[], storage=['static'] (at pp.c:8773)
    FuncDecl: quals=None (at pp.c:8773)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__BackoffTimer__stop', quals=[] (at pp.c:8773)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO_RAM__write', quals=[], storage=['static'] (at pp.c:8775)
    FuncDecl: quals=None (at pp.c:8775)
      ParamList:  (at pp.c:8775)
        Decl: name='offset', quals=[], storage=[] (at pp.c:8775)
          TypeDecl: declname='offset', quals=[] (at pp.c:8775)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='data', quals=[], storage=[] (at pp.c:8775)
          PtrDecl: quals=[] (at pp.c:8775)
            TypeDecl: declname='data', quals=[] (at pp.c:8775)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:8775)
          TypeDecl: declname='length', quals=[] (at pp.c:8775)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO_RAM__write', quals=[] (at pp.c:8775)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__TXCTRL__write', quals=[], storage=['static'] (at pp.c:8777)
    FuncDecl: quals=None (at pp.c:8777)
      ParamList:  (at pp.c:8777)
        Decl: name='data', quals=[], storage=[] (at pp.c:8777)
          TypeDecl: declname='data', quals=[] (at pp.c:8777)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXCTRL__write', quals=[] (at pp.c:8777)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__CC2420Receive__sfd_dropped', quals=[], storage=['static'] (at pp.c:8779)
    FuncDecl: quals=None (at pp.c:8779)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CC2420Receive__sfd_dropped', quals=[] (at pp.c:8779)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CC2420Receive__sfd', quals=[], storage=['static'] (at pp.c:8781)
    FuncDecl: quals=None (at pp.c:8781)
      ParamList:  (at pp.c:8781)
        Decl: name='time', quals=[], storage=[] (at pp.c:8781)
          TypeDecl: declname='time', quals=[] (at pp.c:8781)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__CC2420Receive__sfd', quals=[] (at pp.c:8781)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__Send__sendDone', quals=[], storage=['static'] (at pp.c:8783)
    FuncDecl: quals=None (at pp.c:8783)
      ParamList:  (at pp.c:8783)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:8783)
          PtrDecl: quals=[] (at pp.c:8783)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:8783)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8783)
          TypeDecl: declname='error', quals=[] (at pp.c:8783)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__Send__sendDone', quals=[] (at pp.c:8783)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__ChipSpiResource__abortRelease', quals=[], storage=['static'] (at pp.c:8785)
    FuncDecl: quals=None (at pp.c:8785)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__ChipSpiResource__abortRelease', quals=[] (at pp.c:8785)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__ChipSpiResource__attemptRelease', quals=[], storage=['static'] (at pp.c:8793)
    FuncDecl: quals=None (at pp.c:8793)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__ChipSpiResource__attemptRelease', quals=[] (at pp.c:8793)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__SFLUSHTX__strobe', quals=[], storage=['static'] (at pp.c:8795)
    FuncDecl: quals=None (at pp.c:8795)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SFLUSHTX__strobe', quals=[] (at pp.c:8795)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__CSN__makeOutput', quals=[], storage=['static'] (at pp.c:8797)
    FuncDecl: quals=None (at pp.c:8797)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CSN__makeOutput', quals=[] (at pp.c:8797)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CSN__set', quals=[], storage=['static'] (at pp.c:8799)
    FuncDecl: quals=None (at pp.c:8799)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CSN__set', quals=[] (at pp.c:8799)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CSN__clr', quals=[], storage=['static'] (at pp.c:8800)
    FuncDecl: quals=None (at pp.c:8800)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CSN__clr', quals=[] (at pp.c:8800)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:8802)
    FuncDecl: quals=None (at pp.c:8802)
      ParamList:  (at pp.c:8802)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8802)
          PtrDecl: quals=[] (at pp.c:8802)
            TypeDecl: declname='msg', quals=[] (at pp.c:8802)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:8802)
        TypeDecl: declname='CC2420TransmitP__CC2420PacketBody__getHeader', quals=[] (at pp.c:8802)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420TransmitP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:8813)
    FuncDecl: quals=None (at pp.c:8813)
      ParamList:  (at pp.c:8813)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8813)
          PtrDecl: quals=[] (at pp.c:8813)
            TypeDecl: declname='msg', quals=[] (at pp.c:8813)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:8813)
        TypeDecl: declname='CC2420TransmitP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:8813)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420TransmitP__PacketTimeSyncOffset__get', quals=[], storage=['static'] (at pp.c:8815)
    FuncDecl: quals=None (at pp.c:8815)
      ParamList:  (at pp.c:8817)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8817)
          PtrDecl: quals=[] (at pp.c:8817)
            TypeDecl: declname='msg', quals=[] (at pp.c:8817)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__PacketTimeSyncOffset__get', quals=[] (at pp.c:8815)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TransmitP__PacketTimeSyncOffset__isSet', quals=[], storage=['static'] (at pp.c:8819)
    FuncDecl: quals=None (at pp.c:8819)
      ParamList:  (at pp.c:8821)
        Decl: name='msg', quals=[], storage=[] (at pp.c:8821)
          PtrDecl: quals=[] (at pp.c:8821)
            TypeDecl: declname='msg', quals=[] (at pp.c:8821)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__PacketTimeSyncOffset__isSet', quals=[] (at pp.c:8819)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__SpiResource__release', quals=[], storage=['static'] (at pp.c:8823)
    FuncDecl: quals=None (at pp.c:8823)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SpiResource__release', quals=[] (at pp.c:8823)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__SpiResource__immediateRequest', quals=[], storage=['static'] (at pp.c:8825)
    FuncDecl: quals=None (at pp.c:8825)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SpiResource__immediateRequest', quals=[] (at pp.c:8825)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__SpiResource__request', quals=[], storage=['static'] (at pp.c:8827)
    FuncDecl: quals=None (at pp.c:8827)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SpiResource__request', quals=[] (at pp.c:8827)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__CCA__makeInput', quals=[], storage=['static'] (at pp.c:8829)
    FuncDecl: quals=None (at pp.c:8829)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CCA__makeInput', quals=[] (at pp.c:8829)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CCA__get', quals=[], storage=['static'] (at pp.c:8831)
    FuncDecl: quals=None (at pp.c:8831)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__CCA__get', quals=[] (at pp.c:8831)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__SNOP__strobe', quals=[], storage=['static'] (at pp.c:8833)
    FuncDecl: quals=None (at pp.c:8833)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SNOP__strobe', quals=[] (at pp.c:8833)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__SFD__makeInput', quals=[], storage=['static'] (at pp.c:8835)
    FuncDecl: quals=None (at pp.c:8835)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SFD__makeInput', quals=[] (at pp.c:8835)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__SFD__get', quals=[], storage=['static'] (at pp.c:8837)
    FuncDecl: quals=None (at pp.c:8837)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SFD__get', quals=[] (at pp.c:8837)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO__write', quals=[], storage=['static'] (at pp.c:8839)
    FuncDecl: quals=None (at pp.c:8839)
      ParamList:  (at pp.c:8839)
        Decl: name='data', quals=[], storage=[] (at pp.c:8839)
          PtrDecl: quals=[] (at pp.c:8839)
            TypeDecl: declname='data', quals=[] (at pp.c:8839)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:8839)
          TypeDecl: declname='length', quals=[] (at pp.c:8839)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO__write', quals=[] (at pp.c:8839)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420TransmitP__STXON__strobe', quals=[], storage=['static'] (at pp.c:8841)
    FuncDecl: quals=None (at pp.c:8841)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__STXON__strobe', quals=[] (at pp.c:8841)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Typedef: name='CC2420TransmitP__cc2420_transmit_state_t', quals=[], storage=['typedef'] (at pp.c:8854)
    TypeDecl: declname='CC2420TransmitP__cc2420_transmit_state_t', quals=[] (at pp.c:8854)
      Enum: name='CC2420TransmitP____nesc_unnamed4371' (at pp.c:8844)
        EnumeratorList:  (at pp.c:8845)
          Enumerator: name='CC2420TransmitP__S_STOPPED' (at pp.c:8845)
          Enumerator: name='CC2420TransmitP__S_STARTED' (at pp.c:8846)
          Enumerator: name='CC2420TransmitP__S_LOAD' (at pp.c:8847)
          Enumerator: name='CC2420TransmitP__S_SAMPLE_CCA' (at pp.c:8848)
          Enumerator: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:8849)
          Enumerator: name='CC2420TransmitP__S_SFD' (at pp.c:8850)
          Enumerator: name='CC2420TransmitP__S_EFD' (at pp.c:8851)
          Enumerator: name='CC2420TransmitP__S_ACK_WAIT' (at pp.c:8852)
          Enumerator: name='CC2420TransmitP__S_CANCEL' (at pp.c:8853)
  Decl: name=None, quals=[], storage=[] (at pp.c:8860)
    Enum: name='CC2420TransmitP____nesc_unnamed4372' (at pp.c:8860)
      EnumeratorList:  (at pp.c:8861)
        Enumerator: name='CC2420TransmitP__CC2420_ABORT_PERIOD' (at pp.c:8861)
          Constant: type='int', value='320' (at pp.c:8861)
  Decl: name='CC2420TransmitP__m_msg', quals=[], storage=[] (at pp.c:8864)
    PtrDecl: quals=[] (at pp.c:8864)
      TypeDecl: declname='CC2420TransmitP__m_msg', quals=[] (at pp.c:8864)
        IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TransmitP__m_cca', quals=[], storage=[] (at pp.c:8866)
    TypeDecl: declname='CC2420TransmitP__m_cca', quals=[] (at pp.c:8866)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__m_tx_power', quals=[], storage=[] (at pp.c:8868)
    TypeDecl: declname='CC2420TransmitP__m_tx_power', quals=[] (at pp.c:8868)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TransmitP__m_state', quals=[], storage=[] (at pp.c:8870)
    TypeDecl: declname='CC2420TransmitP__m_state', quals=[] (at pp.c:8870)
      IdentifierType: names=['CC2420TransmitP__cc2420_transmit_state_t'] (at None)
    ID: name='CC2420TransmitP__S_STOPPED' (at pp.c:8870)
  Decl: name='CC2420TransmitP__m_receiving', quals=[], storage=[] (at pp.c:8872)
    TypeDecl: declname='CC2420TransmitP__m_receiving', quals=[] (at pp.c:8872)
      IdentifierType: names=['bool'] (at None)
    ID: name='FALSE' (at pp.c:8872)
  Decl: name='CC2420TransmitP__m_prev_time', quals=[], storage=[] (at pp.c:8874)
    TypeDecl: declname='CC2420TransmitP__m_prev_time', quals=[] (at pp.c:8874)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420TransmitP__sfdHigh', quals=[], storage=[] (at pp.c:8877)
    TypeDecl: declname='CC2420TransmitP__sfdHigh', quals=[] (at pp.c:8877)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__abortSpiRelease', quals=[], storage=[] (at pp.c:8880)
    TypeDecl: declname='CC2420TransmitP__abortSpiRelease', quals=[] (at pp.c:8880)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__totalCcaChecks', quals=[], storage=[] (at pp.c:8883)
    TypeDecl: declname='CC2420TransmitP__totalCcaChecks', quals=[] (at pp.c:8883)
      IdentifierType: names=['int8_t'] (at None)
  Decl: name='CC2420TransmitP__myInitialBackoff', quals=[], storage=[] (at pp.c:8886)
    TypeDecl: declname='CC2420TransmitP__myInitialBackoff', quals=[] (at pp.c:8886)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420TransmitP__myCongestionBackoff', quals=[], storage=[] (at pp.c:8889)
    TypeDecl: declname='CC2420TransmitP__myCongestionBackoff', quals=[] (at pp.c:8889)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420TransmitP__send', quals=[], storage=['inline', 'static'] (at pp.c:8893)
    FuncDecl: quals=None (at pp.c:8893)
      ParamList:  (at pp.c:8893)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:8893)
          PtrDecl: quals=[] (at pp.c:8893)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:8893)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='cca', quals=[], storage=[] (at pp.c:8893)
          TypeDecl: declname='cca', quals=[] (at pp.c:8893)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__send', quals=[] (at pp.c:8893)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__resend', quals=[], storage=['inline', 'static'] (at pp.c:8894)
    FuncDecl: quals=None (at pp.c:8894)
      ParamList:  (at pp.c:8894)
        Decl: name='cca', quals=[], storage=[] (at pp.c:8894)
          TypeDecl: declname='cca', quals=[] (at pp.c:8894)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__resend', quals=[] (at pp.c:8894)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__loadTXFIFO', quals=[], storage=['static'] (at pp.c:8895)
    FuncDecl: quals=None (at pp.c:8895)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__loadTXFIFO', quals=[] (at pp.c:8895)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__attemptSend', quals=[], storage=['static'] (at pp.c:8896)
    FuncDecl: quals=None (at pp.c:8896)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__attemptSend', quals=[] (at pp.c:8896)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__congestionBackoff', quals=[], storage=['static'] (at pp.c:8897)
    FuncDecl: quals=None (at pp.c:8897)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__congestionBackoff', quals=[] (at pp.c:8897)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__acquireSpiResource', quals=[], storage=['static'] (at pp.c:8898)
    FuncDecl: quals=None (at pp.c:8898)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__acquireSpiResource', quals=[] (at pp.c:8898)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__releaseSpiResource', quals=[], storage=['inline', 'static'] (at pp.c:8899)
    FuncDecl: quals=None (at pp.c:8899)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__releaseSpiResource', quals=[] (at pp.c:8899)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__signalDone', quals=[], storage=['static'] (at pp.c:8900)
    FuncDecl: quals=None (at pp.c:8900)
      ParamList:  (at pp.c:8900)
        Decl: name='err', quals=[], storage=[] (at pp.c:8900)
          TypeDecl: declname='err', quals=[] (at pp.c:8900)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__signalDone', quals=[] (at pp.c:8900)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:8904)
    FuncDecl: quals=None (at pp.c:8904)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__Init__init', quals=[] (at pp.c:8904)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__StdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:8912)
    FuncDecl: quals=None (at pp.c:8912)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__StdControl__start', quals=[] (at pp.c:8912)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__StdControl__stop', quals=[], storage=['static'] (at pp.c:8923)
    FuncDecl: quals=None (at pp.c:8923)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__StdControl__stop', quals=[] (at pp.c:8923)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:8925)
    FuncDecl: quals=None (at pp.c:8925)
      ParamList:  (at pp.c:8925)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:8925)
          PtrDecl: quals=[] (at pp.c:8925)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:8925)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:8925)
          TypeDecl: declname='useCca', quals=[] (at pp.c:8925)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__Send__send', quals=[] (at pp.c:8925)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__Send__resend', quals=[], storage=['inline', 'static'] (at pp.c:8929)
    FuncDecl: quals=None (at pp.c:8929)
      ParamList:  (at pp.c:8929)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:8929)
          TypeDecl: declname='useCca', quals=[] (at pp.c:8929)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__Send__resend', quals=[] (at pp.c:8929)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[], storage=['inline', 'static'] (at pp.c:8931)
    FuncDecl: quals=None (at pp.c:8931)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[] (at pp.c:8931)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:8933)
    FuncDecl: quals=None (at pp.c:8933)
      ParamList:  (at pp.c:8933)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:8933)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:8933)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:8933)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:8941)
    FuncDecl: quals=None (at pp.c:8941)
      ParamList:  (at pp.c:8941)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:8941)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:8941)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:8941)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__getTime32', quals=[], storage=['__inline', 'static'] (at pp.c:8949)
    FuncDecl: quals=None (at pp.c:8949)
      ParamList:  (at pp.c:8949)
        Decl: name='captured_time', quals=[], storage=[] (at pp.c:8949)
          TypeDecl: declname='captured_time', quals=[] (at pp.c:8949)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__getTime32', quals=[] (at pp.c:8949)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='CC2420TransmitP__CaptureSFD__captured', quals=[], storage=['inline', 'static'] (at pp.c:8951)
    FuncDecl: quals=None (at pp.c:8951)
      ParamList:  (at pp.c:8951)
        Decl: name='time', quals=[], storage=[] (at pp.c:8951)
          TypeDecl: declname='time', quals=[] (at pp.c:8951)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__CaptureSFD__captured', quals=[] (at pp.c:8951)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__ChipSpiResource__releasing', quals=[], storage=['inline', 'static'] (at pp.c:8953)
    FuncDecl: quals=None (at pp.c:8953)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__ChipSpiResource__releasing', quals=[] (at pp.c:8953)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__CC2420Receive__receive', quals=[], storage=['inline', 'static'] (at pp.c:8955)
    FuncDecl: quals=None (at pp.c:8955)
      ParamList:  (at pp.c:8955)
        Decl: name='type', quals=[], storage=[] (at pp.c:8955)
          TypeDecl: declname='type', quals=[] (at pp.c:8955)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='ack_msg', quals=[], storage=[] (at pp.c:8955)
          PtrDecl: quals=[] (at pp.c:8955)
            TypeDecl: declname='ack_msg', quals=[] (at pp.c:8955)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__CC2420Receive__receive', quals=[] (at pp.c:8955)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:8957)
    FuncDecl: quals=None (at pp.c:8957)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__SpiResource__granted', quals=[] (at pp.c:8957)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:8959)
    FuncDecl: quals=None (at pp.c:8959)
      ParamList:  (at pp.c:8959)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:8959)
          PtrDecl: quals=[] (at pp.c:8959)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:8959)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_len', quals=[], storage=[] (at pp.c:8959)
          TypeDecl: declname='tx_len', quals=[] (at pp.c:8959)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8960)
          TypeDecl: declname='error', quals=[] (at pp.c:8960)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO__writeDone', quals=[] (at pp.c:8959)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__TXFIFO__readDone', quals=[], storage=['inline', 'static'] (at pp.c:8962)
    FuncDecl: quals=None (at pp.c:8962)
      ParamList:  (at pp.c:8962)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:8962)
          PtrDecl: quals=[] (at pp.c:8962)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:8962)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_len', quals=[], storage=[] (at pp.c:8962)
          TypeDecl: declname='tx_len', quals=[] (at pp.c:8962)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:8963)
          TypeDecl: declname='error', quals=[] (at pp.c:8963)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__TXFIFO__readDone', quals=[] (at pp.c:8962)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__BackoffTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:8974)
    FuncDecl: quals=None (at pp.c:8974)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__BackoffTimer__fired', quals=[] (at pp.c:8974)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__send', quals=[], storage=['inline', 'static'] (at pp.c:8976)
    FuncDecl: quals=None (at pp.c:8976)
      ParamList:  (at pp.c:8976)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:8976)
          PtrDecl: quals=[] (at pp.c:8976)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:8976)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='cca', quals=[], storage=[] (at pp.c:8976)
          TypeDecl: declname='cca', quals=[] (at pp.c:8976)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__send', quals=[] (at pp.c:8976)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__resend', quals=[], storage=['inline', 'static'] (at pp.c:8978)
    FuncDecl: quals=None (at pp.c:8978)
      ParamList:  (at pp.c:8978)
        Decl: name='cca', quals=[], storage=[] (at pp.c:8978)
          TypeDecl: declname='cca', quals=[] (at pp.c:8978)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='CC2420TransmitP__resend', quals=[] (at pp.c:8978)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__attemptSend', quals=[], storage=['static'] (at pp.c:8980)
    FuncDecl: quals=None (at pp.c:8980)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__attemptSend', quals=[] (at pp.c:8980)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__congestionBackoff', quals=[], storage=['static'] (at pp.c:8982)
    FuncDecl: quals=None (at pp.c:8982)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__congestionBackoff', quals=[] (at pp.c:8982)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__acquireSpiResource', quals=[], storage=['static'] (at pp.c:8989)
    FuncDecl: quals=None (at pp.c:8989)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__acquireSpiResource', quals=[] (at pp.c:8989)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__releaseSpiResource', quals=[], storage=['inline', 'static'] (at pp.c:8997)
    FuncDecl: quals=None (at pp.c:8997)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__releaseSpiResource', quals=[] (at pp.c:8997)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TransmitP__loadTXFIFO', quals=[], storage=['static'] (at pp.c:8999)
    FuncDecl: quals=None (at pp.c:8999)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TransmitP__loadTXFIFO', quals=[] (at pp.c:8999)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TransmitP__signalDone', quals=[], storage=['static'] (at pp.c:9001)
    FuncDecl: quals=None (at pp.c:9001)
      ParamList:  (at pp.c:9001)
        Decl: name='err', quals=[], storage=[] (at pp.c:9001)
          TypeDecl: declname='err', quals=[] (at pp.c:9001)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TransmitP__signalDone', quals=[] (at pp.c:9001)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__FIFO__get', quals=[], storage=['static'] (at pp.c:9003)
    FuncDecl: quals=None (at pp.c:9003)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__FIFO__get', quals=[] (at pp.c:9003)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__isAddressRecognitionEnabled', quals=[], storage=['static'] (at pp.c:9005)
    FuncDecl: quals=None (at pp.c:9005)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__isAddressRecognitionEnabled', quals=[] (at pp.c:9005)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__isAutoAckEnabled', quals=[], storage=['static'] (at pp.c:9007)
    FuncDecl: quals=None (at pp.c:9007)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__isAutoAckEnabled', quals=[] (at pp.c:9007)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__isHwAutoAckDefault', quals=[], storage=['static'] (at pp.c:9009)
    FuncDecl: quals=None (at pp.c:9009)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__isHwAutoAckDefault', quals=[] (at pp.c:9009)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__getExtAddr', quals=[], storage=['static'] (at pp.c:9011)
    FuncDecl: quals=None (at pp.c:9011)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__getExtAddr', quals=[] (at pp.c:9011)
        IdentifierType: names=['ieee_eui64_t'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__getShortAddr', quals=[], storage=['static'] (at pp.c:9016)
    FuncDecl: quals=None (at pp.c:9016)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__getShortAddr', quals=[] (at pp.c:9016)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ReceiveP__receiveDone_task__postTask', quals=[], storage=['static'] (at pp.c:9018)
    FuncDecl: quals=None (at pp.c:9018)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__receiveDone_task__postTask', quals=[] (at pp.c:9018)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__PacketTimeStamp__clear', quals=[], storage=['static'] (at pp.c:9020)
    FuncDecl: quals=None (at pp.c:9020)
      ParamList:  (at pp.c:9022)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9022)
          PtrDecl: quals=[] (at pp.c:9022)
            TypeDecl: declname='msg', quals=[] (at pp.c:9022)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__clear', quals=[] (at pp.c:9020)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__PacketTimeStamp__set', quals=[], storage=['static'] (at pp.c:9024)
    FuncDecl: quals=None (at pp.c:9024)
      ParamList:  (at pp.c:9026)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9026)
          PtrDecl: quals=[] (at pp.c:9026)
            TypeDecl: declname='msg', quals=[] (at pp.c:9026)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:9031)
          TypeDecl: declname='value', quals=[] (at pp.c:9031)
            IdentifierType: names=['CC2420ReceiveP__PacketTimeStamp__size_type'] (at None)
      TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__set', quals=[] (at pp.c:9024)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__FIFOP__get', quals=[], storage=['static'] (at pp.c:9033)
    FuncDecl: quals=None (at pp.c:9033)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__FIFOP__get', quals=[] (at pp.c:9033)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Receive__receive', quals=[], storage=['static'] (at pp.c:9035)
    FuncDecl: quals=None (at pp.c:9035)
      ParamList:  (at pp.c:9035)
        Decl: name='type', quals=[], storage=[] (at pp.c:9035)
          TypeDecl: declname='type', quals=[] (at pp.c:9035)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='message', quals=[], storage=[] (at pp.c:9035)
          PtrDecl: quals=[] (at pp.c:9035)
            TypeDecl: declname='message', quals=[] (at pp.c:9035)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Receive__receive', quals=[] (at pp.c:9035)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__SACK__strobe', quals=[], storage=['static'] (at pp.c:9037)
    FuncDecl: quals=None (at pp.c:9037)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SACK__strobe', quals=[] (at pp.c:9037)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ReceiveP__CSN__set', quals=[], storage=['static'] (at pp.c:9039)
    FuncDecl: quals=None (at pp.c:9039)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CSN__set', quals=[] (at pp.c:9039)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CSN__clr', quals=[], storage=['static'] (at pp.c:9040)
    FuncDecl: quals=None (at pp.c:9040)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CSN__clr', quals=[] (at pp.c:9040)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:9042)
    FuncDecl: quals=None (at pp.c:9042)
      ParamList:  (at pp.c:9042)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9042)
          PtrDecl: quals=[] (at pp.c:9042)
            TypeDecl: declname='msg', quals=[] (at pp.c:9042)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9042)
        TypeDecl: declname='CC2420ReceiveP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9042)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420ReceiveP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:9053)
    FuncDecl: quals=None (at pp.c:9053)
      ParamList:  (at pp.c:9053)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9053)
          PtrDecl: quals=[] (at pp.c:9053)
            TypeDecl: declname='msg', quals=[] (at pp.c:9053)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9053)
        TypeDecl: declname='CC2420ReceiveP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:9053)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420ReceiveP__Receive__receive', quals=[], storage=['static'] (at pp.c:9061)
    FuncDecl: quals=None (at pp.c:9061)
      ParamList:  (at pp.c:9063)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9063)
          PtrDecl: quals=[] (at pp.c:9063)
            TypeDecl: declname='msg', quals=[] (at pp.c:9063)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9064)
          PtrDecl: quals=[] (at pp.c:9064)
            TypeDecl: declname='payload', quals=[] (at pp.c:9064)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9070)
          TypeDecl: declname='len', quals=[] (at pp.c:9070)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9057)
        TypeDecl: declname='CC2420ReceiveP__Receive__receive', quals=[] (at pp.c:9061)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__release', quals=[], storage=['static'] (at pp.c:9072)
    FuncDecl: quals=None (at pp.c:9072)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__release', quals=[] (at pp.c:9072)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__immediateRequest', quals=[], storage=['static'] (at pp.c:9074)
    FuncDecl: quals=None (at pp.c:9074)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__immediateRequest', quals=[] (at pp.c:9074)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__request', quals=[], storage=['static'] (at pp.c:9076)
    FuncDecl: quals=None (at pp.c:9076)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__request', quals=[] (at pp.c:9076)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__isOwner', quals=[], storage=['static'] (at pp.c:9078)
    FuncDecl: quals=None (at pp.c:9078)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__isOwner', quals=[] (at pp.c:9078)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__continueRead', quals=[], storage=['static'] (at pp.c:9080)
    FuncDecl: quals=None (at pp.c:9080)
      ParamList:  (at pp.c:9080)
        Decl: name='data', quals=[], storage=[] (at pp.c:9080)
          PtrDecl: quals=[] (at pp.c:9080)
            TypeDecl: declname='data', quals=[] (at pp.c:9080)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:9080)
          TypeDecl: declname='length', quals=[] (at pp.c:9080)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__continueRead', quals=[] (at pp.c:9080)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__beginRead', quals=[], storage=['static'] (at pp.c:9082)
    FuncDecl: quals=None (at pp.c:9082)
      ParamList:  (at pp.c:9082)
        Decl: name='data', quals=[], storage=[] (at pp.c:9082)
          PtrDecl: quals=[] (at pp.c:9082)
            TypeDecl: declname='data', quals=[] (at pp.c:9082)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='length', quals=[], storage=[] (at pp.c:9082)
          TypeDecl: declname='length', quals=[] (at pp.c:9082)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__beginRead', quals=[] (at pp.c:9082)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name='CC2420ReceiveP__InterruptFIFOP__disable', quals=[], storage=['static'] (at pp.c:9084)
    FuncDecl: quals=None (at pp.c:9084)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__disable', quals=[] (at pp.c:9084)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__InterruptFIFOP__enableFallingEdge', quals=[], storage=['static'] (at pp.c:9086)
    FuncDecl: quals=None (at pp.c:9086)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__enableFallingEdge', quals=[] (at pp.c:9086)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__SFLUSHRX__strobe', quals=[], storage=['static'] (at pp.c:9088)
    FuncDecl: quals=None (at pp.c:9088)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SFLUSHRX__strobe', quals=[] (at pp.c:9088)
        IdentifierType: names=['cc2420_status_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9090)
    Enum: name='CC2420ReceiveP____nesc_unnamed4373' (at pp.c:9090)
      EnumeratorList:  (at pp.c:9092)
        Enumerator: name='CC2420ReceiveP__receiveDone_task' (at pp.c:9092)
          Constant: type='int', value='19U' (at pp.c:9092)
  Typedef: name='CC2420ReceiveP____nesc_sillytask_receiveDone_task', quals=[], storage=['typedef'] (at pp.c:9095)
    ArrayDecl:  (at pp.c:9095)
      TypeDecl: declname='CC2420ReceiveP____nesc_sillytask_receiveDone_task', quals=[] (at pp.c:9095)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420ReceiveP__receiveDone_task' (at pp.c:9095)
  Typedef: name='CC2420ReceiveP__cc2420_receive_state_t', quals=[], storage=['typedef'] (at pp.c:9106)
    TypeDecl: declname='CC2420ReceiveP__cc2420_receive_state_t', quals=[] (at pp.c:9106)
      Enum: name='CC2420ReceiveP____nesc_unnamed4374' (at pp.c:9098)
        EnumeratorList:  (at pp.c:9099)
          Enumerator: name='CC2420ReceiveP__S_STOPPED' (at pp.c:9099)
          Enumerator: name='CC2420ReceiveP__S_STARTED' (at pp.c:9100)
          Enumerator: name='CC2420ReceiveP__S_RX_LENGTH' (at pp.c:9101)
          Enumerator: name='CC2420ReceiveP__S_RX_DEC' (at pp.c:9102)
          Enumerator: name='CC2420ReceiveP__S_RX_DEC_WAIT' (at pp.c:9103)
          Enumerator: name='CC2420ReceiveP__S_RX_FCF' (at pp.c:9104)
          Enumerator: name='CC2420ReceiveP__S_RX_PAYLOAD' (at pp.c:9105)
  Decl: name=None, quals=[], storage=[] (at pp.c:9108)
    Enum: name='CC2420ReceiveP____nesc_unnamed4375' (at pp.c:9108)
      EnumeratorList:  (at pp.c:9109)
        Enumerator: name='CC2420ReceiveP__RXFIFO_SIZE' (at pp.c:9109)
          Constant: type='int', value='128' (at pp.c:9109)
        Enumerator: name='CC2420ReceiveP__TIMESTAMP_QUEUE_SIZE' (at pp.c:9110)
          Constant: type='int', value='8' (at pp.c:9110)
        Enumerator: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:9111)
          Constant: type='int', value='7' (at pp.c:9111)
  Decl: name='CC2420ReceiveP__m_timestamp_queue', quals=[], storage=[] (at pp.c:9114)
    ArrayDecl:  (at pp.c:9114)
      TypeDecl: declname='CC2420ReceiveP__m_timestamp_queue', quals=[] (at pp.c:9114)
        IdentifierType: names=['uint32_t'] (at None)
      ID: name='CC2420ReceiveP__TIMESTAMP_QUEUE_SIZE' (at pp.c:9114)
  Decl: name='CC2420ReceiveP__m_timestamp_head', quals=[], storage=[] (at pp.c:9116)
    TypeDecl: declname='CC2420ReceiveP__m_timestamp_head', quals=[] (at pp.c:9116)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ReceiveP__m_timestamp_size', quals=[], storage=[] (at pp.c:9118)
    TypeDecl: declname='CC2420ReceiveP__m_timestamp_size', quals=[] (at pp.c:9118)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ReceiveP__m_missed_packets', quals=[], storage=[] (at pp.c:9124)
    TypeDecl: declname='CC2420ReceiveP__m_missed_packets', quals=[] (at pp.c:9124)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ReceiveP__receivingPacket', quals=[], storage=[] (at pp.c:9128)
    TypeDecl: declname='CC2420ReceiveP__receivingPacket', quals=[] (at pp.c:9128)
      IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__rxFrameLength', quals=[], storage=[] (at pp.c:9131)
    TypeDecl: declname='CC2420ReceiveP__rxFrameLength', quals=[] (at pp.c:9131)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ReceiveP__m_bytes_left', quals=[], storage=[] (at pp.c:9133)
    TypeDecl: declname='CC2420ReceiveP__m_bytes_left', quals=[] (at pp.c:9133)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ReceiveP__m_p_rx_buf', quals=[], storage=[] (at pp.c:9135)
    PtrDecl: quals=[] (at pp.c:9135)
      TypeDecl: declname='CC2420ReceiveP__m_p_rx_buf', quals=[] (at pp.c:9135)
        IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ReceiveP__m_rx_buf', quals=[], storage=[] (at pp.c:9137)
    TypeDecl: declname='CC2420ReceiveP__m_rx_buf', quals=[] (at pp.c:9137)
      IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ReceiveP__m_state', quals=[], storage=[] (at pp.c:9139)
    TypeDecl: declname='CC2420ReceiveP__m_state', quals=[] (at pp.c:9139)
      IdentifierType: names=['CC2420ReceiveP__cc2420_receive_state_t'] (at None)
  Decl: name='CC2420ReceiveP__reset_state', quals=[], storage=['static'] (at pp.c:9143)
    FuncDecl: quals=None (at pp.c:9143)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__reset_state', quals=[] (at pp.c:9143)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__beginReceive', quals=[], storage=['static'] (at pp.c:9144)
    FuncDecl: quals=None (at pp.c:9144)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__beginReceive', quals=[] (at pp.c:9144)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__receive', quals=[], storage=['static'] (at pp.c:9145)
    FuncDecl: quals=None (at pp.c:9145)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__receive', quals=[] (at pp.c:9145)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__waitForNextPacket', quals=[], storage=['static'] (at pp.c:9146)
    FuncDecl: quals=None (at pp.c:9146)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__waitForNextPacket', quals=[] (at pp.c:9146)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__flush', quals=[], storage=['static'] (at pp.c:9147)
    FuncDecl: quals=None (at pp.c:9147)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__flush', quals=[] (at pp.c:9147)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__passesAddressCheck', quals=[], storage=['inline', 'static'] (at pp.c:9148)
    FuncDecl: quals=None (at pp.c:9148)
      ParamList:  (at pp.c:9148)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9148)
          PtrDecl: quals=[] (at pp.c:9148)
            TypeDecl: declname='msg', quals=[] (at pp.c:9148)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__passesAddressCheck', quals=[] (at pp.c:9148)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9153)
    FuncDecl: quals=None (at pp.c:9153)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__Init__init', quals=[] (at pp.c:9153)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__StdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:9159)
    FuncDecl: quals=None (at pp.c:9159)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__StdControl__start', quals=[] (at pp.c:9159)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__StdControl__stop', quals=[], storage=['static'] (at pp.c:9161)
    FuncDecl: quals=None (at pp.c:9161)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__StdControl__stop', quals=[] (at pp.c:9161)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Receive__sfd', quals=[], storage=['inline', 'static'] (at pp.c:9163)
    FuncDecl: quals=None (at pp.c:9163)
      ParamList:  (at pp.c:9163)
        Decl: name='time', quals=[], storage=[] (at pp.c:9163)
          TypeDecl: declname='time', quals=[] (at pp.c:9163)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd', quals=[] (at pp.c:9163)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[], storage=['inline', 'static'] (at pp.c:9172)
    FuncDecl: quals=None (at pp.c:9172)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[] (at pp.c:9172)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[], storage=['inline', 'static'] (at pp.c:9179)
    FuncDecl: quals=None (at pp.c:9179)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[] (at pp.c:9179)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ReceiveP__InterruptFIFOP__fired', quals=[], storage=['inline', 'static'] (at pp.c:9189)
    FuncDecl: quals=None (at pp.c:9189)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__fired', quals=[] (at pp.c:9189)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:9191)
    FuncDecl: quals=None (at pp.c:9191)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__SpiResource__granted', quals=[] (at pp.c:9191)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__readDone', quals=[], storage=['inline', 'static'] (at pp.c:9193)
    FuncDecl: quals=None (at pp.c:9193)
      ParamList:  (at pp.c:9193)
        Decl: name='rx_buf', quals=[], storage=[] (at pp.c:9193)
          PtrDecl: quals=[] (at pp.c:9193)
            TypeDecl: declname='rx_buf', quals=[] (at pp.c:9193)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='rx_len', quals=[], storage=[] (at pp.c:9193)
          TypeDecl: declname='rx_len', quals=[] (at pp.c:9193)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9194)
          TypeDecl: declname='error', quals=[] (at pp.c:9194)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__readDone', quals=[] (at pp.c:9193)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__RXFIFO__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:9196)
    FuncDecl: quals=None (at pp.c:9196)
      ParamList:  (at pp.c:9196)
        Decl: name='tx_buf', quals=[], storage=[] (at pp.c:9196)
          PtrDecl: quals=[] (at pp.c:9196)
            TypeDecl: declname='tx_buf', quals=[] (at pp.c:9196)
              IdentifierType: names=['uint8_t'] (at None)
        Decl: name='tx_len', quals=[], storage=[] (at pp.c:9196)
          TypeDecl: declname='tx_len', quals=[] (at pp.c:9196)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9196)
          TypeDecl: declname='error', quals=[] (at pp.c:9196)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__RXFIFO__writeDone', quals=[] (at pp.c:9196)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__receiveDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:9204)
    FuncDecl: quals=None (at pp.c:9204)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__receiveDone_task__runTask', quals=[] (at pp.c:9204)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__CC2420Config__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:9206)
    FuncDecl: quals=None (at pp.c:9206)
      ParamList:  (at pp.c:9206)
        Decl: name='error', quals=[], storage=[] (at pp.c:9206)
          TypeDecl: declname='error', quals=[] (at pp.c:9206)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__CC2420Config__syncDone', quals=[] (at pp.c:9206)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__beginReceive', quals=[], storage=['static'] (at pp.c:9213)
    FuncDecl: quals=None (at pp.c:9213)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__beginReceive', quals=[] (at pp.c:9213)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__flush', quals=[], storage=['static'] (at pp.c:9215)
    FuncDecl: quals=None (at pp.c:9215)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__flush', quals=[] (at pp.c:9215)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__receive', quals=[], storage=['static'] (at pp.c:9217)
    FuncDecl: quals=None (at pp.c:9217)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__receive', quals=[] (at pp.c:9217)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__waitForNextPacket', quals=[], storage=['static'] (at pp.c:9227)
    FuncDecl: quals=None (at pp.c:9227)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__waitForNextPacket', quals=[] (at pp.c:9227)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__reset_state', quals=[], storage=['static'] (at pp.c:9229)
    FuncDecl: quals=None (at pp.c:9229)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ReceiveP__reset_state', quals=[] (at pp.c:9229)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ReceiveP__passesAddressCheck', quals=[], storage=['inline', 'static'] (at pp.c:9240)
    FuncDecl: quals=None (at pp.c:9240)
      ParamList:  (at pp.c:9240)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9240)
          PtrDecl: quals=[] (at pp.c:9240)
            TypeDecl: declname='msg', quals=[] (at pp.c:9240)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ReceiveP__passesAddressCheck', quals=[] (at pp.c:9240)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420PacketP__Acks__requestAck', quals=[], storage=['inline', 'static'] (at pp.c:9242)
    FuncDecl: quals=None (at pp.c:9242)
      ParamList:  (at pp.c:9242)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9242)
          PtrDecl: quals=[] (at pp.c:9242)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9242)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__requestAck', quals=[] (at pp.c:9242)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420PacketP__Acks__noAck', quals=[], storage=['inline', 'static'] (at pp.c:9247)
    FuncDecl: quals=None (at pp.c:9247)
      ParamList:  (at pp.c:9247)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9247)
          PtrDecl: quals=[] (at pp.c:9247)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9247)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__noAck', quals=[] (at pp.c:9247)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420PacketP__Acks__wasAcked', quals=[], storage=['inline', 'static'] (at pp.c:9252)
    FuncDecl: quals=None (at pp.c:9252)
      ParamList:  (at pp.c:9252)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9252)
          PtrDecl: quals=[] (at pp.c:9252)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9252)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__Acks__wasAcked', quals=[] (at pp.c:9252)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420PacketP__getAddressLength', quals=[], storage=['inline', 'static'] (at pp.c:9258)
    FuncDecl: quals=None (at pp.c:9258)
      ParamList:  (at pp.c:9258)
        Decl: name='type', quals=[], storage=[] (at pp.c:9258)
          TypeDecl: declname='type', quals=[] (at pp.c:9258)
            IdentifierType: names=['int'] (at None)
      TypeDecl: declname='CC2420PacketP__getAddressLength', quals=[] (at pp.c:9258)
        IdentifierType: names=['int'] (at None)
  Decl: name='CC2420PacketP__getNetwork', quals=[], storage=['static'] (at pp.c:9267)
    FuncDecl: quals=None (at pp.c:9267)
      ParamList:  (at pp.c:9267)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9267)
          PtrDecl: quals=[] (at pp.c:9267)
            TypeDecl: declname='msg', quals=[] (at pp.c:9267)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9267)
        TypeDecl: declname='CC2420PacketP__getNetwork', quals=[] (at pp.c:9267)
          IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420PacketP__CC2420Packet__getNetwork', quals=[], storage=['inline', 'static'] (at pp.c:9269)
    FuncDecl: quals=None (at pp.c:9269)
      ParamList:  (at pp.c:9269)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9269)
          PtrDecl: quals=[] (at pp.c:9269)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9269)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__CC2420Packet__getNetwork', quals=[] (at pp.c:9269)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420PacketP__CC2420Packet__setNetwork', quals=[], storage=['inline', 'static'] (at pp.c:9278)
    FuncDecl: quals=None (at pp.c:9278)
      ParamList:  (at pp.c:9278)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9278)
          PtrDecl: quals=[] (at pp.c:9278)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9278)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='networkId', quals=[], storage=[] (at pp.c:9278)
          TypeDecl: declname='networkId', quals=[] (at pp.c:9278)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420PacketP__CC2420Packet__setNetwork', quals=[] (at pp.c:9278)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__CC2420PacketBody__getHeader', quals=[], storage=['inline', 'static'] (at pp.c:9287)
    FuncDecl: quals=None (at pp.c:9287)
      ParamList:  (at pp.c:9287)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9287)
          PtrDecl: quals=[] (at pp.c:9287)
            TypeDecl: declname='msg', quals=[] (at pp.c:9287)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9287)
        TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9287)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[], storage=['inline', 'static'] (at pp.c:9289)
    FuncDecl: quals=None (at pp.c:9289)
      ParamList:  (at pp.c:9289)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9289)
          PtrDecl: quals=[] (at pp.c:9289)
            TypeDecl: declname='msg', quals=[] (at pp.c:9289)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9289)
        TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:9289)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[], storage=['static'] (at pp.c:9291)
    FuncDecl: quals=None (at pp.c:9291)
      ParamList:  (at pp.c:9291)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9291)
          PtrDecl: quals=[] (at pp.c:9291)
            TypeDecl: declname='msg', quals=[] (at pp.c:9291)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[] (at pp.c:9291)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__PacketTimeStamp32khz__set', quals=[], storage=['inline', 'static'] (at pp.c:9297)
    FuncDecl: quals=None (at pp.c:9297)
      ParamList:  (at pp.c:9297)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9297)
          PtrDecl: quals=[] (at pp.c:9297)
            TypeDecl: declname='msg', quals=[] (at pp.c:9297)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='value', quals=[], storage=[] (at pp.c:9297)
          TypeDecl: declname='value', quals=[] (at pp.c:9297)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__set', quals=[] (at pp.c:9297)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[], storage=['inline', 'static'] (at pp.c:9299)
    FuncDecl: quals=None (at pp.c:9299)
      ParamList:  (at pp.c:9299)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9299)
          PtrDecl: quals=[] (at pp.c:9299)
            TypeDecl: declname='msg', quals=[] (at pp.c:9299)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[] (at pp.c:9299)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420PacketP__PacketTimeSyncOffset__get', quals=[], storage=['inline', 'static'] (at pp.c:9308)
    FuncDecl: quals=None (at pp.c:9308)
      ParamList:  (at pp.c:9308)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9308)
          PtrDecl: quals=[] (at pp.c:9308)
            TypeDecl: declname='msg', quals=[] (at pp.c:9308)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__get', quals=[] (at pp.c:9308)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CounterToLocalTimeC__1__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:9310)
    FuncDecl: quals=None (at pp.c:9310)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CounterToLocalTimeC__1__Counter__overflow', quals=[] (at pp.c:9310)
        IdentifierType: names=['void'] (at None)
  Decl: name='RandomMlcgC__seed', quals=[], storage=[] (at pp.c:9312)
    TypeDecl: declname='RandomMlcgC__seed', quals=[] (at pp.c:9312)
      IdentifierType: names=['uint32_t'] (at None)
  Decl: name='RandomMlcgC__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9315)
    FuncDecl: quals=None (at pp.c:9315)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Init__init', quals=[] (at pp.c:9315)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='RandomMlcgC__Random__rand32', quals=[], storage=['static'] (at pp.c:9317)
    FuncDecl: quals=None (at pp.c:9317)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Random__rand32', quals=[] (at pp.c:9317)
        IdentifierType: names=['uint32_t'] (at None)
  Decl: name='RandomMlcgC__Random__rand16', quals=[], storage=['inline', 'static'] (at pp.c:9319)
    FuncDecl: quals=None (at pp.c:9319)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='RandomMlcgC__Random__rand16', quals=[] (at pp.c:9319)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='UniqueSendP__SubSend__send', quals=[], storage=['static'] (at pp.c:9321)
    FuncDecl: quals=None (at pp.c:9321)
      ParamList:  (at pp.c:9323)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9323)
          PtrDecl: quals=[] (at pp.c:9323)
            TypeDecl: declname='msg', quals=[] (at pp.c:9323)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9331)
          TypeDecl: declname='len', quals=[] (at pp.c:9331)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueSendP__SubSend__send', quals=[] (at pp.c:9321)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__SubSend__maxPayloadLength', quals=[], storage=['static'] (at pp.c:9333)
    FuncDecl: quals=None (at pp.c:9333)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__SubSend__maxPayloadLength', quals=[] (at pp.c:9333)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='UniqueSendP__Send__sendDone', quals=[], storage=['static'] (at pp.c:9335)
    FuncDecl: quals=None (at pp.c:9335)
      ParamList:  (at pp.c:9337)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9337)
          PtrDecl: quals=[] (at pp.c:9337)
            TypeDecl: declname='msg', quals=[] (at pp.c:9337)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9341)
          TypeDecl: declname='error', quals=[] (at pp.c:9341)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='UniqueSendP__Send__sendDone', quals=[] (at pp.c:9335)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueSendP__Random__rand16', quals=[], storage=['static'] (at pp.c:9343)
    FuncDecl: quals=None (at pp.c:9343)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__Random__rand16', quals=[] (at pp.c:9343)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='UniqueSendP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:9345)
    FuncDecl: quals=None (at pp.c:9345)
      ParamList:  (at pp.c:9345)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9345)
          PtrDecl: quals=[] (at pp.c:9345)
            TypeDecl: declname='msg', quals=[] (at pp.c:9345)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9345)
        TypeDecl: declname='UniqueSendP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9345)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='UniqueSendP__State__toIdle', quals=[], storage=['static'] (at pp.c:9347)
    FuncDecl: quals=None (at pp.c:9347)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__State__toIdle', quals=[] (at pp.c:9347)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueSendP__State__requestState', quals=[], storage=['static'] (at pp.c:9349)
    FuncDecl: quals=None (at pp.c:9349)
      ParamList:  (at pp.c:9349)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:9349)
          TypeDecl: declname='reqState', quals=[] (at pp.c:9349)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueSendP__State__requestState', quals=[] (at pp.c:9349)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__localSendId', quals=[], storage=[] (at pp.c:9351)
    TypeDecl: declname='UniqueSendP__localSendId', quals=[] (at pp.c:9351)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9353)
    Enum: name='UniqueSendP____nesc_unnamed4376' (at pp.c:9353)
      EnumeratorList:  (at pp.c:9354)
        Enumerator: name='UniqueSendP__S_IDLE' (at pp.c:9354)
        Enumerator: name='UniqueSendP__S_SENDING' (at pp.c:9355)
  Decl: name='UniqueSendP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9359)
    FuncDecl: quals=None (at pp.c:9359)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__Init__init', quals=[] (at pp.c:9359)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:9361)
    FuncDecl: quals=None (at pp.c:9361)
      ParamList:  (at pp.c:9361)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9361)
          PtrDecl: quals=[] (at pp.c:9361)
            TypeDecl: declname='msg', quals=[] (at pp.c:9361)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9361)
          TypeDecl: declname='len', quals=[] (at pp.c:9361)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueSendP__Send__send', quals=[] (at pp.c:9361)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueSendP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:9363)
    FuncDecl: quals=None (at pp.c:9363)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueSendP__Send__maxPayloadLength', quals=[] (at pp.c:9363)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='UniqueSendP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:9372)
    FuncDecl: quals=None (at pp.c:9372)
      ParamList:  (at pp.c:9372)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9372)
          PtrDecl: quals=[] (at pp.c:9372)
            TypeDecl: declname='msg', quals=[] (at pp.c:9372)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9372)
          TypeDecl: declname='error', quals=[] (at pp.c:9372)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='UniqueSendP__SubSend__sendDone', quals=[] (at pp.c:9372)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueReceiveP__Receive__receive', quals=[], storage=['static'] (at pp.c:9380)
    FuncDecl: quals=None (at pp.c:9380)
      ParamList:  (at pp.c:9382)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9382)
          PtrDecl: quals=[] (at pp.c:9382)
            TypeDecl: declname='msg', quals=[] (at pp.c:9382)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9383)
          PtrDecl: quals=[] (at pp.c:9383)
            TypeDecl: declname='payload', quals=[] (at pp.c:9383)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9389)
          TypeDecl: declname='len', quals=[] (at pp.c:9389)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9376)
        TypeDecl: declname='UniqueReceiveP__Receive__receive', quals=[] (at pp.c:9380)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='UniqueReceiveP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:9391)
    FuncDecl: quals=None (at pp.c:9391)
      ParamList:  (at pp.c:9391)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9391)
          PtrDecl: quals=[] (at pp.c:9391)
            TypeDecl: declname='msg', quals=[] (at pp.c:9391)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9391)
        TypeDecl: declname='UniqueReceiveP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9391)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='UniqueReceiveP__DuplicateReceive__receive', quals=[], storage=['static'] (at pp.c:9399)
    FuncDecl: quals=None (at pp.c:9399)
      ParamList:  (at pp.c:9401)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9401)
          PtrDecl: quals=[] (at pp.c:9401)
            TypeDecl: declname='msg', quals=[] (at pp.c:9401)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9402)
          PtrDecl: quals=[] (at pp.c:9402)
            TypeDecl: declname='payload', quals=[] (at pp.c:9402)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9408)
          TypeDecl: declname='len', quals=[] (at pp.c:9408)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9395)
        TypeDecl: declname='UniqueReceiveP__DuplicateReceive__receive', quals=[] (at pp.c:9399)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='UniqueReceiveP__receivedMessages', quals=[], storage=[] (at pp.c:9414)
    ArrayDecl:  (at pp.c:9414)
      TypeDecl: declname='UniqueReceiveP__receivedMessages', quals=[] (at pp.c:9414)
        Struct: name='UniqueReceiveP____nesc_unnamed4377', packed=False (at pp.c:9411)
          Decl: name='source', quals=[], storage=[] (at 0)
            TypeDecl: declname='source', quals=[] (at pp.c:9412)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='dsn', quals=[], storage=[] (at 0)
            TypeDecl: declname='dsn', quals=[] (at pp.c:9413)
              IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='4' (at pp.c:9414)
  Decl: name='UniqueReceiveP__writeIndex', quals=[], storage=[] (at pp.c:9416)
    TypeDecl: declname='UniqueReceiveP__writeIndex', quals=[] (at pp.c:9416)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='0' (at pp.c:9416)
  Decl: name='UniqueReceiveP__recycleSourceElement', quals=[], storage=[] (at pp.c:9419)
    TypeDecl: declname='UniqueReceiveP__recycleSourceElement', quals=[] (at pp.c:9419)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9421)
    Enum: name='UniqueReceiveP____nesc_unnamed4378' (at pp.c:9421)
      EnumeratorList:  (at pp.c:9422)
        Enumerator: name='UniqueReceiveP__INVALID_ELEMENT' (at pp.c:9422)
          Constant: type='int', value='0xFF' (at pp.c:9422)
  Decl: name='UniqueReceiveP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9426)
    FuncDecl: quals=None (at pp.c:9426)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='UniqueReceiveP__Init__init', quals=[] (at pp.c:9426)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='UniqueReceiveP__hasSeen', quals=[], storage=['inline', 'static'] (at pp.c:9436)
    FuncDecl: quals=None (at pp.c:9436)
      ParamList:  (at pp.c:9436)
        Decl: name='msgSource', quals=[], storage=[] (at pp.c:9436)
          TypeDecl: declname='msgSource', quals=[] (at pp.c:9436)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='msgDsn', quals=[], storage=[] (at pp.c:9436)
          TypeDecl: declname='msgDsn', quals=[] (at pp.c:9436)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__hasSeen', quals=[] (at pp.c:9436)
        IdentifierType: names=['bool'] (at None)
  Decl: name='UniqueReceiveP__insert', quals=[], storage=['inline', 'static'] (at pp.c:9437)
    FuncDecl: quals=None (at pp.c:9437)
      ParamList:  (at pp.c:9437)
        Decl: name='msgSource', quals=[], storage=[] (at pp.c:9437)
          TypeDecl: declname='msgSource', quals=[] (at pp.c:9437)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='msgDsn', quals=[], storage=[] (at pp.c:9437)
          TypeDecl: declname='msgDsn', quals=[] (at pp.c:9437)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__insert', quals=[] (at pp.c:9437)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueReceiveP__getSourceKey', quals=[], storage=['inline', 'static'] (at pp.c:9438)
    FuncDecl: quals=None (at pp.c:9438)
      ParamList:  (at pp.c:9438)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9438)
          PtrDecl: quals=[] (at pp.c:9438)
            TypeDecl: declname='msg', quals=[] (at pp.c:9438)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__getSourceKey', quals=[] (at pp.c:9438)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='UniqueReceiveP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:9441)
    FuncDecl: quals=None (at pp.c:9441)
      ParamList:  (at pp.c:9441)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9441)
          PtrDecl: quals=[] (at pp.c:9441)
            TypeDecl: declname='msg', quals=[] (at pp.c:9441)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9441)
          PtrDecl: quals=[] (at pp.c:9441)
            TypeDecl: declname='payload', quals=[] (at pp.c:9441)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9442)
          TypeDecl: declname='len', quals=[] (at pp.c:9442)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9441)
        TypeDecl: declname='UniqueReceiveP__SubReceive__receive', quals=[] (at pp.c:9441)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='UniqueReceiveP__hasSeen', quals=[], storage=['inline', 'static'] (at pp.c:9444)
    FuncDecl: quals=None (at pp.c:9444)
      ParamList:  (at pp.c:9444)
        Decl: name='msgSource', quals=[], storage=[] (at pp.c:9444)
          TypeDecl: declname='msgSource', quals=[] (at pp.c:9444)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='msgDsn', quals=[], storage=[] (at pp.c:9444)
          TypeDecl: declname='msgDsn', quals=[] (at pp.c:9444)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__hasSeen', quals=[] (at pp.c:9444)
        IdentifierType: names=['bool'] (at None)
  Decl: name='UniqueReceiveP__insert', quals=[], storage=['inline', 'static'] (at pp.c:9446)
    FuncDecl: quals=None (at pp.c:9446)
      ParamList:  (at pp.c:9446)
        Decl: name='msgSource', quals=[], storage=[] (at pp.c:9446)
          TypeDecl: declname='msgSource', quals=[] (at pp.c:9446)
            IdentifierType: names=['uint16_t'] (at None)
        Decl: name='msgDsn', quals=[], storage=[] (at pp.c:9446)
          TypeDecl: declname='msgDsn', quals=[] (at pp.c:9446)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__insert', quals=[] (at pp.c:9446)
        IdentifierType: names=['void'] (at None)
  Decl: name='UniqueReceiveP__getSourceKey', quals=[], storage=['inline', 'static'] (at pp.c:9448)
    FuncDecl: quals=None (at pp.c:9448)
      ParamList:  (at pp.c:9448)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9448)
          PtrDecl: quals=[] (at pp.c:9448)
            TypeDecl: declname='msg', quals=[] (at pp.c:9448)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='UniqueReceiveP__getSourceKey', quals=[] (at pp.c:9448)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='UniqueReceiveP__DuplicateReceive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:9450)
    FuncDecl: quals=None (at pp.c:9450)
      ParamList:  (at pp.c:9450)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9450)
          PtrDecl: quals=[] (at pp.c:9450)
            TypeDecl: declname='msg', quals=[] (at pp.c:9450)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9450)
          PtrDecl: quals=[] (at pp.c:9450)
            TypeDecl: declname='payload', quals=[] (at pp.c:9450)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9450)
          TypeDecl: declname='len', quals=[] (at pp.c:9450)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9450)
        TypeDecl: declname='UniqueReceiveP__DuplicateReceive__default__receive', quals=[] (at pp.c:9450)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubSend__send', quals=[], storage=['static'] (at pp.c:9452)
    FuncDecl: quals=None (at pp.c:9452)
      ParamList:  (at pp.c:9454)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9454)
          PtrDecl: quals=[] (at pp.c:9454)
            TypeDecl: declname='msg', quals=[] (at pp.c:9454)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9462)
          TypeDecl: declname='len', quals=[] (at pp.c:9462)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__SubSend__send', quals=[] (at pp.c:9452)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubSend__maxPayloadLength', quals=[], storage=['static'] (at pp.c:9464)
    FuncDecl: quals=None (at pp.c:9464)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__SubSend__maxPayloadLength', quals=[] (at pp.c:9464)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__grantTask__postTask', quals=[], storage=['static'] (at pp.c:9466)
    FuncDecl: quals=None (at pp.c:9466)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__grantTask__postTask', quals=[] (at pp.c:9466)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__CC2420Packet__setNetwork', quals=[], storage=['static'] (at pp.c:9468)
    FuncDecl: quals=None (at pp.c:9468)
      ParamList:  (at pp.c:9468)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9468)
          PtrDecl: quals=[] (at pp.c:9468)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9468)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='networkId', quals=[], storage=[] (at pp.c:9468)
          TypeDecl: declname='networkId', quals=[] (at pp.c:9468)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__CC2420Packet__setNetwork', quals=[] (at pp.c:9468)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__CC2420Packet__getNetwork', quals=[], storage=['static'] (at pp.c:9470)
    FuncDecl: quals=None (at pp.c:9470)
      ParamList:  (at pp.c:9470)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9470)
          PtrDecl: quals=[] (at pp.c:9470)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9470)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__CC2420Packet__getNetwork', quals=[] (at pp.c:9470)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__sendDone', quals=[], storage=['static'] (at pp.c:9472)
    FuncDecl: quals=None (at pp.c:9472)
      ParamList:  (at pp.c:9474)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9474)
          PtrDecl: quals=[] (at pp.c:9474)
            TypeDecl: declname='msg', quals=[] (at pp.c:9474)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9478)
          TypeDecl: declname='error', quals=[] (at pp.c:9478)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__sendDone', quals=[] (at pp.c:9472)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__Queue__enqueue', quals=[], storage=['static'] (at pp.c:9480)
    FuncDecl: quals=None (at pp.c:9480)
      ParamList:  (at pp.c:9480)
        Decl: name='id', quals=[], storage=[] (at pp.c:9480)
          TypeDecl: declname='id', quals=[] (at pp.c:9480)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Queue__enqueue', quals=[] (at pp.c:9480)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Queue__isEmpty', quals=[], storage=['static'] (at pp.c:9482)
    FuncDecl: quals=None (at pp.c:9482)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Queue__isEmpty', quals=[] (at pp.c:9482)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420TinyosNetworkP__Queue__dequeue', quals=[], storage=['static'] (at pp.c:9484)
    FuncDecl: quals=None (at pp.c:9484)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Queue__dequeue', quals=[] (at pp.c:9484)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:9486)
    FuncDecl: quals=None (at pp.c:9486)
      ParamList:  (at pp.c:9486)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9486)
          PtrDecl: quals=[] (at pp.c:9486)
            TypeDecl: declname='msg', quals=[] (at pp.c:9486)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9486)
        TypeDecl: declname='CC2420TinyosNetworkP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9486)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:9497)
    FuncDecl: quals=None (at pp.c:9497)
      ParamList:  (at pp.c:9497)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9497)
          PtrDecl: quals=[] (at pp.c:9497)
            TypeDecl: declname='msg', quals=[] (at pp.c:9497)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9497)
        TypeDecl: declname='CC2420TinyosNetworkP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:9497)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareReceive__receive', quals=[], storage=['static'] (at pp.c:9505)
    FuncDecl: quals=None (at pp.c:9505)
      ParamList:  (at pp.c:9507)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9507)
          PtrDecl: quals=[] (at pp.c:9507)
            TypeDecl: declname='msg', quals=[] (at pp.c:9507)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9508)
          PtrDecl: quals=[] (at pp.c:9508)
            TypeDecl: declname='payload', quals=[] (at pp.c:9508)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9514)
          TypeDecl: declname='len', quals=[] (at pp.c:9514)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9501)
        TypeDecl: declname='CC2420TinyosNetworkP__BareReceive__receive', quals=[] (at pp.c:9505)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__granted', quals=[], storage=['static'] (at pp.c:9516)
    FuncDecl: quals=None (at pp.c:9516)
      ParamList:  (at pp.c:9518)
        Decl: name='arg_0x102904060', quals=[], storage=[] (at pp.c:9518)
          TypeDecl: declname='arg_0x102904060', quals=[] (at pp.c:9518)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__granted', quals=[] (at pp.c:9516)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareSend__sendDone', quals=[], storage=['static'] (at pp.c:9520)
    FuncDecl: quals=None (at pp.c:9520)
      ParamList:  (at pp.c:9522)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9522)
          PtrDecl: quals=[] (at pp.c:9522)
            TypeDecl: declname='msg', quals=[] (at pp.c:9522)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9526)
          TypeDecl: declname='error', quals=[] (at pp.c:9526)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__BareSend__sendDone', quals=[] (at pp.c:9520)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveReceive__receive', quals=[], storage=['static'] (at pp.c:9534)
    FuncDecl: quals=None (at pp.c:9534)
      ParamList:  (at pp.c:9536)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9536)
          PtrDecl: quals=[] (at pp.c:9536)
            TypeDecl: declname='msg', quals=[] (at pp.c:9536)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9537)
          PtrDecl: quals=[] (at pp.c:9537)
            TypeDecl: declname='payload', quals=[] (at pp.c:9537)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9543)
          TypeDecl: declname='len', quals=[] (at pp.c:9543)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9530)
        TypeDecl: declname='CC2420TinyosNetworkP__ActiveReceive__receive', quals=[] (at pp.c:9534)
          IdentifierType: names=['message_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9545)
    Enum: name='CC2420TinyosNetworkP____nesc_unnamed4379' (at pp.c:9545)
      EnumeratorList:  (at pp.c:9547)
        Enumerator: name='CC2420TinyosNetworkP__grantTask' (at pp.c:9547)
          Constant: type='int', value='20U' (at pp.c:9547)
  Typedef: name='CC2420TinyosNetworkP____nesc_sillytask_grantTask', quals=[], storage=['typedef'] (at pp.c:9550)
    ArrayDecl:  (at pp.c:9550)
      TypeDecl: declname='CC2420TinyosNetworkP____nesc_sillytask_grantTask', quals=[] (at pp.c:9550)
        IdentifierType: names=['int'] (at None)
      ID: name='CC2420TinyosNetworkP__grantTask' (at pp.c:9550)
  Decl: name=None, quals=[], storage=[] (at pp.c:9552)
    Enum: name='CC2420TinyosNetworkP____nesc_unnamed4380' (at pp.c:9552)
      EnumeratorList:  (at pp.c:9553)
        Enumerator: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:9553)
          Constant: type='int', value='0xff' (at pp.c:9553)
        Enumerator: name='CC2420TinyosNetworkP__TINYOS_N_NETWORKS' (at pp.c:9554)
          Constant: type='int', value='1U' (at pp.c:9554)
  Decl: name='CC2420TinyosNetworkP__m_busy_client', quals=[], storage=[] (at pp.c:9564)
    TypeDecl: declname='CC2420TinyosNetworkP__m_busy_client', quals=[] (at pp.c:9564)
      Enum: name='CC2420TinyosNetworkP____nesc_unnamed4381' (at pp.c:9561)
        EnumeratorList:  (at pp.c:9562)
          Enumerator: name='CC2420TinyosNetworkP__CLIENT_AM' (at pp.c:9562)
          Enumerator: name='CC2420TinyosNetworkP__CLIENT_BARE' (at pp.c:9563)
  Decl: name='CC2420TinyosNetworkP__resource_owner', quals=[], storage=[] (at pp.c:9566)
    TypeDecl: declname='CC2420TinyosNetworkP__resource_owner', quals=[] (at pp.c:9566)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:9566)
  Decl: name='CC2420TinyosNetworkP__next_owner', quals=[], storage=[] (at pp.c:9568)
    TypeDecl: declname='CC2420TinyosNetworkP__next_owner', quals=[] (at pp.c:9568)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__send', quals=[], storage=['static'] (at pp.c:9570)
    FuncDecl: quals=None (at pp.c:9570)
      ParamList:  (at pp.c:9570)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9570)
          PtrDecl: quals=[] (at pp.c:9570)
            TypeDecl: declname='msg', quals=[] (at pp.c:9570)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9570)
          TypeDecl: declname='len', quals=[] (at pp.c:9570)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__send', quals=[] (at pp.c:9570)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:9580)
    FuncDecl: quals=None (at pp.c:9580)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[] (at pp.c:9580)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__ActiveSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:9584)
    FuncDecl: quals=None (at pp.c:9584)
      ParamList:  (at pp.c:9584)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9584)
          PtrDecl: quals=[] (at pp.c:9584)
            TypeDecl: declname='msg', quals=[] (at pp.c:9584)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9584)
          TypeDecl: declname='len', quals=[] (at pp.c:9584)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9584)
        TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__getPayload', quals=[] (at pp.c:9584)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:9586)
    FuncDecl: quals=None (at pp.c:9586)
      ParamList:  (at pp.c:9586)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9586)
          PtrDecl: quals=[] (at pp.c:9586)
            TypeDecl: declname='msg', quals=[] (at pp.c:9586)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9586)
          TypeDecl: declname='len', quals=[] (at pp.c:9586)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9586)
        TypeDecl: declname='CC2420TinyosNetworkP__BareSend__getPayload', quals=[] (at pp.c:9586)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:9596)
    FuncDecl: quals=None (at pp.c:9596)
      ParamList:  (at pp.c:9596)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9596)
          PtrDecl: quals=[] (at pp.c:9596)
            TypeDecl: declname='msg', quals=[] (at pp.c:9596)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9596)
          TypeDecl: declname='error', quals=[] (at pp.c:9596)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__SubSend__sendDone', quals=[] (at pp.c:9596)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:9605)
    FuncDecl: quals=None (at pp.c:9605)
      ParamList:  (at pp.c:9605)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9605)
          PtrDecl: quals=[] (at pp.c:9605)
            TypeDecl: declname='msg', quals=[] (at pp.c:9605)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9605)
          PtrDecl: quals=[] (at pp.c:9605)
            TypeDecl: declname='payload', quals=[] (at pp.c:9605)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9605)
          TypeDecl: declname='len', quals=[] (at pp.c:9605)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9605)
        TypeDecl: declname='CC2420TinyosNetworkP__SubReceive__receive', quals=[] (at pp.c:9605)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__grantTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:9607)
    FuncDecl: quals=None (at pp.c:9607)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__grantTask__runTask', quals=[] (at pp.c:9607)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:9609)
    FuncDecl: quals=None (at pp.c:9609)
      ParamList:  (at pp.c:9609)
        Decl: name='id', quals=[], storage=[] (at pp.c:9609)
          TypeDecl: declname='id', quals=[] (at pp.c:9609)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__request', quals=[] (at pp.c:9609)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:9611)
    FuncDecl: quals=None (at pp.c:9611)
      ParamList:  (at pp.c:9611)
        Decl: name='id', quals=[], storage=[] (at pp.c:9611)
          TypeDecl: declname='id', quals=[] (at pp.c:9611)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[] (at pp.c:9611)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:9613)
    FuncDecl: quals=None (at pp.c:9613)
      ParamList:  (at pp.c:9613)
        Decl: name='id', quals=[], storage=[] (at pp.c:9613)
          TypeDecl: declname='id', quals=[] (at pp.c:9613)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__release', quals=[] (at pp.c:9613)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:9615)
    FuncDecl: quals=None (at pp.c:9615)
      ParamList:  (at pp.c:9615)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9615)
          PtrDecl: quals=[] (at pp.c:9615)
            TypeDecl: declname='msg', quals=[] (at pp.c:9615)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9615)
          PtrDecl: quals=[] (at pp.c:9615)
            TypeDecl: declname='payload', quals=[] (at pp.c:9615)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9615)
          TypeDecl: declname='len', quals=[] (at pp.c:9615)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9615)
        TypeDecl: declname='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[] (at pp.c:9615)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:9618)
    FuncDecl: quals=None (at pp.c:9618)
      ParamList:  (at pp.c:9618)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9618)
          PtrDecl: quals=[] (at pp.c:9618)
            TypeDecl: declname='msg', quals=[] (at pp.c:9618)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9618)
          TypeDecl: declname='error', quals=[] (at pp.c:9618)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[] (at pp.c:9618)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420TinyosNetworkP__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:9627)
    FuncDecl: quals=None (at pp.c:9627)
      ParamList:  (at pp.c:9627)
        Decl: name='client', quals=[], storage=[] (at pp.c:9627)
          TypeDecl: declname='client', quals=[] (at pp.c:9627)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420TinyosNetworkP__Resource__default__granted', quals=[] (at pp.c:9627)
        IdentifierType: names=['void'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9629)
    Enum: name='FcfsResourceQueueC__0____nesc_unnamed4382' (at pp.c:9629)
      EnumeratorList:  (at pp.c:9631)
        Enumerator: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:9631)
          Constant: type='int', value='0xFF' (at pp.c:9631)
  Decl: name='FcfsResourceQueueC__0__resQ', quals=[], storage=[] (at pp.c:9633)
    ArrayDecl:  (at pp.c:9633)
      TypeDecl: declname='FcfsResourceQueueC__0__resQ', quals=[] (at pp.c:9633)
        IdentifierType: names=['uint8_t'] (at None)
      Constant: type='int', value='1' (at pp.c:9633)
  Decl: name='FcfsResourceQueueC__0__qHead', quals=[], storage=[] (at pp.c:9634)
    TypeDecl: declname='FcfsResourceQueueC__0__qHead', quals=[] (at pp.c:9634)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:9634)
  Decl: name='FcfsResourceQueueC__0__qTail', quals=[], storage=[] (at pp.c:9635)
    TypeDecl: declname='FcfsResourceQueueC__0__qTail', quals=[] (at pp.c:9635)
      IdentifierType: names=['uint8_t'] (at None)
    ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:9635)
  Decl: name='FcfsResourceQueueC__0__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9637)
    FuncDecl: quals=None (at pp.c:9637)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__Init__init', quals=[] (at pp.c:9637)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[], storage=['static'] (at pp.c:9642)
    FuncDecl: quals=None (at pp.c:9642)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[] (at pp.c:9642)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[], storage=['inline', 'static'] (at pp.c:9646)
    FuncDecl: quals=None (at pp.c:9646)
      ParamList:  (at pp.c:9646)
        Decl: name='id', quals=[], storage=[] (at pp.c:9646)
          TypeDecl: declname='id', quals=[] (at pp.c:9646)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[] (at pp.c:9646)
        IdentifierType: names=['bool'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:9650)
    FuncDecl: quals=None (at pp.c:9650)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[] (at pp.c:9650)
        IdentifierType: names=['resource_client_id_t'] (at None)
  Decl: name='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:9652)
    FuncDecl: quals=None (at pp.c:9652)
      ParamList:  (at pp.c:9652)
        Decl: name='id', quals=[], storage=[] (at pp.c:9652)
          TypeDecl: declname='id', quals=[] (at pp.c:9652)
            IdentifierType: names=['resource_client_id_t'] (at None)
      TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[] (at pp.c:9652)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SubSend__send', quals=[], storage=['static'] (at pp.c:9654)
    FuncDecl: quals=None (at pp.c:9654)
      ParamList:  (at pp.c:9656)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9656)
          PtrDecl: quals=[] (at pp.c:9656)
            TypeDecl: declname='msg', quals=[] (at pp.c:9656)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9664)
          TypeDecl: declname='len', quals=[] (at pp.c:9664)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubSend__send', quals=[] (at pp.c:9654)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SubSend__maxPayloadLength', quals=[], storage=['static'] (at pp.c:9666)
    FuncDecl: quals=None (at pp.c:9666)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SubSend__maxPayloadLength', quals=[] (at pp.c:9666)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__send__postTask', quals=[], storage=['static'] (at pp.c:9668)
    FuncDecl: quals=None (at pp.c:9668)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__send__postTask', quals=[] (at pp.c:9668)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__setCongestionBackoff', quals=[], storage=['static'] (at pp.c:9670)
    FuncDecl: quals=None (at pp.c:9670)
      ParamList:  (at pp.c:9670)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:9670)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:9670)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:9670)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__setInitialBackoff', quals=[], storage=['static'] (at pp.c:9672)
    FuncDecl: quals=None (at pp.c:9672)
      ParamList:  (at pp.c:9672)
        Decl: name='backoffTime', quals=[], storage=[] (at pp.c:9672)
          TypeDecl: declname='backoffTime', quals=[] (at pp.c:9672)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:9672)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SystemLowPowerListening__getDelayAfterReceive', quals=[], storage=['static'] (at pp.c:9674)
    FuncDecl: quals=None (at pp.c:9674)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SystemLowPowerListening__getDelayAfterReceive', quals=[] (at pp.c:9674)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='DefaultLplP__OffTimer__startOneShot', quals=[], storage=['static'] (at pp.c:9676)
    FuncDecl: quals=None (at pp.c:9676)
      ParamList:  (at pp.c:9676)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9676)
          TypeDecl: declname='dt', quals=[] (at pp.c:9676)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='DefaultLplP__OffTimer__startOneShot', quals=[] (at pp.c:9676)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__OffTimer__stop', quals=[], storage=['static'] (at pp.c:9681)
    FuncDecl: quals=None (at pp.c:9681)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__OffTimer__stop', quals=[] (at pp.c:9681)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Send__sendDone', quals=[], storage=['static'] (at pp.c:9683)
    FuncDecl: quals=None (at pp.c:9683)
      ParamList:  (at pp.c:9685)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9685)
          PtrDecl: quals=[] (at pp.c:9685)
            TypeDecl: declname='msg', quals=[] (at pp.c:9685)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9689)
          TypeDecl: declname='error', quals=[] (at pp.c:9689)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__Send__sendDone', quals=[] (at pp.c:9683)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SendState__getState', quals=[], storage=['static'] (at pp.c:9691)
    FuncDecl: quals=None (at pp.c:9691)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendState__getState', quals=[] (at pp.c:9691)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__SendState__toIdle', quals=[], storage=['static'] (at pp.c:9693)
    FuncDecl: quals=None (at pp.c:9693)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendState__toIdle', quals=[] (at pp.c:9693)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SendState__requestState', quals=[], storage=['static'] (at pp.c:9695)
    FuncDecl: quals=None (at pp.c:9695)
      ParamList:  (at pp.c:9695)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:9695)
          TypeDecl: declname='reqState', quals=[] (at pp.c:9695)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__SendState__requestState', quals=[] (at pp.c:9695)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SendState__forceState', quals=[], storage=['static'] (at pp.c:9701)
    FuncDecl: quals=None (at pp.c:9701)
      ParamList:  (at pp.c:9701)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:9701)
          TypeDecl: declname='reqState', quals=[] (at pp.c:9701)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__SendState__forceState', quals=[] (at pp.c:9701)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Random__rand16', quals=[], storage=['static'] (at pp.c:9703)
    FuncDecl: quals=None (at pp.c:9703)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__Random__rand16', quals=[] (at pp.c:9703)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='DefaultLplP__Resend__resend', quals=[], storage=['static'] (at pp.c:9705)
    FuncDecl: quals=None (at pp.c:9705)
      ParamList:  (at pp.c:9705)
        Decl: name='useCca', quals=[], storage=[] (at pp.c:9705)
          TypeDecl: declname='useCca', quals=[] (at pp.c:9705)
            IdentifierType: names=['bool'] (at None)
      TypeDecl: declname='DefaultLplP__Resend__resend', quals=[] (at pp.c:9705)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SubControl__start', quals=[], storage=['static'] (at pp.c:9707)
    FuncDecl: quals=None (at pp.c:9707)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__start', quals=[] (at pp.c:9707)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SubControl__stop', quals=[], storage=['static'] (at pp.c:9709)
    FuncDecl: quals=None (at pp.c:9709)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__stop', quals=[] (at pp.c:9709)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__Receive__receive', quals=[], storage=['static'] (at pp.c:9717)
    FuncDecl: quals=None (at pp.c:9717)
      ParamList:  (at pp.c:9719)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9719)
          PtrDecl: quals=[] (at pp.c:9719)
            TypeDecl: declname='msg', quals=[] (at pp.c:9719)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9720)
          PtrDecl: quals=[] (at pp.c:9720)
            TypeDecl: declname='payload', quals=[] (at pp.c:9720)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9726)
          TypeDecl: declname='len', quals=[] (at pp.c:9726)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9713)
        TypeDecl: declname='DefaultLplP__Receive__receive', quals=[] (at pp.c:9717)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='DefaultLplP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:9728)
    FuncDecl: quals=None (at pp.c:9728)
      ParamList:  (at pp.c:9728)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9728)
          PtrDecl: quals=[] (at pp.c:9728)
            TypeDecl: declname='msg', quals=[] (at pp.c:9728)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9728)
        TypeDecl: declname='DefaultLplP__CC2420PacketBody__getHeader', quals=[] (at pp.c:9728)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='DefaultLplP__CC2420PacketBody__getMetadata', quals=[], storage=['static'] (at pp.c:9739)
    FuncDecl: quals=None (at pp.c:9739)
      ParamList:  (at pp.c:9739)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9739)
          PtrDecl: quals=[] (at pp.c:9739)
            TypeDecl: declname='msg', quals=[] (at pp.c:9739)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9739)
        TypeDecl: declname='DefaultLplP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:9739)
          IdentifierType: names=['cc2420_metadata_t'] (at None)
  Decl: name='DefaultLplP__RadioPowerState__getState', quals=[], storage=['static'] (at pp.c:9741)
    FuncDecl: quals=None (at pp.c:9741)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__RadioPowerState__getState', quals=[] (at pp.c:9741)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__RadioPowerState__forceState', quals=[], storage=['static'] (at pp.c:9743)
    FuncDecl: quals=None (at pp.c:9743)
      ParamList:  (at pp.c:9743)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:9743)
          TypeDecl: declname='reqState', quals=[] (at pp.c:9743)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioPowerState__forceState', quals=[] (at pp.c:9743)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__startRadio__postTask', quals=[], storage=['static'] (at pp.c:9745)
    FuncDecl: quals=None (at pp.c:9745)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__startRadio__postTask', quals=[] (at pp.c:9745)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__SendDoneTimer__isRunning', quals=[], storage=['static'] (at pp.c:9747)
    FuncDecl: quals=None (at pp.c:9747)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendDoneTimer__isRunning', quals=[] (at pp.c:9747)
        IdentifierType: names=['bool'] (at None)
  Decl: name='DefaultLplP__SendDoneTimer__startOneShot', quals=[], storage=['static'] (at pp.c:9749)
    FuncDecl: quals=None (at pp.c:9749)
      ParamList:  (at pp.c:9749)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9749)
          TypeDecl: declname='dt', quals=[] (at pp.c:9749)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='DefaultLplP__SendDoneTimer__startOneShot', quals=[] (at pp.c:9749)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SendDoneTimer__stop', quals=[], storage=['static'] (at pp.c:9754)
    FuncDecl: quals=None (at pp.c:9754)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendDoneTimer__stop', quals=[] (at pp.c:9754)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__PacketAcknowledgements__requestAck', quals=[], storage=['static'] (at pp.c:9756)
    FuncDecl: quals=None (at pp.c:9756)
      ParamList:  (at pp.c:9758)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9758)
          PtrDecl: quals=[] (at pp.c:9758)
            TypeDecl: declname='msg', quals=[] (at pp.c:9758)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__PacketAcknowledgements__requestAck', quals=[] (at pp.c:9756)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__PacketAcknowledgements__noAck', quals=[], storage=['static'] (at pp.c:9760)
    FuncDecl: quals=None (at pp.c:9760)
      ParamList:  (at pp.c:9762)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9762)
          PtrDecl: quals=[] (at pp.c:9762)
            TypeDecl: declname='msg', quals=[] (at pp.c:9762)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__PacketAcknowledgements__noAck', quals=[] (at pp.c:9760)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__PacketAcknowledgements__wasAcked', quals=[], storage=['static'] (at pp.c:9764)
    FuncDecl: quals=None (at pp.c:9764)
      ParamList:  (at pp.c:9766)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9766)
          PtrDecl: quals=[] (at pp.c:9766)
            TypeDecl: declname='msg', quals=[] (at pp.c:9766)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__PacketAcknowledgements__wasAcked', quals=[] (at pp.c:9764)
        IdentifierType: names=['bool'] (at None)
  Decl: name='DefaultLplP__SplitControlState__getState', quals=[], storage=['static'] (at pp.c:9768)
    FuncDecl: quals=None (at pp.c:9768)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SplitControlState__getState', quals=[] (at pp.c:9768)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__resend__postTask', quals=[], storage=['static'] (at pp.c:9770)
    FuncDecl: quals=None (at pp.c:9770)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__resend__postTask', quals=[] (at pp.c:9770)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__PowerCycle__getSleepInterval', quals=[], storage=['static'] (at pp.c:9772)
    FuncDecl: quals=None (at pp.c:9772)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__PowerCycle__getSleepInterval', quals=[] (at pp.c:9772)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='DefaultLplP__PowerCycle__setSleepInterval', quals=[], storage=['static'] (at pp.c:9774)
    FuncDecl: quals=None (at pp.c:9774)
      ParamList:  (at pp.c:9774)
        Decl: name='sleepIntervalMs', quals=[], storage=[] (at pp.c:9774)
          TypeDecl: declname='sleepIntervalMs', quals=[] (at pp.c:9774)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__PowerCycle__setSleepInterval', quals=[] (at pp.c:9774)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__stopRadio__postTask', quals=[], storage=['static'] (at pp.c:9776)
    FuncDecl: quals=None (at pp.c:9776)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__stopRadio__postTask', quals=[] (at pp.c:9776)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9778)
    Enum: name='DefaultLplP____nesc_unnamed4383' (at pp.c:9778)
      EnumeratorList:  (at pp.c:9780)
        Enumerator: name='DefaultLplP__send' (at pp.c:9780)
          Constant: type='int', value='21U' (at pp.c:9780)
  Typedef: name='DefaultLplP____nesc_sillytask_send', quals=[], storage=['typedef'] (at pp.c:9783)
    ArrayDecl:  (at pp.c:9783)
      TypeDecl: declname='DefaultLplP____nesc_sillytask_send', quals=[] (at pp.c:9783)
        IdentifierType: names=['int'] (at None)
      ID: name='DefaultLplP__send' (at pp.c:9783)
  Decl: name=None, quals=[], storage=[] (at pp.c:9784)
    Enum: name='DefaultLplP____nesc_unnamed4384' (at pp.c:9784)
      EnumeratorList:  (at pp.c:9786)
        Enumerator: name='DefaultLplP__resend' (at pp.c:9786)
          Constant: type='int', value='22U' (at pp.c:9786)
  Typedef: name='DefaultLplP____nesc_sillytask_resend', quals=[], storage=['typedef'] (at pp.c:9789)
    ArrayDecl:  (at pp.c:9789)
      TypeDecl: declname='DefaultLplP____nesc_sillytask_resend', quals=[] (at pp.c:9789)
        IdentifierType: names=['int'] (at None)
      ID: name='DefaultLplP__resend' (at pp.c:9789)
  Decl: name=None, quals=[], storage=[] (at pp.c:9790)
    Enum: name='DefaultLplP____nesc_unnamed4385' (at pp.c:9790)
      EnumeratorList:  (at pp.c:9792)
        Enumerator: name='DefaultLplP__startRadio' (at pp.c:9792)
          Constant: type='int', value='23U' (at pp.c:9792)
  Typedef: name='DefaultLplP____nesc_sillytask_startRadio', quals=[], storage=['typedef'] (at pp.c:9795)
    ArrayDecl:  (at pp.c:9795)
      TypeDecl: declname='DefaultLplP____nesc_sillytask_startRadio', quals=[] (at pp.c:9795)
        IdentifierType: names=['int'] (at None)
      ID: name='DefaultLplP__startRadio' (at pp.c:9795)
  Decl: name=None, quals=[], storage=[] (at pp.c:9796)
    Enum: name='DefaultLplP____nesc_unnamed4386' (at pp.c:9796)
      EnumeratorList:  (at pp.c:9798)
        Enumerator: name='DefaultLplP__stopRadio' (at pp.c:9798)
          Constant: type='int', value='24U' (at pp.c:9798)
  Typedef: name='DefaultLplP____nesc_sillytask_stopRadio', quals=[], storage=['typedef'] (at pp.c:9801)
    ArrayDecl:  (at pp.c:9801)
      TypeDecl: declname='DefaultLplP____nesc_sillytask_stopRadio', quals=[] (at pp.c:9801)
        IdentifierType: names=['int'] (at None)
      ID: name='DefaultLplP__stopRadio' (at pp.c:9801)
  Decl: name='DefaultLplP__currentSendMsg', quals=[], storage=[] (at pp.c:9803)
    PtrDecl: quals=[] (at pp.c:9803)
      TypeDecl: declname='DefaultLplP__currentSendMsg', quals=[] (at pp.c:9803)
        IdentifierType: names=['message_t'] (at None)
  Decl: name='DefaultLplP__currentSendLen', quals=[], storage=[] (at pp.c:9806)
    TypeDecl: declname='DefaultLplP__currentSendLen', quals=[] (at pp.c:9806)
      IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__dutyCycling', quals=[], storage=[] (at pp.c:9809)
    TypeDecl: declname='DefaultLplP__dutyCycling', quals=[] (at pp.c:9809)
      IdentifierType: names=['bool'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9814)
    Enum: name='DefaultLplP____nesc_unnamed4387' (at pp.c:9814)
      EnumeratorList:  (at pp.c:9815)
        Enumerator: name='DefaultLplP__S_OFF' (at pp.c:9815)
        Enumerator: name='DefaultLplP__S_TURNING_ON' (at pp.c:9816)
        Enumerator: name='DefaultLplP__S_ON' (at pp.c:9817)
        Enumerator: name='DefaultLplP__S_TURNING_OFF' (at pp.c:9818)
  Decl: name=None, quals=[], storage=[] (at pp.c:9824)
    Enum: name='DefaultLplP____nesc_unnamed4388' (at pp.c:9824)
      EnumeratorList:  (at pp.c:9825)
        Enumerator: name='DefaultLplP__S_IDLE' (at pp.c:9825)
        Enumerator: name='DefaultLplP__S_SENDING' (at pp.c:9826)
  Decl: name=None, quals=[], storage=[] (at pp.c:9829)
    Enum: name='DefaultLplP____nesc_unnamed4389' (at pp.c:9829)
      EnumeratorList:  (at pp.c:9830)
        Enumerator: name='DefaultLplP__ONE_MESSAGE' (at pp.c:9830)
          Constant: type='int', value='0' (at pp.c:9830)
  Decl: name='DefaultLplP__initializeSend', quals=[], storage=['static'] (at pp.c:9839)
    FuncDecl: quals=None (at pp.c:9839)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__initializeSend', quals=[] (at pp.c:9839)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__startOffTimer', quals=[], storage=['inline', 'static'] (at pp.c:9840)
    FuncDecl: quals=None (at pp.c:9840)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__startOffTimer', quals=[] (at pp.c:9840)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:9843)
    FuncDecl: quals=None (at pp.c:9843)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__Init__init', quals=[] (at pp.c:9843)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__LowPowerListening__setLocalWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:9845)
    FuncDecl: quals=None (at pp.c:9845)
      ParamList:  (at pp.c:9845)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:9845)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:9845)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__LowPowerListening__setLocalWakeupInterval', quals=[] (at pp.c:9845)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:9847)
    FuncDecl: quals=None (at pp.c:9847)
      ParamList:  (at pp.c:9847)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9847)
          PtrDecl: quals=[] (at pp.c:9847)
            TypeDecl: declname='msg', quals=[] (at pp.c:9847)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:9848)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:9848)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[] (at pp.c:9847)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:9855)
    FuncDecl: quals=None (at pp.c:9855)
      ParamList:  (at pp.c:9855)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9855)
          PtrDecl: quals=[] (at pp.c:9855)
            TypeDecl: declname='msg', quals=[] (at pp.c:9855)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[] (at pp.c:9855)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='DefaultLplP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:9857)
    FuncDecl: quals=None (at pp.c:9857)
      ParamList:  (at pp.c:9857)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9857)
          PtrDecl: quals=[] (at pp.c:9857)
            TypeDecl: declname='msg', quals=[] (at pp.c:9857)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9857)
          TypeDecl: declname='len', quals=[] (at pp.c:9857)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='DefaultLplP__Send__send', quals=[] (at pp.c:9857)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='DefaultLplP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:9859)
    FuncDecl: quals=None (at pp.c:9859)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__Send__maxPayloadLength', quals=[] (at pp.c:9859)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:9869)
    FuncDecl: quals=None (at pp.c:9869)
      ParamList:  (at pp.c:9869)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9869)
          PtrDecl: quals=[] (at pp.c:9869)
            TypeDecl: declname='msg', quals=[] (at pp.c:9869)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:9869)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:9877)
    FuncDecl: quals=None (at pp.c:9877)
      ParamList:  (at pp.c:9877)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9877)
          PtrDecl: quals=[] (at pp.c:9877)
            TypeDecl: declname='msg', quals=[] (at pp.c:9877)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:9877)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__RadioBackoff__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:9885)
    FuncDecl: quals=None (at pp.c:9885)
      ParamList:  (at pp.c:9885)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9885)
          PtrDecl: quals=[] (at pp.c:9885)
            TypeDecl: declname='msg', quals=[] (at pp.c:9885)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='DefaultLplP__RadioBackoff__requestCca', quals=[] (at pp.c:9885)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__PowerCycle__detected', quals=[], storage=['inline', 'static'] (at pp.c:9894)
    FuncDecl: quals=None (at pp.c:9894)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__PowerCycle__detected', quals=[] (at pp.c:9894)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SubControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:9896)
    FuncDecl: quals=None (at pp.c:9896)
      ParamList:  (at pp.c:9896)
        Decl: name='error', quals=[], storage=[] (at pp.c:9896)
          TypeDecl: declname='error', quals=[] (at pp.c:9896)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__startDone', quals=[] (at pp.c:9896)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SubControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:9907)
    FuncDecl: quals=None (at pp.c:9907)
      ParamList:  (at pp.c:9907)
        Decl: name='error', quals=[], storage=[] (at pp.c:9907)
          TypeDecl: declname='error', quals=[] (at pp.c:9907)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubControl__stopDone', quals=[] (at pp.c:9907)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:9909)
    FuncDecl: quals=None (at pp.c:9909)
      ParamList:  (at pp.c:9909)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9909)
          PtrDecl: quals=[] (at pp.c:9909)
            TypeDecl: declname='msg', quals=[] (at pp.c:9909)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9909)
          TypeDecl: declname='error', quals=[] (at pp.c:9909)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__SubSend__sendDone', quals=[] (at pp.c:9909)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:9911)
    FuncDecl: quals=None (at pp.c:9911)
      ParamList:  (at pp.c:9911)
        Decl: name='msg', quals=[], storage=[] (at pp.c:9911)
          PtrDecl: quals=[] (at pp.c:9911)
            TypeDecl: declname='msg', quals=[] (at pp.c:9911)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:9911)
          PtrDecl: quals=[] (at pp.c:9911)
            TypeDecl: declname='payload', quals=[] (at pp.c:9911)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:9912)
          TypeDecl: declname='len', quals=[] (at pp.c:9912)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:9911)
        TypeDecl: declname='DefaultLplP__SubReceive__receive', quals=[] (at pp.c:9911)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='DefaultLplP__OffTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:9918)
    FuncDecl: quals=None (at pp.c:9918)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__OffTimer__fired', quals=[] (at pp.c:9918)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__SendDoneTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:9920)
    FuncDecl: quals=None (at pp.c:9920)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__SendDoneTimer__fired', quals=[] (at pp.c:9920)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__Resend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:9922)
    FuncDecl: quals=None (at pp.c:9922)
      ParamList:  (at pp.c:9922)
        Decl: name='p_msg', quals=[], storage=[] (at pp.c:9922)
          PtrDecl: quals=[] (at pp.c:9922)
            TypeDecl: declname='p_msg', quals=[] (at pp.c:9922)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:9922)
          TypeDecl: declname='error', quals=[] (at pp.c:9922)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='DefaultLplP__Resend__sendDone', quals=[] (at pp.c:9922)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__send__runTask', quals=[], storage=['inline', 'static'] (at pp.c:9928)
    FuncDecl: quals=None (at pp.c:9928)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__send__runTask', quals=[] (at pp.c:9928)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__resend__runTask', quals=[], storage=['inline', 'static'] (at pp.c:9934)
    FuncDecl: quals=None (at pp.c:9934)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__resend__runTask', quals=[] (at pp.c:9934)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__startRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:9940)
    FuncDecl: quals=None (at pp.c:9940)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__startRadio__runTask', quals=[] (at pp.c:9940)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__stopRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:9946)
    FuncDecl: quals=None (at pp.c:9946)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__stopRadio__runTask', quals=[] (at pp.c:9946)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__initializeSend', quals=[], storage=['static'] (at pp.c:9955)
    FuncDecl: quals=None (at pp.c:9955)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__initializeSend', quals=[] (at pp.c:9955)
        IdentifierType: names=['void'] (at None)
  Decl: name='DefaultLplP__startOffTimer', quals=[], storage=['inline', 'static'] (at pp.c:9957)
    FuncDecl: quals=None (at pp.c:9957)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='DefaultLplP__startOffTimer', quals=[] (at pp.c:9957)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SplitControl__startDone', quals=[], storage=['static'] (at pp.c:9959)
    FuncDecl: quals=None (at pp.c:9959)
      ParamList:  (at pp.c:9959)
        Decl: name='error', quals=[], storage=[] (at pp.c:9959)
          TypeDecl: declname='error', quals=[] (at pp.c:9959)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControl__startDone', quals=[] (at pp.c:9959)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SplitControl__stopDone', quals=[], storage=['static'] (at pp.c:9961)
    FuncDecl: quals=None (at pp.c:9961)
      ParamList:  (at pp.c:9961)
        Decl: name='error', quals=[], storage=[] (at pp.c:9961)
          TypeDecl: declname='error', quals=[] (at pp.c:9961)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControl__stopDone', quals=[] (at pp.c:9961)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__EnergyIndicator__isReceiving', quals=[], storage=['static'] (at pp.c:9963)
    FuncDecl: quals=None (at pp.c:9963)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__EnergyIndicator__isReceiving', quals=[] (at pp.c:9963)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__SendState__isIdle', quals=[], storage=['static'] (at pp.c:9965)
    FuncDecl: quals=None (at pp.c:9965)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__SendState__isIdle', quals=[] (at pp.c:9965)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__startRadio__postTask', quals=[], storage=['static'] (at pp.c:9967)
    FuncDecl: quals=None (at pp.c:9967)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__startRadio__postTask', quals=[] (at pp.c:9967)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__SubControl__start', quals=[], storage=['static'] (at pp.c:9969)
    FuncDecl: quals=None (at pp.c:9969)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__start', quals=[] (at pp.c:9969)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__SubControl__stop', quals=[], storage=['static'] (at pp.c:9971)
    FuncDecl: quals=None (at pp.c:9971)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__stop', quals=[] (at pp.c:9971)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__RadioPowerState__getState', quals=[], storage=['static'] (at pp.c:9973)
    FuncDecl: quals=None (at pp.c:9973)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__RadioPowerState__getState', quals=[] (at pp.c:9973)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='PowerCycleP__RadioPowerState__forceState', quals=[], storage=['static'] (at pp.c:9975)
    FuncDecl: quals=None (at pp.c:9975)
      ParamList:  (at pp.c:9975)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:9975)
          TypeDecl: declname='reqState', quals=[] (at pp.c:9975)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='PowerCycleP__RadioPowerState__forceState', quals=[] (at pp.c:9975)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__PacketIndicator__isReceiving', quals=[], storage=['static'] (at pp.c:9977)
    FuncDecl: quals=None (at pp.c:9977)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__PacketIndicator__isReceiving', quals=[] (at pp.c:9977)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__getCca__postTask', quals=[], storage=['static'] (at pp.c:9979)
    FuncDecl: quals=None (at pp.c:9979)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__getCca__postTask', quals=[] (at pp.c:9979)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__SplitControlState__isState', quals=[], storage=['static'] (at pp.c:9981)
    FuncDecl: quals=None (at pp.c:9981)
      ParamList:  (at pp.c:9981)
        Decl: name='myState', quals=[], storage=[] (at pp.c:9981)
          TypeDecl: declname='myState', quals=[] (at pp.c:9981)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControlState__isState', quals=[] (at pp.c:9981)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__SplitControlState__forceState', quals=[], storage=['static'] (at pp.c:9983)
    FuncDecl: quals=None (at pp.c:9983)
      ParamList:  (at pp.c:9983)
        Decl: name='reqState', quals=[], storage=[] (at pp.c:9983)
          TypeDecl: declname='reqState', quals=[] (at pp.c:9983)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControlState__forceState', quals=[] (at pp.c:9983)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__OnTimer__startOneShot', quals=[], storage=['static'] (at pp.c:9985)
    FuncDecl: quals=None (at pp.c:9985)
      ParamList:  (at pp.c:9985)
        Decl: name='dt', quals=[], storage=[] (at pp.c:9985)
          TypeDecl: declname='dt', quals=[] (at pp.c:9985)
            IdentifierType: names=['uint32_t'] (at None)
      TypeDecl: declname='PowerCycleP__OnTimer__startOneShot', quals=[] (at pp.c:9985)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__PowerCycle__detected', quals=[], storage=['static'] (at pp.c:9987)
    FuncDecl: quals=None (at pp.c:9987)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__PowerCycle__detected', quals=[] (at pp.c:9987)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__stopRadio__postTask', quals=[], storage=['static'] (at pp.c:9989)
    FuncDecl: quals=None (at pp.c:9989)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__stopRadio__postTask', quals=[] (at pp.c:9989)
        IdentifierType: names=['error_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:9991)
    Enum: name='PowerCycleP____nesc_unnamed4390' (at pp.c:9991)
      EnumeratorList:  (at pp.c:9993)
        Enumerator: name='PowerCycleP__stopRadio' (at pp.c:9993)
          Constant: type='int', value='25U' (at pp.c:9993)
  Typedef: name='PowerCycleP____nesc_sillytask_stopRadio', quals=[], storage=['typedef'] (at pp.c:9996)
    ArrayDecl:  (at pp.c:9996)
      TypeDecl: declname='PowerCycleP____nesc_sillytask_stopRadio', quals=[] (at pp.c:9996)
        IdentifierType: names=['int'] (at None)
      ID: name='PowerCycleP__stopRadio' (at pp.c:9996)
  Decl: name=None, quals=[], storage=[] (at pp.c:9997)
    Enum: name='PowerCycleP____nesc_unnamed4391' (at pp.c:9997)
      EnumeratorList:  (at pp.c:9999)
        Enumerator: name='PowerCycleP__startRadio' (at pp.c:9999)
          Constant: type='int', value='26U' (at pp.c:9999)
  Typedef: name='PowerCycleP____nesc_sillytask_startRadio', quals=[], storage=['typedef'] (at pp.c:10002)
    ArrayDecl:  (at pp.c:10002)
      TypeDecl: declname='PowerCycleP____nesc_sillytask_startRadio', quals=[] (at pp.c:10002)
        IdentifierType: names=['int'] (at None)
      ID: name='PowerCycleP__startRadio' (at pp.c:10002)
  Decl: name=None, quals=[], storage=[] (at pp.c:10003)
    Enum: name='PowerCycleP____nesc_unnamed4392' (at pp.c:10003)
      EnumeratorList:  (at pp.c:10005)
        Enumerator: name='PowerCycleP__getCca' (at pp.c:10005)
          Constant: type='int', value='27U' (at pp.c:10005)
  Typedef: name='PowerCycleP____nesc_sillytask_getCca', quals=[], storage=['typedef'] (at pp.c:10008)
    ArrayDecl:  (at pp.c:10008)
      TypeDecl: declname='PowerCycleP____nesc_sillytask_getCca', quals=[] (at pp.c:10008)
        IdentifierType: names=['int'] (at None)
      ID: name='PowerCycleP__getCca' (at pp.c:10008)
  Decl: name='PowerCycleP__sleepInterval', quals=[], storage=[] (at pp.c:10010)
    TypeDecl: declname='PowerCycleP__sleepInterval', quals=[] (at pp.c:10010)
      IdentifierType: names=['uint16_t'] (at None)
    Constant: type='int', value='0' (at pp.c:10010)
  Decl: name='PowerCycleP__ccaChecks', quals=[], storage=[] (at pp.c:10013)
    TypeDecl: declname='PowerCycleP__ccaChecks', quals=[] (at pp.c:10013)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:10018)
    Enum: name='PowerCycleP____nesc_unnamed4393' (at pp.c:10018)
      EnumeratorList:  (at pp.c:10019)
        Enumerator: name='PowerCycleP__S_OFF' (at pp.c:10019)
        Enumerator: name='PowerCycleP__S_TURNING_ON' (at pp.c:10020)
        Enumerator: name='PowerCycleP__S_ON' (at pp.c:10021)
        Enumerator: name='PowerCycleP__S_TURNING_OFF' (at pp.c:10022)
  Decl: name='PowerCycleP__finishSplitControlRequests', quals=[], storage=['static'] (at pp.c:10031)
    FuncDecl: quals=None (at pp.c:10031)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__finishSplitControlRequests', quals=[] (at pp.c:10031)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__isDutyCycling', quals=[], storage=['inline', 'static'] (at pp.c:10032)
    FuncDecl: quals=None (at pp.c:10032)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__isDutyCycling', quals=[] (at pp.c:10032)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__PowerCycle__setSleepInterval', quals=[], storage=['inline', 'static'] (at pp.c:10039)
    FuncDecl: quals=None (at pp.c:10039)
      ParamList:  (at pp.c:10039)
        Decl: name='sleepIntervalMs', quals=[], storage=[] (at pp.c:10039)
          TypeDecl: declname='sleepIntervalMs', quals=[] (at pp.c:10039)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='PowerCycleP__PowerCycle__setSleepInterval', quals=[] (at pp.c:10039)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__PowerCycle__getSleepInterval', quals=[], storage=['inline', 'static'] (at pp.c:10041)
    FuncDecl: quals=None (at pp.c:10041)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__PowerCycle__getSleepInterval', quals=[] (at pp.c:10041)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='PowerCycleP__SplitControl__start', quals=[], storage=['static'] (at pp.c:10047)
    FuncDecl: quals=None (at pp.c:10047)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__SplitControl__start', quals=[] (at pp.c:10047)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='PowerCycleP__OnTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:10049)
    FuncDecl: quals=None (at pp.c:10049)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__OnTimer__fired', quals=[] (at pp.c:10049)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SubControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:10051)
    FuncDecl: quals=None (at pp.c:10051)
      ParamList:  (at pp.c:10051)
        Decl: name='error', quals=[], storage=[] (at pp.c:10051)
          TypeDecl: declname='error', quals=[] (at pp.c:10051)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__startDone', quals=[] (at pp.c:10051)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__SubControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:10053)
    FuncDecl: quals=None (at pp.c:10053)
      ParamList:  (at pp.c:10053)
        Decl: name='error', quals=[], storage=[] (at pp.c:10053)
          TypeDecl: declname='error', quals=[] (at pp.c:10053)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='PowerCycleP__SubControl__stopDone', quals=[] (at pp.c:10053)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__stopRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10055)
    FuncDecl: quals=None (at pp.c:10055)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__stopRadio__runTask', quals=[] (at pp.c:10055)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__startRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10064)
    FuncDecl: quals=None (at pp.c:10064)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__startRadio__runTask', quals=[] (at pp.c:10064)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__getCca__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10070)
    FuncDecl: quals=None (at pp.c:10070)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__getCca__runTask', quals=[] (at pp.c:10070)
        IdentifierType: names=['void'] (at None)
  Decl: name='PowerCycleP__isDutyCycling', quals=[], storage=['inline', 'static'] (at pp.c:10072)
    FuncDecl: quals=None (at pp.c:10072)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__isDutyCycling', quals=[] (at pp.c:10072)
        IdentifierType: names=['bool'] (at None)
  Decl: name='PowerCycleP__finishSplitControlRequests', quals=[], storage=['static'] (at pp.c:10080)
    FuncDecl: quals=None (at pp.c:10080)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='PowerCycleP__finishSplitControlRequests', quals=[] (at pp.c:10080)
        IdentifierType: names=['bool'] (at None)
  Decl: name='SystemLowPowerListeningP__remoteWakeup', quals=[], storage=[] (at pp.c:10082)
    TypeDecl: declname='SystemLowPowerListeningP__remoteWakeup', quals=[] (at pp.c:10082)
      IdentifierType: names=['uint16_t'] (at None)
    Constant: type='int', value='0' (at pp.c:10082)
  Decl: name='SystemLowPowerListeningP__delayAfterReceive', quals=[], storage=[] (at pp.c:10083)
    TypeDecl: declname='SystemLowPowerListeningP__delayAfterReceive', quals=[] (at pp.c:10083)
      IdentifierType: names=['uint16_t'] (at None)
    Constant: type='int', value='100' (at pp.c:10083)
  Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:10088)
    FuncDecl: quals=None (at pp.c:10088)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[] (at pp.c:10088)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[], storage=['inline', 'static'] (at pp.c:10089)
    FuncDecl: quals=None (at pp.c:10089)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[] (at pp.c:10089)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SubSend__send', quals=[], storage=['static'] (at pp.c:10091)
    FuncDecl: quals=None (at pp.c:10091)
      ParamList:  (at pp.c:10093)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10093)
          PtrDecl: quals=[] (at pp.c:10093)
            TypeDecl: declname='msg', quals=[] (at pp.c:10093)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10101)
          TypeDecl: declname='len', quals=[] (at pp.c:10101)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubSend__send', quals=[] (at pp.c:10091)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SubSend__getPayload', quals=[], storage=['static'] (at pp.c:10107)
    FuncDecl: quals=None (at pp.c:10107)
      ParamList:  (at pp.c:10109)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10109)
          PtrDecl: quals=[] (at pp.c:10109)
            TypeDecl: declname='msg', quals=[] (at pp.c:10109)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10112)
          TypeDecl: declname='len', quals=[] (at pp.c:10112)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10105)
        TypeDecl: declname='CC2420ActiveMessageP__SubSend__getPayload', quals=[] (at pp.c:10107)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubSend__maxPayloadLength', quals=[], storage=['static'] (at pp.c:10114)
    FuncDecl: quals=None (at pp.c:10114)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubSend__maxPayloadLength', quals=[] (at pp.c:10114)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ActiveMessageP__CC2420Config__getPanAddr', quals=[], storage=['static'] (at pp.c:10116)
    FuncDecl: quals=None (at pp.c:10116)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__CC2420Config__getPanAddr', quals=[] (at pp.c:10116)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__requestCca', quals=[], storage=['static'] (at pp.c:10118)
    FuncDecl: quals=None (at pp.c:10118)
      ParamList:  (at pp.c:10120)
        Decl: name='arg_0x102a97d60', quals=[], storage=[] (at pp.c:10120)
          TypeDecl: declname='arg_0x102a97d60', quals=[] (at pp.c:10120)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10122)
          PtrDecl: quals=[] (at pp.c:10122)
            TypeDecl: declname='msg', quals=[] (at pp.c:10122)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestCca', quals=[] (at pp.c:10118)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:10124)
    FuncDecl: quals=None (at pp.c:10124)
      ParamList:  (at pp.c:10126)
        Decl: name='arg_0x102a97d60', quals=[], storage=[] (at pp.c:10126)
          TypeDecl: declname='arg_0x102a97d60', quals=[] (at pp.c:10126)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10128)
          PtrDecl: quals=[] (at pp.c:10128)
            TypeDecl: declname='msg', quals=[] (at pp.c:10128)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:10124)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static'] (at pp.c:10135)
    FuncDecl: quals=None (at pp.c:10135)
      ParamList:  (at pp.c:10137)
        Decl: name='arg_0x102a97d60', quals=[], storage=[] (at pp.c:10137)
          TypeDecl: declname='arg_0x102a97d60', quals=[] (at pp.c:10137)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10139)
          PtrDecl: quals=[] (at pp.c:10139)
            TypeDecl: declname='msg', quals=[] (at pp.c:10139)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:10135)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SendNotifier__aboutToSend', quals=[], storage=['static'] (at pp.c:10141)
    FuncDecl: quals=None (at pp.c:10141)
      ParamList:  (at pp.c:10143)
        Decl: name='arg_0x102a97258', quals=[], storage=[] (at pp.c:10143)
          TypeDecl: declname='arg_0x102a97258', quals=[] (at pp.c:10143)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='dest', quals=[], storage=[] (at pp.c:10145)
          TypeDecl: declname='dest', quals=[] (at pp.c:10145)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10147)
          PtrDecl: quals=[] (at pp.c:10147)
            TypeDecl: declname='msg', quals=[] (at pp.c:10147)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SendNotifier__aboutToSend', quals=[] (at pp.c:10141)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:10149)
    FuncDecl: quals=None (at pp.c:10149)
      ParamList:  (at pp.c:10151)
        Decl: name='arg_0x102a9d7d8', quals=[], storage=[] (at pp.c:10151)
          TypeDecl: declname='arg_0x102a9d7d8', quals=[] (at pp.c:10151)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10153)
          PtrDecl: quals=[] (at pp.c:10153)
            TypeDecl: declname='msg', quals=[] (at pp.c:10153)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10160)
          TypeDecl: declname='error', quals=[] (at pp.c:10160)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMSend__sendDone', quals=[] (at pp.c:10149)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Snoop__receive', quals=[], storage=['static'] (at pp.c:10168)
    FuncDecl: quals=None (at pp.c:10168)
      ParamList:  (at pp.c:10170)
        Decl: name='arg_0x102a9a480', quals=[], storage=[] (at pp.c:10170)
          TypeDecl: declname='arg_0x102a9a480', quals=[] (at pp.c:10170)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10172)
          PtrDecl: quals=[] (at pp.c:10172)
            TypeDecl: declname='msg', quals=[] (at pp.c:10172)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10173)
          PtrDecl: quals=[] (at pp.c:10173)
            TypeDecl: declname='payload', quals=[] (at pp.c:10173)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10179)
          TypeDecl: declname='len', quals=[] (at pp.c:10179)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10164)
        TypeDecl: declname='CC2420ActiveMessageP__Snoop__receive', quals=[] (at pp.c:10168)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__ActiveMessageAddress__amAddress', quals=[], storage=['static'] (at pp.c:10181)
    FuncDecl: quals=None (at pp.c:10181)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__ActiveMessageAddress__amAddress', quals=[] (at pp.c:10181)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader', quals=[], storage=['static'] (at pp.c:10183)
    FuncDecl: quals=None (at pp.c:10183)
      ParamList:  (at pp.c:10183)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10183)
          PtrDecl: quals=[] (at pp.c:10183)
            TypeDecl: declname='msg', quals=[] (at pp.c:10183)
              IdentifierType: names=['message_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10183)
        TypeDecl: declname='CC2420ActiveMessageP__CC2420PacketBody__getHeader', quals=[] (at pp.c:10183)
          IdentifierType: names=['cc2420_header_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Receive__receive', quals=[], storage=['static'] (at pp.c:10191)
    FuncDecl: quals=None (at pp.c:10191)
      ParamList:  (at pp.c:10193)
        Decl: name='arg_0x102a9c908', quals=[], storage=[] (at pp.c:10193)
          TypeDecl: declname='arg_0x102a9c908', quals=[] (at pp.c:10193)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10195)
          PtrDecl: quals=[] (at pp.c:10195)
            TypeDecl: declname='msg', quals=[] (at pp.c:10195)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10196)
          PtrDecl: quals=[] (at pp.c:10196)
            TypeDecl: declname='payload', quals=[] (at pp.c:10196)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10202)
          TypeDecl: declname='len', quals=[] (at pp.c:10202)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10187)
        TypeDecl: declname='CC2420ActiveMessageP__Receive__receive', quals=[] (at pp.c:10191)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioResource__release', quals=[], storage=['static'] (at pp.c:10204)
    FuncDecl: quals=None (at pp.c:10204)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioResource__release', quals=[] (at pp.c:10204)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioResource__immediateRequest', quals=[], storage=['static'] (at pp.c:10206)
    FuncDecl: quals=None (at pp.c:10206)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioResource__immediateRequest', quals=[] (at pp.c:10206)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioResource__request', quals=[], storage=['static'] (at pp.c:10208)
    FuncDecl: quals=None (at pp.c:10208)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioResource__request', quals=[] (at pp.c:10208)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__pending_length', quals=[], storage=[] (at pp.c:10210)
    TypeDecl: declname='CC2420ActiveMessageP__pending_length', quals=[] (at pp.c:10210)
      IdentifierType: names=['uint16_t'] (at None)
  Decl: name='CC2420ActiveMessageP__pending_message', quals=[], storage=[] (at pp.c:10211)
    PtrDecl: quals=[] (at pp.c:10211)
      TypeDecl: declname='CC2420ActiveMessageP__pending_message', quals=[] (at pp.c:10211)
        IdentifierType: names=['message_t'] (at None)
    Cast:  (at None)
      Typename: quals=[] (at None)
        PtrDecl: quals=[] (at pp.c:10211)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      Constant: type='int', value='0' (at pp.c:10211)
  Decl: name='CC2420ActiveMessageP__RadioResource__granted', quals=[], storage=['static'] (at pp.c:10213)
    FuncDecl: quals=None (at pp.c:10213)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioResource__granted', quals=[] (at pp.c:10213)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMSend__send', quals=[], storage=['static'] (at pp.c:10215)
    FuncDecl: quals=None (at pp.c:10215)
      ParamList:  (at pp.c:10215)
        Decl: name='id', quals=[], storage=[] (at pp.c:10215)
          TypeDecl: declname='id', quals=[] (at pp.c:10215)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10215)
          TypeDecl: declname='addr', quals=[] (at pp.c:10215)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10216)
          PtrDecl: quals=[] (at pp.c:10216)
            TypeDecl: declname='msg', quals=[] (at pp.c:10216)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10217)
          TypeDecl: declname='len', quals=[] (at pp.c:10217)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMSend__send', quals=[] (at pp.c:10215)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:10219)
    FuncDecl: quals=None (at pp.c:10219)
      ParamList:  (at pp.c:10219)
        Decl: name='id', quals=[], storage=[] (at pp.c:10219)
          TypeDecl: declname='id', quals=[] (at pp.c:10219)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='m', quals=[], storage=[] (at pp.c:10219)
          PtrDecl: quals=[] (at pp.c:10219)
            TypeDecl: declname='m', quals=[] (at pp.c:10219)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10219)
          TypeDecl: declname='len', quals=[] (at pp.c:10219)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10219)
        TypeDecl: declname='CC2420ActiveMessageP__AMSend__getPayload', quals=[] (at pp.c:10219)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__address', quals=[], storage=['inline', 'static'] (at pp.c:10224)
    FuncDecl: quals=None (at pp.c:10224)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__address', quals=[] (at pp.c:10224)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__destination', quals=[], storage=['static'] (at pp.c:10228)
    FuncDecl: quals=None (at pp.c:10228)
      ParamList:  (at pp.c:10228)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10228)
          PtrDecl: quals=[] (at pp.c:10228)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10228)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__destination', quals=[] (at pp.c:10228)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__setDestination', quals=[], storage=['inline', 'static'] (at pp.c:10238)
    FuncDecl: quals=None (at pp.c:10238)
      ParamList:  (at pp.c:10238)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10238)
          PtrDecl: quals=[] (at pp.c:10238)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10238)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10238)
          TypeDecl: declname='addr', quals=[] (at pp.c:10238)
            IdentifierType: names=['am_addr_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setDestination', quals=[] (at pp.c:10238)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__isForMe', quals=[], storage=['inline', 'static'] (at pp.c:10248)
    FuncDecl: quals=None (at pp.c:10248)
      ParamList:  (at pp.c:10248)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10248)
          PtrDecl: quals=[] (at pp.c:10248)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10248)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__isForMe', quals=[] (at pp.c:10248)
        IdentifierType: names=['bool'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__type', quals=[], storage=['inline', 'static'] (at pp.c:10253)
    FuncDecl: quals=None (at pp.c:10253)
      ParamList:  (at pp.c:10253)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10253)
          PtrDecl: quals=[] (at pp.c:10253)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10253)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__type', quals=[] (at pp.c:10253)
        IdentifierType: names=['am_id_t'] (at None)
  Decl: name='CC2420ActiveMessageP__AMPacket__setType', quals=[], storage=['inline', 'static'] (at pp.c:10258)
    FuncDecl: quals=None (at pp.c:10258)
      ParamList:  (at pp.c:10258)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10258)
          PtrDecl: quals=[] (at pp.c:10258)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10258)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='type', quals=[], storage=[] (at pp.c:10258)
          TypeDecl: declname='type', quals=[] (at pp.c:10258)
            IdentifierType: names=['am_id_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setType', quals=[] (at pp.c:10258)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__payloadLength', quals=[], storage=['inline', 'static'] (at pp.c:10260)
    FuncDecl: quals=None (at pp.c:10260)
      ParamList:  (at pp.c:10260)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10260)
          PtrDecl: quals=[] (at pp.c:10260)
            TypeDecl: declname='msg', quals=[] (at pp.c:10260)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__payloadLength', quals=[] (at pp.c:10260)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:10264)
    FuncDecl: quals=None (at pp.c:10264)
      ParamList:  (at pp.c:10264)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10264)
          PtrDecl: quals=[] (at pp.c:10264)
            TypeDecl: declname='msg', quals=[] (at pp.c:10264)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10264)
          TypeDecl: declname='len', quals=[] (at pp.c:10264)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[] (at pp.c:10264)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:10268)
    FuncDecl: quals=None (at pp.c:10268)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[] (at pp.c:10268)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Packet__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:10272)
    FuncDecl: quals=None (at pp.c:10272)
      ParamList:  (at pp.c:10272)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10272)
          PtrDecl: quals=[] (at pp.c:10272)
            TypeDecl: declname='msg', quals=[] (at pp.c:10272)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10272)
          TypeDecl: declname='len', quals=[] (at pp.c:10272)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10272)
        TypeDecl: declname='CC2420ActiveMessageP__Packet__getPayload', quals=[] (at pp.c:10272)
          IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10278)
    FuncDecl: quals=None (at pp.c:10278)
      ParamList:  (at pp.c:10278)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10278)
          PtrDecl: quals=[] (at pp.c:10278)
            TypeDecl: declname='msg', quals=[] (at pp.c:10278)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='result', quals=[], storage=[] (at pp.c:10278)
          TypeDecl: declname='result', quals=[] (at pp.c:10278)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubSend__sendDone', quals=[] (at pp.c:10278)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:10285)
    FuncDecl: quals=None (at pp.c:10285)
      ParamList:  (at pp.c:10285)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10285)
          PtrDecl: quals=[] (at pp.c:10285)
            TypeDecl: declname='msg', quals=[] (at pp.c:10285)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10285)
          PtrDecl: quals=[] (at pp.c:10285)
            TypeDecl: declname='payload', quals=[] (at pp.c:10285)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10285)
          TypeDecl: declname='len', quals=[] (at pp.c:10285)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10285)
        TypeDecl: declname='CC2420ActiveMessageP__SubReceive__receive', quals=[] (at pp.c:10285)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:10287)
    FuncDecl: quals=None (at pp.c:10287)
      ParamList:  (at pp.c:10287)
        Decl: name='error', quals=[], storage=[] (at pp.c:10287)
          TypeDecl: declname='error', quals=[] (at pp.c:10287)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[] (at pp.c:10287)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:10293)
    FuncDecl: quals=None (at pp.c:10293)
      ParamList:  (at pp.c:10293)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10293)
          PtrDecl: quals=[] (at pp.c:10293)
            TypeDecl: declname='msg', quals=[] (at pp.c:10293)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:10293)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:10298)
    FuncDecl: quals=None (at pp.c:10298)
      ParamList:  (at pp.c:10298)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10298)
          PtrDecl: quals=[] (at pp.c:10298)
            TypeDecl: declname='msg', quals=[] (at pp.c:10298)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:10298)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:10302)
    FuncDecl: quals=None (at pp.c:10302)
      ParamList:  (at pp.c:10302)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10302)
          PtrDecl: quals=[] (at pp.c:10302)
            TypeDecl: declname='msg', quals=[] (at pp.c:10302)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[] (at pp.c:10302)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__Receive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:10304)
    FuncDecl: quals=None (at pp.c:10304)
      ParamList:  (at pp.c:10304)
        Decl: name='id', quals=[], storage=[] (at pp.c:10304)
          TypeDecl: declname='id', quals=[] (at pp.c:10304)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10304)
          PtrDecl: quals=[] (at pp.c:10304)
            TypeDecl: declname='msg', quals=[] (at pp.c:10304)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10304)
          PtrDecl: quals=[] (at pp.c:10304)
            TypeDecl: declname='payload', quals=[] (at pp.c:10304)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10304)
          TypeDecl: declname='len', quals=[] (at pp.c:10304)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10304)
        TypeDecl: declname='CC2420ActiveMessageP__Receive__default__receive', quals=[] (at pp.c:10304)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__Snoop__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:10308)
    FuncDecl: quals=None (at pp.c:10308)
      ParamList:  (at pp.c:10308)
        Decl: name='id', quals=[], storage=[] (at pp.c:10308)
          TypeDecl: declname='id', quals=[] (at pp.c:10308)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10308)
          PtrDecl: quals=[] (at pp.c:10308)
            TypeDecl: declname='msg', quals=[] (at pp.c:10308)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='payload', quals=[], storage=[] (at pp.c:10308)
          PtrDecl: quals=[] (at pp.c:10308)
            TypeDecl: declname='payload', quals=[] (at pp.c:10308)
              IdentifierType: names=['void'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10308)
          TypeDecl: declname='len', quals=[] (at pp.c:10308)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10308)
        TypeDecl: declname='CC2420ActiveMessageP__Snoop__default__receive', quals=[] (at pp.c:10308)
          IdentifierType: names=['message_t'] (at None)
  Decl: name='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[], storage=['inline', 'static'] (at pp.c:10316)
    FuncDecl: quals=None (at pp.c:10316)
      ParamList:  (at pp.c:10316)
        Decl: name='amId', quals=[], storage=[] (at pp.c:10316)
          TypeDecl: declname='amId', quals=[] (at pp.c:10316)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10316)
          TypeDecl: declname='addr', quals=[] (at pp.c:10316)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10316)
          PtrDecl: quals=[] (at pp.c:10316)
            TypeDecl: declname='msg', quals=[] (at pp.c:10316)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[] (at pp.c:10316)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:10318)
    FuncDecl: quals=None (at pp.c:10318)
      ParamList:  (at pp.c:10318)
        Decl: name='id', quals=[], storage=[] (at pp.c:10318)
          TypeDecl: declname='id', quals=[] (at pp.c:10318)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10319)
          PtrDecl: quals=[] (at pp.c:10319)
            TypeDecl: declname='msg', quals=[] (at pp.c:10319)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[] (at pp.c:10318)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:10322)
    FuncDecl: quals=None (at pp.c:10322)
      ParamList:  (at pp.c:10322)
        Decl: name='id', quals=[], storage=[] (at pp.c:10322)
          TypeDecl: declname='id', quals=[] (at pp.c:10322)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10323)
          PtrDecl: quals=[] (at pp.c:10323)
            TypeDecl: declname='msg', quals=[] (at pp.c:10323)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[] (at pp.c:10322)
        IdentifierType: names=['void'] (at None)
  Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:10326)
    FuncDecl: quals=None (at pp.c:10326)
      ParamList:  (at pp.c:10326)
        Decl: name='id', quals=[], storage=[] (at pp.c:10326)
          TypeDecl: declname='id', quals=[] (at pp.c:10326)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10327)
          PtrDecl: quals=[] (at pp.c:10327)
            TypeDecl: declname='msg', quals=[] (at pp.c:10327)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[] (at pp.c:10326)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:10329)
    FuncDecl: quals=None (at pp.c:10329)
      ParamList:  (at pp.c:10331)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10331)
          PtrDecl: quals=[] (at pp.c:10331)
            TypeDecl: declname='msg', quals=[] (at pp.c:10331)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10338)
          TypeDecl: declname='error', quals=[] (at pp.c:10338)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__AMSend__sendDone', quals=[] (at pp.c:10329)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__Send__send', quals=[], storage=['static'] (at pp.c:10340)
    FuncDecl: quals=None (at pp.c:10340)
      ParamList:  (at pp.c:10342)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10342)
          PtrDecl: quals=[] (at pp.c:10342)
            TypeDecl: declname='msg', quals=[] (at pp.c:10342)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10350)
          TypeDecl: declname='len', quals=[] (at pp.c:10350)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__Send__send', quals=[] (at pp.c:10340)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueEntryP__0__Send__getPayload', quals=[], storage=['static'] (at pp.c:10356)
    FuncDecl: quals=None (at pp.c:10356)
      ParamList:  (at pp.c:10358)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10358)
          PtrDecl: quals=[] (at pp.c:10358)
            TypeDecl: declname='msg', quals=[] (at pp.c:10358)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10361)
          TypeDecl: declname='len', quals=[] (at pp.c:10361)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10354)
        TypeDecl: declname='AMQueueEntryP__0__Send__getPayload', quals=[] (at pp.c:10356)
          IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__AMPacket__setDestination', quals=[], storage=['static'] (at pp.c:10363)
    FuncDecl: quals=None (at pp.c:10363)
      ParamList:  (at pp.c:10365)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10365)
          PtrDecl: quals=[] (at pp.c:10365)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10365)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10369)
          TypeDecl: declname='addr', quals=[] (at pp.c:10369)
            IdentifierType: names=['am_addr_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__AMPacket__setDestination', quals=[] (at pp.c:10363)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__AMPacket__setType', quals=[], storage=['static'] (at pp.c:10371)
    FuncDecl: quals=None (at pp.c:10371)
      ParamList:  (at pp.c:10373)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10373)
          PtrDecl: quals=[] (at pp.c:10373)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10373)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='t', quals=[], storage=[] (at pp.c:10377)
          TypeDecl: declname='t', quals=[] (at pp.c:10377)
            IdentifierType: names=['am_id_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__AMPacket__setType', quals=[] (at pp.c:10371)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__AMSend__send', quals=[], storage=['inline', 'static'] (at pp.c:10379)
    FuncDecl: quals=None (at pp.c:10379)
      ParamList:  (at pp.c:10379)
        Decl: name='dest', quals=[], storage=[] (at pp.c:10379)
          TypeDecl: declname='dest', quals=[] (at pp.c:10379)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10380)
          PtrDecl: quals=[] (at pp.c:10380)
            TypeDecl: declname='msg', quals=[] (at pp.c:10380)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10381)
          TypeDecl: declname='len', quals=[] (at pp.c:10381)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__AMSend__send', quals=[] (at pp.c:10379)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueEntryP__0__Send__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10391)
    FuncDecl: quals=None (at pp.c:10391)
      ParamList:  (at pp.c:10391)
        Decl: name='m', quals=[], storage=[] (at pp.c:10391)
          PtrDecl: quals=[] (at pp.c:10391)
            TypeDecl: declname='m', quals=[] (at pp.c:10391)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10391)
          TypeDecl: declname='err', quals=[] (at pp.c:10391)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueEntryP__0__Send__sendDone', quals=[] (at pp.c:10391)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueEntryP__0__AMSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:10399)
    FuncDecl: quals=None (at pp.c:10399)
      ParamList:  (at pp.c:10399)
        Decl: name='m', quals=[], storage=[] (at pp.c:10399)
          PtrDecl: quals=[] (at pp.c:10399)
            TypeDecl: declname='m', quals=[] (at pp.c:10399)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10399)
          TypeDecl: declname='len', quals=[] (at pp.c:10399)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10399)
        TypeDecl: declname='AMQueueEntryP__0__AMSend__getPayload', quals=[] (at pp.c:10399)
          IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__AMSend__send', quals=[], storage=['static'] (at pp.c:10401)
    FuncDecl: quals=None (at pp.c:10401)
      ParamList:  (at pp.c:10403)
        Decl: name='arg_0x102b39020', quals=[], storage=[] (at pp.c:10403)
          TypeDecl: declname='arg_0x102b39020', quals=[] (at pp.c:10403)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10405)
          TypeDecl: declname='addr', quals=[] (at pp.c:10405)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10407)
          PtrDecl: quals=[] (at pp.c:10407)
            TypeDecl: declname='msg', quals=[] (at pp.c:10407)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10416)
          TypeDecl: declname='len', quals=[] (at pp.c:10416)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__AMSend__send', quals=[] (at pp.c:10401)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__0__AMSend__getPayload', quals=[], storage=['static'] (at pp.c:10422)
    FuncDecl: quals=None (at pp.c:10422)
      ParamList:  (at pp.c:10424)
        Decl: name='arg_0x102b39020', quals=[], storage=[] (at pp.c:10424)
          TypeDecl: declname='arg_0x102b39020', quals=[] (at pp.c:10424)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10426)
          PtrDecl: quals=[] (at pp.c:10426)
            TypeDecl: declname='msg', quals=[] (at pp.c:10426)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10429)
          TypeDecl: declname='len', quals=[] (at pp.c:10429)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10420)
        TypeDecl: declname='AMQueueImplP__0__AMSend__getPayload', quals=[] (at pp.c:10422)
          IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Send__sendDone', quals=[], storage=['static'] (at pp.c:10431)
    FuncDecl: quals=None (at pp.c:10431)
      ParamList:  (at pp.c:10433)
        Decl: name='arg_0x102b3be18', quals=[], storage=[] (at pp.c:10433)
          TypeDecl: declname='arg_0x102b3be18', quals=[] (at pp.c:10433)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10435)
          PtrDecl: quals=[] (at pp.c:10435)
            TypeDecl: declname='msg', quals=[] (at pp.c:10435)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10439)
          TypeDecl: declname='error', quals=[] (at pp.c:10439)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Send__sendDone', quals=[] (at pp.c:10431)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Packet__payloadLength', quals=[], storage=['static'] (at pp.c:10441)
    FuncDecl: quals=None (at pp.c:10441)
      ParamList:  (at pp.c:10443)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10443)
          PtrDecl: quals=[] (at pp.c:10443)
            TypeDecl: declname='msg', quals=[] (at pp.c:10443)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Packet__payloadLength', quals=[] (at pp.c:10441)
        IdentifierType: names=['uint8_t'] (at None)
  Decl: name='AMQueueImplP__0__Packet__setPayloadLength', quals=[], storage=['static'] (at pp.c:10445)
    FuncDecl: quals=None (at pp.c:10445)
      ParamList:  (at pp.c:10447)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10447)
          PtrDecl: quals=[] (at pp.c:10447)
            TypeDecl: declname='msg', quals=[] (at pp.c:10447)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10451)
          TypeDecl: declname='len', quals=[] (at pp.c:10451)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Packet__setPayloadLength', quals=[] (at pp.c:10445)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__errorTask__postTask', quals=[], storage=['static'] (at pp.c:10453)
    FuncDecl: quals=None (at pp.c:10453)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__errorTask__postTask', quals=[] (at pp.c:10453)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__0__AMPacket__destination', quals=[], storage=['static'] (at pp.c:10455)
    FuncDecl: quals=None (at pp.c:10455)
      ParamList:  (at pp.c:10457)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10457)
          PtrDecl: quals=[] (at pp.c:10457)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10457)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__AMPacket__destination', quals=[] (at pp.c:10455)
        IdentifierType: names=['am_addr_t'] (at None)
  Decl: name='AMQueueImplP__0__AMPacket__type', quals=[], storage=['static'] (at pp.c:10459)
    FuncDecl: quals=None (at pp.c:10459)
      ParamList:  (at pp.c:10461)
        Decl: name='amsg', quals=[], storage=[] (at pp.c:10461)
          PtrDecl: quals=[] (at pp.c:10461)
            TypeDecl: declname='amsg', quals=[] (at pp.c:10461)
              IdentifierType: names=['message_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__AMPacket__type', quals=[] (at pp.c:10459)
        IdentifierType: names=['am_id_t'] (at None)
  Decl: name=None, quals=[], storage=[] (at pp.c:10463)
    Enum: name='AMQueueImplP__0____nesc_unnamed4394' (at pp.c:10463)
      EnumeratorList:  (at pp.c:10465)
        Enumerator: name='AMQueueImplP__0__CancelTask' (at pp.c:10465)
          Constant: type='int', value='28U' (at pp.c:10465)
  Typedef: name='AMQueueImplP__0____nesc_sillytask_CancelTask', quals=[], storage=['typedef'] (at pp.c:10468)
    ArrayDecl:  (at pp.c:10468)
      TypeDecl: declname='AMQueueImplP__0____nesc_sillytask_CancelTask', quals=[] (at pp.c:10468)
        IdentifierType: names=['int'] (at None)
      ID: name='AMQueueImplP__0__CancelTask' (at pp.c:10468)
  Decl: name=None, quals=[], storage=[] (at pp.c:10470)
    Enum: name='AMQueueImplP__0____nesc_unnamed4395' (at pp.c:10470)
      EnumeratorList:  (at pp.c:10472)
        Enumerator: name='AMQueueImplP__0__errorTask' (at pp.c:10472)
          Constant: type='int', value='29U' (at pp.c:10472)
  Typedef: name='AMQueueImplP__0____nesc_sillytask_errorTask', quals=[], storage=['typedef'] (at pp.c:10475)
    ArrayDecl:  (at pp.c:10475)
      TypeDecl: declname='AMQueueImplP__0____nesc_sillytask_errorTask', quals=[] (at pp.c:10475)
        IdentifierType: names=['int'] (at None)
      ID: name='AMQueueImplP__0__errorTask' (at pp.c:10475)
  Typedef: name='AMQueueImplP__0__queue_entry_t', quals=[], storage=['typedef'] (at pp.c:10480)
    TypeDecl: declname='AMQueueImplP__0__queue_entry_t', quals=[] (at pp.c:10480)
      Struct: name='AMQueueImplP__0____nesc_unnamed4396', packed=False (at pp.c:10478)
        Decl: name='msg', quals=[], storage=[] (at 0)
          PtrDecl: quals=[] (at pp.c:10479)
            TypeDecl: declname='msg', quals=[] (at pp.c:10479)
              IdentifierType: names=['message_t'] (at None)
  Decl: name='AMQueueImplP__0__current', quals=[], storage=[] (at pp.c:10482)
    TypeDecl: declname='AMQueueImplP__0__current', quals=[] (at pp.c:10482)
      IdentifierType: names=['uint8_t'] (at None)
    Constant: type='int', value='1' (at pp.c:10482)
  Decl: name='AMQueueImplP__0__queue', quals=[], storage=[] (at pp.c:10483)
    ArrayDecl:  (at pp.c:10483)
      TypeDecl: declname='AMQueueImplP__0__queue', quals=[] (at pp.c:10483)
        IdentifierType: names=['AMQueueImplP__0__queue_entry_t'] (at None)
      Constant: type='int', value='1' (at pp.c:10483)
  Decl: name='AMQueueImplP__0__cancelMask', quals=[], storage=[] (at pp.c:10484)
    ArrayDecl:  (at pp.c:10484)
      TypeDecl: declname='AMQueueImplP__0__cancelMask', quals=[] (at pp.c:10484)
        IdentifierType: names=['uint8_t'] (at None)
      BinaryOp: op='+' (at pp.c:10484)
        BinaryOp: op='/' (at pp.c:10484)
          Constant: type='int', value='1' (at pp.c:10484)
          Constant: type='int', value='8' (at pp.c:10484)
        Constant: type='int', value='1' (at pp.c:10484)
  Decl: name='AMQueueImplP__0__tryToSend', quals=[], storage=['inline', 'static'] (at pp.c:10486)
    FuncDecl: quals=None (at pp.c:10486)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__tryToSend', quals=[] (at pp.c:10486)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__nextPacket', quals=[], storage=['inline', 'static'] (at pp.c:10488)
    FuncDecl: quals=None (at pp.c:10488)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__nextPacket', quals=[] (at pp.c:10488)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:10490)
    FuncDecl: quals=None (at pp.c:10490)
      ParamList:  (at pp.c:10490)
        Decl: name='clientId', quals=[], storage=[] (at pp.c:10490)
          TypeDecl: declname='clientId', quals=[] (at pp.c:10490)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10490)
          PtrDecl: quals=[] (at pp.c:10490)
            TypeDecl: declname='msg', quals=[] (at pp.c:10490)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10491)
          TypeDecl: declname='len', quals=[] (at pp.c:10491)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Send__send', quals=[] (at pp.c:10490)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='AMQueueImplP__0__CancelTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10493)
    FuncDecl: quals=None (at pp.c:10493)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__CancelTask__runTask', quals=[] (at pp.c:10493)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__sendDone', quals=[], storage=['static'] (at pp.c:10495)
    FuncDecl: quals=None (at pp.c:10495)
      ParamList:  (at pp.c:10495)
        Decl: name='last', quals=[], storage=[] (at pp.c:10495)
          TypeDecl: declname='last', quals=[] (at pp.c:10495)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10495)
          PtrDecl: quals=[] (at pp.c:10495)
            TypeDecl: declname='msg', quals=[] (at pp.c:10495)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10495)
          TypeDecl: declname='err', quals=[] (at pp.c:10495)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__sendDone', quals=[] (at pp.c:10495)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__errorTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:10501)
    FuncDecl: quals=None (at pp.c:10501)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__errorTask__runTask', quals=[] (at pp.c:10501)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__tryToSend', quals=[], storage=['inline', 'static'] (at pp.c:10506)
    FuncDecl: quals=None (at pp.c:10506)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='AMQueueImplP__0__tryToSend', quals=[] (at pp.c:10506)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:10508)
    FuncDecl: quals=None (at pp.c:10508)
      ParamList:  (at pp.c:10508)
        Decl: name='id', quals=[], storage=[] (at pp.c:10508)
          TypeDecl: declname='id', quals=[] (at pp.c:10508)
            IdentifierType: names=['am_id_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10508)
          PtrDecl: quals=[] (at pp.c:10508)
            TypeDecl: declname='msg', quals=[] (at pp.c:10508)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10508)
          TypeDecl: declname='err', quals=[] (at pp.c:10508)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__AMSend__sendDone', quals=[] (at pp.c:10508)
        IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Send__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:10510)
    FuncDecl: quals=None (at pp.c:10510)
      ParamList:  (at pp.c:10510)
        Decl: name='id', quals=[], storage=[] (at pp.c:10510)
          TypeDecl: declname='id', quals=[] (at pp.c:10510)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='m', quals=[], storage=[] (at pp.c:10510)
          PtrDecl: quals=[] (at pp.c:10510)
            TypeDecl: declname='m', quals=[] (at pp.c:10510)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10510)
          TypeDecl: declname='len', quals=[] (at pp.c:10510)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10510)
        TypeDecl: declname='AMQueueImplP__0__Send__getPayload', quals=[] (at pp.c:10510)
          IdentifierType: names=['void'] (at None)
  Decl: name='AMQueueImplP__0__Send__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10514)
    FuncDecl: quals=None (at pp.c:10514)
      ParamList:  (at pp.c:10514)
        Decl: name='id', quals=[], storage=[] (at pp.c:10514)
          TypeDecl: declname='id', quals=[] (at pp.c:10514)
            IdentifierType: names=['uint8_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10514)
          PtrDecl: quals=[] (at pp.c:10514)
            TypeDecl: declname='msg', quals=[] (at pp.c:10514)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='err', quals=[], storage=[] (at pp.c:10514)
          TypeDecl: declname='err', quals=[] (at pp.c:10514)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='AMQueueImplP__0__Send__default__sendDone', quals=[] (at pp.c:10514)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__SubAMSend__send', quals=[], storage=['static'] (at pp.c:10516)
    FuncDecl: quals=None (at pp.c:10516)
      ParamList:  (at pp.c:10516)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10516)
          TypeDecl: declname='addr', quals=[] (at pp.c:10516)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10518)
          PtrDecl: quals=[] (at pp.c:10518)
            TypeDecl: declname='msg', quals=[] (at pp.c:10518)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10527)
          TypeDecl: declname='len', quals=[] (at pp.c:10527)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__SubAMSend__send', quals=[] (at pp.c:10516)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LplAMSenderP__0__SubAMSend__getPayload', quals=[], storage=['static'] (at pp.c:10533)
    FuncDecl: quals=None (at pp.c:10533)
      ParamList:  (at pp.c:10535)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10535)
          PtrDecl: quals=[] (at pp.c:10535)
            TypeDecl: declname='msg', quals=[] (at pp.c:10535)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10538)
          TypeDecl: declname='len', quals=[] (at pp.c:10538)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10531)
        TypeDecl: declname='LplAMSenderP__0__SubAMSend__getPayload', quals=[] (at pp.c:10533)
          IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:10540)
    FuncDecl: quals=None (at pp.c:10540)
      ParamList:  (at None)
        Typename: quals=[] (at None)
          TypeDecl: declname=None, quals=[] (at None)
            IdentifierType: names=['void'] (at None)
      TypeDecl: declname='LplAMSenderP__0__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[] (at pp.c:10540)
        IdentifierType: names=['uint16_t'] (at None)
  Decl: name='LplAMSenderP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:10542)
    FuncDecl: quals=None (at pp.c:10542)
      ParamList:  (at pp.c:10544)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10544)
          PtrDecl: quals=[] (at pp.c:10544)
            TypeDecl: declname='msg', quals=[] (at pp.c:10544)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10551)
          TypeDecl: declname='error', quals=[] (at pp.c:10551)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__AMSend__sendDone', quals=[] (at pp.c:10542)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__Lpl__setRemoteWakeupInterval', quals=[], storage=['static'] (at pp.c:10553)
    FuncDecl: quals=None (at pp.c:10553)
      ParamList:  (at pp.c:10555)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10555)
          PtrDecl: quals=[] (at pp.c:10555)
            TypeDecl: declname='msg', quals=[] (at pp.c:10555)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='intervalMs', quals=[], storage=[] (at pp.c:10558)
          TypeDecl: declname='intervalMs', quals=[] (at pp.c:10558)
            IdentifierType: names=['uint16_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__Lpl__setRemoteWakeupInterval', quals=[] (at pp.c:10553)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__AMSend__send', quals=[], storage=['inline', 'static'] (at pp.c:10560)
    FuncDecl: quals=None (at pp.c:10560)
      ParamList:  (at pp.c:10560)
        Decl: name='addr', quals=[], storage=[] (at pp.c:10560)
          TypeDecl: declname='addr', quals=[] (at pp.c:10560)
            IdentifierType: names=['am_addr_t'] (at None)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10560)
          PtrDecl: quals=[] (at pp.c:10560)
            TypeDecl: declname='msg', quals=[] (at pp.c:10560)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10560)
          TypeDecl: declname='len', quals=[] (at pp.c:10560)
            IdentifierType: names=['uint8_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__AMSend__send', quals=[] (at pp.c:10560)
        IdentifierType: names=['error_t'] (at None)
  Decl: name='LplAMSenderP__0__SubAMSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:10566)
    FuncDecl: quals=None (at pp.c:10566)
      ParamList:  (at pp.c:10566)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10566)
          PtrDecl: quals=[] (at pp.c:10566)
            TypeDecl: declname='msg', quals=[] (at pp.c:10566)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='error', quals=[], storage=[] (at pp.c:10566)
          TypeDecl: declname='error', quals=[] (at pp.c:10566)
            IdentifierType: names=['error_t'] (at None)
      TypeDecl: declname='LplAMSenderP__0__SubAMSend__sendDone', quals=[] (at pp.c:10566)
        IdentifierType: names=['void'] (at None)
  Decl: name='LplAMSenderP__0__AMSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:10569)
    FuncDecl: quals=None (at pp.c:10569)
      ParamList:  (at pp.c:10569)
        Decl: name='msg', quals=[], storage=[] (at pp.c:10569)
          PtrDecl: quals=[] (at pp.c:10569)
            TypeDecl: declname='msg', quals=[] (at pp.c:10569)
              IdentifierType: names=['message_t'] (at None)
        Decl: name='len', quals=[], storage=[] (at pp.c:10569)
          TypeDecl: declname='len', quals=[] (at pp.c:10569)
            IdentifierType: names=['uint8_t'] (at None)
      PtrDecl: quals=[] (at pp.c:10569)
        TypeDecl: declname='LplAMSenderP__0__AMSend__getPayload', quals=[] (at pp.c:10569)
          IdentifierType: names=['void'] (at None)
  FuncDef:  (at pp.c:10571)
    Decl: name='__nesc_enable_interrupt', quals=[], storage=['inline', 'static'] (at pp.c:10571)
      FuncDecl: quals=None (at pp.c:10571)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_enable_interrupt', quals=[] (at pp.c:10571)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10572)
      Assignment: op='|=' (at pp.c:10573)
        ID: name='_R2' (at pp.c:10573)
        Constant: type='int', value='0x0008' (at pp.c:10573)
  FuncDef:  (at pp.c:10576)
    Decl: name='Msp430TimerCapComP__2__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10576)
      FuncDecl: quals=None (at pp.c:10576)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Timer__overflow', quals=[] (at pp.c:10576)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10577)
  FuncDef:  (at pp.c:10581)
    Decl: name='Msp430TimerCapComP__1__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10581)
      FuncDecl: quals=None (at pp.c:10581)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Timer__overflow', quals=[] (at pp.c:10581)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10582)
  FuncDef:  (at pp.c:10586)
    Decl: name='Msp430TimerCapComP__0__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10586)
      FuncDecl: quals=None (at pp.c:10586)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Timer__overflow', quals=[] (at pp.c:10586)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10587)
  FuncDef:  (at pp.c:10591)
    Decl: name='BusyWaitCounterC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10591)
      FuncDecl: quals=None (at pp.c:10591)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='BusyWaitCounterC__0__Counter__overflow', quals=[] (at pp.c:10591)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10592)
  FuncDef:  (at pp.c:10596)
    Decl: name='Msp430CounterC__1__Counter__overflow', quals=[], storage=['static', 'inline'] (at pp.c:10596)
      FuncDecl: quals=None (at pp.c:10596)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__1__Counter__overflow', quals=[] (at pp.c:10596)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10596)
      FuncCall:  (at None)
        ID: name='BusyWaitCounterC__0__Counter__overflow' (at pp.c:10598)
  FuncDef:  (at pp.c:10603)
    Decl: name='Msp430CounterC__1__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10603)
      FuncDecl: quals=None (at pp.c:10603)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__1__Msp430Timer__overflow', quals=[] (at pp.c:10603)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10604)
      FuncCall:  (at None)
        ID: name='Msp430CounterC__1__Counter__overflow' (at pp.c:10605)
  FuncDef:  (at pp.c:10609)
    Decl: name='Msp430TimerP__0__Timer__overflow', quals=[], storage=['static', 'inline'] (at pp.c:10609)
      FuncDecl: quals=None (at pp.c:10609)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__0__Timer__overflow', quals=[] (at pp.c:10609)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10609)
      FuncCall:  (at None)
        ID: name='Msp430CounterC__1__Msp430Timer__overflow' (at pp.c:10611)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__0__Timer__overflow' (at pp.c:10613)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__1__Timer__overflow' (at pp.c:10615)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__2__Timer__overflow' (at pp.c:10617)
  FuncDef:  (at pp.c:10622)
    Decl: name='Msp430TimerP__0__Overflow__fired', quals=[], storage=['inline', 'static'] (at pp.c:10622)
      FuncDecl: quals=None (at pp.c:10622)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__0__Overflow__fired', quals=[] (at pp.c:10622)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10623)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__0__Timer__overflow' (at pp.c:10624)
  FuncDef:  (at pp.c:10631)
    Decl: name='Msp430TimerP__0__Event__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:10631)
      FuncDecl: quals=None (at pp.c:10631)
        ParamList:  (at pp.c:10631)
          Decl: name='n', quals=[], storage=[] (at pp.c:10631)
            TypeDecl: declname='n', quals=[] (at pp.c:10631)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerP__0__Event__default__fired', quals=[] (at pp.c:10631)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10632)
  FuncDef:  (at pp.c:10636)
    Decl: name='Msp430TimerP__0__Event__fired', quals=[], storage=['static', 'inline'] (at pp.c:10636)
      FuncDecl: quals=None (at pp.c:10636)
        ParamList:  (at pp.c:10636)
          Decl: name='arg_0x101629c98', quals=[], storage=[] (at pp.c:10636)
            TypeDecl: declname='arg_0x101629c98', quals=[] (at pp.c:10636)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerP__0__Event__fired', quals=[] (at pp.c:10636)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10636)
      Switch:  (at pp.c:10638)
        ID: name='arg_0x101629c98' (at pp.c:10638)
        Compound:  (at pp.c:10638)
          Case:  (at pp.c:10640)
            Constant: type='int', value='0' (at pp.c:10640)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__0__Event__fired' (at pp.c:10642)
          Break:  (at pp.c:10644)
          Case:  (at pp.c:10646)
            Constant: type='int', value='1' (at pp.c:10646)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__1__Event__fired' (at pp.c:10648)
          Break:  (at pp.c:10650)
          Case:  (at pp.c:10652)
            Constant: type='int', value='2' (at pp.c:10652)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__2__Event__fired' (at pp.c:10654)
          Break:  (at pp.c:10656)
          Case:  (at pp.c:10658)
            Constant: type='int', value='5' (at pp.c:10658)
            FuncCall:  (at None)
              ID: name='Msp430TimerP__0__Overflow__fired' (at pp.c:10660)
          Break:  (at pp.c:10662)
          Default:  (at pp.c:10664)
            FuncCall:  (at None)
              ID: name='Msp430TimerP__0__Event__default__fired' (at pp.c:10666)
              ExprList:  (at pp.c:10666)
                ID: name='arg_0x101629c98' (at pp.c:10666)
          Break:  (at pp.c:10668)
  FuncDef:  (at pp.c:10675)
    Decl: name='Msp430TimerP__0__VectorTimerX0__fired', quals=[], storage=['inline', 'static'] (at pp.c:10675)
      FuncDecl: quals=None (at pp.c:10675)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__0__VectorTimerX0__fired', quals=[] (at pp.c:10675)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10676)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__0__Event__fired' (at pp.c:10677)
        ExprList:  (at pp.c:10677)
          Constant: type='int', value='0' (at pp.c:10677)
  FuncDef:  (at pp.c:10681)
    Decl: name='Msp430TimerCommonP__VectorTimerA0__fired', quals=[], storage=['static', 'inline'] (at pp.c:10681)
      FuncDecl: quals=None (at pp.c:10681)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCommonP__VectorTimerA0__fired', quals=[] (at pp.c:10681)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10681)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__0__VectorTimerX0__fired' (at pp.c:10683)
  FuncDef:  (at pp.c:10688)
    Decl: name='Msp430TimerCapComP__0__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:10688)
      FuncDecl: quals=None (at pp.c:10688)
        ParamList:  (at pp.c:10688)
          Decl: name='x', quals=[], storage=[] (at pp.c:10688)
            TypeDecl: declname='x', quals=[] (at pp.c:10688)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__int2CC', quals=[] (at pp.c:10688)
          IdentifierType: names=['Msp430TimerCapComP__0__cc_t'] (at None)
    Compound:  (at pp.c:10690)
      Decl: name='c', quals=[], storage=[] (at pp.c:10699)
        TypeDecl: declname='c', quals=[] (at pp.c:10699)
          Union: name='Msp430TimerCapComP__0____nesc_unnamed4397', packed=False (at pp.c:10692)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:10694)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:10696)
                IdentifierType: names=['Msp430TimerCapComP__0__cc_t'] (at None)
        ExprList:  (at pp.c:10699)
          Assignment: op='=' (at pp.c:10699)
            StructRef: type='.' (at pp.c:10699)
              ID: name='f' (at pp.c:10699)
            ID: name='x' (at pp.c:10699)
      Return:  (at pp.c:10702)
        StructRef: type='.' (at pp.c:10702)
          ID: name='c' (at pp.c:10702)
          ID: name='t' (at pp.c:10702)
  FuncDef:  (at pp.c:10706)
    Decl: name='Msp430TimerCapComP__0__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:10706)
      FuncDecl: quals=None (at pp.c:10706)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Control__getControl', quals=[] (at pp.c:10706)
          IdentifierType: names=['Msp430TimerCapComP__0__cc_t'] (at None)
    Compound:  (at pp.c:10707)
      Return:  (at pp.c:10708)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__0__int2CC' (at pp.c:10708)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:10708)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='354U' (at pp.c:10708)
  FuncDef:  (at pp.c:10712)
    Decl: name='Msp430TimerCapComP__0__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:10712)
      FuncDecl: quals=None (at pp.c:10712)
        ParamList:  (at pp.c:10712)
          Decl: name='n', quals=[], storage=[] (at pp.c:10712)
            TypeDecl: declname='n', quals=[] (at pp.c:10712)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Capture__default__captured', quals=[] (at pp.c:10712)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10713)
  FuncDef:  (at pp.c:10717)
    Decl: name='Msp430TimerCapComP__0__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:10717)
      FuncDecl: quals=None (at pp.c:10717)
        ParamList:  (at pp.c:10717)
          Decl: name='time', quals=[], storage=[] (at pp.c:10717)
            TypeDecl: declname='time', quals=[] (at pp.c:10717)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Capture__captured', quals=[] (at pp.c:10717)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10717)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__0__Capture__default__captured' (at pp.c:10719)
        ExprList:  (at pp.c:10719)
          ID: name='time' (at pp.c:10719)
  FuncDef:  (at pp.c:10724)
    Decl: name='Msp430TimerCapComP__0__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:10724)
      FuncDecl: quals=None (at pp.c:10724)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Capture__getEvent', quals=[] (at pp.c:10724)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:10725)
      Return:  (at pp.c:10726)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:10726)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='370U' (at pp.c:10726)
  FuncDef:  (at pp.c:10730)
    Decl: name='Msp430TimerCapComP__0__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:10730)
      FuncDecl: quals=None (at pp.c:10730)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Compare__default__fired', quals=[] (at pp.c:10730)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10731)
  FuncDef:  (at pp.c:10735)
    Decl: name='Msp430TimerCapComP__0__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:10735)
      FuncDecl: quals=None (at pp.c:10735)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Compare__fired', quals=[] (at pp.c:10735)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10735)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__0__Compare__default__fired' (at pp.c:10737)
  FuncDef:  (at pp.c:10742)
    Decl: name='Msp430TimerCapComP__1__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:10742)
      FuncDecl: quals=None (at pp.c:10742)
        ParamList:  (at pp.c:10742)
          Decl: name='x', quals=[], storage=[] (at pp.c:10742)
            TypeDecl: declname='x', quals=[] (at pp.c:10742)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__int2CC', quals=[] (at pp.c:10742)
          IdentifierType: names=['Msp430TimerCapComP__1__cc_t'] (at None)
    Compound:  (at pp.c:10744)
      Decl: name='c', quals=[], storage=[] (at pp.c:10753)
        TypeDecl: declname='c', quals=[] (at pp.c:10753)
          Union: name='Msp430TimerCapComP__1____nesc_unnamed4398', packed=False (at pp.c:10746)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:10748)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:10750)
                IdentifierType: names=['Msp430TimerCapComP__1__cc_t'] (at None)
        ExprList:  (at pp.c:10753)
          Assignment: op='=' (at pp.c:10753)
            StructRef: type='.' (at pp.c:10753)
              ID: name='f' (at pp.c:10753)
            ID: name='x' (at pp.c:10753)
      Return:  (at pp.c:10756)
        StructRef: type='.' (at pp.c:10756)
          ID: name='c' (at pp.c:10756)
          ID: name='t' (at pp.c:10756)
  FuncDef:  (at pp.c:10760)
    Decl: name='Msp430TimerCapComP__1__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:10760)
      FuncDecl: quals=None (at pp.c:10760)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Control__getControl', quals=[] (at pp.c:10760)
          IdentifierType: names=['Msp430TimerCapComP__1__cc_t'] (at None)
    Compound:  (at pp.c:10761)
      Return:  (at pp.c:10762)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__1__int2CC' (at pp.c:10762)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:10762)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='356U' (at pp.c:10762)
  FuncDef:  (at pp.c:10766)
    Decl: name='Msp430TimerCapComP__1__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:10766)
      FuncDecl: quals=None (at pp.c:10766)
        ParamList:  (at pp.c:10766)
          Decl: name='n', quals=[], storage=[] (at pp.c:10766)
            TypeDecl: declname='n', quals=[] (at pp.c:10766)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Capture__default__captured', quals=[] (at pp.c:10766)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10767)
  FuncDef:  (at pp.c:10771)
    Decl: name='Msp430TimerCapComP__1__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:10771)
      FuncDecl: quals=None (at pp.c:10771)
        ParamList:  (at pp.c:10771)
          Decl: name='time', quals=[], storage=[] (at pp.c:10771)
            TypeDecl: declname='time', quals=[] (at pp.c:10771)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Capture__captured', quals=[] (at pp.c:10771)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10771)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__1__Capture__default__captured' (at pp.c:10773)
        ExprList:  (at pp.c:10773)
          ID: name='time' (at pp.c:10773)
  FuncDef:  (at pp.c:10778)
    Decl: name='Msp430TimerCapComP__1__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:10778)
      FuncDecl: quals=None (at pp.c:10778)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Capture__getEvent', quals=[] (at pp.c:10778)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:10779)
      Return:  (at pp.c:10780)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:10780)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='372U' (at pp.c:10780)
  FuncDef:  (at pp.c:10784)
    Decl: name='Msp430TimerCapComP__1__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:10784)
      FuncDecl: quals=None (at pp.c:10784)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Compare__default__fired', quals=[] (at pp.c:10784)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10785)
  FuncDef:  (at pp.c:10789)
    Decl: name='Msp430TimerCapComP__1__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:10789)
      FuncDecl: quals=None (at pp.c:10789)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Compare__fired', quals=[] (at pp.c:10789)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10789)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__1__Compare__default__fired' (at pp.c:10791)
  FuncDef:  (at pp.c:10796)
    Decl: name='Msp430TimerCapComP__2__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:10796)
      FuncDecl: quals=None (at pp.c:10796)
        ParamList:  (at pp.c:10796)
          Decl: name='x', quals=[], storage=[] (at pp.c:10796)
            TypeDecl: declname='x', quals=[] (at pp.c:10796)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__int2CC', quals=[] (at pp.c:10796)
          IdentifierType: names=['Msp430TimerCapComP__2__cc_t'] (at None)
    Compound:  (at pp.c:10798)
      Decl: name='c', quals=[], storage=[] (at pp.c:10807)
        TypeDecl: declname='c', quals=[] (at pp.c:10807)
          Union: name='Msp430TimerCapComP__2____nesc_unnamed4399', packed=False (at pp.c:10800)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:10802)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:10804)
                IdentifierType: names=['Msp430TimerCapComP__2__cc_t'] (at None)
        ExprList:  (at pp.c:10807)
          Assignment: op='=' (at pp.c:10807)
            StructRef: type='.' (at pp.c:10807)
              ID: name='f' (at pp.c:10807)
            ID: name='x' (at pp.c:10807)
      Return:  (at pp.c:10810)
        StructRef: type='.' (at pp.c:10810)
          ID: name='c' (at pp.c:10810)
          ID: name='t' (at pp.c:10810)
  FuncDef:  (at pp.c:10814)
    Decl: name='Msp430TimerCapComP__2__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:10814)
      FuncDecl: quals=None (at pp.c:10814)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Control__getControl', quals=[] (at pp.c:10814)
          IdentifierType: names=['Msp430TimerCapComP__2__cc_t'] (at None)
    Compound:  (at pp.c:10815)
      Return:  (at pp.c:10816)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__2__int2CC' (at pp.c:10816)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:10816)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='358U' (at pp.c:10816)
  FuncDef:  (at pp.c:10820)
    Decl: name='Msp430TimerCapComP__2__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:10820)
      FuncDecl: quals=None (at pp.c:10820)
        ParamList:  (at pp.c:10820)
          Decl: name='n', quals=[], storage=[] (at pp.c:10820)
            TypeDecl: declname='n', quals=[] (at pp.c:10820)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Capture__default__captured', quals=[] (at pp.c:10820)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10821)
  FuncDef:  (at pp.c:10825)
    Decl: name='Msp430TimerCapComP__2__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:10825)
      FuncDecl: quals=None (at pp.c:10825)
        ParamList:  (at pp.c:10825)
          Decl: name='time', quals=[], storage=[] (at pp.c:10825)
            TypeDecl: declname='time', quals=[] (at pp.c:10825)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Capture__captured', quals=[] (at pp.c:10825)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10825)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__2__Capture__default__captured' (at pp.c:10827)
        ExprList:  (at pp.c:10827)
          ID: name='time' (at pp.c:10827)
  FuncDef:  (at pp.c:10832)
    Decl: name='Msp430TimerCapComP__2__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:10832)
      FuncDecl: quals=None (at pp.c:10832)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Capture__getEvent', quals=[] (at pp.c:10832)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:10833)
      Return:  (at pp.c:10834)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:10834)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='374U' (at pp.c:10834)
  FuncDef:  (at pp.c:10838)
    Decl: name='Msp430TimerCapComP__2__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:10838)
      FuncDecl: quals=None (at pp.c:10838)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Compare__default__fired', quals=[] (at pp.c:10838)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10839)
  FuncDef:  (at pp.c:10843)
    Decl: name='Msp430TimerCapComP__2__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:10843)
      FuncDecl: quals=None (at pp.c:10843)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Compare__fired', quals=[] (at pp.c:10843)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10843)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__2__Compare__default__fired' (at pp.c:10845)
  FuncDef:  (at pp.c:10850)
    Decl: name='Msp430TimerP__0__VectorTimerX1__fired', quals=[], storage=['inline', 'static'] (at pp.c:10850)
      FuncDecl: quals=None (at pp.c:10850)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__0__VectorTimerX1__fired', quals=[] (at pp.c:10850)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10851)
      Decl: name='n', quals=[], storage=[] (at pp.c:10852)
        TypeDecl: declname='n', quals=[] (at pp.c:10852)
          IdentifierType: names=['uint8_t'] (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:10852)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='302U' (at pp.c:10852)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__0__Event__fired' (at pp.c:10855)
        ExprList:  (at pp.c:10855)
          BinaryOp: op='>>' (at pp.c:10855)
            ID: name='n' (at pp.c:10855)
            Constant: type='int', value='1' (at pp.c:10855)
  FuncDef:  (at pp.c:10859)
    Decl: name='Msp430TimerCommonP__VectorTimerA1__fired', quals=[], storage=['static', 'inline'] (at pp.c:10859)
      FuncDecl: quals=None (at pp.c:10859)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCommonP__VectorTimerA1__fired', quals=[] (at pp.c:10859)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10859)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__0__VectorTimerX1__fired' (at pp.c:10861)
  FuncDef:  (at pp.c:10866)
    Decl: name='Msp430TimerP__1__VectorTimerX0__fired', quals=[], storage=['inline', 'static'] (at pp.c:10866)
      FuncDecl: quals=None (at pp.c:10866)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__VectorTimerX0__fired', quals=[] (at pp.c:10866)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10867)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__1__Event__fired' (at pp.c:10868)
        ExprList:  (at pp.c:10868)
          Constant: type='int', value='0' (at pp.c:10868)
  FuncDef:  (at pp.c:10872)
    Decl: name='Msp430TimerCommonP__VectorTimerB0__fired', quals=[], storage=['static', 'inline'] (at pp.c:10872)
      FuncDecl: quals=None (at pp.c:10872)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCommonP__VectorTimerB0__fired', quals=[] (at pp.c:10872)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10872)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__1__VectorTimerX0__fired' (at pp.c:10874)
  FuncDef:  (at pp.c:10879)
    Decl: name='Msp430TimerCapComP__9__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10879)
      FuncDecl: quals=None (at pp.c:10879)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Timer__overflow', quals=[] (at pp.c:10879)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10880)
  FuncDef:  (at pp.c:10884)
    Decl: name='Msp430TimerCapComP__8__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10884)
      FuncDecl: quals=None (at pp.c:10884)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Timer__overflow', quals=[] (at pp.c:10884)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10885)
  FuncDef:  (at pp.c:10889)
    Decl: name='Msp430TimerCapComP__7__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10889)
      FuncDecl: quals=None (at pp.c:10889)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Timer__overflow', quals=[] (at pp.c:10889)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10890)
  FuncDef:  (at pp.c:10894)
    Decl: name='Msp430TimerCapComP__6__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10894)
      FuncDecl: quals=None (at pp.c:10894)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Timer__overflow', quals=[] (at pp.c:10894)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10895)
  FuncDef:  (at pp.c:10899)
    Decl: name='Msp430TimerCapComP__5__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10899)
      FuncDecl: quals=None (at pp.c:10899)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Timer__overflow', quals=[] (at pp.c:10899)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10900)
  FuncDef:  (at pp.c:10904)
    Decl: name='Msp430TimerCapComP__4__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10904)
      FuncDecl: quals=None (at pp.c:10904)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Timer__overflow', quals=[] (at pp.c:10904)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10905)
  FuncDef:  (at pp.c:10909)
    Decl: name='Msp430TimerCapComP__3__Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10909)
      FuncDecl: quals=None (at pp.c:10909)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Timer__overflow', quals=[] (at pp.c:10909)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10910)
  FuncDef:  (at pp.c:10914)
    Decl: name='Msp430AlarmC__1__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10914)
      FuncDecl: quals=None (at pp.c:10914)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430Timer__overflow', quals=[] (at pp.c:10914)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10915)
  FuncDef:  (at pp.c:10919)
    Decl: name='Msp430AlarmC__0__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10919)
      FuncDecl: quals=None (at pp.c:10919)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430Timer__overflow', quals=[] (at pp.c:10919)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10920)
  FuncDef:  (at pp.c:10924)
    Decl: name='CounterToLocalTimeC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10924)
      FuncDecl: quals=None (at pp.c:10924)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CounterToLocalTimeC__0__Counter__overflow', quals=[] (at pp.c:10924)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10925)
  FuncDef:  (at pp.c:10929)
    Decl: name='TransformAlarmC__0__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10929)
      FuncDecl: quals=None (at pp.c:10929)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Counter__overflow', quals=[] (at pp.c:10929)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10930)
  FuncDef:  (at pp.c:10934)
    Decl: name='TransformCounterC__0__Counter__overflow', quals=[], storage=['static', 'inline'] (at pp.c:10934)
      FuncDecl: quals=None (at pp.c:10934)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__0__Counter__overflow', quals=[] (at pp.c:10934)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10934)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__Counter__overflow' (at pp.c:10936)
      FuncCall:  (at None)
        ID: name='CounterToLocalTimeC__0__Counter__overflow' (at pp.c:10938)
  FuncDef:  (at pp.c:10943)
    Decl: name='TransformCounterC__0__CounterFrom__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10943)
      FuncDecl: quals=None (at pp.c:10943)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__0__CounterFrom__overflow', quals=[] (at pp.c:10943)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10944)
      Compound:  (at pp.c:10946)
        UnaryOp: op='p++' (at pp.c:10947)
          ID: name='TransformCounterC__0__m_upper' (at pp.c:10947)
        If:  (at pp.c:10948)
          BinaryOp: op='==' (at pp.c:10948)
            BinaryOp: op='&' (at pp.c:10948)
              ID: name='TransformCounterC__0__m_upper' (at pp.c:10948)
              ID: name='TransformCounterC__0__OVERFLOW_MASK' (at pp.c:10948)
            Constant: type='int', value='0' (at pp.c:10948)
          Compound:  (at pp.c:10948)
            FuncCall:  (at None)
              ID: name='TransformCounterC__0__Counter__overflow' (at pp.c:10949)
  FuncDef:  (at pp.c:10955)
    Decl: name='TransformAlarmC__1__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10955)
      FuncDecl: quals=None (at pp.c:10955)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Counter__overflow', quals=[] (at pp.c:10955)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10956)
  FuncDef:  (at pp.c:10960)
    Decl: name='CounterToLocalTimeC__1__Counter__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10960)
      FuncDecl: quals=None (at pp.c:10960)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CounterToLocalTimeC__1__Counter__overflow', quals=[] (at pp.c:10960)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10961)
  FuncDef:  (at pp.c:10965)
    Decl: name='TransformCounterC__1__Counter__overflow', quals=[], storage=['static', 'inline'] (at pp.c:10965)
      FuncDecl: quals=None (at pp.c:10965)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__1__Counter__overflow', quals=[] (at pp.c:10965)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10965)
      FuncCall:  (at None)
        ID: name='CounterToLocalTimeC__1__Counter__overflow' (at pp.c:10967)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__Counter__overflow' (at pp.c:10969)
  FuncDef:  (at pp.c:10974)
    Decl: name='TransformCounterC__1__CounterFrom__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10974)
      FuncDecl: quals=None (at pp.c:10974)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__1__CounterFrom__overflow', quals=[] (at pp.c:10974)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10975)
      Compound:  (at pp.c:10977)
        UnaryOp: op='p++' (at pp.c:10978)
          ID: name='TransformCounterC__1__m_upper' (at pp.c:10978)
        If:  (at pp.c:10979)
          BinaryOp: op='==' (at pp.c:10979)
            BinaryOp: op='&' (at pp.c:10979)
              ID: name='TransformCounterC__1__m_upper' (at pp.c:10979)
              ID: name='TransformCounterC__1__OVERFLOW_MASK' (at pp.c:10979)
            Constant: type='int', value='0' (at pp.c:10979)
          Compound:  (at pp.c:10979)
            FuncCall:  (at None)
              ID: name='TransformCounterC__1__Counter__overflow' (at pp.c:10980)
  FuncDef:  (at pp.c:10986)
    Decl: name='Msp430CounterC__0__Counter__overflow', quals=[], storage=['static', 'inline'] (at pp.c:10986)
      FuncDecl: quals=None (at pp.c:10986)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Counter__overflow', quals=[] (at pp.c:10986)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10986)
      FuncCall:  (at None)
        ID: name='TransformCounterC__1__CounterFrom__overflow' (at pp.c:10988)
      FuncCall:  (at None)
        ID: name='TransformCounterC__0__CounterFrom__overflow' (at pp.c:10990)
  FuncDef:  (at pp.c:10995)
    Decl: name='Msp430CounterC__0__Msp430Timer__overflow', quals=[], storage=['inline', 'static'] (at pp.c:10995)
      FuncDecl: quals=None (at pp.c:10995)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Msp430Timer__overflow', quals=[] (at pp.c:10995)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:10996)
      FuncCall:  (at None)
        ID: name='Msp430CounterC__0__Counter__overflow' (at pp.c:10997)
  FuncDef:  (at pp.c:11001)
    Decl: name='Msp430TimerP__1__Timer__overflow', quals=[], storage=['static', 'inline'] (at pp.c:11001)
      FuncDecl: quals=None (at pp.c:11001)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Timer__overflow', quals=[] (at pp.c:11001)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11001)
      FuncCall:  (at None)
        ID: name='Msp430CounterC__0__Msp430Timer__overflow' (at pp.c:11003)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430Timer__overflow' (at pp.c:11005)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430Timer__overflow' (at pp.c:11007)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Timer__overflow' (at pp.c:11009)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Timer__overflow' (at pp.c:11011)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Timer__overflow' (at pp.c:11013)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__6__Timer__overflow' (at pp.c:11015)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__7__Timer__overflow' (at pp.c:11017)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__8__Timer__overflow' (at pp.c:11019)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__9__Timer__overflow' (at pp.c:11021)
  FuncDef:  (at pp.c:11026)
    Decl: name='Msp430TimerP__1__Overflow__fired', quals=[], storage=['inline', 'static'] (at pp.c:11026)
      FuncDecl: quals=None (at pp.c:11026)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Overflow__fired', quals=[] (at pp.c:11026)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11027)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__1__Timer__overflow' (at pp.c:11028)
  FuncDef:  (at pp.c:11032)
    Decl: name='AlarmToTimerC__0__fired__postTask', quals=[], storage=['static', 'inline'] (at pp.c:11032)
      FuncDecl: quals=None (at pp.c:11032)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__fired__postTask', quals=[] (at pp.c:11032)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11032)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11034)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11034)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11038)
        ID: name='__nesc_result' (at pp.c:11038)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:11038)
          ExprList:  (at pp.c:11038)
            ID: name='AlarmToTimerC__0__fired' (at pp.c:11038)
      Return:  (at pp.c:11042)
        ID: name='__nesc_result' (at pp.c:11042)
  FuncDef:  (at pp.c:11047)
    Decl: name='AlarmToTimerC__0__Alarm__fired', quals=[], storage=['inline', 'static'] (at pp.c:11047)
      FuncDecl: quals=None (at pp.c:11047)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Alarm__fired', quals=[] (at pp.c:11047)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11048)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__fired__postTask' (at pp.c:11050)
  FuncDef:  (at pp.c:11054)
    Decl: name='TransformAlarmC__0__Alarm__fired', quals=[], storage=['static', 'inline'] (at pp.c:11054)
      FuncDecl: quals=None (at pp.c:11054)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Alarm__fired', quals=[] (at pp.c:11054)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11054)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Alarm__fired' (at pp.c:11056)
  FuncDef:  (at pp.c:11061)
    Decl: name='TransformAlarmC__0__AlarmFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:11061)
      FuncDecl: quals=None (at pp.c:11061)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__AlarmFrom__fired', quals=[] (at pp.c:11061)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11062)
      Compound:  (at pp.c:11064)
        If:  (at pp.c:11065)
          BinaryOp: op='==' (at pp.c:11065)
            ID: name='TransformAlarmC__0__m_dt' (at pp.c:11065)
            Constant: type='int', value='0' (at pp.c:11065)
          Compound:  (at pp.c:11066)
            FuncCall:  (at None)
              ID: name='TransformAlarmC__0__Alarm__fired' (at pp.c:11067)
          Compound:  (at pp.c:11070)
            FuncCall:  (at None)
              ID: name='TransformAlarmC__0__set_alarm' (at pp.c:11071)
  FuncDef:  (at pp.c:11077)
    Decl: name='Msp430AlarmC__0__Alarm__fired', quals=[], storage=['static', 'inline'] (at pp.c:11077)
      FuncDecl: quals=None (at pp.c:11077)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Alarm__fired', quals=[] (at pp.c:11077)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11077)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__AlarmFrom__fired' (at pp.c:11079)
  FuncDef:  (at pp.c:11084)
    Decl: name='Msp430TimerCapComP__3__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:11084)
      FuncDecl: quals=None (at pp.c:11084)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Control__disableEvents', quals=[] (at pp.c:11084)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11085)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11086)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='386U' (at pp.c:11086)
        UnaryOp: op='~' (at pp.c:11086)
          Constant: type='int', value='0x0010' (at pp.c:11086)
  FuncDef:  (at pp.c:11090)
    Decl: name='Msp430AlarmC__0__Msp430TimerControl__disableEvents', quals=[], storage=['static', 'inline'] (at pp.c:11090)
      FuncDecl: quals=None (at pp.c:11090)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__disableEvents', quals=[] (at pp.c:11090)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11090)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Control__disableEvents' (at pp.c:11092)
  FuncDef:  (at pp.c:11097)
    Decl: name='Msp430AlarmC__0__Msp430Compare__fired', quals=[], storage=['inline', 'static'] (at pp.c:11097)
      FuncDecl: quals=None (at pp.c:11097)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__fired', quals=[] (at pp.c:11097)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11098)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430TimerControl__disableEvents' (at pp.c:11099)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Alarm__fired' (at pp.c:11100)
  FuncDef:  (at pp.c:11104)
    Decl: name='Msp430TimerCapComP__3__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:11104)
      FuncDecl: quals=None (at pp.c:11104)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Compare__fired', quals=[] (at pp.c:11104)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11104)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430Compare__fired' (at pp.c:11106)
  FuncDef:  (at pp.c:11111)
    Decl: name='Msp430TimerCapComP__3__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:11111)
      FuncDecl: quals=None (at pp.c:11111)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Capture__getEvent', quals=[] (at pp.c:11111)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11112)
      Return:  (at pp.c:11113)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11113)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='402U' (at pp.c:11113)
  FuncDef:  (at pp.c:11117)
    Decl: name='Msp430TimerCapComP__3__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:11117)
      FuncDecl: quals=None (at pp.c:11117)
        ParamList:  (at pp.c:11117)
          Decl: name='n', quals=[], storage=[] (at pp.c:11117)
            TypeDecl: declname='n', quals=[] (at pp.c:11117)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Capture__default__captured', quals=[] (at pp.c:11117)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11118)
  FuncDef:  (at pp.c:11122)
    Decl: name='Msp430TimerCapComP__3__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:11122)
      FuncDecl: quals=None (at pp.c:11122)
        ParamList:  (at pp.c:11122)
          Decl: name='time', quals=[], storage=[] (at pp.c:11122)
            TypeDecl: declname='time', quals=[] (at pp.c:11122)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Capture__captured', quals=[] (at pp.c:11122)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11122)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Capture__default__captured' (at pp.c:11124)
        ExprList:  (at pp.c:11124)
          ID: name='time' (at pp.c:11124)
  FuncDef:  (at pp.c:11129)
    Decl: name='Msp430TimerCapComP__3__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:11129)
      FuncDecl: quals=None (at pp.c:11129)
        ParamList:  (at pp.c:11129)
          Decl: name='x', quals=[], storage=[] (at pp.c:11129)
            TypeDecl: declname='x', quals=[] (at pp.c:11129)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__int2CC', quals=[] (at pp.c:11129)
          IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
    Compound:  (at pp.c:11131)
      Decl: name='c', quals=[], storage=[] (at pp.c:11140)
        TypeDecl: declname='c', quals=[] (at pp.c:11140)
          Union: name='Msp430TimerCapComP__3____nesc_unnamed4400', packed=False (at pp.c:11133)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:11135)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:11137)
                IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
        ExprList:  (at pp.c:11140)
          Assignment: op='=' (at pp.c:11140)
            StructRef: type='.' (at pp.c:11140)
              ID: name='f' (at pp.c:11140)
            ID: name='x' (at pp.c:11140)
      Return:  (at pp.c:11143)
        StructRef: type='.' (at pp.c:11143)
          ID: name='c' (at pp.c:11143)
          ID: name='t' (at pp.c:11143)
  FuncDef:  (at pp.c:11147)
    Decl: name='Msp430TimerCapComP__3__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:11147)
      FuncDecl: quals=None (at pp.c:11147)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Control__getControl', quals=[] (at pp.c:11147)
          IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
    Compound:  (at pp.c:11148)
      Return:  (at pp.c:11149)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__3__int2CC' (at pp.c:11149)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:11149)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='386U' (at pp.c:11149)
  FuncDef:  (at pp.c:11153)
    Decl: name='Msp430TimerCapComP__3__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:11153)
      FuncDecl: quals=None (at pp.c:11153)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Event__fired', quals=[] (at pp.c:11153)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11154)
      If:  (at pp.c:11155)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__3__Control__getControl' (at pp.c:11155)
          ID: name='cap' (at pp.c:11155)
        Compound:  (at pp.c:11155)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__3__Capture__captured' (at pp.c:11156)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__3__Capture__getEvent' (at pp.c:11156)
        Compound:  (at pp.c:11158)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__3__Compare__fired' (at pp.c:11160)
  FuncDef:  (at pp.c:11165)
    Decl: name='SchedulerBasicP__isWaiting', quals=[], storage=['inline', 'static'] (at pp.c:11165)
      FuncDecl: quals=None (at pp.c:11165)
        ParamList:  (at pp.c:11165)
          Decl: name='id', quals=[], storage=[] (at pp.c:11165)
            TypeDecl: declname='id', quals=[] (at pp.c:11165)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SchedulerBasicP__isWaiting', quals=[] (at pp.c:11165)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11166)
      Return:  (at pp.c:11167)
        BinaryOp: op='||' (at pp.c:11167)
          BinaryOp: op='!=' (at pp.c:11167)
            ArrayRef:  (at pp.c:11167)
              ID: name='SchedulerBasicP__m_next' (at pp.c:11167)
              ID: name='id' (at pp.c:11167)
            ID: name='SchedulerBasicP__NO_TASK' (at pp.c:11167)
          BinaryOp: op='==' (at pp.c:11167)
            ID: name='SchedulerBasicP__m_tail' (at pp.c:11167)
            ID: name='id' (at pp.c:11167)
  FuncDef:  (at pp.c:11170)
    Decl: name='SchedulerBasicP__pushTask', quals=[], storage=['inline', 'static'] (at pp.c:11170)
      FuncDecl: quals=None (at pp.c:11170)
        ParamList:  (at pp.c:11170)
          Decl: name='id', quals=[], storage=[] (at pp.c:11170)
            TypeDecl: declname='id', quals=[] (at pp.c:11170)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SchedulerBasicP__pushTask', quals=[] (at pp.c:11170)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11171)
      If:  (at pp.c:11172)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='SchedulerBasicP__isWaiting' (at pp.c:11172)
            ExprList:  (at pp.c:11172)
              ID: name='id' (at pp.c:11172)
        Compound:  (at pp.c:11173)
          If:  (at pp.c:11174)
            BinaryOp: op='==' (at pp.c:11174)
              ID: name='SchedulerBasicP__m_head' (at pp.c:11174)
              ID: name='SchedulerBasicP__NO_TASK' (at pp.c:11174)
            Compound:  (at pp.c:11175)
              Assignment: op='=' (at pp.c:11176)
                ID: name='SchedulerBasicP__m_head' (at pp.c:11176)
                ID: name='id' (at pp.c:11176)
              Assignment: op='=' (at pp.c:11177)
                ID: name='SchedulerBasicP__m_tail' (at pp.c:11177)
                ID: name='id' (at pp.c:11177)
            Compound:  (at pp.c:11180)
              Assignment: op='=' (at pp.c:11181)
                ArrayRef:  (at pp.c:11181)
                  ID: name='SchedulerBasicP__m_next' (at pp.c:11181)
                  ID: name='SchedulerBasicP__m_tail' (at pp.c:11181)
                ID: name='id' (at pp.c:11181)
              Assignment: op='=' (at pp.c:11182)
                ID: name='SchedulerBasicP__m_tail' (at pp.c:11182)
                ID: name='id' (at pp.c:11182)
          Return:  (at pp.c:11184)
            ID: name='TRUE' (at pp.c:11184)
        Compound:  (at pp.c:11187)
          Return:  (at pp.c:11188)
            ID: name='FALSE' (at pp.c:11188)
  FuncDef:  (at pp.c:11193)
    Decl: name='Msp430CounterC__0__Msp430Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:11193)
      FuncDecl: quals=None (at pp.c:11193)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Msp430Timer__get', quals=[] (at pp.c:11193)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11193)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11195)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11195)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11199)
        ID: name='__nesc_result' (at pp.c:11199)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__get' (at pp.c:11199)
      Return:  (at pp.c:11203)
        ID: name='__nesc_result' (at pp.c:11203)
  FuncDef:  (at pp.c:11208)
    Decl: name='Msp430CounterC__0__Counter__get', quals=[], storage=['inline', 'static'] (at pp.c:11208)
      FuncDecl: quals=None (at pp.c:11208)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Counter__get', quals=[] (at pp.c:11208)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11209)
      Return:  (at pp.c:11210)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Msp430Timer__get' (at pp.c:11210)
  FuncDef:  (at pp.c:11214)
    Decl: name='TransformCounterC__0__CounterFrom__get', quals=[], storage=['static', 'inline'] (at pp.c:11214)
      FuncDecl: quals=None (at pp.c:11214)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__0__CounterFrom__get', quals=[] (at pp.c:11214)
          IdentifierType: names=['TransformCounterC__0__CounterFrom__size_type'] (at None)
    Compound:  (at pp.c:11214)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11216)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11216)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11220)
        ID: name='__nesc_result' (at pp.c:11220)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Counter__get' (at pp.c:11220)
      Return:  (at pp.c:11224)
        ID: name='__nesc_result' (at pp.c:11224)
  FuncDef:  (at pp.c:11229)
    Decl: name='Msp430TimerP__1__Timer__isOverflowPending', quals=[], storage=['inline', 'static'] (at pp.c:11229)
      FuncDecl: quals=None (at pp.c:11229)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Timer__isOverflowPending', quals=[] (at pp.c:11229)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11230)
      Return:  (at pp.c:11231)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:11231)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint16_t'] (at None)
              Constant: type='int', value='384U' (at pp.c:11231)
          Constant: type='int', value='1U' (at pp.c:11231)
  FuncDef:  (at pp.c:11235)
    Decl: name='Msp430CounterC__0__Msp430Timer__isOverflowPending', quals=[], storage=['static', 'inline'] (at pp.c:11235)
      FuncDecl: quals=None (at pp.c:11235)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Msp430Timer__isOverflowPending', quals=[] (at pp.c:11235)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11235)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11237)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11237)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11241)
        ID: name='__nesc_result' (at pp.c:11241)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__isOverflowPending' (at pp.c:11241)
      Return:  (at pp.c:11245)
        ID: name='__nesc_result' (at pp.c:11245)
  FuncDef:  (at pp.c:11250)
    Decl: name='Msp430CounterC__0__Counter__isOverflowPending', quals=[], storage=['inline', 'static'] (at pp.c:11250)
      FuncDecl: quals=None (at pp.c:11250)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__0__Counter__isOverflowPending', quals=[] (at pp.c:11250)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11251)
      Return:  (at pp.c:11252)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Msp430Timer__isOverflowPending' (at pp.c:11252)
  FuncDef:  (at pp.c:11256)
    Decl: name='TransformCounterC__0__CounterFrom__isOverflowPending', quals=[], storage=['static', 'inline'] (at pp.c:11256)
      FuncDecl: quals=None (at pp.c:11256)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__0__CounterFrom__isOverflowPending', quals=[] (at pp.c:11256)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11256)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11258)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11258)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11262)
        ID: name='__nesc_result' (at pp.c:11262)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Counter__isOverflowPending' (at pp.c:11262)
      Return:  (at pp.c:11266)
        ID: name='__nesc_result' (at pp.c:11266)
  FuncDef:  (at pp.c:11271)
    Decl: name='Msp430TimerCapComP__3__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:11271)
      FuncDecl: quals=None (at pp.c:11271)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Control__enableEvents', quals=[] (at pp.c:11271)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11272)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11273)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='386U' (at pp.c:11273)
        Constant: type='int', value='0x0010' (at pp.c:11273)
  FuncDef:  (at pp.c:11277)
    Decl: name='Msp430AlarmC__0__Msp430TimerControl__enableEvents', quals=[], storage=['static', 'inline'] (at pp.c:11277)
      FuncDecl: quals=None (at pp.c:11277)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__enableEvents', quals=[] (at pp.c:11277)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11277)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Control__enableEvents' (at pp.c:11279)
  FuncDef:  (at pp.c:11284)
    Decl: name='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:11284)
      FuncDecl: quals=None (at pp.c:11284)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Control__clearPendingInterrupt', quals=[] (at pp.c:11284)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11285)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11286)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='386U' (at pp.c:11286)
        UnaryOp: op='~' (at pp.c:11286)
          Constant: type='int', value='0x0001' (at pp.c:11286)
  FuncDef:  (at pp.c:11290)
    Decl: name='Msp430AlarmC__0__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static', 'inline'] (at pp.c:11290)
      FuncDecl: quals=None (at pp.c:11290)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:11290)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11290)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Control__clearPendingInterrupt' (at pp.c:11292)
  FuncDef:  (at pp.c:11297)
    Decl: name='Msp430TimerCapComP__3__Compare__setEvent', quals=[], storage=['inline', 'static'] (at pp.c:11297)
      FuncDecl: quals=None (at pp.c:11297)
        ParamList:  (at pp.c:11297)
          Decl: name='x', quals=[], storage=[] (at pp.c:11297)
            TypeDecl: declname='x', quals=[] (at pp.c:11297)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEvent', quals=[] (at pp.c:11297)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11298)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11299)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='402U' (at pp.c:11299)
        ID: name='x' (at pp.c:11299)
  FuncDef:  (at pp.c:11303)
    Decl: name='Msp430AlarmC__0__Msp430Compare__setEvent', quals=[], storage=['static', 'inline'] (at pp.c:11303)
      FuncDecl: quals=None (at pp.c:11303)
        ParamList:  (at pp.c:11303)
          Decl: name='time', quals=[], storage=[] (at pp.c:11303)
            TypeDecl: declname='time', quals=[] (at pp.c:11303)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__setEvent', quals=[] (at pp.c:11303)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11303)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Compare__setEvent' (at pp.c:11305)
        ExprList:  (at pp.c:11305)
          ID: name='time' (at pp.c:11305)
  FuncDef:  (at pp.c:11310)
    Decl: name='Msp430TimerCapComP__3__Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:11310)
      FuncDecl: quals=None (at pp.c:11310)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Timer__get', quals=[] (at pp.c:11310)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11310)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11312)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11312)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11316)
        ID: name='__nesc_result' (at pp.c:11316)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__get' (at pp.c:11316)
      Return:  (at pp.c:11320)
        ID: name='__nesc_result' (at pp.c:11320)
  FuncDef:  (at pp.c:11325)
    Decl: name='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[], storage=['inline', 'static'] (at pp.c:11325)
      FuncDecl: quals=None (at pp.c:11325)
        ParamList:  (at pp.c:11325)
          Decl: name='x', quals=[], storage=[] (at pp.c:11325)
            TypeDecl: declname='x', quals=[] (at pp.c:11325)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Compare__setEventFromNow', quals=[] (at pp.c:11325)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11326)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11327)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='402U' (at pp.c:11327)
        BinaryOp: op='+' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__3__Timer__get' (at pp.c:11327)
          ID: name='x' (at pp.c:11327)
  FuncDef:  (at pp.c:11331)
    Decl: name='Msp430AlarmC__0__Msp430Compare__setEventFromNow', quals=[], storage=['static', 'inline'] (at pp.c:11331)
      FuncDecl: quals=None (at pp.c:11331)
        ParamList:  (at pp.c:11331)
          Decl: name='delta', quals=[], storage=[] (at pp.c:11331)
            TypeDecl: declname='delta', quals=[] (at pp.c:11331)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430Compare__setEventFromNow', quals=[] (at pp.c:11331)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11331)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Compare__setEventFromNow' (at pp.c:11333)
        ExprList:  (at pp.c:11333)
          ID: name='delta' (at pp.c:11333)
  FuncDef:  (at pp.c:11338)
    Decl: name='Msp430AlarmC__0__Msp430Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:11338)
      FuncDecl: quals=None (at pp.c:11338)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430Timer__get', quals=[] (at pp.c:11338)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11338)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11340)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11340)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11344)
        ID: name='__nesc_result' (at pp.c:11344)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__get' (at pp.c:11344)
      Return:  (at pp.c:11348)
        ID: name='__nesc_result' (at pp.c:11348)
  FuncDef:  (at pp.c:11353)
    Decl: name='Msp430AlarmC__0__Alarm__startAt', quals=[], storage=['inline', 'static'] (at pp.c:11353)
      FuncDecl: quals=None (at pp.c:11353)
        ParamList:  (at pp.c:11353)
          Decl: name='t0', quals=[], storage=[] (at pp.c:11353)
            TypeDecl: declname='t0', quals=[] (at pp.c:11353)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:11353)
            TypeDecl: declname='dt', quals=[] (at pp.c:11353)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Alarm__startAt', quals=[] (at pp.c:11353)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11354)
      Compound:  (at pp.c:11356)
        Decl: name='now', quals=[], storage=[] (at pp.c:11357)
          TypeDecl: declname='now', quals=[] (at pp.c:11357)
            IdentifierType: names=['uint16_t'] (at None)
          FuncCall:  (at None)
            ID: name='Msp430AlarmC__0__Msp430Timer__get' (at pp.c:11357)
        Decl: name='elapsed', quals=[], storage=[] (at pp.c:11358)
          TypeDecl: declname='elapsed', quals=[] (at pp.c:11358)
            IdentifierType: names=['uint16_t'] (at None)
          BinaryOp: op='-' (at pp.c:11358)
            ID: name='now' (at pp.c:11358)
            ID: name='t0' (at pp.c:11358)
        If:  (at pp.c:11361)
          BinaryOp: op='>=' (at pp.c:11361)
            ID: name='elapsed' (at pp.c:11361)
            ID: name='dt' (at pp.c:11361)
          Compound:  (at pp.c:11362)
            FuncCall:  (at None)
              ID: name='Msp430AlarmC__0__Msp430Compare__setEventFromNow' (at pp.c:11363)
              ExprList:  (at pp.c:11363)
                Constant: type='int', value='2' (at pp.c:11363)
          Compound:  (at pp.c:11366)
            Decl: name='remaining', quals=[], storage=[] (at pp.c:11367)
              TypeDecl: declname='remaining', quals=[] (at pp.c:11367)
                IdentifierType: names=['uint16_t'] (at None)
              BinaryOp: op='-' (at pp.c:11367)
                ID: name='dt' (at pp.c:11367)
                ID: name='elapsed' (at pp.c:11367)
            If:  (at pp.c:11370)
              BinaryOp: op='<=' (at pp.c:11370)
                ID: name='remaining' (at pp.c:11370)
                Constant: type='int', value='2' (at pp.c:11370)
              Compound:  (at pp.c:11370)
                FuncCall:  (at None)
                  ID: name='Msp430AlarmC__0__Msp430Compare__setEventFromNow' (at pp.c:11371)
                  ExprList:  (at pp.c:11371)
                    Constant: type='int', value='2' (at pp.c:11371)
              Compound:  (at pp.c:11373)
                FuncCall:  (at None)
                  ID: name='Msp430AlarmC__0__Msp430Compare__setEvent' (at pp.c:11375)
                  ExprList:  (at pp.c:11375)
                    BinaryOp: op='+' (at pp.c:11375)
                      ID: name='now' (at pp.c:11375)
                      ID: name='remaining' (at pp.c:11375)
        FuncCall:  (at None)
          ID: name='Msp430AlarmC__0__Msp430TimerControl__clearPendingInterrupt' (at pp.c:11379)
        FuncCall:  (at None)
          ID: name='Msp430AlarmC__0__Msp430TimerControl__enableEvents' (at pp.c:11380)
  FuncDef:  (at pp.c:11385)
    Decl: name='TransformAlarmC__0__AlarmFrom__startAt', quals=[], storage=['static', 'inline'] (at pp.c:11385)
      FuncDecl: quals=None (at pp.c:11385)
        ParamList:  (at pp.c:11385)
          Decl: name='t0', quals=[], storage=[] (at pp.c:11385)
            TypeDecl: declname='t0', quals=[] (at pp.c:11385)
              IdentifierType: names=['TransformAlarmC__0__AlarmFrom__size_type'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:11385)
            TypeDecl: declname='dt', quals=[] (at pp.c:11385)
              IdentifierType: names=['TransformAlarmC__0__AlarmFrom__size_type'] (at None)
        TypeDecl: declname='TransformAlarmC__0__AlarmFrom__startAt', quals=[] (at pp.c:11385)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11385)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Alarm__startAt' (at pp.c:11387)
        ExprList:  (at pp.c:11387)
          ID: name='t0' (at pp.c:11387)
          ID: name='dt' (at pp.c:11387)
  FuncDef:  (at pp.c:11392)
    Decl: name='Msp430TimerCapComP__4__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:11392)
      FuncDecl: quals=None (at pp.c:11392)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Compare__default__fired', quals=[] (at pp.c:11392)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11393)
  FuncDef:  (at pp.c:11397)
    Decl: name='Msp430TimerCapComP__4__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:11397)
      FuncDecl: quals=None (at pp.c:11397)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Compare__fired', quals=[] (at pp.c:11397)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11397)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Compare__default__fired' (at pp.c:11399)
  FuncDef:  (at pp.c:11404)
    Decl: name='Msp430TimerCapComP__4__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:11404)
      FuncDecl: quals=None (at pp.c:11404)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Capture__getEvent', quals=[] (at pp.c:11404)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11405)
      Return:  (at pp.c:11406)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11406)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='404U' (at pp.c:11406)
  FuncDef:  (at pp.c:11410)
    Decl: name='__nesc_ntoh_leuint16', quals=[], storage=['__inline', 'static'] (at pp.c:11410)
      FuncDecl: quals=None (at pp.c:11410)
        ParamList:  (at pp.c:11410)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:11410)
            PtrDecl: quals=[] (at pp.c:11410)
              TypeDecl: declname='source', quals=['const'] (at pp.c:11410)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_leuint16', quals=[] (at pp.c:11410)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:11412)
      Decl: name='base', quals=['const'], storage=[] (at pp.c:11413)
        PtrDecl: quals=[] (at pp.c:11413)
          TypeDecl: declname='base', quals=['const'] (at pp.c:11413)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='source' (at pp.c:11413)
      Return:  (at pp.c:11416)
        BinaryOp: op='|' (at None)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
              ArrayRef:  (at pp.c:11416)
                ID: name='base' (at pp.c:11416)
                Constant: type='int', value='1' (at pp.c:11416)
            Constant: type='int', value='8' (at pp.c:11416)
          ArrayRef:  (at pp.c:11416)
            ID: name='base' (at pp.c:11416)
            Constant: type='int', value='0' (at pp.c:11416)
  FuncDef:  (at pp.c:11420)
    Decl: name='__nesc_hton_uint32', quals=[], storage=['__inline', 'static'] (at pp.c:11420)
      FuncDecl: quals=None (at pp.c:11420)
        ParamList:  (at pp.c:11420)
          Decl: name='target', quals=[], storage=[] (at pp.c:11420)
            PtrDecl: quals=[] (at pp.c:11420)
              TypeDecl: declname='target', quals=[] (at pp.c:11420)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:11420)
            TypeDecl: declname='value', quals=[] (at pp.c:11420)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='__nesc_hton_uint32', quals=[] (at pp.c:11420)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:11422)
      Decl: name='base', quals=[], storage=[] (at pp.c:11423)
        PtrDecl: quals=[] (at pp.c:11423)
          TypeDecl: declname='base', quals=[] (at pp.c:11423)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='target' (at pp.c:11423)
      Assignment: op='=' (at pp.c:11426)
        ArrayRef:  (at pp.c:11426)
          ID: name='base' (at pp.c:11426)
          Constant: type='int', value='3' (at pp.c:11426)
        ID: name='value' (at pp.c:11426)
      Assignment: op='=' (at pp.c:11427)
        ArrayRef:  (at pp.c:11427)
          ID: name='base' (at pp.c:11427)
          Constant: type='int', value='2' (at pp.c:11427)
        BinaryOp: op='>>' (at pp.c:11427)
          ID: name='value' (at pp.c:11427)
          Constant: type='int', value='8' (at pp.c:11427)
      Assignment: op='=' (at pp.c:11428)
        ArrayRef:  (at pp.c:11428)
          ID: name='base' (at pp.c:11428)
          Constant: type='int', value='1' (at pp.c:11428)
        BinaryOp: op='>>' (at pp.c:11428)
          ID: name='value' (at pp.c:11428)
          Constant: type='int', value='16' (at pp.c:11428)
      Assignment: op='=' (at pp.c:11429)
        ArrayRef:  (at pp.c:11429)
          ID: name='base' (at pp.c:11429)
          Constant: type='int', value='0' (at pp.c:11429)
        BinaryOp: op='>>' (at pp.c:11429)
          ID: name='value' (at pp.c:11429)
          Constant: type='int', value='24' (at pp.c:11429)
      Return:  (at pp.c:11430)
        ID: name='value' (at pp.c:11430)
  FuncDef:  (at pp.c:11434)
    Decl: name='__nesc_ntoh_uint32', quals=[], storage=['__inline', 'static'] (at pp.c:11434)
      FuncDecl: quals=None (at pp.c:11434)
        ParamList:  (at pp.c:11434)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:11434)
            PtrDecl: quals=[] (at pp.c:11434)
              TypeDecl: declname='source', quals=['const'] (at pp.c:11434)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_uint32', quals=[] (at pp.c:11434)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:11436)
      Decl: name='base', quals=['const'], storage=[] (at pp.c:11437)
        PtrDecl: quals=[] (at pp.c:11437)
          TypeDecl: declname='base', quals=['const'] (at pp.c:11437)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='source' (at pp.c:11437)
      Return:  (at pp.c:11440)
        BinaryOp: op='|' (at None)
          BinaryOp: op='|' (at None)
            BinaryOp: op='|' (at None)
              BinaryOp: op='<<' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint32_t'] (at None)
                  ArrayRef:  (at pp.c:11440)
                    ID: name='base' (at pp.c:11440)
                    Constant: type='int', value='0' (at pp.c:11440)
                Constant: type='int', value='24' (at pp.c:11440)
              BinaryOp: op='<<' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint32_t'] (at None)
                  ArrayRef:  (at pp.c:11441)
                    ID: name='base' (at pp.c:11441)
                    Constant: type='int', value='1' (at pp.c:11441)
                Constant: type='int', value='16' (at pp.c:11441)
            BinaryOp: op='<<' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['uint32_t'] (at None)
                ArrayRef:  (at pp.c:11442)
                  ID: name='base' (at pp.c:11442)
                  Constant: type='int', value='2' (at pp.c:11442)
              Constant: type='int', value='8' (at pp.c:11442)
          ArrayRef:  (at pp.c:11442)
            ID: name='base' (at pp.c:11442)
            Constant: type='int', value='3' (at pp.c:11442)
  FuncDef:  (at pp.c:11446)
    Decl: name='CC2420TransmitP__PacketTimeStamp__clear', quals=[], storage=['static', 'inline'] (at pp.c:11446)
      FuncDecl: quals=None (at pp.c:11446)
        ParamList:  (at pp.c:11446)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11446)
            PtrDecl: quals=[] (at pp.c:11446)
              TypeDecl: declname='msg', quals=[] (at pp.c:11446)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__clear', quals=[] (at pp.c:11446)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11446)
      FuncCall:  (at None)
        ID: name='CC2420PacketP__PacketTimeStamp32khz__clear' (at pp.c:11448)
        ExprList:  (at pp.c:11448)
          ID: name='msg' (at pp.c:11448)
  FuncDef:  (at pp.c:11453)
    Decl: name='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[], storage=['inline', 'static'] (at pp.c:11453)
      FuncDecl: quals=None (at pp.c:11453)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd_dropped', quals=[] (at pp.c:11453)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11455)
      If:  (at pp.c:11456)
        ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:11456)
        Compound:  (at pp.c:11456)
          UnaryOp: op='p--' (at pp.c:11457)
            ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:11457)
  FuncDef:  (at pp.c:11462)
    Decl: name='CC2420TransmitP__CC2420Receive__sfd_dropped', quals=[], storage=['static', 'inline'] (at pp.c:11462)
      FuncDecl: quals=None (at pp.c:11462)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CC2420Receive__sfd_dropped', quals=[] (at pp.c:11462)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11462)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CC2420Receive__sfd_dropped' (at pp.c:11464)
  FuncDef:  (at pp.c:11469)
    Decl: name='GpioCaptureC__0__Capture__captureRisingEdge', quals=[], storage=['inline', 'static'] (at pp.c:11469)
      FuncDecl: quals=None (at pp.c:11469)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Capture__captureRisingEdge', quals=[] (at pp.c:11469)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11471)
      Return:  (at pp.c:11472)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__enableCapture' (at pp.c:11472)
          ExprList:  (at pp.c:11472)
            ID: name='MSP430TIMER_CM_RISING' (at pp.c:11472)
  FuncDef:  (at pp.c:11476)
    Decl: name='CC2420TransmitP__CaptureSFD__captureRisingEdge', quals=[], storage=['static', 'inline'] (at pp.c:11476)
      FuncDecl: quals=None (at pp.c:11476)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CaptureSFD__captureRisingEdge', quals=[] (at pp.c:11476)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11476)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11478)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11478)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11482)
        ID: name='__nesc_result' (at pp.c:11482)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Capture__captureRisingEdge' (at pp.c:11482)
      Return:  (at pp.c:11486)
        ID: name='__nesc_result' (at pp.c:11486)
  FuncDef:  (at pp.c:11491)
    Decl: name='HplMsp430GeneralIOP__25__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:11491)
      FuncDecl: quals=None (at pp.c:11491)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__25__IO__getRaw', quals=[] (at pp.c:11491)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:11493)
      Return:  (at pp.c:11495)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:11495)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='28U' (at pp.c:11495)
          BinaryOp: op='<<' (at pp.c:11495)
            Constant: type='int', value='0x01' (at pp.c:11495)
            Constant: type='int', value='1' (at pp.c:11495)
  FuncDef:  (at pp.c:11499)
    Decl: name='HplMsp430GeneralIOP__25__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:11499)
      FuncDecl: quals=None (at pp.c:11499)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__25__IO__get', quals=[] (at pp.c:11499)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11501)
      Return:  (at pp.c:11503)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='HplMsp430GeneralIOP__25__IO__getRaw' (at pp.c:11503)
          Constant: type='int', value='0' (at pp.c:11503)
  FuncDef:  (at pp.c:11507)
    Decl: name='Msp430GpioC__10__HplGeneralIO__get', quals=[], storage=['static', 'inline'] (at pp.c:11507)
      FuncDecl: quals=None (at pp.c:11507)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__10__HplGeneralIO__get', quals=[] (at pp.c:11507)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11507)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11509)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11509)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11513)
        ID: name='__nesc_result' (at pp.c:11513)
        FuncCall:  (at None)
          ID: name='HplMsp430GeneralIOP__25__IO__get' (at pp.c:11513)
      Return:  (at pp.c:11517)
        ID: name='__nesc_result' (at pp.c:11517)
  FuncDef:  (at pp.c:11522)
    Decl: name='Msp430GpioC__10__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:11522)
      FuncDecl: quals=None (at pp.c:11522)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__10__GeneralIO__get', quals=[] (at pp.c:11522)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11524)
      Return:  (at pp.c:11526)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__10__HplGeneralIO__get' (at pp.c:11526)
  FuncDef:  (at pp.c:11530)
    Decl: name='CC2420TransmitP__SFD__get', quals=[], storage=['static', 'inline'] (at pp.c:11530)
      FuncDecl: quals=None (at pp.c:11530)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SFD__get', quals=[] (at pp.c:11530)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11530)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11532)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11532)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11536)
        ID: name='__nesc_result' (at pp.c:11536)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__10__GeneralIO__get' (at pp.c:11536)
      Return:  (at pp.c:11540)
        ID: name='__nesc_result' (at pp.c:11540)
  FuncDef:  (at pp.c:11545)
    Decl: name='CC2420ReceiveP__CC2420Receive__sfd', quals=[], storage=['inline', 'static'] (at pp.c:11545)
      FuncDecl: quals=None (at pp.c:11545)
        ParamList:  (at pp.c:11545)
          Decl: name='time', quals=[], storage=[] (at pp.c:11545)
            TypeDecl: declname='time', quals=[] (at pp.c:11545)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Receive__sfd', quals=[] (at pp.c:11545)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11547)
      If:  (at pp.c:11548)
        BinaryOp: op='<' (at pp.c:11548)
          ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:11548)
          ID: name='CC2420ReceiveP__TIMESTAMP_QUEUE_SIZE' (at pp.c:11548)
        Compound:  (at pp.c:11548)
          Decl: name='tail', quals=[], storage=[] (at pp.c:11549)
            TypeDecl: declname='tail', quals=[] (at pp.c:11549)
              IdentifierType: names=['uint8_t'] (at None)
            BinaryOp: op='%' (at pp.c:11549)
              BinaryOp: op='+' (at pp.c:11549)
                ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:11549)
                ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:11549)
              ID: name='CC2420ReceiveP__TIMESTAMP_QUEUE_SIZE' (at pp.c:11550)
          Assignment: op='=' (at pp.c:11553)
            ArrayRef:  (at pp.c:11553)
              ID: name='CC2420ReceiveP__m_timestamp_queue' (at pp.c:11553)
              ID: name='tail' (at pp.c:11553)
            ID: name='time' (at pp.c:11553)
          UnaryOp: op='p++' (at pp.c:11554)
            ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:11554)
  FuncDef:  (at pp.c:11559)
    Decl: name='CC2420TransmitP__CC2420Receive__sfd', quals=[], storage=['static', 'inline'] (at pp.c:11559)
      FuncDecl: quals=None (at pp.c:11559)
        ParamList:  (at pp.c:11559)
          Decl: name='time', quals=[], storage=[] (at pp.c:11559)
            TypeDecl: declname='time', quals=[] (at pp.c:11559)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__CC2420Receive__sfd', quals=[] (at pp.c:11559)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11559)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CC2420Receive__sfd' (at pp.c:11561)
        ExprList:  (at pp.c:11561)
          ID: name='time' (at pp.c:11561)
  FuncDef:  (at pp.c:11566)
    Decl: name='GpioCaptureC__0__Capture__captureFallingEdge', quals=[], storage=['inline', 'static'] (at pp.c:11566)
      FuncDecl: quals=None (at pp.c:11566)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Capture__captureFallingEdge', quals=[] (at pp.c:11566)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11568)
      Return:  (at pp.c:11569)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__enableCapture' (at pp.c:11569)
          ExprList:  (at pp.c:11569)
            ID: name='MSP430TIMER_CM_FALLING' (at pp.c:11569)
  FuncDef:  (at pp.c:11573)
    Decl: name='CC2420TransmitP__CaptureSFD__captureFallingEdge', quals=[], storage=['static', 'inline'] (at pp.c:11573)
      FuncDecl: quals=None (at pp.c:11573)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CaptureSFD__captureFallingEdge', quals=[] (at pp.c:11573)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11573)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11575)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11575)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11579)
        ID: name='__nesc_result' (at pp.c:11579)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Capture__captureFallingEdge' (at pp.c:11579)
      Return:  (at pp.c:11583)
        ID: name='__nesc_result' (at pp.c:11583)
  FuncDef:  (at pp.c:11588)
    Decl: name='TransformAlarmC__1__Counter__get', quals=[], storage=['static', 'inline'] (at pp.c:11588)
      FuncDecl: quals=None (at pp.c:11588)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Counter__get', quals=[] (at pp.c:11588)
          IdentifierType: names=['TransformAlarmC__1__Counter__size_type'] (at None)
    Compound:  (at pp.c:11588)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11590)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11590)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11594)
        ID: name='__nesc_result' (at pp.c:11594)
        FuncCall:  (at None)
          ID: name='TransformCounterC__1__Counter__get' (at pp.c:11594)
      Return:  (at pp.c:11598)
        ID: name='__nesc_result' (at pp.c:11598)
  FuncDef:  (at pp.c:11603)
    Decl: name='TransformAlarmC__1__Alarm__getNow', quals=[], storage=['inline', 'static'] (at pp.c:11603)
      FuncDecl: quals=None (at pp.c:11603)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Alarm__getNow', quals=[] (at pp.c:11603)
          IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
    Compound:  (at pp.c:11604)
      Return:  (at pp.c:11605)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__1__Counter__get' (at pp.c:11605)
  FuncDef:  (at pp.c:11609)
    Decl: name='TransformAlarmC__1__Alarm__start', quals=[], storage=['inline', 'static'] (at pp.c:11609)
      FuncDecl: quals=None (at pp.c:11609)
        ParamList:  (at pp.c:11609)
          Decl: name='dt', quals=[], storage=[] (at pp.c:11609)
            TypeDecl: declname='dt', quals=[] (at pp.c:11609)
              IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Alarm__start', quals=[] (at pp.c:11609)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11610)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__Alarm__startAt' (at pp.c:11611)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='TransformAlarmC__1__Alarm__getNow' (at pp.c:11611)
          ID: name='dt' (at pp.c:11611)
  FuncDef:  (at pp.c:11615)
    Decl: name='CC2420TransmitP__BackoffTimer__start', quals=[], storage=['static', 'inline'] (at pp.c:11615)
      FuncDecl: quals=None (at pp.c:11615)
        ParamList:  (at pp.c:11615)
          Decl: name='dt', quals=[], storage=[] (at pp.c:11615)
            TypeDecl: declname='dt', quals=[] (at pp.c:11615)
              IdentifierType: names=['CC2420TransmitP__BackoffTimer__size_type'] (at None)
        TypeDecl: declname='CC2420TransmitP__BackoffTimer__start', quals=[] (at pp.c:11615)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11615)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__Alarm__start' (at pp.c:11617)
        ExprList:  (at pp.c:11617)
          ID: name='dt' (at pp.c:11617)
  FuncDef:  (at pp.c:11622)
    Decl: name='CC2420PacketP__CC2420PacketBody__getHeader', quals=[], storage=['inline', 'static'] (at pp.c:11622)
      FuncDecl: quals=None (at pp.c:11622)
        ParamList:  (at pp.c:11622)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11622)
            PtrDecl: quals=[] (at pp.c:11622)
              TypeDecl: declname='msg', quals=[] (at pp.c:11622)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:11622)
          TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getHeader', quals=[] (at pp.c:11622)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:11624)
      Return:  (at pp.c:11625)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:11625)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['cc2420_header_t'] (at None)
          BinaryOp: op='-' (at None)
            BinaryOp: op='+' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  PtrDecl: quals=[] (at pp.c:11625)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint8_t'] (at None)
                ID: name='msg' (at pp.c:11625)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['size_t'] (at None)
                UnaryOp: op='&' (at None)
                  StructRef: type='->' (at None)
                    Cast:  (at None)
                      Typename: quals=[] (at None)
                        PtrDecl: quals=[] (at pp.c:11625)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['message_t'] (at None)
                      Constant: type='int', value='0' (at pp.c:11625)
                    ID: name='data' (at pp.c:11625)
            UnaryOp: op='sizeof' (at pp.c:11625)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['cc2420_header_t'] (at None)
  FuncDef:  (at pp.c:11629)
    Decl: name='CC2420TransmitP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:11629)
      FuncDecl: quals=None (at pp.c:11629)
        ParamList:  (at pp.c:11629)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11629)
            PtrDecl: quals=[] (at pp.c:11629)
              TypeDecl: declname='msg', quals=[] (at pp.c:11629)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:11629)
          TypeDecl: declname='CC2420TransmitP__CC2420PacketBody__getHeader', quals=[] (at pp.c:11629)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:11629)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11631)
        PtrDecl: quals=[] (at pp.c:11631)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11631)
            Struct: name='cc2420_header_t', packed=False (at pp.c:11631)
      Assignment: op='=' (at pp.c:11635)
        ID: name='__nesc_result' (at pp.c:11635)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:11635)
          ExprList:  (at pp.c:11635)
            ID: name='msg' (at pp.c:11635)
      Return:  (at pp.c:11639)
        ID: name='__nesc_result' (at pp.c:11639)
  FuncDef:  (at pp.c:11644)
    Decl: name='Msp430TimerCapComP__5__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:11644)
      FuncDecl: quals=None (at pp.c:11644)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Control__disableEvents', quals=[] (at pp.c:11644)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11645)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:11646)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='390U' (at pp.c:11646)
        UnaryOp: op='~' (at pp.c:11646)
          Constant: type='int', value='0x0010' (at pp.c:11646)
  FuncDef:  (at pp.c:11650)
    Decl: name='Msp430AlarmC__1__Msp430TimerControl__disableEvents', quals=[], storage=['static', 'inline'] (at pp.c:11650)
      FuncDecl: quals=None (at pp.c:11650)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__disableEvents', quals=[] (at pp.c:11650)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11650)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Control__disableEvents' (at pp.c:11652)
  FuncDef:  (at pp.c:11657)
    Decl: name='Msp430AlarmC__1__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:11657)
      FuncDecl: quals=None (at pp.c:11657)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Alarm__stop', quals=[] (at pp.c:11657)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11658)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430TimerControl__disableEvents' (at pp.c:11659)
  FuncDef:  (at pp.c:11663)
    Decl: name='TransformAlarmC__1__AlarmFrom__stop', quals=[], storage=['static', 'inline'] (at pp.c:11663)
      FuncDecl: quals=None (at pp.c:11663)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__AlarmFrom__stop', quals=[] (at pp.c:11663)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11663)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Alarm__stop' (at pp.c:11665)
  FuncDef:  (at pp.c:11670)
    Decl: name='TransformAlarmC__1__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:11670)
      FuncDecl: quals=None (at pp.c:11670)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Alarm__stop', quals=[] (at pp.c:11670)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11671)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__AlarmFrom__stop' (at pp.c:11672)
  FuncDef:  (at pp.c:11676)
    Decl: name='CC2420TransmitP__BackoffTimer__stop', quals=[], storage=['static', 'inline'] (at pp.c:11676)
      FuncDecl: quals=None (at pp.c:11676)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__BackoffTimer__stop', quals=[] (at pp.c:11676)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11676)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__Alarm__stop' (at pp.c:11678)
  FuncDef:  (at pp.c:11683)
    Decl: name='CC2420TransmitP__SpiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:11683)
      FuncDecl: quals=None (at pp.c:11683)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SpiResource__release', quals=[] (at pp.c:11683)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11683)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11685)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11685)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11689)
        ID: name='__nesc_result' (at pp.c:11689)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__release' (at pp.c:11689)
          ExprList:  (at pp.c:11689)
            ID: name='CC2420SpiC__3__CLIENT_ID' (at pp.c:11689)
      Return:  (at pp.c:11693)
        ID: name='__nesc_result' (at pp.c:11693)
  FuncDef:  (at pp.c:11698)
    Decl: name='CC2420TransmitP__releaseSpiResource', quals=[], storage=['inline', 'static'] (at pp.c:11698)
      FuncDecl: quals=None (at pp.c:11698)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__releaseSpiResource', quals=[] (at pp.c:11698)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:11700)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__SpiResource__release' (at pp.c:11701)
      Return:  (at pp.c:11702)
        ID: name='SUCCESS' (at pp.c:11702)
  FuncDef:  (at pp.c:11706)
    Decl: name='Msp430GpioC__6__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:11706)
      FuncDecl: quals=None (at pp.c:11706)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__6__HplGeneralIO__set', quals=[] (at pp.c:11706)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11706)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__26__IO__set' (at pp.c:11708)
  FuncDef:  (at pp.c:11713)
    Decl: name='Msp430GpioC__6__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:11713)
      FuncDecl: quals=None (at pp.c:11713)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__6__GeneralIO__set', quals=[] (at pp.c:11713)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11715)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__HplGeneralIO__set' (at pp.c:11717)
  FuncDef:  (at pp.c:11721)
    Decl: name='CC2420TransmitP__CSN__set', quals=[], storage=['static', 'inline'] (at pp.c:11721)
      FuncDecl: quals=None (at pp.c:11721)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CSN__set', quals=[] (at pp.c:11721)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11721)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__GeneralIO__set' (at pp.c:11723)
  FuncDef:  (at pp.c:11728)
    Decl: name='CC2420TransmitP__TXFIFO_RAM__write', quals=[], storage=['static', 'inline'] (at pp.c:11728)
      FuncDecl: quals=None (at pp.c:11728)
        ParamList:  (at pp.c:11728)
          Decl: name='offset', quals=[], storage=[] (at pp.c:11728)
            TypeDecl: declname='offset', quals=[] (at pp.c:11728)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:11728)
            PtrDecl: quals=[] (at pp.c:11728)
              TypeDecl: declname='data', quals=[] (at pp.c:11728)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:11728)
            TypeDecl: declname='length', quals=[] (at pp.c:11728)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__TXFIFO_RAM__write', quals=[] (at pp.c:11728)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:11728)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11730)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11730)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11734)
        ID: name='__nesc_result' (at pp.c:11734)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Ram__write' (at pp.c:11734)
          ExprList:  (at pp.c:11734)
            ID: name='CC2420_RAM_TXFIFO' (at pp.c:11734)
            ID: name='offset' (at pp.c:11734)
            ID: name='data' (at pp.c:11734)
            ID: name='length' (at pp.c:11734)
      Return:  (at pp.c:11738)
        ID: name='__nesc_result' (at pp.c:11738)
  FuncDef:  (at pp.c:11743)
    Decl: name='Msp430GpioC__6__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:11743)
      FuncDecl: quals=None (at pp.c:11743)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__6__HplGeneralIO__clr', quals=[] (at pp.c:11743)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11743)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__26__IO__clr' (at pp.c:11745)
  FuncDef:  (at pp.c:11750)
    Decl: name='Msp430GpioC__6__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:11750)
      FuncDecl: quals=None (at pp.c:11750)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__6__GeneralIO__clr', quals=[] (at pp.c:11750)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11752)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__HplGeneralIO__clr' (at pp.c:11754)
  FuncDef:  (at pp.c:11758)
    Decl: name='CC2420TransmitP__CSN__clr', quals=[], storage=['static', 'inline'] (at pp.c:11758)
      FuncDecl: quals=None (at pp.c:11758)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CSN__clr', quals=[] (at pp.c:11758)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11758)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__GeneralIO__clr' (at pp.c:11760)
  FuncDef:  (at pp.c:11765)
    Decl: name='__nesc_ntoh_leuint8', quals=[], storage=['__inline', 'static'] (at pp.c:11765)
      FuncDecl: quals=None (at pp.c:11765)
        ParamList:  (at pp.c:11765)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:11765)
            PtrDecl: quals=[] (at pp.c:11765)
              TypeDecl: declname='source', quals=['const'] (at pp.c:11765)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_leuint8', quals=[] (at pp.c:11765)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:11767)
      Decl: name='base', quals=['const'], storage=[] (at pp.c:11768)
        PtrDecl: quals=[] (at pp.c:11768)
          TypeDecl: declname='base', quals=['const'] (at pp.c:11768)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='source' (at pp.c:11768)
      Return:  (at pp.c:11771)
        ArrayRef:  (at pp.c:11771)
          ID: name='base' (at pp.c:11771)
          Constant: type='int', value='0' (at pp.c:11771)
  FuncDef:  (at pp.c:11775)
    Decl: name='CC2420PacketP__PacketTimeSyncOffset__get', quals=[], storage=['inline', 'static'] (at pp.c:11775)
      FuncDecl: quals=None (at pp.c:11775)
        ParamList:  (at pp.c:11775)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11775)
            PtrDecl: quals=[] (at pp.c:11775)
              TypeDecl: declname='msg', quals=[] (at pp.c:11775)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__get', quals=[] (at pp.c:11775)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:11776)
      Return:  (at pp.c:11777)
        BinaryOp: op='-' (at None)
          BinaryOp: op='-' (at None)
            BinaryOp: op='+' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint8' (at pp.c:11777)
                ExprList:  (at None)
                  StructRef: type='.' (at None)
                    StructRef: type='->' (at None)
                      FuncCall:  (at None)
                        ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:11777)
                        ExprList:  (at pp.c:11777)
                          ID: name='msg' (at pp.c:11777)
                      ID: name='length' (at pp.c:11777)
                    ID: name='nxdata' (at pp.c:11777)
              BinaryOp: op='-' (at pp.c:11778)
                UnaryOp: op='sizeof' (at pp.c:11778)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['cc2420_header_t'] (at None)
                ID: name='MAC_HEADER_SIZE' (at pp.c:11778)
            ID: name='MAC_FOOTER_SIZE' (at pp.c:11779)
          UnaryOp: op='sizeof' (at pp.c:11780)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['timesync_radio_t'] (at None)
  FuncDef:  (at pp.c:11784)
    Decl: name='CC2420TransmitP__PacketTimeSyncOffset__get', quals=[], storage=['static', 'inline'] (at pp.c:11784)
      FuncDecl: quals=None (at pp.c:11784)
        ParamList:  (at pp.c:11784)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11784)
            PtrDecl: quals=[] (at pp.c:11784)
              TypeDecl: declname='msg', quals=[] (at pp.c:11784)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__PacketTimeSyncOffset__get', quals=[] (at pp.c:11784)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:11784)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11786)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11786)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11790)
        ID: name='__nesc_result' (at pp.c:11790)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__PacketTimeSyncOffset__get' (at pp.c:11790)
          ExprList:  (at pp.c:11790)
            ID: name='msg' (at pp.c:11790)
      Return:  (at pp.c:11794)
        ID: name='__nesc_result' (at pp.c:11794)
  FuncDef:  (at pp.c:11799)
    Decl: name='__nesc_ntoh_uint8', quals=[], storage=['__inline', 'static'] (at pp.c:11799)
      FuncDecl: quals=None (at pp.c:11799)
        ParamList:  (at pp.c:11799)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:11799)
            PtrDecl: quals=[] (at pp.c:11799)
              TypeDecl: declname='source', quals=['const'] (at pp.c:11799)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_uint8', quals=[] (at pp.c:11799)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:11801)
      Decl: name='base', quals=['const'], storage=[] (at pp.c:11802)
        PtrDecl: quals=[] (at pp.c:11802)
          TypeDecl: declname='base', quals=['const'] (at pp.c:11802)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='source' (at pp.c:11802)
      Return:  (at pp.c:11805)
        ArrayRef:  (at pp.c:11805)
          ID: name='base' (at pp.c:11805)
          Constant: type='int', value='0' (at pp.c:11805)
  FuncDef:  (at pp.c:11809)
    Decl: name='__nesc_ntoh_int8', quals=[], storage=['__inline', 'static'] (at pp.c:11809)
      FuncDecl: quals=None (at pp.c:11809)
        ParamList:  (at pp.c:11809)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:11809)
            PtrDecl: quals=[] (at pp.c:11809)
              TypeDecl: declname='source', quals=['const'] (at pp.c:11809)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_int8', quals=[] (at pp.c:11809)
          IdentifierType: names=['int8_t'] (at None)
    Compound:  (at pp.c:11811)
      Return:  (at pp.c:11813)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_uint8' (at pp.c:11813)
          ExprList:  (at pp.c:11813)
            ID: name='source' (at pp.c:11813)
  FuncDef:  (at pp.c:11817)
    Decl: name='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[], storage=['inline', 'static'] (at pp.c:11817)
      FuncDecl: quals=None (at pp.c:11817)
        ParamList:  (at pp.c:11817)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11817)
            PtrDecl: quals=[] (at pp.c:11817)
              TypeDecl: declname='msg', quals=[] (at pp.c:11817)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:11817)
          TypeDecl: declname='CC2420PacketP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:11817)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:11819)
      Return:  (at pp.c:11820)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:11820)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['cc2420_metadata_t'] (at None)
          StructRef: type='->' (at pp.c:11820)
            ID: name='msg' (at pp.c:11820)
            ID: name='metadata' (at pp.c:11820)
  FuncDef:  (at pp.c:11824)
    Decl: name='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[], storage=['inline', 'static'] (at pp.c:11824)
      FuncDecl: quals=None (at pp.c:11824)
        ParamList:  (at pp.c:11824)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11824)
            PtrDecl: quals=[] (at pp.c:11824)
              TypeDecl: declname='msg', quals=[] (at pp.c:11824)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__PacketTimeSyncOffset__isSet', quals=[] (at pp.c:11824)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11825)
      Return:  (at pp.c:11826)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_int8' (at pp.c:11826)
          ExprList:  (at None)
            StructRef: type='.' (at None)
              StructRef: type='->' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:11826)
                  ExprList:  (at pp.c:11826)
                    ID: name='msg' (at pp.c:11826)
                ID: name='timesync' (at pp.c:11826)
              ID: name='nxdata' (at pp.c:11826)
  FuncDef:  (at pp.c:11830)
    Decl: name='CC2420TransmitP__PacketTimeSyncOffset__isSet', quals=[], storage=['static', 'inline'] (at pp.c:11830)
      FuncDecl: quals=None (at pp.c:11830)
        ParamList:  (at pp.c:11830)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11830)
            PtrDecl: quals=[] (at pp.c:11830)
              TypeDecl: declname='msg', quals=[] (at pp.c:11830)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__PacketTimeSyncOffset__isSet', quals=[] (at pp.c:11830)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:11830)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11832)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11832)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11836)
        ID: name='__nesc_result' (at pp.c:11836)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__PacketTimeSyncOffset__isSet' (at pp.c:11836)
          ExprList:  (at pp.c:11836)
            ID: name='msg' (at pp.c:11836)
      Return:  (at pp.c:11840)
        ID: name='__nesc_result' (at pp.c:11840)
  FuncDef:  (at pp.c:11845)
    Decl: name='CC2420PacketP__PacketTimeStamp32khz__set', quals=[], storage=['inline', 'static'] (at pp.c:11845)
      FuncDecl: quals=None (at pp.c:11845)
        ParamList:  (at pp.c:11845)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11845)
            PtrDecl: quals=[] (at pp.c:11845)
              TypeDecl: declname='msg', quals=[] (at pp.c:11845)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:11845)
            TypeDecl: declname='value', quals=[] (at pp.c:11845)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__set', quals=[] (at pp.c:11845)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11846)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint32' (at pp.c:11847)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:11847)
                ExprList:  (at pp.c:11847)
                  ID: name='msg' (at pp.c:11847)
              ID: name='timestamp' (at pp.c:11847)
            ID: name='nxdata' (at pp.c:11847)
          ID: name='value' (at pp.c:11847)
  FuncDef:  (at pp.c:11851)
    Decl: name='CC2420TransmitP__PacketTimeStamp__set', quals=[], storage=['static', 'inline'] (at pp.c:11851)
      FuncDecl: quals=None (at pp.c:11851)
        ParamList:  (at pp.c:11851)
          Decl: name='msg', quals=[], storage=[] (at pp.c:11851)
            PtrDecl: quals=[] (at pp.c:11851)
              TypeDecl: declname='msg', quals=[] (at pp.c:11851)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:11851)
            TypeDecl: declname='value', quals=[] (at pp.c:11851)
              IdentifierType: names=['CC2420TransmitP__PacketTimeStamp__size_type'] (at None)
        TypeDecl: declname='CC2420TransmitP__PacketTimeStamp__set', quals=[] (at pp.c:11851)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11851)
      FuncCall:  (at None)
        ID: name='CC2420PacketP__PacketTimeStamp32khz__set' (at pp.c:11853)
        ExprList:  (at pp.c:11853)
          ID: name='msg' (at pp.c:11853)
          ID: name='value' (at pp.c:11853)
  FuncDef:  (at pp.c:11858)
    Decl: name='CC2420TransmitP__BackoffTimer__getNow', quals=[], storage=['static', 'inline'] (at pp.c:11858)
      FuncDecl: quals=None (at pp.c:11858)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__BackoffTimer__getNow', quals=[] (at pp.c:11858)
          IdentifierType: names=['CC2420TransmitP__BackoffTimer__size_type'] (at None)
    Compound:  (at pp.c:11858)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:11860)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:11860)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:11864)
        ID: name='__nesc_result' (at pp.c:11864)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__1__Alarm__getNow' (at pp.c:11864)
      Return:  (at pp.c:11868)
        ID: name='__nesc_result' (at pp.c:11868)
  FuncDef:  (at pp.c:11873)
    Decl: name='CC2420TransmitP__getTime32', quals=[], storage=['__inline', 'static'] (at pp.c:11873)
      FuncDecl: quals=None (at pp.c:11873)
        ParamList:  (at pp.c:11873)
          Decl: name='captured_time', quals=[], storage=[] (at pp.c:11873)
            TypeDecl: declname='captured_time', quals=[] (at pp.c:11873)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__getTime32', quals=[] (at pp.c:11873)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:11874)
      Decl: name='now', quals=[], storage=[] (at pp.c:11875)
        TypeDecl: declname='now', quals=[] (at pp.c:11875)
          IdentifierType: names=['uint32_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__BackoffTimer__getNow' (at pp.c:11875)
      Return:  (at pp.c:11878)
        BinaryOp: op='-' (at pp.c:11878)
          ID: name='now' (at pp.c:11878)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint16_t'] (at None)
            BinaryOp: op='-' (at pp.c:11878)
              ID: name='now' (at pp.c:11878)
              ID: name='captured_time' (at pp.c:11878)
  FuncDef:  (at pp.c:11882)
    Decl: name='CC2420TransmitP__CaptureSFD__captured', quals=[], storage=['inline', 'static'] (at pp.c:11882)
      FuncDecl: quals=None (at pp.c:11882)
        ParamList:  (at pp.c:11882)
          Decl: name='time', quals=[], storage=[] (at pp.c:11882)
            TypeDecl: declname='time', quals=[] (at pp.c:11882)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__CaptureSFD__captured', quals=[] (at pp.c:11882)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11884)
      Decl: name='__nesc_temp45', quals=[], storage=[] (at pp.c:11885)
        PtrDecl: quals=[] (at pp.c:11885)
          TypeDecl: declname='__nesc_temp45', quals=[] (at pp.c:11885)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='__nesc_temp44', quals=[], storage=[] (at pp.c:11886)
        PtrDecl: quals=[] (at pp.c:11886)
          TypeDecl: declname='__nesc_temp44', quals=[] (at pp.c:11886)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='time32', quals=[], storage=[] (at pp.c:11888)
        TypeDecl: declname='time32', quals=[] (at pp.c:11888)
          IdentifierType: names=['uint32_t'] (at None)
      Decl: name='sfd_state', quals=[], storage=[] (at pp.c:11889)
        TypeDecl: declname='sfd_state', quals=[] (at pp.c:11889)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:11889)
      Compound:  (at pp.c:11893)
        Assignment: op='=' (at pp.c:11894)
          ID: name='time32' (at pp.c:11894)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__getTime32' (at pp.c:11894)
            ExprList:  (at pp.c:11894)
              ID: name='time' (at pp.c:11894)
        Switch:  (at pp.c:11895)
          ID: name='CC2420TransmitP__m_state' (at pp.c:11895)
          Compound:  (at pp.c:11895)
            Case:  (at pp.c:11897)
              ID: name='CC2420TransmitP__S_SFD' (at pp.c:11897)
              Assignment: op='=' (at pp.c:11898)
                ID: name='CC2420TransmitP__m_state' (at pp.c:11898)
                ID: name='CC2420TransmitP__S_EFD' (at pp.c:11898)
            Assignment: op='=' (at pp.c:11899)
              ID: name='CC2420TransmitP__sfdHigh' (at pp.c:11899)
              ID: name='TRUE' (at pp.c:11899)
            Assignment: op='=' (at pp.c:11902)
              ID: name='CC2420TransmitP__m_receiving' (at pp.c:11902)
              ID: name='FALSE' (at pp.c:11902)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CaptureSFD__captureFallingEdge' (at pp.c:11903)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__PacketTimeStamp__set' (at pp.c:11904)
              ExprList:  (at pp.c:11904)
                ID: name='CC2420TransmitP__m_msg' (at pp.c:11904)
                ID: name='time32' (at pp.c:11904)
            If:  (at pp.c:11905)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__PacketTimeSyncOffset__isSet' (at pp.c:11905)
                ExprList:  (at pp.c:11905)
                  ID: name='CC2420TransmitP__m_msg' (at pp.c:11905)
              Compound:  (at pp.c:11905)
                Decl: name='absOffset', quals=[], storage=[] (at pp.c:11906)
                  TypeDecl: declname='absOffset', quals=[] (at pp.c:11906)
                    IdentifierType: names=['uint8_t'] (at None)
                  BinaryOp: op='+' (at pp.c:11906)
                    BinaryOp: op='-' (at pp.c:11906)
                      UnaryOp: op='sizeof' (at pp.c:11906)
                        Typename: quals=[] (at None)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['message_header_t'] (at None)
                      UnaryOp: op='sizeof' (at pp.c:11906)
                        Typename: quals=[] (at None)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['cc2420_header_t'] (at None)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__PacketTimeSyncOffset__get' (at pp.c:11906)
                      ExprList:  (at pp.c:11906)
                        ID: name='CC2420TransmitP__m_msg' (at pp.c:11906)
                Decl: name='timesync', quals=[], storage=[] (at pp.c:11907)
                  PtrDecl: quals=[] (at pp.c:11907)
                    TypeDecl: declname='timesync', quals=[] (at pp.c:11907)
                      IdentifierType: names=['timesync_radio_t'] (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:11907)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['timesync_radio_t'] (at None)
                    BinaryOp: op='+' (at None)
                      Cast:  (at None)
                        Typename: quals=[] (at None)
                          PtrDecl: quals=[] (at pp.c:11907)
                            TypeDecl: declname=None, quals=[] (at None)
                              IdentifierType: names=['nx_uint8_t'] (at None)
                        ID: name='CC2420TransmitP__m_msg' (at pp.c:11907)
                      ID: name='absOffset' (at pp.c:11907)
                ExprList:  (at pp.c:11909)
                  Assignment: op='=' (at pp.c:11909)
                    ID: name='__nesc_temp44' (at pp.c:11909)
                    StructRef: type='.' (at pp.c:11909)
                      UnaryOp: op='*' (at pp.c:11909)
                        ID: name='timesync' (at pp.c:11909)
                      ID: name='nxdata' (at pp.c:11909)
                  FuncCall:  (at None)
                    ID: name='__nesc_hton_uint32' (at pp.c:11909)
                    ExprList:  (at pp.c:11909)
                      ID: name='__nesc_temp44' (at pp.c:11909)
                      BinaryOp: op='-' (at None)
                        FuncCall:  (at None)
                          ID: name='__nesc_ntoh_uint32' (at pp.c:11909)
                          ExprList:  (at pp.c:11909)
                            ID: name='__nesc_temp44' (at pp.c:11909)
                        ID: name='time32' (at pp.c:11909)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CSN__clr' (at pp.c:11910)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__TXFIFO_RAM__write' (at pp.c:11911)
                  ExprList:  (at pp.c:11911)
                    ID: name='absOffset' (at pp.c:11911)
                    Cast:  (at None)
                      Typename: quals=[] (at None)
                        PtrDecl: quals=[] (at pp.c:11911)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['uint8_t'] (at None)
                      ID: name='timesync' (at pp.c:11911)
                    UnaryOp: op='sizeof' (at pp.c:11911)
                      Typename: quals=[] (at None)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['timesync_radio_t'] (at None)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CSN__set' (at pp.c:11912)
                ExprList:  (at pp.c:11914)
                  Assignment: op='=' (at pp.c:11914)
                    ID: name='__nesc_temp45' (at pp.c:11914)
                    StructRef: type='.' (at pp.c:11914)
                      UnaryOp: op='*' (at pp.c:11914)
                        ID: name='timesync' (at pp.c:11914)
                      ID: name='nxdata' (at pp.c:11914)
                  FuncCall:  (at None)
                    ID: name='__nesc_hton_uint32' (at pp.c:11914)
                    ExprList:  (at pp.c:11914)
                      ID: name='__nesc_temp45' (at pp.c:11914)
                      BinaryOp: op='+' (at None)
                        FuncCall:  (at None)
                          ID: name='__nesc_ntoh_uint32' (at pp.c:11914)
                          ExprList:  (at pp.c:11914)
                            ID: name='__nesc_temp45' (at pp.c:11914)
                        ID: name='time32' (at pp.c:11914)
            If:  (at pp.c:11917)
              BinaryOp: op='&' (at None)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint16' (at pp.c:11917)
                  ExprList:  (at None)
                    StructRef: type='.' (at None)
                      StructRef: type='->' (at None)
                        FuncCall:  (at None)
                          ID: name='CC2420TransmitP__CC2420PacketBody__getHeader' (at pp.c:11917)
                          ExprList:  (at pp.c:11917)
                            ID: name='CC2420TransmitP__m_msg' (at pp.c:11917)
                        ID: name='fcf' (at pp.c:11917)
                      ID: name='nxdata' (at pp.c:11917)
                BinaryOp: op='<<' (at pp.c:11917)
                  Constant: type='int', value='1' (at pp.c:11917)
                  ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:11917)
              Compound:  (at pp.c:11917)
                Assignment: op='=' (at pp.c:11919)
                  ID: name='CC2420TransmitP__abortSpiRelease' (at pp.c:11919)
                  ID: name='TRUE' (at pp.c:11919)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:11921)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__BackoffTimer__stop' (at pp.c:11922)
            If:  (at pp.c:11924)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__SFD__get' (at pp.c:11924)
              Compound:  (at pp.c:11924)
                Break:  (at pp.c:11925)
            Case:  (at pp.c:11929)
              ID: name='CC2420TransmitP__S_EFD' (at pp.c:11929)
              Assignment: op='=' (at pp.c:11930)
                ID: name='CC2420TransmitP__sfdHigh' (at pp.c:11930)
                ID: name='FALSE' (at pp.c:11930)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CaptureSFD__captureRisingEdge' (at pp.c:11931)
            If:  (at pp.c:11933)
              BinaryOp: op='&' (at None)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint16' (at pp.c:11933)
                  ExprList:  (at None)
                    StructRef: type='.' (at None)
                      StructRef: type='->' (at None)
                        FuncCall:  (at None)
                          ID: name='CC2420TransmitP__CC2420PacketBody__getHeader' (at pp.c:11933)
                          ExprList:  (at pp.c:11933)
                            ID: name='CC2420TransmitP__m_msg' (at pp.c:11933)
                        ID: name='fcf' (at pp.c:11933)
                      ID: name='nxdata' (at pp.c:11933)
                BinaryOp: op='<<' (at pp.c:11933)
                  Constant: type='int', value='1' (at pp.c:11933)
                  ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:11933)
              Compound:  (at pp.c:11933)
                Assignment: op='=' (at pp.c:11934)
                  ID: name='CC2420TransmitP__m_state' (at pp.c:11934)
                  ID: name='CC2420TransmitP__S_ACK_WAIT' (at pp.c:11934)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:11935)
                  ExprList:  (at pp.c:11935)
                    ID: name='CC2420_ACK_WAIT_DELAY' (at pp.c:11935)
              Compound:  (at pp.c:11939)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__signalDone' (at pp.c:11940)
                  ExprList:  (at pp.c:11940)
                    ID: name='SUCCESS' (at pp.c:11940)
            If:  (at pp.c:11943)
              UnaryOp: op='!' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__SFD__get' (at pp.c:11943)
              Compound:  (at pp.c:11943)
                Break:  (at pp.c:11944)
            Default:  (at pp.c:11948)
              If:  (at pp.c:11950)
                BinaryOp: op='&&' (at pp.c:11950)
                  UnaryOp: op='!' (at pp.c:11950)
                    ID: name='CC2420TransmitP__m_receiving' (at pp.c:11950)
                  BinaryOp: op='==' (at pp.c:11950)
                    ID: name='CC2420TransmitP__sfdHigh' (at pp.c:11950)
                    ID: name='FALSE' (at pp.c:11950)
                Compound:  (at pp.c:11950)
                  Assignment: op='=' (at pp.c:11951)
                    ID: name='CC2420TransmitP__sfdHigh' (at pp.c:11951)
                    ID: name='TRUE' (at pp.c:11951)
                  FuncCall:  (at None)
                    ID: name='CC2420TransmitP__CaptureSFD__captureFallingEdge' (at pp.c:11952)
                  Assignment: op='=' (at pp.c:11954)
                    ID: name='sfd_state' (at pp.c:11954)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__SFD__get' (at pp.c:11954)
                  FuncCall:  (at None)
                    ID: name='CC2420TransmitP__CC2420Receive__sfd' (at pp.c:11955)
                    ExprList:  (at pp.c:11955)
                      ID: name='time32' (at pp.c:11955)
                  Assignment: op='=' (at pp.c:11956)
                    ID: name='CC2420TransmitP__m_receiving' (at pp.c:11956)
                    ID: name='TRUE' (at pp.c:11956)
                  Assignment: op='=' (at pp.c:11957)
                    ID: name='CC2420TransmitP__m_prev_time' (at pp.c:11957)
                    ID: name='time' (at pp.c:11957)
                  If:  (at pp.c:11958)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__SFD__get' (at pp.c:11958)
                    Compound:  (at pp.c:11958)
                      Return:  (at pp.c:11960)
            If:  (at pp.c:11966)
              BinaryOp: op='==' (at pp.c:11966)
                ID: name='CC2420TransmitP__sfdHigh' (at pp.c:11966)
                ID: name='TRUE' (at pp.c:11966)
              Compound:  (at pp.c:11966)
                Assignment: op='=' (at pp.c:11967)
                  ID: name='CC2420TransmitP__sfdHigh' (at pp.c:11967)
                  ID: name='FALSE' (at pp.c:11967)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CaptureSFD__captureRisingEdge' (at pp.c:11968)
                Assignment: op='=' (at pp.c:11969)
                  ID: name='CC2420TransmitP__m_receiving' (at pp.c:11969)
                  ID: name='FALSE' (at pp.c:11969)
                If:  (at pp.c:11978)
                  BinaryOp: op='&&' (at pp.c:11978)
                    BinaryOp: op='==' (at pp.c:11978)
                      ID: name='sfd_state' (at pp.c:11978)
                      Constant: type='int', value='0' (at pp.c:11978)
                    BinaryOp: op='<' (at pp.c:11978)
                      BinaryOp: op='-' (at pp.c:11978)
                        ID: name='time' (at pp.c:11978)
                        ID: name='CC2420TransmitP__m_prev_time' (at pp.c:11978)
                      Constant: type='int', value='10' (at pp.c:11978)
                  Compound:  (at pp.c:11978)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__CC2420Receive__sfd_dropped' (at pp.c:11979)
                    If:  (at pp.c:11980)
                      ID: name='CC2420TransmitP__m_msg' (at pp.c:11980)
                      Compound:  (at pp.c:11980)
                        FuncCall:  (at None)
                          ID: name='CC2420TransmitP__PacketTimeStamp__clear' (at pp.c:11981)
                          ExprList:  (at pp.c:11981)
                            ID: name='CC2420TransmitP__m_msg' (at pp.c:11981)
                Break:  (at pp.c:11985)
  FuncDef:  (at pp.c:11992)
    Decl: name='GpioCaptureC__0__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:11992)
      FuncDecl: quals=None (at pp.c:11992)
        ParamList:  (at pp.c:11992)
          Decl: name='time', quals=[], storage=[] (at pp.c:11992)
            TypeDecl: declname='time', quals=[] (at pp.c:11992)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Capture__captured', quals=[] (at pp.c:11992)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:11992)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CaptureSFD__captured' (at pp.c:11994)
        ExprList:  (at pp.c:11994)
          ID: name='time' (at pp.c:11994)
  FuncDef:  (at pp.c:11999)
    Decl: name='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[], storage=['inline', 'static'] (at pp.c:11999)
      FuncDecl: quals=None (at pp.c:11999)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Capture__clearOverflow', quals=[] (at pp.c:11999)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12000)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12001)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='388U' (at pp.c:12001)
        UnaryOp: op='~' (at pp.c:12001)
          Constant: type='int', value='0x0002' (at pp.c:12001)
  FuncDef:  (at pp.c:12005)
    Decl: name='GpioCaptureC__0__Msp430Capture__clearOverflow', quals=[], storage=['static', 'inline'] (at pp.c:12005)
      FuncDecl: quals=None (at pp.c:12005)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430Capture__clearOverflow', quals=[] (at pp.c:12005)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12005)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Capture__clearOverflow' (at pp.c:12007)
  FuncDef:  (at pp.c:12012)
    Decl: name='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:12012)
      FuncDecl: quals=None (at pp.c:12012)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Control__clearPendingInterrupt', quals=[] (at pp.c:12012)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12013)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12014)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='388U' (at pp.c:12014)
        UnaryOp: op='~' (at pp.c:12014)
          Constant: type='int', value='0x0001' (at pp.c:12014)
  FuncDef:  (at pp.c:12018)
    Decl: name='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static', 'inline'] (at pp.c:12018)
      FuncDecl: quals=None (at pp.c:12018)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:12018)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12018)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Control__clearPendingInterrupt' (at pp.c:12020)
  FuncDef:  (at pp.c:12025)
    Decl: name='GpioCaptureC__0__Msp430Capture__captured', quals=[], storage=['inline', 'static'] (at pp.c:12025)
      FuncDecl: quals=None (at pp.c:12025)
        ParamList:  (at pp.c:12025)
          Decl: name='time', quals=[], storage=[] (at pp.c:12025)
            TypeDecl: declname='time', quals=[] (at pp.c:12025)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430Capture__captured', quals=[] (at pp.c:12025)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12027)
      FuncCall:  (at None)
        ID: name='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt' (at pp.c:12028)
      FuncCall:  (at None)
        ID: name='GpioCaptureC__0__Msp430Capture__clearOverflow' (at pp.c:12029)
      FuncCall:  (at None)
        ID: name='GpioCaptureC__0__Capture__captured' (at pp.c:12030)
        ExprList:  (at pp.c:12030)
          ID: name='time' (at pp.c:12030)
  FuncDef:  (at pp.c:12034)
    Decl: name='Msp430TimerCapComP__4__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:12034)
      FuncDecl: quals=None (at pp.c:12034)
        ParamList:  (at pp.c:12034)
          Decl: name='time', quals=[], storage=[] (at pp.c:12034)
            TypeDecl: declname='time', quals=[] (at pp.c:12034)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Capture__captured', quals=[] (at pp.c:12034)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12034)
      FuncCall:  (at None)
        ID: name='GpioCaptureC__0__Msp430Capture__captured' (at pp.c:12036)
        ExprList:  (at pp.c:12036)
          ID: name='time' (at pp.c:12036)
  FuncDef:  (at pp.c:12041)
    Decl: name='Msp430TimerCapComP__4__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:12041)
      FuncDecl: quals=None (at pp.c:12041)
        ParamList:  (at pp.c:12041)
          Decl: name='x', quals=[], storage=[] (at pp.c:12041)
            TypeDecl: declname='x', quals=[] (at pp.c:12041)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__int2CC', quals=[] (at pp.c:12041)
          IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
    Compound:  (at pp.c:12043)
      Decl: name='c', quals=[], storage=[] (at pp.c:12052)
        TypeDecl: declname='c', quals=[] (at pp.c:12052)
          Union: name='Msp430TimerCapComP__4____nesc_unnamed4401', packed=False (at pp.c:12045)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:12047)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:12049)
                IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
        ExprList:  (at pp.c:12052)
          Assignment: op='=' (at pp.c:12052)
            StructRef: type='.' (at pp.c:12052)
              ID: name='f' (at pp.c:12052)
            ID: name='x' (at pp.c:12052)
      Return:  (at pp.c:12055)
        StructRef: type='.' (at pp.c:12055)
          ID: name='c' (at pp.c:12055)
          ID: name='t' (at pp.c:12055)
  FuncDef:  (at pp.c:12059)
    Decl: name='Msp430TimerCapComP__4__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:12059)
      FuncDecl: quals=None (at pp.c:12059)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Control__getControl', quals=[] (at pp.c:12059)
          IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
    Compound:  (at pp.c:12060)
      Return:  (at pp.c:12061)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__4__int2CC' (at pp.c:12061)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:12061)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='388U' (at pp.c:12061)
  FuncDef:  (at pp.c:12065)
    Decl: name='Msp430TimerCapComP__4__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:12065)
      FuncDecl: quals=None (at pp.c:12065)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Event__fired', quals=[] (at pp.c:12065)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12066)
      If:  (at pp.c:12067)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__4__Control__getControl' (at pp.c:12067)
          ID: name='cap' (at pp.c:12067)
        Compound:  (at pp.c:12067)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__4__Capture__captured' (at pp.c:12068)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__4__Capture__getEvent' (at pp.c:12068)
        Compound:  (at pp.c:12070)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__4__Compare__fired' (at pp.c:12072)
  FuncDef:  (at pp.c:12077)
    Decl: name='TransformCounterC__1__CounterFrom__get', quals=[], storage=['static', 'inline'] (at pp.c:12077)
      FuncDecl: quals=None (at pp.c:12077)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__1__CounterFrom__get', quals=[] (at pp.c:12077)
          IdentifierType: names=['TransformCounterC__1__CounterFrom__size_type'] (at None)
    Compound:  (at pp.c:12077)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12079)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12079)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12083)
        ID: name='__nesc_result' (at pp.c:12083)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Counter__get' (at pp.c:12083)
      Return:  (at pp.c:12087)
        ID: name='__nesc_result' (at pp.c:12087)
  FuncDef:  (at pp.c:12098)
    Decl: name='TransformCounterC__1__CounterFrom__isOverflowPending', quals=[], storage=['static', 'inline'] (at pp.c:12098)
      FuncDecl: quals=None (at pp.c:12098)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__1__CounterFrom__isOverflowPending', quals=[] (at pp.c:12098)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12098)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12100)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12100)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12104)
        ID: name='__nesc_result' (at pp.c:12104)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__0__Counter__isOverflowPending' (at pp.c:12104)
      Return:  (at pp.c:12108)
        ID: name='__nesc_result' (at pp.c:12108)
  FuncDef:  (at pp.c:12113)
    Decl: name='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:12113)
      FuncDecl: quals=None (at pp.c:12113)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectModuleFunc', quals=[] (at pp.c:12113)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12115)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12118)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='31U' (at pp.c:12118)
        BinaryOp: op='<<' (at pp.c:12118)
          Constant: type='int', value='0x01' (at pp.c:12118)
          Constant: type='int', value='1' (at pp.c:12118)
  FuncDef:  (at pp.c:12122)
    Decl: name='GpioCaptureC__0__GeneralIO__selectModuleFunc', quals=[], storage=['static', 'inline'] (at pp.c:12122)
      FuncDecl: quals=None (at pp.c:12122)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__GeneralIO__selectModuleFunc', quals=[] (at pp.c:12122)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12122)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__25__IO__selectModuleFunc' (at pp.c:12124)
  FuncDef:  (at pp.c:12129)
    Decl: name='Msp430TimerCapComP__4__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:12129)
      FuncDecl: quals=None (at pp.c:12129)
        ParamList:  (at pp.c:12129)
          Decl: name='x', quals=[], storage=[] (at pp.c:12129)
            TypeDecl: declname='x', quals=[] (at pp.c:12129)
              IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__CC2int', quals=[] (at pp.c:12129)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:12131)
      Decl: name='c', quals=[], storage=[] (at pp.c:12140)
        TypeDecl: declname='c', quals=[] (at pp.c:12140)
          Union: name='Msp430TimerCapComP__4____nesc_unnamed4402', packed=False (at pp.c:12133)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:12135)
                IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:12137)
                IdentifierType: names=['uint16_t'] (at None)
        ExprList:  (at pp.c:12140)
          Assignment: op='=' (at pp.c:12140)
            StructRef: type='.' (at pp.c:12140)
              ID: name='f' (at pp.c:12140)
            ID: name='x' (at pp.c:12140)
      Return:  (at pp.c:12143)
        StructRef: type='.' (at pp.c:12143)
          ID: name='c' (at pp.c:12143)
          ID: name='t' (at pp.c:12143)
  FuncDef:  (at pp.c:12147)
    Decl: name='Msp430TimerCapComP__4__captureControl', quals=[], storage=['inline', 'static'] (at pp.c:12147)
      FuncDecl: quals=None (at pp.c:12147)
        ParamList:  (at pp.c:12147)
          Decl: name='l_cm', quals=[], storage=[] (at pp.c:12147)
            TypeDecl: declname='l_cm', quals=[] (at pp.c:12147)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__captureControl', quals=[] (at pp.c:12147)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:12148)
      Decl: name='x', quals=[], storage=[] (at pp.c:12149)
        TypeDecl: declname='x', quals=[] (at pp.c:12149)
          IdentifierType: names=['Msp430TimerCapComP__4__cc_t'] (at None)
        ExprList:  (at pp.c:12150)
          Assignment: op='=' (at pp.c:12150)
            StructRef: type='.' (at pp.c:12150)
              ID: name='cm' (at pp.c:12150)
            BinaryOp: op='&' (at pp.c:12150)
              ID: name='l_cm' (at pp.c:12150)
              Constant: type='int', value='0x03' (at pp.c:12150)
          Assignment: op='=' (at pp.c:12151)
            StructRef: type='.' (at pp.c:12151)
              ID: name='ccis' (at pp.c:12151)
            Constant: type='int', value='0' (at pp.c:12151)
          Assignment: op='=' (at pp.c:12152)
            StructRef: type='.' (at pp.c:12152)
              ID: name='clld' (at pp.c:12152)
            Constant: type='int', value='0' (at pp.c:12152)
          Assignment: op='=' (at pp.c:12153)
            StructRef: type='.' (at pp.c:12153)
              ID: name='cap' (at pp.c:12153)
            Constant: type='int', value='1' (at pp.c:12153)
          Assignment: op='=' (at pp.c:12154)
            StructRef: type='.' (at pp.c:12154)
              ID: name='scs' (at pp.c:12154)
            Constant: type='int', value='0' (at pp.c:12154)
          Assignment: op='=' (at pp.c:12155)
            StructRef: type='.' (at pp.c:12155)
              ID: name='ccie' (at pp.c:12155)
            Constant: type='int', value='0' (at pp.c:12155)
      Return:  (at pp.c:12157)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__4__CC2int' (at pp.c:12157)
          ExprList:  (at pp.c:12157)
            ID: name='x' (at pp.c:12157)
  FuncDef:  (at pp.c:12161)
    Decl: name='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[], storage=['inline', 'static'] (at pp.c:12161)
      FuncDecl: quals=None (at pp.c:12161)
        ParamList:  (at pp.c:12161)
          Decl: name='cm', quals=[], storage=[] (at pp.c:12161)
            TypeDecl: declname='cm', quals=[] (at pp.c:12161)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Control__setControlAsCapture', quals=[] (at pp.c:12161)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12162)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12163)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='388U' (at pp.c:12163)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__4__captureControl' (at pp.c:12163)
          ExprList:  (at pp.c:12163)
            ID: name='cm' (at pp.c:12163)
  FuncDef:  (at pp.c:12167)
    Decl: name='GpioCaptureC__0__Msp430TimerControl__setControlAsCapture', quals=[], storage=['static', 'inline'] (at pp.c:12167)
      FuncDecl: quals=None (at pp.c:12167)
        ParamList:  (at pp.c:12167)
          Decl: name='cm', quals=[], storage=[] (at pp.c:12167)
            TypeDecl: declname='cm', quals=[] (at pp.c:12167)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__setControlAsCapture', quals=[] (at pp.c:12167)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12167)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Control__setControlAsCapture' (at pp.c:12169)
        ExprList:  (at pp.c:12169)
          ID: name='cm' (at pp.c:12169)
  FuncDef:  (at pp.c:12174)
    Decl: name='Msp430TimerCapComP__4__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:12174)
      FuncDecl: quals=None (at pp.c:12174)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Control__enableEvents', quals=[] (at pp.c:12174)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12175)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12176)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='388U' (at pp.c:12176)
        Constant: type='int', value='0x0010' (at pp.c:12176)
  FuncDef:  (at pp.c:12180)
    Decl: name='GpioCaptureC__0__Msp430TimerControl__enableEvents', quals=[], storage=['static', 'inline'] (at pp.c:12180)
      FuncDecl: quals=None (at pp.c:12180)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__enableEvents', quals=[] (at pp.c:12180)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12180)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Control__enableEvents' (at pp.c:12182)
  FuncDef:  (at pp.c:12187)
    Decl: name='HplMsp430Usart0P__Usart__tx', quals=[], storage=['inline', 'static'] (at pp.c:12187)
      FuncDecl: quals=None (at pp.c:12187)
        ParamList:  (at pp.c:12187)
          Decl: name='data', quals=[], storage=[] (at pp.c:12187)
            TypeDecl: declname='data', quals=[] (at pp.c:12187)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__tx', quals=[] (at pp.c:12187)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12189)
      Assignment: op='=' (at pp.c:12190)
        ID: name='HplMsp430Usart0P__U0TXBUF' (at pp.c:12190)
        ID: name='data' (at pp.c:12190)
  FuncDef:  (at pp.c:12194)
    Decl: name='Msp430SpiNoDmaP__0__Usart__tx', quals=[], storage=['static', 'inline'] (at pp.c:12194)
      FuncDecl: quals=None (at pp.c:12194)
        ParamList:  (at pp.c:12194)
          Decl: name='data', quals=[], storage=[] (at pp.c:12194)
            TypeDecl: declname='data', quals=[] (at pp.c:12194)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__tx', quals=[] (at pp.c:12194)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12194)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__tx' (at pp.c:12196)
        ExprList:  (at pp.c:12196)
          ID: name='data' (at pp.c:12196)
  FuncDef:  (at pp.c:12201)
    Decl: name='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[], storage=['inline', 'static'] (at pp.c:12201)
      FuncDecl: quals=None (at pp.c:12201)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__isRxIntrPending', quals=[] (at pp.c:12201)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12203)
      If:  (at pp.c:12204)
        BinaryOp: op='&' (at pp.c:12204)
          ID: name='HplMsp430Usart0P__IFG1' (at pp.c:12204)
          BinaryOp: op='<<' (at pp.c:12204)
            Constant: type='int', value='1' (at pp.c:12204)
            Constant: type='int', value='6' (at pp.c:12204)
        Compound:  (at pp.c:12204)
          Return:  (at pp.c:12205)
            ID: name='TRUE' (at pp.c:12205)
      Return:  (at pp.c:12207)
        ID: name='FALSE' (at pp.c:12207)
  FuncDef:  (at pp.c:12211)
    Decl: name='Msp430SpiNoDmaP__0__Usart__isRxIntrPending', quals=[], storage=['static', 'inline'] (at pp.c:12211)
      FuncDecl: quals=None (at pp.c:12211)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__isRxIntrPending', quals=[] (at pp.c:12211)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12211)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12213)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12213)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12217)
        ID: name='__nesc_result' (at pp.c:12217)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__Usart__isRxIntrPending' (at pp.c:12217)
      Return:  (at pp.c:12221)
        ID: name='__nesc_result' (at pp.c:12221)
  FuncDef:  (at pp.c:12226)
    Decl: name='HplMsp430Usart0P__Usart__clrRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:12226)
      FuncDecl: quals=None (at pp.c:12226)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__clrRxIntr', quals=[] (at pp.c:12226)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12228)
      Assignment: op='&=' (at pp.c:12229)
        ID: name='HplMsp430Usart0P__IFG1' (at pp.c:12229)
        UnaryOp: op='~' (at pp.c:12229)
          BinaryOp: op='<<' (at pp.c:12229)
            Constant: type='int', value='1' (at pp.c:12229)
            Constant: type='int', value='6' (at pp.c:12229)
  FuncDef:  (at pp.c:12233)
    Decl: name='Msp430SpiNoDmaP__0__Usart__clrRxIntr', quals=[], storage=['static', 'inline'] (at pp.c:12233)
      FuncDecl: quals=None (at pp.c:12233)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__clrRxIntr', quals=[] (at pp.c:12233)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12233)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__clrRxIntr' (at pp.c:12235)
  FuncDef:  (at pp.c:12240)
    Decl: name='HplMsp430Usart0P__Usart__rx', quals=[], storage=['inline', 'static'] (at pp.c:12240)
      FuncDecl: quals=None (at pp.c:12240)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__rx', quals=[] (at pp.c:12240)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:12242)
      Return:  (at pp.c:12243)
        ID: name='U0RXBUF' (at pp.c:12243)
  FuncDef:  (at pp.c:12247)
    Decl: name='Msp430SpiNoDmaP__0__Usart__rx', quals=[], storage=['static', 'inline'] (at pp.c:12247)
      FuncDecl: quals=None (at pp.c:12247)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__rx', quals=[] (at pp.c:12247)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:12247)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12249)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12249)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12253)
        ID: name='__nesc_result' (at pp.c:12253)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__Usart__rx' (at pp.c:12253)
      Return:  (at pp.c:12257)
        ID: name='__nesc_result' (at pp.c:12257)
  FuncDef:  (at pp.c:12262)
    Decl: name='StateImplP__State__toIdle', quals=[], storage=['inline', 'static'] (at pp.c:12262)
      FuncDecl: quals=None (at pp.c:12262)
        ParamList:  (at pp.c:12262)
          Decl: name='id', quals=[], storage=[] (at pp.c:12262)
            TypeDecl: declname='id', quals=[] (at pp.c:12262)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__toIdle', quals=[] (at pp.c:12262)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12264)
      Compound:  (at pp.c:12265)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:12265)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:12265)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:12265)
        Assignment: op='=' (at pp.c:12267)
          ArrayRef:  (at pp.c:12267)
            ID: name='StateImplP__state' (at pp.c:12267)
            ID: name='id' (at pp.c:12267)
          ID: name='StateImplP__S_IDLE' (at pp.c:12267)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:12269)
          ExprList:  (at pp.c:12269)
            ID: name='__nesc_atomic' (at pp.c:12269)
  FuncDef:  (at pp.c:12273)
    Decl: name='CC2420SpiP__WorkingState__toIdle', quals=[], storage=['static', 'inline'] (at pp.c:12273)
      FuncDecl: quals=None (at pp.c:12273)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__WorkingState__toIdle', quals=[] (at pp.c:12273)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12273)
      FuncCall:  (at None)
        ID: name='StateImplP__State__toIdle' (at pp.c:12275)
        ExprList:  (at pp.c:12275)
          Constant: type='int', value='0U' (at pp.c:12275)
  FuncDef:  (at pp.c:12280)
    Decl: name='CC2420SpiP__ChipSpiResource__abortRelease', quals=[], storage=['inline', 'static'] (at pp.c:12280)
      FuncDecl: quals=None (at pp.c:12280)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__ChipSpiResource__abortRelease', quals=[] (at pp.c:12280)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12282)
      Assignment: op='=' (at pp.c:12285)
        ID: name='CC2420SpiP__release' (at pp.c:12285)
        ID: name='FALSE' (at pp.c:12285)
  FuncDef:  (at pp.c:12289)
    Decl: name='CC2420TransmitP__ChipSpiResource__abortRelease', quals=[], storage=['static', 'inline'] (at pp.c:12289)
      FuncDecl: quals=None (at pp.c:12289)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__ChipSpiResource__abortRelease', quals=[] (at pp.c:12289)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12289)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__ChipSpiResource__abortRelease' (at pp.c:12291)
  FuncDef:  (at pp.c:12296)
    Decl: name='CC2420TransmitP__ChipSpiResource__releasing', quals=[], storage=['inline', 'static'] (at pp.c:12296)
      FuncDecl: quals=None (at pp.c:12296)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__ChipSpiResource__releasing', quals=[] (at pp.c:12296)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12298)
      If:  (at pp.c:12299)
        ID: name='CC2420TransmitP__abortSpiRelease' (at pp.c:12299)
        Compound:  (at pp.c:12299)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__ChipSpiResource__abortRelease' (at pp.c:12300)
  FuncDef:  (at pp.c:12305)
    Decl: name='CC2420SpiP__ChipSpiResource__releasing', quals=[], storage=['static', 'inline'] (at pp.c:12305)
      FuncDecl: quals=None (at pp.c:12305)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__ChipSpiResource__releasing', quals=[] (at pp.c:12305)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12305)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__ChipSpiResource__releasing' (at pp.c:12307)
  FuncDef:  (at pp.c:12312)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[], storage=['inline', 'static'] (at pp.c:12312)
      FuncDecl: quals=None (at pp.c:12312)
        ParamList:  (at pp.c:12312)
          Decl: name='id', quals=[], storage=[] (at pp.c:12312)
            TypeDecl: declname='id', quals=[] (at pp.c:12312)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__release', quals=[] (at pp.c:12312)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12314)
      Return:  (at pp.c:12316)
        ID: name='FAIL' (at pp.c:12316)
  FuncDef:  (at pp.c:12320)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__release', quals=[], storage=['static', 'inline'] (at pp.c:12320)
      FuncDecl: quals=None (at pp.c:12320)
        ParamList:  (at pp.c:12320)
          Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:12320)
            TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:12320)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__release', quals=[] (at pp.c:12320)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12320)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12322)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12322)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:12326)
        ID: name='arg_0x101c3a020' (at pp.c:12326)
        Compound:  (at pp.c:12326)
          Case:  (at pp.c:12328)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:12328)
            Assignment: op='=' (at pp.c:12330)
              ID: name='__nesc_result' (at pp.c:12330)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__release' (at pp.c:12330)
                ExprList:  (at pp.c:12330)
                  ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:12330)
          Break:  (at pp.c:12332)
          Case:  (at pp.c:12334)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:12334)
            Assignment: op='=' (at pp.c:12336)
              ID: name='__nesc_result' (at pp.c:12336)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__release' (at pp.c:12336)
                ExprList:  (at pp.c:12336)
                  ID: name='Msp430Usart0C__1__CLIENT_ID' (at pp.c:12336)
          Break:  (at pp.c:12338)
          Default:  (at pp.c:12340)
            Assignment: op='=' (at pp.c:12342)
              ID: name='__nesc_result' (at pp.c:12342)
              FuncCall:  (at None)
                ID: name='Msp430SpiNoDmaP__0__UsartResource__default__release' (at pp.c:12342)
                ExprList:  (at pp.c:12342)
                  ID: name='arg_0x101c3a020' (at pp.c:12342)
          Break:  (at pp.c:12344)
      Return:  (at pp.c:12350)
        ID: name='__nesc_result' (at pp.c:12350)
  FuncDef:  (at pp.c:12355)
    Decl: name='Msp430SpiNoDmaP__0__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:12355)
      FuncDecl: quals=None (at pp.c:12355)
        ParamList:  (at pp.c:12355)
          Decl: name='id', quals=[], storage=[] (at pp.c:12355)
            TypeDecl: declname='id', quals=[] (at pp.c:12355)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__release', quals=[] (at pp.c:12355)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12357)
      Return:  (at pp.c:12358)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__UsartResource__release' (at pp.c:12358)
          ExprList:  (at pp.c:12358)
            ID: name='id' (at pp.c:12358)
  FuncDef:  (at pp.c:12362)
    Decl: name='CC2420SpiP__SpiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:12362)
      FuncDecl: quals=None (at pp.c:12362)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiResource__release', quals=[] (at pp.c:12362)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12362)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12364)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12364)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12368)
        ID: name='__nesc_result' (at pp.c:12368)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Resource__release' (at pp.c:12368)
          ExprList:  (at pp.c:12368)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:12368)
      Return:  (at pp.c:12372)
        ID: name='__nesc_result' (at pp.c:12372)
  FuncDef:  (at pp.c:12377)
    Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[], storage=['inline', 'static'] (at pp.c:12377)
      FuncDecl: quals=None (at pp.c:12377)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEmpty', quals=[] (at pp.c:12377)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12379)
      Compound:  (at pp.c:12382)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12383)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12383)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='==' (at pp.c:12385)
            ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12385)
            ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12385)
        Return:  (at pp.c:12388)
          ID: name='__nesc_temp' (at pp.c:12388)
  FuncDef:  (at pp.c:12393)
    Decl: name='ArbiterP__1__Queue__isEmpty', quals=[], storage=['static', 'inline'] (at pp.c:12393)
      FuncDecl: quals=None (at pp.c:12393)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__Queue__isEmpty', quals=[] (at pp.c:12393)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12393)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12395)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12395)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12399)
        ID: name='__nesc_result' (at pp.c:12399)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__2__FcfsQueue__isEmpty' (at pp.c:12399)
      Return:  (at pp.c:12403)
        ID: name='__nesc_result' (at pp.c:12403)
  FuncDef:  (at pp.c:12408)
    Decl: name='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:12408)
      FuncDecl: quals=None (at pp.c:12408)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__dequeue', quals=[] (at pp.c:12408)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:12410)
      Compound:  (at pp.c:12413)
        If:  (at pp.c:12414)
          BinaryOp: op='!=' (at pp.c:12414)
            ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12414)
            ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12414)
          Compound:  (at pp.c:12414)
            Decl: name='id', quals=[], storage=[] (at pp.c:12415)
              TypeDecl: declname='id', quals=[] (at pp.c:12415)
                IdentifierType: names=['uint8_t'] (at None)
              ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12415)
            Assignment: op='=' (at pp.c:12418)
              ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12418)
              ArrayRef:  (at pp.c:12418)
                ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:12418)
                ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12418)
            If:  (at pp.c:12419)
              BinaryOp: op='==' (at pp.c:12419)
                ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:12419)
                ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12419)
              Compound:  (at pp.c:12419)
                Assignment: op='=' (at pp.c:12420)
                  ID: name='FcfsResourceQueueC__2__qTail' (at pp.c:12420)
                  ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12420)
            Assignment: op='=' (at pp.c:12423)
              ArrayRef:  (at pp.c:12423)
                ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:12423)
                ID: name='id' (at pp.c:12423)
              ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12423)
            Compound:  (at pp.c:12424)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12425)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12425)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='id' (at pp.c:12427)
              Return:  (at pp.c:12430)
                ID: name='__nesc_temp' (at pp.c:12430)
        Compound:  (at pp.c:12434)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:12435)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:12435)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:12437)
          Return:  (at pp.c:12440)
            ID: name='__nesc_temp' (at pp.c:12440)
  FuncDef:  (at pp.c:12446)
    Decl: name='ArbiterP__1__Queue__dequeue', quals=[], storage=['static', 'inline'] (at pp.c:12446)
      FuncDecl: quals=None (at pp.c:12446)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__Queue__dequeue', quals=[] (at pp.c:12446)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:12446)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12448)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12448)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12452)
        ID: name='__nesc_result' (at pp.c:12452)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__2__FcfsQueue__dequeue' (at pp.c:12452)
      Return:  (at pp.c:12456)
        ID: name='__nesc_result' (at pp.c:12456)
  FuncDef:  (at pp.c:12461)
    Decl: name='ArbiterP__1__grantedTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:12461)
      FuncDecl: quals=None (at pp.c:12461)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__grantedTask__postTask', quals=[] (at pp.c:12461)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12461)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12463)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12463)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12467)
        ID: name='__nesc_result' (at pp.c:12467)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:12467)
          ExprList:  (at pp.c:12467)
            ID: name='ArbiterP__1__grantedTask' (at pp.c:12467)
      Return:  (at pp.c:12471)
        ID: name='__nesc_result' (at pp.c:12471)
  FuncDef:  (at pp.c:12476)
    Decl: name='HplMsp430Usart0P__Usart__resetUsart', quals=[], storage=['inline', 'static'] (at pp.c:12476)
      FuncDecl: quals=None (at pp.c:12476)
        ParamList:  (at pp.c:12476)
          Decl: name='reset', quals=[], storage=[] (at pp.c:12476)
            TypeDecl: declname='reset', quals=[] (at pp.c:12476)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__resetUsart', quals=[] (at pp.c:12476)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12478)
      If:  (at pp.c:12479)
        ID: name='reset' (at pp.c:12479)
        Compound:  (at pp.c:12479)
          Assignment: op='=' (at pp.c:12480)
            ID: name='U0CTL' (at pp.c:12480)
            Constant: type='int', value='0x01' (at pp.c:12480)
        Compound:  (at pp.c:12482)
          Assignment: op='&=' (at pp.c:12483)
            ID: name='U0CTL' (at pp.c:12483)
            UnaryOp: op='~' (at pp.c:12483)
              Constant: type='int', value='0x01' (at pp.c:12483)
  FuncDef:  (at pp.c:12488)
    Decl: name='Msp430SpiNoDmaP__0__Usart__resetUsart', quals=[], storage=['static', 'inline'] (at pp.c:12488)
      FuncDecl: quals=None (at pp.c:12488)
        ParamList:  (at pp.c:12488)
          Decl: name='reset', quals=[], storage=[] (at pp.c:12488)
            TypeDecl: declname='reset', quals=[] (at pp.c:12488)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__resetUsart', quals=[] (at pp.c:12488)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12488)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__resetUsart' (at pp.c:12490)
        ExprList:  (at pp.c:12490)
          ID: name='reset' (at pp.c:12490)
  FuncDef:  (at pp.c:12495)
    Decl: name='Msp430SpiNoDmaP__0__Usart__disableSpi', quals=[], storage=['static', 'inline'] (at pp.c:12495)
      FuncDecl: quals=None (at pp.c:12495)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__disableSpi', quals=[] (at pp.c:12495)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12495)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__disableSpi' (at pp.c:12497)
  FuncDef:  (at pp.c:12502)
    Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:12502)
      FuncDecl: quals=None (at pp.c:12502)
        ParamList:  (at pp.c:12502)
          Decl: name='id', quals=[], storage=[] (at pp.c:12502)
            TypeDecl: declname='id', quals=[] (at pp.c:12502)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:12502)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12504)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__resetUsart' (at pp.c:12505)
        ExprList:  (at pp.c:12505)
          ID: name='TRUE' (at pp.c:12505)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__disableSpi' (at pp.c:12506)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__resetUsart' (at pp.c:12507)
        ExprList:  (at pp.c:12507)
          ID: name='FALSE' (at pp.c:12507)
  FuncDef:  (at pp.c:12511)
    Decl: name='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:12511)
      FuncDecl: quals=None (at pp.c:12511)
        ParamList:  (at pp.c:12511)
          Decl: name='id', quals=[], storage=[] (at pp.c:12511)
            TypeDecl: declname='id', quals=[] (at pp.c:12511)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:12511)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12513)
  FuncDef:  (at pp.c:12517)
    Decl: name='ArbiterP__1__ResourceConfigure__unconfigure', quals=[], storage=['static', 'inline'] (at pp.c:12517)
      FuncDecl: quals=None (at pp.c:12517)
        ParamList:  (at pp.c:12517)
          Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:12517)
            TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:12517)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceConfigure__unconfigure', quals=[] (at pp.c:12517)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12517)
      Switch:  (at pp.c:12519)
        ID: name='arg_0x101ac0340' (at pp.c:12519)
        Compound:  (at pp.c:12519)
          Case:  (at pp.c:12521)
            ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:12521)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure' (at pp.c:12523)
              ExprList:  (at pp.c:12523)
                ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:12523)
          Break:  (at pp.c:12525)
          Case:  (at pp.c:12527)
            ID: name='Msp430Usart0C__1__CLIENT_ID' (at pp.c:12527)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__ResourceConfigure__unconfigure' (at pp.c:12529)
              ExprList:  (at pp.c:12529)
                ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:12529)
          Break:  (at pp.c:12531)
          Default:  (at pp.c:12533)
            FuncCall:  (at None)
              ID: name='ArbiterP__1__ResourceConfigure__default__unconfigure' (at pp.c:12535)
              ExprList:  (at pp.c:12535)
                ID: name='arg_0x101ac0340' (at pp.c:12535)
          Break:  (at pp.c:12537)
  FuncDef:  (at pp.c:12544)
    Decl: name='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:12544)
      FuncDecl: quals=None (at pp.c:12544)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectIOFunc', quals=[] (at pp.c:12544)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12546)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12549)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:12549)
        UnaryOp: op='~' (at pp.c:12549)
          BinaryOp: op='<<' (at pp.c:12549)
            Constant: type='int', value='0x01' (at pp.c:12549)
            Constant: type='int', value='1' (at pp.c:12549)
  FuncDef:  (at pp.c:12553)
    Decl: name='HplMsp430Usart0P__SIMO__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:12553)
      FuncDecl: quals=None (at pp.c:12553)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__SIMO__selectIOFunc', quals=[] (at pp.c:12553)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12553)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__17__IO__selectIOFunc' (at pp.c:12555)
  FuncDef:  (at pp.c:12560)
    Decl: name='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:12560)
      FuncDecl: quals=None (at pp.c:12560)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectIOFunc', quals=[] (at pp.c:12560)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12562)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12565)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:12565)
        UnaryOp: op='~' (at pp.c:12565)
          BinaryOp: op='<<' (at pp.c:12565)
            Constant: type='int', value='0x01' (at pp.c:12565)
            Constant: type='int', value='2' (at pp.c:12565)
  FuncDef:  (at pp.c:12569)
    Decl: name='HplMsp430Usart0P__SOMI__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:12569)
      FuncDecl: quals=None (at pp.c:12569)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__SOMI__selectIOFunc', quals=[] (at pp.c:12569)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12569)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__18__IO__selectIOFunc' (at pp.c:12571)
  FuncDef:  (at pp.c:12576)
    Decl: name='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:12576)
      FuncDecl: quals=None (at pp.c:12576)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectIOFunc', quals=[] (at pp.c:12576)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12578)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12581)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:12581)
        UnaryOp: op='~' (at pp.c:12581)
          BinaryOp: op='<<' (at pp.c:12581)
            Constant: type='int', value='0x01' (at pp.c:12581)
            Constant: type='int', value='3' (at pp.c:12581)
  FuncDef:  (at pp.c:12585)
    Decl: name='HplMsp430Usart0P__UCLK__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:12585)
      FuncDecl: quals=None (at pp.c:12585)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__UCLK__selectIOFunc', quals=[] (at pp.c:12585)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12585)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__19__IO__selectIOFunc' (at pp.c:12587)
  FuncDef:  (at pp.c:12592)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:12592)
      FuncDecl: quals=None (at pp.c:12592)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__granted', quals=[] (at pp.c:12592)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12594)
  FuncDef:  (at pp.c:12598)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__granted', quals=[], storage=['static', 'inline'] (at pp.c:12598)
      FuncDecl: quals=None (at pp.c:12598)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__granted', quals=[] (at pp.c:12598)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12598)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__default__granted' (at pp.c:12600)
  FuncDef:  (at pp.c:12605)
    Decl: name='Msp430TimerCapComP__5__Control__enableEvents', quals=[], storage=['inline', 'static'] (at pp.c:12605)
      FuncDecl: quals=None (at pp.c:12605)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Control__enableEvents', quals=[] (at pp.c:12605)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12606)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12607)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='390U' (at pp.c:12607)
        Constant: type='int', value='0x0010' (at pp.c:12607)
  FuncDef:  (at pp.c:12611)
    Decl: name='Msp430AlarmC__1__Msp430TimerControl__enableEvents', quals=[], storage=['static', 'inline'] (at pp.c:12611)
      FuncDecl: quals=None (at pp.c:12611)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__enableEvents', quals=[] (at pp.c:12611)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12611)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Control__enableEvents' (at pp.c:12613)
  FuncDef:  (at pp.c:12618)
    Decl: name='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[], storage=['inline', 'static'] (at pp.c:12618)
      FuncDecl: quals=None (at pp.c:12618)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Control__clearPendingInterrupt', quals=[] (at pp.c:12618)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12619)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12620)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='390U' (at pp.c:12620)
        UnaryOp: op='~' (at pp.c:12620)
          Constant: type='int', value='0x0001' (at pp.c:12620)
  FuncDef:  (at pp.c:12624)
    Decl: name='Msp430AlarmC__1__Msp430TimerControl__clearPendingInterrupt', quals=[], storage=['static', 'inline'] (at pp.c:12624)
      FuncDecl: quals=None (at pp.c:12624)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__clearPendingInterrupt', quals=[] (at pp.c:12624)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12624)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Control__clearPendingInterrupt' (at pp.c:12626)
  FuncDef:  (at pp.c:12631)
    Decl: name='Msp430TimerCapComP__5__Compare__setEvent', quals=[], storage=['inline', 'static'] (at pp.c:12631)
      FuncDecl: quals=None (at pp.c:12631)
        ParamList:  (at pp.c:12631)
          Decl: name='x', quals=[], storage=[] (at pp.c:12631)
            TypeDecl: declname='x', quals=[] (at pp.c:12631)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEvent', quals=[] (at pp.c:12631)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12632)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12633)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='406U' (at pp.c:12633)
        ID: name='x' (at pp.c:12633)
  FuncDef:  (at pp.c:12637)
    Decl: name='Msp430AlarmC__1__Msp430Compare__setEvent', quals=[], storage=['static', 'inline'] (at pp.c:12637)
      FuncDecl: quals=None (at pp.c:12637)
        ParamList:  (at pp.c:12637)
          Decl: name='time', quals=[], storage=[] (at pp.c:12637)
            TypeDecl: declname='time', quals=[] (at pp.c:12637)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__setEvent', quals=[] (at pp.c:12637)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12637)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Compare__setEvent' (at pp.c:12639)
        ExprList:  (at pp.c:12639)
          ID: name='time' (at pp.c:12639)
  FuncDef:  (at pp.c:12644)
    Decl: name='Msp430TimerCapComP__5__Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:12644)
      FuncDecl: quals=None (at pp.c:12644)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Timer__get', quals=[] (at pp.c:12644)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:12644)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12646)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12646)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12650)
        ID: name='__nesc_result' (at pp.c:12650)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__get' (at pp.c:12650)
      Return:  (at pp.c:12654)
        ID: name='__nesc_result' (at pp.c:12654)
  FuncDef:  (at pp.c:12659)
    Decl: name='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[], storage=['inline', 'static'] (at pp.c:12659)
      FuncDecl: quals=None (at pp.c:12659)
        ParamList:  (at pp.c:12659)
          Decl: name='x', quals=[], storage=[] (at pp.c:12659)
            TypeDecl: declname='x', quals=[] (at pp.c:12659)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Compare__setEventFromNow', quals=[] (at pp.c:12659)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12660)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:12661)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='406U' (at pp.c:12661)
        BinaryOp: op='+' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__5__Timer__get' (at pp.c:12661)
          ID: name='x' (at pp.c:12661)
  FuncDef:  (at pp.c:12665)
    Decl: name='Msp430AlarmC__1__Msp430Compare__setEventFromNow', quals=[], storage=['static', 'inline'] (at pp.c:12665)
      FuncDecl: quals=None (at pp.c:12665)
        ParamList:  (at pp.c:12665)
          Decl: name='delta', quals=[], storage=[] (at pp.c:12665)
            TypeDecl: declname='delta', quals=[] (at pp.c:12665)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__setEventFromNow', quals=[] (at pp.c:12665)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12665)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Compare__setEventFromNow' (at pp.c:12667)
        ExprList:  (at pp.c:12667)
          ID: name='delta' (at pp.c:12667)
  FuncDef:  (at pp.c:12672)
    Decl: name='Msp430AlarmC__1__Msp430Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:12672)
      FuncDecl: quals=None (at pp.c:12672)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430Timer__get', quals=[] (at pp.c:12672)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:12672)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12674)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12674)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12678)
        ID: name='__nesc_result' (at pp.c:12678)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__1__Timer__get' (at pp.c:12678)
      Return:  (at pp.c:12682)
        ID: name='__nesc_result' (at pp.c:12682)
  FuncDef:  (at pp.c:12687)
    Decl: name='Msp430AlarmC__1__Alarm__startAt', quals=[], storage=['inline', 'static'] (at pp.c:12687)
      FuncDecl: quals=None (at pp.c:12687)
        ParamList:  (at pp.c:12687)
          Decl: name='t0', quals=[], storage=[] (at pp.c:12687)
            TypeDecl: declname='t0', quals=[] (at pp.c:12687)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:12687)
            TypeDecl: declname='dt', quals=[] (at pp.c:12687)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Alarm__startAt', quals=[] (at pp.c:12687)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12688)
      Compound:  (at pp.c:12690)
        Decl: name='now', quals=[], storage=[] (at pp.c:12691)
          TypeDecl: declname='now', quals=[] (at pp.c:12691)
            IdentifierType: names=['uint16_t'] (at None)
          FuncCall:  (at None)
            ID: name='Msp430AlarmC__1__Msp430Timer__get' (at pp.c:12691)
        Decl: name='elapsed', quals=[], storage=[] (at pp.c:12692)
          TypeDecl: declname='elapsed', quals=[] (at pp.c:12692)
            IdentifierType: names=['uint16_t'] (at None)
          BinaryOp: op='-' (at pp.c:12692)
            ID: name='now' (at pp.c:12692)
            ID: name='t0' (at pp.c:12692)
        If:  (at pp.c:12695)
          BinaryOp: op='>=' (at pp.c:12695)
            ID: name='elapsed' (at pp.c:12695)
            ID: name='dt' (at pp.c:12695)
          Compound:  (at pp.c:12696)
            FuncCall:  (at None)
              ID: name='Msp430AlarmC__1__Msp430Compare__setEventFromNow' (at pp.c:12697)
              ExprList:  (at pp.c:12697)
                Constant: type='int', value='2' (at pp.c:12697)
          Compound:  (at pp.c:12700)
            Decl: name='remaining', quals=[], storage=[] (at pp.c:12701)
              TypeDecl: declname='remaining', quals=[] (at pp.c:12701)
                IdentifierType: names=['uint16_t'] (at None)
              BinaryOp: op='-' (at pp.c:12701)
                ID: name='dt' (at pp.c:12701)
                ID: name='elapsed' (at pp.c:12701)
            If:  (at pp.c:12704)
              BinaryOp: op='<=' (at pp.c:12704)
                ID: name='remaining' (at pp.c:12704)
                Constant: type='int', value='2' (at pp.c:12704)
              Compound:  (at pp.c:12704)
                FuncCall:  (at None)
                  ID: name='Msp430AlarmC__1__Msp430Compare__setEventFromNow' (at pp.c:12705)
                  ExprList:  (at pp.c:12705)
                    Constant: type='int', value='2' (at pp.c:12705)
              Compound:  (at pp.c:12707)
                FuncCall:  (at None)
                  ID: name='Msp430AlarmC__1__Msp430Compare__setEvent' (at pp.c:12709)
                  ExprList:  (at pp.c:12709)
                    BinaryOp: op='+' (at pp.c:12709)
                      ID: name='now' (at pp.c:12709)
                      ID: name='remaining' (at pp.c:12709)
        FuncCall:  (at None)
          ID: name='Msp430AlarmC__1__Msp430TimerControl__clearPendingInterrupt' (at pp.c:12713)
        FuncCall:  (at None)
          ID: name='Msp430AlarmC__1__Msp430TimerControl__enableEvents' (at pp.c:12714)
  FuncDef:  (at pp.c:12719)
    Decl: name='TransformAlarmC__1__AlarmFrom__startAt', quals=[], storage=['static', 'inline'] (at pp.c:12719)
      FuncDecl: quals=None (at pp.c:12719)
        ParamList:  (at pp.c:12719)
          Decl: name='t0', quals=[], storage=[] (at pp.c:12719)
            TypeDecl: declname='t0', quals=[] (at pp.c:12719)
              IdentifierType: names=['TransformAlarmC__1__AlarmFrom__size_type'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:12719)
            TypeDecl: declname='dt', quals=[] (at pp.c:12719)
              IdentifierType: names=['TransformAlarmC__1__AlarmFrom__size_type'] (at None)
        TypeDecl: declname='TransformAlarmC__1__AlarmFrom__startAt', quals=[] (at pp.c:12719)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12719)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Alarm__startAt' (at pp.c:12721)
        ExprList:  (at pp.c:12721)
          ID: name='t0' (at pp.c:12721)
          ID: name='dt' (at pp.c:12721)
  FuncDef:  (at pp.c:12726)
    Decl: name='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[], storage=['inline', 'static'] (at pp.c:12726)
      FuncDecl: quals=None (at pp.c:12726)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__ChipSpiResource__attemptRelease', quals=[] (at pp.c:12726)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12728)
      Return:  (at pp.c:12729)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__attemptRelease' (at pp.c:12729)
  FuncDef:  (at pp.c:12733)
    Decl: name='CC2420TransmitP__ChipSpiResource__attemptRelease', quals=[], storage=['static', 'inline'] (at pp.c:12733)
      FuncDecl: quals=None (at pp.c:12733)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__ChipSpiResource__attemptRelease', quals=[] (at pp.c:12733)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12733)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12735)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12735)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12739)
        ID: name='__nesc_result' (at pp.c:12739)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__ChipSpiResource__attemptRelease' (at pp.c:12739)
      Return:  (at pp.c:12743)
        ID: name='__nesc_result' (at pp.c:12743)
  FuncDef:  (at pp.c:12748)
    Decl: name='CC2420ControlP__SpiResource__request', quals=[], storage=['static', 'inline'] (at pp.c:12748)
      FuncDecl: quals=None (at pp.c:12748)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SpiResource__request', quals=[] (at pp.c:12748)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12748)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12750)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12750)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12754)
        ID: name='__nesc_result' (at pp.c:12754)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__request' (at pp.c:12754)
          ExprList:  (at pp.c:12754)
            ID: name='CC2420SpiC__0__CLIENT_ID' (at pp.c:12754)
      Return:  (at pp.c:12758)
        ID: name='__nesc_result' (at pp.c:12758)
  FuncDef:  (at pp.c:12763)
    Decl: name='CC2420ControlP__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:12763)
      FuncDecl: quals=None (at pp.c:12763)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__Resource__request', quals=[] (at pp.c:12763)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12765)
      Return:  (at pp.c:12766)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__SpiResource__request' (at pp.c:12766)
  FuncDef:  (at pp.c:12770)
    Decl: name='CC2420CsmaP__Resource__request', quals=[], storage=['static', 'inline'] (at pp.c:12770)
      FuncDecl: quals=None (at pp.c:12770)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__Resource__request', quals=[] (at pp.c:12770)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:12770)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12772)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12772)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12776)
        ID: name='__nesc_result' (at pp.c:12776)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__Resource__request' (at pp.c:12776)
      Return:  (at pp.c:12780)
        ID: name='__nesc_result' (at pp.c:12780)
  FuncDef:  (at pp.c:12785)
    Decl: name='CC2420CsmaP__CC2420Power__startVRegDone', quals=[], storage=['inline', 'static'] (at pp.c:12785)
      FuncDecl: quals=None (at pp.c:12785)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__startVRegDone', quals=[] (at pp.c:12785)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12787)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__Resource__request' (at pp.c:12788)
  FuncDef:  (at pp.c:12792)
    Decl: name='CC2420ControlP__CC2420Power__startVRegDone', quals=[], storage=['static', 'inline'] (at pp.c:12792)
      FuncDecl: quals=None (at pp.c:12792)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__startVRegDone', quals=[] (at pp.c:12792)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12792)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Power__startVRegDone' (at pp.c:12794)
  FuncDef:  (at pp.c:12799)
    Decl: name='Msp430GpioC__9__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:12799)
      FuncDecl: quals=None (at pp.c:12799)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__set', quals=[] (at pp.c:12799)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12799)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__30__IO__set' (at pp.c:12801)
  FuncDef:  (at pp.c:12806)
    Decl: name='Msp430GpioC__9__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:12806)
      FuncDecl: quals=None (at pp.c:12806)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__GeneralIO__set', quals=[] (at pp.c:12806)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12808)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__HplGeneralIO__set' (at pp.c:12810)
  FuncDef:  (at pp.c:12814)
    Decl: name='CC2420ControlP__RSTN__set', quals=[], storage=['static', 'inline'] (at pp.c:12814)
      FuncDecl: quals=None (at pp.c:12814)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__RSTN__set', quals=[] (at pp.c:12814)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12814)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__GeneralIO__set' (at pp.c:12816)
  FuncDef:  (at pp.c:12821)
    Decl: name='Msp430GpioC__9__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:12821)
      FuncDecl: quals=None (at pp.c:12821)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__clr', quals=[] (at pp.c:12821)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12821)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__30__IO__clr' (at pp.c:12823)
  FuncDef:  (at pp.c:12828)
    Decl: name='Msp430GpioC__9__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:12828)
      FuncDecl: quals=None (at pp.c:12828)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__GeneralIO__clr', quals=[] (at pp.c:12828)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12830)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__HplGeneralIO__clr' (at pp.c:12832)
  FuncDef:  (at pp.c:12836)
    Decl: name='CC2420ControlP__RSTN__clr', quals=[], storage=['static', 'inline'] (at pp.c:12836)
      FuncDecl: quals=None (at pp.c:12836)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__RSTN__clr', quals=[] (at pp.c:12836)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12836)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__GeneralIO__clr' (at pp.c:12838)
  FuncDef:  (at pp.c:12843)
    Decl: name='CC2420ControlP__StartupTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:12843)
      FuncDecl: quals=None (at pp.c:12843)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__StartupTimer__fired', quals=[] (at pp.c:12843)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12845)
      If:  (at pp.c:12846)
        BinaryOp: op='==' (at pp.c:12846)
          ID: name='CC2420ControlP__m_state' (at pp.c:12846)
          ID: name='CC2420ControlP__S_VREG_STARTING' (at pp.c:12846)
        Compound:  (at pp.c:12846)
          Assignment: op='=' (at pp.c:12847)
            ID: name='CC2420ControlP__m_state' (at pp.c:12847)
            ID: name='CC2420ControlP__S_VREG_STARTED' (at pp.c:12847)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__RSTN__clr' (at pp.c:12848)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__RSTN__set' (at pp.c:12849)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__CC2420Power__startVRegDone' (at pp.c:12850)
  FuncDef:  (at pp.c:12855)
    Decl: name='CC2420TransmitP__SFLUSHTX__strobe', quals=[], storage=['static', 'inline'] (at pp.c:12855)
      FuncDecl: quals=None (at pp.c:12855)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SFLUSHTX__strobe', quals=[] (at pp.c:12855)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:12855)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12857)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12857)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12861)
        ID: name='__nesc_result' (at pp.c:12861)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:12861)
          ExprList:  (at pp.c:12861)
            ID: name='CC2420_SFLUSHTX' (at pp.c:12861)
      Return:  (at pp.c:12865)
        ID: name='__nesc_result' (at pp.c:12865)
  FuncDef:  (at pp.c:12870)
    Decl: name='HplMsp430GeneralIOP__4__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:12870)
      FuncDecl: quals=None (at pp.c:12870)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__4__IO__getRaw', quals=[] (at pp.c:12870)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:12872)
      Return:  (at pp.c:12874)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:12874)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='32U' (at pp.c:12874)
          BinaryOp: op='<<' (at pp.c:12874)
            Constant: type='int', value='0x01' (at pp.c:12874)
            Constant: type='int', value='4' (at pp.c:12874)
  FuncDef:  (at pp.c:12878)
    Decl: name='HplMsp430GeneralIOP__4__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:12878)
      FuncDecl: quals=None (at pp.c:12878)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__4__IO__get', quals=[] (at pp.c:12878)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12880)
      Return:  (at pp.c:12882)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='HplMsp430GeneralIOP__4__IO__getRaw' (at pp.c:12882)
          Constant: type='int', value='0' (at pp.c:12882)
  FuncDef:  (at pp.c:12886)
    Decl: name='Msp430GpioC__5__HplGeneralIO__get', quals=[], storage=['static', 'inline'] (at pp.c:12886)
      FuncDecl: quals=None (at pp.c:12886)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__5__HplGeneralIO__get', quals=[] (at pp.c:12886)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12886)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12888)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12888)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12892)
        ID: name='__nesc_result' (at pp.c:12892)
        FuncCall:  (at None)
          ID: name='HplMsp430GeneralIOP__4__IO__get' (at pp.c:12892)
      Return:  (at pp.c:12896)
        ID: name='__nesc_result' (at pp.c:12896)
  FuncDef:  (at pp.c:12901)
    Decl: name='Msp430GpioC__5__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:12901)
      FuncDecl: quals=None (at pp.c:12901)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__5__GeneralIO__get', quals=[] (at pp.c:12901)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12903)
      Return:  (at pp.c:12905)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__5__HplGeneralIO__get' (at pp.c:12905)
  FuncDef:  (at pp.c:12909)
    Decl: name='CC2420TransmitP__CCA__get', quals=[], storage=['static', 'inline'] (at pp.c:12909)
      FuncDecl: quals=None (at pp.c:12909)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CCA__get', quals=[] (at pp.c:12909)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:12909)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:12911)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:12911)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:12915)
        ID: name='__nesc_result' (at pp.c:12915)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__5__GeneralIO__get' (at pp.c:12915)
      Return:  (at pp.c:12919)
        ID: name='__nesc_result' (at pp.c:12919)
  FuncDef:  (at pp.c:12924)
    Decl: name='CC2420TransmitP__BackoffTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:12924)
      FuncDecl: quals=None (at pp.c:12924)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__BackoffTimer__fired', quals=[] (at pp.c:12924)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12926)
      Compound:  (at pp.c:12929)
        Switch:  (at pp.c:12930)
          ID: name='CC2420TransmitP__m_state' (at pp.c:12930)
          Compound:  (at pp.c:12930)
            Case:  (at pp.c:12932)
              ID: name='CC2420TransmitP__S_SAMPLE_CCA' (at pp.c:12932)
              If:  (at pp.c:12935)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CCA__get' (at pp.c:12935)
                Compound:  (at pp.c:12935)
                  Assignment: op='=' (at pp.c:12936)
                    ID: name='CC2420TransmitP__m_state' (at pp.c:12936)
                    ID: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:12936)
                  FuncCall:  (at None)
                    ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:12937)
                    ExprList:  (at pp.c:12937)
                      ID: name='CC2420_TIME_ACK_TURNAROUND' (at pp.c:12937)
                Compound:  (at pp.c:12939)
                  FuncCall:  (at None)
                    ID: name='CC2420TransmitP__congestionBackoff' (at pp.c:12940)
            Break:  (at pp.c:12942)
            Case:  (at pp.c:12944)
              ID: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:12944)
              Case:  (at pp.c:12945)
                ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:12945)
                If:  (at pp.c:12946)
                  BinaryOp: op='==' (at None)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__acquireSpiResource' (at pp.c:12946)
                    ID: name='SUCCESS' (at pp.c:12946)
                  Compound:  (at pp.c:12946)
                    FuncCall:  (at None)
                      ID: name='CC2420TransmitP__attemptSend' (at pp.c:12947)
            Break:  (at pp.c:12949)
            Case:  (at pp.c:12951)
              ID: name='CC2420TransmitP__S_ACK_WAIT' (at pp.c:12951)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__signalDone' (at pp.c:12952)
                ExprList:  (at pp.c:12952)
                  ID: name='SUCCESS' (at pp.c:12952)
            Break:  (at pp.c:12953)
            Case:  (at pp.c:12955)
              ID: name='CC2420TransmitP__S_SFD' (at pp.c:12955)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__SFLUSHTX__strobe' (at pp.c:12958)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CaptureSFD__captureRisingEdge' (at pp.c:12959)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:12960)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__signalDone' (at pp.c:12961)
              ExprList:  (at pp.c:12961)
                ID: name='ERETRY' (at pp.c:12961)
            Break:  (at pp.c:12962)
            Default:  (at pp.c:12964)
              Break:  (at pp.c:12965)
  FuncDef:  (at pp.c:12971)
    Decl: name='TransformAlarmC__1__Alarm__fired', quals=[], storage=['static', 'inline'] (at pp.c:12971)
      FuncDecl: quals=None (at pp.c:12971)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Alarm__fired', quals=[] (at pp.c:12971)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12971)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__BackoffTimer__fired' (at pp.c:12973)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__StartupTimer__fired' (at pp.c:12975)
  FuncDef:  (at pp.c:12980)
    Decl: name='TransformAlarmC__1__AlarmFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:12980)
      FuncDecl: quals=None (at pp.c:12980)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__AlarmFrom__fired', quals=[] (at pp.c:12980)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12981)
      Compound:  (at pp.c:12983)
        If:  (at pp.c:12984)
          BinaryOp: op='==' (at pp.c:12984)
            ID: name='TransformAlarmC__1__m_dt' (at pp.c:12984)
            Constant: type='int', value='0' (at pp.c:12984)
          Compound:  (at pp.c:12985)
            FuncCall:  (at None)
              ID: name='TransformAlarmC__1__Alarm__fired' (at pp.c:12986)
          Compound:  (at pp.c:12989)
            FuncCall:  (at None)
              ID: name='TransformAlarmC__1__set_alarm' (at pp.c:12990)
  FuncDef:  (at pp.c:12996)
    Decl: name='Msp430AlarmC__1__Alarm__fired', quals=[], storage=['static', 'inline'] (at pp.c:12996)
      FuncDecl: quals=None (at pp.c:12996)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Alarm__fired', quals=[] (at pp.c:12996)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:12996)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__AlarmFrom__fired' (at pp.c:12998)
  FuncDef:  (at pp.c:13003)
    Decl: name='Msp430AlarmC__1__Msp430Compare__fired', quals=[], storage=['inline', 'static'] (at pp.c:13003)
      FuncDecl: quals=None (at pp.c:13003)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430Compare__fired', quals=[] (at pp.c:13003)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13004)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430TimerControl__disableEvents' (at pp.c:13005)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Alarm__fired' (at pp.c:13006)
  FuncDef:  (at pp.c:13010)
    Decl: name='Msp430TimerCapComP__5__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:13010)
      FuncDecl: quals=None (at pp.c:13010)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Compare__fired', quals=[] (at pp.c:13010)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13010)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430Compare__fired' (at pp.c:13012)
  FuncDef:  (at pp.c:13017)
    Decl: name='Msp430TimerCapComP__5__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:13017)
      FuncDecl: quals=None (at pp.c:13017)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Capture__getEvent', quals=[] (at pp.c:13017)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13018)
      Return:  (at pp.c:13019)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13019)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='406U' (at pp.c:13019)
  FuncDef:  (at pp.c:13023)
    Decl: name='Msp430TimerCapComP__5__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:13023)
      FuncDecl: quals=None (at pp.c:13023)
        ParamList:  (at pp.c:13023)
          Decl: name='n', quals=[], storage=[] (at pp.c:13023)
            TypeDecl: declname='n', quals=[] (at pp.c:13023)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Capture__default__captured', quals=[] (at pp.c:13023)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13024)
  FuncDef:  (at pp.c:13028)
    Decl: name='Msp430TimerCapComP__5__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:13028)
      FuncDecl: quals=None (at pp.c:13028)
        ParamList:  (at pp.c:13028)
          Decl: name='time', quals=[], storage=[] (at pp.c:13028)
            TypeDecl: declname='time', quals=[] (at pp.c:13028)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Capture__captured', quals=[] (at pp.c:13028)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13028)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Capture__default__captured' (at pp.c:13030)
        ExprList:  (at pp.c:13030)
          ID: name='time' (at pp.c:13030)
  FuncDef:  (at pp.c:13035)
    Decl: name='Msp430TimerCapComP__5__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:13035)
      FuncDecl: quals=None (at pp.c:13035)
        ParamList:  (at pp.c:13035)
          Decl: name='x', quals=[], storage=[] (at pp.c:13035)
            TypeDecl: declname='x', quals=[] (at pp.c:13035)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__int2CC', quals=[] (at pp.c:13035)
          IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
    Compound:  (at pp.c:13037)
      Decl: name='c', quals=[], storage=[] (at pp.c:13046)
        TypeDecl: declname='c', quals=[] (at pp.c:13046)
          Union: name='Msp430TimerCapComP__5____nesc_unnamed4403', packed=False (at pp.c:13039)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:13041)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:13043)
                IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
        ExprList:  (at pp.c:13046)
          Assignment: op='=' (at pp.c:13046)
            StructRef: type='.' (at pp.c:13046)
              ID: name='f' (at pp.c:13046)
            ID: name='x' (at pp.c:13046)
      Return:  (at pp.c:13049)
        StructRef: type='.' (at pp.c:13049)
          ID: name='c' (at pp.c:13049)
          ID: name='t' (at pp.c:13049)
  FuncDef:  (at pp.c:13053)
    Decl: name='Msp430TimerCapComP__5__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:13053)
      FuncDecl: quals=None (at pp.c:13053)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Control__getControl', quals=[] (at pp.c:13053)
          IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
    Compound:  (at pp.c:13054)
      Return:  (at pp.c:13055)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__5__int2CC' (at pp.c:13055)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:13055)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='390U' (at pp.c:13055)
  FuncDef:  (at pp.c:13059)
    Decl: name='Msp430TimerCapComP__5__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:13059)
      FuncDecl: quals=None (at pp.c:13059)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Event__fired', quals=[] (at pp.c:13059)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13060)
      If:  (at pp.c:13061)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__5__Control__getControl' (at pp.c:13061)
          ID: name='cap' (at pp.c:13061)
        Compound:  (at pp.c:13061)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__5__Capture__captured' (at pp.c:13062)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__5__Capture__getEvent' (at pp.c:13062)
        Compound:  (at pp.c:13064)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__5__Compare__fired' (at pp.c:13066)
  FuncDef:  (at pp.c:13071)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:13071)
      FuncDecl: quals=None (at pp.c:13071)
        ParamList:  (at pp.c:13071)
          Decl: name='id', quals=[], storage=[] (at pp.c:13071)
            TypeDecl: declname='id', quals=[] (at pp.c:13071)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13072)
            PtrDecl: quals=[] (at pp.c:13072)
              TypeDecl: declname='msg', quals=[] (at pp.c:13072)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff', quals=[] (at pp.c:13071)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13074)
  FuncDef:  (at pp.c:13078)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static', 'inline'] (at pp.c:13078)
      FuncDecl: quals=None (at pp.c:13078)
        ParamList:  (at pp.c:13078)
          Decl: name='arg_0x102a97d60', quals=[], storage=[] (at pp.c:13078)
            TypeDecl: declname='arg_0x102a97d60', quals=[] (at pp.c:13078)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13078)
            PtrDecl: quals=[] (at pp.c:13078)
              TypeDecl: declname='msg', quals=[] (at pp.c:13078)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:13078)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13078)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__default__requestCongestionBackoff' (at pp.c:13080)
        ExprList:  (at pp.c:13080)
          ID: name='arg_0x102a97d60' (at pp.c:13080)
          ID: name='msg' (at pp.c:13080)
  FuncDef:  (at pp.c:13085)
    Decl: name='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:13085)
      FuncDecl: quals=None (at pp.c:13085)
        ParamList:  (at pp.c:13085)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13085)
            PtrDecl: quals=[] (at pp.c:13085)
              TypeDecl: declname='msg', quals=[] (at pp.c:13085)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:13085)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13087)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__requestCongestionBackoff' (at pp.c:13088)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint8' (at pp.c:13088)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:13088)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['cc2420_header_t'] (at None)
                    BinaryOp: op='-' (at None)
                      BinaryOp: op='+' (at None)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            PtrDecl: quals=[] (at pp.c:13088)
                              TypeDecl: declname=None, quals=[] (at None)
                                IdentifierType: names=['uint8_t'] (at None)
                          ID: name='msg' (at pp.c:13088)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            TypeDecl: declname=None, quals=[] (at None)
                              IdentifierType: names=['size_t'] (at None)
                          UnaryOp: op='&' (at None)
                            StructRef: type='->' (at None)
                              Cast:  (at None)
                                Typename: quals=[] (at None)
                                  PtrDecl: quals=[] (at pp.c:13088)
                                    TypeDecl: declname=None, quals=[] (at None)
                                      IdentifierType: names=['message_t'] (at None)
                                Constant: type='int', value='0' (at pp.c:13088)
                              ID: name='data' (at pp.c:13088)
                      UnaryOp: op='sizeof' (at pp.c:13088)
                        Typename: quals=[] (at None)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['cc2420_header_t'] (at None)
                  ID: name='type' (at pp.c:13088)
                ID: name='nxdata' (at pp.c:13088)
          ID: name='msg' (at pp.c:13088)
  FuncDef:  (at pp.c:13092)
    Decl: name='__nesc_ntoh_uint16', quals=[], storage=['__inline', 'static'] (at pp.c:13092)
      FuncDecl: quals=None (at pp.c:13092)
        ParamList:  (at pp.c:13092)
          Decl: name='source', quals=['const'], storage=[] (at pp.c:13092)
            PtrDecl: quals=[] (at pp.c:13092)
              TypeDecl: declname='source', quals=['const'] (at pp.c:13092)
                IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_ntoh_uint16', quals=[] (at pp.c:13092)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13094)
      Decl: name='base', quals=['const'], storage=[] (at pp.c:13095)
        PtrDecl: quals=[] (at pp.c:13095)
          TypeDecl: declname='base', quals=['const'] (at pp.c:13095)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='source' (at pp.c:13095)
      Return:  (at pp.c:13098)
        BinaryOp: op='|' (at None)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
              ArrayRef:  (at pp.c:13098)
                ID: name='base' (at pp.c:13098)
                Constant: type='int', value='0' (at pp.c:13098)
            Constant: type='int', value='8' (at pp.c:13098)
          ArrayRef:  (at pp.c:13098)
            ID: name='base' (at pp.c:13098)
            Constant: type='int', value='1' (at pp.c:13098)
  FuncDef:  (at pp.c:13102)
    Decl: name='RandomMlcgC__Random__rand16', quals=[], storage=['inline', 'static'] (at pp.c:13102)
      FuncDecl: quals=None (at pp.c:13102)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RandomMlcgC__Random__rand16', quals=[] (at pp.c:13102)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13104)
      Return:  (at pp.c:13105)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['uint16_t'] (at None)
          FuncCall:  (at None)
            ID: name='RandomMlcgC__Random__rand32' (at pp.c:13105)
  FuncDef:  (at pp.c:13109)
    Decl: name='DefaultLplP__Random__rand16', quals=[], storage=['static', 'inline'] (at pp.c:13109)
      FuncDecl: quals=None (at pp.c:13109)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__Random__rand16', quals=[] (at pp.c:13109)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13109)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13111)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13111)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13115)
        ID: name='__nesc_result' (at pp.c:13115)
        FuncCall:  (at None)
          ID: name='RandomMlcgC__Random__rand16' (at pp.c:13115)
      Return:  (at pp.c:13119)
        ID: name='__nesc_result' (at pp.c:13119)
  FuncDef:  (at pp.c:13124)
    Decl: name='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:13124)
      FuncDecl: quals=None (at pp.c:13124)
        ParamList:  (at pp.c:13124)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:13124)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:13124)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:13124)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13126)
      Assignment: op='=' (at pp.c:13127)
        ID: name='CC2420TransmitP__myCongestionBackoff' (at pp.c:13127)
        BinaryOp: op='+' (at pp.c:13127)
          ID: name='backoffTime' (at pp.c:13127)
          Constant: type='int', value='1' (at pp.c:13127)
  FuncDef:  (at pp.c:13131)
    Decl: name='CC2420CsmaP__SubBackoff__setCongestionBackoff', quals=[], storage=['static', 'inline'] (at pp.c:13131)
      FuncDecl: quals=None (at pp.c:13131)
        ParamList:  (at pp.c:13131)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:13131)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:13131)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubBackoff__setCongestionBackoff', quals=[] (at pp.c:13131)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13131)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__RadioBackoff__setCongestionBackoff' (at pp.c:13133)
        ExprList:  (at pp.c:13133)
          ID: name='backoffTime' (at pp.c:13133)
  FuncDef:  (at pp.c:13138)
    Decl: name='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:13138)
      FuncDecl: quals=None (at pp.c:13138)
        ParamList:  (at pp.c:13138)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:13138)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:13138)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:13138)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13140)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__setCongestionBackoff' (at pp.c:13141)
        ExprList:  (at pp.c:13141)
          ID: name='backoffTime' (at pp.c:13141)
  FuncDef:  (at pp.c:13145)
    Decl: name='DefaultLplP__RadioBackoff__setCongestionBackoff', quals=[], storage=['static', 'inline'] (at pp.c:13145)
      FuncDecl: quals=None (at pp.c:13145)
        ParamList:  (at pp.c:13145)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:13145)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:13145)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioBackoff__setCongestionBackoff', quals=[] (at pp.c:13145)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13145)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__RadioBackoff__setCongestionBackoff' (at pp.c:13147)
        ExprList:  (at pp.c:13147)
          ID: name='backoffTime' (at pp.c:13147)
  FuncDef:  (at pp.c:13152)
    Decl: name='DefaultLplP__CC2420PacketBody__getMetadata', quals=[], storage=['static', 'inline'] (at pp.c:13152)
      FuncDecl: quals=None (at pp.c:13152)
        ParamList:  (at pp.c:13152)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13152)
            PtrDecl: quals=[] (at pp.c:13152)
              TypeDecl: declname='msg', quals=[] (at pp.c:13152)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:13152)
          TypeDecl: declname='DefaultLplP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:13152)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:13152)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13154)
        PtrDecl: quals=[] (at pp.c:13154)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13154)
            Struct: name='cc2420_metadata_t', packed=False (at pp.c:13154)
      Assignment: op='=' (at pp.c:13158)
        ID: name='__nesc_result' (at pp.c:13158)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:13158)
          ExprList:  (at pp.c:13158)
            ID: name='msg' (at pp.c:13158)
      Return:  (at pp.c:13162)
        ID: name='__nesc_result' (at pp.c:13162)
  FuncDef:  (at pp.c:13167)
    Decl: name='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:13167)
      FuncDecl: quals=None (at pp.c:13167)
        ParamList:  (at pp.c:13167)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13167)
            PtrDecl: quals=[] (at pp.c:13167)
              TypeDecl: declname='msg', quals=[] (at pp.c:13167)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:13167)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13169)
      If:  (at pp.c:13171)
        BinaryOp: op='>' (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_uint16' (at pp.c:13171)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  FuncCall:  (at None)
                    ID: name='DefaultLplP__CC2420PacketBody__getMetadata' (at pp.c:13173)
                    ExprList:  (at pp.c:13173)
                      ID: name='msg' (at pp.c:13173)
                  ID: name='rxInterval' (at pp.c:13173)
                ID: name='nxdata' (at pp.c:13173)
          ID: name='DefaultLplP__ONE_MESSAGE' (at pp.c:13174)
        Compound:  (at pp.c:13174)
          FuncCall:  (at None)
            ID: name='DefaultLplP__RadioBackoff__setCongestionBackoff' (at pp.c:13175)
            ExprList:  (at None)
              BinaryOp: op='+' (at None)
                BinaryOp: op='%' (at None)
                  FuncCall:  (at None)
                    ID: name='DefaultLplP__Random__rand16' (at pp.c:13175)
                  BinaryOp: op='*' (at pp.c:13176)
                    Constant: type='int', value='0x3' (at pp.c:13176)
                    ID: name='CC2420_BACKOFF_PERIOD' (at pp.c:13176)
                ID: name='CC2420_MIN_BACKOFF' (at pp.c:13176)
  FuncDef:  (at pp.c:13181)
    Decl: name='CC2420CsmaP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static', 'inline'] (at pp.c:13181)
      FuncDecl: quals=None (at pp.c:13181)
        ParamList:  (at pp.c:13181)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13181)
            PtrDecl: quals=[] (at pp.c:13181)
              TypeDecl: declname='msg', quals=[] (at pp.c:13181)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:13181)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13181)
      FuncCall:  (at None)
        ID: name='DefaultLplP__RadioBackoff__requestCongestionBackoff' (at pp.c:13183)
        ExprList:  (at pp.c:13183)
          ID: name='msg' (at pp.c:13183)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SubBackoff__requestCongestionBackoff' (at pp.c:13185)
        ExprList:  (at pp.c:13185)
          ID: name='msg' (at pp.c:13185)
  FuncDef:  (at pp.c:13190)
    Decl: name='CC2420CsmaP__Random__rand16', quals=[], storage=['static', 'inline'] (at pp.c:13190)
      FuncDecl: quals=None (at pp.c:13190)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__Random__rand16', quals=[] (at pp.c:13190)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13190)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13192)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13192)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13196)
        ID: name='__nesc_result' (at pp.c:13196)
        FuncCall:  (at None)
          ID: name='RandomMlcgC__Random__rand16' (at pp.c:13196)
      Return:  (at pp.c:13200)
        ID: name='__nesc_result' (at pp.c:13200)
  FuncDef:  (at pp.c:13205)
    Decl: name='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[], storage=['inline', 'static'] (at pp.c:13205)
      FuncDecl: quals=None (at pp.c:13205)
        ParamList:  (at pp.c:13205)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13205)
            PtrDecl: quals=[] (at pp.c:13205)
              TypeDecl: declname='msg', quals=[] (at pp.c:13205)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubBackoff__requestCongestionBackoff', quals=[] (at pp.c:13205)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13207)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__setCongestionBackoff' (at pp.c:13208)
        ExprList:  (at None)
          BinaryOp: op='+' (at None)
            BinaryOp: op='%' (at None)
              FuncCall:  (at None)
                ID: name='CC2420CsmaP__Random__rand16' (at pp.c:13208)
              BinaryOp: op='*' (at pp.c:13209)
                Constant: type='int', value='0x7' (at pp.c:13209)
                ID: name='CC2420_BACKOFF_PERIOD' (at pp.c:13209)
            ID: name='CC2420_MIN_BACKOFF' (at pp.c:13209)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__RadioBackoff__requestCongestionBackoff' (at pp.c:13211)
        ExprList:  (at pp.c:13211)
          ID: name='msg' (at pp.c:13211)
  FuncDef:  (at pp.c:13215)
    Decl: name='CC2420TransmitP__RadioBackoff__requestCongestionBackoff', quals=[], storage=['static', 'inline'] (at pp.c:13215)
      FuncDecl: quals=None (at pp.c:13215)
        ParamList:  (at pp.c:13215)
          Decl: name='msg', quals=[], storage=[] (at pp.c:13215)
            PtrDecl: quals=[] (at pp.c:13215)
              TypeDecl: declname='msg', quals=[] (at pp.c:13215)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__RadioBackoff__requestCongestionBackoff', quals=[] (at pp.c:13215)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13215)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__requestCongestionBackoff' (at pp.c:13217)
        ExprList:  (at pp.c:13217)
          ID: name='msg' (at pp.c:13217)
  FuncDef:  (at pp.c:13222)
    Decl: name='CC2420TransmitP__SpiResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:13222)
      FuncDecl: quals=None (at pp.c:13222)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SpiResource__immediateRequest', quals=[] (at pp.c:13222)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13222)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13224)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13224)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13228)
        ID: name='__nesc_result' (at pp.c:13228)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__immediateRequest' (at pp.c:13228)
          ExprList:  (at pp.c:13228)
            ID: name='CC2420SpiC__3__CLIENT_ID' (at pp.c:13228)
      Return:  (at pp.c:13232)
        ID: name='__nesc_result' (at pp.c:13232)
  FuncDef:  (at pp.c:13237)
    Decl: name='CC2420SpiP__WorkingState__requestState', quals=[], storage=['static', 'inline'] (at pp.c:13237)
      FuncDecl: quals=None (at pp.c:13237)
        ParamList:  (at pp.c:13237)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:13237)
            TypeDecl: declname='reqState', quals=[] (at pp.c:13237)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__WorkingState__requestState', quals=[] (at pp.c:13237)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13237)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13239)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13239)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13243)
        ID: name='__nesc_result' (at pp.c:13243)
        FuncCall:  (at None)
          ID: name='StateImplP__State__requestState' (at pp.c:13243)
          ExprList:  (at pp.c:13243)
            Constant: type='int', value='0U' (at pp.c:13243)
            ID: name='reqState' (at pp.c:13243)
      Return:  (at pp.c:13247)
        ID: name='__nesc_result' (at pp.c:13247)
  FuncDef:  (at pp.c:13252)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:13252)
      FuncDecl: quals=None (at pp.c:13252)
        ParamList:  (at pp.c:13252)
          Decl: name='id', quals=[], storage=[] (at pp.c:13252)
            TypeDecl: declname='id', quals=[] (at pp.c:13252)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__isOwner', quals=[] (at pp.c:13252)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13254)
      Return:  (at pp.c:13256)
        ID: name='FAIL' (at pp.c:13256)
  FuncDef:  (at pp.c:13260)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__isOwner', quals=[], storage=['static', 'inline'] (at pp.c:13260)
      FuncDecl: quals=None (at pp.c:13260)
        ParamList:  (at pp.c:13260)
          Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:13260)
            TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:13260)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__isOwner', quals=[] (at pp.c:13260)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:13260)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13262)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13262)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:13266)
        ID: name='arg_0x101c3a020' (at pp.c:13266)
        Compound:  (at pp.c:13266)
          Case:  (at pp.c:13268)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:13268)
            Assignment: op='=' (at pp.c:13270)
              ID: name='__nesc_result' (at pp.c:13270)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__isOwner' (at pp.c:13270)
                ExprList:  (at pp.c:13270)
                  ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:13270)
          Break:  (at pp.c:13272)
          Case:  (at pp.c:13274)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:13274)
            Assignment: op='=' (at pp.c:13276)
              ID: name='__nesc_result' (at pp.c:13276)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__isOwner' (at pp.c:13276)
                ExprList:  (at pp.c:13276)
                  ID: name='Msp430Usart0C__1__CLIENT_ID' (at pp.c:13276)
          Break:  (at pp.c:13278)
          Default:  (at pp.c:13280)
            Assignment: op='=' (at pp.c:13282)
              ID: name='__nesc_result' (at pp.c:13282)
              FuncCall:  (at None)
                ID: name='Msp430SpiNoDmaP__0__UsartResource__default__isOwner' (at pp.c:13282)
                ExprList:  (at pp.c:13282)
                  ID: name='arg_0x101c3a020' (at pp.c:13282)
          Break:  (at pp.c:13284)
      Return:  (at pp.c:13290)
        ID: name='__nesc_result' (at pp.c:13290)
  FuncDef:  (at pp.c:13295)
    Decl: name='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:13295)
      FuncDecl: quals=None (at pp.c:13295)
        ParamList:  (at pp.c:13295)
          Decl: name='id', quals=[], storage=[] (at pp.c:13295)
            TypeDecl: declname='id', quals=[] (at pp.c:13295)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__isOwner', quals=[] (at pp.c:13295)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:13297)
      Return:  (at pp.c:13298)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__UsartResource__isOwner' (at pp.c:13298)
          ExprList:  (at pp.c:13298)
            ID: name='id' (at pp.c:13298)
  FuncDef:  (at pp.c:13302)
    Decl: name='CC2420SpiP__SpiResource__isOwner', quals=[], storage=['static', 'inline'] (at pp.c:13302)
      FuncDecl: quals=None (at pp.c:13302)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiResource__isOwner', quals=[] (at pp.c:13302)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:13302)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13304)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13304)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13308)
        ID: name='__nesc_result' (at pp.c:13308)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Resource__isOwner' (at pp.c:13308)
          ExprList:  (at pp.c:13308)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:13308)
      Return:  (at pp.c:13312)
        ID: name='__nesc_result' (at pp.c:13312)
  FuncDef:  (at pp.c:13317)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:13317)
      FuncDecl: quals=None (at pp.c:13317)
        ParamList:  (at pp.c:13317)
          Decl: name='id', quals=[], storage=[] (at pp.c:13317)
            TypeDecl: declname='id', quals=[] (at pp.c:13317)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest', quals=[] (at pp.c:13317)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13319)
      Return:  (at pp.c:13321)
        ID: name='FAIL' (at pp.c:13321)
  FuncDef:  (at pp.c:13325)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:13325)
      FuncDecl: quals=None (at pp.c:13325)
        ParamList:  (at pp.c:13325)
          Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:13325)
            TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:13325)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__immediateRequest', quals=[] (at pp.c:13325)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13325)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13327)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13327)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:13331)
        ID: name='arg_0x101c3a020' (at pp.c:13331)
        Compound:  (at pp.c:13331)
          Case:  (at pp.c:13333)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:13333)
            Assignment: op='=' (at pp.c:13335)
              ID: name='__nesc_result' (at pp.c:13335)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__immediateRequest' (at pp.c:13335)
                ExprList:  (at pp.c:13335)
                  ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:13335)
          Break:  (at pp.c:13337)
          Case:  (at pp.c:13339)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:13339)
            Assignment: op='=' (at pp.c:13341)
              ID: name='__nesc_result' (at pp.c:13341)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__immediateRequest' (at pp.c:13341)
                ExprList:  (at pp.c:13341)
                  ID: name='Msp430Usart0C__1__CLIENT_ID' (at pp.c:13341)
          Break:  (at pp.c:13343)
          Default:  (at pp.c:13345)
            Assignment: op='=' (at pp.c:13347)
              ID: name='__nesc_result' (at pp.c:13347)
              FuncCall:  (at None)
                ID: name='Msp430SpiNoDmaP__0__UsartResource__default__immediateRequest' (at pp.c:13347)
                ExprList:  (at pp.c:13347)
                  ID: name='arg_0x101c3a020' (at pp.c:13347)
          Break:  (at pp.c:13349)
      Return:  (at pp.c:13355)
        ID: name='__nesc_result' (at pp.c:13355)
  FuncDef:  (at pp.c:13360)
    Decl: name='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:13360)
      FuncDecl: quals=None (at pp.c:13360)
        ParamList:  (at pp.c:13360)
          Decl: name='id', quals=[], storage=[] (at pp.c:13360)
            TypeDecl: declname='id', quals=[] (at pp.c:13360)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__immediateRequest', quals=[] (at pp.c:13360)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13362)
      Return:  (at pp.c:13363)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__UsartResource__immediateRequest' (at pp.c:13363)
          ExprList:  (at pp.c:13363)
            ID: name='id' (at pp.c:13363)
  FuncDef:  (at pp.c:13367)
    Decl: name='CC2420SpiP__SpiResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:13367)
      FuncDecl: quals=None (at pp.c:13367)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiResource__immediateRequest', quals=[] (at pp.c:13367)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13367)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13369)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13369)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13373)
        ID: name='__nesc_result' (at pp.c:13373)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Resource__immediateRequest' (at pp.c:13373)
          ExprList:  (at pp.c:13373)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:13373)
      Return:  (at pp.c:13377)
        ID: name='__nesc_result' (at pp.c:13377)
  FuncDef:  (at pp.c:13382)
    Decl: name='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:13382)
      FuncDecl: quals=None (at pp.c:13382)
        ParamList:  (at pp.c:13382)
          Decl: name='id', quals=[], storage=[] (at pp.c:13382)
            TypeDecl: declname='id', quals=[] (at pp.c:13382)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceRequested__default__immediateRequested', quals=[] (at pp.c:13382)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13384)
  FuncDef:  (at pp.c:13388)
    Decl: name='ArbiterP__1__ResourceRequested__immediateRequested', quals=[], storage=['static', 'inline'] (at pp.c:13388)
      FuncDecl: quals=None (at pp.c:13388)
        ParamList:  (at pp.c:13388)
          Decl: name='arg_0x101ac2020', quals=[], storage=[] (at pp.c:13388)
            TypeDecl: declname='arg_0x101ac2020', quals=[] (at pp.c:13388)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceRequested__immediateRequested', quals=[] (at pp.c:13388)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13388)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceRequested__default__immediateRequested' (at pp.c:13390)
        ExprList:  (at pp.c:13390)
          ID: name='arg_0x101ac2020' (at pp.c:13390)
  FuncDef:  (at pp.c:13395)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[], storage=['inline', 'static'] (at pp.c:13395)
      FuncDecl: quals=None (at pp.c:13395)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested', quals=[] (at pp.c:13395)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13397)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__release' (at pp.c:13398)
  FuncDef:  (at pp.c:13402)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__immediateRequested', quals=[], storage=['static', 'inline'] (at pp.c:13402)
      FuncDecl: quals=None (at pp.c:13402)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__immediateRequested', quals=[] (at pp.c:13402)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13402)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__default__immediateRequested' (at pp.c:13404)
  FuncDef:  (at pp.c:13409)
    Decl: name='HplMsp430I2C0P__HplUsart__resetUsart', quals=[], storage=['static', 'inline'] (at pp.c:13409)
      FuncDecl: quals=None (at pp.c:13409)
        ParamList:  (at pp.c:13409)
          Decl: name='reset', quals=[], storage=[] (at pp.c:13409)
            TypeDecl: declname='reset', quals=[] (at pp.c:13409)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='HplMsp430I2C0P__HplUsart__resetUsart', quals=[] (at pp.c:13409)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13409)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__resetUsart' (at pp.c:13411)
        ExprList:  (at pp.c:13411)
          ID: name='reset' (at pp.c:13411)
  FuncDef:  (at pp.c:13416)
    Decl: name='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[], storage=['inline', 'static'] (at pp.c:13416)
      FuncDecl: quals=None (at pp.c:13416)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430I2C0P__HplI2C__clearModeI2C', quals=[] (at pp.c:13416)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13418)
      Compound:  (at pp.c:13421)
        Assignment: op='&=' (at pp.c:13422)
          ID: name='HplMsp430I2C0P__U0CTL' (at pp.c:13422)
          UnaryOp: op='~' (at pp.c:13422)
            BinaryOp: op='|' (at pp.c:13422)
              BinaryOp: op='|' (at pp.c:13422)
                Constant: type='int', value='0x20' (at pp.c:13422)
                Constant: type='int', value='0x04' (at pp.c:13422)
              Constant: type='int', value='0x01' (at pp.c:13422)
        FuncCall:  (at None)
          ID: name='HplMsp430I2C0P__HplUsart__resetUsart' (at pp.c:13423)
          ExprList:  (at pp.c:13423)
            ID: name='TRUE' (at pp.c:13423)
  FuncDef:  (at pp.c:13428)
    Decl: name='HplMsp430Usart0P__HplI2C__clearModeI2C', quals=[], storage=['static', 'inline'] (at pp.c:13428)
      FuncDecl: quals=None (at pp.c:13428)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__HplI2C__clearModeI2C', quals=[] (at pp.c:13428)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13428)
      FuncCall:  (at None)
        ID: name='HplMsp430I2C0P__HplI2C__clearModeI2C' (at pp.c:13430)
  FuncDef:  (at pp.c:13435)
    Decl: name='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:13435)
      FuncDecl: quals=None (at pp.c:13435)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__21__IO__selectIOFunc', quals=[] (at pp.c:13435)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13437)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13440)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:13440)
        UnaryOp: op='~' (at pp.c:13440)
          BinaryOp: op='<<' (at pp.c:13440)
            Constant: type='int', value='0x01' (at pp.c:13440)
            Constant: type='int', value='5' (at pp.c:13440)
  FuncDef:  (at pp.c:13444)
    Decl: name='HplMsp430Usart0P__URXD__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:13444)
      FuncDecl: quals=None (at pp.c:13444)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__URXD__selectIOFunc', quals=[] (at pp.c:13444)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13444)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__21__IO__selectIOFunc' (at pp.c:13446)
  FuncDef:  (at pp.c:13451)
    Decl: name='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:13451)
      FuncDecl: quals=None (at pp.c:13451)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__20__IO__selectIOFunc', quals=[] (at pp.c:13451)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13453)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13456)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:13456)
        UnaryOp: op='~' (at pp.c:13456)
          BinaryOp: op='<<' (at pp.c:13456)
            Constant: type='int', value='0x01' (at pp.c:13456)
            Constant: type='int', value='4' (at pp.c:13456)
  FuncDef:  (at pp.c:13460)
    Decl: name='HplMsp430Usart0P__UTXD__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:13460)
      FuncDecl: quals=None (at pp.c:13460)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__UTXD__selectIOFunc', quals=[] (at pp.c:13460)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13460)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__20__IO__selectIOFunc' (at pp.c:13462)
  FuncDef:  (at pp.c:13467)
    Decl: name='HplMsp430Usart0P__Usart__disableUart', quals=[], storage=['inline', 'static'] (at pp.c:13467)
      FuncDecl: quals=None (at pp.c:13467)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__disableUart', quals=[] (at pp.c:13467)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13469)
      Compound:  (at pp.c:13472)
        Assignment: op='&=' (at pp.c:13473)
          ID: name='HplMsp430Usart0P__ME1' (at pp.c:13473)
          UnaryOp: op='~' (at pp.c:13473)
            BinaryOp: op='|' (at pp.c:13473)
              BinaryOp: op='<<' (at pp.c:13473)
                Constant: type='int', value='1' (at pp.c:13473)
                Constant: type='int', value='7' (at pp.c:13473)
              BinaryOp: op='<<' (at pp.c:13473)
                Constant: type='int', value='1' (at pp.c:13473)
                Constant: type='int', value='6' (at pp.c:13473)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__UTXD__selectIOFunc' (at pp.c:13474)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__URXD__selectIOFunc' (at pp.c:13475)
  FuncDef:  (at pp.c:13480)
    Decl: name='HplMsp430Usart0P__Usart__setUmctl', quals=[], storage=['inline', 'static'] (at pp.c:13480)
      FuncDecl: quals=None (at pp.c:13480)
        ParamList:  (at pp.c:13480)
          Decl: name='control', quals=[], storage=[] (at pp.c:13480)
            TypeDecl: declname='control', quals=[] (at pp.c:13480)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__setUmctl', quals=[] (at pp.c:13480)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13482)
      Assignment: op='=' (at pp.c:13483)
        ID: name='U0MCTL' (at pp.c:13483)
        ID: name='control' (at pp.c:13483)
  FuncDef:  (at pp.c:13487)
    Decl: name='HplMsp430Usart0P__Usart__setUbr', quals=[], storage=['inline', 'static'] (at pp.c:13487)
      FuncDecl: quals=None (at pp.c:13487)
        ParamList:  (at pp.c:13487)
          Decl: name='control', quals=[], storage=[] (at pp.c:13487)
            TypeDecl: declname='control', quals=[] (at pp.c:13487)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__setUbr', quals=[] (at pp.c:13487)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13489)
      Compound:  (at pp.c:13492)
        Assignment: op='=' (at pp.c:13493)
          ID: name='U0BR0' (at pp.c:13493)
          BinaryOp: op='&' (at pp.c:13493)
            ID: name='control' (at pp.c:13493)
            Constant: type='int', value='0x00FF' (at pp.c:13493)
        Assignment: op='=' (at pp.c:13494)
          ID: name='U0BR1' (at pp.c:13494)
          BinaryOp: op='&' (at pp.c:13494)
            BinaryOp: op='>>' (at pp.c:13494)
              ID: name='control' (at pp.c:13494)
              Constant: type='int', value='8' (at pp.c:13494)
            Constant: type='int', value='0x00FF' (at pp.c:13494)
  FuncDef:  (at pp.c:13499)
    Decl: name='HplMsp430Usart0P__configSpi', quals=[], storage=['inline', 'static'] (at pp.c:13499)
      FuncDecl: quals=None (at pp.c:13499)
        ParamList:  (at pp.c:13499)
          Decl: name='config', quals=[], storage=[] (at pp.c:13499)
            PtrDecl: quals=[] (at pp.c:13499)
              TypeDecl: declname='config', quals=[] (at pp.c:13499)
                IdentifierType: names=['msp430_spi_union_config_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__configSpi', quals=[] (at pp.c:13499)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13501)
      Assignment: op='=' (at pp.c:13503)
        ID: name='U0CTL' (at pp.c:13503)
        BinaryOp: op='|' (at pp.c:13503)
          BinaryOp: op='|' (at pp.c:13503)
            StructRef: type='.' (at pp.c:13503)
              StructRef: type='->' (at pp.c:13503)
                ID: name='config' (at pp.c:13503)
                ID: name='spiRegisters' (at pp.c:13503)
              ID: name='uctl' (at pp.c:13503)
            Constant: type='int', value='0x04' (at pp.c:13503)
          Constant: type='int', value='0x01' (at pp.c:13503)
      Assignment: op='=' (at pp.c:13504)
        ID: name='HplMsp430Usart0P__U0TCTL' (at pp.c:13504)
        StructRef: type='.' (at pp.c:13504)
          StructRef: type='->' (at pp.c:13504)
            ID: name='config' (at pp.c:13504)
            ID: name='spiRegisters' (at pp.c:13504)
          ID: name='utctl' (at pp.c:13504)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__setUbr' (at pp.c:13506)
        ExprList:  (at pp.c:13506)
          StructRef: type='.' (at pp.c:13506)
            StructRef: type='->' (at pp.c:13506)
              ID: name='config' (at pp.c:13506)
              ID: name='spiRegisters' (at pp.c:13506)
            ID: name='ubr' (at pp.c:13506)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__setUmctl' (at pp.c:13507)
        ExprList:  (at pp.c:13507)
          Constant: type='int', value='0x00' (at pp.c:13507)
  FuncDef:  (at pp.c:13511)
    Decl: name='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:13511)
      FuncDecl: quals=None (at pp.c:13511)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__19__IO__selectModuleFunc', quals=[] (at pp.c:13511)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13513)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13516)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:13516)
        BinaryOp: op='<<' (at pp.c:13516)
          Constant: type='int', value='0x01' (at pp.c:13516)
          Constant: type='int', value='3' (at pp.c:13516)
  FuncDef:  (at pp.c:13520)
    Decl: name='HplMsp430Usart0P__UCLK__selectModuleFunc', quals=[], storage=['static', 'inline'] (at pp.c:13520)
      FuncDecl: quals=None (at pp.c:13520)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__UCLK__selectModuleFunc', quals=[] (at pp.c:13520)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13520)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__19__IO__selectModuleFunc' (at pp.c:13522)
  FuncDef:  (at pp.c:13527)
    Decl: name='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:13527)
      FuncDecl: quals=None (at pp.c:13527)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__18__IO__selectModuleFunc', quals=[] (at pp.c:13527)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13529)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13532)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:13532)
        BinaryOp: op='<<' (at pp.c:13532)
          Constant: type='int', value='0x01' (at pp.c:13532)
          Constant: type='int', value='2' (at pp.c:13532)
  FuncDef:  (at pp.c:13536)
    Decl: name='HplMsp430Usart0P__SOMI__selectModuleFunc', quals=[], storage=['static', 'inline'] (at pp.c:13536)
      FuncDecl: quals=None (at pp.c:13536)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__SOMI__selectModuleFunc', quals=[] (at pp.c:13536)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13536)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__18__IO__selectModuleFunc' (at pp.c:13538)
  FuncDef:  (at pp.c:13543)
    Decl: name='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[], storage=['inline', 'static'] (at pp.c:13543)
      FuncDecl: quals=None (at pp.c:13543)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__17__IO__selectModuleFunc', quals=[] (at pp.c:13543)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13545)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13548)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='27U' (at pp.c:13548)
        BinaryOp: op='<<' (at pp.c:13548)
          Constant: type='int', value='0x01' (at pp.c:13548)
          Constant: type='int', value='1' (at pp.c:13548)
  FuncDef:  (at pp.c:13552)
    Decl: name='HplMsp430Usart0P__SIMO__selectModuleFunc', quals=[], storage=['static', 'inline'] (at pp.c:13552)
      FuncDecl: quals=None (at pp.c:13552)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__SIMO__selectModuleFunc', quals=[] (at pp.c:13552)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13552)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__17__IO__selectModuleFunc' (at pp.c:13554)
  FuncDef:  (at pp.c:13559)
    Decl: name='HplMsp430Usart0P__Usart__enableSpi', quals=[], storage=['inline', 'static'] (at pp.c:13559)
      FuncDecl: quals=None (at pp.c:13559)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__enableSpi', quals=[] (at pp.c:13559)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13561)
      Compound:  (at pp.c:13564)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__SIMO__selectModuleFunc' (at pp.c:13565)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__SOMI__selectModuleFunc' (at pp.c:13566)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__UCLK__selectModuleFunc' (at pp.c:13567)
      Assignment: op='|=' (at pp.c:13569)
        ID: name='HplMsp430Usart0P__ME1' (at pp.c:13569)
        BinaryOp: op='<<' (at pp.c:13569)
          Constant: type='int', value='1' (at pp.c:13569)
          Constant: type='int', value='6' (at pp.c:13569)
  FuncDef:  (at pp.c:13573)
    Decl: name='HplMsp430Usart0P__Usart__clrIntr', quals=[], storage=['inline', 'static'] (at pp.c:13573)
      FuncDecl: quals=None (at pp.c:13573)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__clrIntr', quals=[] (at pp.c:13573)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13575)
      Assignment: op='&=' (at pp.c:13576)
        ID: name='HplMsp430Usart0P__IFG1' (at pp.c:13576)
        UnaryOp: op='~' (at pp.c:13576)
          BinaryOp: op='|' (at pp.c:13576)
            BinaryOp: op='<<' (at pp.c:13576)
              Constant: type='int', value='1' (at pp.c:13576)
              Constant: type='int', value='7' (at pp.c:13576)
            BinaryOp: op='<<' (at pp.c:13576)
              Constant: type='int', value='1' (at pp.c:13576)
              Constant: type='int', value='6' (at pp.c:13576)
  FuncDef:  (at pp.c:13587)
    Decl: name='HplMsp430Usart0P__Usart__disableIntr', quals=[], storage=['inline', 'static'] (at pp.c:13587)
      FuncDecl: quals=None (at pp.c:13587)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__disableIntr', quals=[] (at pp.c:13587)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13589)
      Assignment: op='&=' (at pp.c:13590)
        ID: name='HplMsp430Usart0P__IE1' (at pp.c:13590)
        UnaryOp: op='~' (at pp.c:13590)
          BinaryOp: op='|' (at pp.c:13590)
            BinaryOp: op='<<' (at pp.c:13590)
              Constant: type='int', value='1' (at pp.c:13590)
              Constant: type='int', value='7' (at pp.c:13590)
            BinaryOp: op='<<' (at pp.c:13590)
              Constant: type='int', value='1' (at pp.c:13590)
              Constant: type='int', value='6' (at pp.c:13590)
  FuncDef:  (at pp.c:13594)
    Decl: name='CC2420TransmitP__SpiResource__request', quals=[], storage=['static', 'inline'] (at pp.c:13594)
      FuncDecl: quals=None (at pp.c:13594)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SpiResource__request', quals=[] (at pp.c:13594)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13594)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13596)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13596)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13600)
        ID: name='__nesc_result' (at pp.c:13600)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__request' (at pp.c:13600)
          ExprList:  (at pp.c:13600)
            ID: name='CC2420SpiC__3__CLIENT_ID' (at pp.c:13600)
      Return:  (at pp.c:13604)
        ID: name='__nesc_result' (at pp.c:13604)
  FuncDef:  (at pp.c:13609)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[], storage=['inline', 'static'] (at pp.c:13609)
      FuncDecl: quals=None (at pp.c:13609)
        ParamList:  (at pp.c:13609)
          Decl: name='id', quals=[], storage=[] (at pp.c:13609)
            TypeDecl: declname='id', quals=[] (at pp.c:13609)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__default__request', quals=[] (at pp.c:13609)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13611)
      Return:  (at pp.c:13613)
        ID: name='FAIL' (at pp.c:13613)
  FuncDef:  (at pp.c:13617)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__request', quals=[], storage=['static', 'inline'] (at pp.c:13617)
      FuncDecl: quals=None (at pp.c:13617)
        ParamList:  (at pp.c:13617)
          Decl: name='arg_0x101c3a020', quals=[], storage=[] (at pp.c:13617)
            TypeDecl: declname='arg_0x101c3a020', quals=[] (at pp.c:13617)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__request', quals=[] (at pp.c:13617)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13617)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13619)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13619)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:13623)
        ID: name='arg_0x101c3a020' (at pp.c:13623)
        Compound:  (at pp.c:13623)
          Case:  (at pp.c:13625)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:13625)
            Assignment: op='=' (at pp.c:13627)
              ID: name='__nesc_result' (at pp.c:13627)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__request' (at pp.c:13627)
                ExprList:  (at pp.c:13627)
                  ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:13627)
          Break:  (at pp.c:13629)
          Case:  (at pp.c:13631)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:13631)
            Assignment: op='=' (at pp.c:13633)
              ID: name='__nesc_result' (at pp.c:13633)
              FuncCall:  (at None)
                ID: name='ArbiterP__1__Resource__request' (at pp.c:13633)
                ExprList:  (at pp.c:13633)
                  ID: name='Msp430Usart0C__1__CLIENT_ID' (at pp.c:13633)
          Break:  (at pp.c:13635)
          Default:  (at pp.c:13637)
            Assignment: op='=' (at pp.c:13639)
              ID: name='__nesc_result' (at pp.c:13639)
              FuncCall:  (at None)
                ID: name='Msp430SpiNoDmaP__0__UsartResource__default__request' (at pp.c:13639)
                ExprList:  (at pp.c:13639)
                  ID: name='arg_0x101c3a020' (at pp.c:13639)
          Break:  (at pp.c:13641)
      Return:  (at pp.c:13647)
        ID: name='__nesc_result' (at pp.c:13647)
  FuncDef:  (at pp.c:13652)
    Decl: name='Msp430SpiNoDmaP__0__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:13652)
      FuncDecl: quals=None (at pp.c:13652)
        ParamList:  (at pp.c:13652)
          Decl: name='id', quals=[], storage=[] (at pp.c:13652)
            TypeDecl: declname='id', quals=[] (at pp.c:13652)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__request', quals=[] (at pp.c:13652)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13654)
      Return:  (at pp.c:13655)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__UsartResource__request' (at pp.c:13655)
          ExprList:  (at pp.c:13655)
            ID: name='id' (at pp.c:13655)
  FuncDef:  (at pp.c:13659)
    Decl: name='CC2420SpiP__SpiResource__request', quals=[], storage=['static', 'inline'] (at pp.c:13659)
      FuncDecl: quals=None (at pp.c:13659)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiResource__request', quals=[] (at pp.c:13659)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13659)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13661)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13661)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13665)
        ID: name='__nesc_result' (at pp.c:13665)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Resource__request' (at pp.c:13665)
          ExprList:  (at pp.c:13665)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:13665)
      Return:  (at pp.c:13669)
        ID: name='__nesc_result' (at pp.c:13669)
  FuncDef:  (at pp.c:13674)
    Decl: name='ArbiterP__1__ResourceRequested__default__requested', quals=[], storage=['inline', 'static'] (at pp.c:13674)
      FuncDecl: quals=None (at pp.c:13674)
        ParamList:  (at pp.c:13674)
          Decl: name='id', quals=[], storage=[] (at pp.c:13674)
            TypeDecl: declname='id', quals=[] (at pp.c:13674)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceRequested__default__requested', quals=[] (at pp.c:13674)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13676)
  FuncDef:  (at pp.c:13680)
    Decl: name='ArbiterP__1__ResourceRequested__requested', quals=[], storage=['static', 'inline'] (at pp.c:13680)
      FuncDecl: quals=None (at pp.c:13680)
        ParamList:  (at pp.c:13680)
          Decl: name='arg_0x101ac2020', quals=[], storage=[] (at pp.c:13680)
            TypeDecl: declname='arg_0x101ac2020', quals=[] (at pp.c:13680)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceRequested__requested', quals=[] (at pp.c:13680)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13680)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceRequested__default__requested' (at pp.c:13682)
        ExprList:  (at pp.c:13682)
          ID: name='arg_0x101ac2020' (at pp.c:13682)
  FuncDef:  (at pp.c:13687)
    Decl: name='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[], storage=['inline', 'static'] (at pp.c:13687)
      FuncDecl: quals=None (at pp.c:13687)
        ParamList:  (at pp.c:13687)
          Decl: name='id', quals=[], storage=[] (at pp.c:13687)
            TypeDecl: declname='id', quals=[] (at pp.c:13687)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__isEnqueued', quals=[] (at pp.c:13687)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:13689)
      Compound:  (at pp.c:13692)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:13693)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:13693)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='||' (at pp.c:13695)
            BinaryOp: op='!=' (at pp.c:13695)
              ArrayRef:  (at pp.c:13695)
                ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:13695)
                ID: name='id' (at pp.c:13695)
              ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:13695)
            BinaryOp: op='==' (at pp.c:13695)
              ID: name='FcfsResourceQueueC__2__qTail' (at pp.c:13695)
              ID: name='id' (at pp.c:13695)
        Return:  (at pp.c:13698)
          ID: name='__nesc_temp' (at pp.c:13698)
  FuncDef:  (at pp.c:13703)
    Decl: name='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:13703)
      FuncDecl: quals=None (at pp.c:13703)
        ParamList:  (at pp.c:13703)
          Decl: name='id', quals=[], storage=[] (at pp.c:13703)
            TypeDecl: declname='id', quals=[] (at pp.c:13703)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__2__FcfsQueue__enqueue', quals=[] (at pp.c:13703)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13705)
      Compound:  (at pp.c:13708)
        If:  (at pp.c:13709)
          UnaryOp: op='!' (at None)
            FuncCall:  (at None)
              ID: name='FcfsResourceQueueC__2__FcfsQueue__isEnqueued' (at pp.c:13709)
              ExprList:  (at pp.c:13709)
                ID: name='id' (at pp.c:13709)
          Compound:  (at pp.c:13709)
            If:  (at pp.c:13710)
              BinaryOp: op='==' (at pp.c:13710)
                ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:13710)
                ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:13710)
              Compound:  (at pp.c:13710)
                Assignment: op='=' (at pp.c:13711)
                  ID: name='FcfsResourceQueueC__2__qHead' (at pp.c:13711)
                  ID: name='id' (at pp.c:13711)
              Compound:  (at pp.c:13713)
                Assignment: op='=' (at pp.c:13715)
                  ArrayRef:  (at pp.c:13715)
                    ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:13715)
                    ID: name='FcfsResourceQueueC__2__qTail' (at pp.c:13715)
                  ID: name='id' (at pp.c:13715)
            Assignment: op='=' (at pp.c:13718)
              ID: name='FcfsResourceQueueC__2__qTail' (at pp.c:13718)
              ID: name='id' (at pp.c:13718)
            Compound:  (at pp.c:13719)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:13720)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:13720)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='SUCCESS' (at pp.c:13722)
              Return:  (at pp.c:13725)
                ID: name='__nesc_temp' (at pp.c:13725)
        Compound:  (at pp.c:13729)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:13730)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:13730)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='EBUSY' (at pp.c:13732)
          Return:  (at pp.c:13735)
            ID: name='__nesc_temp' (at pp.c:13735)
  FuncDef:  (at pp.c:13741)
    Decl: name='ArbiterP__1__Queue__enqueue', quals=[], storage=['static', 'inline'] (at pp.c:13741)
      FuncDecl: quals=None (at pp.c:13741)
        ParamList:  (at pp.c:13741)
          Decl: name='id', quals=[], storage=[] (at pp.c:13741)
            TypeDecl: declname='id', quals=[] (at pp.c:13741)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Queue__enqueue', quals=[] (at pp.c:13741)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:13741)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13743)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13743)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13747)
        ID: name='__nesc_result' (at pp.c:13747)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__2__FcfsQueue__enqueue' (at pp.c:13747)
          ExprList:  (at pp.c:13747)
            ID: name='id' (at pp.c:13747)
      Return:  (at pp.c:13751)
        ID: name='__nesc_result' (at pp.c:13751)
  FuncDef:  (at pp.c:13756)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[], storage=['inline', 'static'] (at pp.c:13756)
      FuncDecl: quals=None (at pp.c:13756)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__default__requested', quals=[] (at pp.c:13756)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13758)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__release' (at pp.c:13759)
  FuncDef:  (at pp.c:13763)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__requested', quals=[], storage=['static', 'inline'] (at pp.c:13763)
      FuncDecl: quals=None (at pp.c:13763)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__requested', quals=[] (at pp.c:13763)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13763)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__default__requested' (at pp.c:13765)
  FuncDef:  (at pp.c:13770)
    Decl: name='CC2420TransmitP__STXONCCA__strobe', quals=[], storage=['static', 'inline'] (at pp.c:13770)
      FuncDecl: quals=None (at pp.c:13770)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__STXONCCA__strobe', quals=[] (at pp.c:13770)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:13770)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13772)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13772)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13776)
        ID: name='__nesc_result' (at pp.c:13776)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:13776)
          ExprList:  (at pp.c:13776)
            ID: name='CC2420_STXONCCA' (at pp.c:13776)
      Return:  (at pp.c:13780)
        ID: name='__nesc_result' (at pp.c:13780)
  FuncDef:  (at pp.c:13784)
    Decl: name='CC2420TransmitP__STXON__strobe', quals=[], storage=['static', 'inline'] (at pp.c:13784)
      FuncDecl: quals=None (at pp.c:13784)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__STXON__strobe', quals=[] (at pp.c:13784)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:13784)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13786)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13786)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13790)
        ID: name='__nesc_result' (at pp.c:13790)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:13790)
          ExprList:  (at pp.c:13790)
            ID: name='CC2420_STXON' (at pp.c:13790)
      Return:  (at pp.c:13794)
        ID: name='__nesc_result' (at pp.c:13794)
  FuncDef:  (at pp.c:13798)
    Decl: name='CC2420TransmitP__SNOP__strobe', quals=[], storage=['static', 'inline'] (at pp.c:13798)
      FuncDecl: quals=None (at pp.c:13798)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SNOP__strobe', quals=[] (at pp.c:13798)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:13798)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:13800)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:13800)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:13804)
        ID: name='__nesc_result' (at pp.c:13804)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:13804)
          ExprList:  (at pp.c:13804)
            ID: name='CC2420_SNOP' (at pp.c:13804)
      Return:  (at pp.c:13808)
        ID: name='__nesc_result' (at pp.c:13808)
  FuncDef:  (at pp.c:13813)
    Decl: name='Msp430TimerCapComP__6__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:13813)
      FuncDecl: quals=None (at pp.c:13813)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Compare__default__fired', quals=[] (at pp.c:13813)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13814)
  FuncDef:  (at pp.c:13818)
    Decl: name='Msp430TimerCapComP__6__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:13818)
      FuncDecl: quals=None (at pp.c:13818)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Compare__fired', quals=[] (at pp.c:13818)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13818)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__6__Compare__default__fired' (at pp.c:13820)
  FuncDef:  (at pp.c:13825)
    Decl: name='Msp430TimerCapComP__6__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:13825)
      FuncDecl: quals=None (at pp.c:13825)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Capture__getEvent', quals=[] (at pp.c:13825)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13826)
      Return:  (at pp.c:13827)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13827)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='408U' (at pp.c:13827)
  FuncDef:  (at pp.c:13831)
    Decl: name='Msp430TimerCapComP__6__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:13831)
      FuncDecl: quals=None (at pp.c:13831)
        ParamList:  (at pp.c:13831)
          Decl: name='n', quals=[], storage=[] (at pp.c:13831)
            TypeDecl: declname='n', quals=[] (at pp.c:13831)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Capture__default__captured', quals=[] (at pp.c:13831)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13832)
  FuncDef:  (at pp.c:13836)
    Decl: name='Msp430TimerCapComP__6__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:13836)
      FuncDecl: quals=None (at pp.c:13836)
        ParamList:  (at pp.c:13836)
          Decl: name='time', quals=[], storage=[] (at pp.c:13836)
            TypeDecl: declname='time', quals=[] (at pp.c:13836)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Capture__captured', quals=[] (at pp.c:13836)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13836)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__6__Capture__default__captured' (at pp.c:13838)
        ExprList:  (at pp.c:13838)
          ID: name='time' (at pp.c:13838)
  FuncDef:  (at pp.c:13843)
    Decl: name='Msp430TimerCapComP__6__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:13843)
      FuncDecl: quals=None (at pp.c:13843)
        ParamList:  (at pp.c:13843)
          Decl: name='x', quals=[], storage=[] (at pp.c:13843)
            TypeDecl: declname='x', quals=[] (at pp.c:13843)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__int2CC', quals=[] (at pp.c:13843)
          IdentifierType: names=['Msp430TimerCapComP__6__cc_t'] (at None)
    Compound:  (at pp.c:13845)
      Decl: name='c', quals=[], storage=[] (at pp.c:13854)
        TypeDecl: declname='c', quals=[] (at pp.c:13854)
          Union: name='Msp430TimerCapComP__6____nesc_unnamed4404', packed=False (at pp.c:13847)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:13849)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:13851)
                IdentifierType: names=['Msp430TimerCapComP__6__cc_t'] (at None)
        ExprList:  (at pp.c:13854)
          Assignment: op='=' (at pp.c:13854)
            StructRef: type='.' (at pp.c:13854)
              ID: name='f' (at pp.c:13854)
            ID: name='x' (at pp.c:13854)
      Return:  (at pp.c:13857)
        StructRef: type='.' (at pp.c:13857)
          ID: name='c' (at pp.c:13857)
          ID: name='t' (at pp.c:13857)
  FuncDef:  (at pp.c:13861)
    Decl: name='Msp430TimerCapComP__6__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:13861)
      FuncDecl: quals=None (at pp.c:13861)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Control__getControl', quals=[] (at pp.c:13861)
          IdentifierType: names=['Msp430TimerCapComP__6__cc_t'] (at None)
    Compound:  (at pp.c:13862)
      Return:  (at pp.c:13863)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__6__int2CC' (at pp.c:13863)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:13863)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='392U' (at pp.c:13863)
  FuncDef:  (at pp.c:13867)
    Decl: name='Msp430TimerCapComP__6__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:13867)
      FuncDecl: quals=None (at pp.c:13867)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__6__Event__fired', quals=[] (at pp.c:13867)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13868)
      If:  (at pp.c:13869)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__6__Control__getControl' (at pp.c:13869)
          ID: name='cap' (at pp.c:13869)
        Compound:  (at pp.c:13869)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__6__Capture__captured' (at pp.c:13870)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__6__Capture__getEvent' (at pp.c:13870)
        Compound:  (at pp.c:13872)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__6__Compare__fired' (at pp.c:13874)
  FuncDef:  (at pp.c:13881)
    Decl: name='Msp430TimerCapComP__7__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:13881)
      FuncDecl: quals=None (at pp.c:13881)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Compare__default__fired', quals=[] (at pp.c:13881)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13882)
  FuncDef:  (at pp.c:13886)
    Decl: name='Msp430TimerCapComP__7__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:13886)
      FuncDecl: quals=None (at pp.c:13886)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Compare__fired', quals=[] (at pp.c:13886)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13886)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__7__Compare__default__fired' (at pp.c:13888)
  FuncDef:  (at pp.c:13893)
    Decl: name='Msp430TimerCapComP__7__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:13893)
      FuncDecl: quals=None (at pp.c:13893)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Capture__getEvent', quals=[] (at pp.c:13893)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13894)
      Return:  (at pp.c:13895)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13895)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='410U' (at pp.c:13895)
  FuncDef:  (at pp.c:13899)
    Decl: name='Msp430TimerCapComP__7__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:13899)
      FuncDecl: quals=None (at pp.c:13899)
        ParamList:  (at pp.c:13899)
          Decl: name='n', quals=[], storage=[] (at pp.c:13899)
            TypeDecl: declname='n', quals=[] (at pp.c:13899)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Capture__default__captured', quals=[] (at pp.c:13899)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13900)
  FuncDef:  (at pp.c:13904)
    Decl: name='Msp430TimerCapComP__7__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:13904)
      FuncDecl: quals=None (at pp.c:13904)
        ParamList:  (at pp.c:13904)
          Decl: name='time', quals=[], storage=[] (at pp.c:13904)
            TypeDecl: declname='time', quals=[] (at pp.c:13904)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Capture__captured', quals=[] (at pp.c:13904)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13904)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__7__Capture__default__captured' (at pp.c:13906)
        ExprList:  (at pp.c:13906)
          ID: name='time' (at pp.c:13906)
  FuncDef:  (at pp.c:13911)
    Decl: name='Msp430TimerCapComP__7__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:13911)
      FuncDecl: quals=None (at pp.c:13911)
        ParamList:  (at pp.c:13911)
          Decl: name='x', quals=[], storage=[] (at pp.c:13911)
            TypeDecl: declname='x', quals=[] (at pp.c:13911)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__int2CC', quals=[] (at pp.c:13911)
          IdentifierType: names=['Msp430TimerCapComP__7__cc_t'] (at None)
    Compound:  (at pp.c:13913)
      Decl: name='c', quals=[], storage=[] (at pp.c:13922)
        TypeDecl: declname='c', quals=[] (at pp.c:13922)
          Union: name='Msp430TimerCapComP__7____nesc_unnamed4405', packed=False (at pp.c:13915)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:13917)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:13919)
                IdentifierType: names=['Msp430TimerCapComP__7__cc_t'] (at None)
        ExprList:  (at pp.c:13922)
          Assignment: op='=' (at pp.c:13922)
            StructRef: type='.' (at pp.c:13922)
              ID: name='f' (at pp.c:13922)
            ID: name='x' (at pp.c:13922)
      Return:  (at pp.c:13925)
        StructRef: type='.' (at pp.c:13925)
          ID: name='c' (at pp.c:13925)
          ID: name='t' (at pp.c:13925)
  FuncDef:  (at pp.c:13929)
    Decl: name='Msp430TimerCapComP__7__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:13929)
      FuncDecl: quals=None (at pp.c:13929)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Control__getControl', quals=[] (at pp.c:13929)
          IdentifierType: names=['Msp430TimerCapComP__7__cc_t'] (at None)
    Compound:  (at pp.c:13930)
      Return:  (at pp.c:13931)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__7__int2CC' (at pp.c:13931)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:13931)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='394U' (at pp.c:13931)
  FuncDef:  (at pp.c:13935)
    Decl: name='Msp430TimerCapComP__7__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:13935)
      FuncDecl: quals=None (at pp.c:13935)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__7__Event__fired', quals=[] (at pp.c:13935)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13936)
      If:  (at pp.c:13937)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__7__Control__getControl' (at pp.c:13937)
          ID: name='cap' (at pp.c:13937)
        Compound:  (at pp.c:13937)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__7__Capture__captured' (at pp.c:13938)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__7__Capture__getEvent' (at pp.c:13938)
        Compound:  (at pp.c:13940)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__7__Compare__fired' (at pp.c:13942)
  FuncDef:  (at pp.c:13949)
    Decl: name='Msp430TimerCapComP__8__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:13949)
      FuncDecl: quals=None (at pp.c:13949)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Compare__default__fired', quals=[] (at pp.c:13949)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13950)
  FuncDef:  (at pp.c:13954)
    Decl: name='Msp430TimerCapComP__8__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:13954)
      FuncDecl: quals=None (at pp.c:13954)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Compare__fired', quals=[] (at pp.c:13954)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13954)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__8__Compare__default__fired' (at pp.c:13956)
  FuncDef:  (at pp.c:13961)
    Decl: name='Msp430TimerCapComP__8__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:13961)
      FuncDecl: quals=None (at pp.c:13961)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Capture__getEvent', quals=[] (at pp.c:13961)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:13962)
      Return:  (at pp.c:13963)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:13963)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='412U' (at pp.c:13963)
  FuncDef:  (at pp.c:13967)
    Decl: name='Msp430TimerCapComP__8__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:13967)
      FuncDecl: quals=None (at pp.c:13967)
        ParamList:  (at pp.c:13967)
          Decl: name='n', quals=[], storage=[] (at pp.c:13967)
            TypeDecl: declname='n', quals=[] (at pp.c:13967)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Capture__default__captured', quals=[] (at pp.c:13967)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13968)
  FuncDef:  (at pp.c:13972)
    Decl: name='Msp430TimerCapComP__8__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:13972)
      FuncDecl: quals=None (at pp.c:13972)
        ParamList:  (at pp.c:13972)
          Decl: name='time', quals=[], storage=[] (at pp.c:13972)
            TypeDecl: declname='time', quals=[] (at pp.c:13972)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Capture__captured', quals=[] (at pp.c:13972)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:13972)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__8__Capture__default__captured' (at pp.c:13974)
        ExprList:  (at pp.c:13974)
          ID: name='time' (at pp.c:13974)
  FuncDef:  (at pp.c:13979)
    Decl: name='Msp430TimerCapComP__8__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:13979)
      FuncDecl: quals=None (at pp.c:13979)
        ParamList:  (at pp.c:13979)
          Decl: name='x', quals=[], storage=[] (at pp.c:13979)
            TypeDecl: declname='x', quals=[] (at pp.c:13979)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__int2CC', quals=[] (at pp.c:13979)
          IdentifierType: names=['Msp430TimerCapComP__8__cc_t'] (at None)
    Compound:  (at pp.c:13981)
      Decl: name='c', quals=[], storage=[] (at pp.c:13990)
        TypeDecl: declname='c', quals=[] (at pp.c:13990)
          Union: name='Msp430TimerCapComP__8____nesc_unnamed4406', packed=False (at pp.c:13983)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:13985)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:13987)
                IdentifierType: names=['Msp430TimerCapComP__8__cc_t'] (at None)
        ExprList:  (at pp.c:13990)
          Assignment: op='=' (at pp.c:13990)
            StructRef: type='.' (at pp.c:13990)
              ID: name='f' (at pp.c:13990)
            ID: name='x' (at pp.c:13990)
      Return:  (at pp.c:13993)
        StructRef: type='.' (at pp.c:13993)
          ID: name='c' (at pp.c:13993)
          ID: name='t' (at pp.c:13993)
  FuncDef:  (at pp.c:13997)
    Decl: name='Msp430TimerCapComP__8__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:13997)
      FuncDecl: quals=None (at pp.c:13997)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Control__getControl', quals=[] (at pp.c:13997)
          IdentifierType: names=['Msp430TimerCapComP__8__cc_t'] (at None)
    Compound:  (at pp.c:13998)
      Return:  (at pp.c:13999)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__8__int2CC' (at pp.c:13999)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:13999)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='396U' (at pp.c:13999)
  FuncDef:  (at pp.c:14003)
    Decl: name='Msp430TimerCapComP__8__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:14003)
      FuncDecl: quals=None (at pp.c:14003)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__8__Event__fired', quals=[] (at pp.c:14003)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14004)
      If:  (at pp.c:14005)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__8__Control__getControl' (at pp.c:14005)
          ID: name='cap' (at pp.c:14005)
        Compound:  (at pp.c:14005)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__8__Capture__captured' (at pp.c:14006)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__8__Capture__getEvent' (at pp.c:14006)
        Compound:  (at pp.c:14008)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__8__Compare__fired' (at pp.c:14010)
  FuncDef:  (at pp.c:14017)
    Decl: name='Msp430TimerCapComP__9__Compare__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:14017)
      FuncDecl: quals=None (at pp.c:14017)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Compare__default__fired', quals=[] (at pp.c:14017)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14018)
  FuncDef:  (at pp.c:14022)
    Decl: name='Msp430TimerCapComP__9__Compare__fired', quals=[], storage=['static', 'inline'] (at pp.c:14022)
      FuncDecl: quals=None (at pp.c:14022)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Compare__fired', quals=[] (at pp.c:14022)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14022)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__9__Compare__default__fired' (at pp.c:14024)
  FuncDef:  (at pp.c:14029)
    Decl: name='Msp430TimerCapComP__9__Capture__getEvent', quals=[], storage=['inline', 'static'] (at pp.c:14029)
      FuncDecl: quals=None (at pp.c:14029)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Capture__getEvent', quals=[] (at pp.c:14029)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:14030)
      Return:  (at pp.c:14031)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14031)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='414U' (at pp.c:14031)
  FuncDef:  (at pp.c:14035)
    Decl: name='Msp430TimerCapComP__9__Capture__default__captured', quals=[], storage=['inline', 'static'] (at pp.c:14035)
      FuncDecl: quals=None (at pp.c:14035)
        ParamList:  (at pp.c:14035)
          Decl: name='n', quals=[], storage=[] (at pp.c:14035)
            TypeDecl: declname='n', quals=[] (at pp.c:14035)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Capture__default__captured', quals=[] (at pp.c:14035)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14036)
  FuncDef:  (at pp.c:14040)
    Decl: name='Msp430TimerCapComP__9__Capture__captured', quals=[], storage=['static', 'inline'] (at pp.c:14040)
      FuncDecl: quals=None (at pp.c:14040)
        ParamList:  (at pp.c:14040)
          Decl: name='time', quals=[], storage=[] (at pp.c:14040)
            TypeDecl: declname='time', quals=[] (at pp.c:14040)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Capture__captured', quals=[] (at pp.c:14040)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14040)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__9__Capture__default__captured' (at pp.c:14042)
        ExprList:  (at pp.c:14042)
          ID: name='time' (at pp.c:14042)
  FuncDef:  (at pp.c:14047)
    Decl: name='Msp430TimerCapComP__9__int2CC', quals=[], storage=['inline', 'static'] (at pp.c:14047)
      FuncDecl: quals=None (at pp.c:14047)
        ParamList:  (at pp.c:14047)
          Decl: name='x', quals=[], storage=[] (at pp.c:14047)
            TypeDecl: declname='x', quals=[] (at pp.c:14047)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__int2CC', quals=[] (at pp.c:14047)
          IdentifierType: names=['Msp430TimerCapComP__9__cc_t'] (at None)
    Compound:  (at pp.c:14049)
      Decl: name='c', quals=[], storage=[] (at pp.c:14058)
        TypeDecl: declname='c', quals=[] (at pp.c:14058)
          Union: name='Msp430TimerCapComP__9____nesc_unnamed4407', packed=False (at pp.c:14051)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:14053)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:14055)
                IdentifierType: names=['Msp430TimerCapComP__9__cc_t'] (at None)
        ExprList:  (at pp.c:14058)
          Assignment: op='=' (at pp.c:14058)
            StructRef: type='.' (at pp.c:14058)
              ID: name='f' (at pp.c:14058)
            ID: name='x' (at pp.c:14058)
      Return:  (at pp.c:14061)
        StructRef: type='.' (at pp.c:14061)
          ID: name='c' (at pp.c:14061)
          ID: name='t' (at pp.c:14061)
  FuncDef:  (at pp.c:14065)
    Decl: name='Msp430TimerCapComP__9__Control__getControl', quals=[], storage=['inline', 'static'] (at pp.c:14065)
      FuncDecl: quals=None (at pp.c:14065)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Control__getControl', quals=[] (at pp.c:14065)
          IdentifierType: names=['Msp430TimerCapComP__9__cc_t'] (at None)
    Compound:  (at pp.c:14066)
      Return:  (at pp.c:14067)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__9__int2CC' (at pp.c:14067)
          ExprList:  (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:14067)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='398U' (at pp.c:14067)
  FuncDef:  (at pp.c:14071)
    Decl: name='Msp430TimerCapComP__9__Event__fired', quals=[], storage=['inline', 'static'] (at pp.c:14071)
      FuncDecl: quals=None (at pp.c:14071)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__9__Event__fired', quals=[] (at pp.c:14071)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14072)
      If:  (at pp.c:14073)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__9__Control__getControl' (at pp.c:14073)
          ID: name='cap' (at pp.c:14073)
        Compound:  (at pp.c:14073)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__9__Capture__captured' (at pp.c:14074)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__9__Capture__getEvent' (at pp.c:14074)
        Compound:  (at pp.c:14076)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__9__Compare__fired' (at pp.c:14078)
  FuncDef:  (at pp.c:14083)
    Decl: name='Msp430TimerP__1__VectorTimerX1__fired', quals=[], storage=['inline', 'static'] (at pp.c:14083)
      FuncDecl: quals=None (at pp.c:14083)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__VectorTimerX1__fired', quals=[] (at pp.c:14083)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14084)
      Decl: name='n', quals=[], storage=[] (at pp.c:14085)
        TypeDecl: declname='n', quals=[] (at pp.c:14085)
          IdentifierType: names=['uint8_t'] (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14085)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='286U' (at pp.c:14085)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__1__Event__fired' (at pp.c:14088)
        ExprList:  (at pp.c:14088)
          BinaryOp: op='>>' (at pp.c:14088)
            ID: name='n' (at pp.c:14088)
            Constant: type='int', value='1' (at pp.c:14088)
  FuncDef:  (at pp.c:14092)
    Decl: name='Msp430TimerCommonP__VectorTimerB1__fired', quals=[], storage=['static', 'inline'] (at pp.c:14092)
      FuncDecl: quals=None (at pp.c:14092)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCommonP__VectorTimerB1__fired', quals=[] (at pp.c:14092)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14092)
      FuncCall:  (at None)
        ID: name='Msp430TimerP__1__VectorTimerX1__fired' (at pp.c:14094)
  FuncDef:  (at pp.c:14099)
    Decl: name='SchedulerBasicP__Scheduler__init', quals=[], storage=['inline', 'static'] (at pp.c:14099)
      FuncDecl: quals=None (at pp.c:14099)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SchedulerBasicP__Scheduler__init', quals=[] (at pp.c:14099)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14100)
      Compound:  (at pp.c:14102)
        FuncCall:  (at None)
          ID: name='memset' (at pp.c:14103)
          ExprList:  (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:14103)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['void'] (at None)
              ID: name='SchedulerBasicP__m_next' (at pp.c:14103)
            ID: name='SchedulerBasicP__NO_TASK' (at pp.c:14103)
            UnaryOp: op='sizeof' (at pp.c:14103)
              ID: name='SchedulerBasicP__m_next' (at pp.c:14103)
        Assignment: op='=' (at pp.c:14104)
          ID: name='SchedulerBasicP__m_head' (at pp.c:14104)
          ID: name='SchedulerBasicP__NO_TASK' (at pp.c:14104)
        Assignment: op='=' (at pp.c:14105)
          ID: name='SchedulerBasicP__m_tail' (at pp.c:14105)
          ID: name='SchedulerBasicP__NO_TASK' (at pp.c:14105)
  FuncDef:  (at pp.c:14110)
    Decl: name='RealMainP__Scheduler__init', quals=[], storage=['static', 'inline'] (at pp.c:14110)
      FuncDecl: quals=None (at pp.c:14110)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__Scheduler__init', quals=[] (at pp.c:14110)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14110)
      FuncCall:  (at None)
        ID: name='SchedulerBasicP__Scheduler__init' (at pp.c:14112)
  FuncDef:  (at pp.c:14117)
    Decl: name='Msp430GpioC__2__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:14117)
      FuncDecl: quals=None (at pp.c:14117)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__set', quals=[] (at pp.c:14117)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14117)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__38__IO__set' (at pp.c:14119)
  FuncDef:  (at pp.c:14124)
    Decl: name='Msp430GpioC__2__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:14124)
      FuncDecl: quals=None (at pp.c:14124)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__GeneralIO__set', quals=[] (at pp.c:14124)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14126)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__HplGeneralIO__set' (at pp.c:14128)
  FuncDef:  (at pp.c:14132)
    Decl: name='LedsP__Led2__set', quals=[], storage=['static', 'inline'] (at pp.c:14132)
      FuncDecl: quals=None (at pp.c:14132)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led2__set', quals=[] (at pp.c:14132)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14132)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__GeneralIO__set' (at pp.c:14134)
  FuncDef:  (at pp.c:14139)
    Decl: name='HplMsp430GeneralIOP__37__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:14139)
      FuncDecl: quals=None (at pp.c:14139)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__37__IO__set', quals=[] (at pp.c:14139)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14141)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14144)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='49U' (at pp.c:14144)
        BinaryOp: op='<<' (at pp.c:14144)
          Constant: type='int', value='0x01' (at pp.c:14144)
          Constant: type='int', value='5' (at pp.c:14144)
  FuncDef:  (at pp.c:14148)
    Decl: name='Msp430GpioC__1__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:14148)
      FuncDecl: quals=None (at pp.c:14148)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__1__HplGeneralIO__set', quals=[] (at pp.c:14148)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14148)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__37__IO__set' (at pp.c:14150)
  FuncDef:  (at pp.c:14155)
    Decl: name='Msp430GpioC__1__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:14155)
      FuncDecl: quals=None (at pp.c:14155)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__1__GeneralIO__set', quals=[] (at pp.c:14155)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14157)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__1__HplGeneralIO__set' (at pp.c:14159)
  FuncDef:  (at pp.c:14163)
    Decl: name='LedsP__Led1__set', quals=[], storage=['static', 'inline'] (at pp.c:14163)
      FuncDecl: quals=None (at pp.c:14163)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led1__set', quals=[] (at pp.c:14163)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14163)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__1__GeneralIO__set' (at pp.c:14165)
  FuncDef:  (at pp.c:14170)
    Decl: name='HplMsp430GeneralIOP__36__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:14170)
      FuncDecl: quals=None (at pp.c:14170)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__36__IO__set', quals=[] (at pp.c:14170)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14172)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14175)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='49U' (at pp.c:14175)
        BinaryOp: op='<<' (at pp.c:14175)
          Constant: type='int', value='0x01' (at pp.c:14175)
          Constant: type='int', value='4' (at pp.c:14175)
  FuncDef:  (at pp.c:14179)
    Decl: name='Msp430GpioC__0__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:14179)
      FuncDecl: quals=None (at pp.c:14179)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__set', quals=[] (at pp.c:14179)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14179)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__36__IO__set' (at pp.c:14181)
  FuncDef:  (at pp.c:14186)
    Decl: name='Msp430GpioC__0__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:14186)
      FuncDecl: quals=None (at pp.c:14186)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__GeneralIO__set', quals=[] (at pp.c:14186)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14188)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__HplGeneralIO__set' (at pp.c:14190)
  FuncDef:  (at pp.c:14194)
    Decl: name='LedsP__Led0__set', quals=[], storage=['static', 'inline'] (at pp.c:14194)
      FuncDecl: quals=None (at pp.c:14194)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led0__set', quals=[] (at pp.c:14194)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14194)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__GeneralIO__set' (at pp.c:14196)
  FuncDef:  (at pp.c:14201)
    Decl: name='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14201)
      FuncDecl: quals=None (at pp.c:14201)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__38__IO__makeOutput', quals=[] (at pp.c:14201)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14203)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14206)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='50U' (at pp.c:14206)
        BinaryOp: op='<<' (at pp.c:14206)
          Constant: type='int', value='0x01' (at pp.c:14206)
          Constant: type='int', value='6' (at pp.c:14206)
  FuncDef:  (at pp.c:14210)
    Decl: name='Msp430GpioC__2__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14210)
      FuncDecl: quals=None (at pp.c:14210)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__makeOutput', quals=[] (at pp.c:14210)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14210)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__38__IO__makeOutput' (at pp.c:14212)
  FuncDef:  (at pp.c:14217)
    Decl: name='Msp430GpioC__2__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14217)
      FuncDecl: quals=None (at pp.c:14217)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__GeneralIO__makeOutput', quals=[] (at pp.c:14217)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14219)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__HplGeneralIO__makeOutput' (at pp.c:14221)
  FuncDef:  (at pp.c:14225)
    Decl: name='LedsP__Led2__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14225)
      FuncDecl: quals=None (at pp.c:14225)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led2__makeOutput', quals=[] (at pp.c:14225)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14225)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__GeneralIO__makeOutput' (at pp.c:14227)
  FuncDef:  (at pp.c:14232)
    Decl: name='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14232)
      FuncDecl: quals=None (at pp.c:14232)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__37__IO__makeOutput', quals=[] (at pp.c:14232)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14234)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14237)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='50U' (at pp.c:14237)
        BinaryOp: op='<<' (at pp.c:14237)
          Constant: type='int', value='0x01' (at pp.c:14237)
          Constant: type='int', value='5' (at pp.c:14237)
  FuncDef:  (at pp.c:14241)
    Decl: name='Msp430GpioC__1__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14241)
      FuncDecl: quals=None (at pp.c:14241)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__1__HplGeneralIO__makeOutput', quals=[] (at pp.c:14241)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14241)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__37__IO__makeOutput' (at pp.c:14243)
  FuncDef:  (at pp.c:14248)
    Decl: name='Msp430GpioC__1__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14248)
      FuncDecl: quals=None (at pp.c:14248)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__1__GeneralIO__makeOutput', quals=[] (at pp.c:14248)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14250)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__1__HplGeneralIO__makeOutput' (at pp.c:14252)
  FuncDef:  (at pp.c:14256)
    Decl: name='LedsP__Led1__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14256)
      FuncDecl: quals=None (at pp.c:14256)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led1__makeOutput', quals=[] (at pp.c:14256)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14256)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__1__GeneralIO__makeOutput' (at pp.c:14258)
  FuncDef:  (at pp.c:14263)
    Decl: name='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14263)
      FuncDecl: quals=None (at pp.c:14263)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__36__IO__makeOutput', quals=[] (at pp.c:14263)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14265)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:14268)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='50U' (at pp.c:14268)
        BinaryOp: op='<<' (at pp.c:14268)
          Constant: type='int', value='0x01' (at pp.c:14268)
          Constant: type='int', value='4' (at pp.c:14268)
  FuncDef:  (at pp.c:14272)
    Decl: name='Msp430GpioC__0__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14272)
      FuncDecl: quals=None (at pp.c:14272)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__makeOutput', quals=[] (at pp.c:14272)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14272)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__36__IO__makeOutput' (at pp.c:14274)
  FuncDef:  (at pp.c:14279)
    Decl: name='Msp430GpioC__0__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:14279)
      FuncDecl: quals=None (at pp.c:14279)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__GeneralIO__makeOutput', quals=[] (at pp.c:14279)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14281)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__HplGeneralIO__makeOutput' (at pp.c:14283)
  FuncDef:  (at pp.c:14287)
    Decl: name='LedsP__Led0__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:14287)
      FuncDecl: quals=None (at pp.c:14287)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led0__makeOutput', quals=[] (at pp.c:14287)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14287)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__GeneralIO__makeOutput' (at pp.c:14289)
  FuncDef:  (at pp.c:14294)
    Decl: name='LedsP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:14294)
      FuncDecl: quals=None (at pp.c:14294)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Init__init', quals=[] (at pp.c:14294)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14296)
      Compound:  (at pp.c:14299)
        FuncCall:  (at None)
          ID: name='LedsP__Led0__makeOutput' (at pp.c:14301)
        FuncCall:  (at None)
          ID: name='LedsP__Led1__makeOutput' (at pp.c:14302)
        FuncCall:  (at None)
          ID: name='LedsP__Led2__makeOutput' (at pp.c:14303)
        FuncCall:  (at None)
          ID: name='LedsP__Led0__set' (at pp.c:14304)
        FuncCall:  (at None)
          ID: name='LedsP__Led1__set' (at pp.c:14305)
        FuncCall:  (at None)
          ID: name='LedsP__Led2__set' (at pp.c:14306)
      Return:  (at pp.c:14308)
        ID: name='SUCCESS' (at pp.c:14308)
  FuncDef:  (at pp.c:14312)
    Decl: name='PlatformP__LedsInit__init', quals=[], storage=['static', 'inline'] (at pp.c:14312)
      FuncDecl: quals=None (at pp.c:14312)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PlatformP__LedsInit__init', quals=[] (at pp.c:14312)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14312)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14314)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14314)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14318)
        ID: name='__nesc_result' (at pp.c:14318)
        FuncCall:  (at None)
          ID: name='LedsP__Init__init' (at pp.c:14318)
      Return:  (at pp.c:14322)
        ID: name='__nesc_result' (at pp.c:14322)
  FuncDef:  (at pp.c:14327)
    Decl: name='TOSH_SET_SIMO0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14327)
      FuncDecl: quals=None (at pp.c:14327)
        TypeDecl: declname='TOSH_SET_SIMO0_PIN', quals=[] (at pp.c:14327)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14329)
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static'] (at pp.c:14331)
        TypeDecl: declname='r@"0x0019"', quals=['volatile'] (at pp.c:14331)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14334)
        ID: name='r' (at pp.c:14334)
        BinaryOp: op='<<' (at pp.c:14334)
          Constant: type='int', value='1' (at pp.c:14334)
          Constant: type='int', value='1' (at pp.c:14334)
  FuncDef:  (at pp.c:14338)
    Decl: name='TOSH_SET_UCLK0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14338)
      FuncDecl: quals=None (at pp.c:14338)
        TypeDecl: declname='TOSH_SET_UCLK0_PIN', quals=[] (at pp.c:14338)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14340)
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static'] (at pp.c:14342)
        TypeDecl: declname='r@"0x0019"', quals=['volatile'] (at pp.c:14342)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14345)
        ID: name='r' (at pp.c:14345)
        BinaryOp: op='<<' (at pp.c:14345)
          Constant: type='int', value='1' (at pp.c:14345)
          Constant: type='int', value='3' (at pp.c:14345)
  FuncDef:  (at pp.c:14349)
    Decl: name='TOSH_SET_FLASH_CS_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14349)
      FuncDecl: quals=None (at pp.c:14349)
        TypeDecl: declname='TOSH_SET_FLASH_CS_PIN', quals=[] (at pp.c:14349)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14351)
      Decl: name='r@"0x001D"', quals=['volatile'], storage=['static'] (at pp.c:14353)
        TypeDecl: declname='r@"0x001D"', quals=['volatile'] (at pp.c:14353)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14356)
        ID: name='r' (at pp.c:14356)
        BinaryOp: op='<<' (at pp.c:14356)
          Constant: type='int', value='1' (at pp.c:14356)
          Constant: type='int', value='4' (at pp.c:14356)
  FuncDef:  (at pp.c:14360)
    Decl: name='TOSH_CLR_UCLK0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14360)
      FuncDecl: quals=None (at pp.c:14360)
        TypeDecl: declname='TOSH_CLR_UCLK0_PIN', quals=[] (at pp.c:14360)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14362)
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static'] (at pp.c:14364)
        TypeDecl: declname='r@"0x0019"', quals=['volatile'] (at pp.c:14364)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='&=' (at pp.c:14367)
        ID: name='r' (at pp.c:14367)
        UnaryOp: op='~' (at pp.c:14367)
          BinaryOp: op='<<' (at pp.c:14367)
            Constant: type='int', value='1' (at pp.c:14367)
            Constant: type='int', value='3' (at pp.c:14367)
  FuncDef:  (at pp.c:14371)
    Decl: name='TOSH_CLR_FLASH_CS_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14371)
      FuncDecl: quals=None (at pp.c:14371)
        TypeDecl: declname='TOSH_CLR_FLASH_CS_PIN', quals=[] (at pp.c:14371)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14373)
      Decl: name='r@"0x001D"', quals=['volatile'], storage=['static'] (at pp.c:14375)
        TypeDecl: declname='r@"0x001D"', quals=['volatile'] (at pp.c:14375)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='&=' (at pp.c:14378)
        ID: name='r' (at pp.c:14378)
        UnaryOp: op='~' (at pp.c:14378)
          BinaryOp: op='<<' (at pp.c:14378)
            Constant: type='int', value='1' (at pp.c:14378)
            Constant: type='int', value='4' (at pp.c:14378)
  FuncDef:  (at pp.c:14382)
    Decl: name='MotePlatformC__TOSH_wait', quals=[], storage=['__inline', 'static'] (at pp.c:14382)
      FuncDecl: quals=None (at pp.c:14382)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='MotePlatformC__TOSH_wait', quals=[] (at pp.c:14382)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14384)
  FuncDef:  (at pp.c:14388)
    Decl: name='TOSH_SET_FLASH_HOLD_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14388)
      FuncDecl: quals=None (at pp.c:14388)
        TypeDecl: declname='TOSH_SET_FLASH_HOLD_PIN', quals=[] (at pp.c:14388)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14390)
      Decl: name='r@"0x001D"', quals=['volatile'], storage=['static'] (at pp.c:14392)
        TypeDecl: declname='r@"0x001D"', quals=['volatile'] (at pp.c:14392)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14395)
        ID: name='r' (at pp.c:14395)
        BinaryOp: op='<<' (at pp.c:14395)
          Constant: type='int', value='1' (at pp.c:14395)
          Constant: type='int', value='7' (at pp.c:14395)
  FuncDef:  (at pp.c:14399)
    Decl: name='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:14399)
      FuncDecl: quals=None (at pp.c:14399)
        TypeDecl: declname='TOSH_MAKE_FLASH_CS_OUTPUT', quals=[] (at pp.c:14399)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14401)
      Decl: name='r@"0x001E"', quals=['volatile'], storage=['static'] (at pp.c:14403)
        TypeDecl: declname='r@"0x001E"', quals=['volatile'] (at pp.c:14403)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14406)
        ID: name='r' (at pp.c:14406)
        BinaryOp: op='<<' (at pp.c:14406)
          Constant: type='int', value='1' (at pp.c:14406)
          Constant: type='int', value='4' (at pp.c:14406)
  FuncDef:  (at pp.c:14410)
    Decl: name='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:14410)
      FuncDecl: quals=None (at pp.c:14410)
        TypeDecl: declname='TOSH_MAKE_FLASH_HOLD_OUTPUT', quals=[] (at pp.c:14410)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14412)
      Decl: name='r@"0x001E"', quals=['volatile'], storage=['static'] (at pp.c:14414)
        TypeDecl: declname='r@"0x001E"', quals=['volatile'] (at pp.c:14414)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14417)
        ID: name='r' (at pp.c:14417)
        BinaryOp: op='<<' (at pp.c:14417)
          Constant: type='int', value='1' (at pp.c:14417)
          Constant: type='int', value='7' (at pp.c:14417)
  FuncDef:  (at pp.c:14421)
    Decl: name='TOSH_MAKE_UCLK0_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:14421)
      FuncDecl: quals=None (at pp.c:14421)
        TypeDecl: declname='TOSH_MAKE_UCLK0_OUTPUT', quals=[] (at pp.c:14421)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14423)
      Decl: name='r@"0x001A"', quals=['volatile'], storage=['static'] (at pp.c:14425)
        TypeDecl: declname='r@"0x001A"', quals=['volatile'] (at pp.c:14425)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14428)
        ID: name='r' (at pp.c:14428)
        BinaryOp: op='<<' (at pp.c:14428)
          Constant: type='int', value='1' (at pp.c:14428)
          Constant: type='int', value='3' (at pp.c:14428)
  FuncDef:  (at pp.c:14432)
    Decl: name='TOSH_MAKE_SIMO0_OUTPUT', quals=[], storage=['inline', 'static'] (at pp.c:14432)
      FuncDecl: quals=None (at pp.c:14432)
        TypeDecl: declname='TOSH_MAKE_SIMO0_OUTPUT', quals=[] (at pp.c:14432)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14434)
      Decl: name='r@"0x001A"', quals=['volatile'], storage=['static'] (at pp.c:14436)
        TypeDecl: declname='r@"0x001A"', quals=['volatile'] (at pp.c:14436)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='|=' (at pp.c:14439)
        ID: name='r' (at pp.c:14439)
        BinaryOp: op='<<' (at pp.c:14439)
          Constant: type='int', value='1' (at pp.c:14439)
          Constant: type='int', value='1' (at pp.c:14439)
  FuncDef:  (at pp.c:14443)
    Decl: name='MotePlatformC__TOSH_FLASH_M25P_DP', quals=[], storage=['inline', 'static'] (at pp.c:14443)
      FuncDecl: quals=None (at pp.c:14443)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='MotePlatformC__TOSH_FLASH_M25P_DP', quals=[] (at pp.c:14443)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14445)
      FuncCall:  (at None)
        ID: name='TOSH_MAKE_SIMO0_OUTPUT' (at pp.c:14447)
      FuncCall:  (at None)
        ID: name='TOSH_MAKE_UCLK0_OUTPUT' (at pp.c:14448)
      FuncCall:  (at None)
        ID: name='TOSH_MAKE_FLASH_HOLD_OUTPUT' (at pp.c:14449)
      FuncCall:  (at None)
        ID: name='TOSH_MAKE_FLASH_CS_OUTPUT' (at pp.c:14450)
      FuncCall:  (at None)
        ID: name='TOSH_SET_FLASH_HOLD_PIN' (at pp.c:14451)
      FuncCall:  (at None)
        ID: name='TOSH_SET_FLASH_CS_PIN' (at pp.c:14452)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_wait' (at pp.c:14454)
      FuncCall:  (at None)
        ID: name='TOSH_CLR_FLASH_CS_PIN' (at pp.c:14457)
      FuncCall:  (at None)
        ID: name='TOSH_CLR_UCLK0_PIN' (at pp.c:14458)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14460)
        ExprList:  (at pp.c:14460)
          ID: name='TRUE' (at pp.c:14460)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14461)
        ExprList:  (at pp.c:14461)
          ID: name='FALSE' (at pp.c:14461)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14462)
        ExprList:  (at pp.c:14462)
          ID: name='TRUE' (at pp.c:14462)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14463)
        ExprList:  (at pp.c:14463)
          ID: name='TRUE' (at pp.c:14463)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14464)
        ExprList:  (at pp.c:14464)
          ID: name='TRUE' (at pp.c:14464)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14465)
        ExprList:  (at pp.c:14465)
          ID: name='FALSE' (at pp.c:14465)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14466)
        ExprList:  (at pp.c:14466)
          ID: name='FALSE' (at pp.c:14466)
      FuncCall:  (at None)
        ID: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit' (at pp.c:14467)
        ExprList:  (at pp.c:14467)
          ID: name='TRUE' (at pp.c:14467)
      FuncCall:  (at None)
        ID: name='TOSH_SET_FLASH_CS_PIN' (at pp.c:14469)
      FuncCall:  (at None)
        ID: name='TOSH_SET_UCLK0_PIN' (at pp.c:14470)
      FuncCall:  (at None)
        ID: name='TOSH_SET_SIMO0_PIN' (at pp.c:14471)
  FuncDef:  (at pp.c:14475)
    Decl: name='MotePlatformC__uwait', quals=[], storage=['__inline', 'static'] (at pp.c:14475)
      FuncDecl: quals=None (at pp.c:14475)
        ParamList:  (at pp.c:14475)
          Decl: name='u', quals=[], storage=[] (at pp.c:14475)
            TypeDecl: declname='u', quals=[] (at pp.c:14475)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='MotePlatformC__uwait', quals=[] (at pp.c:14475)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14477)
      Decl: name='t0', quals=[], storage=[] (at pp.c:14478)
        TypeDecl: declname='t0', quals=[] (at pp.c:14478)
          IdentifierType: names=['uint16_t'] (at None)
        ID: name='TA0R' (at pp.c:14478)
      While:  (at pp.c:14481)
        BinaryOp: op='<=' (at pp.c:14481)
          BinaryOp: op='-' (at pp.c:14481)
            ID: name='TA0R' (at pp.c:14481)
            ID: name='t0' (at pp.c:14481)
          ID: name='u' (at pp.c:14481)
  FuncDef:  (at pp.c:14485)
    Decl: name='MotePlatformC__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:14485)
      FuncDecl: quals=None (at pp.c:14485)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='MotePlatformC__Init__init', quals=[] (at pp.c:14485)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14487)
      Compound:  (at pp.c:14490)
        Assignment: op='=' (at pp.c:14491)
          ID: name='P1SEL' (at pp.c:14491)
          Constant: type='int', value='0' (at pp.c:14491)
        Assignment: op='=' (at pp.c:14492)
          ID: name='P2SEL' (at pp.c:14492)
          Constant: type='int', value='0' (at pp.c:14492)
        Assignment: op='=' (at pp.c:14493)
          ID: name='P3SEL' (at pp.c:14493)
          Constant: type='int', value='0' (at pp.c:14493)
        Assignment: op='=' (at pp.c:14494)
          ID: name='P4SEL' (at pp.c:14494)
          Constant: type='int', value='0' (at pp.c:14494)
        Assignment: op='=' (at pp.c:14495)
          ID: name='P5SEL' (at pp.c:14495)
          Constant: type='int', value='0' (at pp.c:14495)
        Assignment: op='=' (at pp.c:14496)
          ID: name='P6SEL' (at pp.c:14496)
          Constant: type='int', value='0' (at pp.c:14496)
        Assignment: op='=' (at pp.c:14498)
          ID: name='P1OUT' (at pp.c:14498)
          Constant: type='int', value='0x00' (at pp.c:14498)
        Assignment: op='=' (at pp.c:14499)
          ID: name='P1DIR' (at pp.c:14499)
          Constant: type='int', value='0xe0' (at pp.c:14499)
        Assignment: op='=' (at pp.c:14501)
          ID: name='P2OUT' (at pp.c:14501)
          Constant: type='int', value='0x30' (at pp.c:14501)
        Assignment: op='=' (at pp.c:14502)
          ID: name='P2DIR' (at pp.c:14502)
          Constant: type='int', value='0x7b' (at pp.c:14502)
        Assignment: op='=' (at pp.c:14504)
          ID: name='P3OUT' (at pp.c:14504)
          Constant: type='int', value='0x00' (at pp.c:14504)
        Assignment: op='=' (at pp.c:14505)
          ID: name='P3DIR' (at pp.c:14505)
          Constant: type='int', value='0xf1' (at pp.c:14505)
        Assignment: op='=' (at pp.c:14507)
          ID: name='P4OUT' (at pp.c:14507)
          Constant: type='int', value='0xdd' (at pp.c:14507)
        Assignment: op='=' (at pp.c:14508)
          ID: name='P4DIR' (at pp.c:14508)
          Constant: type='int', value='0xfd' (at pp.c:14508)
        Assignment: op='=' (at pp.c:14510)
          ID: name='P5OUT' (at pp.c:14510)
          Constant: type='int', value='0xff' (at pp.c:14510)
        Assignment: op='=' (at pp.c:14511)
          ID: name='P5DIR' (at pp.c:14511)
          Constant: type='int', value='0xff' (at pp.c:14511)
        Assignment: op='=' (at pp.c:14513)
          ID: name='P6OUT' (at pp.c:14513)
          Constant: type='int', value='0x00' (at pp.c:14513)
        Assignment: op='=' (at pp.c:14514)
          ID: name='P6DIR' (at pp.c:14514)
          Constant: type='int', value='0xff' (at pp.c:14514)
        Assignment: op='=' (at pp.c:14516)
          ID: name='P1IE' (at pp.c:14516)
          Constant: type='int', value='0' (at pp.c:14516)
        Assignment: op='=' (at pp.c:14517)
          ID: name='P2IE' (at pp.c:14517)
          Constant: type='int', value='0' (at pp.c:14517)
        FuncCall:  (at None)
          ID: name='MotePlatformC__uwait' (at pp.c:14524)
          ExprList:  (at pp.c:14524)
            BinaryOp: op='*' (at pp.c:14524)
              Constant: type='int', value='1024' (at pp.c:14524)
              Constant: type='int', value='10' (at pp.c:14524)
        FuncCall:  (at None)
          ID: name='MotePlatformC__TOSH_FLASH_M25P_DP' (at pp.c:14526)
      Return:  (at pp.c:14529)
        ID: name='SUCCESS' (at pp.c:14529)
  FuncDef:  (at pp.c:14533)
    Decl: name='PlatformP__MoteInit__init', quals=[], storage=['static', 'inline'] (at pp.c:14533)
      FuncDecl: quals=None (at pp.c:14533)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PlatformP__MoteInit__init', quals=[] (at pp.c:14533)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14533)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14535)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14535)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14539)
        ID: name='__nesc_result' (at pp.c:14539)
        FuncCall:  (at None)
          ID: name='MotePlatformC__Init__init' (at pp.c:14539)
      Return:  (at pp.c:14543)
        ID: name='__nesc_result' (at pp.c:14543)
  FuncDef:  (at pp.c:14548)
    Decl: name='Msp430ClockP__startTimerB', quals=[], storage=['inline', 'static'] (at pp.c:14548)
      FuncDecl: quals=None (at pp.c:14548)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__startTimerB', quals=[] (at pp.c:14548)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14549)
      Assignment: op='=' (at pp.c:14551)
        ID: name='Msp430ClockP__TBCTL' (at pp.c:14551)
        BinaryOp: op='|' (at pp.c:14551)
          Constant: type='int', value='0x0020' (at pp.c:14551)
          BinaryOp: op='&' (at pp.c:14551)
            ID: name='Msp430ClockP__TBCTL' (at pp.c:14551)
            UnaryOp: op='~' (at pp.c:14551)
              BinaryOp: op='|' (at pp.c:14551)
                Constant: type='int', value='0x0020' (at pp.c:14551)
                Constant: type='int', value='0x0010' (at pp.c:14551)
  FuncDef:  (at pp.c:14555)
    Decl: name='Msp430ClockP__startTimerA', quals=[], storage=['inline', 'static'] (at pp.c:14555)
      FuncDecl: quals=None (at pp.c:14555)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__startTimerA', quals=[] (at pp.c:14555)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14556)
      Assignment: op='=' (at pp.c:14558)
        ID: name='Msp430ClockP__TA0CTL' (at pp.c:14558)
        BinaryOp: op='|' (at pp.c:14558)
          Constant: type='int', value='0x0020' (at pp.c:14558)
          BinaryOp: op='&' (at pp.c:14558)
            ID: name='Msp430ClockP__TA0CTL' (at pp.c:14558)
            UnaryOp: op='~' (at pp.c:14558)
              BinaryOp: op='|' (at pp.c:14558)
                Constant: type='int', value='0x0020' (at pp.c:14558)
                Constant: type='int', value='0x0010' (at pp.c:14558)
  FuncDef:  (at pp.c:14562)
    Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[], storage=['inline', 'static'] (at pp.c:14562)
      FuncDecl: quals=None (at pp.c:14562)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerB', quals=[] (at pp.c:14562)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14563)
      Assignment: op='=' (at pp.c:14564)
        ID: name='TBR' (at pp.c:14564)
        Constant: type='int', value='0' (at pp.c:14564)
      Assignment: op='=' (at pp.c:14574)
        ID: name='Msp430ClockP__TBCTL' (at pp.c:14574)
        BinaryOp: op='|' (at pp.c:14574)
          Constant: type='int', value='0x0100' (at pp.c:14574)
          Constant: type='int', value='0x0002' (at pp.c:14574)
  FuncDef:  (at pp.c:14578)
    Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[], storage=['inline', 'static'] (at pp.c:14578)
      FuncDecl: quals=None (at pp.c:14578)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerB', quals=[] (at pp.c:14578)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14579)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerB' (at pp.c:14580)
  FuncDef:  (at pp.c:14584)
    Decl: name='Msp430ClockP__Msp430ClockInit__initTimerB', quals=[], storage=['static', 'inline'] (at pp.c:14584)
      FuncDecl: quals=None (at pp.c:14584)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initTimerB', quals=[] (at pp.c:14584)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14584)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__default__initTimerB' (at pp.c:14586)
  FuncDef:  (at pp.c:14591)
    Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[], storage=['inline', 'static'] (at pp.c:14591)
      FuncDecl: quals=None (at pp.c:14591)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitTimerA', quals=[] (at pp.c:14591)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14592)
      Assignment: op='=' (at pp.c:14593)
        ID: name='TA0R' (at pp.c:14593)
        Constant: type='int', value='0' (at pp.c:14593)
      Assignment: op='=' (at pp.c:14603)
        ID: name='Msp430ClockP__TA0CTL' (at pp.c:14603)
        BinaryOp: op='|' (at pp.c:14603)
          Constant: type='int', value='0x0200' (at pp.c:14603)
          Constant: type='int', value='0x0002' (at pp.c:14603)
  FuncDef:  (at pp.c:14607)
    Decl: name='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[], storage=['inline', 'static'] (at pp.c:14607)
      FuncDecl: quals=None (at pp.c:14607)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initTimerA', quals=[] (at pp.c:14607)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14608)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__defaultInitTimerA' (at pp.c:14609)
  FuncDef:  (at pp.c:14613)
    Decl: name='Msp430ClockP__Msp430ClockInit__initTimerA', quals=[], storage=['static', 'inline'] (at pp.c:14613)
      FuncDecl: quals=None (at pp.c:14613)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initTimerA', quals=[] (at pp.c:14613)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14613)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__default__initTimerA' (at pp.c:14615)
  FuncDef:  (at pp.c:14620)
    Decl: name='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[], storage=['inline', 'static'] (at pp.c:14620)
      FuncDecl: quals=None (at pp.c:14620)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultInitClocks', quals=[] (at pp.c:14620)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14621)
      Assignment: op='=' (at pp.c:14627)
        ID: name='BCSCTL1' (at pp.c:14627)
        BinaryOp: op='|' (at pp.c:14627)
          Constant: type='int', value='0x80' (at pp.c:14627)
          BinaryOp: op='&' (at pp.c:14627)
            ID: name='BCSCTL1' (at pp.c:14627)
            BinaryOp: op='|' (at pp.c:14627)
              BinaryOp: op='|' (at pp.c:14627)
                Constant: type='int', value='0x04' (at pp.c:14627)
                Constant: type='int', value='0x02' (at pp.c:14627)
              Constant: type='int', value='0x01' (at pp.c:14627)
      Assignment: op='=' (at pp.c:14635)
        ID: name='BCSCTL2' (at pp.c:14635)
        Constant: type='int', value='0x04' (at pp.c:14635)
      Assignment: op='&=' (at pp.c:14638)
        ID: name='Msp430ClockP__IE1' (at pp.c:14638)
        UnaryOp: op='~' (at pp.c:14638)
          BinaryOp: op='<<' (at pp.c:14638)
            Constant: type='int', value='1' (at pp.c:14638)
            Constant: type='int', value='1' (at pp.c:14638)
  FuncDef:  (at pp.c:14642)
    Decl: name='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[], storage=['inline', 'static'] (at pp.c:14642)
      FuncDecl: quals=None (at pp.c:14642)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__initClocks', quals=[] (at pp.c:14642)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14643)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__defaultInitClocks' (at pp.c:14644)
  FuncDef:  (at pp.c:14648)
    Decl: name='Msp430ClockP__Msp430ClockInit__initClocks', quals=[], storage=['static', 'inline'] (at pp.c:14648)
      FuncDecl: quals=None (at pp.c:14648)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__initClocks', quals=[] (at pp.c:14648)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14648)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__default__initClocks' (at pp.c:14650)
  FuncDef:  (at pp.c:14655)
    Decl: name='Msp430ClockP__test_calib_busywait_delta', quals=[], storage=['inline', 'static'] (at pp.c:14655)
      FuncDecl: quals=None (at pp.c:14655)
        ParamList:  (at pp.c:14655)
          Decl: name='calib', quals=[], storage=[] (at pp.c:14655)
            TypeDecl: declname='calib', quals=[] (at pp.c:14655)
              IdentifierType: names=['int'] (at None)
        TypeDecl: declname='Msp430ClockP__test_calib_busywait_delta', quals=[] (at pp.c:14655)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:14656)
      Decl: name='aclk_count', quals=[], storage=[] (at pp.c:14657)
        TypeDecl: declname='aclk_count', quals=[] (at pp.c:14657)
          IdentifierType: names=['int8_t'] (at None)
        Constant: type='int', value='2' (at pp.c:14657)
      Decl: name='dco_prev', quals=[], storage=[] (at pp.c:14658)
        TypeDecl: declname='dco_prev', quals=[] (at pp.c:14658)
          IdentifierType: names=['uint16_t'] (at None)
        Constant: type='int', value='0' (at pp.c:14658)
      Decl: name='dco_curr', quals=[], storage=[] (at pp.c:14659)
        TypeDecl: declname='dco_curr', quals=[] (at pp.c:14659)
          IdentifierType: names=['uint16_t'] (at None)
        Constant: type='int', value='0' (at pp.c:14659)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__set_dco_calib' (at pp.c:14661)
        ExprList:  (at pp.c:14661)
          ID: name='calib' (at pp.c:14661)
      While:  (at pp.c:14663)
        BinaryOp: op='>' (at pp.c:14663)
          UnaryOp: op='p--' (at pp.c:14663)
            ID: name='aclk_count' (at pp.c:14663)
          Constant: type='int', value='0' (at pp.c:14663)
        Compound:  (at pp.c:14664)
          Assignment: op='=' (at pp.c:14665)
            ID: name='TBCCR0' (at pp.c:14665)
            BinaryOp: op='+' (at pp.c:14665)
              ID: name='TBR' (at pp.c:14665)
              ID: name='Msp430ClockP__ACLK_CALIB_PERIOD' (at pp.c:14665)
          Assignment: op='&=' (at pp.c:14666)
            ID: name='TBCCTL0' (at pp.c:14666)
            UnaryOp: op='~' (at pp.c:14666)
              Constant: type='int', value='0x0001' (at pp.c:14666)
          While:  (at pp.c:14667)
            BinaryOp: op='==' (at pp.c:14667)
              BinaryOp: op='&' (at pp.c:14667)
                ID: name='TBCCTL0' (at pp.c:14667)
                Constant: type='int', value='0x0001' (at pp.c:14667)
              Constant: type='int', value='0' (at pp.c:14667)
          Assignment: op='=' (at pp.c:14668)
            ID: name='dco_prev' (at pp.c:14668)
            ID: name='dco_curr' (at pp.c:14668)
          Assignment: op='=' (at pp.c:14669)
            ID: name='dco_curr' (at pp.c:14669)
            ID: name='TA0R' (at pp.c:14669)
      Return:  (at pp.c:14672)
        BinaryOp: op='-' (at pp.c:14672)
          ID: name='dco_curr' (at pp.c:14672)
          ID: name='dco_prev' (at pp.c:14672)
  FuncDef:  (at pp.c:14678)
    Decl: name='Msp430ClockP__busyCalibrateDco', quals=[], storage=['inline', 'static'] (at pp.c:14678)
      FuncDecl: quals=None (at pp.c:14678)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__busyCalibrateDco', quals=[] (at pp.c:14678)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14679)
      Decl: name='calib', quals=[], storage=[] (at pp.c:14681)
        TypeDecl: declname='calib', quals=[] (at pp.c:14681)
          IdentifierType: names=['int'] (at None)
      Decl: name='step', quals=[], storage=[] (at pp.c:14682)
        TypeDecl: declname='step', quals=[] (at pp.c:14682)
          IdentifierType: names=['int'] (at None)
      For:  (at pp.c:14689)
        ExprList:  (at pp.c:14689)
          Assignment: op='=' (at pp.c:14689)
            ID: name='calib' (at pp.c:14689)
            Constant: type='int', value='0' (at pp.c:14689)
          Assignment: op='=' (at pp.c:14689)
            ID: name='step' (at pp.c:14689)
            Constant: type='int', value='0x800' (at pp.c:14689)
        BinaryOp: op='!=' (at pp.c:14689)
          ID: name='step' (at pp.c:14689)
          Constant: type='int', value='0' (at pp.c:14689)
        Assignment: op='>>=' (at pp.c:14689)
          ID: name='step' (at pp.c:14689)
          Constant: type='int', value='1' (at pp.c:14689)
        Compound:  (at pp.c:14690)
          If:  (at pp.c:14692)
            BinaryOp: op='<=' (at None)
              FuncCall:  (at None)
                ID: name='Msp430ClockP__test_calib_busywait_delta' (at pp.c:14692)
                ExprList:  (at pp.c:14692)
                  BinaryOp: op='|' (at pp.c:14692)
                    ID: name='calib' (at pp.c:14692)
                    ID: name='step' (at pp.c:14692)
              ID: name='Msp430ClockP__TARGET_DCO_DELTA' (at pp.c:14692)
            Compound:  (at pp.c:14692)
              Assignment: op='|=' (at pp.c:14693)
                ID: name='calib' (at pp.c:14693)
                ID: name='step' (at pp.c:14693)
      If:  (at pp.c:14697)
        BinaryOp: op='==' (at pp.c:14697)
          BinaryOp: op='&' (at pp.c:14697)
            ID: name='calib' (at pp.c:14697)
            Constant: type='int', value='0x0e0' (at pp.c:14697)
          Constant: type='int', value='0x0e0' (at pp.c:14697)
        Compound:  (at pp.c:14697)
          Assignment: op='&=' (at pp.c:14698)
            ID: name='calib' (at pp.c:14698)
            UnaryOp: op='~' (at pp.c:14698)
              Constant: type='int', value='0x01f' (at pp.c:14698)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__set_dco_calib' (at pp.c:14700)
        ExprList:  (at pp.c:14700)
          ID: name='calib' (at pp.c:14700)
  FuncDef:  (at pp.c:14704)
    Decl: name='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[], storage=['inline', 'static'] (at pp.c:14704)
      FuncDecl: quals=None (at pp.c:14704)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate', quals=[] (at pp.c:14704)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14705)
      Assignment: op='=' (at pp.c:14709)
        ID: name='Msp430ClockP__TA0CTL' (at pp.c:14709)
        BinaryOp: op='|' (at pp.c:14709)
          Constant: type='int', value='0x0200' (at pp.c:14709)
          Constant: type='int', value='0x0020' (at pp.c:14709)
      Assignment: op='=' (at pp.c:14710)
        ID: name='Msp430ClockP__TBCTL' (at pp.c:14710)
        BinaryOp: op='|' (at pp.c:14710)
          Constant: type='int', value='0x0100' (at pp.c:14710)
          Constant: type='int', value='0x0020' (at pp.c:14710)
      Assignment: op='=' (at pp.c:14711)
        ID: name='BCSCTL1' (at pp.c:14711)
        BinaryOp: op='|' (at pp.c:14711)
          Constant: type='int', value='0x80' (at pp.c:14711)
          Constant: type='int', value='0x04' (at pp.c:14711)
      Assignment: op='=' (at pp.c:14712)
        ID: name='BCSCTL2' (at pp.c:14712)
        Constant: type='int', value='0' (at pp.c:14712)
      Assignment: op='=' (at pp.c:14713)
        ID: name='TBCCTL0' (at pp.c:14713)
        Constant: type='int', value='0x4000' (at pp.c:14713)
  FuncDef:  (at pp.c:14717)
    Decl: name='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[], storage=['inline', 'static'] (at pp.c:14717)
      FuncDecl: quals=None (at pp.c:14717)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate', quals=[] (at pp.c:14717)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14718)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__defaultSetupDcoCalibrate' (at pp.c:14719)
  FuncDef:  (at pp.c:14723)
    Decl: name='Msp430ClockP__Msp430ClockInit__setupDcoCalibrate', quals=[], storage=['static', 'inline'] (at pp.c:14723)
      FuncDecl: quals=None (at pp.c:14723)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Msp430ClockInit__setupDcoCalibrate', quals=[] (at pp.c:14723)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14723)
      FuncCall:  (at None)
        ID: name='Msp430ClockP__Msp430ClockInit__default__setupDcoCalibrate' (at pp.c:14725)
  FuncDef:  (at pp.c:14730)
    Decl: name='Msp430ClockP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:14730)
      FuncDecl: quals=None (at pp.c:14730)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__Init__init', quals=[] (at pp.c:14730)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14731)
      Assignment: op='=' (at pp.c:14733)
        ID: name='Msp430ClockP__TA0CTL' (at pp.c:14733)
        Constant: type='int', value='0x0004' (at pp.c:14733)
      Assignment: op='=' (at pp.c:14734)
        ID: name='Msp430ClockP__TA0IV' (at pp.c:14734)
        Constant: type='int', value='0' (at pp.c:14734)
      Assignment: op='=' (at pp.c:14735)
        ID: name='Msp430ClockP__TBCTL' (at pp.c:14735)
        Constant: type='int', value='0x0004' (at pp.c:14735)
      Assignment: op='=' (at pp.c:14736)
        ID: name='Msp430ClockP__TBIV' (at pp.c:14736)
        Constant: type='int', value='0' (at pp.c:14736)
      Compound:  (at pp.c:14739)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__Msp430ClockInit__setupDcoCalibrate' (at pp.c:14740)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__busyCalibrateDco' (at pp.c:14741)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__Msp430ClockInit__initClocks' (at pp.c:14742)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__Msp430ClockInit__initTimerA' (at pp.c:14743)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__Msp430ClockInit__initTimerB' (at pp.c:14744)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__startTimerA' (at pp.c:14745)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__startTimerB' (at pp.c:14746)
      Return:  (at pp.c:14749)
        ID: name='SUCCESS' (at pp.c:14749)
  FuncDef:  (at pp.c:14753)
    Decl: name='PlatformP__MoteClockInit__init', quals=[], storage=['static', 'inline'] (at pp.c:14753)
      FuncDecl: quals=None (at pp.c:14753)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PlatformP__MoteClockInit__init', quals=[] (at pp.c:14753)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14753)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14755)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14755)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14759)
        ID: name='__nesc_result' (at pp.c:14759)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__Init__init' (at pp.c:14759)
      Return:  (at pp.c:14763)
        ID: name='__nesc_result' (at pp.c:14763)
  FuncDef:  (at pp.c:14768)
    Decl: name='PlatformP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:14768)
      FuncDecl: quals=None (at pp.c:14768)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PlatformP__Init__init', quals=[] (at pp.c:14768)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14770)
      FuncCall:  (at None)
        ID: name='PlatformP__MoteClockInit__init' (at pp.c:14771)
      FuncCall:  (at None)
        ID: name='PlatformP__MoteInit__init' (at pp.c:14772)
      FuncCall:  (at None)
        ID: name='PlatformP__LedsInit__init' (at pp.c:14773)
      Return:  (at pp.c:14774)
        ID: name='SUCCESS' (at pp.c:14774)
  FuncDef:  (at pp.c:14778)
    Decl: name='RealMainP__PlatformInit__init', quals=[], storage=['static', 'inline'] (at pp.c:14778)
      FuncDecl: quals=None (at pp.c:14778)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__PlatformInit__init', quals=[] (at pp.c:14778)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14778)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14780)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14780)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14784)
        ID: name='__nesc_result' (at pp.c:14784)
        FuncCall:  (at None)
          ID: name='PlatformP__Init__init' (at pp.c:14784)
      Return:  (at pp.c:14788)
        ID: name='__nesc_result' (at pp.c:14788)
  FuncDef:  (at pp.c:14793)
    Decl: name='TOSH_CLR_SIMO0_PIN', quals=[], storage=['inline', 'static'] (at pp.c:14793)
      FuncDecl: quals=None (at pp.c:14793)
        TypeDecl: declname='TOSH_CLR_SIMO0_PIN', quals=[] (at pp.c:14793)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14795)
      Decl: name='r@"0x0019"', quals=['volatile'], storage=['static'] (at pp.c:14797)
        TypeDecl: declname='r@"0x0019"', quals=['volatile'] (at pp.c:14797)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='&=' (at pp.c:14800)
        ID: name='r' (at pp.c:14800)
        UnaryOp: op='~' (at pp.c:14800)
          BinaryOp: op='<<' (at pp.c:14800)
            Constant: type='int', value='1' (at pp.c:14800)
            Constant: type='int', value='1' (at pp.c:14800)
  FuncDef:  (at pp.c:14804)
    Decl: name='RealMainP__Scheduler__runNextTask', quals=[], storage=['static', 'inline'] (at pp.c:14804)
      FuncDecl: quals=None (at pp.c:14804)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__Scheduler__runNextTask', quals=[] (at pp.c:14804)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:14804)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14806)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14806)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14810)
        ID: name='__nesc_result' (at pp.c:14810)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__Scheduler__runNextTask' (at pp.c:14810)
      Return:  (at pp.c:14814)
        ID: name='__nesc_result' (at pp.c:14814)
  FuncDef:  (at pp.c:14819)
    Decl: name='LedsP__Leds__led2Off', quals=[], storage=['inline', 'static'] (at pp.c:14819)
      FuncDecl: quals=None (at pp.c:14819)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Leds__led2Off', quals=[] (at pp.c:14819)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14821)
      FuncCall:  (at None)
        ID: name='LedsP__Led2__set' (at pp.c:14822)
  FuncDef:  (at pp.c:14829)
    Decl: name='LowPowerSensingPeriodicSamplerC__Leds__led2Off', quals=[], storage=['static', 'inline'] (at pp.c:14829)
      FuncDecl: quals=None (at pp.c:14829)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Leds__led2Off', quals=[] (at pp.c:14829)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14829)
      FuncCall:  (at None)
        ID: name='LedsP__Leds__led2Off' (at pp.c:14831)
  FuncDef:  (at pp.c:14836)
    Decl: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:14836)
      FuncDecl: quals=None (at pp.c:14836)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__postTask', quals=[] (at pp.c:14836)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14836)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14838)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14838)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14842)
        ID: name='__nesc_result' (at pp.c:14842)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:14842)
          ExprList:  (at pp.c:14842)
            ID: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask' (at pp.c:14842)
      Return:  (at pp.c:14846)
        ID: name='__nesc_result' (at pp.c:14846)
  FuncDef:  (at pp.c:14851)
    Decl: name='LowPowerSensingPeriodicSamplerC__SampleSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:14851)
      FuncDecl: quals=None (at pp.c:14851)
        ParamList:  (at pp.c:14851)
          Decl: name='msg', quals=[], storage=[] (at pp.c:14851)
            PtrDecl: quals=[] (at pp.c:14851)
              TypeDecl: declname='msg', quals=[] (at pp.c:14851)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:14851)
            TypeDecl: declname='error', quals=[] (at pp.c:14851)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleSend__sendDone', quals=[] (at pp.c:14851)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14853)
      If:  (at pp.c:14854)
        BinaryOp: op='!=' (at pp.c:14854)
          ID: name='error' (at pp.c:14854)
          ID: name='SUCCESS' (at pp.c:14854)
        Compound:  (at pp.c:14854)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__postTask' (at pp.c:14855)
        Compound:  (at pp.c:14859)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__Leds__led2Off' (at pp.c:14860)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__readNext' (at pp.c:14861)
  FuncDef:  (at pp.c:14866)
    Decl: name='LplAMSenderP__0__AMSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:14866)
      FuncDecl: quals=None (at pp.c:14866)
        ParamList:  (at pp.c:14866)
          Decl: name='msg', quals=[], storage=[] (at pp.c:14866)
            PtrDecl: quals=[] (at pp.c:14866)
              TypeDecl: declname='msg', quals=[] (at pp.c:14866)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:14866)
            TypeDecl: declname='error', quals=[] (at pp.c:14866)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LplAMSenderP__0__AMSend__sendDone', quals=[] (at pp.c:14866)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14866)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__SampleSend__sendDone' (at pp.c:14868)
        ExprList:  (at pp.c:14868)
          ID: name='msg' (at pp.c:14868)
          ID: name='error' (at pp.c:14868)
  FuncDef:  (at pp.c:14873)
    Decl: name='LplAMSenderP__0__SubAMSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:14873)
      FuncDecl: quals=None (at pp.c:14873)
        ParamList:  (at pp.c:14873)
          Decl: name='msg', quals=[], storage=[] (at pp.c:14873)
            PtrDecl: quals=[] (at pp.c:14873)
              TypeDecl: declname='msg', quals=[] (at pp.c:14873)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:14873)
            TypeDecl: declname='error', quals=[] (at pp.c:14873)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LplAMSenderP__0__SubAMSend__sendDone', quals=[] (at pp.c:14873)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14875)
      FuncCall:  (at None)
        ID: name='LplAMSenderP__0__AMSend__sendDone' (at pp.c:14877)
        ExprList:  (at pp.c:14877)
          ID: name='msg' (at pp.c:14877)
          ID: name='error' (at pp.c:14877)
  FuncDef:  (at pp.c:14881)
    Decl: name='AMQueueEntryP__0__AMSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:14881)
      FuncDecl: quals=None (at pp.c:14881)
        ParamList:  (at pp.c:14881)
          Decl: name='msg', quals=[], storage=[] (at pp.c:14881)
            PtrDecl: quals=[] (at pp.c:14881)
              TypeDecl: declname='msg', quals=[] (at pp.c:14881)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:14881)
            TypeDecl: declname='error', quals=[] (at pp.c:14881)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__AMSend__sendDone', quals=[] (at pp.c:14881)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14881)
      FuncCall:  (at None)
        ID: name='LplAMSenderP__0__SubAMSend__sendDone' (at pp.c:14883)
        ExprList:  (at pp.c:14883)
          ID: name='msg' (at pp.c:14883)
          ID: name='error' (at pp.c:14883)
  FuncDef:  (at pp.c:14888)
    Decl: name='AMQueueEntryP__0__Send__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:14888)
      FuncDecl: quals=None (at pp.c:14888)
        ParamList:  (at pp.c:14888)
          Decl: name='m', quals=[], storage=[] (at pp.c:14888)
            PtrDecl: quals=[] (at pp.c:14888)
              TypeDecl: declname='m', quals=[] (at pp.c:14888)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:14888)
            TypeDecl: declname='err', quals=[] (at pp.c:14888)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__Send__sendDone', quals=[] (at pp.c:14888)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14890)
      FuncCall:  (at None)
        ID: name='AMQueueEntryP__0__AMSend__sendDone' (at pp.c:14891)
        ExprList:  (at pp.c:14891)
          ID: name='m' (at pp.c:14891)
          ID: name='err' (at pp.c:14891)
  FuncDef:  (at pp.c:14895)
    Decl: name='AMQueueImplP__0__Send__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:14895)
      FuncDecl: quals=None (at pp.c:14895)
        ParamList:  (at pp.c:14895)
          Decl: name='id', quals=[], storage=[] (at pp.c:14895)
            TypeDecl: declname='id', quals=[] (at pp.c:14895)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:14895)
            PtrDecl: quals=[] (at pp.c:14895)
              TypeDecl: declname='msg', quals=[] (at pp.c:14895)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:14895)
            TypeDecl: declname='err', quals=[] (at pp.c:14895)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__Send__default__sendDone', quals=[] (at pp.c:14895)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14897)
  FuncDef:  (at pp.c:14901)
    Decl: name='AMQueueImplP__0__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:14901)
      FuncDecl: quals=None (at pp.c:14901)
        ParamList:  (at pp.c:14901)
          Decl: name='arg_0x102b3be18', quals=[], storage=[] (at pp.c:14901)
            TypeDecl: declname='arg_0x102b3be18', quals=[] (at pp.c:14901)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:14901)
            PtrDecl: quals=[] (at pp.c:14901)
              TypeDecl: declname='msg', quals=[] (at pp.c:14901)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:14901)
            TypeDecl: declname='error', quals=[] (at pp.c:14901)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__Send__sendDone', quals=[] (at pp.c:14901)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14901)
      Switch:  (at pp.c:14903)
        ID: name='arg_0x102b3be18' (at pp.c:14903)
        Compound:  (at pp.c:14903)
          Case:  (at pp.c:14905)
            Constant: type='int', value='0U' (at pp.c:14905)
            FuncCall:  (at None)
              ID: name='AMQueueEntryP__0__Send__sendDone' (at pp.c:14907)
              ExprList:  (at pp.c:14907)
                ID: name='msg' (at pp.c:14907)
                ID: name='error' (at pp.c:14907)
          Break:  (at pp.c:14909)
          Default:  (at pp.c:14911)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__Send__default__sendDone' (at pp.c:14913)
              ExprList:  (at pp.c:14913)
                ID: name='arg_0x102b3be18' (at pp.c:14913)
                ID: name='msg' (at pp.c:14913)
                ID: name='error' (at pp.c:14913)
          Break:  (at pp.c:14915)
  FuncDef:  (at pp.c:14922)
    Decl: name='AMQueueImplP__0__CancelTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:14922)
      FuncDecl: quals=None (at pp.c:14922)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__0__CancelTask__runTask', quals=[] (at pp.c:14922)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:14924)
      Decl: name='i', quals=[], storage=[] (at pp.c:14925)
        TypeDecl: declname='i', quals=[] (at pp.c:14925)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='j', quals=[], storage=[] (at pp.c:14927)
        TypeDecl: declname='j', quals=[] (at pp.c:14927)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='mask', quals=[], storage=[] (at pp.c:14929)
        TypeDecl: declname='mask', quals=[] (at pp.c:14929)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='last', quals=[], storage=[] (at pp.c:14931)
        TypeDecl: declname='last', quals=[] (at pp.c:14931)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='msg', quals=[], storage=[] (at pp.c:14932)
        PtrDecl: quals=[] (at pp.c:14932)
          TypeDecl: declname='msg', quals=[] (at pp.c:14932)
            IdentifierType: names=['message_t'] (at None)
      For:  (at pp.c:14935)
        Assignment: op='=' (at pp.c:14935)
          ID: name='i' (at pp.c:14935)
          Constant: type='int', value='0' (at pp.c:14935)
        BinaryOp: op='<' (at pp.c:14935)
          ID: name='i' (at pp.c:14935)
          BinaryOp: op='+' (at pp.c:14935)
            BinaryOp: op='/' (at pp.c:14935)
              Constant: type='int', value='1' (at pp.c:14935)
              Constant: type='int', value='8' (at pp.c:14935)
            Constant: type='int', value='1' (at pp.c:14935)
        UnaryOp: op='p++' (at pp.c:14935)
          ID: name='i' (at pp.c:14935)
        Compound:  (at pp.c:14935)
          If:  (at pp.c:14936)
            ArrayRef:  (at pp.c:14936)
              ID: name='AMQueueImplP__0__cancelMask' (at pp.c:14936)
              ID: name='i' (at pp.c:14936)
            Compound:  (at pp.c:14936)
              For:  (at pp.c:14937)
                ExprList:  (at pp.c:14937)
                  Assignment: op='=' (at pp.c:14937)
                    ID: name='mask' (at pp.c:14937)
                    Constant: type='int', value='1' (at pp.c:14937)
                  Assignment: op='=' (at pp.c:14937)
                    ID: name='j' (at pp.c:14937)
                    Constant: type='int', value='0' (at pp.c:14937)
                BinaryOp: op='<' (at pp.c:14937)
                  ID: name='j' (at pp.c:14937)
                  Constant: type='int', value='8' (at pp.c:14937)
                UnaryOp: op='p++' (at pp.c:14937)
                  ID: name='j' (at pp.c:14937)
                Compound:  (at pp.c:14937)
                  If:  (at pp.c:14938)
                    BinaryOp: op='&' (at pp.c:14938)
                      ArrayRef:  (at pp.c:14938)
                        ID: name='AMQueueImplP__0__cancelMask' (at pp.c:14938)
                        ID: name='i' (at pp.c:14938)
                      ID: name='mask' (at pp.c:14938)
                    Compound:  (at pp.c:14938)
                      Assignment: op='=' (at pp.c:14939)
                        ID: name='last' (at pp.c:14939)
                        BinaryOp: op='+' (at pp.c:14939)
                          BinaryOp: op='*' (at pp.c:14939)
                            ID: name='i' (at pp.c:14939)
                            Constant: type='int', value='8' (at pp.c:14939)
                          ID: name='j' (at pp.c:14939)
                      Assignment: op='=' (at pp.c:14940)
                        ID: name='msg' (at pp.c:14940)
                        StructRef: type='.' (at pp.c:14940)
                          ArrayRef:  (at pp.c:14940)
                            ID: name='AMQueueImplP__0__queue' (at pp.c:14940)
                            ID: name='last' (at pp.c:14940)
                          ID: name='msg' (at pp.c:14940)
                      Assignment: op='=' (at pp.c:14941)
                        StructRef: type='.' (at pp.c:14941)
                          ArrayRef:  (at pp.c:14941)
                            ID: name='AMQueueImplP__0__queue' (at pp.c:14941)
                            ID: name='last' (at pp.c:14941)
                          ID: name='msg' (at pp.c:14941)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            PtrDecl: quals=[] (at pp.c:14941)
                              TypeDecl: declname=None, quals=[] (at None)
                                IdentifierType: names=['void'] (at None)
                          Constant: type='int', value='0' (at pp.c:14941)
                      Assignment: op='&=' (at pp.c:14942)
                        ArrayRef:  (at pp.c:14942)
                          ID: name='AMQueueImplP__0__cancelMask' (at pp.c:14942)
                          ID: name='i' (at pp.c:14942)
                        UnaryOp: op='~' (at pp.c:14942)
                          ID: name='mask' (at pp.c:14942)
                      FuncCall:  (at None)
                        ID: name='AMQueueImplP__0__Send__sendDone' (at pp.c:14943)
                        ExprList:  (at pp.c:14943)
                          ID: name='last' (at pp.c:14943)
                          ID: name='msg' (at pp.c:14943)
                          ID: name='ECANCEL' (at pp.c:14943)
                  Assignment: op='<<=' (at pp.c:14945)
                    ID: name='mask' (at pp.c:14945)
                    Constant: type='int', value='1' (at pp.c:14945)
  FuncDef:  (at pp.c:14952)
    Decl: name='LowPowerSensingPeriodicSamplerC__SampleLogRead__readNext', quals=[], storage=['static', 'inline'] (at pp.c:14952)
      FuncDecl: quals=None (at pp.c:14952)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleLogRead__readNext', quals=[] (at pp.c:14952)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:14952)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14954)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14954)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14958)
        ID: name='__nesc_result' (at pp.c:14958)
        FuncCall:  (at None)
          ID: name='SampleLogReaderP__0__SampleLogRead__readNext' (at pp.c:14958)
      Return:  (at pp.c:14962)
        ID: name='__nesc_result' (at pp.c:14962)
  FuncDef:  (at pp.c:14967)
    Decl: name='Stm25pLogP__Write__currentOffset', quals=[], storage=['inline', 'static'] (at pp.c:14967)
      FuncDecl: quals=None (at pp.c:14967)
        ParamList:  (at pp.c:14967)
          Decl: name='id', quals=[], storage=[] (at pp.c:14967)
            TypeDecl: declname='id', quals=[] (at pp.c:14967)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Write__currentOffset', quals=[] (at pp.c:14967)
          IdentifierType: names=['storage_cookie_t'] (at None)
    Compound:  (at pp.c:14969)
      Return:  (at pp.c:14970)
        StructRef: type='.' (at pp.c:14970)
          ArrayRef:  (at pp.c:14970)
            ID: name='Stm25pLogP__m_log_info' (at pp.c:14970)
            ID: name='id' (at pp.c:14970)
          ID: name='write_addr' (at pp.c:14970)
  FuncDef:  (at pp.c:14974)
    Decl: name='SampleLogReaderP__0__LogWrite__currentOffset', quals=[], storage=['static', 'inline'] (at pp.c:14974)
      FuncDecl: quals=None (at pp.c:14974)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SampleLogReaderP__0__LogWrite__currentOffset', quals=[] (at pp.c:14974)
          IdentifierType: names=['storage_cookie_t'] (at None)
    Compound:  (at pp.c:14974)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14976)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14976)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:14980)
        ID: name='__nesc_result' (at pp.c:14980)
        FuncCall:  (at None)
          ID: name='Stm25pLogP__Write__currentOffset' (at pp.c:14980)
          ExprList:  (at pp.c:14980)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:14980)
      Return:  (at pp.c:14984)
        ID: name='__nesc_result' (at pp.c:14984)
  FuncDef:  (at pp.c:14989)
    Decl: name='Stm25pLogP__Read__currentOffset', quals=[], storage=['inline', 'static'] (at pp.c:14989)
      FuncDecl: quals=None (at pp.c:14989)
        ParamList:  (at pp.c:14989)
          Decl: name='id', quals=[], storage=[] (at pp.c:14989)
            TypeDecl: declname='id', quals=[] (at pp.c:14989)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Read__currentOffset', quals=[] (at pp.c:14989)
          IdentifierType: names=['storage_cookie_t'] (at None)
    Compound:  (at pp.c:14991)
      Return:  (at pp.c:14992)
        StructRef: type='.' (at pp.c:14992)
          ArrayRef:  (at pp.c:14992)
            ID: name='Stm25pLogP__m_log_info' (at pp.c:14992)
            ID: name='id' (at pp.c:14992)
          ID: name='read_addr' (at pp.c:14992)
  FuncDef:  (at pp.c:14996)
    Decl: name='SampleLogReaderP__0__LogRead__currentOffset', quals=[], storage=['static', 'inline'] (at pp.c:14996)
      FuncDecl: quals=None (at pp.c:14996)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SampleLogReaderP__0__LogRead__currentOffset', quals=[] (at pp.c:14996)
          IdentifierType: names=['storage_cookie_t'] (at None)
    Compound:  (at pp.c:14996)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:14998)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:14998)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15002)
        ID: name='__nesc_result' (at pp.c:15002)
        FuncCall:  (at None)
          ID: name='Stm25pLogP__Read__currentOffset' (at pp.c:15002)
          ExprList:  (at pp.c:15002)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:15002)
      Return:  (at pp.c:15006)
        ID: name='__nesc_result' (at pp.c:15006)
  FuncDef:  (at pp.c:15011)
    Decl: name='Stm25pLogP__Read__read', quals=[], storage=['inline', 'static'] (at pp.c:15011)
      FuncDecl: quals=None (at pp.c:15011)
        ParamList:  (at pp.c:15011)
          Decl: name='id', quals=[], storage=[] (at pp.c:15011)
            TypeDecl: declname='id', quals=[] (at pp.c:15011)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:15011)
            PtrDecl: quals=[] (at pp.c:15011)
              TypeDecl: declname='buf', quals=[] (at pp.c:15011)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15011)
            TypeDecl: declname='len', quals=[] (at pp.c:15011)
              IdentifierType: names=['storage_len_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Read__read', quals=[] (at pp.c:15011)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15013)
      Assignment: op='=' (at pp.c:15015)
        StructRef: type='.' (at pp.c:15015)
          ID: name='Stm25pLogP__m_req' (at pp.c:15015)
          ID: name='req' (at pp.c:15015)
        ID: name='Stm25pLogP__S_READ' (at pp.c:15015)
      Assignment: op='=' (at pp.c:15016)
        StructRef: type='.' (at pp.c:15016)
          ID: name='Stm25pLogP__m_req' (at pp.c:15016)
          ID: name='buf' (at pp.c:15016)
        ID: name='buf' (at pp.c:15016)
      Assignment: op='=' (at pp.c:15017)
        StructRef: type='.' (at pp.c:15017)
          ID: name='Stm25pLogP__m_req' (at pp.c:15017)
          ID: name='len' (at pp.c:15017)
        ID: name='len' (at pp.c:15017)
      Assignment: op='=' (at pp.c:15018)
        ID: name='Stm25pLogP__m_len' (at pp.c:15018)
        ID: name='len' (at pp.c:15018)
      Return:  (at pp.c:15019)
        FuncCall:  (at None)
          ID: name='Stm25pLogP__newRequest' (at pp.c:15019)
          ExprList:  (at pp.c:15019)
            ID: name='id' (at pp.c:15019)
  FuncDef:  (at pp.c:15023)
    Decl: name='SampleLogReaderP__0__LogRead__read', quals=[], storage=['static', 'inline'] (at pp.c:15023)
      FuncDecl: quals=None (at pp.c:15023)
        ParamList:  (at pp.c:15023)
          Decl: name='buf', quals=[], storage=[] (at pp.c:15023)
            PtrDecl: quals=[] (at pp.c:15023)
              TypeDecl: declname='buf', quals=[] (at pp.c:15023)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15023)
            TypeDecl: declname='len', quals=[] (at pp.c:15023)
              IdentifierType: names=['storage_len_t'] (at None)
        TypeDecl: declname='SampleLogReaderP__0__LogRead__read', quals=[] (at pp.c:15023)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15023)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15025)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15025)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15029)
        ID: name='__nesc_result' (at pp.c:15029)
        FuncCall:  (at None)
          ID: name='Stm25pLogP__Read__read' (at pp.c:15029)
          ExprList:  (at pp.c:15029)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:15029)
            ID: name='buf' (at pp.c:15029)
            ID: name='len' (at pp.c:15029)
      Return:  (at pp.c:15033)
        ID: name='__nesc_result' (at pp.c:15033)
  FuncDef:  (at pp.c:15038)
    Decl: name='DeferredPowerManagerP__0__startTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:15038)
      FuncDecl: quals=None (at pp.c:15038)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__startTask__postTask', quals=[] (at pp.c:15038)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15038)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15040)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15040)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15044)
        ID: name='__nesc_result' (at pp.c:15044)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:15044)
          ExprList:  (at pp.c:15044)
            ID: name='DeferredPowerManagerP__0__startTask' (at pp.c:15044)
      Return:  (at pp.c:15048)
        ID: name='__nesc_result' (at pp.c:15048)
  FuncDef:  (at pp.c:15053)
    Decl: name='DeferredPowerManagerP__0__ResourceDefaultOwner__requested', quals=[], storage=['inline', 'static'] (at pp.c:15053)
      FuncDecl: quals=None (at pp.c:15053)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__ResourceDefaultOwner__requested', quals=[] (at pp.c:15053)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15055)
      If:  (at pp.c:15056)
        BinaryOp: op='==' (at pp.c:15056)
          ID: name='DeferredPowerManagerP__0__stopping' (at pp.c:15056)
          ID: name='FALSE' (at pp.c:15056)
        Compound:  (at pp.c:15056)
          Assignment: op='=' (at pp.c:15057)
            ID: name='DeferredPowerManagerP__0__stopTimer' (at pp.c:15057)
            ID: name='TRUE' (at pp.c:15057)
          FuncCall:  (at None)
            ID: name='DeferredPowerManagerP__0__startTask__postTask' (at pp.c:15058)
        Compound:  (at pp.c:15060)
          Assignment: op='=' (at pp.c:15062)
            ID: name='DeferredPowerManagerP__0__requested' (at pp.c:15062)
            ID: name='TRUE' (at pp.c:15062)
  FuncDef:  (at pp.c:15067)
    Decl: name='ArbiterP__0__ResourceDefaultOwner__requested', quals=[], storage=['static', 'inline'] (at pp.c:15067)
      FuncDecl: quals=None (at pp.c:15067)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__requested', quals=[] (at pp.c:15067)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15067)
      FuncCall:  (at None)
        ID: name='DeferredPowerManagerP__0__ResourceDefaultOwner__requested' (at pp.c:15069)
  FuncDef:  (at pp.c:15074)
    Decl: name='FcfsResourceQueueC__1__FcfsQueue__isEnqueued', quals=[], storage=['inline', 'static'] (at pp.c:15074)
      FuncDecl: quals=None (at pp.c:15074)
        ParamList:  (at pp.c:15074)
          Decl: name='id', quals=[], storage=[] (at pp.c:15074)
            TypeDecl: declname='id', quals=[] (at pp.c:15074)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__isEnqueued', quals=[] (at pp.c:15074)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:15076)
      Compound:  (at pp.c:15079)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:15080)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:15080)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='||' (at pp.c:15082)
            BinaryOp: op='!=' (at pp.c:15082)
              ArrayRef:  (at pp.c:15082)
                ID: name='FcfsResourceQueueC__1__resQ' (at pp.c:15082)
                ID: name='id' (at pp.c:15082)
              ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:15082)
            BinaryOp: op='==' (at pp.c:15082)
              ID: name='FcfsResourceQueueC__1__qTail' (at pp.c:15082)
              ID: name='id' (at pp.c:15082)
        Return:  (at pp.c:15085)
          ID: name='__nesc_temp' (at pp.c:15085)
  FuncDef:  (at pp.c:15090)
    Decl: name='FcfsResourceQueueC__1__FcfsQueue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:15090)
      FuncDecl: quals=None (at pp.c:15090)
        ParamList:  (at pp.c:15090)
          Decl: name='id', quals=[], storage=[] (at pp.c:15090)
            TypeDecl: declname='id', quals=[] (at pp.c:15090)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__enqueue', quals=[] (at pp.c:15090)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15092)
      Compound:  (at pp.c:15095)
        If:  (at pp.c:15096)
          UnaryOp: op='!' (at None)
            FuncCall:  (at None)
              ID: name='FcfsResourceQueueC__1__FcfsQueue__isEnqueued' (at pp.c:15096)
              ExprList:  (at pp.c:15096)
                ID: name='id' (at pp.c:15096)
          Compound:  (at pp.c:15096)
            If:  (at pp.c:15097)
              BinaryOp: op='==' (at pp.c:15097)
                ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:15097)
                ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:15097)
              Compound:  (at pp.c:15097)
                Assignment: op='=' (at pp.c:15098)
                  ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:15098)
                  ID: name='id' (at pp.c:15098)
              Compound:  (at pp.c:15100)
                Assignment: op='=' (at pp.c:15102)
                  ArrayRef:  (at pp.c:15102)
                    ID: name='FcfsResourceQueueC__1__resQ' (at pp.c:15102)
                    ID: name='FcfsResourceQueueC__1__qTail' (at pp.c:15102)
                  ID: name='id' (at pp.c:15102)
            Assignment: op='=' (at pp.c:15105)
              ID: name='FcfsResourceQueueC__1__qTail' (at pp.c:15105)
              ID: name='id' (at pp.c:15105)
            Compound:  (at pp.c:15106)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:15107)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:15107)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='SUCCESS' (at pp.c:15109)
              Return:  (at pp.c:15112)
                ID: name='__nesc_temp' (at pp.c:15112)
        Compound:  (at pp.c:15116)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:15117)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:15117)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='EBUSY' (at pp.c:15119)
          Return:  (at pp.c:15122)
            ID: name='__nesc_temp' (at pp.c:15122)
  FuncDef:  (at pp.c:15128)
    Decl: name='ArbiterP__0__Queue__enqueue', quals=[], storage=['static', 'inline'] (at pp.c:15128)
      FuncDecl: quals=None (at pp.c:15128)
        ParamList:  (at pp.c:15128)
          Decl: name='id', quals=[], storage=[] (at pp.c:15128)
            TypeDecl: declname='id', quals=[] (at pp.c:15128)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='ArbiterP__0__Queue__enqueue', quals=[] (at pp.c:15128)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15128)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15130)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15130)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15134)
        ID: name='__nesc_result' (at pp.c:15134)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__1__FcfsQueue__enqueue' (at pp.c:15134)
          ExprList:  (at pp.c:15134)
            ID: name='id' (at pp.c:15134)
      Return:  (at pp.c:15138)
        ID: name='__nesc_result' (at pp.c:15138)
  FuncDef:  (at pp.c:15143)
    Decl: name='ArbiterP__0__ResourceRequested__default__requested', quals=[], storage=['inline', 'static'] (at pp.c:15143)
      FuncDecl: quals=None (at pp.c:15143)
        ParamList:  (at pp.c:15143)
          Decl: name='id', quals=[], storage=[] (at pp.c:15143)
            TypeDecl: declname='id', quals=[] (at pp.c:15143)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceRequested__default__requested', quals=[] (at pp.c:15143)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15145)
  FuncDef:  (at pp.c:15149)
    Decl: name='ArbiterP__0__ResourceRequested__requested', quals=[], storage=['static', 'inline'] (at pp.c:15149)
      FuncDecl: quals=None (at pp.c:15149)
        ParamList:  (at pp.c:15149)
          Decl: name='arg_0x101ac2020', quals=[], storage=[] (at pp.c:15149)
            TypeDecl: declname='arg_0x101ac2020', quals=[] (at pp.c:15149)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceRequested__requested', quals=[] (at pp.c:15149)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15149)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__ResourceRequested__default__requested' (at pp.c:15151)
        ExprList:  (at pp.c:15151)
          ID: name='arg_0x101ac2020' (at pp.c:15151)
  FuncDef:  (at pp.c:15156)
    Decl: name='ArbiterP__0__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:15156)
      FuncDecl: quals=None (at pp.c:15156)
        ParamList:  (at pp.c:15156)
          Decl: name='id', quals=[], storage=[] (at pp.c:15156)
            TypeDecl: declname='id', quals=[] (at pp.c:15156)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__Resource__request', quals=[] (at pp.c:15156)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15158)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__ResourceRequested__requested' (at pp.c:15159)
        ExprList:  (at pp.c:15159)
          ID: name='ArbiterP__0__resId' (at pp.c:15159)
      Compound:  (at pp.c:15160)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:15160)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:15160)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:15160)
        Compound:  (at pp.c:15162)
          If:  (at pp.c:15163)
            BinaryOp: op='==' (at pp.c:15163)
              ID: name='ArbiterP__0__state' (at pp.c:15163)
              ID: name='ArbiterP__0__RES_CONTROLLED' (at pp.c:15163)
            Compound:  (at pp.c:15163)
              Assignment: op='=' (at pp.c:15164)
                ID: name='ArbiterP__0__state' (at pp.c:15164)
                ID: name='ArbiterP__0__RES_GRANTING' (at pp.c:15164)
              Assignment: op='=' (at pp.c:15165)
                ID: name='ArbiterP__0__reqResId' (at pp.c:15165)
                ID: name='id' (at pp.c:15165)
            Compound:  (at pp.c:15167)
              If:  (at pp.c:15169)
                BinaryOp: op='==' (at pp.c:15169)
                  ID: name='ArbiterP__0__reqResId' (at pp.c:15169)
                  ID: name='id' (at pp.c:15169)
                Compound:  (at pp.c:15169)
                  Compound:  (at pp.c:15170)
                    Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:15171)
                      TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:15171)
                        IdentifierType: names=['char', 'unsigned'] (at None)
                      ID: name='SUCCESS' (at pp.c:15173)
                    Compound:  (at pp.c:15175)
                      FuncCall:  (at None)
                        ID: name='__nesc_atomic_end' (at pp.c:15177)
                        ExprList:  (at pp.c:15177)
                          ID: name='__nesc_atomic' (at pp.c:15177)
                      Return:  (at pp.c:15179)
                        ID: name='__nesc_temp' (at pp.c:15179)
                Compound:  (at pp.c:15185)
                  Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:15186)
                    TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:15186)
                      IdentifierType: names=['char', 'unsigned'] (at None)
                    FuncCall:  (at None)
                      ID: name='ArbiterP__0__Queue__enqueue' (at pp.c:15188)
                      ExprList:  (at pp.c:15188)
                        ID: name='id' (at pp.c:15188)
                  Compound:  (at pp.c:15190)
                    FuncCall:  (at None)
                      ID: name='__nesc_atomic_end' (at pp.c:15192)
                      ExprList:  (at pp.c:15192)
                        ID: name='__nesc_atomic' (at pp.c:15192)
                    Return:  (at pp.c:15194)
                      ID: name='__nesc_temp' (at pp.c:15194)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:15200)
          ExprList:  (at pp.c:15200)
            ID: name='__nesc_atomic' (at pp.c:15200)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__ResourceDefaultOwner__requested' (at pp.c:15202)
      Return:  (at pp.c:15203)
        ID: name='SUCCESS' (at pp.c:15203)
  FuncDef:  (at pp.c:15207)
    Decl: name='Stm25pSectorP__Stm25pResource__request', quals=[], storage=['static', 'inline'] (at pp.c:15207)
      FuncDecl: quals=None (at pp.c:15207)
        ParamList:  (at pp.c:15207)
          Decl: name='arg_0x101a03a68', quals=[], storage=[] (at pp.c:15207)
            TypeDecl: declname='arg_0x101a03a68', quals=[] (at pp.c:15207)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Stm25pResource__request', quals=[] (at pp.c:15207)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15207)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15209)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15209)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15213)
        ID: name='__nesc_result' (at pp.c:15213)
        FuncCall:  (at None)
          ID: name='ArbiterP__0__Resource__request' (at pp.c:15213)
          ExprList:  (at pp.c:15213)
            ID: name='arg_0x101a03a68' (at pp.c:15213)
      Return:  (at pp.c:15217)
        ID: name='__nesc_result' (at pp.c:15217)
  FuncDef:  (at pp.c:15222)
    Decl: name='Stm25pSectorP__ClientResource__request', quals=[], storage=['inline', 'static'] (at pp.c:15222)
      FuncDecl: quals=None (at pp.c:15222)
        ParamList:  (at pp.c:15222)
          Decl: name='id', quals=[], storage=[] (at pp.c:15222)
            TypeDecl: declname='id', quals=[] (at pp.c:15222)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__ClientResource__request', quals=[] (at pp.c:15222)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15224)
      Return:  (at pp.c:15225)
        FuncCall:  (at None)
          ID: name='Stm25pSectorP__Stm25pResource__request' (at pp.c:15225)
          ExprList:  (at pp.c:15225)
            ID: name='id' (at pp.c:15225)
  FuncDef:  (at pp.c:15229)
    Decl: name='Stm25pLogP__ClientResource__default__request', quals=[], storage=['inline', 'static'] (at pp.c:15229)
      FuncDecl: quals=None (at pp.c:15229)
        ParamList:  (at pp.c:15229)
          Decl: name='id', quals=[], storage=[] (at pp.c:15229)
            TypeDecl: declname='id', quals=[] (at pp.c:15229)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__ClientResource__default__request', quals=[] (at pp.c:15229)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15231)
      Return:  (at pp.c:15233)
        ID: name='FAIL' (at pp.c:15233)
  FuncDef:  (at pp.c:15237)
    Decl: name='Stm25pLogP__ClientResource__request', quals=[], storage=['static', 'inline'] (at pp.c:15237)
      FuncDecl: quals=None (at pp.c:15237)
        ParamList:  (at pp.c:15237)
          Decl: name='arg_0x10194c220', quals=[], storage=[] (at pp.c:15237)
            TypeDecl: declname='arg_0x10194c220', quals=[] (at pp.c:15237)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__ClientResource__request', quals=[] (at pp.c:15237)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15237)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15239)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15239)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:15243)
        ID: name='arg_0x10194c220' (at pp.c:15243)
        Compound:  (at pp.c:15243)
          Case:  (at pp.c:15245)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:15245)
            Assignment: op='=' (at pp.c:15247)
              ID: name='__nesc_result' (at pp.c:15247)
              FuncCall:  (at None)
                ID: name='Stm25pSectorP__ClientResource__request' (at pp.c:15247)
                ExprList:  (at pp.c:15247)
                  ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:15247)
          Break:  (at pp.c:15249)
          Default:  (at pp.c:15251)
            Assignment: op='=' (at pp.c:15253)
              ID: name='__nesc_result' (at pp.c:15253)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__ClientResource__default__request' (at pp.c:15253)
                ExprList:  (at pp.c:15253)
                  ID: name='arg_0x10194c220' (at pp.c:15253)
          Break:  (at pp.c:15255)
      Return:  (at pp.c:15261)
        ID: name='__nesc_result' (at pp.c:15261)
  FuncDef:  (at pp.c:15266)
    Decl: name='LowPowerSensingPeriodicSamplerC__readNextTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:15266)
      FuncDecl: quals=None (at pp.c:15266)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__readNextTask__postTask', quals=[] (at pp.c:15266)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15266)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15268)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15268)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15272)
        ID: name='__nesc_result' (at pp.c:15272)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:15272)
          ExprList:  (at pp.c:15272)
            ID: name='LowPowerSensingPeriodicSamplerC__readNextTask' (at pp.c:15272)
      Return:  (at pp.c:15276)
        ID: name='__nesc_result' (at pp.c:15276)
  FuncDef:  (at pp.c:15281)
    Decl: name='HplMsp430GeneralIOP__37__IO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:15281)
      FuncDecl: quals=None (at pp.c:15281)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__37__IO__toggle', quals=[] (at pp.c:15281)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15283)
      Compound:  (at pp.c:15285)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:15285)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:15285)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:15285)
        Assignment: op='^=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:15287)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='49U' (at pp.c:15287)
          BinaryOp: op='<<' (at pp.c:15287)
            Constant: type='int', value='0x01' (at pp.c:15287)
            Constant: type='int', value='5' (at pp.c:15287)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:15289)
          ExprList:  (at pp.c:15289)
            ID: name='__nesc_atomic' (at pp.c:15289)
  FuncDef:  (at pp.c:15293)
    Decl: name='Msp430GpioC__1__HplGeneralIO__toggle', quals=[], storage=['static', 'inline'] (at pp.c:15293)
      FuncDecl: quals=None (at pp.c:15293)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__1__HplGeneralIO__toggle', quals=[] (at pp.c:15293)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15293)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__37__IO__toggle' (at pp.c:15295)
  FuncDef:  (at pp.c:15300)
    Decl: name='Msp430GpioC__1__GeneralIO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:15300)
      FuncDecl: quals=None (at pp.c:15300)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__1__GeneralIO__toggle', quals=[] (at pp.c:15300)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15302)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__1__HplGeneralIO__toggle' (at pp.c:15304)
  FuncDef:  (at pp.c:15308)
    Decl: name='LedsP__Led1__toggle', quals=[], storage=['static', 'inline'] (at pp.c:15308)
      FuncDecl: quals=None (at pp.c:15308)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led1__toggle', quals=[] (at pp.c:15308)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15308)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__1__GeneralIO__toggle' (at pp.c:15310)
  FuncDef:  (at pp.c:15315)
    Decl: name='LedsP__Leds__led1Toggle', quals=[], storage=['inline', 'static'] (at pp.c:15315)
      FuncDecl: quals=None (at pp.c:15315)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Leds__led1Toggle', quals=[] (at pp.c:15315)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15317)
      FuncCall:  (at None)
        ID: name='LedsP__Led1__toggle' (at pp.c:15318)
  FuncDef:  (at pp.c:15325)
    Decl: name='LowPowerSensingPeriodicSamplerC__Leds__led1Toggle', quals=[], storage=['static', 'inline'] (at pp.c:15325)
      FuncDecl: quals=None (at pp.c:15325)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Leds__led1Toggle', quals=[] (at pp.c:15325)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15325)
      FuncCall:  (at None)
        ID: name='LedsP__Leds__led1Toggle' (at pp.c:15327)
  FuncDef:  (at pp.c:15332)
    Decl: name='AMQueueImplP__0__errorTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:15332)
      FuncDecl: quals=None (at pp.c:15332)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__0__errorTask__runTask', quals=[] (at pp.c:15332)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15334)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__sendDone' (at pp.c:15335)
        ExprList:  (at pp.c:15335)
          ID: name='AMQueueImplP__0__current' (at pp.c:15335)
          StructRef: type='.' (at pp.c:15335)
            ArrayRef:  (at pp.c:15335)
              ID: name='AMQueueImplP__0__queue' (at pp.c:15335)
              ID: name='AMQueueImplP__0__current' (at pp.c:15335)
            ID: name='msg' (at pp.c:15335)
          ID: name='FAIL' (at pp.c:15335)
  FuncDef:  (at pp.c:15339)
    Decl: name='AMQueueImplP__0__errorTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:15339)
      FuncDecl: quals=None (at pp.c:15339)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__0__errorTask__postTask', quals=[] (at pp.c:15339)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15339)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15341)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15341)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15345)
        ID: name='__nesc_result' (at pp.c:15345)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:15345)
          ExprList:  (at pp.c:15345)
            ID: name='AMQueueImplP__0__errorTask' (at pp.c:15345)
      Return:  (at pp.c:15349)
        ID: name='__nesc_result' (at pp.c:15349)
  FuncDef:  (at pp.c:15354)
    Decl: name='AMQueueImplP__0__AMSend__send', quals=[], storage=['static', 'inline'] (at pp.c:15354)
      FuncDecl: quals=None (at pp.c:15354)
        ParamList:  (at pp.c:15354)
          Decl: name='arg_0x102b39020', quals=[], storage=[] (at pp.c:15354)
            TypeDecl: declname='arg_0x102b39020', quals=[] (at pp.c:15354)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:15354)
            TypeDecl: declname='addr', quals=[] (at pp.c:15354)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15354)
            PtrDecl: quals=[] (at pp.c:15354)
              TypeDecl: declname='msg', quals=[] (at pp.c:15354)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15354)
            TypeDecl: declname='len', quals=[] (at pp.c:15354)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__AMSend__send', quals=[] (at pp.c:15354)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15354)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15356)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15356)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15360)
        ID: name='__nesc_result' (at pp.c:15360)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__AMSend__send' (at pp.c:15360)
          ExprList:  (at pp.c:15360)
            ID: name='arg_0x102b39020' (at pp.c:15360)
            ID: name='addr' (at pp.c:15360)
            ID: name='msg' (at pp.c:15360)
            ID: name='len' (at pp.c:15360)
      Return:  (at pp.c:15364)
        ID: name='__nesc_result' (at pp.c:15364)
  FuncDef:  (at pp.c:15369)
    Decl: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:15369)
      FuncDecl: quals=None (at pp.c:15369)
        ParamList:  (at pp.c:15369)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15369)
            PtrDecl: quals=[] (at pp.c:15369)
              TypeDecl: declname='msg', quals=[] (at pp.c:15369)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:15369)
          TypeDecl: declname='CC2420ActiveMessageP__CC2420PacketBody__getHeader', quals=[] (at pp.c:15369)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:15369)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15371)
        PtrDecl: quals=[] (at pp.c:15371)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15371)
            Struct: name='cc2420_header_t', packed=False (at pp.c:15371)
      Assignment: op='=' (at pp.c:15375)
        ID: name='__nesc_result' (at pp.c:15375)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:15375)
          ExprList:  (at pp.c:15375)
            ID: name='msg' (at pp.c:15375)
      Return:  (at pp.c:15379)
        ID: name='__nesc_result' (at pp.c:15379)
  FuncDef:  (at pp.c:15384)
    Decl: name='CC2420ActiveMessageP__Packet__payloadLength', quals=[], storage=['inline', 'static'] (at pp.c:15384)
      FuncDecl: quals=None (at pp.c:15384)
        ParamList:  (at pp.c:15384)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15384)
            PtrDecl: quals=[] (at pp.c:15384)
              TypeDecl: declname='msg', quals=[] (at pp.c:15384)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__Packet__payloadLength', quals=[] (at pp.c:15384)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15386)
      Return:  (at pp.c:15387)
        BinaryOp: op='-' (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint8' (at pp.c:15387)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  FuncCall:  (at None)
                    ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:15387)
                    ExprList:  (at pp.c:15387)
                      ID: name='msg' (at pp.c:15387)
                  ID: name='length' (at pp.c:15387)
                ID: name='nxdata' (at pp.c:15387)
          ID: name='CC2420_SIZE' (at pp.c:15387)
  FuncDef:  (at pp.c:15391)
    Decl: name='AMQueueImplP__0__Packet__payloadLength', quals=[], storage=['static', 'inline'] (at pp.c:15391)
      FuncDecl: quals=None (at pp.c:15391)
        ParamList:  (at pp.c:15391)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15391)
            PtrDecl: quals=[] (at pp.c:15391)
              TypeDecl: declname='msg', quals=[] (at pp.c:15391)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__Packet__payloadLength', quals=[] (at pp.c:15391)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15391)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15393)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15393)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15397)
        ID: name='__nesc_result' (at pp.c:15397)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__Packet__payloadLength' (at pp.c:15397)
          ExprList:  (at pp.c:15397)
            ID: name='msg' (at pp.c:15397)
      Return:  (at pp.c:15401)
        ID: name='__nesc_result' (at pp.c:15401)
  FuncDef:  (at pp.c:15406)
    Decl: name='AMQueueImplP__0__AMPacket__destination', quals=[], storage=['static', 'inline'] (at pp.c:15406)
      FuncDecl: quals=None (at pp.c:15406)
        ParamList:  (at pp.c:15406)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15406)
            PtrDecl: quals=[] (at pp.c:15406)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15406)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__AMPacket__destination', quals=[] (at pp.c:15406)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:15406)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15408)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15408)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15412)
        ID: name='__nesc_result' (at pp.c:15412)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__AMPacket__destination' (at pp.c:15412)
          ExprList:  (at pp.c:15412)
            ID: name='amsg' (at pp.c:15412)
      Return:  (at pp.c:15416)
        ID: name='__nesc_result' (at pp.c:15416)
  FuncDef:  (at pp.c:15421)
    Decl: name='CC2420ActiveMessageP__AMPacket__type', quals=[], storage=['inline', 'static'] (at pp.c:15421)
      FuncDecl: quals=None (at pp.c:15421)
        ParamList:  (at pp.c:15421)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15421)
            PtrDecl: quals=[] (at pp.c:15421)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15421)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__type', quals=[] (at pp.c:15421)
          IdentifierType: names=['am_id_t'] (at None)
    Compound:  (at pp.c:15423)
      Decl: name='header', quals=[], storage=[] (at pp.c:15424)
        PtrDecl: quals=[] (at pp.c:15424)
          TypeDecl: declname='header', quals=[] (at pp.c:15424)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:15424)
          ExprList:  (at pp.c:15424)
            ID: name='amsg' (at pp.c:15424)
      Return:  (at pp.c:15427)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_leuint8' (at pp.c:15427)
          ExprList:  (at pp.c:15427)
            StructRef: type='.' (at pp.c:15427)
              StructRef: type='->' (at pp.c:15427)
                ID: name='header' (at pp.c:15427)
                ID: name='type' (at pp.c:15427)
              ID: name='nxdata' (at pp.c:15427)
  FuncDef:  (at pp.c:15431)
    Decl: name='AMQueueImplP__0__AMPacket__type', quals=[], storage=['static', 'inline'] (at pp.c:15431)
      FuncDecl: quals=None (at pp.c:15431)
        ParamList:  (at pp.c:15431)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:15431)
            PtrDecl: quals=[] (at pp.c:15431)
              TypeDecl: declname='amsg', quals=[] (at pp.c:15431)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__AMPacket__type', quals=[] (at pp.c:15431)
          IdentifierType: names=['am_id_t'] (at None)
    Compound:  (at pp.c:15431)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15433)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15433)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15437)
        ID: name='__nesc_result' (at pp.c:15437)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__AMPacket__type' (at pp.c:15437)
          ExprList:  (at pp.c:15437)
            ID: name='amsg' (at pp.c:15437)
      Return:  (at pp.c:15441)
        ID: name='__nesc_result' (at pp.c:15441)
  FuncDef:  (at pp.c:15446)
    Decl: name='AMQueueImplP__0__nextPacket', quals=[], storage=['inline', 'static'] (at pp.c:15446)
      FuncDecl: quals=None (at pp.c:15446)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__0__nextPacket', quals=[] (at pp.c:15446)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15448)
      Decl: name='i', quals=[], storage=[] (at pp.c:15449)
        TypeDecl: declname='i', quals=[] (at pp.c:15449)
          IdentifierType: names=['uint8_t'] (at None)
      Assignment: op='=' (at pp.c:15452)
        ID: name='AMQueueImplP__0__current' (at pp.c:15452)
        BinaryOp: op='%' (at pp.c:15452)
          BinaryOp: op='+' (at pp.c:15452)
            ID: name='AMQueueImplP__0__current' (at pp.c:15452)
            Constant: type='int', value='1' (at pp.c:15452)
          Constant: type='int', value='1' (at pp.c:15452)
      For:  (at pp.c:15453)
        Assignment: op='=' (at pp.c:15453)
          ID: name='i' (at pp.c:15453)
          Constant: type='int', value='0' (at pp.c:15453)
        BinaryOp: op='<' (at pp.c:15453)
          ID: name='i' (at pp.c:15453)
          Constant: type='int', value='1' (at pp.c:15453)
        UnaryOp: op='p++' (at pp.c:15453)
          ID: name='i' (at pp.c:15453)
        Compound:  (at pp.c:15453)
          If:  (at pp.c:15454)
            BinaryOp: op='||' (at pp.c:15454)
              BinaryOp: op='==' (at pp.c:15454)
                StructRef: type='.' (at pp.c:15454)
                  ArrayRef:  (at pp.c:15454)
                    ID: name='AMQueueImplP__0__queue' (at pp.c:15454)
                    ID: name='AMQueueImplP__0__current' (at pp.c:15454)
                  ID: name='msg' (at pp.c:15454)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:15454)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['void'] (at None)
                  Constant: type='int', value='0' (at pp.c:15454)
              BinaryOp: op='&' (at pp.c:15455)
                ArrayRef:  (at pp.c:15455)
                  ID: name='AMQueueImplP__0__cancelMask' (at pp.c:15455)
                  BinaryOp: op='/' (at pp.c:15455)
                    ID: name='AMQueueImplP__0__current' (at pp.c:15455)
                    Constant: type='int', value='8' (at pp.c:15455)
                BinaryOp: op='<<' (at pp.c:15455)
                  Constant: type='int', value='1' (at pp.c:15455)
                  BinaryOp: op='%' (at pp.c:15455)
                    ID: name='AMQueueImplP__0__current' (at pp.c:15455)
                    Constant: type='int', value='8' (at pp.c:15455)
            Compound:  (at pp.c:15456)
              Assignment: op='=' (at pp.c:15457)
                ID: name='AMQueueImplP__0__current' (at pp.c:15457)
                BinaryOp: op='%' (at pp.c:15457)
                  BinaryOp: op='+' (at pp.c:15457)
                    ID: name='AMQueueImplP__0__current' (at pp.c:15457)
                    Constant: type='int', value='1' (at pp.c:15457)
                  Constant: type='int', value='1' (at pp.c:15457)
            Compound:  (at pp.c:15459)
              Break:  (at pp.c:15460)
      If:  (at pp.c:15463)
        BinaryOp: op='>=' (at pp.c:15463)
          ID: name='i' (at pp.c:15463)
          Constant: type='int', value='1' (at pp.c:15463)
        Compound:  (at pp.c:15463)
          Assignment: op='=' (at pp.c:15465)
            ID: name='AMQueueImplP__0__current' (at pp.c:15465)
            Constant: type='int', value='1' (at pp.c:15465)
  FuncDef:  (at pp.c:15470)
    Decl: name='AMQueueImplP__0__tryToSend', quals=[], storage=['inline', 'static'] (at pp.c:15470)
      FuncDecl: quals=None (at pp.c:15470)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AMQueueImplP__0__tryToSend', quals=[] (at pp.c:15470)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15472)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__nextPacket' (at pp.c:15473)
      If:  (at pp.c:15474)
        BinaryOp: op='<' (at pp.c:15474)
          ID: name='AMQueueImplP__0__current' (at pp.c:15474)
          Constant: type='int', value='1' (at pp.c:15474)
        Compound:  (at pp.c:15474)
          Decl: name='nextErr', quals=[], storage=[] (at pp.c:15475)
            TypeDecl: declname='nextErr', quals=[] (at pp.c:15475)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='nextMsg', quals=[], storage=[] (at pp.c:15476)
            PtrDecl: quals=[] (at pp.c:15476)
              TypeDecl: declname='nextMsg', quals=[] (at pp.c:15476)
                IdentifierType: names=['message_t'] (at None)
            StructRef: type='.' (at pp.c:15476)
              ArrayRef:  (at pp.c:15476)
                ID: name='AMQueueImplP__0__queue' (at pp.c:15476)
                ID: name='AMQueueImplP__0__current' (at pp.c:15476)
              ID: name='msg' (at pp.c:15476)
          Decl: name='nextId', quals=[], storage=[] (at pp.c:15477)
            TypeDecl: declname='nextId', quals=[] (at pp.c:15477)
              IdentifierType: names=['am_id_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMPacket__type' (at pp.c:15477)
              ExprList:  (at pp.c:15477)
                ID: name='nextMsg' (at pp.c:15477)
          Decl: name='nextDest', quals=[], storage=[] (at pp.c:15478)
            TypeDecl: declname='nextDest', quals=[] (at pp.c:15478)
              IdentifierType: names=['am_addr_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMPacket__destination' (at pp.c:15478)
              ExprList:  (at pp.c:15478)
                ID: name='nextMsg' (at pp.c:15478)
          Decl: name='len', quals=[], storage=[] (at pp.c:15479)
            TypeDecl: declname='len', quals=[] (at pp.c:15479)
              IdentifierType: names=['uint8_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__Packet__payloadLength' (at pp.c:15479)
              ExprList:  (at pp.c:15479)
                ID: name='nextMsg' (at pp.c:15479)
          Assignment: op='=' (at pp.c:15482)
            ID: name='nextErr' (at pp.c:15482)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMSend__send' (at pp.c:15482)
              ExprList:  (at pp.c:15482)
                ID: name='nextId' (at pp.c:15482)
                ID: name='nextDest' (at pp.c:15482)
                ID: name='nextMsg' (at pp.c:15482)
                ID: name='len' (at pp.c:15482)
          If:  (at pp.c:15483)
            BinaryOp: op='!=' (at pp.c:15483)
              ID: name='nextErr' (at pp.c:15483)
              ID: name='SUCCESS' (at pp.c:15483)
            Compound:  (at pp.c:15483)
              FuncCall:  (at None)
                ID: name='AMQueueImplP__0__errorTask__postTask' (at pp.c:15484)
  FuncDef:  (at pp.c:15490)
    Decl: name='CC2420CsmaP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:15490)
      FuncDecl: quals=None (at pp.c:15490)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__Send__maxPayloadLength', quals=[] (at pp.c:15490)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15492)
      Return:  (at pp.c:15493)
        Constant: type='int', value='28' (at pp.c:15493)
  FuncDef:  (at pp.c:15497)
    Decl: name='DefaultLplP__SubSend__maxPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:15497)
      FuncDecl: quals=None (at pp.c:15497)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SubSend__maxPayloadLength', quals=[] (at pp.c:15497)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15497)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15499)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15499)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15503)
        ID: name='__nesc_result' (at pp.c:15503)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__Send__maxPayloadLength' (at pp.c:15503)
      Return:  (at pp.c:15507)
        ID: name='__nesc_result' (at pp.c:15507)
  FuncDef:  (at pp.c:15512)
    Decl: name='DefaultLplP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:15512)
      FuncDecl: quals=None (at pp.c:15512)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__Send__maxPayloadLength', quals=[] (at pp.c:15512)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15514)
      Return:  (at pp.c:15515)
        FuncCall:  (at None)
          ID: name='DefaultLplP__SubSend__maxPayloadLength' (at pp.c:15515)
  FuncDef:  (at pp.c:15519)
    Decl: name='UniqueSendP__SubSend__maxPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:15519)
      FuncDecl: quals=None (at pp.c:15519)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueSendP__SubSend__maxPayloadLength', quals=[] (at pp.c:15519)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15519)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15521)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15521)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15525)
        ID: name='__nesc_result' (at pp.c:15525)
        FuncCall:  (at None)
          ID: name='DefaultLplP__Send__maxPayloadLength' (at pp.c:15525)
      Return:  (at pp.c:15529)
        ID: name='__nesc_result' (at pp.c:15529)
  FuncDef:  (at pp.c:15534)
    Decl: name='UniqueSendP__Send__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:15534)
      FuncDecl: quals=None (at pp.c:15534)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueSendP__Send__maxPayloadLength', quals=[] (at pp.c:15534)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15536)
      Return:  (at pp.c:15537)
        FuncCall:  (at None)
          ID: name='UniqueSendP__SubSend__maxPayloadLength' (at pp.c:15537)
  FuncDef:  (at pp.c:15541)
    Decl: name='CC2420TinyosNetworkP__SubSend__maxPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:15541)
      FuncDecl: quals=None (at pp.c:15541)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__SubSend__maxPayloadLength', quals=[] (at pp.c:15541)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15541)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15543)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15543)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15547)
        ID: name='__nesc_result' (at pp.c:15547)
        FuncCall:  (at None)
          ID: name='UniqueSendP__Send__maxPayloadLength' (at pp.c:15547)
      Return:  (at pp.c:15551)
        ID: name='__nesc_result' (at pp.c:15551)
  FuncDef:  (at pp.c:15556)
    Decl: name='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:15556)
      FuncDecl: quals=None (at pp.c:15556)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength', quals=[] (at pp.c:15556)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15558)
      Return:  (at pp.c:15559)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__SubSend__maxPayloadLength' (at pp.c:15559)
  FuncDef:  (at pp.c:15563)
    Decl: name='CC2420ActiveMessageP__SubSend__maxPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:15563)
      FuncDecl: quals=None (at pp.c:15563)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubSend__maxPayloadLength', quals=[] (at pp.c:15563)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15563)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15565)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15565)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15569)
        ID: name='__nesc_result' (at pp.c:15569)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength' (at pp.c:15569)
      Return:  (at pp.c:15573)
        ID: name='__nesc_result' (at pp.c:15573)
  FuncDef:  (at pp.c:15578)
    Decl: name='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:15578)
      FuncDecl: quals=None (at pp.c:15578)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__Packet__maxPayloadLength', quals=[] (at pp.c:15578)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15580)
      Return:  (at pp.c:15581)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__SubSend__maxPayloadLength' (at pp.c:15581)
  FuncDef:  (at pp.c:15585)
    Decl: name='CC2420ControlP__CC2420Config__getPanAddr', quals=[], storage=['inline', 'static'] (at pp.c:15585)
      FuncDecl: quals=None (at pp.c:15585)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__getPanAddr', quals=[] (at pp.c:15585)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:15587)
      Compound:  (at pp.c:15588)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:15588)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:15588)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:15588)
        Compound:  (at pp.c:15590)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:15591)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:15591)
              IdentifierType: names=['int', 'unsigned'] (at None)
            ID: name='CC2420ControlP__m_pan' (at pp.c:15593)
          Compound:  (at pp.c:15595)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:15597)
              ExprList:  (at pp.c:15597)
                ID: name='__nesc_atomic' (at pp.c:15597)
            Return:  (at pp.c:15599)
              ID: name='__nesc_temp' (at pp.c:15599)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:15603)
          ExprList:  (at pp.c:15603)
            ID: name='__nesc_atomic' (at pp.c:15603)
  FuncDef:  (at pp.c:15607)
    Decl: name='CC2420ActiveMessageP__CC2420Config__getPanAddr', quals=[], storage=['static', 'inline'] (at pp.c:15607)
      FuncDecl: quals=None (at pp.c:15607)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__CC2420Config__getPanAddr', quals=[] (at pp.c:15607)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:15607)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15609)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15609)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15613)
        ID: name='__nesc_result' (at pp.c:15613)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__getPanAddr' (at pp.c:15613)
      Return:  (at pp.c:15617)
        ID: name='__nesc_result' (at pp.c:15617)
  FuncDef:  (at pp.c:15622)
    Decl: name='CC2420TinyosNetworkP__Queue__isEmpty', quals=[], storage=['static', 'inline'] (at pp.c:15622)
      FuncDecl: quals=None (at pp.c:15622)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Queue__isEmpty', quals=[] (at pp.c:15622)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:15622)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15624)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15624)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15628)
        ID: name='__nesc_result' (at pp.c:15628)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__0__FcfsQueue__isEmpty' (at pp.c:15628)
      Return:  (at pp.c:15632)
        ID: name='__nesc_result' (at pp.c:15632)
  FuncDef:  (at pp.c:15637)
    Decl: name='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[], storage=['inline', 'static'] (at pp.c:15637)
      FuncDecl: quals=None (at pp.c:15637)
        ParamList:  (at pp.c:15637)
          Decl: name='id', quals=[], storage=[] (at pp.c:15637)
            TypeDecl: declname='id', quals=[] (at pp.c:15637)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Resource__immediateRequest', quals=[] (at pp.c:15637)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15639)
      If:  (at pp.c:15640)
        BinaryOp: op='==' (at pp.c:15640)
          ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:15640)
          ID: name='id' (at pp.c:15640)
        Compound:  (at pp.c:15640)
          Return:  (at pp.c:15642)
            ID: name='EALREADY' (at pp.c:15642)
      If:  (at pp.c:15644)
        BinaryOp: op='>' (at pp.c:15644)
          ID: name='CC2420TinyosNetworkP__TINYOS_N_NETWORKS' (at pp.c:15644)
          Constant: type='int', value='1' (at pp.c:15644)
        Compound:  (at pp.c:15644)
          If:  (at pp.c:15645)
            BinaryOp: op='&&' (at pp.c:15645)
              BinaryOp: op='==' (at pp.c:15645)
                ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:15645)
                ID: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:15645)
              FuncCall:  (at None)
                ID: name='CC2420TinyosNetworkP__Queue__isEmpty' (at pp.c:15645)
            Compound:  (at pp.c:15645)
              Assignment: op='=' (at pp.c:15646)
                ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:15646)
                ID: name='id' (at pp.c:15646)
              Return:  (at pp.c:15647)
                ID: name='SUCCESS' (at pp.c:15647)
          Return:  (at pp.c:15649)
            ID: name='FAIL' (at pp.c:15649)
        Compound:  (at pp.c:15653)
          Assignment: op='=' (at pp.c:15654)
            ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:15654)
            ID: name='id' (at pp.c:15654)
          Return:  (at pp.c:15655)
            ID: name='SUCCESS' (at pp.c:15655)
  FuncDef:  (at pp.c:15660)
    Decl: name='CC2420ActiveMessageP__RadioResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:15660)
      FuncDecl: quals=None (at pp.c:15660)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioResource__immediateRequest', quals=[] (at pp.c:15660)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15660)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15662)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15662)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15666)
        ID: name='__nesc_result' (at pp.c:15666)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__Resource__immediateRequest' (at pp.c:15666)
          ExprList:  (at pp.c:15666)
            ID: name='CC2420ActiveMessageC__CC2420_AM_SEND_ID' (at pp.c:15666)
      Return:  (at pp.c:15670)
        ID: name='__nesc_result' (at pp.c:15670)
  FuncDef:  (at pp.c:15675)
    Decl: name='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[], storage=['inline', 'static'] (at pp.c:15675)
      FuncDecl: quals=None (at pp.c:15675)
        ParamList:  (at pp.c:15675)
          Decl: name='amId', quals=[], storage=[] (at pp.c:15675)
            TypeDecl: declname='amId', quals=[] (at pp.c:15675)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:15675)
            TypeDecl: declname='addr', quals=[] (at pp.c:15675)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15675)
            PtrDecl: quals=[] (at pp.c:15675)
              TypeDecl: declname='msg', quals=[] (at pp.c:15675)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SendNotifier__default__aboutToSend', quals=[] (at pp.c:15675)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15677)
  FuncDef:  (at pp.c:15681)
    Decl: name='CC2420ActiveMessageP__SendNotifier__aboutToSend', quals=[], storage=['static', 'inline'] (at pp.c:15681)
      FuncDecl: quals=None (at pp.c:15681)
        ParamList:  (at pp.c:15681)
          Decl: name='arg_0x102a97258', quals=[], storage=[] (at pp.c:15681)
            TypeDecl: declname='arg_0x102a97258', quals=[] (at pp.c:15681)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='dest', quals=[], storage=[] (at pp.c:15681)
            TypeDecl: declname='dest', quals=[] (at pp.c:15681)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15681)
            PtrDecl: quals=[] (at pp.c:15681)
              TypeDecl: declname='msg', quals=[] (at pp.c:15681)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SendNotifier__aboutToSend', quals=[] (at pp.c:15681)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15681)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SendNotifier__default__aboutToSend' (at pp.c:15683)
        ExprList:  (at pp.c:15683)
          ID: name='arg_0x102a97258' (at pp.c:15683)
          ID: name='dest' (at pp.c:15683)
          ID: name='msg' (at pp.c:15683)
  FuncDef:  (at pp.c:15688)
    Decl: name='CC2420ActiveMessageP__SubSend__send', quals=[], storage=['static', 'inline'] (at pp.c:15688)
      FuncDecl: quals=None (at pp.c:15688)
        ParamList:  (at pp.c:15688)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15688)
            PtrDecl: quals=[] (at pp.c:15688)
              TypeDecl: declname='msg', quals=[] (at pp.c:15688)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15688)
            TypeDecl: declname='len', quals=[] (at pp.c:15688)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubSend__send', quals=[] (at pp.c:15688)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15688)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15690)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15690)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15694)
        ID: name='__nesc_result' (at pp.c:15694)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__ActiveSend__send' (at pp.c:15694)
          ExprList:  (at pp.c:15694)
            ID: name='msg' (at pp.c:15694)
            ID: name='len' (at pp.c:15694)
      Return:  (at pp.c:15698)
        ID: name='__nesc_result' (at pp.c:15698)
  FuncDef:  (at pp.c:15703)
    Decl: name='CC2420PacketP__CC2420Packet__setNetwork', quals=[], storage=['inline', 'static'] (at pp.c:15703)
      FuncDecl: quals=None (at pp.c:15703)
        ParamList:  (at pp.c:15703)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:15703)
            PtrDecl: quals=[] (at pp.c:15703)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:15703)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='networkId', quals=[], storage=[] (at pp.c:15703)
            TypeDecl: declname='networkId', quals=[] (at pp.c:15703)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420PacketP__CC2420Packet__setNetwork', quals=[] (at pp.c:15703)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15705)
      Compound:  (at pp.c:15707)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:15707)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:15707)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:15707)
        Assignment: op='=' (at None)
          UnaryOp: op='*' (at None)
            FuncCall:  (at None)
              ID: name='CC2420PacketP__getNetwork' (at pp.c:15708)
              ExprList:  (at pp.c:15708)
                ID: name='p_msg' (at pp.c:15708)
          ID: name='networkId' (at pp.c:15708)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:15710)
          ExprList:  (at pp.c:15710)
            ID: name='__nesc_atomic' (at pp.c:15710)
  FuncDef:  (at pp.c:15714)
    Decl: name='CC2420TinyosNetworkP__CC2420Packet__setNetwork', quals=[], storage=['static', 'inline'] (at pp.c:15714)
      FuncDecl: quals=None (at pp.c:15714)
        ParamList:  (at pp.c:15714)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:15714)
            PtrDecl: quals=[] (at pp.c:15714)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:15714)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='networkId', quals=[], storage=[] (at pp.c:15714)
            TypeDecl: declname='networkId', quals=[] (at pp.c:15714)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__CC2420Packet__setNetwork', quals=[] (at pp.c:15714)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15714)
      FuncCall:  (at None)
        ID: name='CC2420PacketP__CC2420Packet__setNetwork' (at pp.c:15716)
        ExprList:  (at pp.c:15716)
          ID: name='p_msg' (at pp.c:15716)
          ID: name='networkId' (at pp.c:15716)
  FuncDef:  (at pp.c:15721)
    Decl: name='CC2420PacketP__getAddressLength', quals=[], storage=['inline', 'static'] (at pp.c:15721)
      FuncDecl: quals=None (at pp.c:15721)
        ParamList:  (at pp.c:15721)
          Decl: name='type', quals=[], storage=[] (at pp.c:15721)
            TypeDecl: declname='type', quals=[] (at pp.c:15721)
              IdentifierType: names=['int'] (at None)
        TypeDecl: declname='CC2420PacketP__getAddressLength', quals=[] (at pp.c:15721)
          IdentifierType: names=['int'] (at None)
    Compound:  (at pp.c:15723)
      Switch:  (at pp.c:15724)
        ID: name='type' (at pp.c:15724)
        Compound:  (at pp.c:15724)
          Case:  (at pp.c:15725)
            ID: name='IEEE154_ADDR_SHORT' (at pp.c:15725)
            Return:  (at pp.c:15725)
              Constant: type='int', value='2' (at pp.c:15725)
          Case:  (at pp.c:15726)
            ID: name='IEEE154_ADDR_EXT' (at pp.c:15726)
            Return:  (at pp.c:15726)
              Constant: type='int', value='8' (at pp.c:15726)
          Case:  (at pp.c:15727)
            ID: name='IEEE154_ADDR_NONE' (at pp.c:15727)
            Return:  (at pp.c:15727)
              Constant: type='int', value='0' (at pp.c:15727)
          Default:  (at pp.c:15728)
            Return:  (at pp.c:15728)
              UnaryOp: op='-' (at pp.c:15728)
                Constant: type='int', value='100' (at pp.c:15728)
  FuncDef:  (at pp.c:15733)
    Decl: name='__nesc_hton_leuint8', quals=[], storage=['__inline', 'static'] (at pp.c:15733)
      FuncDecl: quals=None (at pp.c:15733)
        ParamList:  (at pp.c:15733)
          Decl: name='target', quals=[], storage=[] (at pp.c:15733)
            PtrDecl: quals=[] (at pp.c:15733)
              TypeDecl: declname='target', quals=[] (at pp.c:15733)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:15733)
            TypeDecl: declname='value', quals=[] (at pp.c:15733)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='__nesc_hton_leuint8', quals=[] (at pp.c:15733)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15735)
      Decl: name='base', quals=[], storage=[] (at pp.c:15736)
        PtrDecl: quals=[] (at pp.c:15736)
          TypeDecl: declname='base', quals=[] (at pp.c:15736)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='target' (at pp.c:15736)
      Assignment: op='=' (at pp.c:15739)
        ArrayRef:  (at pp.c:15739)
          ID: name='base' (at pp.c:15739)
          Constant: type='int', value='0' (at pp.c:15739)
        ID: name='value' (at pp.c:15739)
      Return:  (at pp.c:15740)
        ID: name='value' (at pp.c:15740)
  FuncDef:  (at pp.c:15744)
    Decl: name='DefaultLplP__startRadio__postTask', quals=[], storage=['static', 'inline'] (at pp.c:15744)
      FuncDecl: quals=None (at pp.c:15744)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__startRadio__postTask', quals=[] (at pp.c:15744)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15744)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15746)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15746)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15750)
        ID: name='__nesc_result' (at pp.c:15750)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:15750)
          ExprList:  (at pp.c:15750)
            ID: name='DefaultLplP__startRadio' (at pp.c:15750)
      Return:  (at pp.c:15754)
        ID: name='__nesc_result' (at pp.c:15754)
  FuncDef:  (at pp.c:15759)
    Decl: name='DefaultLplP__RadioPowerState__getState', quals=[], storage=['static', 'inline'] (at pp.c:15759)
      FuncDecl: quals=None (at pp.c:15759)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__RadioPowerState__getState', quals=[] (at pp.c:15759)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15759)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15761)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15761)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15765)
        ID: name='__nesc_result' (at pp.c:15765)
        FuncCall:  (at None)
          ID: name='StateImplP__State__getState' (at pp.c:15765)
          ExprList:  (at pp.c:15765)
            Constant: type='int', value='3U' (at pp.c:15765)
      Return:  (at pp.c:15769)
        ID: name='__nesc_result' (at pp.c:15769)
  FuncDef:  (at pp.c:15774)
    Decl: name='VirtualizeTimerC__0__Timer__stop', quals=[], storage=['inline', 'static'] (at pp.c:15774)
      FuncDecl: quals=None (at pp.c:15774)
        ParamList:  (at pp.c:15774)
          Decl: name='num', quals=[], storage=[] (at pp.c:15774)
            TypeDecl: declname='num', quals=[] (at pp.c:15774)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__stop', quals=[] (at pp.c:15774)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15775)
      Assignment: op='=' (at pp.c:15776)
        StructRef: type='.' (at pp.c:15776)
          ArrayRef:  (at pp.c:15776)
            ID: name='VirtualizeTimerC__0__m_timers' (at pp.c:15776)
            ID: name='num' (at pp.c:15776)
          ID: name='isrunning' (at pp.c:15776)
        ID: name='FALSE' (at pp.c:15776)
  FuncDef:  (at pp.c:15780)
    Decl: name='DefaultLplP__SendDoneTimer__stop', quals=[], storage=['static', 'inline'] (at pp.c:15780)
      FuncDecl: quals=None (at pp.c:15780)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SendDoneTimer__stop', quals=[] (at pp.c:15780)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15780)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__stop' (at pp.c:15782)
        ExprList:  (at pp.c:15782)
          Constant: type='int', value='6U' (at pp.c:15782)
  FuncDef:  (at pp.c:15786)
    Decl: name='DefaultLplP__OffTimer__stop', quals=[], storage=['static', 'inline'] (at pp.c:15786)
      FuncDecl: quals=None (at pp.c:15786)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__OffTimer__stop', quals=[] (at pp.c:15786)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:15786)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__stop' (at pp.c:15788)
        ExprList:  (at pp.c:15788)
          Constant: type='int', value='5U' (at pp.c:15788)
  FuncDef:  (at pp.c:15793)
    Decl: name='DefaultLplP__SendState__requestState', quals=[], storage=['static', 'inline'] (at pp.c:15793)
      FuncDecl: quals=None (at pp.c:15793)
        ParamList:  (at pp.c:15793)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:15793)
            TypeDecl: declname='reqState', quals=[] (at pp.c:15793)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DefaultLplP__SendState__requestState', quals=[] (at pp.c:15793)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15793)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15795)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15795)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15799)
        ID: name='__nesc_result' (at pp.c:15799)
        FuncCall:  (at None)
          ID: name='StateImplP__State__requestState' (at pp.c:15799)
          ExprList:  (at pp.c:15799)
            Constant: type='int', value='5U' (at pp.c:15799)
            ID: name='reqState' (at pp.c:15799)
      Return:  (at pp.c:15803)
        ID: name='__nesc_result' (at pp.c:15803)
  FuncDef:  (at pp.c:15808)
    Decl: name='DefaultLplP__SplitControlState__getState', quals=[], storage=['static', 'inline'] (at pp.c:15808)
      FuncDecl: quals=None (at pp.c:15808)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SplitControlState__getState', quals=[] (at pp.c:15808)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:15808)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15810)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15810)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15814)
        ID: name='__nesc_result' (at pp.c:15814)
        FuncCall:  (at None)
          ID: name='StateImplP__State__getState' (at pp.c:15814)
          ExprList:  (at pp.c:15814)
            Constant: type='int', value='4U' (at pp.c:15814)
      Return:  (at pp.c:15818)
        ID: name='__nesc_result' (at pp.c:15818)
  FuncDef:  (at pp.c:15823)
    Decl: name='DefaultLplP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:15823)
      FuncDecl: quals=None (at pp.c:15823)
        ParamList:  (at pp.c:15823)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15823)
            PtrDecl: quals=[] (at pp.c:15823)
              TypeDecl: declname='msg', quals=[] (at pp.c:15823)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15823)
            TypeDecl: declname='len', quals=[] (at pp.c:15823)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DefaultLplP__Send__send', quals=[] (at pp.c:15823)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15825)
      If:  (at pp.c:15826)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SplitControlState__getState' (at pp.c:15826)
          ID: name='DefaultLplP__S_OFF' (at pp.c:15826)
        Compound:  (at pp.c:15826)
          Return:  (at pp.c:15828)
            ID: name='EOFF' (at pp.c:15828)
      If:  (at pp.c:15831)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendState__requestState' (at pp.c:15831)
            ExprList:  (at pp.c:15831)
              ID: name='S_LPL_SENDING' (at pp.c:15831)
          ID: name='SUCCESS' (at pp.c:15831)
        Compound:  (at pp.c:15831)
          Assignment: op='=' (at pp.c:15832)
            ID: name='DefaultLplP__currentSendMsg' (at pp.c:15832)
            ID: name='msg' (at pp.c:15832)
          Assignment: op='=' (at pp.c:15833)
            ID: name='DefaultLplP__currentSendLen' (at pp.c:15833)
            ID: name='len' (at pp.c:15833)
          FuncCall:  (at None)
            ID: name='DefaultLplP__OffTimer__stop' (at pp.c:15836)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendDoneTimer__stop' (at pp.c:15837)
          If:  (at pp.c:15839)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='DefaultLplP__RadioPowerState__getState' (at pp.c:15839)
              ID: name='DefaultLplP__S_ON' (at pp.c:15839)
            Compound:  (at pp.c:15839)
              FuncCall:  (at None)
                ID: name='DefaultLplP__initializeSend' (at pp.c:15840)
              Return:  (at pp.c:15841)
                ID: name='SUCCESS' (at pp.c:15841)
            Compound:  (at pp.c:15843)
              FuncCall:  (at None)
                ID: name='DefaultLplP__startRadio__postTask' (at pp.c:15844)
          Return:  (at pp.c:15847)
            ID: name='SUCCESS' (at pp.c:15847)
      Return:  (at pp.c:15850)
        ID: name='EBUSY' (at pp.c:15850)
  FuncDef:  (at pp.c:15854)
    Decl: name='UniqueSendP__SubSend__send', quals=[], storage=['static', 'inline'] (at pp.c:15854)
      FuncDecl: quals=None (at pp.c:15854)
        ParamList:  (at pp.c:15854)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15854)
            PtrDecl: quals=[] (at pp.c:15854)
              TypeDecl: declname='msg', quals=[] (at pp.c:15854)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15854)
            TypeDecl: declname='len', quals=[] (at pp.c:15854)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='UniqueSendP__SubSend__send', quals=[] (at pp.c:15854)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15854)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15856)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15856)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15860)
        ID: name='__nesc_result' (at pp.c:15860)
        FuncCall:  (at None)
          ID: name='DefaultLplP__Send__send' (at pp.c:15860)
          ExprList:  (at pp.c:15860)
            ID: name='msg' (at pp.c:15860)
            ID: name='len' (at pp.c:15860)
      Return:  (at pp.c:15864)
        ID: name='__nesc_result' (at pp.c:15864)
  FuncDef:  (at pp.c:15869)
    Decl: name='UniqueSendP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:15869)
      FuncDecl: quals=None (at pp.c:15869)
        ParamList:  (at pp.c:15869)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15869)
            PtrDecl: quals=[] (at pp.c:15869)
              TypeDecl: declname='msg', quals=[] (at pp.c:15869)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:15869)
          TypeDecl: declname='UniqueSendP__CC2420PacketBody__getHeader', quals=[] (at pp.c:15869)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:15869)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15871)
        PtrDecl: quals=[] (at pp.c:15871)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15871)
            Struct: name='cc2420_header_t', packed=False (at pp.c:15871)
      Assignment: op='=' (at pp.c:15875)
        ID: name='__nesc_result' (at pp.c:15875)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:15875)
          ExprList:  (at pp.c:15875)
            ID: name='msg' (at pp.c:15875)
      Return:  (at pp.c:15879)
        ID: name='__nesc_result' (at pp.c:15879)
  FuncDef:  (at pp.c:15884)
    Decl: name='UniqueSendP__State__requestState', quals=[], storage=['static', 'inline'] (at pp.c:15884)
      FuncDecl: quals=None (at pp.c:15884)
        ParamList:  (at pp.c:15884)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:15884)
            TypeDecl: declname='reqState', quals=[] (at pp.c:15884)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='UniqueSendP__State__requestState', quals=[] (at pp.c:15884)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15884)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15886)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15886)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15890)
        ID: name='__nesc_result' (at pp.c:15890)
        FuncCall:  (at None)
          ID: name='StateImplP__State__requestState' (at pp.c:15890)
          ExprList:  (at pp.c:15890)
            Constant: type='int', value='2U' (at pp.c:15890)
            ID: name='reqState' (at pp.c:15890)
      Return:  (at pp.c:15894)
        ID: name='__nesc_result' (at pp.c:15894)
  FuncDef:  (at pp.c:15899)
    Decl: name='UniqueSendP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:15899)
      FuncDecl: quals=None (at pp.c:15899)
        ParamList:  (at pp.c:15899)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15899)
            PtrDecl: quals=[] (at pp.c:15899)
              TypeDecl: declname='msg', quals=[] (at pp.c:15899)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15899)
            TypeDecl: declname='len', quals=[] (at pp.c:15899)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='UniqueSendP__Send__send', quals=[] (at pp.c:15899)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15901)
      Decl: name='error', quals=[], storage=[] (at pp.c:15902)
        TypeDecl: declname='error', quals=[] (at pp.c:15902)
          IdentifierType: names=['error_t'] (at None)
      If:  (at pp.c:15905)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='UniqueSendP__State__requestState' (at pp.c:15905)
            ExprList:  (at pp.c:15905)
              ID: name='UniqueSendP__S_SENDING' (at pp.c:15905)
          ID: name='SUCCESS' (at pp.c:15905)
        Compound:  (at pp.c:15905)
          FuncCall:  (at None)
            ID: name='__nesc_hton_leuint8' (at pp.c:15906)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  FuncCall:  (at None)
                    ID: name='UniqueSendP__CC2420PacketBody__getHeader' (at pp.c:15906)
                    ExprList:  (at pp.c:15906)
                      ID: name='msg' (at pp.c:15906)
                  ID: name='dsn' (at pp.c:15906)
                ID: name='nxdata' (at pp.c:15906)
              UnaryOp: op='p++' (at pp.c:15906)
                ID: name='UniqueSendP__localSendId' (at pp.c:15906)
          If:  (at pp.c:15908)
            BinaryOp: op='!=' (at pp.c:15908)
              Assignment: op='=' (at pp.c:15908)
                ID: name='error' (at pp.c:15908)
                FuncCall:  (at None)
                  ID: name='UniqueSendP__SubSend__send' (at pp.c:15908)
                  ExprList:  (at pp.c:15908)
                    ID: name='msg' (at pp.c:15908)
                    ID: name='len' (at pp.c:15908)
              ID: name='SUCCESS' (at pp.c:15908)
            Compound:  (at pp.c:15908)
              FuncCall:  (at None)
                ID: name='UniqueSendP__State__toIdle' (at pp.c:15909)
          Return:  (at pp.c:15912)
            ID: name='error' (at pp.c:15912)
      Return:  (at pp.c:15915)
        ID: name='EBUSY' (at pp.c:15915)
  FuncDef:  (at pp.c:15919)
    Decl: name='CC2420TinyosNetworkP__SubSend__send', quals=[], storage=['static', 'inline'] (at pp.c:15919)
      FuncDecl: quals=None (at pp.c:15919)
        ParamList:  (at pp.c:15919)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15919)
            PtrDecl: quals=[] (at pp.c:15919)
              TypeDecl: declname='msg', quals=[] (at pp.c:15919)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:15919)
            TypeDecl: declname='len', quals=[] (at pp.c:15919)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__SubSend__send', quals=[] (at pp.c:15919)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15919)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15921)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15921)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15925)
        ID: name='__nesc_result' (at pp.c:15925)
        FuncCall:  (at None)
          ID: name='UniqueSendP__Send__send' (at pp.c:15925)
          ExprList:  (at pp.c:15925)
            ID: name='msg' (at pp.c:15925)
            ID: name='len' (at pp.c:15925)
      Return:  (at pp.c:15929)
        ID: name='__nesc_result' (at pp.c:15929)
  FuncDef:  (at pp.c:15934)
    Decl: name='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:15934)
      FuncDecl: quals=None (at pp.c:15934)
        ParamList:  (at pp.c:15934)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15934)
            PtrDecl: quals=[] (at pp.c:15934)
              TypeDecl: declname='msg', quals=[] (at pp.c:15934)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__LowPowerListening__getRemoteWakeupInterval', quals=[] (at pp.c:15934)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:15936)
      Return:  (at pp.c:15937)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_uint16' (at pp.c:15937)
          ExprList:  (at None)
            StructRef: type='.' (at None)
              StructRef: type='->' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__CC2420PacketBody__getMetadata' (at pp.c:15937)
                  ExprList:  (at pp.c:15937)
                    ID: name='msg' (at pp.c:15937)
                ID: name='rxInterval' (at pp.c:15937)
              ID: name='nxdata' (at pp.c:15937)
  FuncDef:  (at pp.c:15941)
    Decl: name='DefaultLplP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:15941)
      FuncDecl: quals=None (at pp.c:15941)
        ParamList:  (at pp.c:15941)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15941)
            PtrDecl: quals=[] (at pp.c:15941)
              TypeDecl: declname='msg', quals=[] (at pp.c:15941)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:15941)
          TypeDecl: declname='DefaultLplP__CC2420PacketBody__getHeader', quals=[] (at pp.c:15941)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:15941)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15943)
        PtrDecl: quals=[] (at pp.c:15943)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15943)
            Struct: name='cc2420_header_t', packed=False (at pp.c:15943)
      Assignment: op='=' (at pp.c:15947)
        ID: name='__nesc_result' (at pp.c:15947)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:15947)
          ExprList:  (at pp.c:15947)
            ID: name='msg' (at pp.c:15947)
      Return:  (at pp.c:15951)
        ID: name='__nesc_result' (at pp.c:15951)
  FuncDef:  (at pp.c:15956)
    Decl: name='__nesc_hton_leuint16', quals=[], storage=['__inline', 'static'] (at pp.c:15956)
      FuncDecl: quals=None (at pp.c:15956)
        ParamList:  (at pp.c:15956)
          Decl: name='target', quals=[], storage=[] (at pp.c:15956)
            PtrDecl: quals=[] (at pp.c:15956)
              TypeDecl: declname='target', quals=[] (at pp.c:15956)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:15956)
            TypeDecl: declname='value', quals=[] (at pp.c:15956)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='__nesc_hton_leuint16', quals=[] (at pp.c:15956)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:15958)
      Decl: name='base', quals=[], storage=[] (at pp.c:15959)
        PtrDecl: quals=[] (at pp.c:15959)
          TypeDecl: declname='base', quals=[] (at pp.c:15959)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='target' (at pp.c:15959)
      Assignment: op='=' (at pp.c:15962)
        ArrayRef:  (at pp.c:15962)
          ID: name='base' (at pp.c:15962)
          Constant: type='int', value='0' (at pp.c:15962)
        ID: name='value' (at pp.c:15962)
      Assignment: op='=' (at pp.c:15963)
        ArrayRef:  (at pp.c:15963)
          ID: name='base' (at pp.c:15963)
          Constant: type='int', value='1' (at pp.c:15963)
        BinaryOp: op='>>' (at pp.c:15963)
          ID: name='value' (at pp.c:15963)
          Constant: type='int', value='8' (at pp.c:15963)
      Return:  (at pp.c:15964)
        ID: name='value' (at pp.c:15964)
  FuncDef:  (at pp.c:15968)
    Decl: name='CC2420PacketP__Acks__noAck', quals=[], storage=['inline', 'static'] (at pp.c:15968)
      FuncDecl: quals=None (at pp.c:15968)
        ParamList:  (at pp.c:15968)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:15968)
            PtrDecl: quals=[] (at pp.c:15968)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:15968)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__Acks__noAck', quals=[] (at pp.c:15968)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15970)
      Decl: name='__nesc_temp47', quals=[], storage=[] (at pp.c:15971)
        PtrDecl: quals=[] (at pp.c:15971)
          TypeDecl: declname='__nesc_temp47', quals=[] (at pp.c:15971)
            IdentifierType: names=['char', 'unsigned'] (at None)
      ExprList:  (at pp.c:15974)
        Assignment: op='=' (at pp.c:15974)
          ID: name='__nesc_temp47' (at pp.c:15974)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:15974)
                ExprList:  (at pp.c:15974)
                  ID: name='p_msg' (at pp.c:15974)
              ID: name='fcf' (at pp.c:15974)
            ID: name='nxdata' (at pp.c:15974)
        FuncCall:  (at None)
          ID: name='__nesc_hton_leuint16' (at pp.c:15974)
          ExprList:  (at pp.c:15974)
            ID: name='__nesc_temp47' (at pp.c:15974)
            BinaryOp: op='&' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:15974)
                ExprList:  (at pp.c:15974)
                  ID: name='__nesc_temp47' (at pp.c:15974)
              UnaryOp: op='~' (at pp.c:15974)
                BinaryOp: op='<<' (at pp.c:15974)
                  Constant: type='int', value='1' (at pp.c:15974)
                  ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:15974)
      Return:  (at pp.c:15975)
        ID: name='SUCCESS' (at pp.c:15975)
  FuncDef:  (at pp.c:15979)
    Decl: name='DefaultLplP__PacketAcknowledgements__noAck', quals=[], storage=['static', 'inline'] (at pp.c:15979)
      FuncDecl: quals=None (at pp.c:15979)
        ParamList:  (at pp.c:15979)
          Decl: name='msg', quals=[], storage=[] (at pp.c:15979)
            PtrDecl: quals=[] (at pp.c:15979)
              TypeDecl: declname='msg', quals=[] (at pp.c:15979)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__PacketAcknowledgements__noAck', quals=[] (at pp.c:15979)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15979)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:15981)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:15981)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:15985)
        ID: name='__nesc_result' (at pp.c:15985)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__Acks__noAck' (at pp.c:15985)
          ExprList:  (at pp.c:15985)
            ID: name='msg' (at pp.c:15985)
      Return:  (at pp.c:15989)
        ID: name='__nesc_result' (at pp.c:15989)
  FuncDef:  (at pp.c:15994)
    Decl: name='CC2420PacketP__Acks__requestAck', quals=[], storage=['inline', 'static'] (at pp.c:15994)
      FuncDecl: quals=None (at pp.c:15994)
        ParamList:  (at pp.c:15994)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:15994)
            PtrDecl: quals=[] (at pp.c:15994)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:15994)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__Acks__requestAck', quals=[] (at pp.c:15994)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:15996)
      Decl: name='__nesc_temp46', quals=[], storage=[] (at pp.c:15997)
        PtrDecl: quals=[] (at pp.c:15997)
          TypeDecl: declname='__nesc_temp46', quals=[] (at pp.c:15997)
            IdentifierType: names=['char', 'unsigned'] (at None)
      ExprList:  (at pp.c:16000)
        Assignment: op='=' (at pp.c:16000)
          ID: name='__nesc_temp46' (at pp.c:16000)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:16000)
                ExprList:  (at pp.c:16000)
                  ID: name='p_msg' (at pp.c:16000)
              ID: name='fcf' (at pp.c:16000)
            ID: name='nxdata' (at pp.c:16000)
        FuncCall:  (at None)
          ID: name='__nesc_hton_leuint16' (at pp.c:16000)
          ExprList:  (at pp.c:16000)
            ID: name='__nesc_temp46' (at pp.c:16000)
            BinaryOp: op='|' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:16000)
                ExprList:  (at pp.c:16000)
                  ID: name='__nesc_temp46' (at pp.c:16000)
              BinaryOp: op='<<' (at pp.c:16000)
                Constant: type='int', value='1' (at pp.c:16000)
                ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:16000)
      Return:  (at pp.c:16001)
        ID: name='SUCCESS' (at pp.c:16001)
  FuncDef:  (at pp.c:16005)
    Decl: name='DefaultLplP__PacketAcknowledgements__requestAck', quals=[], storage=['static', 'inline'] (at pp.c:16005)
      FuncDecl: quals=None (at pp.c:16005)
        ParamList:  (at pp.c:16005)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16005)
            PtrDecl: quals=[] (at pp.c:16005)
              TypeDecl: declname='msg', quals=[] (at pp.c:16005)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__PacketAcknowledgements__requestAck', quals=[] (at pp.c:16005)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16005)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16007)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16007)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16011)
        ID: name='__nesc_result' (at pp.c:16011)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__Acks__requestAck' (at pp.c:16011)
          ExprList:  (at pp.c:16011)
            ID: name='msg' (at pp.c:16011)
      Return:  (at pp.c:16015)
        ID: name='__nesc_result' (at pp.c:16015)
  FuncDef:  (at pp.c:16020)
    Decl: name='TransformAlarmC__0__Counter__get', quals=[], storage=['static', 'inline'] (at pp.c:16020)
      FuncDecl: quals=None (at pp.c:16020)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Counter__get', quals=[] (at pp.c:16020)
          IdentifierType: names=['TransformAlarmC__0__Counter__size_type'] (at None)
    Compound:  (at pp.c:16020)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16022)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16022)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16026)
        ID: name='__nesc_result' (at pp.c:16026)
        FuncCall:  (at None)
          ID: name='TransformCounterC__0__Counter__get' (at pp.c:16026)
      Return:  (at pp.c:16030)
        ID: name='__nesc_result' (at pp.c:16030)
  FuncDef:  (at pp.c:16035)
    Decl: name='TransformAlarmC__0__Alarm__getNow', quals=[], storage=['inline', 'static'] (at pp.c:16035)
      FuncDecl: quals=None (at pp.c:16035)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Alarm__getNow', quals=[] (at pp.c:16035)
          IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
    Compound:  (at pp.c:16036)
      Return:  (at pp.c:16037)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__0__Counter__get' (at pp.c:16037)
  FuncDef:  (at pp.c:16041)
    Decl: name='AlarmToTimerC__0__Alarm__getNow', quals=[], storage=['static', 'inline'] (at pp.c:16041)
      FuncDecl: quals=None (at pp.c:16041)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Alarm__getNow', quals=[] (at pp.c:16041)
          IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
    Compound:  (at pp.c:16041)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16043)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16043)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16047)
        ID: name='__nesc_result' (at pp.c:16047)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__0__Alarm__getNow' (at pp.c:16047)
      Return:  (at pp.c:16051)
        ID: name='__nesc_result' (at pp.c:16051)
  FuncDef:  (at pp.c:16056)
    Decl: name='AlarmToTimerC__0__Timer__getNow', quals=[], storage=['inline', 'static'] (at pp.c:16056)
      FuncDecl: quals=None (at pp.c:16056)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Timer__getNow', quals=[] (at pp.c:16056)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:16057)
      Return:  (at pp.c:16059)
        FuncCall:  (at None)
          ID: name='AlarmToTimerC__0__Alarm__getNow' (at pp.c:16059)
  FuncDef:  (at pp.c:16063)
    Decl: name='VirtualizeTimerC__0__TimerFrom__getNow', quals=[], storage=['static', 'inline'] (at pp.c:16063)
      FuncDecl: quals=None (at pp.c:16063)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__getNow', quals=[] (at pp.c:16063)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:16063)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16065)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16065)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16069)
        ID: name='__nesc_result' (at pp.c:16069)
        FuncCall:  (at None)
          ID: name='AlarmToTimerC__0__Timer__getNow' (at pp.c:16069)
      Return:  (at pp.c:16073)
        ID: name='__nesc_result' (at pp.c:16073)
  FuncDef:  (at pp.c:16078)
    Decl: name='VirtualizeTimerC__0__Timer__startOneShot', quals=[], storage=['inline', 'static'] (at pp.c:16078)
      FuncDecl: quals=None (at pp.c:16078)
        ParamList:  (at pp.c:16078)
          Decl: name='num', quals=[], storage=[] (at pp.c:16078)
            TypeDecl: declname='num', quals=[] (at pp.c:16078)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:16078)
            TypeDecl: declname='dt', quals=[] (at pp.c:16078)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__startOneShot', quals=[] (at pp.c:16078)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16079)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__startTimer' (at pp.c:16080)
        ExprList:  (at pp.c:16080)
          ID: name='num' (at pp.c:16080)
          FuncCall:  (at None)
            ID: name='VirtualizeTimerC__0__TimerFrom__getNow' (at pp.c:16080)
          ID: name='dt' (at pp.c:16080)
          ID: name='TRUE' (at pp.c:16080)
  FuncDef:  (at pp.c:16084)
    Decl: name='DefaultLplP__SendDoneTimer__startOneShot', quals=[], storage=['static', 'inline'] (at pp.c:16084)
      FuncDecl: quals=None (at pp.c:16084)
        ParamList:  (at pp.c:16084)
          Decl: name='dt', quals=[], storage=[] (at pp.c:16084)
            TypeDecl: declname='dt', quals=[] (at pp.c:16084)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='DefaultLplP__SendDoneTimer__startOneShot', quals=[] (at pp.c:16084)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16084)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__startOneShot' (at pp.c:16086)
        ExprList:  (at pp.c:16086)
          Constant: type='int', value='6U' (at pp.c:16086)
          ID: name='dt' (at pp.c:16086)
  FuncDef:  (at pp.c:16091)
    Decl: name='VirtualizeTimerC__0__updateFromTimer__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16091)
      FuncDecl: quals=None (at pp.c:16091)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__updateFromTimer__postTask', quals=[] (at pp.c:16091)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16091)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16093)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16093)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16097)
        ID: name='__nesc_result' (at pp.c:16097)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16097)
          ExprList:  (at pp.c:16097)
            ID: name='VirtualizeTimerC__0__updateFromTimer' (at pp.c:16097)
      Return:  (at pp.c:16101)
        ID: name='__nesc_result' (at pp.c:16101)
  FuncDef:  (at pp.c:16106)
    Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[], storage=['inline', 'static'] (at pp.c:16106)
      FuncDecl: quals=None (at pp.c:16106)
        ParamList:  (at pp.c:16106)
          Decl: name='id', quals=[], storage=[] (at pp.c:16106)
            TypeDecl: declname='id', quals=[] (at pp.c:16106)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEnqueued', quals=[] (at pp.c:16106)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16108)
      Compound:  (at pp.c:16111)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:16112)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:16112)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='||' (at pp.c:16114)
            BinaryOp: op='!=' (at pp.c:16114)
              ArrayRef:  (at pp.c:16114)
                ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:16114)
                ID: name='id' (at pp.c:16114)
              ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:16114)
            BinaryOp: op='==' (at pp.c:16114)
              ID: name='FcfsResourceQueueC__0__qTail' (at pp.c:16114)
              ID: name='id' (at pp.c:16114)
        Return:  (at pp.c:16117)
          ID: name='__nesc_temp' (at pp.c:16117)
  FuncDef:  (at pp.c:16122)
    Decl: name='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[], storage=['inline', 'static'] (at pp.c:16122)
      FuncDecl: quals=None (at pp.c:16122)
        ParamList:  (at pp.c:16122)
          Decl: name='id', quals=[], storage=[] (at pp.c:16122)
            TypeDecl: declname='id', quals=[] (at pp.c:16122)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__enqueue', quals=[] (at pp.c:16122)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16124)
      Compound:  (at pp.c:16125)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16125)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16125)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:16125)
        Compound:  (at pp.c:16127)
          If:  (at pp.c:16128)
            UnaryOp: op='!' (at None)
              FuncCall:  (at None)
                ID: name='FcfsResourceQueueC__0__FcfsQueue__isEnqueued' (at pp.c:16128)
                ExprList:  (at pp.c:16128)
                  ID: name='id' (at pp.c:16128)
            Compound:  (at pp.c:16128)
              If:  (at pp.c:16129)
                BinaryOp: op='==' (at pp.c:16129)
                  ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:16129)
                  ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:16129)
                Compound:  (at pp.c:16129)
                  Assignment: op='=' (at pp.c:16130)
                    ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:16130)
                    ID: name='id' (at pp.c:16130)
                Compound:  (at pp.c:16132)
                  Assignment: op='=' (at pp.c:16134)
                    ArrayRef:  (at pp.c:16134)
                      ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:16134)
                      ID: name='FcfsResourceQueueC__0__qTail' (at pp.c:16134)
                    ID: name='id' (at pp.c:16134)
              Assignment: op='=' (at pp.c:16137)
                ID: name='FcfsResourceQueueC__0__qTail' (at pp.c:16137)
                ID: name='id' (at pp.c:16137)
              Compound:  (at pp.c:16138)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:16139)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:16139)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='SUCCESS' (at pp.c:16141)
                Compound:  (at pp.c:16143)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:16145)
                    ExprList:  (at pp.c:16145)
                      ID: name='__nesc_atomic' (at pp.c:16145)
                  Return:  (at pp.c:16147)
                    ID: name='__nesc_temp' (at pp.c:16147)
          Compound:  (at pp.c:16152)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:16153)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:16153)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='EBUSY' (at pp.c:16155)
            Compound:  (at pp.c:16157)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_end' (at pp.c:16159)
                ExprList:  (at pp.c:16159)
                  ID: name='__nesc_atomic' (at pp.c:16159)
              Return:  (at pp.c:16161)
                ID: name='__nesc_temp' (at pp.c:16161)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:16166)
          ExprList:  (at pp.c:16166)
            ID: name='__nesc_atomic' (at pp.c:16166)
  FuncDef:  (at pp.c:16170)
    Decl: name='CC2420TinyosNetworkP__Queue__enqueue', quals=[], storage=['static', 'inline'] (at pp.c:16170)
      FuncDecl: quals=None (at pp.c:16170)
        ParamList:  (at pp.c:16170)
          Decl: name='id', quals=[], storage=[] (at pp.c:16170)
            TypeDecl: declname='id', quals=[] (at pp.c:16170)
              IdentifierType: names=['resource_client_id_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Queue__enqueue', quals=[] (at pp.c:16170)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16170)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16172)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16172)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16176)
        ID: name='__nesc_result' (at pp.c:16176)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__0__FcfsQueue__enqueue' (at pp.c:16176)
          ExprList:  (at pp.c:16176)
            ID: name='id' (at pp.c:16176)
      Return:  (at pp.c:16180)
        ID: name='__nesc_result' (at pp.c:16180)
  FuncDef:  (at pp.c:16185)
    Decl: name='CC2420TinyosNetworkP__grantTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16185)
      FuncDecl: quals=None (at pp.c:16185)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__grantTask__postTask', quals=[] (at pp.c:16185)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16185)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16187)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16187)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16191)
        ID: name='__nesc_result' (at pp.c:16191)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16191)
          ExprList:  (at pp.c:16191)
            ID: name='CC2420TinyosNetworkP__grantTask' (at pp.c:16191)
      Return:  (at pp.c:16195)
        ID: name='__nesc_result' (at pp.c:16195)
  FuncDef:  (at pp.c:16200)
    Decl: name='CC2420TinyosNetworkP__Resource__request', quals=[], storage=['inline', 'static'] (at pp.c:16200)
      FuncDecl: quals=None (at pp.c:16200)
        ParamList:  (at pp.c:16200)
          Decl: name='id', quals=[], storage=[] (at pp.c:16200)
            TypeDecl: declname='id', quals=[] (at pp.c:16200)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Resource__request', quals=[] (at pp.c:16200)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16202)
      FuncCall:  (at None)
        ID: name='CC2420TinyosNetworkP__grantTask__postTask' (at pp.c:16204)
      If:  (at pp.c:16206)
        BinaryOp: op='>' (at pp.c:16206)
          ID: name='CC2420TinyosNetworkP__TINYOS_N_NETWORKS' (at pp.c:16206)
          Constant: type='int', value='1' (at pp.c:16206)
        Compound:  (at pp.c:16206)
          Return:  (at pp.c:16207)
            FuncCall:  (at None)
              ID: name='CC2420TinyosNetworkP__Queue__enqueue' (at pp.c:16207)
              ExprList:  (at pp.c:16207)
                ID: name='id' (at pp.c:16207)
        Compound:  (at pp.c:16211)
          If:  (at pp.c:16212)
            BinaryOp: op='==' (at pp.c:16212)
              ID: name='id' (at pp.c:16212)
              ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:16212)
            Compound:  (at pp.c:16212)
              Return:  (at pp.c:16213)
                ID: name='EALREADY' (at pp.c:16213)
            Compound:  (at pp.c:16217)
              Assignment: op='=' (at pp.c:16218)
                ID: name='CC2420TinyosNetworkP__next_owner' (at pp.c:16218)
                ID: name='id' (at pp.c:16218)
              Return:  (at pp.c:16219)
                ID: name='SUCCESS' (at pp.c:16219)
  FuncDef:  (at pp.c:16225)
    Decl: name='CC2420ActiveMessageP__RadioResource__request', quals=[], storage=['static', 'inline'] (at pp.c:16225)
      FuncDecl: quals=None (at pp.c:16225)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioResource__request', quals=[] (at pp.c:16225)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16225)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16227)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16227)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16231)
        ID: name='__nesc_result' (at pp.c:16231)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__Resource__request' (at pp.c:16231)
          ExprList:  (at pp.c:16231)
            ID: name='CC2420ActiveMessageC__CC2420_AM_SEND_ID' (at pp.c:16231)
      Return:  (at pp.c:16235)
        ID: name='__nesc_result' (at pp.c:16235)
  FuncDef:  (at pp.c:16240)
    Decl: name='PowerCycleP__stopRadio__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16240)
      FuncDecl: quals=None (at pp.c:16240)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__stopRadio__postTask', quals=[] (at pp.c:16240)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16240)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16242)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16242)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16246)
        ID: name='__nesc_result' (at pp.c:16246)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16246)
          ExprList:  (at pp.c:16246)
            ID: name='PowerCycleP__stopRadio' (at pp.c:16246)
      Return:  (at pp.c:16250)
        ID: name='__nesc_result' (at pp.c:16250)
  FuncDef:  (at pp.c:16255)
    Decl: name='StateImplP__State__isIdle', quals=[], storage=['inline', 'static'] (at pp.c:16255)
      FuncDecl: quals=None (at pp.c:16255)
        ParamList:  (at pp.c:16255)
          Decl: name='id', quals=[], storage=[] (at pp.c:16255)
            TypeDecl: declname='id', quals=[] (at pp.c:16255)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__isIdle', quals=[] (at pp.c:16255)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16257)
      Return:  (at pp.c:16258)
        FuncCall:  (at None)
          ID: name='StateImplP__State__isState' (at pp.c:16258)
          ExprList:  (at pp.c:16258)
            ID: name='id' (at pp.c:16258)
            ID: name='StateImplP__S_IDLE' (at pp.c:16258)
  FuncDef:  (at pp.c:16262)
    Decl: name='PowerCycleP__SendState__isIdle', quals=[], storage=['static', 'inline'] (at pp.c:16262)
      FuncDecl: quals=None (at pp.c:16262)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__SendState__isIdle', quals=[] (at pp.c:16262)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16262)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16264)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16264)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16268)
        ID: name='__nesc_result' (at pp.c:16268)
        FuncCall:  (at None)
          ID: name='StateImplP__State__isIdle' (at pp.c:16268)
          ExprList:  (at pp.c:16268)
            Constant: type='int', value='5U' (at pp.c:16268)
      Return:  (at pp.c:16272)
        ID: name='__nesc_result' (at pp.c:16272)
  FuncDef:  (at pp.c:16277)
    Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[], storage=['inline', 'static'] (at pp.c:16277)
      FuncDecl: quals=None (at pp.c:16277)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive', quals=[] (at pp.c:16277)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:16279)
      Return:  (at pp.c:16281)
        ID: name='SystemLowPowerListeningP__delayAfterReceive' (at pp.c:16281)
  FuncDef:  (at pp.c:16285)
    Decl: name='DefaultLplP__SystemLowPowerListening__getDelayAfterReceive', quals=[], storage=['static', 'inline'] (at pp.c:16285)
      FuncDecl: quals=None (at pp.c:16285)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SystemLowPowerListening__getDelayAfterReceive', quals=[] (at pp.c:16285)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:16285)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16287)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16287)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16291)
        ID: name='__nesc_result' (at pp.c:16291)
        FuncCall:  (at None)
          ID: name='SystemLowPowerListeningP__SystemLowPowerListening__getDelayAfterReceive' (at pp.c:16291)
      Return:  (at pp.c:16295)
        ID: name='__nesc_result' (at pp.c:16295)
  FuncDef:  (at pp.c:16300)
    Decl: name='DefaultLplP__startOffTimer', quals=[], storage=['inline', 'static'] (at pp.c:16300)
      FuncDecl: quals=None (at pp.c:16300)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__startOffTimer', quals=[] (at pp.c:16300)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16302)
      FuncCall:  (at None)
        ID: name='DefaultLplP__OffTimer__startOneShot' (at pp.c:16303)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SystemLowPowerListening__getDelayAfterReceive' (at pp.c:16303)
  FuncDef:  (at pp.c:16307)
    Decl: name='DefaultLplP__PowerCycle__detected', quals=[], storage=['inline', 'static'] (at pp.c:16307)
      FuncDecl: quals=None (at pp.c:16307)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__PowerCycle__detected', quals=[] (at pp.c:16307)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16309)
      FuncCall:  (at None)
        ID: name='DefaultLplP__startOffTimer' (at pp.c:16316)
  FuncDef:  (at pp.c:16320)
    Decl: name='PowerCycleP__PowerCycle__detected', quals=[], storage=['static', 'inline'] (at pp.c:16320)
      FuncDecl: quals=None (at pp.c:16320)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__PowerCycle__detected', quals=[] (at pp.c:16320)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16320)
      FuncCall:  (at None)
        ID: name='DefaultLplP__PowerCycle__detected' (at pp.c:16322)
  FuncDef:  (at pp.c:16327)
    Decl: name='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[], storage=['inline', 'static'] (at pp.c:16327)
      FuncDecl: quals=None (at pp.c:16327)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__EnergyIndicator__isReceiving', quals=[] (at pp.c:16327)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16329)
      Return:  (at pp.c:16330)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CCA__get' (at pp.c:16330)
  FuncDef:  (at pp.c:16334)
    Decl: name='PowerCycleP__EnergyIndicator__isReceiving', quals=[], storage=['static', 'inline'] (at pp.c:16334)
      FuncDecl: quals=None (at pp.c:16334)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__EnergyIndicator__isReceiving', quals=[] (at pp.c:16334)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16334)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16336)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16336)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16340)
        ID: name='__nesc_result' (at pp.c:16340)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__EnergyIndicator__isReceiving' (at pp.c:16340)
      Return:  (at pp.c:16344)
        ID: name='__nesc_result' (at pp.c:16344)
  FuncDef:  (at pp.c:16349)
    Decl: name='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[], storage=['inline', 'static'] (at pp.c:16349)
      FuncDecl: quals=None (at pp.c:16349)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__PacketIndicator__isReceiving', quals=[] (at pp.c:16349)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16351)
      Decl: name='receiving', quals=[], storage=[] (at pp.c:16352)
        TypeDecl: declname='receiving', quals=[] (at pp.c:16352)
          IdentifierType: names=['bool'] (at None)
      Compound:  (at pp.c:16356)
        Assignment: op='=' (at pp.c:16357)
          ID: name='receiving' (at pp.c:16357)
          ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:16357)
      Return:  (at pp.c:16359)
        ID: name='receiving' (at pp.c:16359)
  FuncDef:  (at pp.c:16363)
    Decl: name='PowerCycleP__PacketIndicator__isReceiving', quals=[], storage=['static', 'inline'] (at pp.c:16363)
      FuncDecl: quals=None (at pp.c:16363)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__PacketIndicator__isReceiving', quals=[] (at pp.c:16363)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16363)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16365)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16365)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16369)
        ID: name='__nesc_result' (at pp.c:16369)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__PacketIndicator__isReceiving' (at pp.c:16369)
      Return:  (at pp.c:16373)
        ID: name='__nesc_result' (at pp.c:16373)
  FuncDef:  (at pp.c:16378)
    Decl: name='PowerCycleP__startRadio__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16378)
      FuncDecl: quals=None (at pp.c:16378)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__startRadio__postTask', quals=[] (at pp.c:16378)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16378)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16380)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16380)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16384)
        ID: name='__nesc_result' (at pp.c:16384)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16384)
          ExprList:  (at pp.c:16384)
            ID: name='PowerCycleP__startRadio' (at pp.c:16384)
      Return:  (at pp.c:16388)
        ID: name='__nesc_result' (at pp.c:16388)
  FuncDef:  (at pp.c:16393)
    Decl: name='PowerCycleP__SplitControlState__isState', quals=[], storage=['static', 'inline'] (at pp.c:16393)
      FuncDecl: quals=None (at pp.c:16393)
        ParamList:  (at pp.c:16393)
          Decl: name='myState', quals=[], storage=[] (at pp.c:16393)
            TypeDecl: declname='myState', quals=[] (at pp.c:16393)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='PowerCycleP__SplitControlState__isState', quals=[] (at pp.c:16393)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16393)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16395)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16395)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16399)
        ID: name='__nesc_result' (at pp.c:16399)
        FuncCall:  (at None)
          ID: name='StateImplP__State__isState' (at pp.c:16399)
          ExprList:  (at pp.c:16399)
            Constant: type='int', value='4U' (at pp.c:16399)
            ID: name='myState' (at pp.c:16399)
      Return:  (at pp.c:16403)
        ID: name='__nesc_result' (at pp.c:16403)
  FuncDef:  (at pp.c:16408)
    Decl: name='PowerCycleP__isDutyCycling', quals=[], storage=['inline', 'static'] (at pp.c:16408)
      FuncDecl: quals=None (at pp.c:16408)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__isDutyCycling', quals=[] (at pp.c:16408)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:16410)
      Return:  (at pp.c:16411)
        BinaryOp: op='&&' (at pp.c:16411)
          BinaryOp: op='>' (at pp.c:16411)
            ID: name='PowerCycleP__sleepInterval' (at pp.c:16411)
            Constant: type='int', value='0' (at pp.c:16411)
          FuncCall:  (at None)
            ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:16411)
            ExprList:  (at pp.c:16411)
              ID: name='PowerCycleP__S_ON' (at pp.c:16411)
  FuncDef:  (at pp.c:16415)
    Decl: name='PowerCycleP__getCca__runTask', quals=[], storage=['inline', 'static'] (at pp.c:16415)
      FuncDecl: quals=None (at pp.c:16415)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__getCca__runTask', quals=[] (at pp.c:16415)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16417)
      Decl: name='detects', quals=[], storage=[] (at pp.c:16418)
        TypeDecl: declname='detects', quals=[] (at pp.c:16418)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:16418)
      If:  (at pp.c:16421)
        FuncCall:  (at None)
          ID: name='PowerCycleP__isDutyCycling' (at pp.c:16421)
        Compound:  (at pp.c:16421)
          UnaryOp: op='p++' (at pp.c:16423)
            ID: name='PowerCycleP__ccaChecks' (at pp.c:16423)
          If:  (at pp.c:16424)
            BinaryOp: op='==' (at pp.c:16424)
              ID: name='PowerCycleP__ccaChecks' (at pp.c:16424)
              Constant: type='int', value='1' (at pp.c:16424)
            Compound:  (at pp.c:16424)
              FuncCall:  (at None)
                ID: name='PowerCycleP__startRadio__postTask' (at pp.c:16426)
              Return:  (at pp.c:16427)
          Compound:  (at pp.c:16430)
            Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16430)
              TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16430)
                IdentifierType: names=['__nesc_atomic_t'] (at None)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_start' (at pp.c:16430)
            Compound:  (at pp.c:16432)
              For:  (at pp.c:16433)
                BinaryOp: op='&&' (at pp.c:16433)
                  BinaryOp: op='<' (at pp.c:16433)
                    ID: name='PowerCycleP__ccaChecks' (at pp.c:16433)
                    Constant: type='int', value='400' (at pp.c:16433)
                  FuncCall:  (at None)
                    ID: name='PowerCycleP__SendState__isIdle' (at pp.c:16433)
                UnaryOp: op='p++' (at pp.c:16433)
                  ID: name='PowerCycleP__ccaChecks' (at pp.c:16433)
                Compound:  (at pp.c:16433)
                  If:  (at pp.c:16434)
                    FuncCall:  (at None)
                      ID: name='PowerCycleP__PacketIndicator__isReceiving' (at pp.c:16434)
                    Compound:  (at pp.c:16434)
                      FuncCall:  (at None)
                        ID: name='PowerCycleP__PowerCycle__detected' (at pp.c:16435)
                      Compound:  (at pp.c:16436)
                        FuncCall:  (at None)
                          ID: name='__nesc_atomic_end' (at pp.c:16438)
                          ExprList:  (at pp.c:16438)
                            ID: name='__nesc_atomic' (at pp.c:16438)
                        Return:  (at pp.c:16440)
                  If:  (at pp.c:16443)
                    FuncCall:  (at None)
                      ID: name='PowerCycleP__EnergyIndicator__isReceiving' (at pp.c:16443)
                    Compound:  (at pp.c:16443)
                      UnaryOp: op='p++' (at pp.c:16444)
                        ID: name='detects' (at pp.c:16444)
                      If:  (at pp.c:16445)
                        BinaryOp: op='>' (at pp.c:16445)
                          ID: name='detects' (at pp.c:16445)
                          Constant: type='int', value='3' (at pp.c:16445)
                        Compound:  (at pp.c:16445)
                          FuncCall:  (at None)
                            ID: name='PowerCycleP__PowerCycle__detected' (at pp.c:16446)
                          Compound:  (at pp.c:16447)
                            FuncCall:  (at None)
                              ID: name='__nesc_atomic_end' (at pp.c:16449)
                              ExprList:  (at pp.c:16449)
                                ID: name='__nesc_atomic' (at pp.c:16449)
                            Return:  (at pp.c:16451)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:16458)
              ExprList:  (at pp.c:16458)
                ID: name='__nesc_atomic' (at pp.c:16458)
          If:  (at pp.c:16460)
            FuncCall:  (at None)
              ID: name='PowerCycleP__SendState__isIdle' (at pp.c:16460)
            Compound:  (at pp.c:16460)
              FuncCall:  (at None)
                ID: name='PowerCycleP__stopRadio__postTask' (at pp.c:16461)
  FuncDef:  (at pp.c:16467)
    Decl: name='PowerCycleP__SubControl__start', quals=[], storage=['static', 'inline'] (at pp.c:16467)
      FuncDecl: quals=None (at pp.c:16467)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__SubControl__start', quals=[] (at pp.c:16467)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16467)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16469)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16469)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16473)
        ID: name='__nesc_result' (at pp.c:16473)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControl__start' (at pp.c:16473)
      Return:  (at pp.c:16477)
        ID: name='__nesc_result' (at pp.c:16477)
  FuncDef:  (at pp.c:16482)
    Decl: name='PowerCycleP__startRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:16482)
      FuncDecl: quals=None (at pp.c:16482)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__startRadio__runTask', quals=[] (at pp.c:16482)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16484)
      If:  (at pp.c:16485)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='PowerCycleP__SubControl__start' (at pp.c:16485)
          ID: name='SUCCESS' (at pp.c:16485)
        Compound:  (at pp.c:16485)
          FuncCall:  (at None)
            ID: name='PowerCycleP__startRadio__postTask' (at pp.c:16486)
  FuncDef:  (at pp.c:16491)
    Decl: name='CC2420CsmaP__SplitControlState__requestState', quals=[], storage=['static', 'inline'] (at pp.c:16491)
      FuncDecl: quals=None (at pp.c:16491)
        ParamList:  (at pp.c:16491)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:16491)
            TypeDecl: declname='reqState', quals=[] (at pp.c:16491)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControlState__requestState', quals=[] (at pp.c:16491)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16491)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16493)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16493)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16497)
        ID: name='__nesc_result' (at pp.c:16497)
        FuncCall:  (at None)
          ID: name='StateImplP__State__requestState' (at pp.c:16497)
          ExprList:  (at pp.c:16497)
            Constant: type='int', value='1U' (at pp.c:16497)
            ID: name='reqState' (at pp.c:16497)
      Return:  (at pp.c:16501)
        ID: name='__nesc_result' (at pp.c:16501)
  FuncDef:  (at pp.c:16506)
    Decl: name='CC2420ControlP__StartupTimer__start', quals=[], storage=['static', 'inline'] (at pp.c:16506)
      FuncDecl: quals=None (at pp.c:16506)
        ParamList:  (at pp.c:16506)
          Decl: name='dt', quals=[], storage=[] (at pp.c:16506)
            TypeDecl: declname='dt', quals=[] (at pp.c:16506)
              IdentifierType: names=['CC2420ControlP__StartupTimer__size_type'] (at None)
        TypeDecl: declname='CC2420ControlP__StartupTimer__start', quals=[] (at pp.c:16506)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16506)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__Alarm__start' (at pp.c:16508)
        ExprList:  (at pp.c:16508)
          ID: name='dt' (at pp.c:16508)
  FuncDef:  (at pp.c:16513)
    Decl: name='HplMsp430GeneralIOP__29__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:16513)
      FuncDecl: quals=None (at pp.c:16513)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__29__IO__set', quals=[] (at pp.c:16513)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16515)
      Compound:  (at pp.c:16517)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16517)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16517)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:16517)
        Assignment: op='|=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:16519)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:16519)
          BinaryOp: op='<<' (at pp.c:16519)
            Constant: type='int', value='0x01' (at pp.c:16519)
            Constant: type='int', value='5' (at pp.c:16519)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:16521)
          ExprList:  (at pp.c:16521)
            ID: name='__nesc_atomic' (at pp.c:16521)
  FuncDef:  (at pp.c:16525)
    Decl: name='Msp430GpioC__11__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:16525)
      FuncDecl: quals=None (at pp.c:16525)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__set', quals=[] (at pp.c:16525)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16525)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__29__IO__set' (at pp.c:16527)
  FuncDef:  (at pp.c:16532)
    Decl: name='Msp430GpioC__11__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:16532)
      FuncDecl: quals=None (at pp.c:16532)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__GeneralIO__set', quals=[] (at pp.c:16532)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16534)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__HplGeneralIO__set' (at pp.c:16536)
  FuncDef:  (at pp.c:16540)
    Decl: name='CC2420ControlP__VREN__set', quals=[], storage=['static', 'inline'] (at pp.c:16540)
      FuncDecl: quals=None (at pp.c:16540)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__VREN__set', quals=[] (at pp.c:16540)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16540)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__GeneralIO__set' (at pp.c:16542)
  FuncDef:  (at pp.c:16547)
    Decl: name='CC2420ControlP__CC2420Power__startVReg', quals=[], storage=['inline', 'static'] (at pp.c:16547)
      FuncDecl: quals=None (at pp.c:16547)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__startVReg', quals=[] (at pp.c:16547)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16549)
      Compound:  (at pp.c:16550)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16550)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16550)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:16550)
        Compound:  (at pp.c:16552)
          If:  (at pp.c:16553)
            BinaryOp: op='!=' (at pp.c:16553)
              ID: name='CC2420ControlP__m_state' (at pp.c:16553)
              ID: name='CC2420ControlP__S_VREG_STOPPED' (at pp.c:16553)
            Compound:  (at pp.c:16553)
              Compound:  (at pp.c:16554)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:16555)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:16555)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:16557)
                Compound:  (at pp.c:16559)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:16561)
                    ExprList:  (at pp.c:16561)
                      ID: name='__nesc_atomic' (at pp.c:16561)
                  Return:  (at pp.c:16563)
                    ID: name='__nesc_temp' (at pp.c:16563)
          Assignment: op='=' (at pp.c:16568)
            ID: name='CC2420ControlP__m_state' (at pp.c:16568)
            ID: name='CC2420ControlP__S_VREG_STARTING' (at pp.c:16568)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:16571)
          ExprList:  (at pp.c:16571)
            ID: name='__nesc_atomic' (at pp.c:16571)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__VREN__set' (at pp.c:16572)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__StartupTimer__start' (at pp.c:16573)
        ExprList:  (at pp.c:16573)
          ID: name='CC2420_TIME_VREN' (at pp.c:16573)
      Return:  (at pp.c:16574)
        ID: name='SUCCESS' (at pp.c:16574)
  FuncDef:  (at pp.c:16578)
    Decl: name='CC2420CsmaP__CC2420Power__startVReg', quals=[], storage=['static', 'inline'] (at pp.c:16578)
      FuncDecl: quals=None (at pp.c:16578)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__startVReg', quals=[] (at pp.c:16578)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16578)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16580)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16580)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16584)
        ID: name='__nesc_result' (at pp.c:16584)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Power__startVReg' (at pp.c:16584)
      Return:  (at pp.c:16588)
        ID: name='__nesc_result' (at pp.c:16588)
  FuncDef:  (at pp.c:16593)
    Decl: name='PowerCycleP__SubControl__stop', quals=[], storage=['static', 'inline'] (at pp.c:16593)
      FuncDecl: quals=None (at pp.c:16593)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__SubControl__stop', quals=[] (at pp.c:16593)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16593)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16595)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16595)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16599)
        ID: name='__nesc_result' (at pp.c:16599)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControl__stop' (at pp.c:16599)
      Return:  (at pp.c:16603)
        ID: name='__nesc_result' (at pp.c:16603)
  FuncDef:  (at pp.c:16608)
    Decl: name='PowerCycleP__stopRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:16608)
      FuncDecl: quals=None (at pp.c:16608)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__stopRadio__runTask', quals=[] (at pp.c:16608)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16610)
      Decl: name='error', quals=[], storage=[] (at pp.c:16611)
        TypeDecl: declname='error', quals=[] (at pp.c:16611)
          IdentifierType: names=['error_t'] (at None)
        FuncCall:  (at None)
          ID: name='PowerCycleP__SubControl__stop' (at pp.c:16611)
      If:  (at pp.c:16614)
        BinaryOp: op='!=' (at pp.c:16614)
          ID: name='error' (at pp.c:16614)
          ID: name='SUCCESS' (at pp.c:16614)
        Compound:  (at pp.c:16614)
          FuncCall:  (at None)
            ID: name='PowerCycleP__finishSplitControlRequests' (at pp.c:16616)
          FuncCall:  (at None)
            ID: name='PowerCycleP__OnTimer__startOneShot' (at pp.c:16617)
            ExprList:  (at pp.c:16617)
              ID: name='PowerCycleP__sleepInterval' (at pp.c:16617)
  FuncDef:  (at pp.c:16622)
    Decl: name='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[], storage=['inline', 'static'] (at pp.c:16622)
      FuncDecl: quals=None (at pp.c:16622)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__25__IO__selectIOFunc', quals=[] (at pp.c:16622)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16624)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:16627)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='31U' (at pp.c:16627)
        UnaryOp: op='~' (at pp.c:16627)
          BinaryOp: op='<<' (at pp.c:16627)
            Constant: type='int', value='0x01' (at pp.c:16627)
            Constant: type='int', value='1' (at pp.c:16627)
  FuncDef:  (at pp.c:16631)
    Decl: name='GpioCaptureC__0__GeneralIO__selectIOFunc', quals=[], storage=['static', 'inline'] (at pp.c:16631)
      FuncDecl: quals=None (at pp.c:16631)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__GeneralIO__selectIOFunc', quals=[] (at pp.c:16631)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16631)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__25__IO__selectIOFunc' (at pp.c:16633)
  FuncDef:  (at pp.c:16638)
    Decl: name='Msp430TimerCapComP__4__Control__disableEvents', quals=[], storage=['inline', 'static'] (at pp.c:16638)
      FuncDecl: quals=None (at pp.c:16638)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__4__Control__disableEvents', quals=[] (at pp.c:16638)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16639)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:16640)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='388U' (at pp.c:16640)
        UnaryOp: op='~' (at pp.c:16640)
          Constant: type='int', value='0x0010' (at pp.c:16640)
  FuncDef:  (at pp.c:16644)
    Decl: name='GpioCaptureC__0__Msp430TimerControl__disableEvents', quals=[], storage=['static', 'inline'] (at pp.c:16644)
      FuncDecl: quals=None (at pp.c:16644)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Msp430TimerControl__disableEvents', quals=[] (at pp.c:16644)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16644)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__4__Control__disableEvents' (at pp.c:16646)
  FuncDef:  (at pp.c:16651)
    Decl: name='GpioCaptureC__0__Capture__disable', quals=[], storage=['inline', 'static'] (at pp.c:16651)
      FuncDecl: quals=None (at pp.c:16651)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='GpioCaptureC__0__Capture__disable', quals=[] (at pp.c:16651)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16653)
      Compound:  (at pp.c:16656)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430TimerControl__disableEvents' (at pp.c:16657)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__GeneralIO__selectIOFunc' (at pp.c:16658)
  FuncDef:  (at pp.c:16663)
    Decl: name='CC2420TransmitP__CaptureSFD__disable', quals=[], storage=['static', 'inline'] (at pp.c:16663)
      FuncDecl: quals=None (at pp.c:16663)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CaptureSFD__disable', quals=[] (at pp.c:16663)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16663)
      FuncCall:  (at None)
        ID: name='GpioCaptureC__0__Capture__disable' (at pp.c:16665)
  FuncDef:  (at pp.c:16670)
    Decl: name='HplMsp430InterruptP__Port10__clear', quals=[], storage=['inline', 'static'] (at pp.c:16670)
      FuncDecl: quals=None (at pp.c:16670)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port10__clear', quals=[] (at pp.c:16670)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16672)
      Assignment: op='&=' (at pp.c:16674)
        ID: name='P1IFG' (at pp.c:16674)
        UnaryOp: op='~' (at pp.c:16674)
          BinaryOp: op='<<' (at pp.c:16674)
            Constant: type='int', value='1' (at pp.c:16674)
            Constant: type='int', value='0' (at pp.c:16674)
  FuncDef:  (at pp.c:16678)
    Decl: name='Msp430InterruptC__1__HplInterrupt__clear', quals=[], storage=['static', 'inline'] (at pp.c:16678)
      FuncDecl: quals=None (at pp.c:16678)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__clear', quals=[] (at pp.c:16678)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16678)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port10__clear' (at pp.c:16680)
  FuncDef:  (at pp.c:16685)
    Decl: name='HplMsp430InterruptP__Port10__disable', quals=[], storage=['inline', 'static'] (at pp.c:16685)
      FuncDecl: quals=None (at pp.c:16685)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port10__disable', quals=[] (at pp.c:16685)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16687)
      Assignment: op='&=' (at pp.c:16689)
        ID: name='P1IE' (at pp.c:16689)
        UnaryOp: op='~' (at pp.c:16689)
          BinaryOp: op='<<' (at pp.c:16689)
            Constant: type='int', value='1' (at pp.c:16689)
            Constant: type='int', value='0' (at pp.c:16689)
  FuncDef:  (at pp.c:16693)
    Decl: name='Msp430InterruptC__1__HplInterrupt__disable', quals=[], storage=['static', 'inline'] (at pp.c:16693)
      FuncDecl: quals=None (at pp.c:16693)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__disable', quals=[] (at pp.c:16693)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16693)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port10__disable' (at pp.c:16695)
  FuncDef:  (at pp.c:16700)
    Decl: name='Msp430InterruptC__1__Interrupt__disable', quals=[], storage=['inline', 'static'] (at pp.c:16700)
      FuncDecl: quals=None (at pp.c:16700)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__Interrupt__disable', quals=[] (at pp.c:16700)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16702)
      Compound:  (at pp.c:16705)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__HplInterrupt__disable' (at pp.c:16706)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__HplInterrupt__clear' (at pp.c:16707)
      Return:  (at pp.c:16709)
        ID: name='SUCCESS' (at pp.c:16709)
  FuncDef:  (at pp.c:16713)
    Decl: name='CC2420ReceiveP__InterruptFIFOP__disable', quals=[], storage=['static', 'inline'] (at pp.c:16713)
      FuncDecl: quals=None (at pp.c:16713)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__disable', quals=[] (at pp.c:16713)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16713)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16715)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16715)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16719)
        ID: name='__nesc_result' (at pp.c:16719)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__Interrupt__disable' (at pp.c:16719)
      Return:  (at pp.c:16723)
        ID: name='__nesc_result' (at pp.c:16723)
  FuncDef:  (at pp.c:16728)
    Decl: name='HplMsp430GeneralIOP__29__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:16728)
      FuncDecl: quals=None (at pp.c:16728)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__29__IO__clr', quals=[] (at pp.c:16728)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16730)
      Compound:  (at pp.c:16732)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16732)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16732)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:16732)
        Assignment: op='&=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:16734)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:16734)
          UnaryOp: op='~' (at pp.c:16734)
            BinaryOp: op='<<' (at pp.c:16734)
              Constant: type='int', value='0x01' (at pp.c:16734)
              Constant: type='int', value='5' (at pp.c:16734)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:16736)
          ExprList:  (at pp.c:16736)
            ID: name='__nesc_atomic' (at pp.c:16736)
  FuncDef:  (at pp.c:16740)
    Decl: name='Msp430GpioC__11__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:16740)
      FuncDecl: quals=None (at pp.c:16740)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__clr', quals=[] (at pp.c:16740)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16740)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__29__IO__clr' (at pp.c:16742)
  FuncDef:  (at pp.c:16747)
    Decl: name='Msp430GpioC__11__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:16747)
      FuncDecl: quals=None (at pp.c:16747)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__GeneralIO__clr', quals=[] (at pp.c:16747)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16749)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__HplGeneralIO__clr' (at pp.c:16751)
  FuncDef:  (at pp.c:16755)
    Decl: name='CC2420ControlP__VREN__clr', quals=[], storage=['static', 'inline'] (at pp.c:16755)
      FuncDecl: quals=None (at pp.c:16755)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__VREN__clr', quals=[] (at pp.c:16755)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16755)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__GeneralIO__clr' (at pp.c:16757)
  FuncDef:  (at pp.c:16762)
    Decl: name='StateImplP__State__forceState', quals=[], storage=['inline', 'static'] (at pp.c:16762)
      FuncDecl: quals=None (at pp.c:16762)
        ParamList:  (at pp.c:16762)
          Decl: name='id', quals=[], storage=[] (at pp.c:16762)
            TypeDecl: declname='id', quals=[] (at pp.c:16762)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:16762)
            TypeDecl: declname='reqState', quals=[] (at pp.c:16762)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__forceState', quals=[] (at pp.c:16762)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16764)
      Compound:  (at pp.c:16765)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16765)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16765)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:16765)
        Assignment: op='=' (at pp.c:16767)
          ArrayRef:  (at pp.c:16767)
            ID: name='StateImplP__state' (at pp.c:16767)
            ID: name='id' (at pp.c:16767)
          ID: name='reqState' (at pp.c:16767)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:16769)
          ExprList:  (at pp.c:16769)
            ID: name='__nesc_atomic' (at pp.c:16769)
  FuncDef:  (at pp.c:16773)
    Decl: name='PowerCycleP__SplitControlState__forceState', quals=[], storage=['static', 'inline'] (at pp.c:16773)
      FuncDecl: quals=None (at pp.c:16773)
        ParamList:  (at pp.c:16773)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:16773)
            TypeDecl: declname='reqState', quals=[] (at pp.c:16773)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='PowerCycleP__SplitControlState__forceState', quals=[] (at pp.c:16773)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16773)
      FuncCall:  (at None)
        ID: name='StateImplP__State__forceState' (at pp.c:16775)
        ExprList:  (at pp.c:16775)
          Constant: type='int', value='4U' (at pp.c:16775)
          ID: name='reqState' (at pp.c:16775)
  FuncDef:  (at pp.c:16780)
    Decl: name='LowPowerSensingPeriodicSamplerC__AMControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:16780)
      FuncDecl: quals=None (at pp.c:16780)
        ParamList:  (at pp.c:16780)
          Decl: name='e', quals=[], storage=[] (at pp.c:16780)
            TypeDecl: declname='e', quals=[] (at pp.c:16780)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__AMControl__stopDone', quals=[] (at pp.c:16780)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16782)
  FuncDef:  (at pp.c:16786)
    Decl: name='PowerCycleP__SplitControl__stopDone', quals=[], storage=['static', 'inline'] (at pp.c:16786)
      FuncDecl: quals=None (at pp.c:16786)
        ParamList:  (at pp.c:16786)
          Decl: name='error', quals=[], storage=[] (at pp.c:16786)
            TypeDecl: declname='error', quals=[] (at pp.c:16786)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PowerCycleP__SplitControl__stopDone', quals=[] (at pp.c:16786)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16786)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__AMControl__stopDone' (at pp.c:16788)
        ExprList:  (at pp.c:16788)
          ID: name='error' (at pp.c:16788)
  FuncDef:  (at pp.c:16793)
    Decl: name='LowPowerSensingPeriodicSamplerC__AMControl__start', quals=[], storage=['static', 'inline'] (at pp.c:16793)
      FuncDecl: quals=None (at pp.c:16793)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__AMControl__start', quals=[] (at pp.c:16793)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16793)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16795)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16795)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16799)
        ID: name='__nesc_result' (at pp.c:16799)
        FuncCall:  (at None)
          ID: name='PowerCycleP__SplitControl__start' (at pp.c:16799)
      Return:  (at pp.c:16803)
        ID: name='__nesc_result' (at pp.c:16803)
  FuncDef:  (at pp.c:16808)
    Decl: name='LowPowerSensingPeriodicSamplerC__AMControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:16808)
      FuncDecl: quals=None (at pp.c:16808)
        ParamList:  (at pp.c:16808)
          Decl: name='e', quals=[], storage=[] (at pp.c:16808)
            TypeDecl: declname='e', quals=[] (at pp.c:16808)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__AMControl__startDone', quals=[] (at pp.c:16808)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16810)
      If:  (at pp.c:16811)
        BinaryOp: op='!=' (at pp.c:16811)
          ID: name='e' (at pp.c:16811)
          ID: name='SUCCESS' (at pp.c:16811)
        Compound:  (at pp.c:16811)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__AMControl__start' (at pp.c:16812)
  FuncDef:  (at pp.c:16817)
    Decl: name='PowerCycleP__SplitControl__startDone', quals=[], storage=['static', 'inline'] (at pp.c:16817)
      FuncDecl: quals=None (at pp.c:16817)
        ParamList:  (at pp.c:16817)
          Decl: name='error', quals=[], storage=[] (at pp.c:16817)
            TypeDecl: declname='error', quals=[] (at pp.c:16817)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PowerCycleP__SplitControl__startDone', quals=[] (at pp.c:16817)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16817)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__AMControl__startDone' (at pp.c:16819)
        ExprList:  (at pp.c:16819)
          ID: name='error' (at pp.c:16819)
  FuncDef:  (at pp.c:16824)
    Decl: name='DefaultLplP__stopRadio__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16824)
      FuncDecl: quals=None (at pp.c:16824)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__stopRadio__postTask', quals=[] (at pp.c:16824)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16824)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16826)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16826)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16830)
        ID: name='__nesc_result' (at pp.c:16830)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16830)
          ExprList:  (at pp.c:16830)
            ID: name='DefaultLplP__stopRadio' (at pp.c:16830)
      Return:  (at pp.c:16834)
        ID: name='__nesc_result' (at pp.c:16834)
  FuncDef:  (at pp.c:16839)
    Decl: name='DefaultLplP__SubControl__stop', quals=[], storage=['static', 'inline'] (at pp.c:16839)
      FuncDecl: quals=None (at pp.c:16839)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SubControl__stop', quals=[] (at pp.c:16839)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16839)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16841)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16841)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16845)
        ID: name='__nesc_result' (at pp.c:16845)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControl__stop' (at pp.c:16845)
      Return:  (at pp.c:16849)
        ID: name='__nesc_result' (at pp.c:16849)
  FuncDef:  (at pp.c:16854)
    Decl: name='DefaultLplP__SendState__getState', quals=[], storage=['static', 'inline'] (at pp.c:16854)
      FuncDecl: quals=None (at pp.c:16854)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SendState__getState', quals=[] (at pp.c:16854)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:16854)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16856)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16856)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16860)
        ID: name='__nesc_result' (at pp.c:16860)
        FuncCall:  (at None)
          ID: name='StateImplP__State__getState' (at pp.c:16860)
          ExprList:  (at pp.c:16860)
            Constant: type='int', value='5U' (at pp.c:16860)
      Return:  (at pp.c:16864)
        ID: name='__nesc_result' (at pp.c:16864)
  FuncDef:  (at pp.c:16869)
    Decl: name='DefaultLplP__stopRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:16869)
      FuncDecl: quals=None (at pp.c:16869)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__stopRadio__runTask', quals=[] (at pp.c:16869)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16871)
      If:  (at pp.c:16872)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendState__getState' (at pp.c:16872)
          ID: name='S_LPL_NOT_SENDING' (at pp.c:16872)
        Compound:  (at pp.c:16872)
          If:  (at pp.c:16873)
            BinaryOp: op='!=' (at None)
              FuncCall:  (at None)
                ID: name='DefaultLplP__SubControl__stop' (at pp.c:16873)
              ID: name='SUCCESS' (at pp.c:16873)
            Compound:  (at pp.c:16873)
              FuncCall:  (at None)
                ID: name='DefaultLplP__stopRadio__postTask' (at pp.c:16874)
  FuncDef:  (at pp.c:16880)
    Decl: name='DefaultLplP__SubControl__start', quals=[], storage=['static', 'inline'] (at pp.c:16880)
      FuncDecl: quals=None (at pp.c:16880)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SubControl__start', quals=[] (at pp.c:16880)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16880)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16882)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16882)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16886)
        ID: name='__nesc_result' (at pp.c:16886)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControl__start' (at pp.c:16886)
      Return:  (at pp.c:16890)
        ID: name='__nesc_result' (at pp.c:16890)
  FuncDef:  (at pp.c:16895)
    Decl: name='DefaultLplP__startRadio__runTask', quals=[], storage=['inline', 'static'] (at pp.c:16895)
      FuncDecl: quals=None (at pp.c:16895)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__startRadio__runTask', quals=[] (at pp.c:16895)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16897)
      If:  (at pp.c:16898)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SubControl__start' (at pp.c:16898)
          ID: name='SUCCESS' (at pp.c:16898)
        Compound:  (at pp.c:16898)
          FuncCall:  (at None)
            ID: name='DefaultLplP__startRadio__postTask' (at pp.c:16899)
  FuncDef:  (at pp.c:16904)
    Decl: name='DefaultLplP__resend__postTask', quals=[], storage=['static', 'inline'] (at pp.c:16904)
      FuncDecl: quals=None (at pp.c:16904)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__resend__postTask', quals=[] (at pp.c:16904)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16904)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16906)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16906)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16910)
        ID: name='__nesc_result' (at pp.c:16910)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:16910)
          ExprList:  (at pp.c:16910)
            ID: name='DefaultLplP__resend' (at pp.c:16910)
      Return:  (at pp.c:16914)
        ID: name='__nesc_result' (at pp.c:16914)
  FuncDef:  (at pp.c:16919)
    Decl: name='CC2420TransmitP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static', 'inline'] (at pp.c:16919)
      FuncDecl: quals=None (at pp.c:16919)
        ParamList:  (at pp.c:16919)
          Decl: name='msg', quals=[], storage=[] (at pp.c:16919)
            PtrDecl: quals=[] (at pp.c:16919)
              TypeDecl: declname='msg', quals=[] (at pp.c:16919)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:16919)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:16919)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__requestInitialBackoff' (at pp.c:16921)
        ExprList:  (at pp.c:16921)
          ID: name='msg' (at pp.c:16921)
  FuncDef:  (at pp.c:16926)
    Decl: name='CC2420TransmitP__resend', quals=[], storage=['inline', 'static'] (at pp.c:16926)
      FuncDecl: quals=None (at pp.c:16926)
        ParamList:  (at pp.c:16926)
          Decl: name='cca', quals=[], storage=[] (at pp.c:16926)
            TypeDecl: declname='cca', quals=[] (at pp.c:16926)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='CC2420TransmitP__resend', quals=[] (at pp.c:16926)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16928)
      Compound:  (at pp.c:16930)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:16930)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:16930)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:16930)
        Compound:  (at pp.c:16932)
          If:  (at pp.c:16933)
            BinaryOp: op='==' (at pp.c:16933)
              ID: name='CC2420TransmitP__m_state' (at pp.c:16933)
              ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:16933)
            Compound:  (at pp.c:16933)
              Compound:  (at pp.c:16934)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:16935)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:16935)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='ECANCEL' (at pp.c:16937)
                Compound:  (at pp.c:16939)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:16941)
                    ExprList:  (at pp.c:16941)
                      ID: name='__nesc_atomic' (at pp.c:16941)
                  Return:  (at pp.c:16943)
                    ID: name='__nesc_temp' (at pp.c:16943)
          If:  (at pp.c:16948)
            BinaryOp: op='!=' (at pp.c:16948)
              ID: name='CC2420TransmitP__m_state' (at pp.c:16948)
              ID: name='CC2420TransmitP__S_STARTED' (at pp.c:16948)
            Compound:  (at pp.c:16948)
              Compound:  (at pp.c:16949)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:16950)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:16950)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:16952)
                Compound:  (at pp.c:16954)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:16956)
                    ExprList:  (at pp.c:16956)
                      ID: name='__nesc_atomic' (at pp.c:16956)
                  Return:  (at pp.c:16958)
                    ID: name='__nesc_temp' (at pp.c:16958)
          Assignment: op='=' (at pp.c:16963)
            ID: name='CC2420TransmitP__m_cca' (at pp.c:16963)
            ID: name='cca' (at pp.c:16963)
          Assignment: op='=' (at pp.c:16964)
            ID: name='CC2420TransmitP__m_state' (at pp.c:16964)
            TernaryOp:  (at pp.c:16964)
              ID: name='cca' (at pp.c:16964)
              ID: name='CC2420TransmitP__S_SAMPLE_CCA' (at pp.c:16964)
              ID: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:16964)
          Assignment: op='=' (at pp.c:16965)
            ID: name='CC2420TransmitP__totalCcaChecks' (at pp.c:16965)
            Constant: type='int', value='0' (at pp.c:16965)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:16968)
          ExprList:  (at pp.c:16968)
            ID: name='__nesc_atomic' (at pp.c:16968)
      If:  (at pp.c:16970)
        ID: name='CC2420TransmitP__m_cca' (at pp.c:16970)
        Compound:  (at pp.c:16970)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__RadioBackoff__requestInitialBackoff' (at pp.c:16971)
            ExprList:  (at pp.c:16971)
              ID: name='CC2420TransmitP__m_msg' (at pp.c:16971)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:16972)
            ExprList:  (at pp.c:16972)
              ID: name='CC2420TransmitP__myInitialBackoff' (at pp.c:16972)
        Compound:  (at pp.c:16974)
          If:  (at pp.c:16976)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__acquireSpiResource' (at pp.c:16976)
              ID: name='SUCCESS' (at pp.c:16976)
            Compound:  (at pp.c:16976)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__attemptSend' (at pp.c:16977)
      Return:  (at pp.c:16980)
        ID: name='SUCCESS' (at pp.c:16980)
  FuncDef:  (at pp.c:16984)
    Decl: name='CC2420TransmitP__Send__resend', quals=[], storage=['inline', 'static'] (at pp.c:16984)
      FuncDecl: quals=None (at pp.c:16984)
        ParamList:  (at pp.c:16984)
          Decl: name='useCca', quals=[], storage=[] (at pp.c:16984)
            TypeDecl: declname='useCca', quals=[] (at pp.c:16984)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='CC2420TransmitP__Send__resend', quals=[] (at pp.c:16984)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16986)
      Return:  (at pp.c:16987)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__resend' (at pp.c:16987)
          ExprList:  (at pp.c:16987)
            ID: name='useCca' (at pp.c:16987)
  FuncDef:  (at pp.c:16991)
    Decl: name='DefaultLplP__Resend__resend', quals=[], storage=['static', 'inline'] (at pp.c:16991)
      FuncDecl: quals=None (at pp.c:16991)
        ParamList:  (at pp.c:16991)
          Decl: name='useCca', quals=[], storage=[] (at pp.c:16991)
            TypeDecl: declname='useCca', quals=[] (at pp.c:16991)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='DefaultLplP__Resend__resend', quals=[] (at pp.c:16991)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:16991)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:16993)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:16993)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:16997)
        ID: name='__nesc_result' (at pp.c:16997)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__Send__resend' (at pp.c:16997)
          ExprList:  (at pp.c:16997)
            ID: name='useCca' (at pp.c:16997)
      Return:  (at pp.c:17001)
        ID: name='__nesc_result' (at pp.c:17001)
  FuncDef:  (at pp.c:17006)
    Decl: name='DefaultLplP__resend__runTask', quals=[], storage=['inline', 'static'] (at pp.c:17006)
      FuncDecl: quals=None (at pp.c:17006)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__resend__runTask', quals=[] (at pp.c:17006)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17008)
      If:  (at pp.c:17009)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__Resend__resend' (at pp.c:17009)
            ExprList:  (at pp.c:17009)
              ID: name='TRUE' (at pp.c:17009)
          ID: name='SUCCESS' (at pp.c:17009)
        Compound:  (at pp.c:17009)
          FuncCall:  (at None)
            ID: name='DefaultLplP__resend__postTask' (at pp.c:17010)
  FuncDef:  (at pp.c:17015)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:17015)
      FuncDecl: quals=None (at pp.c:17015)
        ParamList:  (at pp.c:17015)
          Decl: name='id', quals=[], storage=[] (at pp.c:17015)
            TypeDecl: declname='id', quals=[] (at pp.c:17015)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17016)
            PtrDecl: quals=[] (at pp.c:17016)
              TypeDecl: declname='msg', quals=[] (at pp.c:17016)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff', quals=[] (at pp.c:17015)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17018)
  FuncDef:  (at pp.c:17022)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static', 'inline'] (at pp.c:17022)
      FuncDecl: quals=None (at pp.c:17022)
        ParamList:  (at pp.c:17022)
          Decl: name='arg_0x102a97d60', quals=[], storage=[] (at pp.c:17022)
            TypeDecl: declname='arg_0x102a97d60', quals=[] (at pp.c:17022)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17022)
            PtrDecl: quals=[] (at pp.c:17022)
              TypeDecl: declname='msg', quals=[] (at pp.c:17022)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:17022)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17022)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__default__requestInitialBackoff' (at pp.c:17024)
        ExprList:  (at pp.c:17024)
          ID: name='arg_0x102a97d60' (at pp.c:17024)
          ID: name='msg' (at pp.c:17024)
  FuncDef:  (at pp.c:17029)
    Decl: name='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:17029)
      FuncDecl: quals=None (at pp.c:17029)
        ParamList:  (at pp.c:17029)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17029)
            PtrDecl: quals=[] (at pp.c:17029)
              TypeDecl: declname='msg', quals=[] (at pp.c:17029)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:17029)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17031)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__requestInitialBackoff' (at pp.c:17032)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint8' (at pp.c:17032)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:17032)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['cc2420_header_t'] (at None)
                    BinaryOp: op='-' (at None)
                      BinaryOp: op='+' (at None)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            PtrDecl: quals=[] (at pp.c:17032)
                              TypeDecl: declname=None, quals=[] (at None)
                                IdentifierType: names=['uint8_t'] (at None)
                          ID: name='msg' (at pp.c:17032)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            TypeDecl: declname=None, quals=[] (at None)
                              IdentifierType: names=['size_t'] (at None)
                          UnaryOp: op='&' (at None)
                            StructRef: type='->' (at None)
                              Cast:  (at None)
                                Typename: quals=[] (at None)
                                  PtrDecl: quals=[] (at pp.c:17032)
                                    TypeDecl: declname=None, quals=[] (at None)
                                      IdentifierType: names=['message_t'] (at None)
                                Constant: type='int', value='0' (at pp.c:17032)
                              ID: name='data' (at pp.c:17032)
                      UnaryOp: op='sizeof' (at pp.c:17032)
                        Typename: quals=[] (at None)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['cc2420_header_t'] (at None)
                  ID: name='type' (at pp.c:17032)
                ID: name='nxdata' (at pp.c:17032)
          ID: name='msg' (at pp.c:17032)
  FuncDef:  (at pp.c:17036)
    Decl: name='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:17036)
      FuncDecl: quals=None (at pp.c:17036)
        ParamList:  (at pp.c:17036)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:17036)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:17036)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:17036)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17038)
      Assignment: op='=' (at pp.c:17039)
        ID: name='CC2420TransmitP__myInitialBackoff' (at pp.c:17039)
        BinaryOp: op='+' (at pp.c:17039)
          ID: name='backoffTime' (at pp.c:17039)
          Constant: type='int', value='1' (at pp.c:17039)
  FuncDef:  (at pp.c:17043)
    Decl: name='CC2420CsmaP__SubBackoff__setInitialBackoff', quals=[], storage=['static', 'inline'] (at pp.c:17043)
      FuncDecl: quals=None (at pp.c:17043)
        ParamList:  (at pp.c:17043)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:17043)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:17043)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubBackoff__setInitialBackoff', quals=[] (at pp.c:17043)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17043)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__RadioBackoff__setInitialBackoff' (at pp.c:17045)
        ExprList:  (at pp.c:17045)
          ID: name='backoffTime' (at pp.c:17045)
  FuncDef:  (at pp.c:17050)
    Decl: name='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:17050)
      FuncDecl: quals=None (at pp.c:17050)
        ParamList:  (at pp.c:17050)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:17050)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:17050)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:17050)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17052)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__setInitialBackoff' (at pp.c:17053)
        ExprList:  (at pp.c:17053)
          ID: name='backoffTime' (at pp.c:17053)
  FuncDef:  (at pp.c:17057)
    Decl: name='DefaultLplP__RadioBackoff__setInitialBackoff', quals=[], storage=['static', 'inline'] (at pp.c:17057)
      FuncDecl: quals=None (at pp.c:17057)
        ParamList:  (at pp.c:17057)
          Decl: name='backoffTime', quals=[], storage=[] (at pp.c:17057)
            TypeDecl: declname='backoffTime', quals=[] (at pp.c:17057)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioBackoff__setInitialBackoff', quals=[] (at pp.c:17057)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17057)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__RadioBackoff__setInitialBackoff' (at pp.c:17059)
        ExprList:  (at pp.c:17059)
          ID: name='backoffTime' (at pp.c:17059)
  FuncDef:  (at pp.c:17064)
    Decl: name='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[], storage=['inline', 'static'] (at pp.c:17064)
      FuncDecl: quals=None (at pp.c:17064)
        ParamList:  (at pp.c:17064)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17064)
            PtrDecl: quals=[] (at pp.c:17064)
              TypeDecl: declname='msg', quals=[] (at pp.c:17064)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:17064)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17066)
      If:  (at pp.c:17068)
        BinaryOp: op='>' (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_uint16' (at pp.c:17068)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  FuncCall:  (at None)
                    ID: name='DefaultLplP__CC2420PacketBody__getMetadata' (at pp.c:17070)
                    ExprList:  (at pp.c:17070)
                      ID: name='msg' (at pp.c:17070)
                  ID: name='rxInterval' (at pp.c:17070)
                ID: name='nxdata' (at pp.c:17070)
          ID: name='DefaultLplP__ONE_MESSAGE' (at pp.c:17071)
        Compound:  (at pp.c:17071)
          FuncCall:  (at None)
            ID: name='DefaultLplP__RadioBackoff__setInitialBackoff' (at pp.c:17072)
            ExprList:  (at None)
              BinaryOp: op='+' (at None)
                BinaryOp: op='%' (at None)
                  FuncCall:  (at None)
                    ID: name='DefaultLplP__Random__rand16' (at pp.c:17072)
                  BinaryOp: op='*' (at pp.c:17073)
                    Constant: type='int', value='0x4' (at pp.c:17073)
                    ID: name='CC2420_BACKOFF_PERIOD' (at pp.c:17073)
                ID: name='CC2420_MIN_BACKOFF' (at pp.c:17073)
  FuncDef:  (at pp.c:17078)
    Decl: name='CC2420CsmaP__RadioBackoff__requestInitialBackoff', quals=[], storage=['static', 'inline'] (at pp.c:17078)
      FuncDecl: quals=None (at pp.c:17078)
        ParamList:  (at pp.c:17078)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17078)
            PtrDecl: quals=[] (at pp.c:17078)
              TypeDecl: declname='msg', quals=[] (at pp.c:17078)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestInitialBackoff', quals=[] (at pp.c:17078)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17078)
      FuncCall:  (at None)
        ID: name='DefaultLplP__RadioBackoff__requestInitialBackoff' (at pp.c:17080)
        ExprList:  (at pp.c:17080)
          ID: name='msg' (at pp.c:17080)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SubBackoff__requestInitialBackoff' (at pp.c:17082)
        ExprList:  (at pp.c:17082)
          ID: name='msg' (at pp.c:17082)
  FuncDef:  (at pp.c:17087)
    Decl: name='DefaultLplP__send__postTask', quals=[], storage=['static', 'inline'] (at pp.c:17087)
      FuncDecl: quals=None (at pp.c:17087)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__send__postTask', quals=[] (at pp.c:17087)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17087)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17089)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17089)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17093)
        ID: name='__nesc_result' (at pp.c:17093)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:17093)
          ExprList:  (at pp.c:17093)
            ID: name='DefaultLplP__send' (at pp.c:17093)
      Return:  (at pp.c:17097)
        ID: name='__nesc_result' (at pp.c:17097)
  FuncDef:  (at pp.c:17102)
    Decl: name='__nesc_hton_uint8', quals=[], storage=['__inline', 'static'] (at pp.c:17102)
      FuncDecl: quals=None (at pp.c:17102)
        ParamList:  (at pp.c:17102)
          Decl: name='target', quals=[], storage=[] (at pp.c:17102)
            PtrDecl: quals=[] (at pp.c:17102)
              TypeDecl: declname='target', quals=[] (at pp.c:17102)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:17102)
            TypeDecl: declname='value', quals=[] (at pp.c:17102)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='__nesc_hton_uint8', quals=[] (at pp.c:17102)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:17104)
      Decl: name='base', quals=[], storage=[] (at pp.c:17105)
        PtrDecl: quals=[] (at pp.c:17105)
          TypeDecl: declname='base', quals=[] (at pp.c:17105)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='target' (at pp.c:17105)
      Assignment: op='=' (at pp.c:17108)
        ArrayRef:  (at pp.c:17108)
          ID: name='base' (at pp.c:17108)
          Constant: type='int', value='0' (at pp.c:17108)
        ID: name='value' (at pp.c:17108)
      Return:  (at pp.c:17109)
        ID: name='value' (at pp.c:17109)
  FuncDef:  (at pp.c:17113)
    Decl: name='__nesc_hton_int8', quals=[], storage=['__inline', 'static'] (at pp.c:17113)
      FuncDecl: quals=None (at pp.c:17113)
        ParamList:  (at pp.c:17113)
          Decl: name='target', quals=[], storage=[] (at pp.c:17113)
            PtrDecl: quals=[] (at pp.c:17113)
              TypeDecl: declname='target', quals=[] (at pp.c:17113)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:17113)
            TypeDecl: declname='value', quals=[] (at pp.c:17113)
              IdentifierType: names=['int8_t'] (at None)
        TypeDecl: declname='__nesc_hton_int8', quals=[] (at pp.c:17113)
          IdentifierType: names=['int8_t'] (at None)
    Compound:  (at pp.c:17115)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:17117)
        ExprList:  (at pp.c:17117)
          ID: name='target' (at pp.c:17117)
          ID: name='value' (at pp.c:17117)
      Return:  (at pp.c:17119)
        ID: name='value' (at pp.c:17119)
  FuncDef:  (at pp.c:17123)
    Decl: name='CC2420TransmitP__send', quals=[], storage=['inline', 'static'] (at pp.c:17123)
      FuncDecl: quals=None (at pp.c:17123)
        ParamList:  (at pp.c:17123)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:17123)
            PtrDecl: quals=[] (at pp.c:17123)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:17123)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='cca', quals=[], storage=[] (at pp.c:17123)
            TypeDecl: declname='cca', quals=[] (at pp.c:17123)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='CC2420TransmitP__send', quals=[] (at pp.c:17123)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17125)
      Compound:  (at pp.c:17126)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17126)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17126)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17126)
        Compound:  (at pp.c:17128)
          If:  (at pp.c:17129)
            BinaryOp: op='==' (at pp.c:17129)
              ID: name='CC2420TransmitP__m_state' (at pp.c:17129)
              ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:17129)
            Compound:  (at pp.c:17129)
              Compound:  (at pp.c:17130)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17131)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17131)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='ECANCEL' (at pp.c:17133)
                Compound:  (at pp.c:17135)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17137)
                    ExprList:  (at pp.c:17137)
                      ID: name='__nesc_atomic' (at pp.c:17137)
                  Return:  (at pp.c:17139)
                    ID: name='__nesc_temp' (at pp.c:17139)
          If:  (at pp.c:17144)
            BinaryOp: op='!=' (at pp.c:17144)
              ID: name='CC2420TransmitP__m_state' (at pp.c:17144)
              ID: name='CC2420TransmitP__S_STARTED' (at pp.c:17144)
            Compound:  (at pp.c:17144)
              Compound:  (at pp.c:17145)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17146)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17146)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:17148)
                Compound:  (at pp.c:17150)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17152)
                    ExprList:  (at pp.c:17152)
                      ID: name='__nesc_atomic' (at pp.c:17152)
                  Return:  (at pp.c:17154)
                    ID: name='__nesc_temp' (at pp.c:17154)
          Assignment: op='=' (at pp.c:17160)
            ID: name='CC2420TransmitP__m_state' (at pp.c:17160)
            ID: name='CC2420TransmitP__S_LOAD' (at pp.c:17160)
          Assignment: op='=' (at pp.c:17161)
            ID: name='CC2420TransmitP__m_cca' (at pp.c:17161)
            ID: name='cca' (at pp.c:17161)
          Assignment: op='=' (at pp.c:17162)
            ID: name='CC2420TransmitP__m_msg' (at pp.c:17162)
            ID: name='p_msg' (at pp.c:17162)
          Assignment: op='=' (at pp.c:17163)
            ID: name='CC2420TransmitP__totalCcaChecks' (at pp.c:17163)
            Constant: type='int', value='0' (at pp.c:17163)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17166)
          ExprList:  (at pp.c:17166)
            ID: name='__nesc_atomic' (at pp.c:17166)
      If:  (at pp.c:17168)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__acquireSpiResource' (at pp.c:17168)
          ID: name='SUCCESS' (at pp.c:17168)
        Compound:  (at pp.c:17168)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__loadTXFIFO' (at pp.c:17169)
      Return:  (at pp.c:17172)
        ID: name='SUCCESS' (at pp.c:17172)
  FuncDef:  (at pp.c:17176)
    Decl: name='CC2420TransmitP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:17176)
      FuncDecl: quals=None (at pp.c:17176)
        ParamList:  (at pp.c:17176)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:17176)
            PtrDecl: quals=[] (at pp.c:17176)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:17176)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='useCca', quals=[], storage=[] (at pp.c:17176)
            TypeDecl: declname='useCca', quals=[] (at pp.c:17176)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='CC2420TransmitP__Send__send', quals=[] (at pp.c:17176)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17178)
      Return:  (at pp.c:17179)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__send' (at pp.c:17179)
          ExprList:  (at pp.c:17179)
            ID: name='p_msg' (at pp.c:17179)
            ID: name='useCca' (at pp.c:17179)
  FuncDef:  (at pp.c:17183)
    Decl: name='CC2420CsmaP__CC2420Transmit__send', quals=[], storage=['static', 'inline'] (at pp.c:17183)
      FuncDecl: quals=None (at pp.c:17183)
        ParamList:  (at pp.c:17183)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:17183)
            PtrDecl: quals=[] (at pp.c:17183)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:17183)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='useCca', quals=[], storage=[] (at pp.c:17183)
            TypeDecl: declname='useCca', quals=[] (at pp.c:17183)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Transmit__send', quals=[] (at pp.c:17183)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17183)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17185)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17185)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17189)
        ID: name='__nesc_result' (at pp.c:17189)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__Send__send' (at pp.c:17189)
          ExprList:  (at pp.c:17189)
            ID: name='p_msg' (at pp.c:17189)
            ID: name='useCca' (at pp.c:17189)
      Return:  (at pp.c:17193)
        ID: name='__nesc_result' (at pp.c:17193)
  FuncDef:  (at pp.c:17198)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:17198)
      FuncDecl: quals=None (at pp.c:17198)
        ParamList:  (at pp.c:17198)
          Decl: name='id', quals=[], storage=[] (at pp.c:17198)
            TypeDecl: declname='id', quals=[] (at pp.c:17198)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17199)
            PtrDecl: quals=[] (at pp.c:17199)
              TypeDecl: declname='msg', quals=[] (at pp.c:17199)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__default__requestCca', quals=[] (at pp.c:17198)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17201)
  FuncDef:  (at pp.c:17205)
    Decl: name='CC2420ActiveMessageP__RadioBackoff__requestCca', quals=[], storage=['static', 'inline'] (at pp.c:17205)
      FuncDecl: quals=None (at pp.c:17205)
        ParamList:  (at pp.c:17205)
          Decl: name='arg_0x102a97d60', quals=[], storage=[] (at pp.c:17205)
            TypeDecl: declname='arg_0x102a97d60', quals=[] (at pp.c:17205)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17205)
            PtrDecl: quals=[] (at pp.c:17205)
              TypeDecl: declname='msg', quals=[] (at pp.c:17205)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioBackoff__requestCca', quals=[] (at pp.c:17205)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17205)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__default__requestCca' (at pp.c:17207)
        ExprList:  (at pp.c:17207)
          ID: name='arg_0x102a97d60' (at pp.c:17207)
          ID: name='msg' (at pp.c:17207)
  FuncDef:  (at pp.c:17212)
    Decl: name='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:17212)
      FuncDecl: quals=None (at pp.c:17212)
        ParamList:  (at pp.c:17212)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17212)
            PtrDecl: quals=[] (at pp.c:17212)
              TypeDecl: declname='msg', quals=[] (at pp.c:17212)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubBackoff__requestCca', quals=[] (at pp.c:17212)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17214)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioBackoff__requestCca' (at pp.c:17216)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint8' (at pp.c:17216)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:17216)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['cc2420_header_t'] (at None)
                    BinaryOp: op='-' (at None)
                      BinaryOp: op='+' (at None)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            PtrDecl: quals=[] (at pp.c:17216)
                              TypeDecl: declname=None, quals=[] (at None)
                                IdentifierType: names=['uint8_t'] (at None)
                          ID: name='msg' (at pp.c:17216)
                        Cast:  (at None)
                          Typename: quals=[] (at None)
                            TypeDecl: declname=None, quals=[] (at None)
                              IdentifierType: names=['size_t'] (at None)
                          UnaryOp: op='&' (at None)
                            StructRef: type='->' (at None)
                              Cast:  (at None)
                                Typename: quals=[] (at None)
                                  PtrDecl: quals=[] (at pp.c:17216)
                                    TypeDecl: declname=None, quals=[] (at None)
                                      IdentifierType: names=['message_t'] (at None)
                                Constant: type='int', value='0' (at pp.c:17216)
                              ID: name='data' (at pp.c:17216)
                      UnaryOp: op='sizeof' (at pp.c:17216)
                        Typename: quals=[] (at None)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['cc2420_header_t'] (at None)
                  ID: name='type' (at pp.c:17216)
                ID: name='nxdata' (at pp.c:17216)
          ID: name='msg' (at pp.c:17216)
  FuncDef:  (at pp.c:17220)
    Decl: name='DefaultLplP__RadioBackoff__requestCca', quals=[], storage=['inline', 'static'] (at pp.c:17220)
      FuncDecl: quals=None (at pp.c:17220)
        ParamList:  (at pp.c:17220)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17220)
            PtrDecl: quals=[] (at pp.c:17220)
              TypeDecl: declname='msg', quals=[] (at pp.c:17220)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioBackoff__requestCca', quals=[] (at pp.c:17220)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17222)
  FuncDef:  (at pp.c:17226)
    Decl: name='CC2420CsmaP__RadioBackoff__requestCca', quals=[], storage=['static', 'inline'] (at pp.c:17226)
      FuncDecl: quals=None (at pp.c:17226)
        ParamList:  (at pp.c:17226)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17226)
            PtrDecl: quals=[] (at pp.c:17226)
              TypeDecl: declname='msg', quals=[] (at pp.c:17226)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__RadioBackoff__requestCca', quals=[] (at pp.c:17226)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17226)
      FuncCall:  (at None)
        ID: name='DefaultLplP__RadioBackoff__requestCca' (at pp.c:17228)
        ExprList:  (at pp.c:17228)
          ID: name='msg' (at pp.c:17228)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SubBackoff__requestCca' (at pp.c:17230)
        ExprList:  (at pp.c:17230)
          ID: name='msg' (at pp.c:17230)
  FuncDef:  (at pp.c:17235)
    Decl: name='CC2420CsmaP__SplitControlState__forceState', quals=[], storage=['static', 'inline'] (at pp.c:17235)
      FuncDecl: quals=None (at pp.c:17235)
        ParamList:  (at pp.c:17235)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:17235)
            TypeDecl: declname='reqState', quals=[] (at pp.c:17235)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControlState__forceState', quals=[] (at pp.c:17235)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17235)
      FuncCall:  (at None)
        ID: name='StateImplP__State__forceState' (at pp.c:17237)
        ExprList:  (at pp.c:17237)
          Constant: type='int', value='1U' (at pp.c:17237)
          ID: name='reqState' (at pp.c:17237)
  FuncDef:  (at pp.c:17242)
    Decl: name='CC2420CsmaP__SplitControlState__isState', quals=[], storage=['static', 'inline'] (at pp.c:17242)
      FuncDecl: quals=None (at pp.c:17242)
        ParamList:  (at pp.c:17242)
          Decl: name='myState', quals=[], storage=[] (at pp.c:17242)
            TypeDecl: declname='myState', quals=[] (at pp.c:17242)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControlState__isState', quals=[] (at pp.c:17242)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:17242)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17244)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17244)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17248)
        ID: name='__nesc_result' (at pp.c:17248)
        FuncCall:  (at None)
          ID: name='StateImplP__State__isState' (at pp.c:17248)
          ExprList:  (at pp.c:17248)
            Constant: type='int', value='1U' (at pp.c:17248)
            ID: name='myState' (at pp.c:17248)
      Return:  (at pp.c:17252)
        ID: name='__nesc_result' (at pp.c:17252)
  FuncDef:  (at pp.c:17257)
    Decl: name='CC2420CsmaP__CC2420PacketBody__getMetadata', quals=[], storage=['static', 'inline'] (at pp.c:17257)
      FuncDecl: quals=None (at pp.c:17257)
        ParamList:  (at pp.c:17257)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17257)
            PtrDecl: quals=[] (at pp.c:17257)
              TypeDecl: declname='msg', quals=[] (at pp.c:17257)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17257)
          TypeDecl: declname='CC2420CsmaP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:17257)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:17257)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17259)
        PtrDecl: quals=[] (at pp.c:17259)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17259)
            Struct: name='cc2420_metadata_t', packed=False (at pp.c:17259)
      Assignment: op='=' (at pp.c:17263)
        ID: name='__nesc_result' (at pp.c:17263)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:17263)
          ExprList:  (at pp.c:17263)
            ID: name='msg' (at pp.c:17263)
      Return:  (at pp.c:17267)
        ID: name='__nesc_result' (at pp.c:17267)
  FuncDef:  (at pp.c:17272)
    Decl: name='CC2420CsmaP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:17272)
      FuncDecl: quals=None (at pp.c:17272)
        ParamList:  (at pp.c:17272)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17272)
            PtrDecl: quals=[] (at pp.c:17272)
              TypeDecl: declname='msg', quals=[] (at pp.c:17272)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17272)
          TypeDecl: declname='CC2420CsmaP__CC2420PacketBody__getHeader', quals=[] (at pp.c:17272)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:17272)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17274)
        PtrDecl: quals=[] (at pp.c:17274)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17274)
            Struct: name='cc2420_header_t', packed=False (at pp.c:17274)
      Assignment: op='=' (at pp.c:17278)
        ID: name='__nesc_result' (at pp.c:17278)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:17278)
          ExprList:  (at pp.c:17278)
            ID: name='msg' (at pp.c:17278)
      Return:  (at pp.c:17282)
        ID: name='__nesc_result' (at pp.c:17282)
  FuncDef:  (at pp.c:17287)
    Decl: name='CC2420CsmaP__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:17287)
      FuncDecl: quals=None (at pp.c:17287)
        ParamList:  (at pp.c:17287)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:17287)
            PtrDecl: quals=[] (at pp.c:17287)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:17287)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17287)
            TypeDecl: declname='len', quals=[] (at pp.c:17287)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__Send__send', quals=[] (at pp.c:17287)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17289)
      Decl: name='__nesc_temp43', quals=[], storage=[] (at pp.c:17290)
        PtrDecl: quals=[] (at pp.c:17290)
          TypeDecl: declname='__nesc_temp43', quals=[] (at pp.c:17290)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='__nesc_temp42', quals=[], storage=[] (at pp.c:17291)
        PtrDecl: quals=[] (at pp.c:17291)
          TypeDecl: declname='__nesc_temp42', quals=[] (at pp.c:17291)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='header', quals=[], storage=[] (at pp.c:17293)
        PtrDecl: quals=[] (at pp.c:17293)
          TypeDecl: declname='header', quals=[] (at pp.c:17293)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__CC2420PacketBody__getHeader' (at pp.c:17293)
          ExprList:  (at pp.c:17293)
            ID: name='p_msg' (at pp.c:17293)
      Decl: name='metadata', quals=[], storage=[] (at pp.c:17294)
        PtrDecl: quals=[] (at pp.c:17294)
          TypeDecl: declname='metadata', quals=[] (at pp.c:17294)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__CC2420PacketBody__getMetadata' (at pp.c:17294)
          ExprList:  (at pp.c:17294)
            ID: name='p_msg' (at pp.c:17294)
      Compound:  (at pp.c:17296)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17296)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17296)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17296)
        Compound:  (at pp.c:17298)
          If:  (at pp.c:17299)
            UnaryOp: op='!' (at None)
              FuncCall:  (at None)
                ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:17299)
                ExprList:  (at pp.c:17299)
                  ID: name='CC2420CsmaP__S_STARTED' (at pp.c:17299)
            Compound:  (at pp.c:17299)
              Compound:  (at pp.c:17300)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17301)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17301)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:17303)
                Compound:  (at pp.c:17305)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17307)
                    ExprList:  (at pp.c:17307)
                      ID: name='__nesc_atomic' (at pp.c:17307)
                  Return:  (at pp.c:17309)
                    ID: name='__nesc_temp' (at pp.c:17309)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:17314)
            ExprList:  (at pp.c:17314)
              ID: name='CC2420CsmaP__S_TRANSMITTING' (at pp.c:17314)
          Assignment: op='=' (at pp.c:17315)
            ID: name='CC2420CsmaP__m_msg' (at pp.c:17315)
            ID: name='p_msg' (at pp.c:17315)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17318)
          ExprList:  (at pp.c:17318)
            ID: name='__nesc_atomic' (at pp.c:17318)
      ExprList:  (at pp.c:17327)
        Assignment: op='=' (at pp.c:17327)
          ID: name='__nesc_temp42' (at pp.c:17327)
          StructRef: type='.' (at pp.c:17327)
            StructRef: type='->' (at pp.c:17327)
              ID: name='header' (at pp.c:17327)
              ID: name='fcf' (at pp.c:17327)
            ID: name='nxdata' (at pp.c:17327)
        FuncCall:  (at None)
          ID: name='__nesc_hton_leuint16' (at pp.c:17327)
          ExprList:  (at pp.c:17327)
            ID: name='__nesc_temp42' (at pp.c:17327)
            BinaryOp: op='&' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:17327)
                ExprList:  (at pp.c:17327)
                  ID: name='__nesc_temp42' (at pp.c:17327)
              BinaryOp: op='|' (at pp.c:17327)
                BinaryOp: op='|' (at pp.c:17327)
                  BinaryOp: op='<<' (at pp.c:17327)
                    Constant: type='int', value='1' (at pp.c:17327)
                    ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:17327)
                  BinaryOp: op='<<' (at pp.c:17328)
                    Constant: type='int', value='0x3' (at pp.c:17328)
                    ID: name='IEEE154_FCF_SRC_ADDR_MODE' (at pp.c:17328)
                BinaryOp: op='<<' (at pp.c:17329)
                  Constant: type='int', value='0x3' (at pp.c:17329)
                  ID: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:17329)
      ExprList:  (at pp.c:17331)
        Assignment: op='=' (at pp.c:17331)
          ID: name='__nesc_temp43' (at pp.c:17331)
          StructRef: type='.' (at pp.c:17331)
            StructRef: type='->' (at pp.c:17331)
              ID: name='header' (at pp.c:17331)
              ID: name='fcf' (at pp.c:17331)
            ID: name='nxdata' (at pp.c:17331)
        FuncCall:  (at None)
          ID: name='__nesc_hton_leuint16' (at pp.c:17331)
          ExprList:  (at pp.c:17331)
            ID: name='__nesc_temp43' (at pp.c:17331)
            BinaryOp: op='|' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:17331)
                ExprList:  (at pp.c:17331)
                  ID: name='__nesc_temp43' (at pp.c:17331)
              BinaryOp: op='|' (at pp.c:17331)
                BinaryOp: op='<<' (at pp.c:17331)
                  ID: name='IEEE154_TYPE_DATA' (at pp.c:17331)
                  ID: name='IEEE154_FCF_FRAME_TYPE' (at pp.c:17331)
                BinaryOp: op='<<' (at pp.c:17332)
                  Constant: type='int', value='1' (at pp.c:17332)
                  ID: name='IEEE154_FCF_INTRAPAN' (at pp.c:17332)
      FuncCall:  (at None)
        ID: name='__nesc_hton_int8' (at pp.c:17334)
        ExprList:  (at pp.c:17334)
          StructRef: type='.' (at pp.c:17334)
            StructRef: type='->' (at pp.c:17334)
              ID: name='metadata' (at pp.c:17334)
              ID: name='ack' (at pp.c:17334)
            ID: name='nxdata' (at pp.c:17334)
          ID: name='FALSE' (at pp.c:17334)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:17335)
        ExprList:  (at pp.c:17335)
          StructRef: type='.' (at pp.c:17335)
            StructRef: type='->' (at pp.c:17335)
              ID: name='metadata' (at pp.c:17335)
              ID: name='rssi' (at pp.c:17335)
            ID: name='nxdata' (at pp.c:17335)
          Constant: type='int', value='0' (at pp.c:17335)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:17336)
        ExprList:  (at pp.c:17336)
          StructRef: type='.' (at pp.c:17336)
            StructRef: type='->' (at pp.c:17336)
              ID: name='metadata' (at pp.c:17336)
              ID: name='lqi' (at pp.c:17336)
            ID: name='nxdata' (at pp.c:17336)
          Constant: type='int', value='0' (at pp.c:17336)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint32' (at pp.c:17338)
        ExprList:  (at pp.c:17338)
          StructRef: type='.' (at pp.c:17338)
            StructRef: type='->' (at pp.c:17338)
              ID: name='metadata' (at pp.c:17338)
              ID: name='timestamp' (at pp.c:17338)
            ID: name='nxdata' (at pp.c:17338)
          ID: name='CC2420_INVALID_TIMESTAMP' (at pp.c:17338)
      Assignment: op='=' (at pp.c:17340)
        ID: name='CC2420CsmaP__ccaOn' (at pp.c:17340)
        ID: name='TRUE' (at pp.c:17340)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__RadioBackoff__requestCca' (at pp.c:17341)
        ExprList:  (at pp.c:17341)
          ID: name='CC2420CsmaP__m_msg' (at pp.c:17341)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Transmit__send' (at pp.c:17343)
        ExprList:  (at pp.c:17343)
          ID: name='CC2420CsmaP__m_msg' (at pp.c:17343)
          ID: name='CC2420CsmaP__ccaOn' (at pp.c:17343)
      Return:  (at pp.c:17344)
        ID: name='SUCCESS' (at pp.c:17344)
  FuncDef:  (at pp.c:17348)
    Decl: name='DefaultLplP__SubSend__send', quals=[], storage=['static', 'inline'] (at pp.c:17348)
      FuncDecl: quals=None (at pp.c:17348)
        ParamList:  (at pp.c:17348)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17348)
            PtrDecl: quals=[] (at pp.c:17348)
              TypeDecl: declname='msg', quals=[] (at pp.c:17348)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17348)
            TypeDecl: declname='len', quals=[] (at pp.c:17348)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DefaultLplP__SubSend__send', quals=[] (at pp.c:17348)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17348)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17350)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17350)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17354)
        ID: name='__nesc_result' (at pp.c:17354)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__Send__send' (at pp.c:17354)
          ExprList:  (at pp.c:17354)
            ID: name='msg' (at pp.c:17354)
            ID: name='len' (at pp.c:17354)
      Return:  (at pp.c:17358)
        ID: name='__nesc_result' (at pp.c:17358)
  FuncDef:  (at pp.c:17363)
    Decl: name='DefaultLplP__send__runTask', quals=[], storage=['inline', 'static'] (at pp.c:17363)
      FuncDecl: quals=None (at pp.c:17363)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__send__runTask', quals=[] (at pp.c:17363)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17365)
      If:  (at pp.c:17366)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SubSend__send' (at pp.c:17366)
            ExprList:  (at pp.c:17366)
              ID: name='DefaultLplP__currentSendMsg' (at pp.c:17366)
              ID: name='DefaultLplP__currentSendLen' (at pp.c:17366)
          ID: name='SUCCESS' (at pp.c:17366)
        Compound:  (at pp.c:17366)
          FuncCall:  (at None)
            ID: name='DefaultLplP__send__postTask' (at pp.c:17367)
  FuncDef:  (at pp.c:17372)
    Decl: name='CC2420TransmitP__TXCTRL__write', quals=[], storage=['static', 'inline'] (at pp.c:17372)
      FuncDecl: quals=None (at pp.c:17372)
        ParamList:  (at pp.c:17372)
          Decl: name='data', quals=[], storage=[] (at pp.c:17372)
            TypeDecl: declname='data', quals=[] (at pp.c:17372)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__TXCTRL__write', quals=[] (at pp.c:17372)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:17372)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17374)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17374)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17378)
        ID: name='__nesc_result' (at pp.c:17378)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:17378)
          ExprList:  (at pp.c:17378)
            ID: name='CC2420_TXCTRL' (at pp.c:17378)
            ID: name='data' (at pp.c:17378)
      Return:  (at pp.c:17382)
        ID: name='__nesc_result' (at pp.c:17382)
  FuncDef:  (at pp.c:17387)
    Decl: name='CC2420SpiP__SpiPacket__send', quals=[], storage=['static', 'inline'] (at pp.c:17387)
      FuncDecl: quals=None (at pp.c:17387)
        ParamList:  (at pp.c:17387)
          Decl: name='txBuf', quals=[], storage=[] (at pp.c:17387)
            PtrDecl: quals=[] (at pp.c:17387)
              TypeDecl: declname='txBuf', quals=[] (at pp.c:17387)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rxBuf', quals=[], storage=[] (at pp.c:17387)
            PtrDecl: quals=[] (at pp.c:17387)
              TypeDecl: declname='rxBuf', quals=[] (at pp.c:17387)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17387)
            TypeDecl: declname='len', quals=[] (at pp.c:17387)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiPacket__send', quals=[] (at pp.c:17387)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17387)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17389)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17389)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17393)
        ID: name='__nesc_result' (at pp.c:17393)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__SpiPacket__send' (at pp.c:17393)
          ExprList:  (at pp.c:17393)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:17393)
            ID: name='txBuf' (at pp.c:17393)
            ID: name='rxBuf' (at pp.c:17393)
            ID: name='len' (at pp.c:17393)
      Return:  (at pp.c:17397)
        ID: name='__nesc_result' (at pp.c:17397)
  FuncDef:  (at pp.c:17402)
    Decl: name='CC2420SpiP__SpiByte__write', quals=[], storage=['static', 'inline'] (at pp.c:17402)
      FuncDecl: quals=None (at pp.c:17402)
        ParamList:  (at pp.c:17402)
          Decl: name='tx', quals=[], storage=[] (at pp.c:17402)
            TypeDecl: declname='tx', quals=[] (at pp.c:17402)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiByte__write', quals=[] (at pp.c:17402)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:17402)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17404)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17404)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17408)
        ID: name='__nesc_result' (at pp.c:17408)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__SpiByte__write' (at pp.c:17408)
          ExprList:  (at pp.c:17408)
            ID: name='tx' (at pp.c:17408)
      Return:  (at pp.c:17412)
        ID: name='__nesc_result' (at pp.c:17412)
  FuncDef:  (at pp.c:17417)
    Decl: name='CC2420SpiP__WorkingState__isIdle', quals=[], storage=['static', 'inline'] (at pp.c:17417)
      FuncDecl: quals=None (at pp.c:17417)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__WorkingState__isIdle', quals=[] (at pp.c:17417)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:17417)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17419)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17419)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17423)
        ID: name='__nesc_result' (at pp.c:17423)
        FuncCall:  (at None)
          ID: name='StateImplP__State__isIdle' (at pp.c:17423)
          ExprList:  (at pp.c:17423)
            Constant: type='int', value='0U' (at pp.c:17423)
      Return:  (at pp.c:17427)
        ID: name='__nesc_result' (at pp.c:17427)
  FuncDef:  (at pp.c:17432)
    Decl: name='CC2420SpiP__Fifo__write', quals=[], storage=['inline', 'static'] (at pp.c:17432)
      FuncDecl: quals=None (at pp.c:17432)
        ParamList:  (at pp.c:17432)
          Decl: name='addr', quals=[], storage=[] (at pp.c:17432)
            TypeDecl: declname='addr', quals=[] (at pp.c:17432)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:17432)
            PtrDecl: quals=[] (at pp.c:17432)
              TypeDecl: declname='data', quals=[] (at pp.c:17432)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17433)
            TypeDecl: declname='len', quals=[] (at pp.c:17433)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__write', quals=[] (at pp.c:17432)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:17435)
      Decl: name='status', quals=[], storage=[] (at pp.c:17437)
        TypeDecl: declname='status', quals=[] (at pp.c:17437)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:17437)
      Compound:  (at pp.c:17439)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17439)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17439)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17439)
        Compound:  (at pp.c:17441)
          If:  (at pp.c:17442)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:17442)
            Compound:  (at pp.c:17442)
              Compound:  (at pp.c:17443)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17444)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17444)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='status' (at pp.c:17446)
                Compound:  (at pp.c:17448)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17450)
                    ExprList:  (at pp.c:17450)
                      ID: name='__nesc_atomic' (at pp.c:17450)
                  Return:  (at pp.c:17452)
                    ID: name='__nesc_temp' (at pp.c:17452)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17458)
          ExprList:  (at pp.c:17458)
            ID: name='__nesc_atomic' (at pp.c:17458)
      Assignment: op='=' (at pp.c:17460)
        ID: name='CC2420SpiP__m_addr' (at pp.c:17460)
        ID: name='addr' (at pp.c:17460)
      Assignment: op='=' (at pp.c:17462)
        ID: name='status' (at pp.c:17462)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:17462)
          ExprList:  (at pp.c:17462)
            ID: name='CC2420SpiP__m_addr' (at pp.c:17462)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__SpiPacket__send' (at pp.c:17463)
        ExprList:  (at pp.c:17463)
          ID: name='data' (at pp.c:17463)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:17463)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['void'] (at None)
            Constant: type='int', value='0' (at pp.c:17463)
          ID: name='len' (at pp.c:17463)
      Return:  (at pp.c:17465)
        ID: name='status' (at pp.c:17465)
  FuncDef:  (at pp.c:17469)
    Decl: name='CC2420TransmitP__TXFIFO__write', quals=[], storage=['static', 'inline'] (at pp.c:17469)
      FuncDecl: quals=None (at pp.c:17469)
        ParamList:  (at pp.c:17469)
          Decl: name='data', quals=[], storage=[] (at pp.c:17469)
            PtrDecl: quals=[] (at pp.c:17469)
              TypeDecl: declname='data', quals=[] (at pp.c:17469)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:17469)
            TypeDecl: declname='length', quals=[] (at pp.c:17469)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__TXFIFO__write', quals=[] (at pp.c:17469)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:17469)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17471)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17471)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17475)
        ID: name='__nesc_result' (at pp.c:17475)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Fifo__write' (at pp.c:17475)
          ExprList:  (at pp.c:17475)
            ID: name='CC2420_TXFIFO' (at pp.c:17475)
            ID: name='data' (at pp.c:17475)
            ID: name='length' (at pp.c:17475)
      Return:  (at pp.c:17479)
        ID: name='__nesc_result' (at pp.c:17479)
  FuncDef:  (at pp.c:17484)
    Decl: name='HplMsp430Usart0P__Usart__enableRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:17484)
      FuncDecl: quals=None (at pp.c:17484)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__enableRxIntr', quals=[] (at pp.c:17484)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17486)
      Compound:  (at pp.c:17487)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17487)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17487)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17487)
        Compound:  (at pp.c:17489)
          Assignment: op='&=' (at pp.c:17490)
            ID: name='HplMsp430Usart0P__IFG1' (at pp.c:17490)
            UnaryOp: op='~' (at pp.c:17490)
              BinaryOp: op='<<' (at pp.c:17490)
                Constant: type='int', value='1' (at pp.c:17490)
                Constant: type='int', value='6' (at pp.c:17490)
          Assignment: op='|=' (at pp.c:17491)
            ID: name='HplMsp430Usart0P__IE1' (at pp.c:17491)
            BinaryOp: op='<<' (at pp.c:17491)
              Constant: type='int', value='1' (at pp.c:17491)
              Constant: type='int', value='6' (at pp.c:17491)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17494)
          ExprList:  (at pp.c:17494)
            ID: name='__nesc_atomic' (at pp.c:17494)
  FuncDef:  (at pp.c:17498)
    Decl: name='Msp430SpiNoDmaP__0__Usart__enableRxIntr', quals=[], storage=['static', 'inline'] (at pp.c:17498)
      FuncDecl: quals=None (at pp.c:17498)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__enableRxIntr', quals=[] (at pp.c:17498)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17498)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__enableRxIntr' (at pp.c:17500)
  FuncDef:  (at pp.c:17505)
    Decl: name='Msp430SpiNoDmaP__0__signalDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:17505)
      FuncDecl: quals=None (at pp.c:17505)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone_task__postTask', quals=[] (at pp.c:17505)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17505)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17507)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17507)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17511)
        ID: name='__nesc_result' (at pp.c:17511)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:17511)
          ExprList:  (at pp.c:17511)
            ID: name='Msp430SpiNoDmaP__0__signalDone_task' (at pp.c:17511)
      Return:  (at pp.c:17515)
        ID: name='__nesc_result' (at pp.c:17515)
  FuncDef:  (at pp.c:17520)
    Decl: name='CC2420TinyosNetworkP__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:17520)
      FuncDecl: quals=None (at pp.c:17520)
        ParamList:  (at pp.c:17520)
          Decl: name='id', quals=[], storage=[] (at pp.c:17520)
            TypeDecl: declname='id', quals=[] (at pp.c:17520)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Resource__release', quals=[] (at pp.c:17520)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:17522)
      If:  (at pp.c:17523)
        BinaryOp: op='>' (at pp.c:17523)
          ID: name='CC2420TinyosNetworkP__TINYOS_N_NETWORKS' (at pp.c:17523)
          Constant: type='int', value='1' (at pp.c:17523)
        Compound:  (at pp.c:17523)
          FuncCall:  (at None)
            ID: name='CC2420TinyosNetworkP__grantTask__postTask' (at pp.c:17524)
      Assignment: op='=' (at pp.c:17526)
        ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:17526)
        ID: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:17526)
      Return:  (at pp.c:17527)
        ID: name='SUCCESS' (at pp.c:17527)
  FuncDef:  (at pp.c:17531)
    Decl: name='CC2420TinyosNetworkP__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:17531)
      FuncDecl: quals=None (at pp.c:17531)
        ParamList:  (at pp.c:17531)
          Decl: name='client', quals=[], storage=[] (at pp.c:17531)
            TypeDecl: declname='client', quals=[] (at pp.c:17531)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Resource__default__granted', quals=[] (at pp.c:17531)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17533)
      FuncCall:  (at None)
        ID: name='CC2420TinyosNetworkP__Resource__release' (at pp.c:17534)
        ExprList:  (at pp.c:17534)
          ID: name='client' (at pp.c:17534)
  FuncDef:  (at pp.c:17538)
    Decl: name='CC2420TinyosNetworkP__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:17538)
      FuncDecl: quals=None (at pp.c:17538)
        ParamList:  (at pp.c:17538)
          Decl: name='arg_0x102904060', quals=[], storage=[] (at pp.c:17538)
            TypeDecl: declname='arg_0x102904060', quals=[] (at pp.c:17538)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Resource__granted', quals=[] (at pp.c:17538)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17538)
      Switch:  (at pp.c:17540)
        ID: name='arg_0x102904060' (at pp.c:17540)
        Compound:  (at pp.c:17540)
          Case:  (at pp.c:17542)
            ID: name='CC2420ActiveMessageC__CC2420_AM_SEND_ID' (at pp.c:17542)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__RadioResource__granted' (at pp.c:17544)
          Break:  (at pp.c:17546)
          Default:  (at pp.c:17548)
            FuncCall:  (at None)
              ID: name='CC2420TinyosNetworkP__Resource__default__granted' (at pp.c:17550)
              ExprList:  (at pp.c:17550)
                ID: name='arg_0x102904060' (at pp.c:17550)
          Break:  (at pp.c:17552)
  FuncDef:  (at pp.c:17559)
    Decl: name='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:17559)
      FuncDecl: quals=None (at pp.c:17559)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__dequeue', quals=[] (at pp.c:17559)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:17561)
      Compound:  (at pp.c:17562)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17562)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17562)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17562)
        Compound:  (at pp.c:17564)
          If:  (at pp.c:17565)
            BinaryOp: op='!=' (at pp.c:17565)
              ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:17565)
              ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:17565)
            Compound:  (at pp.c:17565)
              Decl: name='id', quals=[], storage=[] (at pp.c:17566)
                TypeDecl: declname='id', quals=[] (at pp.c:17566)
                  IdentifierType: names=['uint8_t'] (at None)
                ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:17566)
              Assignment: op='=' (at pp.c:17569)
                ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:17569)
                ArrayRef:  (at pp.c:17569)
                  ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:17569)
                  ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:17569)
              If:  (at pp.c:17570)
                BinaryOp: op='==' (at pp.c:17570)
                  ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:17570)
                  ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:17570)
                Compound:  (at pp.c:17570)
                  Assignment: op='=' (at pp.c:17571)
                    ID: name='FcfsResourceQueueC__0__qTail' (at pp.c:17571)
                    ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:17571)
              Assignment: op='=' (at pp.c:17574)
                ArrayRef:  (at pp.c:17574)
                  ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:17574)
                  ID: name='id' (at pp.c:17574)
                ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:17574)
              Compound:  (at pp.c:17575)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17576)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17576)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='id' (at pp.c:17578)
                Compound:  (at pp.c:17580)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:17582)
                    ExprList:  (at pp.c:17582)
                      ID: name='__nesc_atomic' (at pp.c:17582)
                  Return:  (at pp.c:17584)
                    ID: name='__nesc_temp' (at pp.c:17584)
          Compound:  (at pp.c:17589)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17590)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17590)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:17592)
            Compound:  (at pp.c:17594)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_end' (at pp.c:17596)
                ExprList:  (at pp.c:17596)
                  ID: name='__nesc_atomic' (at pp.c:17596)
              Return:  (at pp.c:17598)
                ID: name='__nesc_temp' (at pp.c:17598)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17603)
          ExprList:  (at pp.c:17603)
            ID: name='__nesc_atomic' (at pp.c:17603)
  FuncDef:  (at pp.c:17607)
    Decl: name='CC2420TinyosNetworkP__Queue__dequeue', quals=[], storage=['static', 'inline'] (at pp.c:17607)
      FuncDecl: quals=None (at pp.c:17607)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__Queue__dequeue', quals=[] (at pp.c:17607)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:17607)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17609)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17609)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17613)
        ID: name='__nesc_result' (at pp.c:17613)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__0__FcfsQueue__dequeue' (at pp.c:17613)
      Return:  (at pp.c:17617)
        ID: name='__nesc_result' (at pp.c:17617)
  FuncDef:  (at pp.c:17622)
    Decl: name='CC2420TinyosNetworkP__grantTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:17622)
      FuncDecl: quals=None (at pp.c:17622)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__grantTask__runTask', quals=[] (at pp.c:17622)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17624)
      If:  (at pp.c:17627)
        BinaryOp: op='>' (at pp.c:17627)
          ID: name='CC2420TinyosNetworkP__TINYOS_N_NETWORKS' (at pp.c:17627)
          Constant: type='int', value='1' (at pp.c:17627)
        Compound:  (at pp.c:17627)
          If:  (at pp.c:17628)
            BinaryOp: op='&&' (at pp.c:17628)
              BinaryOp: op='==' (at pp.c:17628)
                ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:17628)
                ID: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:17628)
              UnaryOp: op='!' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420TinyosNetworkP__Queue__isEmpty' (at pp.c:17628)
            Compound:  (at pp.c:17628)
              Assignment: op='=' (at pp.c:17629)
                ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:17629)
                FuncCall:  (at None)
                  ID: name='CC2420TinyosNetworkP__Queue__dequeue' (at pp.c:17629)
              If:  (at pp.c:17631)
                BinaryOp: op='!=' (at pp.c:17631)
                  ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:17631)
                  ID: name='CC2420TinyosNetworkP__OWNER_NONE' (at pp.c:17631)
                Compound:  (at pp.c:17631)
                  FuncCall:  (at None)
                    ID: name='CC2420TinyosNetworkP__Resource__granted' (at pp.c:17632)
                    ExprList:  (at pp.c:17632)
                      ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:17632)
        Compound:  (at pp.c:17638)
          If:  (at pp.c:17639)
            BinaryOp: op='!=' (at pp.c:17639)
              ID: name='CC2420TinyosNetworkP__next_owner' (at pp.c:17639)
              ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:17639)
            Compound:  (at pp.c:17639)
              Assignment: op='=' (at pp.c:17640)
                ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:17640)
                ID: name='CC2420TinyosNetworkP__next_owner' (at pp.c:17640)
              FuncCall:  (at None)
                ID: name='CC2420TinyosNetworkP__Resource__granted' (at pp.c:17641)
                ExprList:  (at pp.c:17641)
                  ID: name='CC2420TinyosNetworkP__resource_owner' (at pp.c:17641)
  FuncDef:  (at pp.c:17647)
    Decl: name='CC2420TinyosNetworkP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:17647)
      FuncDecl: quals=None (at pp.c:17647)
        ParamList:  (at pp.c:17647)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17647)
            PtrDecl: quals=[] (at pp.c:17647)
              TypeDecl: declname='msg', quals=[] (at pp.c:17647)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17647)
          TypeDecl: declname='CC2420TinyosNetworkP__CC2420PacketBody__getHeader', quals=[] (at pp.c:17647)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:17647)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17649)
        PtrDecl: quals=[] (at pp.c:17649)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17649)
            Struct: name='cc2420_header_t', packed=False (at pp.c:17649)
      Assignment: op='=' (at pp.c:17653)
        ID: name='__nesc_result' (at pp.c:17653)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:17653)
          ExprList:  (at pp.c:17653)
            ID: name='msg' (at pp.c:17653)
      Return:  (at pp.c:17657)
        ID: name='__nesc_result' (at pp.c:17657)
  FuncDef:  (at pp.c:17662)
    Decl: name='CC2420TinyosNetworkP__BareSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:17662)
      FuncDecl: quals=None (at pp.c:17662)
        ParamList:  (at pp.c:17662)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17662)
            PtrDecl: quals=[] (at pp.c:17662)
              TypeDecl: declname='msg', quals=[] (at pp.c:17662)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17662)
            TypeDecl: declname='len', quals=[] (at pp.c:17662)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17662)
          TypeDecl: declname='CC2420TinyosNetworkP__BareSend__getPayload', quals=[] (at pp.c:17662)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17664)
      Decl: name='hdr', quals=[], storage=[] (at pp.c:17666)
        PtrDecl: quals=[] (at pp.c:17666)
          TypeDecl: declname='hdr', quals=[] (at pp.c:17666)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__CC2420PacketBody__getHeader' (at pp.c:17666)
          ExprList:  (at pp.c:17666)
            ID: name='msg' (at pp.c:17666)
      Return:  (at pp.c:17669)
        ID: name='hdr' (at pp.c:17669)
  FuncDef:  (at pp.c:17673)
    Decl: name='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:17673)
      FuncDecl: quals=None (at pp.c:17673)
        ParamList:  (at pp.c:17673)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17673)
            PtrDecl: quals=[] (at pp.c:17673)
              TypeDecl: declname='msg', quals=[] (at pp.c:17673)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17673)
            PtrDecl: quals=[] (at pp.c:17673)
              TypeDecl: declname='payload', quals=[] (at pp.c:17673)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17673)
            TypeDecl: declname='len', quals=[] (at pp.c:17673)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17673)
          TypeDecl: declname='CC2420TinyosNetworkP__BareReceive__default__receive', quals=[] (at pp.c:17673)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17675)
      Return:  (at pp.c:17676)
        ID: name='msg' (at pp.c:17676)
  FuncDef:  (at pp.c:17680)
    Decl: name='CC2420TinyosNetworkP__BareReceive__receive', quals=[], storage=['static', 'inline'] (at pp.c:17680)
      FuncDecl: quals=None (at pp.c:17680)
        ParamList:  (at pp.c:17680)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17680)
            PtrDecl: quals=[] (at pp.c:17680)
              TypeDecl: declname='msg', quals=[] (at pp.c:17680)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17680)
            PtrDecl: quals=[] (at pp.c:17680)
              TypeDecl: declname='payload', quals=[] (at pp.c:17680)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17680)
            TypeDecl: declname='len', quals=[] (at pp.c:17680)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17680)
          TypeDecl: declname='CC2420TinyosNetworkP__BareReceive__receive', quals=[] (at pp.c:17680)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17680)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17682)
        PtrDecl: quals=[] (at pp.c:17682)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17682)
            Struct: name='message_t', packed=False (at pp.c:17682)
      Assignment: op='=' (at pp.c:17686)
        ID: name='__nesc_result' (at pp.c:17686)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__BareReceive__default__receive' (at pp.c:17686)
          ExprList:  (at pp.c:17686)
            ID: name='msg' (at pp.c:17686)
            ID: name='payload' (at pp.c:17686)
            ID: name='len' (at pp.c:17686)
      Return:  (at pp.c:17690)
        ID: name='__nesc_result' (at pp.c:17690)
  FuncDef:  (at pp.c:17695)
    Decl: name='CC2420ActiveMessageP__Snoop__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:17695)
      FuncDecl: quals=None (at pp.c:17695)
        ParamList:  (at pp.c:17695)
          Decl: name='id', quals=[], storage=[] (at pp.c:17695)
            TypeDecl: declname='id', quals=[] (at pp.c:17695)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17695)
            PtrDecl: quals=[] (at pp.c:17695)
              TypeDecl: declname='msg', quals=[] (at pp.c:17695)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17695)
            PtrDecl: quals=[] (at pp.c:17695)
              TypeDecl: declname='payload', quals=[] (at pp.c:17695)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17695)
            TypeDecl: declname='len', quals=[] (at pp.c:17695)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17695)
          TypeDecl: declname='CC2420ActiveMessageP__Snoop__default__receive', quals=[] (at pp.c:17695)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17697)
      Return:  (at pp.c:17698)
        ID: name='msg' (at pp.c:17698)
  FuncDef:  (at pp.c:17702)
    Decl: name='CC2420ActiveMessageP__Snoop__receive', quals=[], storage=['static', 'inline'] (at pp.c:17702)
      FuncDecl: quals=None (at pp.c:17702)
        ParamList:  (at pp.c:17702)
          Decl: name='arg_0x102a9a480', quals=[], storage=[] (at pp.c:17702)
            TypeDecl: declname='arg_0x102a9a480', quals=[] (at pp.c:17702)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17702)
            PtrDecl: quals=[] (at pp.c:17702)
              TypeDecl: declname='msg', quals=[] (at pp.c:17702)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17702)
            PtrDecl: quals=[] (at pp.c:17702)
              TypeDecl: declname='payload', quals=[] (at pp.c:17702)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17702)
            TypeDecl: declname='len', quals=[] (at pp.c:17702)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17702)
          TypeDecl: declname='CC2420ActiveMessageP__Snoop__receive', quals=[] (at pp.c:17702)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17702)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17704)
        PtrDecl: quals=[] (at pp.c:17704)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17704)
            Struct: name='message_t', packed=False (at pp.c:17704)
      Assignment: op='=' (at pp.c:17708)
        ID: name='__nesc_result' (at pp.c:17708)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__Snoop__default__receive' (at pp.c:17708)
          ExprList:  (at pp.c:17708)
            ID: name='arg_0x102a9a480' (at pp.c:17708)
            ID: name='msg' (at pp.c:17708)
            ID: name='payload' (at pp.c:17708)
            ID: name='len' (at pp.c:17708)
      Return:  (at pp.c:17712)
        ID: name='__nesc_result' (at pp.c:17712)
  FuncDef:  (at pp.c:17717)
    Decl: name='HplMsp430GeneralIOP__36__IO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:17717)
      FuncDecl: quals=None (at pp.c:17717)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__36__IO__toggle', quals=[] (at pp.c:17717)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17719)
      Compound:  (at pp.c:17721)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17721)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17721)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17721)
        Assignment: op='^=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:17723)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='49U' (at pp.c:17723)
          BinaryOp: op='<<' (at pp.c:17723)
            Constant: type='int', value='0x01' (at pp.c:17723)
            Constant: type='int', value='4' (at pp.c:17723)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17725)
          ExprList:  (at pp.c:17725)
            ID: name='__nesc_atomic' (at pp.c:17725)
  FuncDef:  (at pp.c:17729)
    Decl: name='Msp430GpioC__0__HplGeneralIO__toggle', quals=[], storage=['static', 'inline'] (at pp.c:17729)
      FuncDecl: quals=None (at pp.c:17729)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__HplGeneralIO__toggle', quals=[] (at pp.c:17729)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17729)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__36__IO__toggle' (at pp.c:17731)
  FuncDef:  (at pp.c:17736)
    Decl: name='Msp430GpioC__0__GeneralIO__toggle', quals=[], storage=['inline', 'static'] (at pp.c:17736)
      FuncDecl: quals=None (at pp.c:17736)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__0__GeneralIO__toggle', quals=[] (at pp.c:17736)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17738)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__HplGeneralIO__toggle' (at pp.c:17740)
  FuncDef:  (at pp.c:17744)
    Decl: name='LedsP__Led0__toggle', quals=[], storage=['static', 'inline'] (at pp.c:17744)
      FuncDecl: quals=None (at pp.c:17744)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led0__toggle', quals=[] (at pp.c:17744)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17744)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__0__GeneralIO__toggle' (at pp.c:17746)
  FuncDef:  (at pp.c:17751)
    Decl: name='LedsP__Leds__led0Toggle', quals=[], storage=['inline', 'static'] (at pp.c:17751)
      FuncDecl: quals=None (at pp.c:17751)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Leds__led0Toggle', quals=[] (at pp.c:17751)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17753)
      FuncCall:  (at None)
        ID: name='LedsP__Led0__toggle' (at pp.c:17754)
  FuncDef:  (at pp.c:17761)
    Decl: name='LowPowerSensingPeriodicSamplerC__Leds__led0Toggle', quals=[], storage=['static', 'inline'] (at pp.c:17761)
      FuncDecl: quals=None (at pp.c:17761)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Leds__led0Toggle', quals=[] (at pp.c:17761)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17761)
      FuncCall:  (at None)
        ID: name='LedsP__Leds__led0Toggle' (at pp.c:17763)
  FuncDef:  (at pp.c:17768)
    Decl: name='LowPowerSensingPeriodicSamplerC__RequestSamplesReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:17768)
      FuncDecl: quals=None (at pp.c:17768)
        ParamList:  (at pp.c:17768)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17768)
            PtrDecl: quals=[] (at pp.c:17768)
              TypeDecl: declname='msg', quals=[] (at pp.c:17768)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17768)
            PtrDecl: quals=[] (at pp.c:17768)
              TypeDecl: declname='payload', quals=[] (at pp.c:17768)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17768)
            TypeDecl: declname='len', quals=[] (at pp.c:17768)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17768)
          TypeDecl: declname='LowPowerSensingPeriodicSamplerC__RequestSamplesReceive__receive', quals=[] (at pp.c:17768)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17770)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__Leds__led0Toggle' (at pp.c:17771)
      If:  (at pp.c:17772)
        BinaryOp: op='==' (at pp.c:17772)
          ID: name='LowPowerSensingPeriodicSamplerC__sendBusy' (at pp.c:17772)
          ID: name='FALSE' (at pp.c:17772)
        Compound:  (at pp.c:17772)
          Assignment: op='=' (at pp.c:17773)
            ID: name='LowPowerSensingPeriodicSamplerC__sendBusy' (at pp.c:17773)
            ID: name='TRUE' (at pp.c:17773)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__readNext' (at pp.c:17774)
      Return:  (at pp.c:17776)
        ID: name='msg' (at pp.c:17776)
  FuncDef:  (at pp.c:17780)
    Decl: name='CC2420ActiveMessageP__Receive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:17780)
      FuncDecl: quals=None (at pp.c:17780)
        ParamList:  (at pp.c:17780)
          Decl: name='id', quals=[], storage=[] (at pp.c:17780)
            TypeDecl: declname='id', quals=[] (at pp.c:17780)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17780)
            PtrDecl: quals=[] (at pp.c:17780)
              TypeDecl: declname='msg', quals=[] (at pp.c:17780)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17780)
            PtrDecl: quals=[] (at pp.c:17780)
              TypeDecl: declname='payload', quals=[] (at pp.c:17780)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17780)
            TypeDecl: declname='len', quals=[] (at pp.c:17780)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17780)
          TypeDecl: declname='CC2420ActiveMessageP__Receive__default__receive', quals=[] (at pp.c:17780)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17782)
      Return:  (at pp.c:17783)
        ID: name='msg' (at pp.c:17783)
  FuncDef:  (at pp.c:17787)
    Decl: name='CC2420ActiveMessageP__Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:17787)
      FuncDecl: quals=None (at pp.c:17787)
        ParamList:  (at pp.c:17787)
          Decl: name='arg_0x102a9c908', quals=[], storage=[] (at pp.c:17787)
            TypeDecl: declname='arg_0x102a9c908', quals=[] (at pp.c:17787)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17787)
            PtrDecl: quals=[] (at pp.c:17787)
              TypeDecl: declname='msg', quals=[] (at pp.c:17787)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17787)
            PtrDecl: quals=[] (at pp.c:17787)
              TypeDecl: declname='payload', quals=[] (at pp.c:17787)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17787)
            TypeDecl: declname='len', quals=[] (at pp.c:17787)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17787)
          TypeDecl: declname='CC2420ActiveMessageP__Receive__receive', quals=[] (at pp.c:17787)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17787)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17789)
        PtrDecl: quals=[] (at pp.c:17789)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17789)
            Struct: name='message_t', packed=False (at pp.c:17789)
      Switch:  (at pp.c:17793)
        ID: name='arg_0x102a9c908' (at pp.c:17793)
        Compound:  (at pp.c:17793)
          Case:  (at pp.c:17795)
            Constant: type='int', value='147' (at pp.c:17795)
            Assignment: op='=' (at pp.c:17797)
              ID: name='__nesc_result' (at pp.c:17797)
              FuncCall:  (at None)
                ID: name='LowPowerSensingPeriodicSamplerC__RequestSamplesReceive__receive' (at pp.c:17797)
                ExprList:  (at pp.c:17797)
                  ID: name='msg' (at pp.c:17797)
                  ID: name='payload' (at pp.c:17797)
                  ID: name='len' (at pp.c:17797)
          Break:  (at pp.c:17799)
          Default:  (at pp.c:17801)
            Assignment: op='=' (at pp.c:17803)
              ID: name='__nesc_result' (at pp.c:17803)
              FuncCall:  (at None)
                ID: name='CC2420ActiveMessageP__Receive__default__receive' (at pp.c:17803)
                ExprList:  (at pp.c:17803)
                  ID: name='arg_0x102a9c908' (at pp.c:17803)
                  ID: name='msg' (at pp.c:17803)
                  ID: name='payload' (at pp.c:17803)
                  ID: name='len' (at pp.c:17803)
          Break:  (at pp.c:17805)
      Return:  (at pp.c:17811)
        ID: name='__nesc_result' (at pp.c:17811)
  FuncDef:  (at pp.c:17816)
    Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[], storage=['inline', 'static'] (at pp.c:17816)
      FuncDecl: quals=None (at pp.c:17816)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amAddress', quals=[] (at pp.c:17816)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:17818)
      Return:  (at pp.c:17819)
        FuncCall:  (at None)
          ID: name='ActiveMessageAddressC__amAddress' (at pp.c:17819)
  FuncDef:  (at pp.c:17823)
    Decl: name='CC2420ActiveMessageP__ActiveMessageAddress__amAddress', quals=[], storage=['static', 'inline'] (at pp.c:17823)
      FuncDecl: quals=None (at pp.c:17823)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__ActiveMessageAddress__amAddress', quals=[] (at pp.c:17823)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:17823)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17825)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17825)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17829)
        ID: name='__nesc_result' (at pp.c:17829)
        FuncCall:  (at None)
          ID: name='ActiveMessageAddressC__ActiveMessageAddress__amAddress' (at pp.c:17829)
      Return:  (at pp.c:17833)
        ID: name='__nesc_result' (at pp.c:17833)
  FuncDef:  (at pp.c:17838)
    Decl: name='CC2420ActiveMessageP__AMPacket__address', quals=[], storage=['inline', 'static'] (at pp.c:17838)
      FuncDecl: quals=None (at pp.c:17838)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__address', quals=[] (at pp.c:17838)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:17840)
      Return:  (at pp.c:17841)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__ActiveMessageAddress__amAddress' (at pp.c:17841)
  FuncDef:  (at pp.c:17845)
    Decl: name='CC2420ActiveMessageP__AMPacket__isForMe', quals=[], storage=['inline', 'static'] (at pp.c:17845)
      FuncDecl: quals=None (at pp.c:17845)
        ParamList:  (at pp.c:17845)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:17845)
            PtrDecl: quals=[] (at pp.c:17845)
              TypeDecl: declname='amsg', quals=[] (at pp.c:17845)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__isForMe', quals=[] (at pp.c:17845)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:17847)
      Return:  (at pp.c:17848)
        BinaryOp: op='||' (at None)
          BinaryOp: op='==' (at None)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__AMPacket__destination' (at pp.c:17848)
              ExprList:  (at pp.c:17848)
                ID: name='amsg' (at pp.c:17848)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__AMPacket__address' (at pp.c:17848)
          BinaryOp: op='==' (at None)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__AMPacket__destination' (at pp.c:17849)
              ExprList:  (at pp.c:17849)
                ID: name='amsg' (at pp.c:17849)
            ID: name='AM_BROADCAST_ADDR' (at pp.c:17849)
  FuncDef:  (at pp.c:17853)
    Decl: name='CC2420ActiveMessageP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:17853)
      FuncDecl: quals=None (at pp.c:17853)
        ParamList:  (at pp.c:17853)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17853)
            PtrDecl: quals=[] (at pp.c:17853)
              TypeDecl: declname='msg', quals=[] (at pp.c:17853)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17853)
            PtrDecl: quals=[] (at pp.c:17853)
              TypeDecl: declname='payload', quals=[] (at pp.c:17853)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17853)
            TypeDecl: declname='len', quals=[] (at pp.c:17853)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17853)
          TypeDecl: declname='CC2420ActiveMessageP__SubReceive__receive', quals=[] (at pp.c:17853)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17855)
      If:  (at pp.c:17857)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__AMPacket__isForMe' (at pp.c:17857)
          ExprList:  (at pp.c:17857)
            ID: name='msg' (at pp.c:17857)
        Compound:  (at pp.c:17857)
          Return:  (at pp.c:17858)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__Receive__receive' (at pp.c:17858)
              ExprList:  (at None)
                FuncCall:  (at None)
                  ID: name='CC2420ActiveMessageP__AMPacket__type' (at pp.c:17858)
                  ExprList:  (at pp.c:17858)
                    ID: name='msg' (at pp.c:17858)
                ID: name='msg' (at pp.c:17858)
                ID: name='payload' (at pp.c:17858)
                ID: name='len' (at pp.c:17858)
        Compound:  (at pp.c:17860)
          Return:  (at pp.c:17861)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__Snoop__receive' (at pp.c:17861)
              ExprList:  (at None)
                FuncCall:  (at None)
                  ID: name='CC2420ActiveMessageP__AMPacket__type' (at pp.c:17861)
                  ExprList:  (at pp.c:17861)
                    ID: name='msg' (at pp.c:17861)
                ID: name='msg' (at pp.c:17861)
                ID: name='payload' (at pp.c:17861)
                ID: name='len' (at pp.c:17861)
  FuncDef:  (at pp.c:17866)
    Decl: name='CC2420TinyosNetworkP__ActiveReceive__receive', quals=[], storage=['static', 'inline'] (at pp.c:17866)
      FuncDecl: quals=None (at pp.c:17866)
        ParamList:  (at pp.c:17866)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17866)
            PtrDecl: quals=[] (at pp.c:17866)
              TypeDecl: declname='msg', quals=[] (at pp.c:17866)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17866)
            PtrDecl: quals=[] (at pp.c:17866)
              TypeDecl: declname='payload', quals=[] (at pp.c:17866)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17866)
            TypeDecl: declname='len', quals=[] (at pp.c:17866)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17866)
          TypeDecl: declname='CC2420TinyosNetworkP__ActiveReceive__receive', quals=[] (at pp.c:17866)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17866)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17868)
        PtrDecl: quals=[] (at pp.c:17868)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17868)
            Struct: name='message_t', packed=False (at pp.c:17868)
      Assignment: op='=' (at pp.c:17872)
        ID: name='__nesc_result' (at pp.c:17872)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__SubReceive__receive' (at pp.c:17872)
          ExprList:  (at pp.c:17872)
            ID: name='msg' (at pp.c:17872)
            ID: name='payload' (at pp.c:17872)
            ID: name='len' (at pp.c:17872)
      Return:  (at pp.c:17876)
        ID: name='__nesc_result' (at pp.c:17876)
  FuncDef:  (at pp.c:17881)
    Decl: name='CC2420TinyosNetworkP__CC2420PacketBody__getMetadata', quals=[], storage=['static', 'inline'] (at pp.c:17881)
      FuncDecl: quals=None (at pp.c:17881)
        ParamList:  (at pp.c:17881)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17881)
            PtrDecl: quals=[] (at pp.c:17881)
              TypeDecl: declname='msg', quals=[] (at pp.c:17881)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17881)
          TypeDecl: declname='CC2420TinyosNetworkP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:17881)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:17881)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17883)
        PtrDecl: quals=[] (at pp.c:17883)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17883)
            Struct: name='cc2420_metadata_t', packed=False (at pp.c:17883)
      Assignment: op='=' (at pp.c:17887)
        ID: name='__nesc_result' (at pp.c:17887)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:17887)
          ExprList:  (at pp.c:17887)
            ID: name='msg' (at pp.c:17887)
      Return:  (at pp.c:17891)
        ID: name='__nesc_result' (at pp.c:17891)
  FuncDef:  (at pp.c:17896)
    Decl: name='CC2420PacketP__CC2420Packet__getNetwork', quals=[], storage=['inline', 'static'] (at pp.c:17896)
      FuncDecl: quals=None (at pp.c:17896)
        ParamList:  (at pp.c:17896)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:17896)
            PtrDecl: quals=[] (at pp.c:17896)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:17896)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__CC2420Packet__getNetwork', quals=[] (at pp.c:17896)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:17898)
      Compound:  (at pp.c:17902)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:17902)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:17902)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:17902)
        Compound:  (at pp.c:17903)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:17904)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:17904)
              IdentifierType: names=['char', 'unsigned'] (at None)
            UnaryOp: op='*' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__getNetwork' (at pp.c:17906)
                ExprList:  (at pp.c:17906)
                  ID: name='p_msg' (at pp.c:17906)
          Compound:  (at pp.c:17908)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:17910)
              ExprList:  (at pp.c:17910)
                ID: name='__nesc_atomic' (at pp.c:17910)
            Return:  (at pp.c:17912)
              ID: name='__nesc_temp' (at pp.c:17912)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:17916)
          ExprList:  (at pp.c:17916)
            ID: name='__nesc_atomic' (at pp.c:17916)
  FuncDef:  (at pp.c:17920)
    Decl: name='CC2420TinyosNetworkP__CC2420Packet__getNetwork', quals=[], storage=['static', 'inline'] (at pp.c:17920)
      FuncDecl: quals=None (at pp.c:17920)
        ParamList:  (at pp.c:17920)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:17920)
            PtrDecl: quals=[] (at pp.c:17920)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:17920)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__CC2420Packet__getNetwork', quals=[] (at pp.c:17920)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:17920)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17922)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17922)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:17926)
        ID: name='__nesc_result' (at pp.c:17926)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420Packet__getNetwork' (at pp.c:17926)
          ExprList:  (at pp.c:17926)
            ID: name='p_msg' (at pp.c:17926)
      Return:  (at pp.c:17930)
        ID: name='__nesc_result' (at pp.c:17930)
  FuncDef:  (at pp.c:17935)
    Decl: name='CC2420TinyosNetworkP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:17935)
      FuncDecl: quals=None (at pp.c:17935)
        ParamList:  (at pp.c:17935)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17935)
            PtrDecl: quals=[] (at pp.c:17935)
              TypeDecl: declname='msg', quals=[] (at pp.c:17935)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17935)
            PtrDecl: quals=[] (at pp.c:17935)
              TypeDecl: declname='payload', quals=[] (at pp.c:17935)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17935)
            TypeDecl: declname='len', quals=[] (at pp.c:17935)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17935)
          TypeDecl: declname='CC2420TinyosNetworkP__SubReceive__receive', quals=[] (at pp.c:17935)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17937)
      Decl: name='network', quals=[], storage=[] (at pp.c:17938)
        TypeDecl: declname='network', quals=[] (at pp.c:17938)
          IdentifierType: names=['uint8_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__CC2420Packet__getNetwork' (at pp.c:17938)
          ExprList:  (at pp.c:17938)
            ID: name='msg' (at pp.c:17938)
      If:  (at pp.c:17940)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_int8' (at pp.c:17940)
            ExprList:  (at None)
              StructRef: type='.' (at None)
                StructRef: type='->' (at None)
                  FuncCall:  (at None)
                    ID: name='CC2420TinyosNetworkP__CC2420PacketBody__getMetadata' (at pp.c:17940)
                    ExprList:  (at pp.c:17940)
                      ID: name='msg' (at pp.c:17940)
                  ID: name='crc' (at pp.c:17940)
                ID: name='nxdata' (at pp.c:17940)
        Compound:  (at pp.c:17940)
          Return:  (at pp.c:17941)
            ID: name='msg' (at pp.c:17941)
      If:  (at pp.c:17944)
        BinaryOp: op='==' (at pp.c:17944)
          ID: name='network' (at pp.c:17944)
          Constant: type='int', value='0x3f' (at pp.c:17944)
        Compound:  (at pp.c:17944)
          Return:  (at pp.c:17945)
            FuncCall:  (at None)
              ID: name='CC2420TinyosNetworkP__ActiveReceive__receive' (at pp.c:17945)
              ExprList:  (at pp.c:17945)
                ID: name='msg' (at pp.c:17945)
                ID: name='payload' (at pp.c:17945)
                ID: name='len' (at pp.c:17945)
        Compound:  (at pp.c:17949)
          Return:  (at pp.c:17950)
            FuncCall:  (at None)
              ID: name='CC2420TinyosNetworkP__BareReceive__receive' (at pp.c:17950)
              ExprList:  (at pp.c:17950)
                ID: name='msg' (at pp.c:17950)
                FuncCall:  (at None)
                  ID: name='CC2420TinyosNetworkP__BareSend__getPayload' (at pp.c:17951)
                  ExprList:  (at pp.c:17951)
                    ID: name='msg' (at pp.c:17951)
                    ID: name='len' (at pp.c:17951)
                BinaryOp: op='+' (at pp.c:17952)
                  ID: name='len' (at pp.c:17952)
                  UnaryOp: op='sizeof' (at pp.c:17952)
                    Typename: quals=[] (at None)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['cc2420_header_t'] (at None)
  FuncDef:  (at pp.c:17957)
    Decl: name='DefaultLplP__Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:17957)
      FuncDecl: quals=None (at pp.c:17957)
        ParamList:  (at pp.c:17957)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17957)
            PtrDecl: quals=[] (at pp.c:17957)
              TypeDecl: declname='msg', quals=[] (at pp.c:17957)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17957)
            PtrDecl: quals=[] (at pp.c:17957)
              TypeDecl: declname='payload', quals=[] (at pp.c:17957)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17957)
            TypeDecl: declname='len', quals=[] (at pp.c:17957)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17957)
          TypeDecl: declname='DefaultLplP__Receive__receive', quals=[] (at pp.c:17957)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17957)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17959)
        PtrDecl: quals=[] (at pp.c:17959)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17959)
            Struct: name='message_t', packed=False (at pp.c:17959)
      Assignment: op='=' (at pp.c:17963)
        ID: name='__nesc_result' (at pp.c:17963)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__SubReceive__receive' (at pp.c:17963)
          ExprList:  (at pp.c:17963)
            ID: name='msg' (at pp.c:17963)
            ID: name='payload' (at pp.c:17963)
            ID: name='len' (at pp.c:17963)
      Return:  (at pp.c:17967)
        ID: name='__nesc_result' (at pp.c:17967)
  FuncDef:  (at pp.c:17972)
    Decl: name='DefaultLplP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:17972)
      FuncDecl: quals=None (at pp.c:17972)
        ParamList:  (at pp.c:17972)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17972)
            PtrDecl: quals=[] (at pp.c:17972)
              TypeDecl: declname='msg', quals=[] (at pp.c:17972)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17972)
            PtrDecl: quals=[] (at pp.c:17972)
              TypeDecl: declname='payload', quals=[] (at pp.c:17972)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17973)
            TypeDecl: declname='len', quals=[] (at pp.c:17973)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17972)
          TypeDecl: declname='DefaultLplP__SubReceive__receive', quals=[] (at pp.c:17972)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17975)
      FuncCall:  (at None)
        ID: name='DefaultLplP__startOffTimer' (at pp.c:17976)
      Return:  (at pp.c:17977)
        FuncCall:  (at None)
          ID: name='DefaultLplP__Receive__receive' (at pp.c:17977)
          ExprList:  (at pp.c:17977)
            ID: name='msg' (at pp.c:17977)
            ID: name='payload' (at pp.c:17977)
            ID: name='len' (at pp.c:17977)
  FuncDef:  (at pp.c:17981)
    Decl: name='UniqueReceiveP__Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:17981)
      FuncDecl: quals=None (at pp.c:17981)
        ParamList:  (at pp.c:17981)
          Decl: name='msg', quals=[], storage=[] (at pp.c:17981)
            PtrDecl: quals=[] (at pp.c:17981)
              TypeDecl: declname='msg', quals=[] (at pp.c:17981)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:17981)
            PtrDecl: quals=[] (at pp.c:17981)
              TypeDecl: declname='payload', quals=[] (at pp.c:17981)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:17981)
            TypeDecl: declname='len', quals=[] (at pp.c:17981)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:17981)
          TypeDecl: declname='UniqueReceiveP__Receive__receive', quals=[] (at pp.c:17981)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:17981)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:17983)
        PtrDecl: quals=[] (at pp.c:17983)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:17983)
            Struct: name='message_t', packed=False (at pp.c:17983)
      Assignment: op='=' (at pp.c:17987)
        ID: name='__nesc_result' (at pp.c:17987)
        FuncCall:  (at None)
          ID: name='DefaultLplP__SubReceive__receive' (at pp.c:17987)
          ExprList:  (at pp.c:17987)
            ID: name='msg' (at pp.c:17987)
            ID: name='payload' (at pp.c:17987)
            ID: name='len' (at pp.c:17987)
      Return:  (at pp.c:17991)
        ID: name='__nesc_result' (at pp.c:17991)
  FuncDef:  (at pp.c:17996)
    Decl: name='UniqueReceiveP__insert', quals=[], storage=['inline', 'static'] (at pp.c:17996)
      FuncDecl: quals=None (at pp.c:17996)
        ParamList:  (at pp.c:17996)
          Decl: name='msgSource', quals=[], storage=[] (at pp.c:17996)
            TypeDecl: declname='msgSource', quals=[] (at pp.c:17996)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='msgDsn', quals=[], storage=[] (at pp.c:17996)
            TypeDecl: declname='msgDsn', quals=[] (at pp.c:17996)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='UniqueReceiveP__insert', quals=[] (at pp.c:17996)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:17998)
      Decl: name='element', quals=[], storage=[] (at pp.c:17999)
        TypeDecl: declname='element', quals=[] (at pp.c:17999)
          IdentifierType: names=['uint8_t'] (at None)
        ID: name='UniqueReceiveP__recycleSourceElement' (at pp.c:17999)
      Decl: name='increment', quals=[], storage=[] (at pp.c:18000)
        TypeDecl: declname='increment', quals=[] (at pp.c:18000)
          IdentifierType: names=['bool'] (at None)
        ID: name='FALSE' (at pp.c:18000)
      Compound:  (at pp.c:18002)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18002)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18002)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18002)
        Compound:  (at pp.c:18004)
          If:  (at pp.c:18005)
            BinaryOp: op='||' (at pp.c:18005)
              BinaryOp: op='==' (at pp.c:18005)
                ID: name='element' (at pp.c:18005)
                ID: name='UniqueReceiveP__INVALID_ELEMENT' (at pp.c:18005)
              BinaryOp: op='==' (at pp.c:18005)
                ID: name='UniqueReceiveP__writeIndex' (at pp.c:18005)
                ID: name='element' (at pp.c:18005)
            Compound:  (at pp.c:18005)
              Assignment: op='=' (at pp.c:18007)
                ID: name='element' (at pp.c:18007)
                ID: name='UniqueReceiveP__writeIndex' (at pp.c:18007)
              Assignment: op='=' (at pp.c:18008)
                ID: name='increment' (at pp.c:18008)
                ID: name='TRUE' (at pp.c:18008)
          Assignment: op='=' (at pp.c:18011)
            StructRef: type='.' (at pp.c:18011)
              ArrayRef:  (at pp.c:18011)
                ID: name='UniqueReceiveP__receivedMessages' (at pp.c:18011)
                ID: name='element' (at pp.c:18011)
              ID: name='source' (at pp.c:18011)
            ID: name='msgSource' (at pp.c:18011)
          Assignment: op='=' (at pp.c:18012)
            StructRef: type='.' (at pp.c:18012)
              ArrayRef:  (at pp.c:18012)
                ID: name='UniqueReceiveP__receivedMessages' (at pp.c:18012)
                ID: name='element' (at pp.c:18012)
              ID: name='dsn' (at pp.c:18012)
            ID: name='msgDsn' (at pp.c:18012)
          If:  (at pp.c:18013)
            ID: name='increment' (at pp.c:18013)
            Compound:  (at pp.c:18013)
              UnaryOp: op='p++' (at pp.c:18014)
                ID: name='UniqueReceiveP__writeIndex' (at pp.c:18014)
              Assignment: op='%=' (at pp.c:18015)
                ID: name='UniqueReceiveP__writeIndex' (at pp.c:18015)
                Constant: type='int', value='4' (at pp.c:18015)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:18019)
          ExprList:  (at pp.c:18019)
            ID: name='__nesc_atomic' (at pp.c:18019)
  FuncDef:  (at pp.c:18023)
    Decl: name='UniqueReceiveP__DuplicateReceive__default__receive', quals=[], storage=['inline', 'static'] (at pp.c:18023)
      FuncDecl: quals=None (at pp.c:18023)
        ParamList:  (at pp.c:18023)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18023)
            PtrDecl: quals=[] (at pp.c:18023)
              TypeDecl: declname='msg', quals=[] (at pp.c:18023)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18023)
            PtrDecl: quals=[] (at pp.c:18023)
              TypeDecl: declname='payload', quals=[] (at pp.c:18023)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18023)
            TypeDecl: declname='len', quals=[] (at pp.c:18023)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18023)
          TypeDecl: declname='UniqueReceiveP__DuplicateReceive__default__receive', quals=[] (at pp.c:18023)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18025)
      Return:  (at pp.c:18026)
        ID: name='msg' (at pp.c:18026)
  FuncDef:  (at pp.c:18030)
    Decl: name='UniqueReceiveP__DuplicateReceive__receive', quals=[], storage=['static', 'inline'] (at pp.c:18030)
      FuncDecl: quals=None (at pp.c:18030)
        ParamList:  (at pp.c:18030)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18030)
            PtrDecl: quals=[] (at pp.c:18030)
              TypeDecl: declname='msg', quals=[] (at pp.c:18030)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18030)
            PtrDecl: quals=[] (at pp.c:18030)
              TypeDecl: declname='payload', quals=[] (at pp.c:18030)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18030)
            TypeDecl: declname='len', quals=[] (at pp.c:18030)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18030)
          TypeDecl: declname='UniqueReceiveP__DuplicateReceive__receive', quals=[] (at pp.c:18030)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18030)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18032)
        PtrDecl: quals=[] (at pp.c:18032)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18032)
            Struct: name='message_t', packed=False (at pp.c:18032)
      Assignment: op='=' (at pp.c:18036)
        ID: name='__nesc_result' (at pp.c:18036)
        FuncCall:  (at None)
          ID: name='UniqueReceiveP__DuplicateReceive__default__receive' (at pp.c:18036)
          ExprList:  (at pp.c:18036)
            ID: name='msg' (at pp.c:18036)
            ID: name='payload' (at pp.c:18036)
            ID: name='len' (at pp.c:18036)
      Return:  (at pp.c:18040)
        ID: name='__nesc_result' (at pp.c:18040)
  FuncDef:  (at pp.c:18045)
    Decl: name='UniqueReceiveP__hasSeen', quals=[], storage=['inline', 'static'] (at pp.c:18045)
      FuncDecl: quals=None (at pp.c:18045)
        ParamList:  (at pp.c:18045)
          Decl: name='msgSource', quals=[], storage=[] (at pp.c:18045)
            TypeDecl: declname='msgSource', quals=[] (at pp.c:18045)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='msgDsn', quals=[], storage=[] (at pp.c:18045)
            TypeDecl: declname='msgDsn', quals=[] (at pp.c:18045)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='UniqueReceiveP__hasSeen', quals=[] (at pp.c:18045)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18047)
      Decl: name='i', quals=[], storage=[] (at pp.c:18048)
        TypeDecl: declname='i', quals=[] (at pp.c:18048)
          IdentifierType: names=['int'] (at None)
      Assignment: op='=' (at pp.c:18051)
        ID: name='UniqueReceiveP__recycleSourceElement' (at pp.c:18051)
        ID: name='UniqueReceiveP__INVALID_ELEMENT' (at pp.c:18051)
      Compound:  (at pp.c:18053)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18053)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18053)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18053)
        Compound:  (at pp.c:18055)
          For:  (at pp.c:18056)
            Assignment: op='=' (at pp.c:18056)
              ID: name='i' (at pp.c:18056)
              Constant: type='int', value='0' (at pp.c:18056)
            BinaryOp: op='<' (at pp.c:18056)
              ID: name='i' (at pp.c:18056)
              Constant: type='int', value='4' (at pp.c:18056)
            UnaryOp: op='p++' (at pp.c:18056)
              ID: name='i' (at pp.c:18056)
            Compound:  (at pp.c:18056)
              If:  (at pp.c:18057)
                BinaryOp: op='==' (at pp.c:18057)
                  StructRef: type='.' (at pp.c:18057)
                    ArrayRef:  (at pp.c:18057)
                      ID: name='UniqueReceiveP__receivedMessages' (at pp.c:18057)
                      ID: name='i' (at pp.c:18057)
                    ID: name='source' (at pp.c:18057)
                  ID: name='msgSource' (at pp.c:18057)
                Compound:  (at pp.c:18057)
                  If:  (at pp.c:18058)
                    BinaryOp: op='==' (at pp.c:18058)
                      StructRef: type='.' (at pp.c:18058)
                        ArrayRef:  (at pp.c:18058)
                          ID: name='UniqueReceiveP__receivedMessages' (at pp.c:18058)
                          ID: name='i' (at pp.c:18058)
                        ID: name='dsn' (at pp.c:18058)
                      ID: name='msgDsn' (at pp.c:18058)
                    Compound:  (at pp.c:18058)
                      Compound:  (at pp.c:18060)
                        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:18061)
                          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:18061)
                            IdentifierType: names=['char', 'unsigned'] (at None)
                          ID: name='TRUE' (at pp.c:18063)
                        Compound:  (at pp.c:18065)
                          FuncCall:  (at None)
                            ID: name='__nesc_atomic_end' (at pp.c:18067)
                            ExprList:  (at pp.c:18067)
                              ID: name='__nesc_atomic' (at pp.c:18067)
                          Return:  (at pp.c:18069)
                            ID: name='__nesc_temp' (at pp.c:18069)
                  Assignment: op='=' (at pp.c:18074)
                    ID: name='UniqueReceiveP__recycleSourceElement' (at pp.c:18074)
                    ID: name='i' (at pp.c:18074)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:18079)
          ExprList:  (at pp.c:18079)
            ID: name='__nesc_atomic' (at pp.c:18079)
      Return:  (at pp.c:18081)
        ID: name='FALSE' (at pp.c:18081)
  FuncDef:  (at pp.c:18085)
    Decl: name='UniqueReceiveP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:18085)
      FuncDecl: quals=None (at pp.c:18085)
        ParamList:  (at pp.c:18085)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18085)
            PtrDecl: quals=[] (at pp.c:18085)
              TypeDecl: declname='msg', quals=[] (at pp.c:18085)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18085)
          TypeDecl: declname='UniqueReceiveP__CC2420PacketBody__getHeader', quals=[] (at pp.c:18085)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:18085)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18087)
        PtrDecl: quals=[] (at pp.c:18087)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18087)
            Struct: name='cc2420_header_t', packed=False (at pp.c:18087)
      Assignment: op='=' (at pp.c:18091)
        ID: name='__nesc_result' (at pp.c:18091)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:18091)
          ExprList:  (at pp.c:18091)
            ID: name='msg' (at pp.c:18091)
      Return:  (at pp.c:18095)
        ID: name='__nesc_result' (at pp.c:18095)
  FuncDef:  (at pp.c:18100)
    Decl: name='UniqueReceiveP__getSourceKey', quals=[], storage=['inline', 'static'] (at pp.c:18100)
      FuncDecl: quals=None (at pp.c:18100)
        ParamList:  (at pp.c:18100)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18100)
            PtrDecl: quals=[] (at pp.c:18100)
              TypeDecl: declname='msg', quals=[] (at pp.c:18100)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='UniqueReceiveP__getSourceKey', quals=[] (at pp.c:18100)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:18102)
      Decl: name='hdr', quals=[], storage=[] (at pp.c:18103)
        PtrDecl: quals=[] (at pp.c:18103)
          TypeDecl: declname='hdr', quals=[] (at pp.c:18103)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='UniqueReceiveP__CC2420PacketBody__getHeader' (at pp.c:18103)
          ExprList:  (at pp.c:18103)
            ID: name='msg' (at pp.c:18103)
      Decl: name='s_mode', quals=[], storage=[] (at pp.c:18104)
        TypeDecl: declname='s_mode', quals=[] (at pp.c:18104)
          IdentifierType: names=['int'] (at None)
        BinaryOp: op='&' (at None)
          BinaryOp: op='>>' (at None)
            FuncCall:  (at None)
              ID: name='__nesc_ntoh_leuint16' (at pp.c:18104)
              ExprList:  (at pp.c:18104)
                StructRef: type='.' (at pp.c:18104)
                  StructRef: type='->' (at pp.c:18104)
                    ID: name='hdr' (at pp.c:18104)
                    ID: name='fcf' (at pp.c:18104)
                  ID: name='nxdata' (at pp.c:18104)
            ID: name='IEEE154_FCF_SRC_ADDR_MODE' (at pp.c:18104)
          Constant: type='int', value='0x3' (at pp.c:18104)
      Decl: name='d_mode', quals=[], storage=[] (at pp.c:18105)
        TypeDecl: declname='d_mode', quals=[] (at pp.c:18105)
          IdentifierType: names=['int'] (at None)
        BinaryOp: op='&' (at None)
          BinaryOp: op='>>' (at None)
            FuncCall:  (at None)
              ID: name='__nesc_ntoh_leuint16' (at pp.c:18105)
              ExprList:  (at pp.c:18105)
                StructRef: type='.' (at pp.c:18105)
                  StructRef: type='->' (at pp.c:18105)
                    ID: name='hdr' (at pp.c:18105)
                    ID: name='fcf' (at pp.c:18105)
                  ID: name='nxdata' (at pp.c:18105)
            ID: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:18105)
          Constant: type='int', value='0x3' (at pp.c:18105)
      Decl: name='s_offset', quals=[], storage=[] (at pp.c:18106)
        TypeDecl: declname='s_offset', quals=[] (at pp.c:18106)
          IdentifierType: names=['int'] (at None)
        Constant: type='int', value='2' (at pp.c:18106)
      Decl: name='s_len', quals=[], storage=[] (at pp.c:18108)
        TypeDecl: declname='s_len', quals=[] (at pp.c:18108)
          IdentifierType: names=['int'] (at None)
        Constant: type='int', value='2' (at pp.c:18108)
      Decl: name='key', quals=[], storage=[] (at pp.c:18109)
        TypeDecl: declname='key', quals=[] (at pp.c:18109)
          IdentifierType: names=['uint16_t'] (at None)
        Constant: type='int', value='0' (at pp.c:18109)
      Decl: name='current', quals=[], storage=[] (at pp.c:18110)
        PtrDecl: quals=[] (at pp.c:18110)
          TypeDecl: declname='current', quals=[] (at pp.c:18110)
            IdentifierType: names=['uint8_t'] (at None)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:18110)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
          UnaryOp: op='&' (at pp.c:18110)
            StructRef: type='->' (at pp.c:18110)
              ID: name='hdr' (at pp.c:18110)
              ID: name='dest' (at pp.c:18110)
      Decl: name='i', quals=[], storage=[] (at pp.c:18111)
        TypeDecl: declname='i', quals=[] (at pp.c:18111)
          IdentifierType: names=['int'] (at None)
      If:  (at pp.c:18113)
        BinaryOp: op='==' (at pp.c:18113)
          ID: name='s_mode' (at pp.c:18113)
          ID: name='IEEE154_ADDR_EXT' (at pp.c:18113)
        Compound:  (at pp.c:18113)
          Assignment: op='=' (at pp.c:18114)
            ID: name='s_len' (at pp.c:18114)
            Constant: type='int', value='8' (at pp.c:18114)
      If:  (at pp.c:18116)
        BinaryOp: op='==' (at pp.c:18116)
          ID: name='d_mode' (at pp.c:18116)
          ID: name='IEEE154_ADDR_EXT' (at pp.c:18116)
        Compound:  (at pp.c:18116)
          Assignment: op='=' (at pp.c:18117)
            ID: name='s_offset' (at pp.c:18117)
            Constant: type='int', value='8' (at pp.c:18117)
      Assignment: op='+=' (at pp.c:18120)
        ID: name='current' (at pp.c:18120)
        ID: name='s_offset' (at pp.c:18120)
      For:  (at pp.c:18122)
        Assignment: op='=' (at pp.c:18122)
          ID: name='i' (at pp.c:18122)
          Constant: type='int', value='0' (at pp.c:18122)
        BinaryOp: op='<' (at pp.c:18122)
          ID: name='i' (at pp.c:18122)
          ID: name='s_len' (at pp.c:18122)
        UnaryOp: op='p++' (at pp.c:18122)
          ID: name='i' (at pp.c:18122)
        Compound:  (at pp.c:18122)
          Assignment: op='+=' (at pp.c:18123)
            ID: name='key' (at pp.c:18123)
            ArrayRef:  (at pp.c:18123)
              ID: name='current' (at pp.c:18123)
              ID: name='i' (at pp.c:18123)
      Return:  (at pp.c:18125)
        ID: name='key' (at pp.c:18125)
  FuncDef:  (at pp.c:18129)
    Decl: name='UniqueReceiveP__SubReceive__receive', quals=[], storage=['inline', 'static'] (at pp.c:18129)
      FuncDecl: quals=None (at pp.c:18129)
        ParamList:  (at pp.c:18129)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18129)
            PtrDecl: quals=[] (at pp.c:18129)
              TypeDecl: declname='msg', quals=[] (at pp.c:18129)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18129)
            PtrDecl: quals=[] (at pp.c:18129)
              TypeDecl: declname='payload', quals=[] (at pp.c:18129)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18130)
            TypeDecl: declname='len', quals=[] (at pp.c:18130)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18129)
          TypeDecl: declname='UniqueReceiveP__SubReceive__receive', quals=[] (at pp.c:18129)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18132)
      Decl: name='msgSource', quals=[], storage=[] (at pp.c:18134)
        TypeDecl: declname='msgSource', quals=[] (at pp.c:18134)
          IdentifierType: names=['uint16_t'] (at None)
        FuncCall:  (at None)
          ID: name='UniqueReceiveP__getSourceKey' (at pp.c:18134)
          ExprList:  (at pp.c:18134)
            ID: name='msg' (at pp.c:18134)
      Decl: name='msgDsn', quals=[], storage=[] (at pp.c:18135)
        TypeDecl: declname='msgDsn', quals=[] (at pp.c:18135)
          IdentifierType: names=['uint8_t'] (at None)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_leuint8' (at pp.c:18135)
          ExprList:  (at None)
            StructRef: type='.' (at None)
              StructRef: type='->' (at None)
                FuncCall:  (at None)
                  ID: name='UniqueReceiveP__CC2420PacketBody__getHeader' (at pp.c:18135)
                  ExprList:  (at pp.c:18135)
                    ID: name='msg' (at pp.c:18135)
                ID: name='dsn' (at pp.c:18135)
              ID: name='nxdata' (at pp.c:18135)
      If:  (at pp.c:18137)
        FuncCall:  (at None)
          ID: name='UniqueReceiveP__hasSeen' (at pp.c:18137)
          ExprList:  (at pp.c:18137)
            ID: name='msgSource' (at pp.c:18137)
            ID: name='msgDsn' (at pp.c:18137)
        Compound:  (at pp.c:18137)
          Return:  (at pp.c:18138)
            FuncCall:  (at None)
              ID: name='UniqueReceiveP__DuplicateReceive__receive' (at pp.c:18138)
              ExprList:  (at pp.c:18138)
                ID: name='msg' (at pp.c:18138)
                ID: name='payload' (at pp.c:18138)
                ID: name='len' (at pp.c:18138)
        Compound:  (at pp.c:18142)
          FuncCall:  (at None)
            ID: name='UniqueReceiveP__insert' (at pp.c:18143)
            ExprList:  (at pp.c:18143)
              ID: name='msgSource' (at pp.c:18143)
              ID: name='msgDsn' (at pp.c:18143)
          Return:  (at pp.c:18144)
            FuncCall:  (at None)
              ID: name='UniqueReceiveP__Receive__receive' (at pp.c:18144)
              ExprList:  (at pp.c:18144)
                ID: name='msg' (at pp.c:18144)
                ID: name='payload' (at pp.c:18144)
                ID: name='len' (at pp.c:18144)
  FuncDef:  (at pp.c:18149)
    Decl: name='CC2420ReceiveP__Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:18149)
      FuncDecl: quals=None (at pp.c:18149)
        ParamList:  (at pp.c:18149)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18149)
            PtrDecl: quals=[] (at pp.c:18149)
              TypeDecl: declname='msg', quals=[] (at pp.c:18149)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='payload', quals=[], storage=[] (at pp.c:18149)
            PtrDecl: quals=[] (at pp.c:18149)
              TypeDecl: declname='payload', quals=[] (at pp.c:18149)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18149)
            TypeDecl: declname='len', quals=[] (at pp.c:18149)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18149)
          TypeDecl: declname='CC2420ReceiveP__Receive__receive', quals=[] (at pp.c:18149)
            IdentifierType: names=['message_t'] (at None)
    Compound:  (at pp.c:18149)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18151)
        PtrDecl: quals=[] (at pp.c:18151)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18151)
            Struct: name='message_t', packed=False (at pp.c:18151)
      Assignment: op='=' (at pp.c:18155)
        ID: name='__nesc_result' (at pp.c:18155)
        FuncCall:  (at None)
          ID: name='UniqueReceiveP__SubReceive__receive' (at pp.c:18155)
          ExprList:  (at pp.c:18155)
            ID: name='msg' (at pp.c:18155)
            ID: name='payload' (at pp.c:18155)
            ID: name='len' (at pp.c:18155)
      Return:  (at pp.c:18159)
        ID: name='__nesc_result' (at pp.c:18159)
  FuncDef:  (at pp.c:18164)
    Decl: name='CC2420ControlP__LocalIeeeEui64__getId', quals=[], storage=['static', 'inline'] (at pp.c:18164)
      FuncDecl: quals=None (at pp.c:18164)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__LocalIeeeEui64__getId', quals=[] (at pp.c:18164)
          IdentifierType: names=['ieee_eui64_t'] (at None)
    Compound:  (at pp.c:18164)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18166)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18166)
          Struct: name='ieee_eui64', packed=False (at pp.c:18166)
      Assignment: op='=' (at pp.c:18170)
        ID: name='__nesc_result' (at pp.c:18170)
        FuncCall:  (at None)
          ID: name='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId' (at pp.c:18170)
      Return:  (at pp.c:18174)
        ID: name='__nesc_result' (at pp.c:18174)
  FuncDef:  (at pp.c:18179)
    Decl: name='CC2420ControlP__CC2420Config__getExtAddr', quals=[], storage=['inline', 'static'] (at pp.c:18179)
      FuncDecl: quals=None (at pp.c:18179)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__getExtAddr', quals=[] (at pp.c:18179)
          IdentifierType: names=['ieee_eui64_t'] (at None)
    Compound:  (at pp.c:18181)
      Return:  (at pp.c:18182)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__LocalIeeeEui64__getId' (at pp.c:18182)
  FuncDef:  (at pp.c:18186)
    Decl: name='CC2420ReceiveP__CC2420Config__getExtAddr', quals=[], storage=['static', 'inline'] (at pp.c:18186)
      FuncDecl: quals=None (at pp.c:18186)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__getExtAddr', quals=[] (at pp.c:18186)
          IdentifierType: names=['ieee_eui64_t'] (at None)
    Compound:  (at pp.c:18186)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18188)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18188)
          Struct: name='ieee_eui64', packed=False (at pp.c:18188)
      Assignment: op='=' (at pp.c:18192)
        ID: name='__nesc_result' (at pp.c:18192)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__getExtAddr' (at pp.c:18192)
      Return:  (at pp.c:18196)
        ID: name='__nesc_result' (at pp.c:18196)
  FuncDef:  (at pp.c:18205)
    Decl: name='CC2420ReceiveP__CC2420Config__getShortAddr', quals=[], storage=['static', 'inline'] (at pp.c:18205)
      FuncDecl: quals=None (at pp.c:18205)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__getShortAddr', quals=[] (at pp.c:18205)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:18205)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18207)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18207)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18211)
        ID: name='__nesc_result' (at pp.c:18211)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__getShortAddr' (at pp.c:18211)
      Return:  (at pp.c:18215)
        ID: name='__nesc_result' (at pp.c:18215)
  FuncDef:  (at pp.c:18220)
    Decl: name='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[], storage=['inline', 'static'] (at pp.c:18220)
      FuncDecl: quals=None (at pp.c:18220)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled', quals=[] (at pp.c:18220)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18222)
      Compound:  (at pp.c:18223)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18223)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18223)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18223)
        Compound:  (at pp.c:18225)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:18226)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:18226)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='CC2420ControlP__addressRecognition' (at pp.c:18228)
          Compound:  (at pp.c:18230)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:18232)
              ExprList:  (at pp.c:18232)
                ID: name='__nesc_atomic' (at pp.c:18232)
            Return:  (at pp.c:18234)
              ID: name='__nesc_temp' (at pp.c:18234)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:18238)
          ExprList:  (at pp.c:18238)
            ID: name='__nesc_atomic' (at pp.c:18238)
  FuncDef:  (at pp.c:18242)
    Decl: name='CC2420ReceiveP__CC2420Config__isAddressRecognitionEnabled', quals=[], storage=['static', 'inline'] (at pp.c:18242)
      FuncDecl: quals=None (at pp.c:18242)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__isAddressRecognitionEnabled', quals=[] (at pp.c:18242)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18242)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18244)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18244)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18248)
        ID: name='__nesc_result' (at pp.c:18248)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__isAddressRecognitionEnabled' (at pp.c:18248)
      Return:  (at pp.c:18252)
        ID: name='__nesc_result' (at pp.c:18252)
  FuncDef:  (at pp.c:18257)
    Decl: name='CC2420ReceiveP__CC2420PacketBody__getHeader', quals=[], storage=['static', 'inline'] (at pp.c:18257)
      FuncDecl: quals=None (at pp.c:18257)
        ParamList:  (at pp.c:18257)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18257)
            PtrDecl: quals=[] (at pp.c:18257)
              TypeDecl: declname='msg', quals=[] (at pp.c:18257)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18257)
          TypeDecl: declname='CC2420ReceiveP__CC2420PacketBody__getHeader', quals=[] (at pp.c:18257)
            IdentifierType: names=['cc2420_header_t'] (at None)
    Compound:  (at pp.c:18257)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18259)
        PtrDecl: quals=[] (at pp.c:18259)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18259)
            Struct: name='cc2420_header_t', packed=False (at pp.c:18259)
      Assignment: op='=' (at pp.c:18263)
        ID: name='__nesc_result' (at pp.c:18263)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:18263)
          ExprList:  (at pp.c:18263)
            ID: name='msg' (at pp.c:18263)
      Return:  (at pp.c:18267)
        ID: name='__nesc_result' (at pp.c:18267)
  FuncDef:  (at pp.c:18272)
    Decl: name='CC2420ReceiveP__passesAddressCheck', quals=[], storage=['inline', 'static'] (at pp.c:18272)
      FuncDecl: quals=None (at pp.c:18272)
        ParamList:  (at pp.c:18272)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18272)
            PtrDecl: quals=[] (at pp.c:18272)
              TypeDecl: declname='msg', quals=[] (at pp.c:18272)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__passesAddressCheck', quals=[] (at pp.c:18272)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18274)
      Decl: name='header', quals=[], storage=[] (at pp.c:18275)
        PtrDecl: quals=[] (at pp.c:18275)
          TypeDecl: declname='header', quals=[] (at pp.c:18275)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__CC2420PacketBody__getHeader' (at pp.c:18275)
          ExprList:  (at pp.c:18275)
            ID: name='msg' (at pp.c:18275)
      Decl: name='mode', quals=[], storage=[] (at pp.c:18276)
        TypeDecl: declname='mode', quals=[] (at pp.c:18276)
          IdentifierType: names=['int'] (at None)
        BinaryOp: op='&' (at None)
          BinaryOp: op='>>' (at None)
            FuncCall:  (at None)
              ID: name='__nesc_ntoh_leuint16' (at pp.c:18276)
              ExprList:  (at pp.c:18276)
                StructRef: type='.' (at pp.c:18276)
                  StructRef: type='->' (at pp.c:18276)
                    ID: name='header' (at pp.c:18276)
                    ID: name='fcf' (at pp.c:18276)
                  ID: name='nxdata' (at pp.c:18276)
            ID: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:18276)
          Constant: type='int', value='3' (at pp.c:18276)
      Decl: name='ext_addr', quals=[], storage=[] (at pp.c:18277)
        PtrDecl: quals=[] (at pp.c:18277)
          TypeDecl: declname='ext_addr', quals=[] (at pp.c:18277)
            IdentifierType: names=['ieee_eui64_t'] (at None)
      If:  (at pp.c:18279)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__CC2420Config__isAddressRecognitionEnabled' (at pp.c:18279)
        Compound:  (at pp.c:18279)
          Return:  (at pp.c:18280)
            ID: name='TRUE' (at pp.c:18280)
      If:  (at pp.c:18283)
        BinaryOp: op='==' (at pp.c:18283)
          ID: name='mode' (at pp.c:18283)
          ID: name='IEEE154_ADDR_SHORT' (at pp.c:18283)
        Compound:  (at pp.c:18283)
          Return:  (at pp.c:18284)
            BinaryOp: op='||' (at None)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint16' (at pp.c:18284)
                  ExprList:  (at pp.c:18284)
                    StructRef: type='.' (at pp.c:18284)
                      StructRef: type='->' (at pp.c:18284)
                        ID: name='header' (at pp.c:18284)
                        ID: name='dest' (at pp.c:18284)
                      ID: name='nxdata' (at pp.c:18284)
                FuncCall:  (at None)
                  ID: name='CC2420ReceiveP__CC2420Config__getShortAddr' (at pp.c:18284)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint16' (at pp.c:18285)
                  ExprList:  (at pp.c:18285)
                    StructRef: type='.' (at pp.c:18285)
                      StructRef: type='->' (at pp.c:18285)
                        ID: name='header' (at pp.c:18285)
                        ID: name='dest' (at pp.c:18285)
                      ID: name='nxdata' (at pp.c:18285)
                ID: name='IEEE154_BROADCAST_ADDR' (at pp.c:18285)
        Compound:  (at pp.c:18287)
          If:  (at pp.c:18289)
            BinaryOp: op='==' (at pp.c:18289)
              ID: name='mode' (at pp.c:18289)
              ID: name='IEEE154_ADDR_EXT' (at pp.c:18289)
            Compound:  (at pp.c:18289)
              Decl: name='local_addr', quals=[], storage=[] (at pp.c:18290)
                TypeDecl: declname='local_addr', quals=[] (at pp.c:18290)
                  IdentifierType: names=['ieee_eui64_t'] (at None)
                FuncCall:  (at None)
                  ID: name='CC2420ReceiveP__CC2420Config__getExtAddr' (at pp.c:18290)
              Assignment: op='=' (at pp.c:18293)
                ID: name='ext_addr' (at pp.c:18293)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:18293)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['ieee_eui64_t'] (at None)
                  UnaryOp: op='&' (at pp.c:18293)
                    StructRef: type='->' (at pp.c:18293)
                      ID: name='header' (at pp.c:18293)
                      ID: name='dest' (at pp.c:18293)
              Return:  (at pp.c:18294)
                BinaryOp: op='==' (at None)
                  FuncCall:  (at None)
                    ID: name='memcmp' (at pp.c:18294)
                    ExprList:  (at pp.c:18294)
                      StructRef: type='->' (at pp.c:18294)
                        ID: name='ext_addr' (at pp.c:18294)
                        ID: name='data' (at pp.c:18294)
                      StructRef: type='.' (at pp.c:18294)
                        ID: name='local_addr' (at pp.c:18294)
                        ID: name='data' (at pp.c:18294)
                      ID: name='IEEE_EUI64_LENGTH' (at pp.c:18294)
                  Constant: type='int', value='0' (at pp.c:18294)
            Compound:  (at pp.c:18298)
              Return:  (at pp.c:18300)
                ID: name='FALSE' (at pp.c:18300)
  FuncDef:  (at pp.c:18306)
    Decl: name='CC2420ReceiveP__CC2420PacketBody__getMetadata', quals=[], storage=['static', 'inline'] (at pp.c:18306)
      FuncDecl: quals=None (at pp.c:18306)
        ParamList:  (at pp.c:18306)
          Decl: name='msg', quals=[], storage=[] (at pp.c:18306)
            PtrDecl: quals=[] (at pp.c:18306)
              TypeDecl: declname='msg', quals=[] (at pp.c:18306)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:18306)
          TypeDecl: declname='CC2420ReceiveP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:18306)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:18306)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18308)
        PtrDecl: quals=[] (at pp.c:18308)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18308)
            Struct: name='cc2420_metadata_t', packed=False (at pp.c:18308)
      Assignment: op='=' (at pp.c:18312)
        ID: name='__nesc_result' (at pp.c:18312)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:18312)
          ExprList:  (at pp.c:18312)
            ID: name='msg' (at pp.c:18312)
      Return:  (at pp.c:18316)
        ID: name='__nesc_result' (at pp.c:18316)
  FuncDef:  (at pp.c:18321)
    Decl: name='CC2420ReceiveP__receiveDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:18321)
      FuncDecl: quals=None (at pp.c:18321)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__receiveDone_task__runTask', quals=[] (at pp.c:18321)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18323)
      Decl: name='metadata', quals=[], storage=[] (at pp.c:18324)
        PtrDecl: quals=[] (at pp.c:18324)
          TypeDecl: declname='metadata', quals=[] (at pp.c:18324)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__CC2420PacketBody__getMetadata' (at pp.c:18324)
          ExprList:  (at pp.c:18324)
            ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:18324)
      Decl: name='header', quals=[], storage=[] (at pp.c:18325)
        PtrDecl: quals=[] (at pp.c:18325)
          TypeDecl: declname='header', quals=[] (at pp.c:18325)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__CC2420PacketBody__getHeader' (at pp.c:18325)
          ExprList:  (at pp.c:18325)
            ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:18325)
      Decl: name='length', quals=[], storage=[] (at pp.c:18326)
        TypeDecl: declname='length', quals=[] (at pp.c:18326)
          IdentifierType: names=['uint8_t'] (at None)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_leuint8' (at pp.c:18326)
          ExprList:  (at pp.c:18326)
            StructRef: type='.' (at pp.c:18326)
              StructRef: type='->' (at pp.c:18326)
                ID: name='header' (at pp.c:18326)
                ID: name='length' (at pp.c:18326)
              ID: name='nxdata' (at pp.c:18326)
      Decl: name='tmpLen', quals=[], storage=[] (at pp.c:18327)
        TypeDecl: declname='tmpLen', quals=[] (at pp.c:18327)
          IdentifierType: names=['uint8_t'] (at None)
        BinaryOp: op='-' (at pp.c:18327)
          UnaryOp: op='sizeof' (at pp.c:18327)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['message_t'] (at None)
          BinaryOp: op='-' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['size_t'] (at None)
              UnaryOp: op='&' (at None)
                StructRef: type='->' (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:18327)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['message_t'] (at None)
                    Constant: type='int', value='0' (at pp.c:18327)
                  ID: name='data' (at pp.c:18327)
            UnaryOp: op='sizeof' (at pp.c:18327)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['cc2420_header_t'] (at None)
      Decl: name='buf', quals=[], storage=[] (at pp.c:18328)
        PtrDecl: quals=[] (at pp.c:18328)
          TypeDecl: declname='buf', quals=[] (at pp.c:18328)
            IdentifierType: names=['uint8_t'] (at None)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:18328)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
          ID: name='header' (at pp.c:18328)
      FuncCall:  (at None)
        ID: name='__nesc_hton_int8' (at pp.c:18330)
        ExprList:  (at pp.c:18330)
          StructRef: type='.' (at pp.c:18330)
            StructRef: type='->' (at pp.c:18330)
              ID: name='metadata' (at pp.c:18330)
              ID: name='crc' (at pp.c:18330)
            ID: name='nxdata' (at pp.c:18330)
          BinaryOp: op='>>' (at pp.c:18330)
            ArrayRef:  (at pp.c:18330)
              ID: name='buf' (at pp.c:18330)
              ID: name='length' (at pp.c:18330)
            Constant: type='int', value='7' (at pp.c:18330)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:18331)
        ExprList:  (at pp.c:18331)
          StructRef: type='.' (at pp.c:18331)
            StructRef: type='->' (at pp.c:18331)
              ID: name='metadata' (at pp.c:18331)
              ID: name='lqi' (at pp.c:18331)
            ID: name='nxdata' (at pp.c:18331)
          BinaryOp: op='&' (at pp.c:18331)
            ArrayRef:  (at pp.c:18331)
              ID: name='buf' (at pp.c:18331)
              ID: name='length' (at pp.c:18331)
            Constant: type='int', value='0x7f' (at pp.c:18331)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint8' (at pp.c:18332)
        ExprList:  (at pp.c:18332)
          StructRef: type='.' (at pp.c:18332)
            StructRef: type='->' (at pp.c:18332)
              ID: name='metadata' (at pp.c:18332)
              ID: name='rssi' (at pp.c:18332)
            ID: name='nxdata' (at pp.c:18332)
          ArrayRef:  (at pp.c:18332)
            ID: name='buf' (at pp.c:18332)
            BinaryOp: op='-' (at pp.c:18332)
              ID: name='length' (at pp.c:18332)
              Constant: type='int', value='1' (at pp.c:18332)
      If:  (at pp.c:18334)
        BinaryOp: op='&&' (at None)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__passesAddressCheck' (at pp.c:18334)
            ExprList:  (at pp.c:18334)
              ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:18334)
          BinaryOp: op='>=' (at pp.c:18334)
            ID: name='length' (at pp.c:18334)
            ID: name='CC2420_SIZE' (at pp.c:18334)
        Compound:  (at pp.c:18334)
          Assignment: op='=' (at pp.c:18336)
            ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:18336)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__Receive__receive' (at pp.c:18336)
              ExprList:  (at pp.c:18336)
                ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:18336)
                StructRef: type='->' (at pp.c:18336)
                  ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:18336)
                  ID: name='data' (at pp.c:18336)
                BinaryOp: op='-' (at pp.c:18337)
                  ID: name='length' (at pp.c:18337)
                  ID: name='CC2420_SIZE' (at pp.c:18337)
      Compound:  (at pp.c:18339)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18339)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18339)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18339)
        Assignment: op='=' (at pp.c:18341)
          ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:18341)
          ID: name='FALSE' (at pp.c:18341)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:18343)
          ExprList:  (at pp.c:18343)
            ID: name='__nesc_atomic' (at pp.c:18343)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__waitForNextPacket' (at pp.c:18344)
  FuncDef:  (at pp.c:18348)
    Decl: name='dallasid48checkCrc', quals=[], storage=['inline', 'static'] (at pp.c:18348)
      FuncDecl: quals=None (at pp.c:18348)
        ParamList:  (at pp.c:18348)
          Decl: name='id', quals=['const'], storage=[] (at pp.c:18348)
            PtrDecl: quals=[] (at pp.c:18348)
              TypeDecl: declname='id', quals=['const'] (at pp.c:18348)
                IdentifierType: names=['dallasid48_serial_t'] (at None)
        TypeDecl: declname='dallasid48checkCrc', quals=[] (at pp.c:18348)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18350)
      Decl: name='crc', quals=[], storage=[] (at pp.c:18351)
        TypeDecl: declname='crc', quals=[] (at pp.c:18351)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:18351)
      Decl: name='idx', quals=[], storage=[] (at pp.c:18352)
        TypeDecl: declname='idx', quals=[] (at pp.c:18352)
          IdentifierType: names=['uint8_t'] (at None)
      For:  (at pp.c:18355)
        Assignment: op='=' (at pp.c:18355)
          ID: name='idx' (at pp.c:18355)
          Constant: type='int', value='0' (at pp.c:18355)
        BinaryOp: op='<' (at pp.c:18355)
          ID: name='idx' (at pp.c:18355)
          ID: name='DALLASID48_DATA_LENGTH' (at pp.c:18355)
        UnaryOp: op='p++' (at pp.c:18355)
          ID: name='idx' (at pp.c:18355)
        Compound:  (at pp.c:18355)
          Decl: name='i', quals=[], storage=[] (at pp.c:18356)
            TypeDecl: declname='i', quals=[] (at pp.c:18356)
              IdentifierType: names=['uint8_t'] (at None)
          Assignment: op='=' (at pp.c:18359)
            ID: name='crc' (at pp.c:18359)
            BinaryOp: op='^' (at pp.c:18359)
              ID: name='crc' (at pp.c:18359)
              ArrayRef:  (at pp.c:18359)
                StructRef: type='->' (at pp.c:18359)
                  ID: name='id' (at pp.c:18359)
                  ID: name='data' (at pp.c:18359)
                ID: name='idx' (at pp.c:18359)
          For:  (at pp.c:18360)
            Assignment: op='=' (at pp.c:18360)
              ID: name='i' (at pp.c:18360)
              Constant: type='int', value='0' (at pp.c:18360)
            BinaryOp: op='<' (at pp.c:18360)
              ID: name='i' (at pp.c:18360)
              Constant: type='int', value='8' (at pp.c:18360)
            UnaryOp: op='p++' (at pp.c:18360)
              ID: name='i' (at pp.c:18360)
            Compound:  (at pp.c:18360)
              If:  (at pp.c:18361)
                BinaryOp: op='&' (at pp.c:18361)
                  ID: name='crc' (at pp.c:18361)
                  Constant: type='int', value='0x01' (at pp.c:18361)
                Compound:  (at pp.c:18361)
                  Assignment: op='=' (at pp.c:18362)
                    ID: name='crc' (at pp.c:18362)
                    BinaryOp: op='^' (at pp.c:18362)
                      BinaryOp: op='>>' (at pp.c:18362)
                        ID: name='crc' (at pp.c:18362)
                        Constant: type='int', value='1' (at pp.c:18362)
                      Constant: type='int', value='0x8C' (at pp.c:18362)
                Compound:  (at pp.c:18364)
                  Assignment: op='>>=' (at pp.c:18365)
                    ID: name='crc' (at pp.c:18365)
                    Constant: type='int', value='1' (at pp.c:18365)
      Return:  (at pp.c:18369)
        BinaryOp: op='==' (at pp.c:18369)
          ID: name='crc' (at pp.c:18369)
          Constant: type='int', value='0' (at pp.c:18369)
  FuncDef:  (at pp.c:18373)
    Decl: name='OneWireMasterC__BusyWait__wait', quals=[], storage=['static', 'inline'] (at pp.c:18373)
      FuncDecl: quals=None (at pp.c:18373)
        ParamList:  (at pp.c:18373)
          Decl: name='dt', quals=[], storage=[] (at pp.c:18373)
            TypeDecl: declname='dt', quals=[] (at pp.c:18373)
              IdentifierType: names=['OneWireMasterC__BusyWait__size_type'] (at None)
        TypeDecl: declname='OneWireMasterC__BusyWait__wait', quals=[] (at pp.c:18373)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18373)
      FuncCall:  (at None)
        ID: name='BusyWaitCounterC__0__BusyWait__wait' (at pp.c:18375)
        ExprList:  (at pp.c:18375)
          ID: name='dt' (at pp.c:18375)
  FuncDef:  (at pp.c:18380)
    Decl: name='HplMsp430GeneralIOP__12__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:18380)
      FuncDecl: quals=None (at pp.c:18380)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__12__IO__getRaw', quals=[] (at pp.c:18380)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:18382)
      Return:  (at pp.c:18384)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:18384)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='40U' (at pp.c:18384)
          BinaryOp: op='<<' (at pp.c:18384)
            Constant: type='int', value='0x01' (at pp.c:18384)
            Constant: type='int', value='4' (at pp.c:18384)
  FuncDef:  (at pp.c:18388)
    Decl: name='HplMsp430GeneralIOP__12__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:18388)
      FuncDecl: quals=None (at pp.c:18388)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__12__IO__get', quals=[] (at pp.c:18388)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18390)
      Return:  (at pp.c:18392)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='HplMsp430GeneralIOP__12__IO__getRaw' (at pp.c:18392)
          Constant: type='int', value='0' (at pp.c:18392)
  FuncDef:  (at pp.c:18396)
    Decl: name='Msp430GpioC__13__HplGeneralIO__get', quals=[], storage=['static', 'inline'] (at pp.c:18396)
      FuncDecl: quals=None (at pp.c:18396)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__13__HplGeneralIO__get', quals=[] (at pp.c:18396)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18396)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18398)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18398)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18402)
        ID: name='__nesc_result' (at pp.c:18402)
        FuncCall:  (at None)
          ID: name='HplMsp430GeneralIOP__12__IO__get' (at pp.c:18402)
      Return:  (at pp.c:18406)
        ID: name='__nesc_result' (at pp.c:18406)
  FuncDef:  (at pp.c:18411)
    Decl: name='Msp430GpioC__13__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:18411)
      FuncDecl: quals=None (at pp.c:18411)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__13__GeneralIO__get', quals=[] (at pp.c:18411)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18413)
      Return:  (at pp.c:18415)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__13__HplGeneralIO__get' (at pp.c:18415)
  FuncDef:  (at pp.c:18419)
    Decl: name='OneWireMasterC__Pin__get', quals=[], storage=['static', 'inline'] (at pp.c:18419)
      FuncDecl: quals=None (at pp.c:18419)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__Pin__get', quals=[] (at pp.c:18419)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18419)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18421)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18421)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18425)
        ID: name='__nesc_result' (at pp.c:18425)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__13__GeneralIO__get' (at pp.c:18425)
      Return:  (at pp.c:18429)
        ID: name='__nesc_result' (at pp.c:18429)
  FuncDef:  (at pp.c:18434)
    Decl: name='HplMsp430GeneralIOP__12__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:18434)
      FuncDecl: quals=None (at pp.c:18434)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeInput', quals=[] (at pp.c:18434)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18436)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:18439)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='42U' (at pp.c:18439)
        UnaryOp: op='~' (at pp.c:18439)
          BinaryOp: op='<<' (at pp.c:18439)
            Constant: type='int', value='0x01' (at pp.c:18439)
            Constant: type='int', value='4' (at pp.c:18439)
  FuncDef:  (at pp.c:18443)
    Decl: name='Msp430GpioC__13__HplGeneralIO__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:18443)
      FuncDecl: quals=None (at pp.c:18443)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__13__HplGeneralIO__makeInput', quals=[] (at pp.c:18443)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18443)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__12__IO__makeInput' (at pp.c:18445)
  FuncDef:  (at pp.c:18450)
    Decl: name='Msp430GpioC__13__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:18450)
      FuncDecl: quals=None (at pp.c:18450)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__13__GeneralIO__makeInput', quals=[] (at pp.c:18450)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18452)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__13__HplGeneralIO__makeInput' (at pp.c:18454)
  FuncDef:  (at pp.c:18458)
    Decl: name='OneWireMasterC__Pin__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:18458)
      FuncDecl: quals=None (at pp.c:18458)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__Pin__makeInput', quals=[] (at pp.c:18458)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18458)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__13__GeneralIO__makeInput' (at pp.c:18460)
  FuncDef:  (at pp.c:18465)
    Decl: name='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:18465)
      FuncDecl: quals=None (at pp.c:18465)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__12__IO__makeOutput', quals=[] (at pp.c:18465)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18467)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:18470)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='42U' (at pp.c:18470)
        BinaryOp: op='<<' (at pp.c:18470)
          Constant: type='int', value='0x01' (at pp.c:18470)
          Constant: type='int', value='4' (at pp.c:18470)
  FuncDef:  (at pp.c:18474)
    Decl: name='Msp430GpioC__13__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:18474)
      FuncDecl: quals=None (at pp.c:18474)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__13__HplGeneralIO__makeOutput', quals=[] (at pp.c:18474)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18474)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__12__IO__makeOutput' (at pp.c:18476)
  FuncDef:  (at pp.c:18481)
    Decl: name='Msp430GpioC__13__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:18481)
      FuncDecl: quals=None (at pp.c:18481)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__13__GeneralIO__makeOutput', quals=[] (at pp.c:18481)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18483)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__13__HplGeneralIO__makeOutput' (at pp.c:18485)
  FuncDef:  (at pp.c:18489)
    Decl: name='OneWireMasterC__Pin__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:18489)
      FuncDecl: quals=None (at pp.c:18489)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__Pin__makeOutput', quals=[] (at pp.c:18489)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18489)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__13__GeneralIO__makeOutput' (at pp.c:18491)
  FuncDef:  (at pp.c:18496)
    Decl: name='OneWireMasterC__readBit', quals=[], storage=['inline', 'static'] (at pp.c:18496)
      FuncDecl: quals=None (at pp.c:18496)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__readBit', quals=[] (at pp.c:18496)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18498)
      Decl: name='bit', quals=[], storage=[] (at pp.c:18499)
        TypeDecl: declname='bit', quals=[] (at pp.c:18499)
          IdentifierType: names=['bool'] (at None)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeOutput' (at pp.c:18502)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18503)
        ExprList:  (at pp.c:18503)
          ID: name='OneWireMasterC__DELAY_5US' (at pp.c:18503)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeInput' (at pp.c:18504)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18505)
        ExprList:  (at pp.c:18505)
          ID: name='OneWireMasterC__DELAY_5US' (at pp.c:18505)
      Assignment: op='=' (at pp.c:18506)
        ID: name='bit' (at pp.c:18506)
        FuncCall:  (at None)
          ID: name='OneWireMasterC__Pin__get' (at pp.c:18506)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18507)
        ExprList:  (at pp.c:18507)
          ID: name='OneWireMasterC__SLOT_TIME' (at pp.c:18507)
      Return:  (at pp.c:18508)
        ID: name='bit' (at pp.c:18508)
  FuncDef:  (at pp.c:18512)
    Decl: name='OneWireMasterC__readByte', quals=[], storage=['inline', 'static'] (at pp.c:18512)
      FuncDecl: quals=None (at pp.c:18512)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__readByte', quals=[] (at pp.c:18512)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:18514)
      Decl: name='i', quals=[], storage=[] (at pp.c:18515)
        TypeDecl: declname='i', quals=[] (at pp.c:18515)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='c', quals=[], storage=[] (at pp.c:18517)
        TypeDecl: declname='c', quals=[] (at pp.c:18517)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:18517)
      For:  (at pp.c:18520)
        Assignment: op='=' (at pp.c:18520)
          ID: name='i' (at pp.c:18520)
          Constant: type='int', value='0' (at pp.c:18520)
        BinaryOp: op='<' (at pp.c:18520)
          ID: name='i' (at pp.c:18520)
          Constant: type='int', value='8' (at pp.c:18520)
        UnaryOp: op='p++' (at pp.c:18520)
          ID: name='i' (at pp.c:18520)
        Compound:  (at pp.c:18520)
          Assignment: op='>>=' (at pp.c:18521)
            ID: name='c' (at pp.c:18521)
            Constant: type='int', value='1' (at pp.c:18521)
          If:  (at pp.c:18522)
            FuncCall:  (at None)
              ID: name='OneWireMasterC__readBit' (at pp.c:18522)
            Compound:  (at pp.c:18522)
              Assignment: op='|=' (at pp.c:18523)
                ID: name='c' (at pp.c:18523)
                Constant: type='int', value='0x80' (at pp.c:18523)
      Return:  (at pp.c:18526)
        ID: name='c' (at pp.c:18526)
  FuncDef:  (at pp.c:18530)
    Decl: name='OneWireMasterC__writeZero', quals=[], storage=['inline', 'static'] (at pp.c:18530)
      FuncDecl: quals=None (at pp.c:18530)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__writeZero', quals=[] (at pp.c:18530)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18532)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeOutput' (at pp.c:18533)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18534)
        ExprList:  (at pp.c:18534)
          ID: name='OneWireMasterC__DELAY_60US' (at pp.c:18534)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeInput' (at pp.c:18535)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18536)
        ExprList:  (at pp.c:18536)
          ID: name='OneWireMasterC__DELAY_5US' (at pp.c:18536)
  FuncDef:  (at pp.c:18540)
    Decl: name='OneWireMasterC__writeOne', quals=[], storage=['inline', 'static'] (at pp.c:18540)
      FuncDecl: quals=None (at pp.c:18540)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__writeOne', quals=[] (at pp.c:18540)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18542)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeOutput' (at pp.c:18543)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18544)
        ExprList:  (at pp.c:18544)
          ID: name='OneWireMasterC__DELAY_5US' (at pp.c:18544)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeInput' (at pp.c:18545)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18546)
        ExprList:  (at pp.c:18546)
          ID: name='OneWireMasterC__SLOT_TIME' (at pp.c:18546)
  FuncDef:  (at pp.c:18550)
    Decl: name='OneWireMasterC__writeByte', quals=[], storage=['inline', 'static'] (at pp.c:18550)
      FuncDecl: quals=None (at pp.c:18550)
        ParamList:  (at pp.c:18550)
          Decl: name='c', quals=[], storage=[] (at pp.c:18550)
            TypeDecl: declname='c', quals=[] (at pp.c:18550)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='OneWireMasterC__writeByte', quals=[] (at pp.c:18550)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18552)
      Decl: name='j', quals=[], storage=[] (at pp.c:18553)
        TypeDecl: declname='j', quals=[] (at pp.c:18553)
          IdentifierType: names=['uint8_t'] (at None)
      For:  (at pp.c:18556)
        Assignment: op='=' (at pp.c:18556)
          ID: name='j' (at pp.c:18556)
          Constant: type='int', value='0' (at pp.c:18556)
        BinaryOp: op='<' (at pp.c:18556)
          ID: name='j' (at pp.c:18556)
          Constant: type='int', value='8' (at pp.c:18556)
        UnaryOp: op='p++' (at pp.c:18556)
          ID: name='j' (at pp.c:18556)
        Compound:  (at pp.c:18556)
          If:  (at pp.c:18557)
            BinaryOp: op='&' (at pp.c:18557)
              ID: name='c' (at pp.c:18557)
              Constant: type='int', value='0x01' (at pp.c:18557)
            Compound:  (at pp.c:18557)
              FuncCall:  (at None)
                ID: name='OneWireMasterC__writeOne' (at pp.c:18558)
            Compound:  (at pp.c:18560)
              FuncCall:  (at None)
                ID: name='OneWireMasterC__writeZero' (at pp.c:18561)
          Assignment: op='>>=' (at pp.c:18563)
            ID: name='c' (at pp.c:18563)
            Constant: type='int', value='1' (at pp.c:18563)
  FuncDef:  (at pp.c:18568)
    Decl: name='HplMsp430GeneralIOP__12__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:18568)
      FuncDecl: quals=None (at pp.c:18568)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__12__IO__clr', quals=[] (at pp.c:18568)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18570)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:18573)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='41U' (at pp.c:18573)
        UnaryOp: op='~' (at pp.c:18573)
          BinaryOp: op='<<' (at pp.c:18573)
            Constant: type='int', value='0x01' (at pp.c:18573)
            Constant: type='int', value='4' (at pp.c:18573)
  FuncDef:  (at pp.c:18577)
    Decl: name='Msp430GpioC__13__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:18577)
      FuncDecl: quals=None (at pp.c:18577)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__13__HplGeneralIO__clr', quals=[] (at pp.c:18577)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18577)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__12__IO__clr' (at pp.c:18579)
  FuncDef:  (at pp.c:18584)
    Decl: name='Msp430GpioC__13__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:18584)
      FuncDecl: quals=None (at pp.c:18584)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__13__GeneralIO__clr', quals=[] (at pp.c:18584)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18586)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__13__HplGeneralIO__clr' (at pp.c:18588)
  FuncDef:  (at pp.c:18592)
    Decl: name='OneWireMasterC__Pin__clr', quals=[], storage=['static', 'inline'] (at pp.c:18592)
      FuncDecl: quals=None (at pp.c:18592)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__Pin__clr', quals=[] (at pp.c:18592)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18592)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__13__GeneralIO__clr' (at pp.c:18594)
  FuncDef:  (at pp.c:18599)
    Decl: name='OneWireMasterC__reset', quals=[], storage=['inline', 'static'] (at pp.c:18599)
      FuncDecl: quals=None (at pp.c:18599)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='OneWireMasterC__reset', quals=[] (at pp.c:18599)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18601)
      Decl: name='i', quals=[], storage=[] (at pp.c:18602)
        TypeDecl: declname='i', quals=[] (at pp.c:18602)
          IdentifierType: names=['uint16_t'] (at None)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeInput' (at pp.c:18605)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__clr' (at pp.c:18606)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeOutput' (at pp.c:18607)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18608)
        ExprList:  (at pp.c:18608)
          ID: name='OneWireMasterC__RESET_LOW_TIME' (at pp.c:18608)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__Pin__makeInput' (at pp.c:18609)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18610)
        ExprList:  (at pp.c:18610)
          ID: name='OneWireMasterC__DELAY_60US' (at pp.c:18610)
      For:  (at pp.c:18612)
        Assignment: op='=' (at pp.c:18612)
          ID: name='i' (at pp.c:18612)
          Constant: type='int', value='0' (at pp.c:18612)
        BinaryOp: op='<' (at pp.c:18612)
          ID: name='i' (at pp.c:18612)
          ID: name='OneWireMasterC__PRESENCE_DETECT_LOW_TIME' (at pp.c:18612)
        ExprList:  (at pp.c:18612)
          Assignment: op='+=' (at pp.c:18612)
            ID: name='i' (at pp.c:18612)
            ID: name='OneWireMasterC__DELAY_5US' (at pp.c:18612)
          FuncCall:  (at None)
            ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18612)
            ExprList:  (at pp.c:18612)
              ID: name='OneWireMasterC__DELAY_5US' (at pp.c:18612)
        If:  (at pp.c:18613)
          UnaryOp: op='!' (at None)
            FuncCall:  (at None)
              ID: name='OneWireMasterC__Pin__get' (at pp.c:18613)
          Compound:  (at pp.c:18613)
            Break:  (at pp.c:18615)
      FuncCall:  (at None)
        ID: name='OneWireMasterC__BusyWait__wait' (at pp.c:18618)
        ExprList:  (at pp.c:18618)
          BinaryOp: op='-' (at pp.c:18618)
            ID: name='OneWireMasterC__PRESENCE_RESET_HIGH_TIME' (at pp.c:18618)
            ID: name='OneWireMasterC__DELAY_60US' (at pp.c:18618)
      Return:  (at pp.c:18619)
        BinaryOp: op='<' (at pp.c:18619)
          ID: name='i' (at pp.c:18619)
          ID: name='OneWireMasterC__PRESENCE_DETECT_LOW_TIME' (at pp.c:18619)
  FuncDef:  (at pp.c:18623)
    Decl: name='OneWireMasterC__OneWire__read', quals=[], storage=['inline', 'static'] (at pp.c:18623)
      FuncDecl: quals=None (at pp.c:18623)
        ParamList:  (at pp.c:18623)
          Decl: name='cmd', quals=[], storage=[] (at pp.c:18623)
            TypeDecl: declname='cmd', quals=[] (at pp.c:18623)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:18623)
            PtrDecl: quals=[] (at pp.c:18623)
              TypeDecl: declname='buf', quals=[] (at pp.c:18623)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18623)
            TypeDecl: declname='len', quals=[] (at pp.c:18623)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='OneWireMasterC__OneWire__read', quals=[] (at pp.c:18623)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18625)
      Decl: name='e', quals=[], storage=[] (at pp.c:18626)
        TypeDecl: declname='e', quals=[] (at pp.c:18626)
          IdentifierType: names=['error_t'] (at None)
        ID: name='SUCCESS' (at pp.c:18626)
      Compound:  (at pp.c:18629)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:18629)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:18629)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:18629)
        Compound:  (at pp.c:18631)
          If:  (at pp.c:18632)
            FuncCall:  (at None)
              ID: name='OneWireMasterC__reset' (at pp.c:18632)
            Compound:  (at pp.c:18632)
              Decl: name='i', quals=[], storage=[] (at pp.c:18633)
                TypeDecl: declname='i', quals=[] (at pp.c:18633)
                  IdentifierType: names=['uint8_t'] (at None)
              FuncCall:  (at None)
                ID: name='OneWireMasterC__writeByte' (at pp.c:18636)
                ExprList:  (at pp.c:18636)
                  ID: name='cmd' (at pp.c:18636)
              For:  (at pp.c:18637)
                Assignment: op='=' (at pp.c:18637)
                  ID: name='i' (at pp.c:18637)
                  Constant: type='int', value='0' (at pp.c:18637)
                BinaryOp: op='<' (at pp.c:18637)
                  ID: name='i' (at pp.c:18637)
                  ID: name='len' (at pp.c:18637)
                UnaryOp: op='p++' (at pp.c:18637)
                  ID: name='i' (at pp.c:18637)
                Compound:  (at pp.c:18637)
                  Assignment: op='=' (at pp.c:18638)
                    ArrayRef:  (at pp.c:18638)
                      ID: name='buf' (at pp.c:18638)
                      ID: name='i' (at pp.c:18638)
                    FuncCall:  (at None)
                      ID: name='OneWireMasterC__readByte' (at pp.c:18638)
            Compound:  (at pp.c:18641)
              Assignment: op='=' (at pp.c:18642)
                ID: name='e' (at pp.c:18642)
                ID: name='EOFF' (at pp.c:18642)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:18646)
          ExprList:  (at pp.c:18646)
            ID: name='__nesc_atomic' (at pp.c:18646)
      Return:  (at pp.c:18647)
        ID: name='e' (at pp.c:18647)
  FuncDef:  (at pp.c:18651)
    Decl: name='Ds2411P__OneWire__read', quals=[], storage=['static', 'inline'] (at pp.c:18651)
      FuncDecl: quals=None (at pp.c:18651)
        ParamList:  (at pp.c:18651)
          Decl: name='cmd', quals=[], storage=[] (at pp.c:18651)
            TypeDecl: declname='cmd', quals=[] (at pp.c:18651)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:18651)
            PtrDecl: quals=[] (at pp.c:18651)
              TypeDecl: declname='buf', quals=[] (at pp.c:18651)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:18651)
            TypeDecl: declname='len', quals=[] (at pp.c:18651)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Ds2411P__OneWire__read', quals=[] (at pp.c:18651)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18651)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18653)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18653)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18657)
        ID: name='__nesc_result' (at pp.c:18657)
        FuncCall:  (at None)
          ID: name='OneWireMasterC__OneWire__read' (at pp.c:18657)
          ExprList:  (at pp.c:18657)
            ID: name='cmd' (at pp.c:18657)
            ID: name='buf' (at pp.c:18657)
            ID: name='len' (at pp.c:18657)
      Return:  (at pp.c:18661)
        ID: name='__nesc_result' (at pp.c:18661)
  FuncDef:  (at pp.c:18666)
    Decl: name='Ds2411P__readId', quals=[], storage=['inline', 'static'] (at pp.c:18666)
      FuncDecl: quals=None (at pp.c:18666)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Ds2411P__readId', quals=[] (at pp.c:18666)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18668)
      Decl: name='e', quals=[], storage=[] (at pp.c:18669)
        TypeDecl: declname='e', quals=[] (at pp.c:18669)
          IdentifierType: names=['error_t'] (at None)
        FuncCall:  (at None)
          ID: name='Ds2411P__OneWire__read' (at pp.c:18669)
          ExprList:  (at pp.c:18669)
            Constant: type='int', value='0x33' (at pp.c:18669)
            StructRef: type='.' (at pp.c:18669)
              ID: name='Ds2411P__ds2411id' (at pp.c:18669)
              ID: name='data' (at pp.c:18669)
            ID: name='DALLASID48_DATA_LENGTH' (at pp.c:18669)
      If:  (at pp.c:18672)
        BinaryOp: op='==' (at pp.c:18672)
          ID: name='e' (at pp.c:18672)
          ID: name='SUCCESS' (at pp.c:18672)
        Compound:  (at pp.c:18672)
          If:  (at pp.c:18673)
            FuncCall:  (at None)
              ID: name='dallasid48checkCrc' (at pp.c:18673)
              ExprList:  (at pp.c:18673)
                UnaryOp: op='&' (at pp.c:18673)
                  ID: name='Ds2411P__ds2411id' (at pp.c:18673)
            Compound:  (at pp.c:18673)
              Assignment: op='=' (at pp.c:18674)
                ID: name='Ds2411P__haveId' (at pp.c:18674)
                ID: name='TRUE' (at pp.c:18674)
            Compound:  (at pp.c:18676)
              Assignment: op='=' (at pp.c:18677)
                ID: name='e' (at pp.c:18677)
                ID: name='EINVAL' (at pp.c:18677)
      Return:  (at pp.c:18680)
        ID: name='e' (at pp.c:18680)
  FuncDef:  (at pp.c:18683)
    Decl: name='Ds2411P__ReadId48__read', quals=[], storage=['inline', 'static'] (at pp.c:18683)
      FuncDecl: quals=None (at pp.c:18683)
        ParamList:  (at pp.c:18683)
          Decl: name='id', quals=[], storage=[] (at pp.c:18683)
            PtrDecl: quals=[] (at pp.c:18683)
              TypeDecl: declname='id', quals=[] (at pp.c:18683)
                IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Ds2411P__ReadId48__read', quals=[] (at pp.c:18683)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18685)
      Decl: name='e', quals=[], storage=[] (at pp.c:18686)
        TypeDecl: declname='e', quals=[] (at pp.c:18686)
          IdentifierType: names=['error_t'] (at None)
        ID: name='SUCCESS' (at pp.c:18686)
      If:  (at pp.c:18689)
        UnaryOp: op='!' (at pp.c:18689)
          ID: name='Ds2411P__haveId' (at pp.c:18689)
        Compound:  (at pp.c:18689)
          Assignment: op='=' (at pp.c:18690)
            ID: name='e' (at pp.c:18690)
            FuncCall:  (at None)
              ID: name='Ds2411P__readId' (at pp.c:18690)
      If:  (at pp.c:18692)
        ID: name='Ds2411P__haveId' (at pp.c:18692)
        Compound:  (at pp.c:18692)
          Decl: name='i', quals=[], storage=[] (at pp.c:18693)
            TypeDecl: declname='i', quals=[] (at pp.c:18693)
              IdentifierType: names=['uint8_t'] (at None)
          For:  (at pp.c:18696)
            Assignment: op='=' (at pp.c:18696)
              ID: name='i' (at pp.c:18696)
              Constant: type='int', value='0' (at pp.c:18696)
            BinaryOp: op='<' (at pp.c:18696)
              ID: name='i' (at pp.c:18696)
              ID: name='DALLASID48_SERIAL_LENGTH' (at pp.c:18696)
            UnaryOp: op='p++' (at pp.c:18696)
              ID: name='i' (at pp.c:18696)
            Compound:  (at pp.c:18696)
              Assignment: op='=' (at pp.c:18697)
                ArrayRef:  (at pp.c:18697)
                  ID: name='id' (at pp.c:18697)
                  ID: name='i' (at pp.c:18697)
                ArrayRef:  (at pp.c:18697)
                  StructRef: type='.' (at pp.c:18697)
                    ID: name='Ds2411P__ds2411id' (at pp.c:18697)
                    ID: name='serial' (at pp.c:18697)
                  ID: name='i' (at pp.c:18697)
      Return:  (at pp.c:18700)
        ID: name='e' (at pp.c:18700)
  FuncDef:  (at pp.c:18704)
    Decl: name='DallasId48ToIeeeEui64C__ReadId48__read', quals=[], storage=['static', 'inline'] (at pp.c:18704)
      FuncDecl: quals=None (at pp.c:18704)
        ParamList:  (at pp.c:18704)
          Decl: name='id', quals=[], storage=[] (at pp.c:18704)
            PtrDecl: quals=[] (at pp.c:18704)
              TypeDecl: declname='id', quals=[] (at pp.c:18704)
                IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DallasId48ToIeeeEui64C__ReadId48__read', quals=[] (at pp.c:18704)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18704)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18706)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18706)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18710)
        ID: name='__nesc_result' (at pp.c:18710)
        FuncCall:  (at None)
          ID: name='Ds2411P__ReadId48__read' (at pp.c:18710)
          ExprList:  (at pp.c:18710)
            ID: name='id' (at pp.c:18710)
      Return:  (at pp.c:18714)
        ID: name='__nesc_result' (at pp.c:18714)
  FuncDef:  (at pp.c:18719)
    Decl: name='Msp430TimerP__0__Timer__get', quals=[], storage=['inline', 'static'] (at pp.c:18719)
      FuncDecl: quals=None (at pp.c:18719)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__0__Timer__get', quals=[] (at pp.c:18719)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:18720)
      If:  (at pp.c:18725)
        Constant: type='int', value='0' (at pp.c:18725)
        Compound:  (at pp.c:18725)
          Compound:  (at pp.c:18728)
            Decl: name='t0', quals=[], storage=[] (at pp.c:18729)
              TypeDecl: declname='t0', quals=[] (at pp.c:18729)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t1', quals=[], storage=[] (at pp.c:18730)
              TypeDecl: declname='t1', quals=[] (at pp.c:18730)
                IdentifierType: names=['uint16_t'] (at None)
              UnaryOp: op='*' (at None)
                Cast:  (at None)
                  Typename: quals=['volatile'] (at None)
                    PtrDecl: quals=[] (at pp.c:18730)
                      TypeDecl: declname=None, quals=['volatile'] (at None)
                        IdentifierType: names=['uint16_t'] (at None)
                  Constant: type='int', value='368U' (at pp.c:18730)
            DoWhile:  (at pp.c:18733)
              BinaryOp: op='!=' (at pp.c:18741)
                ID: name='t0' (at pp.c:18741)
                ID: name='t1' (at pp.c:18741)
              Compound:  (at pp.c:18733)
                Assignment: op='=' (at pp.c:18735)
                  ID: name='t0' (at pp.c:18735)
                  ID: name='t1' (at pp.c:18735)
                Assignment: op='=' (at pp.c:18737)
                  ID: name='t1' (at pp.c:18737)
                  UnaryOp: op='*' (at None)
                    Cast:  (at None)
                      Typename: quals=['volatile'] (at None)
                        PtrDecl: quals=[] (at pp.c:18737)
                          TypeDecl: declname=None, quals=['volatile'] (at None)
                            IdentifierType: names=['uint16_t'] (at None)
                      Constant: type='int', value='368U' (at pp.c:18737)
            Compound:  (at pp.c:18742)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:18743)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:18743)
                  IdentifierType: names=['int', 'unsigned'] (at None)
                ID: name='t1' (at pp.c:18745)
              Return:  (at pp.c:18748)
                ID: name='__nesc_temp' (at pp.c:18748)
        Compound:  (at pp.c:18754)
          Return:  (at pp.c:18755)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:18755)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='368U' (at pp.c:18755)
  FuncDef:  (at pp.c:18760)
    Decl: name='Msp430CounterC__1__Msp430Timer__get', quals=[], storage=['static', 'inline'] (at pp.c:18760)
      FuncDecl: quals=None (at pp.c:18760)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__1__Msp430Timer__get', quals=[] (at pp.c:18760)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:18760)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18762)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18762)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18766)
        ID: name='__nesc_result' (at pp.c:18766)
        FuncCall:  (at None)
          ID: name='Msp430TimerP__0__Timer__get' (at pp.c:18766)
      Return:  (at pp.c:18770)
        ID: name='__nesc_result' (at pp.c:18770)
  FuncDef:  (at pp.c:18775)
    Decl: name='Msp430CounterC__1__Counter__get', quals=[], storage=['inline', 'static'] (at pp.c:18775)
      FuncDecl: quals=None (at pp.c:18775)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430CounterC__1__Counter__get', quals=[] (at pp.c:18775)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:18776)
      Return:  (at pp.c:18777)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__1__Msp430Timer__get' (at pp.c:18777)
  FuncDef:  (at pp.c:18781)
    Decl: name='BusyWaitCounterC__0__Counter__get', quals=[], storage=['static', 'inline'] (at pp.c:18781)
      FuncDecl: quals=None (at pp.c:18781)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='BusyWaitCounterC__0__Counter__get', quals=[] (at pp.c:18781)
          IdentifierType: names=['BusyWaitCounterC__0__Counter__size_type'] (at None)
    Compound:  (at pp.c:18781)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18783)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18783)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18787)
        ID: name='__nesc_result' (at pp.c:18787)
        FuncCall:  (at None)
          ID: name='Msp430CounterC__1__Counter__get' (at pp.c:18787)
      Return:  (at pp.c:18791)
        ID: name='__nesc_result' (at pp.c:18791)
  FuncDef:  (at pp.c:18796)
    Decl: name='CC2420SpiP__Resource__isOwner', quals=[], storage=['inline', 'static'] (at pp.c:18796)
      FuncDecl: quals=None (at pp.c:18796)
        ParamList:  (at pp.c:18796)
          Decl: name='id', quals=[], storage=[] (at pp.c:18796)
            TypeDecl: declname='id', quals=[] (at pp.c:18796)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__isOwner', quals=[] (at pp.c:18796)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:18798)
      Compound:  (at pp.c:18801)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:18802)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:18802)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='==' (at pp.c:18804)
            ID: name='CC2420SpiP__m_holder' (at pp.c:18804)
            ID: name='id' (at pp.c:18804)
        Return:  (at pp.c:18807)
          ID: name='__nesc_temp' (at pp.c:18807)
  FuncDef:  (at pp.c:18812)
    Decl: name='CC2420ReceiveP__SpiResource__isOwner', quals=[], storage=['static', 'inline'] (at pp.c:18812)
      FuncDecl: quals=None (at pp.c:18812)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SpiResource__isOwner', quals=[] (at pp.c:18812)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:18812)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18814)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18814)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18818)
        ID: name='__nesc_result' (at pp.c:18818)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__isOwner' (at pp.c:18818)
          ExprList:  (at pp.c:18818)
            ID: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:18818)
      Return:  (at pp.c:18822)
        ID: name='__nesc_result' (at pp.c:18822)
  FuncDef:  (at pp.c:18827)
    Decl: name='CC2420ReceiveP__SpiResource__immediateRequest', quals=[], storage=['static', 'inline'] (at pp.c:18827)
      FuncDecl: quals=None (at pp.c:18827)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SpiResource__immediateRequest', quals=[] (at pp.c:18827)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18827)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18829)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18829)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18833)
        ID: name='__nesc_result' (at pp.c:18833)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__immediateRequest' (at pp.c:18833)
          ExprList:  (at pp.c:18833)
            ID: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:18833)
      Return:  (at pp.c:18837)
        ID: name='__nesc_result' (at pp.c:18837)
  FuncDef:  (at pp.c:18842)
    Decl: name='CC2420ReceiveP__SpiResource__request', quals=[], storage=['static', 'inline'] (at pp.c:18842)
      FuncDecl: quals=None (at pp.c:18842)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SpiResource__request', quals=[] (at pp.c:18842)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18842)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18844)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18844)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18848)
        ID: name='__nesc_result' (at pp.c:18848)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__request' (at pp.c:18848)
          ExprList:  (at pp.c:18848)
            ID: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:18848)
      Return:  (at pp.c:18852)
        ID: name='__nesc_result' (at pp.c:18852)
  FuncDef:  (at pp.c:18857)
    Decl: name='CC2420ControlP__RXCTRL1__write', quals=[], storage=['static', 'inline'] (at pp.c:18857)
      FuncDecl: quals=None (at pp.c:18857)
        ParamList:  (at pp.c:18857)
          Decl: name='data', quals=[], storage=[] (at pp.c:18857)
            TypeDecl: declname='data', quals=[] (at pp.c:18857)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__RXCTRL1__write', quals=[] (at pp.c:18857)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:18857)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18859)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18859)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18863)
        ID: name='__nesc_result' (at pp.c:18863)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:18863)
          ExprList:  (at pp.c:18863)
            ID: name='CC2420_RXCTRL1' (at pp.c:18863)
            ID: name='data' (at pp.c:18863)
      Return:  (at pp.c:18867)
        ID: name='__nesc_result' (at pp.c:18867)
  FuncDef:  (at pp.c:18871)
    Decl: name='CC2420ControlP__IOCFG0__write', quals=[], storage=['static', 'inline'] (at pp.c:18871)
      FuncDecl: quals=None (at pp.c:18871)
        ParamList:  (at pp.c:18871)
          Decl: name='data', quals=[], storage=[] (at pp.c:18871)
            TypeDecl: declname='data', quals=[] (at pp.c:18871)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__IOCFG0__write', quals=[] (at pp.c:18871)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:18871)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18873)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18873)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18877)
        ID: name='__nesc_result' (at pp.c:18877)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:18877)
          ExprList:  (at pp.c:18877)
            ID: name='CC2420_IOCFG0' (at pp.c:18877)
            ID: name='data' (at pp.c:18877)
      Return:  (at pp.c:18881)
        ID: name='__nesc_result' (at pp.c:18881)
  FuncDef:  (at pp.c:18886)
    Decl: name='CC2420ControlP__SXOSCON__strobe', quals=[], storage=['static', 'inline'] (at pp.c:18886)
      FuncDecl: quals=None (at pp.c:18886)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SXOSCON__strobe', quals=[] (at pp.c:18886)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:18886)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:18888)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:18888)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:18892)
        ID: name='__nesc_result' (at pp.c:18892)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:18892)
          ExprList:  (at pp.c:18892)
            ID: name='CC2420_SXOSCON' (at pp.c:18892)
      Return:  (at pp.c:18896)
        ID: name='__nesc_result' (at pp.c:18896)
  FuncDef:  (at pp.c:18901)
    Decl: name='HplMsp430InterruptP__Port14__enable', quals=[], storage=['inline', 'static'] (at pp.c:18901)
      FuncDecl: quals=None (at pp.c:18901)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port14__enable', quals=[] (at pp.c:18901)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18903)
      Assignment: op='|=' (at pp.c:18905)
        ID: name='P1IE' (at pp.c:18905)
        BinaryOp: op='<<' (at pp.c:18905)
          Constant: type='int', value='1' (at pp.c:18905)
          Constant: type='int', value='4' (at pp.c:18905)
  FuncDef:  (at pp.c:18909)
    Decl: name='Msp430InterruptC__0__HplInterrupt__enable', quals=[], storage=['static', 'inline'] (at pp.c:18909)
      FuncDecl: quals=None (at pp.c:18909)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__enable', quals=[] (at pp.c:18909)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18909)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port14__enable' (at pp.c:18911)
  FuncDef:  (at pp.c:18916)
    Decl: name='HplMsp430InterruptP__Port14__edge', quals=[], storage=['inline', 'static'] (at pp.c:18916)
      FuncDecl: quals=None (at pp.c:18916)
        ParamList:  (at pp.c:18916)
          Decl: name='l2h', quals=[], storage=[] (at pp.c:18916)
            TypeDecl: declname='l2h', quals=[] (at pp.c:18916)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port14__edge', quals=[] (at pp.c:18916)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18918)
      Compound:  (at pp.c:18921)
        If:  (at pp.c:18922)
          ID: name='l2h' (at pp.c:18922)
          Compound:  (at pp.c:18922)
            Assignment: op='&=' (at pp.c:18924)
              ID: name='P1IES' (at pp.c:18924)
              UnaryOp: op='~' (at pp.c:18924)
                BinaryOp: op='<<' (at pp.c:18924)
                  Constant: type='int', value='1' (at pp.c:18924)
                  Constant: type='int', value='4' (at pp.c:18924)
          Compound:  (at pp.c:18926)
            Assignment: op='|=' (at pp.c:18928)
              ID: name='P1IES' (at pp.c:18928)
              BinaryOp: op='<<' (at pp.c:18928)
                Constant: type='int', value='1' (at pp.c:18928)
                Constant: type='int', value='4' (at pp.c:18928)
  FuncDef:  (at pp.c:18934)
    Decl: name='Msp430InterruptC__0__HplInterrupt__edge', quals=[], storage=['static', 'inline'] (at pp.c:18934)
      FuncDecl: quals=None (at pp.c:18934)
        ParamList:  (at pp.c:18934)
          Decl: name='low_to_high', quals=[], storage=[] (at pp.c:18934)
            TypeDecl: declname='low_to_high', quals=[] (at pp.c:18934)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__edge', quals=[] (at pp.c:18934)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18934)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port14__edge' (at pp.c:18936)
        ExprList:  (at pp.c:18936)
          ID: name='low_to_high' (at pp.c:18936)
  FuncDef:  (at pp.c:18941)
    Decl: name='HplMsp430InterruptP__Port14__clear', quals=[], storage=['inline', 'static'] (at pp.c:18941)
      FuncDecl: quals=None (at pp.c:18941)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port14__clear', quals=[] (at pp.c:18941)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18943)
      Assignment: op='&=' (at pp.c:18945)
        ID: name='P1IFG' (at pp.c:18945)
        UnaryOp: op='~' (at pp.c:18945)
          BinaryOp: op='<<' (at pp.c:18945)
            Constant: type='int', value='1' (at pp.c:18945)
            Constant: type='int', value='4' (at pp.c:18945)
  FuncDef:  (at pp.c:18949)
    Decl: name='Msp430InterruptC__0__HplInterrupt__clear', quals=[], storage=['static', 'inline'] (at pp.c:18949)
      FuncDecl: quals=None (at pp.c:18949)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__clear', quals=[] (at pp.c:18949)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18949)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port14__clear' (at pp.c:18951)
  FuncDef:  (at pp.c:18956)
    Decl: name='HplMsp430InterruptP__Port14__disable', quals=[], storage=['inline', 'static'] (at pp.c:18956)
      FuncDecl: quals=None (at pp.c:18956)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port14__disable', quals=[] (at pp.c:18956)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18958)
      Assignment: op='&=' (at pp.c:18960)
        ID: name='P1IE' (at pp.c:18960)
        UnaryOp: op='~' (at pp.c:18960)
          BinaryOp: op='<<' (at pp.c:18960)
            Constant: type='int', value='1' (at pp.c:18960)
            Constant: type='int', value='4' (at pp.c:18960)
  FuncDef:  (at pp.c:18964)
    Decl: name='Msp430InterruptC__0__HplInterrupt__disable', quals=[], storage=['static', 'inline'] (at pp.c:18964)
      FuncDecl: quals=None (at pp.c:18964)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__disable', quals=[] (at pp.c:18964)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:18964)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port14__disable' (at pp.c:18966)
  FuncDef:  (at pp.c:18971)
    Decl: name='Msp430InterruptC__0__Interrupt__disable', quals=[], storage=['inline', 'static'] (at pp.c:18971)
      FuncDecl: quals=None (at pp.c:18971)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__Interrupt__disable', quals=[] (at pp.c:18971)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18973)
      Compound:  (at pp.c:18976)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__HplInterrupt__disable' (at pp.c:18977)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__HplInterrupt__clear' (at pp.c:18978)
      Return:  (at pp.c:18980)
        ID: name='SUCCESS' (at pp.c:18980)
  FuncDef:  (at pp.c:18984)
    Decl: name='Msp430InterruptC__0__enable', quals=[], storage=['inline', 'static'] (at pp.c:18984)
      FuncDecl: quals=None (at pp.c:18984)
        ParamList:  (at pp.c:18984)
          Decl: name='rising', quals=[], storage=[] (at pp.c:18984)
            TypeDecl: declname='rising', quals=[] (at pp.c:18984)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__enable', quals=[] (at pp.c:18984)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18986)
      Compound:  (at pp.c:18989)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__Interrupt__disable' (at pp.c:18990)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__HplInterrupt__edge' (at pp.c:18991)
          ExprList:  (at pp.c:18991)
            ID: name='rising' (at pp.c:18991)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__HplInterrupt__enable' (at pp.c:18992)
      Return:  (at pp.c:18994)
        ID: name='SUCCESS' (at pp.c:18994)
  FuncDef:  (at pp.c:18997)
    Decl: name='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[], storage=['inline', 'static'] (at pp.c:18997)
      FuncDecl: quals=None (at pp.c:18997)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__Interrupt__enableRisingEdge', quals=[] (at pp.c:18997)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:18999)
      Return:  (at pp.c:19000)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__enable' (at pp.c:19000)
          ExprList:  (at pp.c:19000)
            ID: name='TRUE' (at pp.c:19000)
  FuncDef:  (at pp.c:19004)
    Decl: name='CC2420ControlP__InterruptCCA__enableRisingEdge', quals=[], storage=['static', 'inline'] (at pp.c:19004)
      FuncDecl: quals=None (at pp.c:19004)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__InterruptCCA__enableRisingEdge', quals=[] (at pp.c:19004)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19004)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19006)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19006)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19010)
        ID: name='__nesc_result' (at pp.c:19010)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__Interrupt__enableRisingEdge' (at pp.c:19010)
      Return:  (at pp.c:19014)
        ID: name='__nesc_result' (at pp.c:19014)
  FuncDef:  (at pp.c:19019)
    Decl: name='CC2420ControlP__IOCFG1__write', quals=[], storage=['static', 'inline'] (at pp.c:19019)
      FuncDecl: quals=None (at pp.c:19019)
        ParamList:  (at pp.c:19019)
          Decl: name='data', quals=[], storage=[] (at pp.c:19019)
            TypeDecl: declname='data', quals=[] (at pp.c:19019)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__IOCFG1__write', quals=[] (at pp.c:19019)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:19019)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19021)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19021)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19025)
        ID: name='__nesc_result' (at pp.c:19025)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:19025)
          ExprList:  (at pp.c:19025)
            ID: name='CC2420_IOCFG1' (at pp.c:19025)
            ID: name='data' (at pp.c:19025)
      Return:  (at pp.c:19029)
        ID: name='__nesc_result' (at pp.c:19029)
  FuncDef:  (at pp.c:19034)
    Decl: name='CC2420ControlP__CC2420Power__startOscillator', quals=[], storage=['inline', 'static'] (at pp.c:19034)
      FuncDecl: quals=None (at pp.c:19034)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__startOscillator', quals=[] (at pp.c:19034)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19036)
      Compound:  (at pp.c:19037)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19037)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19037)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19037)
        Compound:  (at pp.c:19039)
          If:  (at pp.c:19040)
            BinaryOp: op='!=' (at pp.c:19040)
              ID: name='CC2420ControlP__m_state' (at pp.c:19040)
              ID: name='CC2420ControlP__S_VREG_STARTED' (at pp.c:19040)
            Compound:  (at pp.c:19040)
              Compound:  (at pp.c:19041)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:19042)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:19042)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:19044)
                Compound:  (at pp.c:19046)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:19048)
                    ExprList:  (at pp.c:19048)
                      ID: name='__nesc_atomic' (at pp.c:19048)
                  Return:  (at pp.c:19050)
                    ID: name='__nesc_temp' (at pp.c:19050)
          Assignment: op='=' (at pp.c:19055)
            ID: name='CC2420ControlP__m_state' (at pp.c:19055)
            ID: name='CC2420ControlP__S_XOSC_STARTING' (at pp.c:19055)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__IOCFG1__write' (at pp.c:19056)
            ExprList:  (at pp.c:19056)
              BinaryOp: op='<<' (at pp.c:19056)
                ID: name='CC2420_SFDMUX_XOSC16M_STABLE' (at pp.c:19056)
                ID: name='CC2420_IOCFG1_CCAMUX' (at pp.c:19057)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__InterruptCCA__enableRisingEdge' (at pp.c:19059)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__SXOSCON__strobe' (at pp.c:19060)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__IOCFG0__write' (at pp.c:19062)
            ExprList:  (at pp.c:19062)
              BinaryOp: op='|' (at pp.c:19062)
                BinaryOp: op='<<' (at pp.c:19062)
                  Constant: type='int', value='1' (at pp.c:19062)
                  ID: name='CC2420_IOCFG0_FIFOP_POLARITY' (at pp.c:19062)
                BinaryOp: op='<<' (at pp.c:19063)
                  Constant: type='int', value='127' (at pp.c:19063)
                  ID: name='CC2420_IOCFG0_FIFOP_THR' (at pp.c:19063)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__writeFsctrl' (at pp.c:19065)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__writeMdmctrl0' (at pp.c:19066)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__RXCTRL1__write' (at pp.c:19068)
            ExprList:  (at pp.c:19068)
              BinaryOp: op='|' (at pp.c:19068)
                BinaryOp: op='|' (at pp.c:19068)
                  BinaryOp: op='|' (at pp.c:19068)
                    BinaryOp: op='|' (at pp.c:19068)
                      BinaryOp: op='|' (at pp.c:19068)
                        BinaryOp: op='|' (at pp.c:19068)
                          BinaryOp: op='<<' (at pp.c:19068)
                            Constant: type='int', value='1' (at pp.c:19068)
                            ID: name='CC2420_RXCTRL1_RXBPF_LOCUR' (at pp.c:19068)
                          BinaryOp: op='<<' (at pp.c:19069)
                            Constant: type='int', value='1' (at pp.c:19069)
                            ID: name='CC2420_RXCTRL1_LOW_LOWGAIN' (at pp.c:19069)
                        BinaryOp: op='<<' (at pp.c:19070)
                          Constant: type='int', value='1' (at pp.c:19070)
                          ID: name='CC2420_RXCTRL1_HIGH_HGM' (at pp.c:19070)
                      BinaryOp: op='<<' (at pp.c:19071)
                        Constant: type='int', value='1' (at pp.c:19071)
                        ID: name='CC2420_RXCTRL1_LNA_CAP_ARRAY' (at pp.c:19071)
                    BinaryOp: op='<<' (at pp.c:19072)
                      Constant: type='int', value='1' (at pp.c:19072)
                      ID: name='CC2420_RXCTRL1_RXMIX_TAIL' (at pp.c:19072)
                  BinaryOp: op='<<' (at pp.c:19073)
                    Constant: type='int', value='1' (at pp.c:19073)
                    ID: name='CC2420_RXCTRL1_RXMIX_VCM' (at pp.c:19073)
                BinaryOp: op='<<' (at pp.c:19074)
                  Constant: type='int', value='2' (at pp.c:19074)
                  ID: name='CC2420_RXCTRL1_RXMIX_CURRENT' (at pp.c:19074)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19077)
          ExprList:  (at pp.c:19077)
            ID: name='__nesc_atomic' (at pp.c:19077)
      Return:  (at pp.c:19078)
        ID: name='SUCCESS' (at pp.c:19078)
  FuncDef:  (at pp.c:19082)
    Decl: name='CC2420CsmaP__CC2420Power__startOscillator', quals=[], storage=['static', 'inline'] (at pp.c:19082)
      FuncDecl: quals=None (at pp.c:19082)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__startOscillator', quals=[] (at pp.c:19082)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19082)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19084)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19084)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19088)
        ID: name='__nesc_result' (at pp.c:19088)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Power__startOscillator' (at pp.c:19088)
      Return:  (at pp.c:19092)
        ID: name='__nesc_result' (at pp.c:19092)
  FuncDef:  (at pp.c:19097)
    Decl: name='CC2420CsmaP__Resource__granted', quals=[], storage=['inline', 'static'] (at pp.c:19097)
      FuncDecl: quals=None (at pp.c:19097)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__Resource__granted', quals=[] (at pp.c:19097)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19099)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Power__startOscillator' (at pp.c:19100)
  FuncDef:  (at pp.c:19104)
    Decl: name='CC2420ControlP__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:19104)
      FuncDecl: quals=None (at pp.c:19104)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__Resource__granted', quals=[] (at pp.c:19104)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19104)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__Resource__granted' (at pp.c:19106)
  FuncDef:  (at pp.c:19111)
    Decl: name='CC2420ControlP__CSN__clr', quals=[], storage=['static', 'inline'] (at pp.c:19111)
      FuncDecl: quals=None (at pp.c:19111)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CSN__clr', quals=[] (at pp.c:19111)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19111)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__GeneralIO__clr' (at pp.c:19113)
  FuncDef:  (at pp.c:19118)
    Decl: name='CC2420ControlP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:19118)
      FuncDecl: quals=None (at pp.c:19118)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SpiResource__granted', quals=[] (at pp.c:19118)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19120)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__clr' (at pp.c:19121)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__Resource__granted' (at pp.c:19122)
  FuncDef:  (at pp.c:19126)
    Decl: name='CC2420ControlP__syncDone__postTask', quals=[], storage=['static', 'inline'] (at pp.c:19126)
      FuncDecl: quals=None (at pp.c:19126)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__syncDone__postTask', quals=[] (at pp.c:19126)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19126)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19128)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19128)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19132)
        ID: name='__nesc_result' (at pp.c:19132)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:19132)
          ExprList:  (at pp.c:19132)
            ID: name='CC2420ControlP__syncDone' (at pp.c:19132)
      Return:  (at pp.c:19136)
        ID: name='__nesc_result' (at pp.c:19136)
  FuncDef:  (at pp.c:19141)
    Decl: name='CC2420ControlP__SyncResource__release', quals=[], storage=['static', 'inline'] (at pp.c:19141)
      FuncDecl: quals=None (at pp.c:19141)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SyncResource__release', quals=[] (at pp.c:19141)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19141)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19143)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19143)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19147)
        ID: name='__nesc_result' (at pp.c:19147)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__release' (at pp.c:19147)
          ExprList:  (at pp.c:19147)
            ID: name='CC2420SpiC__1__CLIENT_ID' (at pp.c:19147)
      Return:  (at pp.c:19151)
        ID: name='__nesc_result' (at pp.c:19151)
  FuncDef:  (at pp.c:19156)
    Decl: name='CC2420ControlP__CSN__set', quals=[], storage=['static', 'inline'] (at pp.c:19156)
      FuncDecl: quals=None (at pp.c:19156)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CSN__set', quals=[] (at pp.c:19156)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19156)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__GeneralIO__set' (at pp.c:19158)
  FuncDef:  (at pp.c:19163)
    Decl: name='CC2420ControlP__SRXON__strobe', quals=[], storage=['static', 'inline'] (at pp.c:19163)
      FuncDecl: quals=None (at pp.c:19163)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SRXON__strobe', quals=[] (at pp.c:19163)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:19163)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19165)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19165)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19169)
        ID: name='__nesc_result' (at pp.c:19169)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:19169)
          ExprList:  (at pp.c:19169)
            ID: name='CC2420_SRXON' (at pp.c:19169)
      Return:  (at pp.c:19173)
        ID: name='__nesc_result' (at pp.c:19173)
  FuncDef:  (at pp.c:19177)
    Decl: name='CC2420ControlP__SRFOFF__strobe', quals=[], storage=['static', 'inline'] (at pp.c:19177)
      FuncDecl: quals=None (at pp.c:19177)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SRFOFF__strobe', quals=[] (at pp.c:19177)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:19177)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19179)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19179)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19183)
        ID: name='__nesc_result' (at pp.c:19183)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:19183)
          ExprList:  (at pp.c:19183)
            ID: name='CC2420_SRFOFF' (at pp.c:19183)
      Return:  (at pp.c:19187)
        ID: name='__nesc_result' (at pp.c:19187)
  FuncDef:  (at pp.c:19192)
    Decl: name='CC2420ControlP__SyncResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:19192)
      FuncDecl: quals=None (at pp.c:19192)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SyncResource__granted', quals=[] (at pp.c:19192)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19194)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__clr' (at pp.c:19195)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__SRFOFF__strobe' (at pp.c:19196)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__writeFsctrl' (at pp.c:19197)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__writeMdmctrl0' (at pp.c:19198)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__writeId' (at pp.c:19199)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__set' (at pp.c:19200)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__clr' (at pp.c:19201)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__SRXON__strobe' (at pp.c:19202)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__set' (at pp.c:19203)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__SyncResource__release' (at pp.c:19204)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__syncDone__postTask' (at pp.c:19205)
  FuncDef:  (at pp.c:19209)
    Decl: name='CC2420ControlP__ReadRssi__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:19209)
      FuncDecl: quals=None (at pp.c:19209)
        ParamList:  (at pp.c:19209)
          Decl: name='error', quals=[], storage=[] (at pp.c:19209)
            TypeDecl: declname='error', quals=[] (at pp.c:19209)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:19209)
            TypeDecl: declname='data', quals=[] (at pp.c:19209)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__ReadRssi__default__readDone', quals=[] (at pp.c:19209)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19211)
  FuncDef:  (at pp.c:19215)
    Decl: name='CC2420ControlP__ReadRssi__readDone', quals=[], storage=['static', 'inline'] (at pp.c:19215)
      FuncDecl: quals=None (at pp.c:19215)
        ParamList:  (at pp.c:19215)
          Decl: name='result', quals=[], storage=[] (at pp.c:19215)
            TypeDecl: declname='result', quals=[] (at pp.c:19215)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='val', quals=[], storage=[] (at pp.c:19215)
            TypeDecl: declname='val', quals=[] (at pp.c:19215)
              IdentifierType: names=['CC2420ControlP__ReadRssi__val_t'] (at None)
        TypeDecl: declname='CC2420ControlP__ReadRssi__readDone', quals=[] (at pp.c:19215)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19215)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__ReadRssi__default__readDone' (at pp.c:19217)
        ExprList:  (at pp.c:19217)
          ID: name='result' (at pp.c:19217)
          ID: name='val' (at pp.c:19217)
  FuncDef:  (at pp.c:19222)
    Decl: name='CC2420ControlP__RssiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:19222)
      FuncDecl: quals=None (at pp.c:19222)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__RssiResource__release', quals=[] (at pp.c:19222)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19222)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19224)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19224)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19228)
        ID: name='__nesc_result' (at pp.c:19228)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__release' (at pp.c:19228)
          ExprList:  (at pp.c:19228)
            ID: name='CC2420SpiC__2__CLIENT_ID' (at pp.c:19228)
      Return:  (at pp.c:19232)
        ID: name='__nesc_result' (at pp.c:19232)
  FuncDef:  (at pp.c:19237)
    Decl: name='CC2420SpiP__Reg__read', quals=[], storage=['inline', 'static'] (at pp.c:19237)
      FuncDecl: quals=None (at pp.c:19237)
        ParamList:  (at pp.c:19237)
          Decl: name='addr', quals=[], storage=[] (at pp.c:19237)
            TypeDecl: declname='addr', quals=[] (at pp.c:19237)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:19237)
            PtrDecl: quals=[] (at pp.c:19237)
              TypeDecl: declname='data', quals=[] (at pp.c:19237)
                IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Reg__read', quals=[] (at pp.c:19237)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:19239)
      Decl: name='status', quals=[], storage=[] (at pp.c:19241)
        TypeDecl: declname='status', quals=[] (at pp.c:19241)
          IdentifierType: names=['cc2420_status_t'] (at None)
        Constant: type='int', value='0' (at pp.c:19241)
      Compound:  (at pp.c:19243)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19243)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19243)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19243)
        Compound:  (at pp.c:19245)
          If:  (at pp.c:19246)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:19246)
            Compound:  (at pp.c:19246)
              Compound:  (at pp.c:19247)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:19248)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:19248)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='status' (at pp.c:19250)
                Compound:  (at pp.c:19252)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:19254)
                    ExprList:  (at pp.c:19254)
                      ID: name='__nesc_atomic' (at pp.c:19254)
                  Return:  (at pp.c:19256)
                    ID: name='__nesc_temp' (at pp.c:19256)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19262)
          ExprList:  (at pp.c:19262)
            ID: name='__nesc_atomic' (at pp.c:19262)
      Assignment: op='=' (at pp.c:19264)
        ID: name='status' (at pp.c:19264)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:19264)
          ExprList:  (at pp.c:19264)
            BinaryOp: op='|' (at pp.c:19264)
              ID: name='addr' (at pp.c:19264)
              Constant: type='int', value='0x40' (at pp.c:19264)
      Assignment: op='=' (at pp.c:19265)
        UnaryOp: op='*' (at pp.c:19265)
          ID: name='data' (at pp.c:19265)
        BinaryOp: op='<<' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint16_t'] (at None)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__SpiByte__write' (at pp.c:19265)
              ExprList:  (at pp.c:19265)
                Constant: type='int', value='0' (at pp.c:19265)
          Constant: type='int', value='8' (at pp.c:19265)
      Assignment: op='|=' (at pp.c:19266)
        UnaryOp: op='*' (at pp.c:19266)
          ID: name='data' (at pp.c:19266)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:19266)
          ExprList:  (at pp.c:19266)
            Constant: type='int', value='0' (at pp.c:19266)
      Return:  (at pp.c:19268)
        ID: name='status' (at pp.c:19268)
  FuncDef:  (at pp.c:19272)
    Decl: name='CC2420ControlP__RSSI__read', quals=[], storage=['static', 'inline'] (at pp.c:19272)
      FuncDecl: quals=None (at pp.c:19272)
        ParamList:  (at pp.c:19272)
          Decl: name='data', quals=[], storage=[] (at pp.c:19272)
            PtrDecl: quals=[] (at pp.c:19272)
              TypeDecl: declname='data', quals=[] (at pp.c:19272)
                IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__RSSI__read', quals=[] (at pp.c:19272)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:19272)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19274)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19274)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19278)
        ID: name='__nesc_result' (at pp.c:19278)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__read' (at pp.c:19278)
          ExprList:  (at pp.c:19278)
            ID: name='CC2420_RSSI' (at pp.c:19278)
            ID: name='data' (at pp.c:19278)
      Return:  (at pp.c:19282)
        ID: name='__nesc_result' (at pp.c:19282)
  FuncDef:  (at pp.c:19287)
    Decl: name='CC2420ControlP__RssiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:19287)
      FuncDecl: quals=None (at pp.c:19287)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__RssiResource__granted', quals=[] (at pp.c:19287)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19289)
      Decl: name='data', quals=[], storage=[] (at pp.c:19290)
        TypeDecl: declname='data', quals=[] (at pp.c:19290)
          IdentifierType: names=['uint16_t'] (at None)
        Constant: type='int', value='0' (at pp.c:19290)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__clr' (at pp.c:19293)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__RSSI__read' (at pp.c:19294)
        ExprList:  (at pp.c:19294)
          UnaryOp: op='&' (at pp.c:19294)
            ID: name='data' (at pp.c:19294)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__set' (at pp.c:19295)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__RssiResource__release' (at pp.c:19297)
      Assignment: op='+=' (at pp.c:19298)
        ID: name='data' (at pp.c:19298)
        Constant: type='int', value='0x7f' (at pp.c:19298)
      Assignment: op='&=' (at pp.c:19299)
        ID: name='data' (at pp.c:19299)
        Constant: type='int', value='0x00ff' (at pp.c:19299)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__ReadRssi__readDone' (at pp.c:19300)
        ExprList:  (at pp.c:19300)
          ID: name='SUCCESS' (at pp.c:19300)
          ID: name='data' (at pp.c:19300)
  FuncDef:  (at pp.c:19304)
    Decl: name='CC2420CsmaP__sendDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:19304)
      FuncDecl: quals=None (at pp.c:19304)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__sendDone_task__postTask', quals=[] (at pp.c:19304)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19304)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19306)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19306)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19310)
        ID: name='__nesc_result' (at pp.c:19310)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:19310)
          ExprList:  (at pp.c:19310)
            ID: name='CC2420CsmaP__sendDone_task' (at pp.c:19310)
      Return:  (at pp.c:19314)
        ID: name='__nesc_result' (at pp.c:19314)
  FuncDef:  (at pp.c:19319)
    Decl: name='CC2420CsmaP__CC2420Transmit__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:19319)
      FuncDecl: quals=None (at pp.c:19319)
        ParamList:  (at pp.c:19319)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:19319)
            PtrDecl: quals=[] (at pp.c:19319)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:19319)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:19319)
            TypeDecl: declname='err', quals=[] (at pp.c:19319)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Transmit__sendDone', quals=[] (at pp.c:19319)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19321)
      Compound:  (at pp.c:19322)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19322)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19322)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19322)
        Assignment: op='=' (at pp.c:19324)
          ID: name='CC2420CsmaP__sendErr' (at pp.c:19324)
          ID: name='err' (at pp.c:19324)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19326)
          ExprList:  (at pp.c:19326)
            ID: name='__nesc_atomic' (at pp.c:19326)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__sendDone_task__postTask' (at pp.c:19327)
  FuncDef:  (at pp.c:19331)
    Decl: name='DefaultLplP__Resend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:19331)
      FuncDecl: quals=None (at pp.c:19331)
        ParamList:  (at pp.c:19331)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:19331)
            PtrDecl: quals=[] (at pp.c:19331)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:19331)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19331)
            TypeDecl: declname='error', quals=[] (at pp.c:19331)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DefaultLplP__Resend__sendDone', quals=[] (at pp.c:19331)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19333)
  FuncDef:  (at pp.c:19337)
    Decl: name='CC2420TransmitP__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:19337)
      FuncDecl: quals=None (at pp.c:19337)
        ParamList:  (at pp.c:19337)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:19337)
            PtrDecl: quals=[] (at pp.c:19337)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:19337)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19337)
            TypeDecl: declname='error', quals=[] (at pp.c:19337)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__Send__sendDone', quals=[] (at pp.c:19337)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19337)
      FuncCall:  (at None)
        ID: name='DefaultLplP__Resend__sendDone' (at pp.c:19339)
        ExprList:  (at pp.c:19339)
          ID: name='p_msg' (at pp.c:19339)
          ID: name='error' (at pp.c:19339)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Transmit__sendDone' (at pp.c:19341)
        ExprList:  (at pp.c:19341)
          ID: name='p_msg' (at pp.c:19341)
          ID: name='error' (at pp.c:19341)
  FuncDef:  (at pp.c:19346)
    Decl: name='CC2420TransmitP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:19346)
      FuncDecl: quals=None (at pp.c:19346)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SpiResource__granted', quals=[] (at pp.c:19346)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19348)
      Decl: name='cur_state', quals=[], storage=[] (at pp.c:19349)
        TypeDecl: declname='cur_state', quals=[] (at pp.c:19349)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:19351)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19351)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19351)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19351)
        Compound:  (at pp.c:19353)
          Assignment: op='=' (at pp.c:19354)
            ID: name='cur_state' (at pp.c:19354)
            ID: name='CC2420TransmitP__m_state' (at pp.c:19354)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19357)
          ExprList:  (at pp.c:19357)
            ID: name='__nesc_atomic' (at pp.c:19357)
      Switch:  (at pp.c:19359)
        ID: name='cur_state' (at pp.c:19359)
        Compound:  (at pp.c:19359)
          Case:  (at pp.c:19360)
            ID: name='CC2420TransmitP__S_LOAD' (at pp.c:19360)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__loadTXFIFO' (at pp.c:19361)
          Break:  (at pp.c:19362)
          Case:  (at pp.c:19364)
            ID: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:19364)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__attemptSend' (at pp.c:19365)
          Break:  (at pp.c:19366)
          Case:  (at pp.c:19368)
            ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:19368)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CSN__clr' (at pp.c:19369)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__SFLUSHTX__strobe' (at pp.c:19370)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CSN__set' (at pp.c:19371)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:19372)
          Compound:  (at pp.c:19373)
            Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19373)
              TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19373)
                IdentifierType: names=['__nesc_atomic_t'] (at None)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_start' (at pp.c:19373)
            Compound:  (at pp.c:19375)
              Assignment: op='=' (at pp.c:19376)
                ID: name='CC2420TransmitP__m_state' (at pp.c:19376)
                ID: name='CC2420TransmitP__S_STARTED' (at pp.c:19376)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:19379)
              ExprList:  (at pp.c:19379)
                ID: name='__nesc_atomic' (at pp.c:19379)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__Send__sendDone' (at pp.c:19380)
            ExprList:  (at pp.c:19380)
              ID: name='CC2420TransmitP__m_msg' (at pp.c:19380)
              ID: name='ECANCEL' (at pp.c:19380)
          Break:  (at pp.c:19381)
          Default:  (at pp.c:19383)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:19384)
          Break:  (at pp.c:19385)
  FuncDef:  (at pp.c:19390)
    Decl: name='CC2420ReceiveP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:19390)
      FuncDecl: quals=None (at pp.c:19390)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SpiResource__granted', quals=[] (at pp.c:19390)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19392)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__receive' (at pp.c:19400)
  FuncDef:  (at pp.c:19404)
    Decl: name='CC2420SpiP__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:19404)
      FuncDecl: quals=None (at pp.c:19404)
        ParamList:  (at pp.c:19404)
          Decl: name='id', quals=[], storage=[] (at pp.c:19404)
            TypeDecl: declname='id', quals=[] (at pp.c:19404)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__default__granted', quals=[] (at pp.c:19404)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19406)
  FuncDef:  (at pp.c:19410)
    Decl: name='CC2420SpiP__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:19410)
      FuncDecl: quals=None (at pp.c:19410)
        ParamList:  (at pp.c:19410)
          Decl: name='arg_0x102488158', quals=[], storage=[] (at pp.c:19410)
            TypeDecl: declname='arg_0x102488158', quals=[] (at pp.c:19410)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__granted', quals=[] (at pp.c:19410)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19410)
      Switch:  (at pp.c:19412)
        ID: name='arg_0x102488158' (at pp.c:19412)
        Compound:  (at pp.c:19412)
          Case:  (at pp.c:19414)
            ID: name='CC2420SpiC__0__CLIENT_ID' (at pp.c:19414)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__SpiResource__granted' (at pp.c:19416)
          Break:  (at pp.c:19418)
          Case:  (at pp.c:19420)
            ID: name='CC2420SpiC__1__CLIENT_ID' (at pp.c:19420)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__SyncResource__granted' (at pp.c:19422)
          Break:  (at pp.c:19424)
          Case:  (at pp.c:19426)
            ID: name='CC2420SpiC__2__CLIENT_ID' (at pp.c:19426)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__RssiResource__granted' (at pp.c:19428)
          Break:  (at pp.c:19430)
          Case:  (at pp.c:19432)
            ID: name='CC2420SpiC__3__CLIENT_ID' (at pp.c:19432)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__SpiResource__granted' (at pp.c:19434)
          Break:  (at pp.c:19436)
          Case:  (at pp.c:19438)
            ID: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:19438)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__SpiResource__granted' (at pp.c:19440)
          Break:  (at pp.c:19442)
          Default:  (at pp.c:19444)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__Resource__default__granted' (at pp.c:19446)
              ExprList:  (at pp.c:19446)
                ID: name='arg_0x102488158' (at pp.c:19446)
          Break:  (at pp.c:19448)
  FuncDef:  (at pp.c:19455)
    Decl: name='CC2420SpiP__grant__runTask', quals=[], storage=['inline', 'static'] (at pp.c:19455)
      FuncDecl: quals=None (at pp.c:19455)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__grant__runTask', quals=[] (at pp.c:19455)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19457)
      Decl: name='holder', quals=[], storage=[] (at pp.c:19458)
        TypeDecl: declname='holder', quals=[] (at pp.c:19458)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:19461)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19461)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19461)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19461)
        Compound:  (at pp.c:19463)
          Assignment: op='=' (at pp.c:19464)
            ID: name='holder' (at pp.c:19464)
            ID: name='CC2420SpiP__m_holder' (at pp.c:19464)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19467)
          ExprList:  (at pp.c:19467)
            ID: name='__nesc_atomic' (at pp.c:19467)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__Resource__granted' (at pp.c:19468)
        ExprList:  (at pp.c:19468)
          ID: name='holder' (at pp.c:19468)
  FuncDef:  (at pp.c:19472)
    Decl: name='CC2420ControlP__FSCTRL__write', quals=[], storage=['static', 'inline'] (at pp.c:19472)
      FuncDecl: quals=None (at pp.c:19472)
        ParamList:  (at pp.c:19472)
          Decl: name='data', quals=[], storage=[] (at pp.c:19472)
            TypeDecl: declname='data', quals=[] (at pp.c:19472)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__FSCTRL__write', quals=[] (at pp.c:19472)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:19472)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19474)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19474)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19478)
        ID: name='__nesc_result' (at pp.c:19478)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:19478)
          ExprList:  (at pp.c:19478)
            ID: name='CC2420_FSCTRL' (at pp.c:19478)
            ID: name='data' (at pp.c:19478)
      Return:  (at pp.c:19482)
        ID: name='__nesc_result' (at pp.c:19482)
  FuncDef:  (at pp.c:19486)
    Decl: name='CC2420ControlP__MDMCTRL0__write', quals=[], storage=['static', 'inline'] (at pp.c:19486)
      FuncDecl: quals=None (at pp.c:19486)
        ParamList:  (at pp.c:19486)
          Decl: name='data', quals=[], storage=[] (at pp.c:19486)
            TypeDecl: declname='data', quals=[] (at pp.c:19486)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420ControlP__MDMCTRL0__write', quals=[] (at pp.c:19486)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:19486)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19488)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19488)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19492)
        ID: name='__nesc_result' (at pp.c:19492)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Reg__write' (at pp.c:19492)
          ExprList:  (at pp.c:19492)
            ID: name='CC2420_MDMCTRL0' (at pp.c:19492)
            ID: name='data' (at pp.c:19492)
      Return:  (at pp.c:19496)
        ID: name='__nesc_result' (at pp.c:19496)
  FuncDef:  (at pp.c:19501)
    Decl: name='CC2420ControlP__IEEEADR__write', quals=[], storage=['static', 'inline'] (at pp.c:19501)
      FuncDecl: quals=None (at pp.c:19501)
        ParamList:  (at pp.c:19501)
          Decl: name='offset', quals=[], storage=[] (at pp.c:19501)
            TypeDecl: declname='offset', quals=[] (at pp.c:19501)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:19501)
            PtrDecl: quals=[] (at pp.c:19501)
              TypeDecl: declname='data', quals=[] (at pp.c:19501)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:19501)
            TypeDecl: declname='length', quals=[] (at pp.c:19501)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ControlP__IEEEADR__write', quals=[] (at pp.c:19501)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:19501)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19503)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19503)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19507)
        ID: name='__nesc_result' (at pp.c:19507)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Ram__write' (at pp.c:19507)
          ExprList:  (at pp.c:19507)
            ID: name='CC2420_RAM_IEEEADR' (at pp.c:19507)
            ID: name='offset' (at pp.c:19507)
            ID: name='data' (at pp.c:19507)
            ID: name='length' (at pp.c:19507)
      Return:  (at pp.c:19511)
        ID: name='__nesc_result' (at pp.c:19511)
  FuncDef:  (at pp.c:19516)
    Decl: name='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:19516)
      FuncDecl: quals=None (at pp.c:19516)
        ParamList:  (at pp.c:19516)
          Decl: name='error', quals=[], storage=[] (at pp.c:19516)
            TypeDecl: declname='error', quals=[] (at pp.c:19516)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__CC2420Config__syncDone', quals=[] (at pp.c:19516)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19518)
  FuncDef:  (at pp.c:19522)
    Decl: name='CC2420ReceiveP__CC2420Config__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:19522)
      FuncDecl: quals=None (at pp.c:19522)
        ParamList:  (at pp.c:19522)
          Decl: name='error', quals=[], storage=[] (at pp.c:19522)
            TypeDecl: declname='error', quals=[] (at pp.c:19522)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__syncDone', quals=[] (at pp.c:19522)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19524)
  FuncDef:  (at pp.c:19528)
    Decl: name='CC2420ControlP__CC2420Config__syncDone', quals=[], storage=['static', 'inline'] (at pp.c:19528)
      FuncDecl: quals=None (at pp.c:19528)
        ParamList:  (at pp.c:19528)
          Decl: name='error', quals=[], storage=[] (at pp.c:19528)
            TypeDecl: declname='error', quals=[] (at pp.c:19528)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__syncDone', quals=[] (at pp.c:19528)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19528)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CC2420Config__syncDone' (at pp.c:19530)
        ExprList:  (at pp.c:19530)
          ID: name='error' (at pp.c:19530)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__CC2420Config__syncDone' (at pp.c:19532)
        ExprList:  (at pp.c:19532)
          ID: name='error' (at pp.c:19532)
  FuncDef:  (at pp.c:19537)
    Decl: name='CC2420ControlP__syncDone__runTask', quals=[], storage=['inline', 'static'] (at pp.c:19537)
      FuncDecl: quals=None (at pp.c:19537)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__syncDone__runTask', quals=[] (at pp.c:19537)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19539)
      Compound:  (at pp.c:19540)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19540)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19540)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19540)
        Assignment: op='=' (at pp.c:19542)
          ID: name='CC2420ControlP__m_sync_busy' (at pp.c:19542)
          ID: name='FALSE' (at pp.c:19542)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19544)
          ExprList:  (at pp.c:19544)
            ID: name='__nesc_atomic' (at pp.c:19544)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CC2420Config__syncDone' (at pp.c:19545)
        ExprList:  (at pp.c:19545)
          ID: name='SUCCESS' (at pp.c:19545)
  FuncDef:  (at pp.c:19549)
    Decl: name='CC2420ControlP__SyncResource__request', quals=[], storage=['static', 'inline'] (at pp.c:19549)
      FuncDecl: quals=None (at pp.c:19549)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SyncResource__request', quals=[] (at pp.c:19549)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19549)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19551)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19551)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19555)
        ID: name='__nesc_result' (at pp.c:19555)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__request' (at pp.c:19555)
          ExprList:  (at pp.c:19555)
            ID: name='CC2420SpiC__1__CLIENT_ID' (at pp.c:19555)
      Return:  (at pp.c:19559)
        ID: name='__nesc_result' (at pp.c:19559)
  FuncDef:  (at pp.c:19564)
    Decl: name='CC2420ControlP__CC2420Config__sync', quals=[], storage=['inline', 'static'] (at pp.c:19564)
      FuncDecl: quals=None (at pp.c:19564)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__sync', quals=[] (at pp.c:19564)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19566)
      Compound:  (at pp.c:19567)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19567)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19567)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19567)
        Compound:  (at pp.c:19569)
          If:  (at pp.c:19570)
            ID: name='CC2420ControlP__m_sync_busy' (at pp.c:19570)
            Compound:  (at pp.c:19570)
              Compound:  (at pp.c:19571)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:19572)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:19572)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:19574)
                Compound:  (at pp.c:19576)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:19578)
                    ExprList:  (at pp.c:19578)
                      ID: name='__nesc_atomic' (at pp.c:19578)
                  Return:  (at pp.c:19580)
                    ID: name='__nesc_temp' (at pp.c:19580)
          Assignment: op='=' (at pp.c:19585)
            ID: name='CC2420ControlP__m_sync_busy' (at pp.c:19585)
            ID: name='TRUE' (at pp.c:19585)
          If:  (at pp.c:19586)
            BinaryOp: op='==' (at pp.c:19586)
              ID: name='CC2420ControlP__m_state' (at pp.c:19586)
              ID: name='CC2420ControlP__S_XOSC_STARTED' (at pp.c:19586)
            Compound:  (at pp.c:19586)
              FuncCall:  (at None)
                ID: name='CC2420ControlP__SyncResource__request' (at pp.c:19587)
            Compound:  (at pp.c:19591)
              FuncCall:  (at None)
                ID: name='CC2420ControlP__syncDone__postTask' (at pp.c:19592)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19596)
          ExprList:  (at pp.c:19596)
            ID: name='__nesc_atomic' (at pp.c:19596)
      Return:  (at pp.c:19597)
        ID: name='SUCCESS' (at pp.c:19597)
  FuncDef:  (at pp.c:19601)
    Decl: name='CC2420ControlP__sync__runTask', quals=[], storage=['inline', 'static'] (at pp.c:19601)
      FuncDecl: quals=None (at pp.c:19601)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__sync__runTask', quals=[] (at pp.c:19601)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19603)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CC2420Config__sync' (at pp.c:19604)
  FuncDef:  (at pp.c:19608)
    Decl: name='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:19608)
      FuncDecl: quals=None (at pp.c:19608)
        ParamList:  (at pp.c:19608)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19608)
            PtrDecl: quals=[] (at pp.c:19608)
              TypeDecl: declname='msg', quals=[] (at pp.c:19608)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19608)
            TypeDecl: declname='error', quals=[] (at pp.c:19608)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__BareSend__default__sendDone', quals=[] (at pp.c:19608)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19610)
  FuncDef:  (at pp.c:19614)
    Decl: name='CC2420TinyosNetworkP__BareSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:19614)
      FuncDecl: quals=None (at pp.c:19614)
        ParamList:  (at pp.c:19614)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19614)
            PtrDecl: quals=[] (at pp.c:19614)
              TypeDecl: declname='msg', quals=[] (at pp.c:19614)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19614)
            TypeDecl: declname='error', quals=[] (at pp.c:19614)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__BareSend__sendDone', quals=[] (at pp.c:19614)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19614)
      FuncCall:  (at None)
        ID: name='CC2420TinyosNetworkP__BareSend__default__sendDone' (at pp.c:19616)
        ExprList:  (at pp.c:19616)
          ID: name='msg' (at pp.c:19616)
          ID: name='error' (at pp.c:19616)
  FuncDef:  (at pp.c:19621)
    Decl: name='CC2420ActiveMessageP__AMSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:19621)
      FuncDecl: quals=None (at pp.c:19621)
        ParamList:  (at pp.c:19621)
          Decl: name='arg_0x102a9d7d8', quals=[], storage=[] (at pp.c:19621)
            TypeDecl: declname='arg_0x102a9d7d8', quals=[] (at pp.c:19621)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19621)
            PtrDecl: quals=[] (at pp.c:19621)
              TypeDecl: declname='msg', quals=[] (at pp.c:19621)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19621)
            TypeDecl: declname='error', quals=[] (at pp.c:19621)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMSend__sendDone', quals=[] (at pp.c:19621)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19621)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__AMSend__sendDone' (at pp.c:19623)
        ExprList:  (at pp.c:19623)
          ID: name='arg_0x102a9d7d8' (at pp.c:19623)
          ID: name='msg' (at pp.c:19623)
          ID: name='error' (at pp.c:19623)
  FuncDef:  (at pp.c:19628)
    Decl: name='CC2420ActiveMessageP__RadioResource__release', quals=[], storage=['static', 'inline'] (at pp.c:19628)
      FuncDecl: quals=None (at pp.c:19628)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioResource__release', quals=[] (at pp.c:19628)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19628)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19630)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19630)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19634)
        ID: name='__nesc_result' (at pp.c:19634)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__Resource__release' (at pp.c:19634)
          ExprList:  (at pp.c:19634)
            ID: name='CC2420ActiveMessageC__CC2420_AM_SEND_ID' (at pp.c:19634)
      Return:  (at pp.c:19638)
        ID: name='__nesc_result' (at pp.c:19638)
  FuncDef:  (at pp.c:19643)
    Decl: name='CC2420ActiveMessageP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:19643)
      FuncDecl: quals=None (at pp.c:19643)
        ParamList:  (at pp.c:19643)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19643)
            PtrDecl: quals=[] (at pp.c:19643)
              TypeDecl: declname='msg', quals=[] (at pp.c:19643)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='result', quals=[], storage=[] (at pp.c:19643)
            TypeDecl: declname='result', quals=[] (at pp.c:19643)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__SubSend__sendDone', quals=[] (at pp.c:19643)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19645)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__RadioResource__release' (at pp.c:19646)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__AMSend__sendDone' (at pp.c:19647)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__AMPacket__type' (at pp.c:19647)
            ExprList:  (at pp.c:19647)
              ID: name='msg' (at pp.c:19647)
          ID: name='msg' (at pp.c:19647)
          ID: name='result' (at pp.c:19647)
  FuncDef:  (at pp.c:19651)
    Decl: name='CC2420TinyosNetworkP__ActiveSend__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:19651)
      FuncDecl: quals=None (at pp.c:19651)
        ParamList:  (at pp.c:19651)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19651)
            PtrDecl: quals=[] (at pp.c:19651)
              TypeDecl: declname='msg', quals=[] (at pp.c:19651)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19651)
            TypeDecl: declname='error', quals=[] (at pp.c:19651)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__sendDone', quals=[] (at pp.c:19651)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19651)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SubSend__sendDone' (at pp.c:19653)
        ExprList:  (at pp.c:19653)
          ID: name='msg' (at pp.c:19653)
          ID: name='error' (at pp.c:19653)
  FuncDef:  (at pp.c:19658)
    Decl: name='CC2420TinyosNetworkP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:19658)
      FuncDecl: quals=None (at pp.c:19658)
        ParamList:  (at pp.c:19658)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19658)
            PtrDecl: quals=[] (at pp.c:19658)
              TypeDecl: declname='msg', quals=[] (at pp.c:19658)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19658)
            TypeDecl: declname='error', quals=[] (at pp.c:19658)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__SubSend__sendDone', quals=[] (at pp.c:19658)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19660)
      If:  (at pp.c:19661)
        BinaryOp: op='==' (at pp.c:19661)
          ID: name='CC2420TinyosNetworkP__m_busy_client' (at pp.c:19661)
          ID: name='CC2420TinyosNetworkP__CLIENT_AM' (at pp.c:19661)
        Compound:  (at pp.c:19661)
          FuncCall:  (at None)
            ID: name='CC2420TinyosNetworkP__ActiveSend__sendDone' (at pp.c:19662)
            ExprList:  (at pp.c:19662)
              ID: name='msg' (at pp.c:19662)
              ID: name='error' (at pp.c:19662)
        Compound:  (at pp.c:19666)
          FuncCall:  (at None)
            ID: name='CC2420TinyosNetworkP__BareSend__sendDone' (at pp.c:19667)
            ExprList:  (at pp.c:19667)
              ID: name='msg' (at pp.c:19667)
              ID: name='error' (at pp.c:19667)
  FuncDef:  (at pp.c:19672)
    Decl: name='UniqueSendP__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:19672)
      FuncDecl: quals=None (at pp.c:19672)
        ParamList:  (at pp.c:19672)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19672)
            PtrDecl: quals=[] (at pp.c:19672)
              TypeDecl: declname='msg', quals=[] (at pp.c:19672)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19672)
            TypeDecl: declname='error', quals=[] (at pp.c:19672)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='UniqueSendP__Send__sendDone', quals=[] (at pp.c:19672)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19672)
      FuncCall:  (at None)
        ID: name='CC2420TinyosNetworkP__SubSend__sendDone' (at pp.c:19674)
        ExprList:  (at pp.c:19674)
          ID: name='msg' (at pp.c:19674)
          ID: name='error' (at pp.c:19674)
  FuncDef:  (at pp.c:19679)
    Decl: name='UniqueSendP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:19679)
      FuncDecl: quals=None (at pp.c:19679)
        ParamList:  (at pp.c:19679)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19679)
            PtrDecl: quals=[] (at pp.c:19679)
              TypeDecl: declname='msg', quals=[] (at pp.c:19679)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19679)
            TypeDecl: declname='error', quals=[] (at pp.c:19679)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='UniqueSendP__SubSend__sendDone', quals=[] (at pp.c:19679)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19681)
      FuncCall:  (at None)
        ID: name='UniqueSendP__State__toIdle' (at pp.c:19682)
      FuncCall:  (at None)
        ID: name='UniqueSendP__Send__sendDone' (at pp.c:19683)
        ExprList:  (at pp.c:19683)
          ID: name='msg' (at pp.c:19683)
          ID: name='error' (at pp.c:19683)
  FuncDef:  (at pp.c:19687)
    Decl: name='DefaultLplP__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:19687)
      FuncDecl: quals=None (at pp.c:19687)
        ParamList:  (at pp.c:19687)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19687)
            PtrDecl: quals=[] (at pp.c:19687)
              TypeDecl: declname='msg', quals=[] (at pp.c:19687)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19687)
            TypeDecl: declname='error', quals=[] (at pp.c:19687)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DefaultLplP__Send__sendDone', quals=[] (at pp.c:19687)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19687)
      FuncCall:  (at None)
        ID: name='UniqueSendP__SubSend__sendDone' (at pp.c:19689)
        ExprList:  (at pp.c:19689)
          ID: name='msg' (at pp.c:19689)
          ID: name='error' (at pp.c:19689)
  FuncDef:  (at pp.c:19694)
    Decl: name='DefaultLplP__SendState__toIdle', quals=[], storage=['static', 'inline'] (at pp.c:19694)
      FuncDecl: quals=None (at pp.c:19694)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SendState__toIdle', quals=[] (at pp.c:19694)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19694)
      FuncCall:  (at None)
        ID: name='StateImplP__State__toIdle' (at pp.c:19696)
        ExprList:  (at pp.c:19696)
          Constant: type='int', value='5U' (at pp.c:19696)
  FuncDef:  (at pp.c:19701)
    Decl: name='CC2420PacketP__Acks__wasAcked', quals=[], storage=['inline', 'static'] (at pp.c:19701)
      FuncDecl: quals=None (at pp.c:19701)
        ParamList:  (at pp.c:19701)
          Decl: name='p_msg', quals=[], storage=[] (at pp.c:19701)
            PtrDecl: quals=[] (at pp.c:19701)
              TypeDecl: declname='p_msg', quals=[] (at pp.c:19701)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__Acks__wasAcked', quals=[] (at pp.c:19701)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19703)
      Return:  (at pp.c:19704)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_int8' (at pp.c:19704)
          ExprList:  (at None)
            StructRef: type='.' (at None)
              StructRef: type='->' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:19704)
                  ExprList:  (at pp.c:19704)
                    ID: name='p_msg' (at pp.c:19704)
                ID: name='ack' (at pp.c:19704)
              ID: name='nxdata' (at pp.c:19704)
  FuncDef:  (at pp.c:19708)
    Decl: name='DefaultLplP__PacketAcknowledgements__wasAcked', quals=[], storage=['static', 'inline'] (at pp.c:19708)
      FuncDecl: quals=None (at pp.c:19708)
        ParamList:  (at pp.c:19708)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19708)
            PtrDecl: quals=[] (at pp.c:19708)
              TypeDecl: declname='msg', quals=[] (at pp.c:19708)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='DefaultLplP__PacketAcknowledgements__wasAcked', quals=[] (at pp.c:19708)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19708)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19710)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19710)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19714)
        ID: name='__nesc_result' (at pp.c:19714)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__Acks__wasAcked' (at pp.c:19714)
          ExprList:  (at pp.c:19714)
            ID: name='msg' (at pp.c:19714)
      Return:  (at pp.c:19718)
        ID: name='__nesc_result' (at pp.c:19718)
  FuncDef:  (at pp.c:19723)
    Decl: name='VirtualizeTimerC__0__Timer__isRunning', quals=[], storage=['inline', 'static'] (at pp.c:19723)
      FuncDecl: quals=None (at pp.c:19723)
        ParamList:  (at pp.c:19723)
          Decl: name='num', quals=[], storage=[] (at pp.c:19723)
            TypeDecl: declname='num', quals=[] (at pp.c:19723)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__isRunning', quals=[] (at pp.c:19723)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19724)
      Return:  (at pp.c:19725)
        StructRef: type='.' (at pp.c:19725)
          ArrayRef:  (at pp.c:19725)
            ID: name='VirtualizeTimerC__0__m_timers' (at pp.c:19725)
            ID: name='num' (at pp.c:19725)
          ID: name='isrunning' (at pp.c:19725)
  FuncDef:  (at pp.c:19729)
    Decl: name='DefaultLplP__SendDoneTimer__isRunning', quals=[], storage=['static', 'inline'] (at pp.c:19729)
      FuncDecl: quals=None (at pp.c:19729)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SendDoneTimer__isRunning', quals=[] (at pp.c:19729)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:19729)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19731)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19731)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19735)
        ID: name='__nesc_result' (at pp.c:19735)
        FuncCall:  (at None)
          ID: name='VirtualizeTimerC__0__Timer__isRunning' (at pp.c:19735)
          ExprList:  (at pp.c:19735)
            Constant: type='int', value='6U' (at pp.c:19735)
      Return:  (at pp.c:19739)
        ID: name='__nesc_result' (at pp.c:19739)
  FuncDef:  (at pp.c:19744)
    Decl: name='DefaultLplP__SubSend__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:19744)
      FuncDecl: quals=None (at pp.c:19744)
        ParamList:  (at pp.c:19744)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19744)
            PtrDecl: quals=[] (at pp.c:19744)
              TypeDecl: declname='msg', quals=[] (at pp.c:19744)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19744)
            TypeDecl: declname='error', quals=[] (at pp.c:19744)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DefaultLplP__SubSend__sendDone', quals=[] (at pp.c:19744)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19746)
      Switch:  (at pp.c:19748)
        FuncCall:  (at None)
          ID: name='DefaultLplP__SendState__getState' (at pp.c:19748)
        Compound:  (at pp.c:19748)
          Case:  (at pp.c:19749)
            ID: name='S_LPL_SENDING' (at pp.c:19749)
            If:  (at pp.c:19750)
              FuncCall:  (at None)
                ID: name='DefaultLplP__SendDoneTimer__isRunning' (at pp.c:19750)
              Compound:  (at pp.c:19750)
                If:  (at pp.c:19751)
                  UnaryOp: op='!' (at None)
                    FuncCall:  (at None)
                      ID: name='DefaultLplP__PacketAcknowledgements__wasAcked' (at pp.c:19751)
                      ExprList:  (at pp.c:19751)
                        ID: name='msg' (at pp.c:19751)
                  Compound:  (at pp.c:19751)
                    FuncCall:  (at None)
                      ID: name='DefaultLplP__resend__postTask' (at pp.c:19752)
                    Return:  (at pp.c:19753)
          Break:  (at pp.c:19756)
          Case:  (at pp.c:19758)
            ID: name='S_LPL_CLEAN_UP' (at pp.c:19758)
            Break:  (at pp.c:19763)
          Default:  (at pp.c:19765)
            Break:  (at pp.c:19766)
      FuncCall:  (at None)
        ID: name='DefaultLplP__SendState__toIdle' (at pp.c:19769)
      FuncCall:  (at None)
        ID: name='DefaultLplP__SendDoneTimer__stop' (at pp.c:19770)
      FuncCall:  (at None)
        ID: name='DefaultLplP__startOffTimer' (at pp.c:19771)
      FuncCall:  (at None)
        ID: name='DefaultLplP__Send__sendDone' (at pp.c:19772)
        ExprList:  (at pp.c:19772)
          ID: name='msg' (at pp.c:19772)
          ID: name='error' (at pp.c:19772)
  FuncDef:  (at pp.c:19776)
    Decl: name='CC2420CsmaP__Send__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:19776)
      FuncDecl: quals=None (at pp.c:19776)
        ParamList:  (at pp.c:19776)
          Decl: name='msg', quals=[], storage=[] (at pp.c:19776)
            PtrDecl: quals=[] (at pp.c:19776)
              TypeDecl: declname='msg', quals=[] (at pp.c:19776)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:19776)
            TypeDecl: declname='error', quals=[] (at pp.c:19776)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__Send__sendDone', quals=[] (at pp.c:19776)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19776)
      FuncCall:  (at None)
        ID: name='DefaultLplP__SubSend__sendDone' (at pp.c:19778)
        ExprList:  (at pp.c:19778)
          ID: name='msg' (at pp.c:19778)
          ID: name='error' (at pp.c:19778)
  FuncDef:  (at pp.c:19783)
    Decl: name='CC2420CsmaP__stopDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:19783)
      FuncDecl: quals=None (at pp.c:19783)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__stopDone_task__postTask', quals=[] (at pp.c:19783)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19783)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19785)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19785)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19789)
        ID: name='__nesc_result' (at pp.c:19789)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:19789)
          ExprList:  (at pp.c:19789)
            ID: name='CC2420CsmaP__stopDone_task' (at pp.c:19789)
      Return:  (at pp.c:19793)
        ID: name='__nesc_result' (at pp.c:19793)
  FuncDef:  (at pp.c:19798)
    Decl: name='CC2420CsmaP__CC2420Power__stopVReg', quals=[], storage=['static', 'inline'] (at pp.c:19798)
      FuncDecl: quals=None (at pp.c:19798)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__stopVReg', quals=[] (at pp.c:19798)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19798)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19800)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19800)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19804)
        ID: name='__nesc_result' (at pp.c:19804)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Power__stopVReg' (at pp.c:19804)
      Return:  (at pp.c:19808)
        ID: name='__nesc_result' (at pp.c:19808)
  FuncDef:  (at pp.c:19813)
    Decl: name='ecombine', quals=[], storage=['inline', 'static'] (at pp.c:19813)
      FuncDecl: quals=None (at pp.c:19813)
        ParamList:  (at pp.c:19813)
          Decl: name='r1', quals=[], storage=[] (at pp.c:19813)
            TypeDecl: declname='r1', quals=[] (at pp.c:19813)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='r2', quals=[], storage=[] (at pp.c:19813)
            TypeDecl: declname='r2', quals=[] (at pp.c:19813)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='ecombine', quals=[] (at pp.c:19813)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19818)
      Return:  (at pp.c:19819)
        TernaryOp:  (at pp.c:19819)
          BinaryOp: op='==' (at pp.c:19819)
            ID: name='r1' (at pp.c:19819)
            ID: name='r2' (at pp.c:19819)
          ID: name='r1' (at pp.c:19819)
          ID: name='FAIL' (at pp.c:19819)
  FuncDef:  (at pp.c:19823)
    Decl: name='CC2420CsmaP__SubControl__stop', quals=[], storage=['static', 'inline'] (at pp.c:19823)
      FuncDecl: quals=None (at pp.c:19823)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubControl__stop', quals=[] (at pp.c:19823)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19823)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19825)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19825)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19829)
        ID: name='__nesc_result' (at pp.c:19829)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__StdControl__stop' (at pp.c:19829)
      Assignment: op='=' (at pp.c:19831)
        ID: name='__nesc_result' (at pp.c:19831)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:19831)
          ExprList:  (at pp.c:19831)
            ID: name='__nesc_result' (at pp.c:19831)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__StdControl__stop' (at pp.c:19831)
      Return:  (at pp.c:19835)
        ID: name='__nesc_result' (at pp.c:19835)
  FuncDef:  (at pp.c:19840)
    Decl: name='CC2420CsmaP__shutdown', quals=[], storage=['inline', 'static'] (at pp.c:19840)
      FuncDecl: quals=None (at pp.c:19840)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__shutdown', quals=[] (at pp.c:19840)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19842)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubControl__stop' (at pp.c:19843)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Power__stopVReg' (at pp.c:19844)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__stopDone_task__postTask' (at pp.c:19845)
  FuncDef:  (at pp.c:19849)
    Decl: name='CC2420CsmaP__sendDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:19849)
      FuncDecl: quals=None (at pp.c:19849)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__sendDone_task__runTask', quals=[] (at pp.c:19849)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19851)
      Decl: name='packetErr', quals=[], storage=[] (at pp.c:19852)
        TypeDecl: declname='packetErr', quals=[] (at pp.c:19852)
          IdentifierType: names=['error_t'] (at None)
      Compound:  (at pp.c:19855)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:19855)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:19855)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:19855)
        Assignment: op='=' (at pp.c:19857)
          ID: name='packetErr' (at pp.c:19857)
          ID: name='CC2420CsmaP__sendErr' (at pp.c:19857)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:19859)
          ExprList:  (at pp.c:19859)
            ID: name='__nesc_atomic' (at pp.c:19859)
      If:  (at pp.c:19860)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:19860)
          ExprList:  (at pp.c:19860)
            ID: name='CC2420CsmaP__S_STOPPING' (at pp.c:19860)
        Compound:  (at pp.c:19860)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__shutdown' (at pp.c:19861)
        Compound:  (at pp.c:19863)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:19864)
            ExprList:  (at pp.c:19864)
              ID: name='CC2420CsmaP__S_STARTED' (at pp.c:19864)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__Send__sendDone' (at pp.c:19867)
        ExprList:  (at pp.c:19867)
          ID: name='CC2420CsmaP__m_msg' (at pp.c:19867)
          ID: name='packetErr' (at pp.c:19867)
  FuncDef:  (at pp.c:19871)
    Decl: name='DefaultLplP__SubControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:19871)
      FuncDecl: quals=None (at pp.c:19871)
        ParamList:  (at pp.c:19871)
          Decl: name='error', quals=[], storage=[] (at pp.c:19871)
            TypeDecl: declname='error', quals=[] (at pp.c:19871)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DefaultLplP__SubControl__stopDone', quals=[] (at pp.c:19871)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19873)
      If:  (at pp.c:19874)
        UnaryOp: op='!' (at pp.c:19874)
          ID: name='error' (at pp.c:19874)
        Compound:  (at pp.c:19874)
          If:  (at pp.c:19877)
            BinaryOp: op='||' (at None)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__SendState__getState' (at pp.c:19879)
                ID: name='S_LPL_FIRST_MESSAGE' (at pp.c:19879)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__SendState__getState' (at pp.c:19880)
                ID: name='S_LPL_SENDING' (at pp.c:19880)
            Compound:  (at pp.c:19880)
              FuncCall:  (at None)
                ID: name='DefaultLplP__startRadio__postTask' (at pp.c:19882)
            Compound:  (at pp.c:19884)
              FuncCall:  (at None)
                ID: name='DefaultLplP__OffTimer__stop' (at pp.c:19885)
              FuncCall:  (at None)
                ID: name='DefaultLplP__SendDoneTimer__stop' (at pp.c:19886)
  FuncDef:  (at pp.c:19892)
    Decl: name='PowerCycleP__RadioPowerState__forceState', quals=[], storage=['static', 'inline'] (at pp.c:19892)
      FuncDecl: quals=None (at pp.c:19892)
        ParamList:  (at pp.c:19892)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:19892)
            TypeDecl: declname='reqState', quals=[] (at pp.c:19892)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='PowerCycleP__RadioPowerState__forceState', quals=[] (at pp.c:19892)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19892)
      FuncCall:  (at None)
        ID: name='StateImplP__State__forceState' (at pp.c:19894)
        ExprList:  (at pp.c:19894)
          Constant: type='int', value='3U' (at pp.c:19894)
          ID: name='reqState' (at pp.c:19894)
  FuncDef:  (at pp.c:19899)
    Decl: name='PowerCycleP__SubControl__stopDone', quals=[], storage=['inline', 'static'] (at pp.c:19899)
      FuncDecl: quals=None (at pp.c:19899)
        ParamList:  (at pp.c:19899)
          Decl: name='error', quals=[], storage=[] (at pp.c:19899)
            TypeDecl: declname='error', quals=[] (at pp.c:19899)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PowerCycleP__SubControl__stopDone', quals=[] (at pp.c:19899)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19901)
      FuncCall:  (at None)
        ID: name='PowerCycleP__RadioPowerState__forceState' (at pp.c:19902)
        ExprList:  (at pp.c:19902)
          ID: name='PowerCycleP__S_OFF' (at pp.c:19902)
      If:  (at pp.c:19905)
        FuncCall:  (at None)
          ID: name='PowerCycleP__finishSplitControlRequests' (at pp.c:19905)
        Compound:  (at pp.c:19905)
          Return:  (at pp.c:19906)
        Compound:  (at pp.c:19908)
          If:  (at pp.c:19910)
            FuncCall:  (at None)
              ID: name='PowerCycleP__isDutyCycling' (at pp.c:19910)
            Compound:  (at pp.c:19910)
              FuncCall:  (at None)
                ID: name='PowerCycleP__OnTimer__startOneShot' (at pp.c:19911)
                ExprList:  (at pp.c:19911)
                  ID: name='PowerCycleP__sleepInterval' (at pp.c:19911)
  FuncDef:  (at pp.c:19917)
    Decl: name='CC2420CsmaP__SplitControl__stopDone', quals=[], storage=['static', 'inline'] (at pp.c:19917)
      FuncDecl: quals=None (at pp.c:19917)
        ParamList:  (at pp.c:19917)
          Decl: name='error', quals=[], storage=[] (at pp.c:19917)
            TypeDecl: declname='error', quals=[] (at pp.c:19917)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControl__stopDone', quals=[] (at pp.c:19917)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19917)
      FuncCall:  (at None)
        ID: name='PowerCycleP__SubControl__stopDone' (at pp.c:19919)
        ExprList:  (at pp.c:19919)
          ID: name='error' (at pp.c:19919)
      FuncCall:  (at None)
        ID: name='DefaultLplP__SubControl__stopDone' (at pp.c:19921)
        ExprList:  (at pp.c:19921)
          ID: name='error' (at pp.c:19921)
  FuncDef:  (at pp.c:19926)
    Decl: name='CC2420CsmaP__stopDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:19926)
      FuncDecl: quals=None (at pp.c:19926)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__stopDone_task__runTask', quals=[] (at pp.c:19926)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19928)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:19929)
        ExprList:  (at pp.c:19929)
          ID: name='CC2420CsmaP__S_STOPPED' (at pp.c:19929)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SplitControl__stopDone' (at pp.c:19930)
        ExprList:  (at pp.c:19930)
          ID: name='SUCCESS' (at pp.c:19930)
  FuncDef:  (at pp.c:19934)
    Decl: name='DefaultLplP__RadioPowerState__forceState', quals=[], storage=['static', 'inline'] (at pp.c:19934)
      FuncDecl: quals=None (at pp.c:19934)
        ParamList:  (at pp.c:19934)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:19934)
            TypeDecl: declname='reqState', quals=[] (at pp.c:19934)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DefaultLplP__RadioPowerState__forceState', quals=[] (at pp.c:19934)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19934)
      FuncCall:  (at None)
        ID: name='StateImplP__State__forceState' (at pp.c:19936)
        ExprList:  (at pp.c:19936)
          Constant: type='int', value='3U' (at pp.c:19936)
          ID: name='reqState' (at pp.c:19936)
  FuncDef:  (at pp.c:19941)
    Decl: name='DefaultLplP__SubControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:19941)
      FuncDecl: quals=None (at pp.c:19941)
        ParamList:  (at pp.c:19941)
          Decl: name='error', quals=[], storage=[] (at pp.c:19941)
            TypeDecl: declname='error', quals=[] (at pp.c:19941)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DefaultLplP__SubControl__startDone', quals=[] (at pp.c:19941)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19943)
      If:  (at pp.c:19944)
        UnaryOp: op='!' (at pp.c:19944)
          ID: name='error' (at pp.c:19944)
        Compound:  (at pp.c:19944)
          FuncCall:  (at None)
            ID: name='DefaultLplP__RadioPowerState__forceState' (at pp.c:19945)
            ExprList:  (at pp.c:19945)
              ID: name='DefaultLplP__S_ON' (at pp.c:19945)
          If:  (at pp.c:19948)
            BinaryOp: op='||' (at None)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__SendState__getState' (at pp.c:19950)
                ID: name='S_LPL_FIRST_MESSAGE' (at pp.c:19950)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__SendState__getState' (at pp.c:19951)
                ID: name='S_LPL_SENDING' (at pp.c:19951)
            Compound:  (at pp.c:19951)
              FuncCall:  (at None)
                ID: name='DefaultLplP__initializeSend' (at pp.c:19952)
  FuncDef:  (at pp.c:19958)
    Decl: name='PowerCycleP__getCca__postTask', quals=[], storage=['static', 'inline'] (at pp.c:19958)
      FuncDecl: quals=None (at pp.c:19958)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__getCca__postTask', quals=[] (at pp.c:19958)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:19958)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:19960)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:19960)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:19964)
        ID: name='__nesc_result' (at pp.c:19964)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:19964)
          ExprList:  (at pp.c:19964)
            ID: name='PowerCycleP__getCca' (at pp.c:19964)
      Return:  (at pp.c:19968)
        ID: name='__nesc_result' (at pp.c:19968)
  FuncDef:  (at pp.c:19973)
    Decl: name='PowerCycleP__SubControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:19973)
      FuncDecl: quals=None (at pp.c:19973)
        ParamList:  (at pp.c:19973)
          Decl: name='error', quals=[], storage=[] (at pp.c:19973)
            TypeDecl: declname='error', quals=[] (at pp.c:19973)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PowerCycleP__SubControl__startDone', quals=[] (at pp.c:19973)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19975)
      FuncCall:  (at None)
        ID: name='PowerCycleP__RadioPowerState__forceState' (at pp.c:19976)
        ExprList:  (at pp.c:19976)
          ID: name='PowerCycleP__S_ON' (at pp.c:19976)
      If:  (at pp.c:19979)
        FuncCall:  (at None)
          ID: name='PowerCycleP__finishSplitControlRequests' (at pp.c:19979)
        Compound:  (at pp.c:19979)
          Return:  (at pp.c:19980)
        Compound:  (at pp.c:19982)
          If:  (at pp.c:19984)
            FuncCall:  (at None)
              ID: name='PowerCycleP__isDutyCycling' (at pp.c:19984)
            Compound:  (at pp.c:19984)
              FuncCall:  (at None)
                ID: name='PowerCycleP__getCca__postTask' (at pp.c:19985)
  FuncDef:  (at pp.c:19991)
    Decl: name='CC2420CsmaP__SplitControl__startDone', quals=[], storage=['static', 'inline'] (at pp.c:19991)
      FuncDecl: quals=None (at pp.c:19991)
        ParamList:  (at pp.c:19991)
          Decl: name='error', quals=[], storage=[] (at pp.c:19991)
            TypeDecl: declname='error', quals=[] (at pp.c:19991)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControl__startDone', quals=[] (at pp.c:19991)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:19991)
      FuncCall:  (at None)
        ID: name='PowerCycleP__SubControl__startDone' (at pp.c:19993)
        ExprList:  (at pp.c:19993)
          ID: name='error' (at pp.c:19993)
      FuncCall:  (at None)
        ID: name='DefaultLplP__SubControl__startDone' (at pp.c:19995)
        ExprList:  (at pp.c:19995)
          ID: name='error' (at pp.c:19995)
  FuncDef:  (at pp.c:20000)
    Decl: name='CC2420ControlP__SpiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:20000)
      FuncDecl: quals=None (at pp.c:20000)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__SpiResource__release', quals=[] (at pp.c:20000)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20000)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20002)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20002)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20006)
        ID: name='__nesc_result' (at pp.c:20006)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__release' (at pp.c:20006)
          ExprList:  (at pp.c:20006)
            ID: name='CC2420SpiC__0__CLIENT_ID' (at pp.c:20006)
      Return:  (at pp.c:20010)
        ID: name='__nesc_result' (at pp.c:20010)
  FuncDef:  (at pp.c:20015)
    Decl: name='CC2420ControlP__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:20015)
      FuncDecl: quals=None (at pp.c:20015)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__Resource__release', quals=[] (at pp.c:20015)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20017)
      Compound:  (at pp.c:20018)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:20018)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:20018)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:20018)
        Compound:  (at pp.c:20020)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__CSN__set' (at pp.c:20021)
          Compound:  (at pp.c:20022)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:20023)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:20023)
                IdentifierType: names=['char', 'unsigned'] (at None)
              FuncCall:  (at None)
                ID: name='CC2420ControlP__SpiResource__release' (at pp.c:20025)
            Compound:  (at pp.c:20027)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_end' (at pp.c:20029)
                ExprList:  (at pp.c:20029)
                  ID: name='__nesc_atomic' (at pp.c:20029)
              Return:  (at pp.c:20031)
                ID: name='__nesc_temp' (at pp.c:20031)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:20036)
          ExprList:  (at pp.c:20036)
            ID: name='__nesc_atomic' (at pp.c:20036)
  FuncDef:  (at pp.c:20040)
    Decl: name='CC2420CsmaP__Resource__release', quals=[], storage=['static', 'inline'] (at pp.c:20040)
      FuncDecl: quals=None (at pp.c:20040)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__Resource__release', quals=[] (at pp.c:20040)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20040)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20042)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20042)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20046)
        ID: name='__nesc_result' (at pp.c:20046)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__Resource__release' (at pp.c:20046)
      Return:  (at pp.c:20050)
        ID: name='__nesc_result' (at pp.c:20050)
  FuncDef:  (at pp.c:20055)
    Decl: name='CC2420ControlP__CC2420Power__rxOn', quals=[], storage=['inline', 'static'] (at pp.c:20055)
      FuncDecl: quals=None (at pp.c:20055)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__rxOn', quals=[] (at pp.c:20055)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20057)
      Compound:  (at pp.c:20058)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:20058)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:20058)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:20058)
        Compound:  (at pp.c:20060)
          If:  (at pp.c:20061)
            BinaryOp: op='!=' (at pp.c:20061)
              ID: name='CC2420ControlP__m_state' (at pp.c:20061)
              ID: name='CC2420ControlP__S_XOSC_STARTED' (at pp.c:20061)
            Compound:  (at pp.c:20061)
              Compound:  (at pp.c:20062)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:20063)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:20063)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:20065)
                Compound:  (at pp.c:20067)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:20069)
                    ExprList:  (at pp.c:20069)
                      ID: name='__nesc_atomic' (at pp.c:20069)
                  Return:  (at pp.c:20071)
                    ID: name='__nesc_temp' (at pp.c:20071)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__SRXON__strobe' (at pp.c:20076)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:20079)
          ExprList:  (at pp.c:20079)
            ID: name='__nesc_atomic' (at pp.c:20079)
      Return:  (at pp.c:20080)
        ID: name='SUCCESS' (at pp.c:20080)
  FuncDef:  (at pp.c:20084)
    Decl: name='CC2420CsmaP__CC2420Power__rxOn', quals=[], storage=['static', 'inline'] (at pp.c:20084)
      FuncDecl: quals=None (at pp.c:20084)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__rxOn', quals=[] (at pp.c:20084)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20084)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20086)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20086)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20090)
        ID: name='__nesc_result' (at pp.c:20090)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Power__rxOn' (at pp.c:20090)
      Return:  (at pp.c:20094)
        ID: name='__nesc_result' (at pp.c:20094)
  FuncDef:  (at pp.c:20099)
    Decl: name='HplMsp430InterruptP__Port10__enable', quals=[], storage=['inline', 'static'] (at pp.c:20099)
      FuncDecl: quals=None (at pp.c:20099)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port10__enable', quals=[] (at pp.c:20099)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20101)
      Assignment: op='|=' (at pp.c:20103)
        ID: name='P1IE' (at pp.c:20103)
        BinaryOp: op='<<' (at pp.c:20103)
          Constant: type='int', value='1' (at pp.c:20103)
          Constant: type='int', value='0' (at pp.c:20103)
  FuncDef:  (at pp.c:20107)
    Decl: name='Msp430InterruptC__1__HplInterrupt__enable', quals=[], storage=['static', 'inline'] (at pp.c:20107)
      FuncDecl: quals=None (at pp.c:20107)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__enable', quals=[] (at pp.c:20107)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20107)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port10__enable' (at pp.c:20109)
  FuncDef:  (at pp.c:20114)
    Decl: name='HplMsp430InterruptP__Port10__edge', quals=[], storage=['inline', 'static'] (at pp.c:20114)
      FuncDecl: quals=None (at pp.c:20114)
        ParamList:  (at pp.c:20114)
          Decl: name='l2h', quals=[], storage=[] (at pp.c:20114)
            TypeDecl: declname='l2h', quals=[] (at pp.c:20114)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port10__edge', quals=[] (at pp.c:20114)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20116)
      Compound:  (at pp.c:20119)
        If:  (at pp.c:20120)
          ID: name='l2h' (at pp.c:20120)
          Compound:  (at pp.c:20120)
            Assignment: op='&=' (at pp.c:20122)
              ID: name='P1IES' (at pp.c:20122)
              UnaryOp: op='~' (at pp.c:20122)
                BinaryOp: op='<<' (at pp.c:20122)
                  Constant: type='int', value='1' (at pp.c:20122)
                  Constant: type='int', value='0' (at pp.c:20122)
          Compound:  (at pp.c:20124)
            Assignment: op='|=' (at pp.c:20126)
              ID: name='P1IES' (at pp.c:20126)
              BinaryOp: op='<<' (at pp.c:20126)
                Constant: type='int', value='1' (at pp.c:20126)
                Constant: type='int', value='0' (at pp.c:20126)
  FuncDef:  (at pp.c:20132)
    Decl: name='Msp430InterruptC__1__HplInterrupt__edge', quals=[], storage=['static', 'inline'] (at pp.c:20132)
      FuncDecl: quals=None (at pp.c:20132)
        ParamList:  (at pp.c:20132)
          Decl: name='low_to_high', quals=[], storage=[] (at pp.c:20132)
            TypeDecl: declname='low_to_high', quals=[] (at pp.c:20132)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__edge', quals=[] (at pp.c:20132)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20132)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port10__edge' (at pp.c:20134)
        ExprList:  (at pp.c:20134)
          ID: name='low_to_high' (at pp.c:20134)
  FuncDef:  (at pp.c:20139)
    Decl: name='Msp430InterruptC__1__enable', quals=[], storage=['inline', 'static'] (at pp.c:20139)
      FuncDecl: quals=None (at pp.c:20139)
        ParamList:  (at pp.c:20139)
          Decl: name='rising', quals=[], storage=[] (at pp.c:20139)
            TypeDecl: declname='rising', quals=[] (at pp.c:20139)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__enable', quals=[] (at pp.c:20139)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20141)
      Compound:  (at pp.c:20144)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__Interrupt__disable' (at pp.c:20145)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__HplInterrupt__edge' (at pp.c:20146)
          ExprList:  (at pp.c:20146)
            ID: name='rising' (at pp.c:20146)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__HplInterrupt__enable' (at pp.c:20147)
      Return:  (at pp.c:20149)
        ID: name='SUCCESS' (at pp.c:20149)
  FuncDef:  (at pp.c:20156)
    Decl: name='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[], storage=['inline', 'static'] (at pp.c:20156)
      FuncDecl: quals=None (at pp.c:20156)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__Interrupt__enableFallingEdge', quals=[] (at pp.c:20156)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20158)
      Return:  (at pp.c:20159)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__enable' (at pp.c:20159)
          ExprList:  (at pp.c:20159)
            ID: name='FALSE' (at pp.c:20159)
  FuncDef:  (at pp.c:20163)
    Decl: name='CC2420ReceiveP__InterruptFIFOP__enableFallingEdge', quals=[], storage=['static', 'inline'] (at pp.c:20163)
      FuncDecl: quals=None (at pp.c:20163)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__enableFallingEdge', quals=[] (at pp.c:20163)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20163)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20165)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20165)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20169)
        ID: name='__nesc_result' (at pp.c:20169)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__1__Interrupt__enableFallingEdge' (at pp.c:20169)
      Return:  (at pp.c:20173)
        ID: name='__nesc_result' (at pp.c:20173)
  FuncDef:  (at pp.c:20178)
    Decl: name='CC2420ReceiveP__StdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:20178)
      FuncDecl: quals=None (at pp.c:20178)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__StdControl__start', quals=[] (at pp.c:20178)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20180)
      Compound:  (at pp.c:20181)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:20181)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:20181)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:20181)
        Compound:  (at pp.c:20183)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__reset_state' (at pp.c:20184)
          Assignment: op='=' (at pp.c:20185)
            ID: name='CC2420ReceiveP__m_state' (at pp.c:20185)
            ID: name='CC2420ReceiveP__S_STARTED' (at pp.c:20185)
          Assignment: op='=' (at pp.c:20186)
            ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:20186)
            ID: name='FALSE' (at pp.c:20186)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__InterruptFIFOP__enableFallingEdge' (at pp.c:20191)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:20194)
          ExprList:  (at pp.c:20194)
            ID: name='__nesc_atomic' (at pp.c:20194)
      Return:  (at pp.c:20195)
        ID: name='SUCCESS' (at pp.c:20195)
  FuncDef:  (at pp.c:20199)
    Decl: name='CC2420TransmitP__StdControl__start', quals=[], storage=['inline', 'static'] (at pp.c:20199)
      FuncDecl: quals=None (at pp.c:20199)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__StdControl__start', quals=[] (at pp.c:20199)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20201)
      Compound:  (at pp.c:20202)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:20202)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:20202)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:20202)
        Compound:  (at pp.c:20204)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CaptureSFD__captureRisingEdge' (at pp.c:20205)
          Assignment: op='=' (at pp.c:20206)
            ID: name='CC2420TransmitP__m_state' (at pp.c:20206)
            ID: name='CC2420TransmitP__S_STARTED' (at pp.c:20206)
          Assignment: op='=' (at pp.c:20207)
            ID: name='CC2420TransmitP__m_receiving' (at pp.c:20207)
            ID: name='FALSE' (at pp.c:20207)
          Assignment: op='=' (at pp.c:20208)
            ID: name='CC2420TransmitP__abortSpiRelease' (at pp.c:20208)
            ID: name='FALSE' (at pp.c:20208)
          Assignment: op='=' (at pp.c:20209)
            ID: name='CC2420TransmitP__m_tx_power' (at pp.c:20209)
            Constant: type='int', value='0' (at pp.c:20209)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:20212)
          ExprList:  (at pp.c:20212)
            ID: name='__nesc_atomic' (at pp.c:20212)
      Return:  (at pp.c:20213)
        ID: name='SUCCESS' (at pp.c:20213)
  FuncDef:  (at pp.c:20217)
    Decl: name='CC2420CsmaP__SubControl__start', quals=[], storage=['static', 'inline'] (at pp.c:20217)
      FuncDecl: quals=None (at pp.c:20217)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubControl__start', quals=[] (at pp.c:20217)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20217)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20219)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20219)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20223)
        ID: name='__nesc_result' (at pp.c:20223)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__StdControl__start' (at pp.c:20223)
      Assignment: op='=' (at pp.c:20225)
        ID: name='__nesc_result' (at pp.c:20225)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:20225)
          ExprList:  (at pp.c:20225)
            ID: name='__nesc_result' (at pp.c:20225)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__StdControl__start' (at pp.c:20225)
      Return:  (at pp.c:20229)
        ID: name='__nesc_result' (at pp.c:20229)
  FuncDef:  (at pp.c:20234)
    Decl: name='CC2420CsmaP__startDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:20234)
      FuncDecl: quals=None (at pp.c:20234)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__startDone_task__runTask', quals=[] (at pp.c:20234)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20236)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubControl__start' (at pp.c:20237)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Power__rxOn' (at pp.c:20238)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__Resource__release' (at pp.c:20239)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:20240)
        ExprList:  (at pp.c:20240)
          ID: name='CC2420CsmaP__S_STARTED' (at pp.c:20240)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SplitControl__startDone' (at pp.c:20241)
        ExprList:  (at pp.c:20241)
          ID: name='SUCCESS' (at pp.c:20241)
  FuncDef:  (at pp.c:20245)
    Decl: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:20245)
      FuncDecl: quals=None (at pp.c:20245)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__runTask', quals=[] (at pp.c:20245)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20247)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__sendSampleMsg' (at pp.c:20249)
  FuncDef:  (at pp.c:20253)
    Decl: name='__nesc_hton_uint16', quals=[], storage=['__inline', 'static'] (at pp.c:20253)
      FuncDecl: quals=None (at pp.c:20253)
        ParamList:  (at pp.c:20253)
          Decl: name='target', quals=[], storage=[] (at pp.c:20253)
            PtrDecl: quals=[] (at pp.c:20253)
              TypeDecl: declname='target', quals=[] (at pp.c:20253)
                IdentifierType: names=['void'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:20253)
            TypeDecl: declname='value', quals=[] (at pp.c:20253)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='__nesc_hton_uint16', quals=[] (at pp.c:20253)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:20255)
      Decl: name='base', quals=[], storage=[] (at pp.c:20256)
        PtrDecl: quals=[] (at pp.c:20256)
          TypeDecl: declname='base', quals=[] (at pp.c:20256)
            IdentifierType: names=['uint8_t'] (at None)
        ID: name='target' (at pp.c:20256)
      Assignment: op='=' (at pp.c:20259)
        ArrayRef:  (at pp.c:20259)
          ID: name='base' (at pp.c:20259)
          Constant: type='int', value='1' (at pp.c:20259)
        ID: name='value' (at pp.c:20259)
      Assignment: op='=' (at pp.c:20260)
        ArrayRef:  (at pp.c:20260)
          ID: name='base' (at pp.c:20260)
          Constant: type='int', value='0' (at pp.c:20260)
        BinaryOp: op='>>' (at pp.c:20260)
          ID: name='value' (at pp.c:20260)
          Constant: type='int', value='8' (at pp.c:20260)
      Return:  (at pp.c:20261)
        ID: name='value' (at pp.c:20261)
  FuncDef:  (at pp.c:20265)
    Decl: name='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:20265)
      FuncDecl: quals=None (at pp.c:20265)
        ParamList:  (at pp.c:20265)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20265)
            PtrDecl: quals=[] (at pp.c:20265)
              TypeDecl: declname='msg', quals=[] (at pp.c:20265)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='intervalMs', quals=[], storage=[] (at pp.c:20266)
            TypeDecl: declname='intervalMs', quals=[] (at pp.c:20266)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='DefaultLplP__LowPowerListening__setRemoteWakeupInterval', quals=[] (at pp.c:20265)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20268)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint16' (at pp.c:20269)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='DefaultLplP__CC2420PacketBody__getMetadata' (at pp.c:20269)
                ExprList:  (at pp.c:20269)
                  ID: name='msg' (at pp.c:20269)
              ID: name='rxInterval' (at pp.c:20269)
            ID: name='nxdata' (at pp.c:20269)
          ID: name='intervalMs' (at pp.c:20269)
  FuncDef:  (at pp.c:20273)
    Decl: name='LowPowerSensingPeriodicSamplerC__LPL__setRemoteWakeupInterval', quals=[], storage=['static', 'inline'] (at pp.c:20273)
      FuncDecl: quals=None (at pp.c:20273)
        ParamList:  (at pp.c:20273)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20273)
            PtrDecl: quals=[] (at pp.c:20273)
              TypeDecl: declname='msg', quals=[] (at pp.c:20273)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='intervalMs', quals=[], storage=[] (at pp.c:20273)
            TypeDecl: declname='intervalMs', quals=[] (at pp.c:20273)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__LPL__setRemoteWakeupInterval', quals=[] (at pp.c:20273)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20273)
      FuncCall:  (at None)
        ID: name='DefaultLplP__LowPowerListening__setRemoteWakeupInterval' (at pp.c:20275)
        ExprList:  (at pp.c:20275)
          ID: name='msg' (at pp.c:20275)
          ID: name='intervalMs' (at pp.c:20275)
  FuncDef:  (at pp.c:20280)
    Decl: name='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[], storage=['inline', 'static'] (at pp.c:20280)
      FuncDecl: quals=None (at pp.c:20280)
        ParamList:  (at pp.c:20280)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20280)
            PtrDecl: quals=[] (at pp.c:20280)
              TypeDecl: declname='msg', quals=[] (at pp.c:20280)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20280)
            TypeDecl: declname='len', quals=[] (at pp.c:20280)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__Packet__setPayloadLength', quals=[] (at pp.c:20280)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20282)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint8' (at pp.c:20283)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:20283)
                ExprList:  (at pp.c:20283)
                  ID: name='msg' (at pp.c:20283)
              ID: name='length' (at pp.c:20283)
            ID: name='nxdata' (at pp.c:20283)
          BinaryOp: op='+' (at pp.c:20283)
            ID: name='len' (at pp.c:20283)
            ID: name='CC2420_SIZE' (at pp.c:20283)
  FuncDef:  (at pp.c:20287)
    Decl: name='AMQueueImplP__0__Packet__setPayloadLength', quals=[], storage=['static', 'inline'] (at pp.c:20287)
      FuncDecl: quals=None (at pp.c:20287)
        ParamList:  (at pp.c:20287)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20287)
            PtrDecl: quals=[] (at pp.c:20287)
              TypeDecl: declname='msg', quals=[] (at pp.c:20287)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20287)
            TypeDecl: declname='len', quals=[] (at pp.c:20287)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__Packet__setPayloadLength', quals=[] (at pp.c:20287)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20287)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__Packet__setPayloadLength' (at pp.c:20289)
        ExprList:  (at pp.c:20289)
          ID: name='msg' (at pp.c:20289)
          ID: name='len' (at pp.c:20289)
  FuncDef:  (at pp.c:20294)
    Decl: name='AMQueueImplP__0__Send__send', quals=[], storage=['inline', 'static'] (at pp.c:20294)
      FuncDecl: quals=None (at pp.c:20294)
        ParamList:  (at pp.c:20294)
          Decl: name='clientId', quals=[], storage=[] (at pp.c:20294)
            TypeDecl: declname='clientId', quals=[] (at pp.c:20294)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20294)
            PtrDecl: quals=[] (at pp.c:20294)
              TypeDecl: declname='msg', quals=[] (at pp.c:20294)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20295)
            TypeDecl: declname='len', quals=[] (at pp.c:20295)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__Send__send', quals=[] (at pp.c:20294)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20297)
      If:  (at pp.c:20298)
        BinaryOp: op='>=' (at pp.c:20298)
          ID: name='clientId' (at pp.c:20298)
          Constant: type='int', value='1' (at pp.c:20298)
        Compound:  (at pp.c:20298)
          Return:  (at pp.c:20299)
            ID: name='FAIL' (at pp.c:20299)
      If:  (at pp.c:20301)
        BinaryOp: op='!=' (at pp.c:20301)
          StructRef: type='.' (at pp.c:20301)
            ArrayRef:  (at pp.c:20301)
              ID: name='AMQueueImplP__0__queue' (at pp.c:20301)
              ID: name='clientId' (at pp.c:20301)
            ID: name='msg' (at pp.c:20301)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:20301)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['void'] (at None)
            Constant: type='int', value='0' (at pp.c:20301)
        Compound:  (at pp.c:20301)
          Return:  (at pp.c:20302)
            ID: name='EBUSY' (at pp.c:20302)
      Assignment: op='=' (at pp.c:20306)
        StructRef: type='.' (at pp.c:20306)
          ArrayRef:  (at pp.c:20306)
            ID: name='AMQueueImplP__0__queue' (at pp.c:20306)
            ID: name='clientId' (at pp.c:20306)
          ID: name='msg' (at pp.c:20306)
        ID: name='msg' (at pp.c:20306)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__Packet__setPayloadLength' (at pp.c:20307)
        ExprList:  (at pp.c:20307)
          ID: name='msg' (at pp.c:20307)
          ID: name='len' (at pp.c:20307)
      If:  (at pp.c:20309)
        BinaryOp: op='>=' (at pp.c:20309)
          ID: name='AMQueueImplP__0__current' (at pp.c:20309)
          Constant: type='int', value='1' (at pp.c:20309)
        Compound:  (at pp.c:20309)
          Decl: name='err', quals=[], storage=[] (at pp.c:20310)
            TypeDecl: declname='err', quals=[] (at pp.c:20310)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='amId', quals=[], storage=[] (at pp.c:20311)
            TypeDecl: declname='amId', quals=[] (at pp.c:20311)
              IdentifierType: names=['am_id_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMPacket__type' (at pp.c:20311)
              ExprList:  (at pp.c:20311)
                ID: name='msg' (at pp.c:20311)
          Decl: name='dest', quals=[], storage=[] (at pp.c:20312)
            TypeDecl: declname='dest', quals=[] (at pp.c:20312)
              IdentifierType: names=['am_addr_t'] (at None)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMPacket__destination' (at pp.c:20312)
              ExprList:  (at pp.c:20312)
                ID: name='msg' (at pp.c:20312)
          Assignment: op='=' (at pp.c:20315)
            ID: name='AMQueueImplP__0__current' (at pp.c:20315)
            ID: name='clientId' (at pp.c:20315)
          Assignment: op='=' (at pp.c:20317)
            ID: name='err' (at pp.c:20317)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__AMSend__send' (at pp.c:20317)
              ExprList:  (at pp.c:20317)
                ID: name='amId' (at pp.c:20317)
                ID: name='dest' (at pp.c:20317)
                ID: name='msg' (at pp.c:20317)
                ID: name='len' (at pp.c:20317)
          If:  (at pp.c:20318)
            BinaryOp: op='!=' (at pp.c:20318)
              ID: name='err' (at pp.c:20318)
              ID: name='SUCCESS' (at pp.c:20318)
            Compound:  (at pp.c:20318)
              Assignment: op='=' (at pp.c:20320)
                ID: name='AMQueueImplP__0__current' (at pp.c:20320)
                Constant: type='int', value='1' (at pp.c:20320)
              Assignment: op='=' (at pp.c:20321)
                StructRef: type='.' (at pp.c:20321)
                  ArrayRef:  (at pp.c:20321)
                    ID: name='AMQueueImplP__0__queue' (at pp.c:20321)
                    ID: name='clientId' (at pp.c:20321)
                  ID: name='msg' (at pp.c:20321)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:20321)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['void'] (at None)
                  Constant: type='int', value='0' (at pp.c:20321)
          Return:  (at pp.c:20324)
            ID: name='err' (at pp.c:20324)
        Compound:  (at pp.c:20326)
      Return:  (at pp.c:20329)
        ID: name='SUCCESS' (at pp.c:20329)
  FuncDef:  (at pp.c:20333)
    Decl: name='AMQueueEntryP__0__Send__send', quals=[], storage=['static', 'inline'] (at pp.c:20333)
      FuncDecl: quals=None (at pp.c:20333)
        ParamList:  (at pp.c:20333)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20333)
            PtrDecl: quals=[] (at pp.c:20333)
              TypeDecl: declname='msg', quals=[] (at pp.c:20333)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20333)
            TypeDecl: declname='len', quals=[] (at pp.c:20333)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__Send__send', quals=[] (at pp.c:20333)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20333)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20335)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20335)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20339)
        ID: name='__nesc_result' (at pp.c:20339)
        FuncCall:  (at None)
          ID: name='AMQueueImplP__0__Send__send' (at pp.c:20339)
          ExprList:  (at pp.c:20339)
            Constant: type='int', value='0U' (at pp.c:20339)
            ID: name='msg' (at pp.c:20339)
            ID: name='len' (at pp.c:20339)
      Return:  (at pp.c:20343)
        ID: name='__nesc_result' (at pp.c:20343)
  FuncDef:  (at pp.c:20348)
    Decl: name='CC2420ActiveMessageP__AMPacket__setType', quals=[], storage=['inline', 'static'] (at pp.c:20348)
      FuncDecl: quals=None (at pp.c:20348)
        ParamList:  (at pp.c:20348)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:20348)
            PtrDecl: quals=[] (at pp.c:20348)
              TypeDecl: declname='amsg', quals=[] (at pp.c:20348)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='type', quals=[], storage=[] (at pp.c:20348)
            TypeDecl: declname='type', quals=[] (at pp.c:20348)
              IdentifierType: names=['am_id_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setType', quals=[] (at pp.c:20348)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20350)
      Decl: name='header', quals=[], storage=[] (at pp.c:20351)
        PtrDecl: quals=[] (at pp.c:20351)
          TypeDecl: declname='header', quals=[] (at pp.c:20351)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:20351)
          ExprList:  (at pp.c:20351)
            ID: name='amsg' (at pp.c:20351)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint8' (at pp.c:20354)
        ExprList:  (at pp.c:20354)
          StructRef: type='.' (at pp.c:20354)
            StructRef: type='->' (at pp.c:20354)
              ID: name='header' (at pp.c:20354)
              ID: name='type' (at pp.c:20354)
            ID: name='nxdata' (at pp.c:20354)
          ID: name='type' (at pp.c:20354)
  FuncDef:  (at pp.c:20358)
    Decl: name='AMQueueEntryP__0__AMPacket__setType', quals=[], storage=['static', 'inline'] (at pp.c:20358)
      FuncDecl: quals=None (at pp.c:20358)
        ParamList:  (at pp.c:20358)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:20358)
            PtrDecl: quals=[] (at pp.c:20358)
              TypeDecl: declname='amsg', quals=[] (at pp.c:20358)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='t', quals=[], storage=[] (at pp.c:20358)
            TypeDecl: declname='t', quals=[] (at pp.c:20358)
              IdentifierType: names=['am_id_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__AMPacket__setType', quals=[] (at pp.c:20358)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20358)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__AMPacket__setType' (at pp.c:20360)
        ExprList:  (at pp.c:20360)
          ID: name='amsg' (at pp.c:20360)
          ID: name='t' (at pp.c:20360)
  FuncDef:  (at pp.c:20365)
    Decl: name='CC2420ActiveMessageP__AMPacket__setDestination', quals=[], storage=['inline', 'static'] (at pp.c:20365)
      FuncDecl: quals=None (at pp.c:20365)
        ParamList:  (at pp.c:20365)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:20365)
            PtrDecl: quals=[] (at pp.c:20365)
              TypeDecl: declname='amsg', quals=[] (at pp.c:20365)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:20365)
            TypeDecl: declname='addr', quals=[] (at pp.c:20365)
              IdentifierType: names=['am_addr_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__setDestination', quals=[] (at pp.c:20365)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20367)
      Decl: name='header', quals=[], storage=[] (at pp.c:20368)
        PtrDecl: quals=[] (at pp.c:20368)
          TypeDecl: declname='header', quals=[] (at pp.c:20368)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:20368)
          ExprList:  (at pp.c:20368)
            ID: name='amsg' (at pp.c:20368)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint16' (at pp.c:20371)
        ExprList:  (at pp.c:20371)
          StructRef: type='.' (at pp.c:20371)
            StructRef: type='->' (at pp.c:20371)
              ID: name='header' (at pp.c:20371)
              ID: name='dest' (at pp.c:20371)
            ID: name='nxdata' (at pp.c:20371)
          ID: name='addr' (at pp.c:20371)
  FuncDef:  (at pp.c:20375)
    Decl: name='AMQueueEntryP__0__AMPacket__setDestination', quals=[], storage=['static', 'inline'] (at pp.c:20375)
      FuncDecl: quals=None (at pp.c:20375)
        ParamList:  (at pp.c:20375)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:20375)
            PtrDecl: quals=[] (at pp.c:20375)
              TypeDecl: declname='amsg', quals=[] (at pp.c:20375)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:20375)
            TypeDecl: declname='addr', quals=[] (at pp.c:20375)
              IdentifierType: names=['am_addr_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__AMPacket__setDestination', quals=[] (at pp.c:20375)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20375)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__AMPacket__setDestination' (at pp.c:20377)
        ExprList:  (at pp.c:20377)
          ID: name='amsg' (at pp.c:20377)
          ID: name='addr' (at pp.c:20377)
  FuncDef:  (at pp.c:20382)
    Decl: name='AMQueueEntryP__0__AMSend__send', quals=[], storage=['inline', 'static'] (at pp.c:20382)
      FuncDecl: quals=None (at pp.c:20382)
        ParamList:  (at pp.c:20382)
          Decl: name='dest', quals=[], storage=[] (at pp.c:20382)
            TypeDecl: declname='dest', quals=[] (at pp.c:20382)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20383)
            PtrDecl: quals=[] (at pp.c:20383)
              TypeDecl: declname='msg', quals=[] (at pp.c:20383)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20384)
            TypeDecl: declname='len', quals=[] (at pp.c:20384)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='AMQueueEntryP__0__AMSend__send', quals=[] (at pp.c:20382)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20386)
      FuncCall:  (at None)
        ID: name='AMQueueEntryP__0__AMPacket__setDestination' (at pp.c:20387)
        ExprList:  (at pp.c:20387)
          ID: name='msg' (at pp.c:20387)
          ID: name='dest' (at pp.c:20387)
      FuncCall:  (at None)
        ID: name='AMQueueEntryP__0__AMPacket__setType' (at pp.c:20388)
        ExprList:  (at pp.c:20388)
          ID: name='msg' (at pp.c:20388)
          Constant: type='int', value='152' (at pp.c:20388)
      Return:  (at pp.c:20389)
        FuncCall:  (at None)
          ID: name='AMQueueEntryP__0__Send__send' (at pp.c:20389)
          ExprList:  (at pp.c:20389)
            ID: name='msg' (at pp.c:20389)
            ID: name='len' (at pp.c:20389)
  FuncDef:  (at pp.c:20393)
    Decl: name='LplAMSenderP__0__SubAMSend__send', quals=[], storage=['static', 'inline'] (at pp.c:20393)
      FuncDecl: quals=None (at pp.c:20393)
        ParamList:  (at pp.c:20393)
          Decl: name='addr', quals=[], storage=[] (at pp.c:20393)
            TypeDecl: declname='addr', quals=[] (at pp.c:20393)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20393)
            PtrDecl: quals=[] (at pp.c:20393)
              TypeDecl: declname='msg', quals=[] (at pp.c:20393)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20393)
            TypeDecl: declname='len', quals=[] (at pp.c:20393)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='LplAMSenderP__0__SubAMSend__send', quals=[] (at pp.c:20393)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20393)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20395)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20395)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20399)
        ID: name='__nesc_result' (at pp.c:20399)
        FuncCall:  (at None)
          ID: name='AMQueueEntryP__0__AMSend__send' (at pp.c:20399)
          ExprList:  (at pp.c:20399)
            ID: name='addr' (at pp.c:20399)
            ID: name='msg' (at pp.c:20399)
            ID: name='len' (at pp.c:20399)
      Return:  (at pp.c:20403)
        ID: name='__nesc_result' (at pp.c:20403)
  FuncDef:  (at pp.c:20408)
    Decl: name='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:20408)
      FuncDecl: quals=None (at pp.c:20408)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[] (at pp.c:20408)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:20410)
      Return:  (at pp.c:20412)
        ID: name='SystemLowPowerListeningP__remoteWakeup' (at pp.c:20412)
  FuncDef:  (at pp.c:20416)
    Decl: name='LplAMSenderP__0__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[], storage=['static', 'inline'] (at pp.c:20416)
      FuncDecl: quals=None (at pp.c:20416)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LplAMSenderP__0__SystemLowPowerListening__getDefaultRemoteWakeupInterval', quals=[] (at pp.c:20416)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:20416)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20418)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20418)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20422)
        ID: name='__nesc_result' (at pp.c:20422)
        FuncCall:  (at None)
          ID: name='SystemLowPowerListeningP__SystemLowPowerListening__getDefaultRemoteWakeupInterval' (at pp.c:20422)
      Return:  (at pp.c:20426)
        ID: name='__nesc_result' (at pp.c:20426)
  FuncDef:  (at pp.c:20431)
    Decl: name='LplAMSenderP__0__Lpl__setRemoteWakeupInterval', quals=[], storage=['static', 'inline'] (at pp.c:20431)
      FuncDecl: quals=None (at pp.c:20431)
        ParamList:  (at pp.c:20431)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20431)
            PtrDecl: quals=[] (at pp.c:20431)
              TypeDecl: declname='msg', quals=[] (at pp.c:20431)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='intervalMs', quals=[], storage=[] (at pp.c:20431)
            TypeDecl: declname='intervalMs', quals=[] (at pp.c:20431)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='LplAMSenderP__0__Lpl__setRemoteWakeupInterval', quals=[] (at pp.c:20431)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20431)
      FuncCall:  (at None)
        ID: name='DefaultLplP__LowPowerListening__setRemoteWakeupInterval' (at pp.c:20433)
        ExprList:  (at pp.c:20433)
          ID: name='msg' (at pp.c:20433)
          ID: name='intervalMs' (at pp.c:20433)
  FuncDef:  (at pp.c:20438)
    Decl: name='LplAMSenderP__0__AMSend__send', quals=[], storage=['inline', 'static'] (at pp.c:20438)
      FuncDecl: quals=None (at pp.c:20438)
        ParamList:  (at pp.c:20438)
          Decl: name='addr', quals=[], storage=[] (at pp.c:20438)
            TypeDecl: declname='addr', quals=[] (at pp.c:20438)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20438)
            PtrDecl: quals=[] (at pp.c:20438)
              TypeDecl: declname='msg', quals=[] (at pp.c:20438)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20438)
            TypeDecl: declname='len', quals=[] (at pp.c:20438)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='LplAMSenderP__0__AMSend__send', quals=[] (at pp.c:20438)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20439)
      FuncCall:  (at None)
        ID: name='LplAMSenderP__0__Lpl__setRemoteWakeupInterval' (at pp.c:20440)
        ExprList:  (at pp.c:20440)
          ID: name='msg' (at pp.c:20440)
          FuncCall:  (at None)
            ID: name='LplAMSenderP__0__SystemLowPowerListening__getDefaultRemoteWakeupInterval' (at pp.c:20440)
      Return:  (at pp.c:20441)
        FuncCall:  (at None)
          ID: name='LplAMSenderP__0__SubAMSend__send' (at pp.c:20441)
          ExprList:  (at pp.c:20441)
            ID: name='addr' (at pp.c:20441)
            ID: name='msg' (at pp.c:20441)
            ID: name='len' (at pp.c:20441)
  FuncDef:  (at pp.c:20445)
    Decl: name='LowPowerSensingPeriodicSamplerC__SampleSend__send', quals=[], storage=['static', 'inline'] (at pp.c:20445)
      FuncDecl: quals=None (at pp.c:20445)
        ParamList:  (at pp.c:20445)
          Decl: name='addr', quals=[], storage=[] (at pp.c:20445)
            TypeDecl: declname='addr', quals=[] (at pp.c:20445)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:20445)
            PtrDecl: quals=[] (at pp.c:20445)
              TypeDecl: declname='msg', quals=[] (at pp.c:20445)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20445)
            TypeDecl: declname='len', quals=[] (at pp.c:20445)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleSend__send', quals=[] (at pp.c:20445)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20445)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20447)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20447)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20451)
        ID: name='__nesc_result' (at pp.c:20451)
        FuncCall:  (at None)
          ID: name='LplAMSenderP__0__AMSend__send' (at pp.c:20451)
          ExprList:  (at pp.c:20451)
            ID: name='addr' (at pp.c:20451)
            ID: name='msg' (at pp.c:20451)
            ID: name='len' (at pp.c:20451)
      Return:  (at pp.c:20455)
        ID: name='__nesc_result' (at pp.c:20455)
  FuncDef:  (at pp.c:20460)
    Decl: name='HplMsp430GeneralIOP__38__IO__clr', quals=[], storage=['inline', 'static'] (at pp.c:20460)
      FuncDecl: quals=None (at pp.c:20460)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__38__IO__clr', quals=[] (at pp.c:20460)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20462)
      Compound:  (at pp.c:20464)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:20464)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:20464)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:20464)
        Assignment: op='&=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:20466)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='49U' (at pp.c:20466)
          UnaryOp: op='~' (at pp.c:20466)
            BinaryOp: op='<<' (at pp.c:20466)
              Constant: type='int', value='0x01' (at pp.c:20466)
              Constant: type='int', value='6' (at pp.c:20466)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:20468)
          ExprList:  (at pp.c:20468)
            ID: name='__nesc_atomic' (at pp.c:20468)
  FuncDef:  (at pp.c:20472)
    Decl: name='Msp430GpioC__2__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:20472)
      FuncDecl: quals=None (at pp.c:20472)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__HplGeneralIO__clr', quals=[] (at pp.c:20472)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20472)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__38__IO__clr' (at pp.c:20474)
  FuncDef:  (at pp.c:20479)
    Decl: name='Msp430GpioC__2__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:20479)
      FuncDecl: quals=None (at pp.c:20479)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__2__GeneralIO__clr', quals=[] (at pp.c:20479)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20481)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__HplGeneralIO__clr' (at pp.c:20483)
  FuncDef:  (at pp.c:20487)
    Decl: name='LedsP__Led2__clr', quals=[], storage=['static', 'inline'] (at pp.c:20487)
      FuncDecl: quals=None (at pp.c:20487)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Led2__clr', quals=[] (at pp.c:20487)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20487)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__2__GeneralIO__clr' (at pp.c:20489)
  FuncDef:  (at pp.c:20494)
    Decl: name='LedsP__Leds__led2On', quals=[], storage=['inline', 'static'] (at pp.c:20494)
      FuncDecl: quals=None (at pp.c:20494)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LedsP__Leds__led2On', quals=[] (at pp.c:20494)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20496)
      FuncCall:  (at None)
        ID: name='LedsP__Led2__clr' (at pp.c:20497)
  FuncDef:  (at pp.c:20504)
    Decl: name='LowPowerSensingPeriodicSamplerC__Leds__led2On', quals=[], storage=['static', 'inline'] (at pp.c:20504)
      FuncDecl: quals=None (at pp.c:20504)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Leds__led2On', quals=[] (at pp.c:20504)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20504)
      FuncCall:  (at None)
        ID: name='LedsP__Leds__led2On' (at pp.c:20506)
  FuncDef:  (at pp.c:20511)
    Decl: name='LowPowerSensingPeriodicSamplerC__readNextTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:20511)
      FuncDecl: quals=None (at pp.c:20511)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__readNextTask__runTask', quals=[] (at pp.c:20511)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20513)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__readNext' (at pp.c:20515)
  FuncDef:  (at pp.c:20519)
    Decl: name='CC2420SpiP__grant__postTask', quals=[], storage=['static', 'inline'] (at pp.c:20519)
      FuncDecl: quals=None (at pp.c:20519)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__grant__postTask', quals=[] (at pp.c:20519)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20519)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20521)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20521)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20525)
        ID: name='__nesc_result' (at pp.c:20525)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:20525)
          ExprList:  (at pp.c:20525)
            ID: name='CC2420SpiP__grant' (at pp.c:20525)
      Return:  (at pp.c:20529)
        ID: name='__nesc_result' (at pp.c:20529)
  FuncDef:  (at pp.c:20534)
    Decl: name='CC2420SpiP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:20534)
      FuncDecl: quals=None (at pp.c:20534)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiResource__granted', quals=[] (at pp.c:20534)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20536)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__grant__postTask' (at pp.c:20537)
  FuncDef:  (at pp.c:20541)
    Decl: name='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:20541)
      FuncDecl: quals=None (at pp.c:20541)
        ParamList:  (at pp.c:20541)
          Decl: name='id', quals=[], storage=[] (at pp.c:20541)
            TypeDecl: declname='id', quals=[] (at pp.c:20541)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__default__granted', quals=[] (at pp.c:20541)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20543)
  FuncDef:  (at pp.c:20547)
    Decl: name='Msp430SpiNoDmaP__0__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:20547)
      FuncDecl: quals=None (at pp.c:20547)
        ParamList:  (at pp.c:20547)
          Decl: name='arg_0x101c3e020', quals=[], storage=[] (at pp.c:20547)
            TypeDecl: declname='arg_0x101c3e020', quals=[] (at pp.c:20547)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Resource__granted', quals=[] (at pp.c:20547)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20547)
      Switch:  (at pp.c:20549)
        ID: name='arg_0x101c3e020' (at pp.c:20549)
        Compound:  (at pp.c:20549)
          Case:  (at pp.c:20551)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:20551)
            FuncCall:  (at None)
              ID: name='Stm25pSpiP__SpiResource__granted' (at pp.c:20553)
          Break:  (at pp.c:20555)
          Case:  (at pp.c:20557)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:20557)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__SpiResource__granted' (at pp.c:20559)
          Break:  (at pp.c:20561)
          Default:  (at pp.c:20563)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__Resource__default__granted' (at pp.c:20565)
              ExprList:  (at pp.c:20565)
                ID: name='arg_0x101c3e020' (at pp.c:20565)
          Break:  (at pp.c:20567)
  FuncDef:  (at pp.c:20574)
    Decl: name='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:20574)
      FuncDecl: quals=None (at pp.c:20574)
        ParamList:  (at pp.c:20574)
          Decl: name='id', quals=[], storage=[] (at pp.c:20574)
            TypeDecl: declname='id', quals=[] (at pp.c:20574)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartResource__granted', quals=[] (at pp.c:20574)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20576)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Resource__granted' (at pp.c:20577)
        ExprList:  (at pp.c:20577)
          ID: name='id' (at pp.c:20577)
  FuncDef:  (at pp.c:20581)
    Decl: name='ArbiterP__1__Resource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:20581)
      FuncDecl: quals=None (at pp.c:20581)
        ParamList:  (at pp.c:20581)
          Decl: name='id', quals=[], storage=[] (at pp.c:20581)
            TypeDecl: declname='id', quals=[] (at pp.c:20581)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__default__granted', quals=[] (at pp.c:20581)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20583)
  FuncDef:  (at pp.c:20587)
    Decl: name='ArbiterP__1__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:20587)
      FuncDecl: quals=None (at pp.c:20587)
        ParamList:  (at pp.c:20587)
          Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:20587)
            TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:20587)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__granted', quals=[] (at pp.c:20587)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20587)
      Switch:  (at pp.c:20589)
        ID: name='arg_0x101ac5d40' (at pp.c:20589)
        Compound:  (at pp.c:20589)
          Case:  (at pp.c:20591)
            ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:20591)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__UsartResource__granted' (at pp.c:20593)
              ExprList:  (at pp.c:20593)
                ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:20593)
          Break:  (at pp.c:20595)
          Case:  (at pp.c:20597)
            ID: name='Msp430Usart0C__1__CLIENT_ID' (at pp.c:20597)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__UsartResource__granted' (at pp.c:20599)
              ExprList:  (at pp.c:20599)
                ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:20599)
          Break:  (at pp.c:20601)
          Default:  (at pp.c:20603)
            FuncCall:  (at None)
              ID: name='ArbiterP__1__Resource__default__granted' (at pp.c:20605)
              ExprList:  (at pp.c:20605)
                ID: name='arg_0x101ac5d40' (at pp.c:20605)
          Break:  (at pp.c:20607)
  FuncDef:  (at pp.c:20614)
    Decl: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[], storage=['inline', 'static'] (at pp.c:20614)
      FuncDecl: quals=None (at pp.c:20614)
        ParamList:  (at pp.c:20614)
          Decl: name='id', quals=[], storage=[] (at pp.c:20614)
            TypeDecl: declname='id', quals=[] (at pp.c:20614)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:20614)
          TypeDecl: declname='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig', quals=[] (at pp.c:20614)
            IdentifierType: names=['msp430_spi_union_config_t'] (at None)
    Compound:  (at pp.c:20616)
      Return:  (at pp.c:20617)
        UnaryOp: op='&' (at pp.c:20617)
          ID: name='msp430_spi_default_config' (at pp.c:20617)
  FuncDef:  (at pp.c:20621)
    Decl: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__getConfig', quals=[], storage=['static', 'inline'] (at pp.c:20621)
      FuncDecl: quals=None (at pp.c:20621)
        ParamList:  (at pp.c:20621)
          Decl: name='arg_0x101c38220', quals=[], storage=[] (at pp.c:20621)
            TypeDecl: declname='arg_0x101c38220', quals=[] (at pp.c:20621)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:20621)
          TypeDecl: declname='Msp430SpiNoDmaP__0__Msp430SpiConfigure__getConfig', quals=[] (at pp.c:20621)
            IdentifierType: names=['msp430_spi_union_config_t'] (at None)
    Compound:  (at pp.c:20621)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20623)
        PtrDecl: quals=[] (at pp.c:20623)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20623)
            Union: name='__nesc_unnamed4285', packed=False (at pp.c:20623)
      Assignment: op='=' (at pp.c:20627)
        ID: name='__nesc_result' (at pp.c:20627)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__default__getConfig' (at pp.c:20627)
          ExprList:  (at pp.c:20627)
            ID: name='arg_0x101c38220' (at pp.c:20627)
      Return:  (at pp.c:20631)
        ID: name='__nesc_result' (at pp.c:20631)
  FuncDef:  (at pp.c:20636)
    Decl: name='Msp430SpiNoDmaP__0__Usart__setModeSpi', quals=[], storage=['static', 'inline'] (at pp.c:20636)
      FuncDecl: quals=None (at pp.c:20636)
        ParamList:  (at pp.c:20636)
          Decl: name='config', quals=[], storage=[] (at pp.c:20636)
            PtrDecl: quals=[] (at pp.c:20636)
              TypeDecl: declname='config', quals=[] (at pp.c:20636)
                IdentifierType: names=['msp430_spi_union_config_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__setModeSpi', quals=[] (at pp.c:20636)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20636)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__setModeSpi' (at pp.c:20638)
        ExprList:  (at pp.c:20638)
          ID: name='config' (at pp.c:20638)
  FuncDef:  (at pp.c:20643)
    Decl: name='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[], storage=['inline', 'static'] (at pp.c:20643)
      FuncDecl: quals=None (at pp.c:20643)
        ParamList:  (at pp.c:20643)
          Decl: name='id', quals=[], storage=[] (at pp.c:20643)
            TypeDecl: declname='id', quals=[] (at pp.c:20643)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__ResourceConfigure__configure', quals=[] (at pp.c:20643)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20645)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__setModeSpi' (at pp.c:20646)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__Msp430SpiConfigure__getConfig' (at pp.c:20646)
            ExprList:  (at pp.c:20646)
              ID: name='id' (at pp.c:20646)
  FuncDef:  (at pp.c:20650)
    Decl: name='ArbiterP__1__ResourceConfigure__default__configure', quals=[], storage=['inline', 'static'] (at pp.c:20650)
      FuncDecl: quals=None (at pp.c:20650)
        ParamList:  (at pp.c:20650)
          Decl: name='id', quals=[], storage=[] (at pp.c:20650)
            TypeDecl: declname='id', quals=[] (at pp.c:20650)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceConfigure__default__configure', quals=[] (at pp.c:20650)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20652)
  FuncDef:  (at pp.c:20656)
    Decl: name='ArbiterP__1__ResourceConfigure__configure', quals=[], storage=['static', 'inline'] (at pp.c:20656)
      FuncDecl: quals=None (at pp.c:20656)
        ParamList:  (at pp.c:20656)
          Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:20656)
            TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:20656)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceConfigure__configure', quals=[] (at pp.c:20656)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20656)
      Switch:  (at pp.c:20658)
        ID: name='arg_0x101ac0340' (at pp.c:20658)
        Compound:  (at pp.c:20658)
          Case:  (at pp.c:20660)
            ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:20660)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__ResourceConfigure__configure' (at pp.c:20662)
              ExprList:  (at pp.c:20662)
                ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:20662)
          Break:  (at pp.c:20664)
          Case:  (at pp.c:20666)
            ID: name='Msp430Usart0C__1__CLIENT_ID' (at pp.c:20666)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__ResourceConfigure__configure' (at pp.c:20668)
              ExprList:  (at pp.c:20668)
                ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:20668)
          Break:  (at pp.c:20670)
          Default:  (at pp.c:20672)
            FuncCall:  (at None)
              ID: name='ArbiterP__1__ResourceConfigure__default__configure' (at pp.c:20674)
              ExprList:  (at pp.c:20674)
                ID: name='arg_0x101ac0340' (at pp.c:20674)
          Break:  (at pp.c:20676)
  FuncDef:  (at pp.c:20683)
    Decl: name='ArbiterP__1__grantedTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:20683)
      FuncDecl: quals=None (at pp.c:20683)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__grantedTask__runTask', quals=[] (at pp.c:20683)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20685)
      Compound:  (at pp.c:20686)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:20686)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:20686)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:20686)
        Compound:  (at pp.c:20688)
          Assignment: op='=' (at pp.c:20689)
            ID: name='ArbiterP__1__resId' (at pp.c:20689)
            ID: name='ArbiterP__1__reqResId' (at pp.c:20689)
          Assignment: op='=' (at pp.c:20690)
            ID: name='ArbiterP__1__state' (at pp.c:20690)
            ID: name='ArbiterP__1__RES_BUSY' (at pp.c:20690)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:20693)
          ExprList:  (at pp.c:20693)
            ID: name='__nesc_atomic' (at pp.c:20693)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceConfigure__configure' (at pp.c:20694)
        ExprList:  (at pp.c:20694)
          ID: name='ArbiterP__1__resId' (at pp.c:20694)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__Resource__granted' (at pp.c:20695)
        ExprList:  (at pp.c:20695)
          ID: name='ArbiterP__1__resId' (at pp.c:20695)
  FuncDef:  (at pp.c:20699)
    Decl: name='Stm25pSectorP__ClientResource__default__granted', quals=[], storage=['inline', 'static'] (at pp.c:20699)
      FuncDecl: quals=None (at pp.c:20699)
        ParamList:  (at pp.c:20699)
          Decl: name='id', quals=[], storage=[] (at pp.c:20699)
            TypeDecl: declname='id', quals=[] (at pp.c:20699)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__ClientResource__default__granted', quals=[] (at pp.c:20699)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20701)
  FuncDef:  (at pp.c:20705)
    Decl: name='Stm25pSectorP__ClientResource__granted', quals=[], storage=['static', 'inline'] (at pp.c:20705)
      FuncDecl: quals=None (at pp.c:20705)
        ParamList:  (at pp.c:20705)
          Decl: name='arg_0x101a0a108', quals=[], storage=[] (at pp.c:20705)
            TypeDecl: declname='arg_0x101a0a108', quals=[] (at pp.c:20705)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__ClientResource__granted', quals=[] (at pp.c:20705)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20705)
      Switch:  (at pp.c:20707)
        ID: name='arg_0x101a0a108' (at pp.c:20707)
        Compound:  (at pp.c:20707)
          Case:  (at pp.c:20709)
            ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:20709)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__ClientResource__granted' (at pp.c:20711)
              ExprList:  (at pp.c:20711)
                ID: name='LogStorageC__0__LOG_ID' (at pp.c:20711)
          Break:  (at pp.c:20713)
          Default:  (at pp.c:20715)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__ClientResource__default__granted' (at pp.c:20717)
              ExprList:  (at pp.c:20717)
                ID: name='arg_0x101a0a108' (at pp.c:20717)
          Break:  (at pp.c:20719)
  FuncDef:  (at pp.c:20726)
    Decl: name='Stm25pSectorP__SplitControl__stopDone', quals=[], storage=['static', 'inline'] (at pp.c:20726)
      FuncDecl: quals=None (at pp.c:20726)
        ParamList:  (at pp.c:20726)
          Decl: name='error', quals=[], storage=[] (at pp.c:20726)
            TypeDecl: declname='error', quals=[] (at pp.c:20726)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__SplitControl__stopDone', quals=[] (at pp.c:20726)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20726)
      FuncCall:  (at None)
        ID: name='DeferredPowerManagerP__0__SplitControl__stopDone' (at pp.c:20728)
        ExprList:  (at pp.c:20728)
          ID: name='error' (at pp.c:20728)
  FuncDef:  (at pp.c:20733)
    Decl: name='Stm25pSpiP__SpiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:20733)
      FuncDecl: quals=None (at pp.c:20733)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__SpiResource__release', quals=[] (at pp.c:20733)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20733)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20735)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20735)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20739)
        ID: name='__nesc_result' (at pp.c:20739)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Resource__release' (at pp.c:20739)
          ExprList:  (at pp.c:20739)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:20739)
      Return:  (at pp.c:20743)
        ID: name='__nesc_result' (at pp.c:20743)
  FuncDef:  (at pp.c:20748)
    Decl: name='Stm25pSpiP__ClientResource__release', quals=[], storage=['inline', 'static'] (at pp.c:20748)
      FuncDecl: quals=None (at pp.c:20748)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__ClientResource__release', quals=[] (at pp.c:20748)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20750)
      Return:  (at pp.c:20751)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__SpiResource__release' (at pp.c:20751)
  FuncDef:  (at pp.c:20755)
    Decl: name='Stm25pSectorP__SpiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:20755)
      FuncDecl: quals=None (at pp.c:20755)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSectorP__SpiResource__release', quals=[] (at pp.c:20755)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20755)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20757)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20757)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20761)
        ID: name='__nesc_result' (at pp.c:20761)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__ClientResource__release' (at pp.c:20761)
      Return:  (at pp.c:20765)
        ID: name='__nesc_result' (at pp.c:20765)
  FuncDef:  (at pp.c:20770)
    Decl: name='Stm25pSpiP__Spi__powerDown', quals=[], storage=['inline', 'static'] (at pp.c:20770)
      FuncDecl: quals=None (at pp.c:20770)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__Spi__powerDown', quals=[] (at pp.c:20770)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20772)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__sendCmd' (at pp.c:20773)
        ExprList:  (at pp.c:20773)
          ID: name='Stm25pSpiP__S_DEEP_SLEEP' (at pp.c:20773)
          Constant: type='int', value='1' (at pp.c:20773)
      Return:  (at pp.c:20774)
        ID: name='SUCCESS' (at pp.c:20774)
  FuncDef:  (at pp.c:20778)
    Decl: name='Stm25pSectorP__Spi__powerDown', quals=[], storage=['static', 'inline'] (at pp.c:20778)
      FuncDecl: quals=None (at pp.c:20778)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSectorP__Spi__powerDown', quals=[] (at pp.c:20778)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20778)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20780)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20780)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20784)
        ID: name='__nesc_result' (at pp.c:20784)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__Spi__powerDown' (at pp.c:20784)
      Return:  (at pp.c:20788)
        ID: name='__nesc_result' (at pp.c:20788)
  FuncDef:  (at pp.c:20793)
    Decl: name='DeferredPowerManagerP__0__ResourceDefaultOwner__release', quals=[], storage=['static', 'inline'] (at pp.c:20793)
      FuncDecl: quals=None (at pp.c:20793)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__ResourceDefaultOwner__release', quals=[] (at pp.c:20793)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20793)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20795)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20795)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20799)
        ID: name='__nesc_result' (at pp.c:20799)
        FuncCall:  (at None)
          ID: name='ArbiterP__0__ResourceDefaultOwner__release' (at pp.c:20799)
      Return:  (at pp.c:20803)
        ID: name='__nesc_result' (at pp.c:20803)
  FuncDef:  (at pp.c:20808)
    Decl: name='DeferredPowerManagerP__0__SplitControl__startDone', quals=[], storage=['inline', 'static'] (at pp.c:20808)
      FuncDecl: quals=None (at pp.c:20808)
        ParamList:  (at pp.c:20808)
          Decl: name='error', quals=[], storage=[] (at pp.c:20808)
            TypeDecl: declname='error', quals=[] (at pp.c:20808)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__SplitControl__startDone', quals=[] (at pp.c:20808)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20810)
      FuncCall:  (at None)
        ID: name='DeferredPowerManagerP__0__ResourceDefaultOwner__release' (at pp.c:20811)
  FuncDef:  (at pp.c:20815)
    Decl: name='Stm25pSectorP__SplitControl__startDone', quals=[], storage=['static', 'inline'] (at pp.c:20815)
      FuncDecl: quals=None (at pp.c:20815)
        ParamList:  (at pp.c:20815)
          Decl: name='error', quals=[], storage=[] (at pp.c:20815)
            TypeDecl: declname='error', quals=[] (at pp.c:20815)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__SplitControl__startDone', quals=[] (at pp.c:20815)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20815)
      FuncCall:  (at None)
        ID: name='DeferredPowerManagerP__0__SplitControl__startDone' (at pp.c:20817)
        ExprList:  (at pp.c:20817)
          ID: name='error' (at pp.c:20817)
  FuncDef:  (at pp.c:20822)
    Decl: name='Stm25pSpiP__Spi__powerUp', quals=[], storage=['inline', 'static'] (at pp.c:20822)
      FuncDecl: quals=None (at pp.c:20822)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__Spi__powerUp', quals=[] (at pp.c:20822)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20824)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__sendCmd' (at pp.c:20825)
        ExprList:  (at pp.c:20825)
          ID: name='Stm25pSpiP__S_POWER_ON' (at pp.c:20825)
          Constant: type='int', value='5' (at pp.c:20825)
      Return:  (at pp.c:20826)
        ID: name='SUCCESS' (at pp.c:20826)
  FuncDef:  (at pp.c:20830)
    Decl: name='Stm25pSectorP__Spi__powerUp', quals=[], storage=['static', 'inline'] (at pp.c:20830)
      FuncDecl: quals=None (at pp.c:20830)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSectorP__Spi__powerUp', quals=[] (at pp.c:20830)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20830)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20832)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20832)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20836)
        ID: name='__nesc_result' (at pp.c:20836)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__Spi__powerUp' (at pp.c:20836)
      Return:  (at pp.c:20840)
        ID: name='__nesc_result' (at pp.c:20840)
  FuncDef:  (at pp.c:20845)
    Decl: name='Stm25pSectorP__SpiResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:20845)
      FuncDecl: quals=None (at pp.c:20845)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSectorP__SpiResource__granted', quals=[] (at pp.c:20845)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20847)
      Decl: name='error', quals=[], storage=[] (at pp.c:20848)
        TypeDecl: declname='error', quals=[] (at pp.c:20848)
          IdentifierType: names=['error_t'] (at None)
      Decl: name='power_state', quals=[], storage=[] (at pp.c:20849)
        TypeDecl: declname='power_state', quals=[] (at pp.c:20849)
          IdentifierType: names=['Stm25pSectorP__stm25p_power_state_t'] (at None)
        ID: name='Stm25pSectorP__m_power_state' (at pp.c:20849)
      Assignment: op='=' (at pp.c:20852)
        ID: name='Stm25pSectorP__m_power_state' (at pp.c:20852)
        ID: name='Stm25pSectorP__S_NONE' (at pp.c:20852)
      If:  (at pp.c:20853)
        BinaryOp: op='==' (at pp.c:20853)
          ID: name='power_state' (at pp.c:20853)
          ID: name='Stm25pSectorP__S_START' (at pp.c:20853)
        Compound:  (at pp.c:20853)
          Assignment: op='=' (at pp.c:20854)
            ID: name='error' (at pp.c:20854)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__Spi__powerUp' (at pp.c:20854)
          FuncCall:  (at None)
            ID: name='Stm25pSectorP__SpiResource__release' (at pp.c:20855)
          FuncCall:  (at None)
            ID: name='Stm25pSectorP__SplitControl__startDone' (at pp.c:20856)
            ExprList:  (at pp.c:20856)
              ID: name='error' (at pp.c:20856)
          Return:  (at pp.c:20857)
        Compound:  (at pp.c:20859)
          If:  (at pp.c:20861)
            BinaryOp: op='==' (at pp.c:20861)
              ID: name='power_state' (at pp.c:20861)
              ID: name='Stm25pSectorP__S_STOP' (at pp.c:20861)
            Compound:  (at pp.c:20861)
              Assignment: op='=' (at pp.c:20862)
                ID: name='error' (at pp.c:20862)
                FuncCall:  (at None)
                  ID: name='Stm25pSectorP__Spi__powerDown' (at pp.c:20862)
              FuncCall:  (at None)
                ID: name='Stm25pSectorP__SpiResource__release' (at pp.c:20863)
              FuncCall:  (at None)
                ID: name='Stm25pSectorP__SplitControl__stopDone' (at pp.c:20864)
                ExprList:  (at pp.c:20864)
                  ID: name='error' (at pp.c:20864)
              Return:  (at pp.c:20865)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__ClientResource__granted' (at pp.c:20869)
        ExprList:  (at pp.c:20869)
          ID: name='Stm25pSectorP__m_client' (at pp.c:20869)
  FuncDef:  (at pp.c:20873)
    Decl: name='Stm25pSpiP__ClientResource__granted', quals=[], storage=['static', 'inline'] (at pp.c:20873)
      FuncDecl: quals=None (at pp.c:20873)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__ClientResource__granted', quals=[] (at pp.c:20873)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20873)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__SpiResource__granted' (at pp.c:20875)
  FuncDef:  (at pp.c:20880)
    Decl: name='Msp430GpioC__3__HplGeneralIO__clr', quals=[], storage=['static', 'inline'] (at pp.c:20880)
      FuncDecl: quals=None (at pp.c:20880)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__3__HplGeneralIO__clr', quals=[] (at pp.c:20880)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20880)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__28__IO__clr' (at pp.c:20882)
  FuncDef:  (at pp.c:20887)
    Decl: name='Msp430GpioC__3__GeneralIO__clr', quals=[], storage=['inline', 'static'] (at pp.c:20887)
      FuncDecl: quals=None (at pp.c:20887)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__3__GeneralIO__clr', quals=[] (at pp.c:20887)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20889)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__3__HplGeneralIO__clr' (at pp.c:20891)
  FuncDef:  (at pp.c:20895)
    Decl: name='Stm25pSpiP__CSN__clr', quals=[], storage=['static', 'inline'] (at pp.c:20895)
      FuncDecl: quals=None (at pp.c:20895)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__CSN__clr', quals=[] (at pp.c:20895)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:20895)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__3__GeneralIO__clr' (at pp.c:20897)
  FuncDef:  (at pp.c:20902)
    Decl: name='Stm25pSpiP__SpiByte__write', quals=[], storage=['static', 'inline'] (at pp.c:20902)
      FuncDecl: quals=None (at pp.c:20902)
        ParamList:  (at pp.c:20902)
          Decl: name='tx', quals=[], storage=[] (at pp.c:20902)
            TypeDecl: declname='tx', quals=[] (at pp.c:20902)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__SpiByte__write', quals=[] (at pp.c:20902)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:20902)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20904)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20904)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20908)
        ID: name='__nesc_result' (at pp.c:20908)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__SpiByte__write' (at pp.c:20908)
          ExprList:  (at pp.c:20908)
            ID: name='tx' (at pp.c:20908)
      Return:  (at pp.c:20912)
        ID: name='__nesc_result' (at pp.c:20912)
  FuncDef:  (at pp.c:20917)
    Decl: name='Stm25pSpiP__Spi__read', quals=[], storage=['inline', 'static'] (at pp.c:20917)
      FuncDecl: quals=None (at pp.c:20917)
        ParamList:  (at pp.c:20917)
          Decl: name='addr', quals=[], storage=[] (at pp.c:20917)
            TypeDecl: declname='addr', quals=[] (at pp.c:20917)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:20917)
            PtrDecl: quals=[] (at pp.c:20917)
              TypeDecl: declname='buf', quals=[] (at pp.c:20917)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20918)
            TypeDecl: declname='len', quals=[] (at pp.c:20918)
              IdentifierType: names=['stm25p_len_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__Spi__read', quals=[] (at pp.c:20917)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20920)
      Assignment: op='=' (at pp.c:20921)
        ArrayRef:  (at pp.c:20921)
          ID: name='Stm25pSpiP__m_cmd' (at pp.c:20921)
          Constant: type='int', value='0' (at pp.c:20921)
        ID: name='Stm25pSpiP__S_READ' (at pp.c:20921)
      Assignment: op='=' (at pp.c:20922)
        ID: name='Stm25pSpiP__m_addr' (at pp.c:20922)
        ID: name='addr' (at pp.c:20922)
      Assignment: op='=' (at pp.c:20923)
        ID: name='Stm25pSpiP__m_buf' (at pp.c:20923)
        ID: name='buf' (at pp.c:20923)
      Assignment: op='=' (at pp.c:20924)
        ID: name='Stm25pSpiP__m_len' (at pp.c:20924)
        ID: name='len' (at pp.c:20924)
      Return:  (at pp.c:20925)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__newRequest' (at pp.c:20925)
          ExprList:  (at pp.c:20925)
            ID: name='FALSE' (at pp.c:20925)
            Constant: type='int', value='4' (at pp.c:20925)
  FuncDef:  (at pp.c:20929)
    Decl: name='Stm25pSectorP__Spi__read', quals=[], storage=['static', 'inline'] (at pp.c:20929)
      FuncDecl: quals=None (at pp.c:20929)
        ParamList:  (at pp.c:20929)
          Decl: name='addr', quals=[], storage=[] (at pp.c:20929)
            TypeDecl: declname='addr', quals=[] (at pp.c:20929)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:20929)
            PtrDecl: quals=[] (at pp.c:20929)
              TypeDecl: declname='buf', quals=[] (at pp.c:20929)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20929)
            TypeDecl: declname='len', quals=[] (at pp.c:20929)
              IdentifierType: names=['stm25p_len_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Spi__read', quals=[] (at pp.c:20929)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20929)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20931)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20931)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20935)
        ID: name='__nesc_result' (at pp.c:20935)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__Spi__read' (at pp.c:20935)
          ExprList:  (at pp.c:20935)
            ID: name='addr' (at pp.c:20935)
            ID: name='buf' (at pp.c:20935)
            ID: name='len' (at pp.c:20935)
      Return:  (at pp.c:20939)
        ID: name='__nesc_result' (at pp.c:20939)
  FuncDef:  (at pp.c:20944)
    Decl: name='Stm25pSpiP__SpiPacket__send', quals=[], storage=['static', 'inline'] (at pp.c:20944)
      FuncDecl: quals=None (at pp.c:20944)
        ParamList:  (at pp.c:20944)
          Decl: name='txBuf', quals=[], storage=[] (at pp.c:20944)
            PtrDecl: quals=[] (at pp.c:20944)
              TypeDecl: declname='txBuf', quals=[] (at pp.c:20944)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rxBuf', quals=[], storage=[] (at pp.c:20944)
            PtrDecl: quals=[] (at pp.c:20944)
              TypeDecl: declname='rxBuf', quals=[] (at pp.c:20944)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:20944)
            TypeDecl: declname='len', quals=[] (at pp.c:20944)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__SpiPacket__send', quals=[] (at pp.c:20944)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:20944)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20946)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20946)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:20950)
        ID: name='__nesc_result' (at pp.c:20950)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__SpiPacket__send' (at pp.c:20950)
          ExprList:  (at pp.c:20950)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:20950)
            ID: name='txBuf' (at pp.c:20950)
            ID: name='rxBuf' (at pp.c:20950)
            ID: name='len' (at pp.c:20950)
      Return:  (at pp.c:20954)
        ID: name='__nesc_result' (at pp.c:20954)
  FuncDef:  (at pp.c:20959)
    Decl: name='Stm25pBinderP__0__Volume__getVolumeId', quals=[], storage=['inline', 'static'] (at pp.c:20959)
      FuncDecl: quals=None (at pp.c:20959)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pBinderP__0__Volume__getVolumeId', quals=[] (at pp.c:20959)
          IdentifierType: names=['volume_id_t'] (at None)
    Compound:  (at pp.c:20961)
      Return:  (at pp.c:20962)
        Constant: type='int', value='0' (at pp.c:20962)
  FuncDef:  (at pp.c:20966)
    Decl: name='Stm25pSectorP__Volume__default__getVolumeId', quals=[], storage=['inline', 'static'] (at pp.c:20966)
      FuncDecl: quals=None (at pp.c:20966)
        ParamList:  (at pp.c:20966)
          Decl: name='id', quals=[], storage=[] (at pp.c:20966)
            TypeDecl: declname='id', quals=[] (at pp.c:20966)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Volume__default__getVolumeId', quals=[] (at pp.c:20966)
          IdentifierType: names=['volume_id_t'] (at None)
    Compound:  (at pp.c:20968)
      Return:  (at pp.c:20970)
        Constant: type='int', value='0xff' (at pp.c:20970)
  FuncDef:  (at pp.c:20974)
    Decl: name='Stm25pSectorP__Volume__getVolumeId', quals=[], storage=['static', 'inline'] (at pp.c:20974)
      FuncDecl: quals=None (at pp.c:20974)
        ParamList:  (at pp.c:20974)
          Decl: name='arg_0x101a04d10', quals=[], storage=[] (at pp.c:20974)
            TypeDecl: declname='arg_0x101a04d10', quals=[] (at pp.c:20974)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Volume__getVolumeId', quals=[] (at pp.c:20974)
          IdentifierType: names=['volume_id_t'] (at None)
    Compound:  (at pp.c:20974)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:20976)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:20976)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:20980)
        ID: name='arg_0x101a04d10' (at pp.c:20980)
        Compound:  (at pp.c:20980)
          Case:  (at pp.c:20982)
            ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:20982)
            Assignment: op='=' (at pp.c:20984)
              ID: name='__nesc_result' (at pp.c:20984)
              FuncCall:  (at None)
                ID: name='Stm25pBinderP__0__Volume__getVolumeId' (at pp.c:20984)
          Break:  (at pp.c:20986)
          Default:  (at pp.c:20988)
            Assignment: op='=' (at pp.c:20990)
              ID: name='__nesc_result' (at pp.c:20990)
              FuncCall:  (at None)
                ID: name='Stm25pSectorP__Volume__default__getVolumeId' (at pp.c:20990)
                ExprList:  (at pp.c:20990)
                  ID: name='arg_0x101a04d10' (at pp.c:20990)
          Break:  (at pp.c:20992)
      Return:  (at pp.c:20998)
        ID: name='__nesc_result' (at pp.c:20998)
  FuncDef:  (at pp.c:21003)
    Decl: name='Stm25pSectorP__getVolumeId', quals=[], storage=['inline', 'static'] (at pp.c:21003)
      FuncDecl: quals=None (at pp.c:21003)
        ParamList:  (at pp.c:21003)
          Decl: name='client', quals=[], storage=[] (at pp.c:21003)
            TypeDecl: declname='client', quals=[] (at pp.c:21003)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__getVolumeId', quals=[] (at pp.c:21003)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:21005)
      Return:  (at pp.c:21006)
        FuncCall:  (at None)
          ID: name='Stm25pSectorP__Volume__getVolumeId' (at pp.c:21006)
          ExprList:  (at pp.c:21006)
            ID: name='client' (at pp.c:21006)
  FuncDef:  (at pp.c:21010)
    Decl: name='Stm25pSectorP__physicalAddr', quals=[], storage=['inline', 'static'] (at pp.c:21010)
      FuncDecl: quals=None (at pp.c:21010)
        ParamList:  (at pp.c:21010)
          Decl: name='id', quals=[], storage=[] (at pp.c:21010)
            TypeDecl: declname='id', quals=[] (at pp.c:21010)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:21010)
            TypeDecl: declname='addr', quals=[] (at pp.c:21010)
              IdentifierType: names=['stm25p_addr_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__physicalAddr', quals=[] (at pp.c:21010)
          IdentifierType: names=['stm25p_addr_t'] (at None)
    Compound:  (at pp.c:21012)
      Return:  (at pp.c:21013)
        BinaryOp: op='+' (at pp.c:21013)
          ID: name='addr' (at pp.c:21013)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['stm25p_addr_t'] (at None)
              StructRef: type='.' (at pp.c:21013)
                ArrayRef:  (at pp.c:21013)
                  ID: name='STM25P_VMAP' (at pp.c:21013)
                  FuncCall:  (at None)
                    ID: name='Stm25pSectorP__getVolumeId' (at pp.c:21013)
                    ExprList:  (at pp.c:21013)
                      ID: name='id' (at pp.c:21013)
                ID: name='base' (at pp.c:21013)
            ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:21014)
  FuncDef:  (at pp.c:21018)
    Decl: name='DeferredPowerManagerP__0__timerTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:21018)
      FuncDecl: quals=None (at pp.c:21018)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__timerTask__postTask', quals=[] (at pp.c:21018)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21018)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21020)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21020)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21024)
        ID: name='__nesc_result' (at pp.c:21024)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:21024)
          ExprList:  (at pp.c:21024)
            ID: name='DeferredPowerManagerP__0__timerTask' (at pp.c:21024)
      Return:  (at pp.c:21028)
        ID: name='__nesc_result' (at pp.c:21028)
  FuncDef:  (at pp.c:21033)
    Decl: name='DeferredPowerManagerP__0__ResourceDefaultOwner__granted', quals=[], storage=['inline', 'static'] (at pp.c:21033)
      FuncDecl: quals=None (at pp.c:21033)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__ResourceDefaultOwner__granted', quals=[] (at pp.c:21033)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21035)
      FuncCall:  (at None)
        ID: name='DeferredPowerManagerP__0__timerTask__postTask' (at pp.c:21036)
  FuncDef:  (at pp.c:21040)
    Decl: name='ArbiterP__0__ResourceDefaultOwner__granted', quals=[], storage=['static', 'inline'] (at pp.c:21040)
      FuncDecl: quals=None (at pp.c:21040)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__granted', quals=[] (at pp.c:21040)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21040)
      FuncCall:  (at None)
        ID: name='DeferredPowerManagerP__0__ResourceDefaultOwner__granted' (at pp.c:21042)
  FuncDef:  (at pp.c:21047)
    Decl: name='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[], storage=['inline', 'static'] (at pp.c:21047)
      FuncDecl: quals=None (at pp.c:21047)
        ParamList:  (at pp.c:21047)
          Decl: name='id', quals=[], storage=[] (at pp.c:21047)
            TypeDecl: declname='id', quals=[] (at pp.c:21047)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__unconfigure', quals=[] (at pp.c:21047)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21049)
  FuncDef:  (at pp.c:21053)
    Decl: name='ArbiterP__0__ResourceConfigure__unconfigure', quals=[], storage=['static', 'inline'] (at pp.c:21053)
      FuncDecl: quals=None (at pp.c:21053)
        ParamList:  (at pp.c:21053)
          Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:21053)
            TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:21053)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceConfigure__unconfigure', quals=[] (at pp.c:21053)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21053)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__ResourceConfigure__default__unconfigure' (at pp.c:21055)
        ExprList:  (at pp.c:21055)
          ID: name='arg_0x101ac0340' (at pp.c:21055)
  FuncDef:  (at pp.c:21060)
    Decl: name='ArbiterP__0__grantedTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:21060)
      FuncDecl: quals=None (at pp.c:21060)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__grantedTask__postTask', quals=[] (at pp.c:21060)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21060)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21062)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21062)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21066)
        ID: name='__nesc_result' (at pp.c:21066)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:21066)
          ExprList:  (at pp.c:21066)
            ID: name='ArbiterP__0__grantedTask' (at pp.c:21066)
      Return:  (at pp.c:21070)
        ID: name='__nesc_result' (at pp.c:21070)
  FuncDef:  (at pp.c:21075)
    Decl: name='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[], storage=['inline', 'static'] (at pp.c:21075)
      FuncDecl: quals=None (at pp.c:21075)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__dequeue', quals=[] (at pp.c:21075)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:21077)
      Compound:  (at pp.c:21080)
        If:  (at pp.c:21081)
          BinaryOp: op='!=' (at pp.c:21081)
            ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:21081)
            ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:21081)
          Compound:  (at pp.c:21081)
            Decl: name='id', quals=[], storage=[] (at pp.c:21082)
              TypeDecl: declname='id', quals=[] (at pp.c:21082)
                IdentifierType: names=['uint8_t'] (at None)
              ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:21082)
            Assignment: op='=' (at pp.c:21085)
              ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:21085)
              ArrayRef:  (at pp.c:21085)
                ID: name='FcfsResourceQueueC__1__resQ' (at pp.c:21085)
                ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:21085)
            If:  (at pp.c:21086)
              BinaryOp: op='==' (at pp.c:21086)
                ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:21086)
                ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:21086)
              Compound:  (at pp.c:21086)
                Assignment: op='=' (at pp.c:21087)
                  ID: name='FcfsResourceQueueC__1__qTail' (at pp.c:21087)
                  ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:21087)
            Assignment: op='=' (at pp.c:21090)
              ArrayRef:  (at pp.c:21090)
                ID: name='FcfsResourceQueueC__1__resQ' (at pp.c:21090)
                ID: name='id' (at pp.c:21090)
              ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:21090)
            Compound:  (at pp.c:21091)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:21092)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:21092)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='id' (at pp.c:21094)
              Return:  (at pp.c:21097)
                ID: name='__nesc_temp' (at pp.c:21097)
        Compound:  (at pp.c:21101)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:21102)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:21102)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:21104)
          Return:  (at pp.c:21107)
            ID: name='__nesc_temp' (at pp.c:21107)
  FuncDef:  (at pp.c:21113)
    Decl: name='ArbiterP__0__Queue__dequeue', quals=[], storage=['static', 'inline'] (at pp.c:21113)
      FuncDecl: quals=None (at pp.c:21113)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__Queue__dequeue', quals=[] (at pp.c:21113)
          IdentifierType: names=['resource_client_id_t'] (at None)
    Compound:  (at pp.c:21113)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21115)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21115)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21119)
        ID: name='__nesc_result' (at pp.c:21119)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__1__FcfsQueue__dequeue' (at pp.c:21119)
      Return:  (at pp.c:21123)
        ID: name='__nesc_result' (at pp.c:21123)
  FuncDef:  (at pp.c:21128)
    Decl: name='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[], storage=['inline', 'static'] (at pp.c:21128)
      FuncDecl: quals=None (at pp.c:21128)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__1__FcfsQueue__isEmpty', quals=[] (at pp.c:21128)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:21130)
      Compound:  (at pp.c:21133)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:21134)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:21134)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='==' (at pp.c:21136)
            ID: name='FcfsResourceQueueC__1__qHead' (at pp.c:21136)
            ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:21136)
        Return:  (at pp.c:21139)
          ID: name='__nesc_temp' (at pp.c:21139)
  FuncDef:  (at pp.c:21144)
    Decl: name='ArbiterP__0__Queue__isEmpty', quals=[], storage=['static', 'inline'] (at pp.c:21144)
      FuncDecl: quals=None (at pp.c:21144)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__Queue__isEmpty', quals=[] (at pp.c:21144)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:21144)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21146)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21146)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21150)
        ID: name='__nesc_result' (at pp.c:21150)
        FuncCall:  (at None)
          ID: name='FcfsResourceQueueC__1__FcfsQueue__isEmpty' (at pp.c:21150)
      Return:  (at pp.c:21154)
        ID: name='__nesc_result' (at pp.c:21154)
  FuncDef:  (at pp.c:21159)
    Decl: name='ArbiterP__0__Resource__release', quals=[], storage=['inline', 'static'] (at pp.c:21159)
      FuncDecl: quals=None (at pp.c:21159)
        ParamList:  (at pp.c:21159)
          Decl: name='id', quals=[], storage=[] (at pp.c:21159)
            TypeDecl: declname='id', quals=[] (at pp.c:21159)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__Resource__release', quals=[] (at pp.c:21159)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21161)
      Compound:  (at pp.c:21162)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21162)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21162)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21162)
        Compound:  (at pp.c:21164)
          If:  (at pp.c:21165)
            BinaryOp: op='&&' (at pp.c:21165)
              BinaryOp: op='==' (at pp.c:21165)
                ID: name='ArbiterP__0__state' (at pp.c:21165)
                ID: name='ArbiterP__0__RES_BUSY' (at pp.c:21165)
              BinaryOp: op='==' (at pp.c:21165)
                ID: name='ArbiterP__0__resId' (at pp.c:21165)
                ID: name='id' (at pp.c:21165)
            Compound:  (at pp.c:21165)
              If:  (at pp.c:21166)
                BinaryOp: op='==' (at None)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__Queue__isEmpty' (at pp.c:21166)
                  ID: name='FALSE' (at pp.c:21166)
                Compound:  (at pp.c:21166)
                  Assignment: op='=' (at pp.c:21167)
                    ID: name='ArbiterP__0__reqResId' (at pp.c:21167)
                    FuncCall:  (at None)
                      ID: name='ArbiterP__0__Queue__dequeue' (at pp.c:21167)
                  Assignment: op='=' (at pp.c:21168)
                    ID: name='ArbiterP__0__resId' (at pp.c:21168)
                    ID: name='ArbiterP__0__NO_RES' (at pp.c:21168)
                  Assignment: op='=' (at pp.c:21169)
                    ID: name='ArbiterP__0__state' (at pp.c:21169)
                    ID: name='ArbiterP__0__RES_GRANTING' (at pp.c:21169)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__grantedTask__postTask' (at pp.c:21170)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__ResourceConfigure__unconfigure' (at pp.c:21171)
                    ExprList:  (at pp.c:21171)
                      ID: name='id' (at pp.c:21171)
                Compound:  (at pp.c:21173)
                  Assignment: op='=' (at pp.c:21174)
                    ID: name='ArbiterP__0__resId' (at pp.c:21174)
                    ID: name='ArbiterP__0__default_owner_id' (at pp.c:21174)
                  Assignment: op='=' (at pp.c:21175)
                    ID: name='ArbiterP__0__state' (at pp.c:21175)
                    ID: name='ArbiterP__0__RES_CONTROLLED' (at pp.c:21175)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__ResourceConfigure__unconfigure' (at pp.c:21176)
                    ExprList:  (at pp.c:21176)
                      ID: name='id' (at pp.c:21176)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__ResourceDefaultOwner__granted' (at pp.c:21177)
              Compound:  (at pp.c:21179)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:21180)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:21180)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='SUCCESS' (at pp.c:21182)
                Compound:  (at pp.c:21184)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:21186)
                    ExprList:  (at pp.c:21186)
                      ID: name='__nesc_atomic' (at pp.c:21186)
                  Return:  (at pp.c:21188)
                    ID: name='__nesc_temp' (at pp.c:21188)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21194)
          ExprList:  (at pp.c:21194)
            ID: name='__nesc_atomic' (at pp.c:21194)
      Return:  (at pp.c:21196)
        ID: name='FAIL' (at pp.c:21196)
  FuncDef:  (at pp.c:21200)
    Decl: name='Stm25pSectorP__Stm25pResource__release', quals=[], storage=['static', 'inline'] (at pp.c:21200)
      FuncDecl: quals=None (at pp.c:21200)
        ParamList:  (at pp.c:21200)
          Decl: name='arg_0x101a03a68', quals=[], storage=[] (at pp.c:21200)
            TypeDecl: declname='arg_0x101a03a68', quals=[] (at pp.c:21200)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Stm25pResource__release', quals=[] (at pp.c:21200)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21200)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21202)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21202)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21206)
        ID: name='__nesc_result' (at pp.c:21206)
        FuncCall:  (at None)
          ID: name='ArbiterP__0__Resource__release' (at pp.c:21206)
          ExprList:  (at pp.c:21206)
            ID: name='arg_0x101a03a68' (at pp.c:21206)
      Return:  (at pp.c:21210)
        ID: name='__nesc_result' (at pp.c:21210)
  FuncDef:  (at pp.c:21215)
    Decl: name='Stm25pSectorP__ClientResource__release', quals=[], storage=['inline', 'static'] (at pp.c:21215)
      FuncDecl: quals=None (at pp.c:21215)
        ParamList:  (at pp.c:21215)
          Decl: name='id', quals=[], storage=[] (at pp.c:21215)
            TypeDecl: declname='id', quals=[] (at pp.c:21215)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__ClientResource__release', quals=[] (at pp.c:21215)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21217)
      If:  (at pp.c:21218)
        BinaryOp: op='==' (at pp.c:21218)
          ID: name='Stm25pSectorP__m_client' (at pp.c:21218)
          ID: name='id' (at pp.c:21218)
        Compound:  (at pp.c:21218)
          Assignment: op='=' (at pp.c:21219)
            ID: name='Stm25pSectorP__m_state' (at pp.c:21219)
            ID: name='Stm25pSectorP__S_IDLE' (at pp.c:21219)
          Assignment: op='=' (at pp.c:21220)
            ID: name='Stm25pSectorP__m_client' (at pp.c:21220)
            ID: name='Stm25pSectorP__NO_CLIENT' (at pp.c:21220)
          FuncCall:  (at None)
            ID: name='Stm25pSectorP__SpiResource__release' (at pp.c:21221)
          FuncCall:  (at None)
            ID: name='Stm25pSectorP__Stm25pResource__release' (at pp.c:21222)
            ExprList:  (at pp.c:21222)
              ID: name='id' (at pp.c:21222)
          Return:  (at pp.c:21223)
            ID: name='SUCCESS' (at pp.c:21223)
      Return:  (at pp.c:21225)
        ID: name='FAIL' (at pp.c:21225)
  FuncDef:  (at pp.c:21229)
    Decl: name='Stm25pLogP__ClientResource__default__release', quals=[], storage=['inline', 'static'] (at pp.c:21229)
      FuncDecl: quals=None (at pp.c:21229)
        ParamList:  (at pp.c:21229)
          Decl: name='id', quals=[], storage=[] (at pp.c:21229)
            TypeDecl: declname='id', quals=[] (at pp.c:21229)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__ClientResource__default__release', quals=[] (at pp.c:21229)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21231)
      Return:  (at pp.c:21233)
        ID: name='FAIL' (at pp.c:21233)
  FuncDef:  (at pp.c:21237)
    Decl: name='Stm25pLogP__ClientResource__release', quals=[], storage=['static', 'inline'] (at pp.c:21237)
      FuncDecl: quals=None (at pp.c:21237)
        ParamList:  (at pp.c:21237)
          Decl: name='arg_0x10194c220', quals=[], storage=[] (at pp.c:21237)
            TypeDecl: declname='arg_0x10194c220', quals=[] (at pp.c:21237)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__ClientResource__release', quals=[] (at pp.c:21237)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21237)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21239)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21239)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:21243)
        ID: name='arg_0x10194c220' (at pp.c:21243)
        Compound:  (at pp.c:21243)
          Case:  (at pp.c:21245)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:21245)
            Assignment: op='=' (at pp.c:21247)
              ID: name='__nesc_result' (at pp.c:21247)
              FuncCall:  (at None)
                ID: name='Stm25pSectorP__ClientResource__release' (at pp.c:21247)
                ExprList:  (at pp.c:21247)
                  ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:21247)
          Break:  (at pp.c:21249)
          Default:  (at pp.c:21251)
            Assignment: op='=' (at pp.c:21253)
              ID: name='__nesc_result' (at pp.c:21253)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__ClientResource__default__release' (at pp.c:21253)
                ExprList:  (at pp.c:21253)
                  ID: name='arg_0x10194c220' (at pp.c:21253)
          Break:  (at pp.c:21255)
      Return:  (at pp.c:21261)
        ID: name='__nesc_result' (at pp.c:21261)
  FuncDef:  (at pp.c:21266)
    Decl: name='SampleLogReaderP__0__SampleLogRead__readDone', quals=[], storage=['static', 'inline'] (at pp.c:21266)
      FuncDecl: quals=None (at pp.c:21266)
        ParamList:  (at pp.c:21266)
          Decl: name='entry', quals=[], storage=[] (at pp.c:21266)
            PtrDecl: quals=[] (at pp.c:21266)
              TypeDecl: declname='entry', quals=[] (at pp.c:21266)
                IdentifierType: names=['SampleLogReaderP__0__SampleLogRead__sample_type_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21266)
            TypeDecl: declname='error', quals=[] (at pp.c:21266)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SampleLogReaderP__0__SampleLogRead__readDone', quals=[] (at pp.c:21266)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21266)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__SampleLogRead__readDone' (at pp.c:21268)
        ExprList:  (at pp.c:21268)
          ID: name='entry' (at pp.c:21268)
          ID: name='error' (at pp.c:21268)
  FuncDef:  (at pp.c:21273)
    Decl: name='SampleLogReaderP__0__LogRead__readDone', quals=[], storage=['inline', 'static'] (at pp.c:21273)
      FuncDecl: quals=None (at pp.c:21273)
        ParamList:  (at pp.c:21273)
          Decl: name='buf', quals=[], storage=[] (at pp.c:21273)
            PtrDecl: quals=[] (at pp.c:21273)
              TypeDecl: declname='buf', quals=[] (at pp.c:21273)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21273)
            TypeDecl: declname='len', quals=[] (at pp.c:21273)
              IdentifierType: names=['storage_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21273)
            TypeDecl: declname='error', quals=[] (at pp.c:21273)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SampleLogReaderP__0__LogRead__readDone', quals=[] (at pp.c:21273)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21275)
      FuncCall:  (at None)
        ID: name='SampleLogReaderP__0__SampleLogRead__readDone' (at pp.c:21276)
        ExprList:  (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:21276)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['SampleLogReaderP__0__sample_type_t'] (at None)
            ID: name='buf' (at pp.c:21276)
          ID: name='error' (at pp.c:21276)
  FuncDef:  (at pp.c:21280)
    Decl: name='Stm25pLogP__Read__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:21280)
      FuncDecl: quals=None (at pp.c:21280)
        ParamList:  (at pp.c:21280)
          Decl: name='id', quals=[], storage=[] (at pp.c:21280)
            TypeDecl: declname='id', quals=[] (at pp.c:21280)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:21280)
            PtrDecl: quals=[] (at pp.c:21280)
              TypeDecl: declname='data', quals=[] (at pp.c:21280)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21280)
            TypeDecl: declname='len', quals=[] (at pp.c:21280)
              IdentifierType: names=['storage_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21280)
            TypeDecl: declname='error', quals=[] (at pp.c:21280)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Read__default__readDone', quals=[] (at pp.c:21280)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21282)
  FuncDef:  (at pp.c:21286)
    Decl: name='Stm25pLogP__Read__readDone', quals=[], storage=['static', 'inline'] (at pp.c:21286)
      FuncDecl: quals=None (at pp.c:21286)
        ParamList:  (at pp.c:21286)
          Decl: name='arg_0x101931728', quals=[], storage=[] (at pp.c:21286)
            TypeDecl: declname='arg_0x101931728', quals=[] (at pp.c:21286)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:21286)
            PtrDecl: quals=[] (at pp.c:21286)
              TypeDecl: declname='buf', quals=[] (at pp.c:21286)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21286)
            TypeDecl: declname='len', quals=[] (at pp.c:21286)
              IdentifierType: names=['storage_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21286)
            TypeDecl: declname='error', quals=[] (at pp.c:21286)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Read__readDone', quals=[] (at pp.c:21286)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21286)
      Switch:  (at pp.c:21288)
        ID: name='arg_0x101931728' (at pp.c:21288)
        Compound:  (at pp.c:21288)
          Case:  (at pp.c:21290)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:21290)
            FuncCall:  (at None)
              ID: name='SampleLogReaderP__0__LogRead__readDone' (at pp.c:21292)
              ExprList:  (at pp.c:21292)
                ID: name='buf' (at pp.c:21292)
                ID: name='len' (at pp.c:21292)
                ID: name='error' (at pp.c:21292)
          Break:  (at pp.c:21294)
          Default:  (at pp.c:21296)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Read__default__readDone' (at pp.c:21298)
              ExprList:  (at pp.c:21298)
                ID: name='arg_0x101931728' (at pp.c:21298)
                ID: name='buf' (at pp.c:21298)
                ID: name='len' (at pp.c:21298)
                ID: name='error' (at pp.c:21298)
          Break:  (at pp.c:21300)
  FuncDef:  (at pp.c:21307)
    Decl: name='CC2420TinyosNetworkP__ActiveSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:21307)
      FuncDecl: quals=None (at pp.c:21307)
        ParamList:  (at pp.c:21307)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21307)
            PtrDecl: quals=[] (at pp.c:21307)
              TypeDecl: declname='msg', quals=[] (at pp.c:21307)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21307)
            TypeDecl: declname='len', quals=[] (at pp.c:21307)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21307)
          TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__getPayload', quals=[] (at pp.c:21307)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21309)
      If:  (at pp.c:21310)
        BinaryOp: op='<=' (at pp.c:21310)
          ID: name='len' (at pp.c:21310)
          FuncCall:  (at None)
            ID: name='CC2420TinyosNetworkP__ActiveSend__maxPayloadLength' (at pp.c:21310)
        Compound:  (at pp.c:21310)
          Return:  (at pp.c:21311)
            StructRef: type='->' (at pp.c:21311)
              ID: name='msg' (at pp.c:21311)
              ID: name='data' (at pp.c:21311)
        Compound:  (at pp.c:21315)
          Return:  (at pp.c:21316)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:21316)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['void'] (at None)
              Constant: type='int', value='0' (at pp.c:21316)
  FuncDef:  (at pp.c:21321)
    Decl: name='CC2420ActiveMessageP__SubSend__getPayload', quals=[], storage=['static', 'inline'] (at pp.c:21321)
      FuncDecl: quals=None (at pp.c:21321)
        ParamList:  (at pp.c:21321)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21321)
            PtrDecl: quals=[] (at pp.c:21321)
              TypeDecl: declname='msg', quals=[] (at pp.c:21321)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21321)
            TypeDecl: declname='len', quals=[] (at pp.c:21321)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21321)
          TypeDecl: declname='CC2420ActiveMessageP__SubSend__getPayload', quals=[] (at pp.c:21321)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21321)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21323)
        PtrDecl: quals=[] (at pp.c:21323)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21323)
            IdentifierType: names=['void'] (at None)
      Assignment: op='=' (at pp.c:21327)
        ID: name='__nesc_result' (at pp.c:21327)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__ActiveSend__getPayload' (at pp.c:21327)
          ExprList:  (at pp.c:21327)
            ID: name='msg' (at pp.c:21327)
            ID: name='len' (at pp.c:21327)
      Return:  (at pp.c:21331)
        ID: name='__nesc_result' (at pp.c:21331)
  FuncDef:  (at pp.c:21336)
    Decl: name='CC2420ActiveMessageP__Packet__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:21336)
      FuncDecl: quals=None (at pp.c:21336)
        ParamList:  (at pp.c:21336)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21336)
            PtrDecl: quals=[] (at pp.c:21336)
              TypeDecl: declname='msg', quals=[] (at pp.c:21336)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21336)
            TypeDecl: declname='len', quals=[] (at pp.c:21336)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21336)
          TypeDecl: declname='CC2420ActiveMessageP__Packet__getPayload', quals=[] (at pp.c:21336)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21338)
      Return:  (at pp.c:21339)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__SubSend__getPayload' (at pp.c:21339)
          ExprList:  (at pp.c:21339)
            ID: name='msg' (at pp.c:21339)
            ID: name='len' (at pp.c:21339)
  FuncDef:  (at pp.c:21343)
    Decl: name='CC2420ActiveMessageP__AMSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:21343)
      FuncDecl: quals=None (at pp.c:21343)
        ParamList:  (at pp.c:21343)
          Decl: name='id', quals=[], storage=[] (at pp.c:21343)
            TypeDecl: declname='id', quals=[] (at pp.c:21343)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='m', quals=[], storage=[] (at pp.c:21343)
            PtrDecl: quals=[] (at pp.c:21343)
              TypeDecl: declname='m', quals=[] (at pp.c:21343)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21343)
            TypeDecl: declname='len', quals=[] (at pp.c:21343)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21343)
          TypeDecl: declname='CC2420ActiveMessageP__AMSend__getPayload', quals=[] (at pp.c:21343)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21345)
      Return:  (at pp.c:21346)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__Packet__getPayload' (at pp.c:21346)
          ExprList:  (at pp.c:21346)
            ID: name='m' (at pp.c:21346)
            ID: name='len' (at pp.c:21346)
  FuncDef:  (at pp.c:21350)
    Decl: name='AMQueueImplP__0__AMSend__getPayload', quals=[], storage=['static', 'inline'] (at pp.c:21350)
      FuncDecl: quals=None (at pp.c:21350)
        ParamList:  (at pp.c:21350)
          Decl: name='arg_0x102b39020', quals=[], storage=[] (at pp.c:21350)
            TypeDecl: declname='arg_0x102b39020', quals=[] (at pp.c:21350)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21350)
            PtrDecl: quals=[] (at pp.c:21350)
              TypeDecl: declname='msg', quals=[] (at pp.c:21350)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21350)
            TypeDecl: declname='len', quals=[] (at pp.c:21350)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21350)
          TypeDecl: declname='AMQueueImplP__0__AMSend__getPayload', quals=[] (at pp.c:21350)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21350)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21352)
        PtrDecl: quals=[] (at pp.c:21352)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21352)
            IdentifierType: names=['void'] (at None)
      Assignment: op='=' (at pp.c:21356)
        ID: name='__nesc_result' (at pp.c:21356)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__AMSend__getPayload' (at pp.c:21356)
          ExprList:  (at pp.c:21356)
            ID: name='arg_0x102b39020' (at pp.c:21356)
            ID: name='msg' (at pp.c:21356)
            ID: name='len' (at pp.c:21356)
      Return:  (at pp.c:21360)
        ID: name='__nesc_result' (at pp.c:21360)
  FuncDef:  (at pp.c:21365)
    Decl: name='AMQueueImplP__0__Send__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:21365)
      FuncDecl: quals=None (at pp.c:21365)
        ParamList:  (at pp.c:21365)
          Decl: name='id', quals=[], storage=[] (at pp.c:21365)
            TypeDecl: declname='id', quals=[] (at pp.c:21365)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='m', quals=[], storage=[] (at pp.c:21365)
            PtrDecl: quals=[] (at pp.c:21365)
              TypeDecl: declname='m', quals=[] (at pp.c:21365)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21365)
            TypeDecl: declname='len', quals=[] (at pp.c:21365)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21365)
          TypeDecl: declname='AMQueueImplP__0__Send__getPayload', quals=[] (at pp.c:21365)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21367)
      Return:  (at pp.c:21368)
        FuncCall:  (at None)
          ID: name='AMQueueImplP__0__AMSend__getPayload' (at pp.c:21368)
          ExprList:  (at pp.c:21368)
            Constant: type='int', value='0' (at pp.c:21368)
            ID: name='m' (at pp.c:21368)
            ID: name='len' (at pp.c:21368)
  FuncDef:  (at pp.c:21372)
    Decl: name='AMQueueEntryP__0__Send__getPayload', quals=[], storage=['static', 'inline'] (at pp.c:21372)
      FuncDecl: quals=None (at pp.c:21372)
        ParamList:  (at pp.c:21372)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21372)
            PtrDecl: quals=[] (at pp.c:21372)
              TypeDecl: declname='msg', quals=[] (at pp.c:21372)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21372)
            TypeDecl: declname='len', quals=[] (at pp.c:21372)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21372)
          TypeDecl: declname='AMQueueEntryP__0__Send__getPayload', quals=[] (at pp.c:21372)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21372)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21374)
        PtrDecl: quals=[] (at pp.c:21374)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21374)
            IdentifierType: names=['void'] (at None)
      Assignment: op='=' (at pp.c:21378)
        ID: name='__nesc_result' (at pp.c:21378)
        FuncCall:  (at None)
          ID: name='AMQueueImplP__0__Send__getPayload' (at pp.c:21378)
          ExprList:  (at pp.c:21378)
            Constant: type='int', value='0U' (at pp.c:21378)
            ID: name='msg' (at pp.c:21378)
            ID: name='len' (at pp.c:21378)
      Return:  (at pp.c:21382)
        ID: name='__nesc_result' (at pp.c:21382)
  FuncDef:  (at pp.c:21387)
    Decl: name='AMQueueEntryP__0__AMSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:21387)
      FuncDecl: quals=None (at pp.c:21387)
        ParamList:  (at pp.c:21387)
          Decl: name='m', quals=[], storage=[] (at pp.c:21387)
            PtrDecl: quals=[] (at pp.c:21387)
              TypeDecl: declname='m', quals=[] (at pp.c:21387)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21387)
            TypeDecl: declname='len', quals=[] (at pp.c:21387)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21387)
          TypeDecl: declname='AMQueueEntryP__0__AMSend__getPayload', quals=[] (at pp.c:21387)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21389)
      Return:  (at pp.c:21390)
        FuncCall:  (at None)
          ID: name='AMQueueEntryP__0__Send__getPayload' (at pp.c:21390)
          ExprList:  (at pp.c:21390)
            ID: name='m' (at pp.c:21390)
            ID: name='len' (at pp.c:21390)
  FuncDef:  (at pp.c:21394)
    Decl: name='LplAMSenderP__0__SubAMSend__getPayload', quals=[], storage=['static', 'inline'] (at pp.c:21394)
      FuncDecl: quals=None (at pp.c:21394)
        ParamList:  (at pp.c:21394)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21394)
            PtrDecl: quals=[] (at pp.c:21394)
              TypeDecl: declname='msg', quals=[] (at pp.c:21394)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21394)
            TypeDecl: declname='len', quals=[] (at pp.c:21394)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21394)
          TypeDecl: declname='LplAMSenderP__0__SubAMSend__getPayload', quals=[] (at pp.c:21394)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21394)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21396)
        PtrDecl: quals=[] (at pp.c:21396)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21396)
            IdentifierType: names=['void'] (at None)
      Assignment: op='=' (at pp.c:21400)
        ID: name='__nesc_result' (at pp.c:21400)
        FuncCall:  (at None)
          ID: name='AMQueueEntryP__0__AMSend__getPayload' (at pp.c:21400)
          ExprList:  (at pp.c:21400)
            ID: name='msg' (at pp.c:21400)
            ID: name='len' (at pp.c:21400)
      Return:  (at pp.c:21404)
        ID: name='__nesc_result' (at pp.c:21404)
  FuncDef:  (at pp.c:21409)
    Decl: name='LplAMSenderP__0__AMSend__getPayload', quals=[], storage=['inline', 'static'] (at pp.c:21409)
      FuncDecl: quals=None (at pp.c:21409)
        ParamList:  (at pp.c:21409)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21409)
            PtrDecl: quals=[] (at pp.c:21409)
              TypeDecl: declname='msg', quals=[] (at pp.c:21409)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21409)
            TypeDecl: declname='len', quals=[] (at pp.c:21409)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21409)
          TypeDecl: declname='LplAMSenderP__0__AMSend__getPayload', quals=[] (at pp.c:21409)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21411)
      Return:  (at pp.c:21413)
        FuncCall:  (at None)
          ID: name='LplAMSenderP__0__SubAMSend__getPayload' (at pp.c:21413)
          ExprList:  (at pp.c:21413)
            ID: name='msg' (at pp.c:21413)
            ID: name='len' (at pp.c:21413)
  FuncDef:  (at pp.c:21417)
    Decl: name='LowPowerSensingPeriodicSamplerC__SampleSend__getPayload', quals=[], storage=['static', 'inline'] (at pp.c:21417)
      FuncDecl: quals=None (at pp.c:21417)
        ParamList:  (at pp.c:21417)
          Decl: name='msg', quals=[], storage=[] (at pp.c:21417)
            PtrDecl: quals=[] (at pp.c:21417)
              TypeDecl: declname='msg', quals=[] (at pp.c:21417)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21417)
            TypeDecl: declname='len', quals=[] (at pp.c:21417)
              IdentifierType: names=['uint8_t'] (at None)
        PtrDecl: quals=[] (at pp.c:21417)
          TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleSend__getPayload', quals=[] (at pp.c:21417)
            IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21417)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21419)
        PtrDecl: quals=[] (at pp.c:21419)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21419)
            IdentifierType: names=['void'] (at None)
      Assignment: op='=' (at pp.c:21423)
        ID: name='__nesc_result' (at pp.c:21423)
        FuncCall:  (at None)
          ID: name='LplAMSenderP__0__AMSend__getPayload' (at pp.c:21423)
          ExprList:  (at pp.c:21423)
            ID: name='msg' (at pp.c:21423)
            ID: name='len' (at pp.c:21423)
      Return:  (at pp.c:21427)
        ID: name='__nesc_result' (at pp.c:21427)
  FuncDef:  (at pp.c:21432)
    Decl: name='SampleNxConverterC__SampleNxConverter__copyToNx', quals=[], storage=['inline', 'static'] (at pp.c:21432)
      FuncDecl: quals=None (at pp.c:21432)
        ParamList:  (at pp.c:21432)
          Decl: name='dest', quals=[], storage=[] (at pp.c:21432)
            PtrDecl: quals=[] (at pp.c:21432)
              TypeDecl: declname='dest', quals=[] (at pp.c:21432)
                IdentifierType: names=['nx_sensor_sample_t'] (at None)
          Decl: name='src', quals=[], storage=[] (at pp.c:21432)
            PtrDecl: quals=[] (at pp.c:21432)
              TypeDecl: declname='src', quals=[] (at pp.c:21432)
                IdentifierType: names=['sensor_sample_t'] (at None)
        TypeDecl: declname='SampleNxConverterC__SampleNxConverter__copyToNx', quals=[] (at pp.c:21432)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21434)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint32' (at pp.c:21435)
        ExprList:  (at pp.c:21435)
          StructRef: type='.' (at pp.c:21435)
            StructRef: type='->' (at pp.c:21435)
              ID: name='dest' (at pp.c:21435)
              ID: name='sample_num' (at pp.c:21435)
            ID: name='nxdata' (at pp.c:21435)
          StructRef: type='->' (at pp.c:21435)
            ID: name='src' (at pp.c:21435)
            ID: name='sample_num' (at pp.c:21435)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint16' (at pp.c:21436)
        ExprList:  (at pp.c:21436)
          StructRef: type='.' (at pp.c:21436)
            StructRef: type='->' (at pp.c:21436)
              ID: name='dest' (at pp.c:21436)
              ID: name='sin_value' (at pp.c:21436)
            ID: name='nxdata' (at pp.c:21436)
          StructRef: type='->' (at pp.c:21436)
            ID: name='src' (at pp.c:21436)
            ID: name='sin_value' (at pp.c:21436)
  FuncDef:  (at pp.c:21440)
    Decl: name='LowPowerSensingPeriodicSamplerC__SampleNxConverter__copyToNx', quals=[], storage=['static', 'inline'] (at pp.c:21440)
      FuncDecl: quals=None (at pp.c:21440)
        ParamList:  (at pp.c:21440)
          Decl: name='dest', quals=[], storage=[] (at pp.c:21440)
            PtrDecl: quals=[] (at pp.c:21440)
              TypeDecl: declname='dest', quals=[] (at pp.c:21440)
                IdentifierType: names=['nx_sensor_sample_t'] (at None)
          Decl: name='src', quals=[], storage=[] (at pp.c:21440)
            PtrDecl: quals=[] (at pp.c:21440)
              TypeDecl: declname='src', quals=[] (at pp.c:21440)
                IdentifierType: names=['sensor_sample_t'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleNxConverter__copyToNx', quals=[] (at pp.c:21440)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21440)
      FuncCall:  (at None)
        ID: name='SampleNxConverterC__SampleNxConverter__copyToNx' (at pp.c:21442)
        ExprList:  (at pp.c:21442)
          ID: name='dest' (at pp.c:21442)
          ID: name='src' (at pp.c:21442)
  FuncDef:  (at pp.c:21447)
    Decl: name='SampleLogReaderP__0__LogRead__seekDone', quals=[], storage=['inline', 'static'] (at pp.c:21447)
      FuncDecl: quals=None (at pp.c:21447)
        ParamList:  (at pp.c:21447)
          Decl: name='error', quals=[], storage=[] (at pp.c:21447)
            TypeDecl: declname='error', quals=[] (at pp.c:21447)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SampleLogReaderP__0__LogRead__seekDone', quals=[] (at pp.c:21447)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21449)
      If:  (at pp.c:21450)
        BinaryOp: op='==' (at pp.c:21450)
          ID: name='error' (at pp.c:21450)
          ID: name='SUCCESS' (at pp.c:21450)
        Compound:  (at pp.c:21450)
          Assignment: op='=' (at pp.c:21451)
            ID: name='error' (at pp.c:21451)
            FuncCall:  (at None)
              ID: name='SampleLogReaderP__0__SampleLogRead__readNext' (at pp.c:21451)
          If:  (at pp.c:21452)
            BinaryOp: op='!=' (at pp.c:21452)
              ID: name='error' (at pp.c:21452)
              ID: name='SUCCESS' (at pp.c:21452)
            Compound:  (at pp.c:21452)
              FuncCall:  (at None)
                ID: name='SampleLogReaderP__0__SampleLogRead__readDone' (at pp.c:21453)
                ExprList:  (at pp.c:21453)
                  UnaryOp: op='&' (at pp.c:21453)
                    ID: name='SampleLogReaderP__0__sample' (at pp.c:21453)
                  ID: name='error' (at pp.c:21453)
        Compound:  (at pp.c:21456)
          FuncCall:  (at None)
            ID: name='SampleLogReaderP__0__SampleLogRead__readDone' (at pp.c:21458)
            ExprList:  (at pp.c:21458)
              UnaryOp: op='&' (at pp.c:21458)
                ID: name='SampleLogReaderP__0__sample' (at pp.c:21458)
              ID: name='error' (at pp.c:21458)
  FuncDef:  (at pp.c:21463)
    Decl: name='Stm25pLogP__Read__default__seekDone', quals=[], storage=['inline', 'static'] (at pp.c:21463)
      FuncDecl: quals=None (at pp.c:21463)
        ParamList:  (at pp.c:21463)
          Decl: name='id', quals=[], storage=[] (at pp.c:21463)
            TypeDecl: declname='id', quals=[] (at pp.c:21463)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21463)
            TypeDecl: declname='error', quals=[] (at pp.c:21463)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Read__default__seekDone', quals=[] (at pp.c:21463)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21465)
  FuncDef:  (at pp.c:21469)
    Decl: name='Stm25pLogP__Read__seekDone', quals=[], storage=['static', 'inline'] (at pp.c:21469)
      FuncDecl: quals=None (at pp.c:21469)
        ParamList:  (at pp.c:21469)
          Decl: name='arg_0x101931728', quals=[], storage=[] (at pp.c:21469)
            TypeDecl: declname='arg_0x101931728', quals=[] (at pp.c:21469)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21469)
            TypeDecl: declname='error', quals=[] (at pp.c:21469)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Read__seekDone', quals=[] (at pp.c:21469)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21469)
      Switch:  (at pp.c:21471)
        ID: name='arg_0x101931728' (at pp.c:21471)
        Compound:  (at pp.c:21471)
          Case:  (at pp.c:21473)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:21473)
            FuncCall:  (at None)
              ID: name='SampleLogReaderP__0__LogRead__seekDone' (at pp.c:21475)
              ExprList:  (at pp.c:21475)
                ID: name='error' (at pp.c:21475)
          Break:  (at pp.c:21477)
          Default:  (at pp.c:21479)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Read__default__seekDone' (at pp.c:21481)
              ExprList:  (at pp.c:21481)
                ID: name='arg_0x101931728' (at pp.c:21481)
                ID: name='error' (at pp.c:21481)
          Break:  (at pp.c:21483)
  FuncDef:  (at pp.c:21490)
    Decl: name='VirtualizeTimerC__0__Timer__startPeriodic', quals=[], storage=['inline', 'static'] (at pp.c:21490)
      FuncDecl: quals=None (at pp.c:21490)
        ParamList:  (at pp.c:21490)
          Decl: name='num', quals=[], storage=[] (at pp.c:21490)
            TypeDecl: declname='num', quals=[] (at pp.c:21490)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:21490)
            TypeDecl: declname='dt', quals=[] (at pp.c:21490)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__startPeriodic', quals=[] (at pp.c:21490)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21491)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__startTimer' (at pp.c:21492)
        ExprList:  (at pp.c:21492)
          ID: name='num' (at pp.c:21492)
          FuncCall:  (at None)
            ID: name='VirtualizeTimerC__0__TimerFrom__getNow' (at pp.c:21492)
          ID: name='dt' (at pp.c:21492)
          ID: name='FALSE' (at pp.c:21492)
  FuncDef:  (at pp.c:21496)
    Decl: name='PeriodicSampleLoggerP__0__Timer__startPeriodic', quals=[], storage=['static', 'inline'] (at pp.c:21496)
      FuncDecl: quals=None (at pp.c:21496)
        ParamList:  (at pp.c:21496)
          Decl: name='dt', quals=[], storage=[] (at pp.c:21496)
            TypeDecl: declname='dt', quals=[] (at pp.c:21496)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__Timer__startPeriodic', quals=[] (at pp.c:21496)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21496)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__startPeriodic' (at pp.c:21498)
        ExprList:  (at pp.c:21498)
          Constant: type='int', value='0U' (at pp.c:21498)
          ID: name='dt' (at pp.c:21498)
  FuncDef:  (at pp.c:21503)
    Decl: name='PeriodicSampleLoggerP__0__LogWrite__eraseDone', quals=[], storage=['inline', 'static'] (at pp.c:21503)
      FuncDecl: quals=None (at pp.c:21503)
        ParamList:  (at pp.c:21503)
          Decl: name='error', quals=[], storage=[] (at pp.c:21503)
            TypeDecl: declname='error', quals=[] (at pp.c:21503)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__eraseDone', quals=[] (at pp.c:21503)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21505)
      Assignment: op='=' (at pp.c:21506)
        StructRef: type='.' (at pp.c:21506)
          ArrayRef:  (at pp.c:21506)
            ID: name='PeriodicSampleLoggerP__0__sample' (at pp.c:21506)
            Constant: type='int', value='0' (at pp.c:21506)
          ID: name='sample_num' (at pp.c:21506)
        Constant: type='int', value='0' (at pp.c:21506)
      Assignment: op='=' (at pp.c:21507)
        StructRef: type='.' (at pp.c:21507)
          ArrayRef:  (at pp.c:21507)
            ID: name='PeriodicSampleLoggerP__0__sample' (at pp.c:21507)
            Constant: type='int', value='1' (at pp.c:21507)
          ID: name='sample_num' (at pp.c:21507)
        Constant: type='int', value='1' (at pp.c:21507)
      Assignment: op='=' (at pp.c:21508)
        ID: name='PeriodicSampleLoggerP__0__current_sample_id' (at pp.c:21508)
        Constant: type='int', value='0' (at pp.c:21508)
      Assignment: op='=' (at pp.c:21509)
        ID: name='PeriodicSampleLoggerP__0__current_sample' (at pp.c:21509)
        UnaryOp: op='&' (at pp.c:21509)
          ArrayRef:  (at pp.c:21509)
            ID: name='PeriodicSampleLoggerP__0__sample' (at pp.c:21509)
            ID: name='PeriodicSampleLoggerP__0__current_sample_id' (at pp.c:21509)
      FuncCall:  (at None)
        ID: name='PeriodicSampleLoggerP__0__readSensors' (at pp.c:21510)
      FuncCall:  (at None)
        ID: name='PeriodicSampleLoggerP__0__Timer__startPeriodic' (at pp.c:21511)
        ExprList:  (at pp.c:21511)
          Constant: type='int', value='3000' (at pp.c:21511)
  FuncDef:  (at pp.c:21515)
    Decl: name='SampleLogReaderP__0__LogWrite__eraseDone', quals=[], storage=['inline', 'static'] (at pp.c:21515)
      FuncDecl: quals=None (at pp.c:21515)
        ParamList:  (at pp.c:21515)
          Decl: name='error', quals=[], storage=[] (at pp.c:21515)
            TypeDecl: declname='error', quals=[] (at pp.c:21515)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SampleLogReaderP__0__LogWrite__eraseDone', quals=[] (at pp.c:21515)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21517)
  FuncDef:  (at pp.c:21521)
    Decl: name='Stm25pLogP__Write__default__eraseDone', quals=[], storage=['inline', 'static'] (at pp.c:21521)
      FuncDecl: quals=None (at pp.c:21521)
        ParamList:  (at pp.c:21521)
          Decl: name='id', quals=[], storage=[] (at pp.c:21521)
            TypeDecl: declname='id', quals=[] (at pp.c:21521)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21521)
            TypeDecl: declname='error', quals=[] (at pp.c:21521)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Write__default__eraseDone', quals=[] (at pp.c:21521)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21523)
  FuncDef:  (at pp.c:21527)
    Decl: name='Stm25pLogP__Write__eraseDone', quals=[], storage=['static', 'inline'] (at pp.c:21527)
      FuncDecl: quals=None (at pp.c:21527)
        ParamList:  (at pp.c:21527)
          Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:21527)
            TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:21527)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21527)
            TypeDecl: declname='error', quals=[] (at pp.c:21527)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Write__eraseDone', quals=[] (at pp.c:21527)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21527)
      Switch:  (at pp.c:21529)
        ID: name='arg_0x101930b58' (at pp.c:21529)
        Compound:  (at pp.c:21529)
          Case:  (at pp.c:21531)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:21531)
            FuncCall:  (at None)
              ID: name='SampleLogReaderP__0__LogWrite__eraseDone' (at pp.c:21533)
              ExprList:  (at pp.c:21533)
                ID: name='error' (at pp.c:21533)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__LogWrite__eraseDone' (at pp.c:21535)
            ExprList:  (at pp.c:21535)
              ID: name='error' (at pp.c:21535)
          Break:  (at pp.c:21537)
          Default:  (at pp.c:21539)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Write__default__eraseDone' (at pp.c:21541)
              ExprList:  (at pp.c:21541)
                ID: name='arg_0x101930b58' (at pp.c:21541)
                ID: name='error' (at pp.c:21541)
          Break:  (at pp.c:21543)
  FuncDef:  (at pp.c:21550)
    Decl: name='SineSensorC__0__readTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:21550)
      FuncDecl: quals=None (at pp.c:21550)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SineSensorC__0__readTask__postTask', quals=[] (at pp.c:21550)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21550)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21552)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21552)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21556)
        ID: name='__nesc_result' (at pp.c:21556)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:21556)
          ExprList:  (at pp.c:21556)
            ID: name='SineSensorC__0__readTask' (at pp.c:21556)
      Return:  (at pp.c:21560)
        ID: name='__nesc_result' (at pp.c:21560)
  FuncDef:  (at pp.c:21565)
    Decl: name='SineSensorC__0__Read__read', quals=[], storage=['inline', 'static'] (at pp.c:21565)
      FuncDecl: quals=None (at pp.c:21565)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SineSensorC__0__Read__read', quals=[] (at pp.c:21565)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21567)
      FuncCall:  (at None)
        ID: name='SineSensorC__0__readTask__postTask' (at pp.c:21568)
      Return:  (at pp.c:21569)
        ID: name='SUCCESS' (at pp.c:21569)
  FuncDef:  (at pp.c:21573)
    Decl: name='PeriodicSampleLoggerP__0__Sensor__default__read', quals=[], storage=['inline', 'static'] (at pp.c:21573)
      FuncDecl: quals=None (at pp.c:21573)
        ParamList:  (at pp.c:21573)
          Decl: name='i', quals=[], storage=[] (at pp.c:21573)
            TypeDecl: declname='i', quals=[] (at pp.c:21573)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__Sensor__default__read', quals=[] (at pp.c:21573)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21575)
      Return:  (at pp.c:21577)
        ID: name='SUCCESS' (at pp.c:21577)
  FuncDef:  (at pp.c:21581)
    Decl: name='PeriodicSampleLoggerP__0__Sensor__read', quals=[], storage=['static', 'inline'] (at pp.c:21581)
      FuncDecl: quals=None (at pp.c:21581)
        ParamList:  (at pp.c:21581)
          Decl: name='arg_0x101541798', quals=[], storage=[] (at pp.c:21581)
            TypeDecl: declname='arg_0x101541798', quals=[] (at pp.c:21581)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__Sensor__read', quals=[] (at pp.c:21581)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21581)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21583)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21583)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:21587)
        ID: name='arg_0x101541798' (at pp.c:21587)
        Compound:  (at pp.c:21587)
          Case:  (at pp.c:21589)
            Constant: type='int', value='0' (at pp.c:21589)
            Assignment: op='=' (at pp.c:21591)
              ID: name='__nesc_result' (at pp.c:21591)
              FuncCall:  (at None)
                ID: name='SineSensorC__0__Read__read' (at pp.c:21591)
          Break:  (at pp.c:21593)
          Default:  (at pp.c:21595)
            Assignment: op='=' (at pp.c:21597)
              ID: name='__nesc_result' (at pp.c:21597)
              FuncCall:  (at None)
                ID: name='PeriodicSampleLoggerP__0__Sensor__default__read' (at pp.c:21597)
                ExprList:  (at pp.c:21597)
                  ID: name='arg_0x101541798' (at pp.c:21597)
          Break:  (at pp.c:21599)
      Return:  (at pp.c:21605)
        ID: name='__nesc_result' (at pp.c:21605)
  FuncDef:  (at pp.c:21610)
    Decl: name='PeriodicSampleLoggerP__0__appendTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:21610)
      FuncDecl: quals=None (at pp.c:21610)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__appendTask__postTask', quals=[] (at pp.c:21610)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21610)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21612)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21612)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21616)
        ID: name='__nesc_result' (at pp.c:21616)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:21616)
          ExprList:  (at pp.c:21616)
            ID: name='PeriodicSampleLoggerP__0__appendTask' (at pp.c:21616)
      Return:  (at pp.c:21620)
        ID: name='__nesc_result' (at pp.c:21620)
  FuncDef:  (at pp.c:21625)
    Decl: name='PeriodicSampleLoggerP__0__LogWrite__appendDone', quals=[], storage=['inline', 'static'] (at pp.c:21625)
      FuncDecl: quals=None (at pp.c:21625)
        ParamList:  (at pp.c:21625)
          Decl: name='buf', quals=[], storage=[] (at pp.c:21625)
            PtrDecl: quals=[] (at pp.c:21625)
              TypeDecl: declname='buf', quals=[] (at pp.c:21625)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21625)
            TypeDecl: declname='len', quals=[] (at pp.c:21625)
              IdentifierType: names=['storage_len_t'] (at None)
          Decl: name='recordsLost', quals=[], storage=[] (at pp.c:21625)
            TypeDecl: declname='recordsLost', quals=[] (at pp.c:21625)
              IdentifierType: names=['bool'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21625)
            TypeDecl: declname='error', quals=[] (at pp.c:21625)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__appendDone', quals=[] (at pp.c:21625)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21627)
      If:  (at pp.c:21628)
        BinaryOp: op='!=' (at pp.c:21628)
          ID: name='error' (at pp.c:21628)
          ID: name='SUCCESS' (at pp.c:21628)
        Compound:  (at pp.c:21628)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__appendTask__postTask' (at pp.c:21629)
        Compound:  (at pp.c:21631)
          Assignment: op='+=' (at None)
            StructRef: type='->' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  PtrDecl: quals=[] (at pp.c:21634)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['PeriodicSampleLoggerP__0__generic_sensor_sample_t'] (at None)
                ID: name='buf' (at pp.c:21634)
              ID: name='sample_num' (at pp.c:21634)
            Constant: type='int', value='2' (at pp.c:21634)
  FuncDef:  (at pp.c:21639)
    Decl: name='SampleLogReaderP__0__LogWrite__appendDone', quals=[], storage=['inline', 'static'] (at pp.c:21639)
      FuncDecl: quals=None (at pp.c:21639)
        ParamList:  (at pp.c:21639)
          Decl: name='buf', quals=[], storage=[] (at pp.c:21639)
            PtrDecl: quals=[] (at pp.c:21639)
              TypeDecl: declname='buf', quals=[] (at pp.c:21639)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21639)
            TypeDecl: declname='len', quals=[] (at pp.c:21639)
              IdentifierType: names=['storage_len_t'] (at None)
          Decl: name='recordsLost', quals=[], storage=[] (at pp.c:21639)
            TypeDecl: declname='recordsLost', quals=[] (at pp.c:21639)
              IdentifierType: names=['bool'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21639)
            TypeDecl: declname='error', quals=[] (at pp.c:21639)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SampleLogReaderP__0__LogWrite__appendDone', quals=[] (at pp.c:21639)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21641)
  FuncDef:  (at pp.c:21645)
    Decl: name='Stm25pLogP__Write__default__appendDone', quals=[], storage=['inline', 'static'] (at pp.c:21645)
      FuncDecl: quals=None (at pp.c:21645)
        ParamList:  (at pp.c:21645)
          Decl: name='id', quals=[], storage=[] (at pp.c:21645)
            TypeDecl: declname='id', quals=[] (at pp.c:21645)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:21645)
            PtrDecl: quals=[] (at pp.c:21645)
              TypeDecl: declname='data', quals=[] (at pp.c:21645)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21645)
            TypeDecl: declname='len', quals=[] (at pp.c:21645)
              IdentifierType: names=['storage_len_t'] (at None)
          Decl: name='recordsLost', quals=[], storage=[] (at pp.c:21645)
            TypeDecl: declname='recordsLost', quals=[] (at pp.c:21645)
              IdentifierType: names=['bool'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21645)
            TypeDecl: declname='error', quals=[] (at pp.c:21645)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Write__default__appendDone', quals=[] (at pp.c:21645)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21647)
  FuncDef:  (at pp.c:21651)
    Decl: name='Stm25pLogP__Write__appendDone', quals=[], storage=['static', 'inline'] (at pp.c:21651)
      FuncDecl: quals=None (at pp.c:21651)
        ParamList:  (at pp.c:21651)
          Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:21651)
            TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:21651)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:21651)
            PtrDecl: quals=[] (at pp.c:21651)
              TypeDecl: declname='buf', quals=[] (at pp.c:21651)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21651)
            TypeDecl: declname='len', quals=[] (at pp.c:21651)
              IdentifierType: names=['storage_len_t'] (at None)
          Decl: name='recordsLost', quals=[], storage=[] (at pp.c:21651)
            TypeDecl: declname='recordsLost', quals=[] (at pp.c:21651)
              IdentifierType: names=['bool'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21651)
            TypeDecl: declname='error', quals=[] (at pp.c:21651)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Write__appendDone', quals=[] (at pp.c:21651)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21651)
      Switch:  (at pp.c:21653)
        ID: name='arg_0x101930b58' (at pp.c:21653)
        Compound:  (at pp.c:21653)
          Case:  (at pp.c:21655)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:21655)
            FuncCall:  (at None)
              ID: name='SampleLogReaderP__0__LogWrite__appendDone' (at pp.c:21657)
              ExprList:  (at pp.c:21657)
                ID: name='buf' (at pp.c:21657)
                ID: name='len' (at pp.c:21657)
                ID: name='recordsLost' (at pp.c:21657)
                ID: name='error' (at pp.c:21657)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__LogWrite__appendDone' (at pp.c:21659)
            ExprList:  (at pp.c:21659)
              ID: name='buf' (at pp.c:21659)
              ID: name='len' (at pp.c:21659)
              ID: name='recordsLost' (at pp.c:21659)
              ID: name='error' (at pp.c:21659)
          Break:  (at pp.c:21661)
          Default:  (at pp.c:21663)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Write__default__appendDone' (at pp.c:21665)
              ExprList:  (at pp.c:21665)
                ID: name='arg_0x101930b58' (at pp.c:21665)
                ID: name='buf' (at pp.c:21665)
                ID: name='len' (at pp.c:21665)
                ID: name='recordsLost' (at pp.c:21665)
                ID: name='error' (at pp.c:21665)
          Break:  (at pp.c:21667)
  FuncDef:  (at pp.c:21674)
    Decl: name='PeriodicSampleLoggerP__0__LogWrite__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:21674)
      FuncDecl: quals=None (at pp.c:21674)
        ParamList:  (at pp.c:21674)
          Decl: name='error', quals=[], storage=[] (at pp.c:21674)
            TypeDecl: declname='error', quals=[] (at pp.c:21674)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__syncDone', quals=[] (at pp.c:21674)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21676)
  FuncDef:  (at pp.c:21680)
    Decl: name='SampleLogReaderP__0__LogWrite__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:21680)
      FuncDecl: quals=None (at pp.c:21680)
        ParamList:  (at pp.c:21680)
          Decl: name='error', quals=[], storage=[] (at pp.c:21680)
            TypeDecl: declname='error', quals=[] (at pp.c:21680)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='SampleLogReaderP__0__LogWrite__syncDone', quals=[] (at pp.c:21680)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21682)
  FuncDef:  (at pp.c:21686)
    Decl: name='Stm25pLogP__Write__default__syncDone', quals=[], storage=['inline', 'static'] (at pp.c:21686)
      FuncDecl: quals=None (at pp.c:21686)
        ParamList:  (at pp.c:21686)
          Decl: name='id', quals=[], storage=[] (at pp.c:21686)
            TypeDecl: declname='id', quals=[] (at pp.c:21686)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21686)
            TypeDecl: declname='error', quals=[] (at pp.c:21686)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Write__default__syncDone', quals=[] (at pp.c:21686)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21688)
  FuncDef:  (at pp.c:21692)
    Decl: name='Stm25pLogP__Write__syncDone', quals=[], storage=['static', 'inline'] (at pp.c:21692)
      FuncDecl: quals=None (at pp.c:21692)
        ParamList:  (at pp.c:21692)
          Decl: name='arg_0x101930b58', quals=[], storage=[] (at pp.c:21692)
            TypeDecl: declname='arg_0x101930b58', quals=[] (at pp.c:21692)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21692)
            TypeDecl: declname='error', quals=[] (at pp.c:21692)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Write__syncDone', quals=[] (at pp.c:21692)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21692)
      Switch:  (at pp.c:21694)
        ID: name='arg_0x101930b58' (at pp.c:21694)
        Compound:  (at pp.c:21694)
          Case:  (at pp.c:21696)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:21696)
            FuncCall:  (at None)
              ID: name='SampleLogReaderP__0__LogWrite__syncDone' (at pp.c:21698)
              ExprList:  (at pp.c:21698)
                ID: name='error' (at pp.c:21698)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__LogWrite__syncDone' (at pp.c:21700)
            ExprList:  (at pp.c:21700)
              ID: name='error' (at pp.c:21700)
          Break:  (at pp.c:21702)
          Default:  (at pp.c:21704)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Write__default__syncDone' (at pp.c:21706)
              ExprList:  (at pp.c:21706)
                ID: name='arg_0x101930b58' (at pp.c:21706)
                ID: name='error' (at pp.c:21706)
          Break:  (at pp.c:21708)
  FuncDef:  (at pp.c:21715)
    Decl: name='Stm25pLogP__Sector__default__getNumSectors', quals=[], storage=['inline', 'static'] (at pp.c:21715)
      FuncDecl: quals=None (at pp.c:21715)
        ParamList:  (at pp.c:21715)
          Decl: name='id', quals=[], storage=[] (at pp.c:21715)
            TypeDecl: declname='id', quals=[] (at pp.c:21715)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__default__getNumSectors', quals=[] (at pp.c:21715)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:21717)
      Return:  (at pp.c:21719)
        Constant: type='int', value='0' (at pp.c:21719)
  FuncDef:  (at pp.c:21723)
    Decl: name='Stm25pLogP__Sector__getNumSectors', quals=[], storage=['static', 'inline'] (at pp.c:21723)
      FuncDecl: quals=None (at pp.c:21723)
        ParamList:  (at pp.c:21723)
          Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:21723)
            TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:21723)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__getNumSectors', quals=[] (at pp.c:21723)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:21723)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21725)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21725)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:21729)
        ID: name='arg_0x10192d468' (at pp.c:21729)
        Compound:  (at pp.c:21729)
          Case:  (at pp.c:21731)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:21731)
            Assignment: op='=' (at pp.c:21733)
              ID: name='__nesc_result' (at pp.c:21733)
              FuncCall:  (at None)
                ID: name='Stm25pSectorP__Sector__getNumSectors' (at pp.c:21733)
                ExprList:  (at pp.c:21733)
                  ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:21733)
          Break:  (at pp.c:21735)
          Default:  (at pp.c:21737)
            Assignment: op='=' (at pp.c:21739)
              ID: name='__nesc_result' (at pp.c:21739)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__Sector__default__getNumSectors' (at pp.c:21739)
                ExprList:  (at pp.c:21739)
                  ID: name='arg_0x10192d468' (at pp.c:21739)
          Break:  (at pp.c:21741)
      Return:  (at pp.c:21747)
        ID: name='__nesc_result' (at pp.c:21747)
  FuncDef:  (at pp.c:21752)
    Decl: name='Stm25pLogP__calcSector', quals=[], storage=['inline', 'static'] (at pp.c:21752)
      FuncDecl: quals=None (at pp.c:21752)
        ParamList:  (at pp.c:21752)
          Decl: name='client', quals=[], storage=[] (at pp.c:21752)
            TypeDecl: declname='client', quals=[] (at pp.c:21752)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:21752)
            TypeDecl: declname='addr', quals=[] (at pp.c:21752)
              IdentifierType: names=['stm25p_addr_t'] (at None)
        TypeDecl: declname='Stm25pLogP__calcSector', quals=[] (at pp.c:21752)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:21754)
      Decl: name='sector', quals=[], storage=[] (at pp.c:21755)
        TypeDecl: declname='sector', quals=[] (at pp.c:21755)
          IdentifierType: names=['uint8_t'] (at None)
        FuncCall:  (at None)
          ID: name='Stm25pLogP__Sector__getNumSectors' (at pp.c:21755)
          ExprList:  (at pp.c:21755)
            ID: name='client' (at pp.c:21755)
      Return:  (at pp.c:21758)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['uint8_t'] (at None)
          BinaryOp: op='%' (at pp.c:21758)
            BinaryOp: op='>>' (at pp.c:21758)
              ID: name='addr' (at pp.c:21758)
              ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:21758)
            ID: name='sector' (at pp.c:21758)
  FuncDef:  (at pp.c:21762)
    Decl: name='Stm25pLogP__Sector__default__erase', quals=[], storage=['inline', 'static'] (at pp.c:21762)
      FuncDecl: quals=None (at pp.c:21762)
        ParamList:  (at pp.c:21762)
          Decl: name='id', quals=[], storage=[] (at pp.c:21762)
            TypeDecl: declname='id', quals=[] (at pp.c:21762)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='sector', quals=[], storage=[] (at pp.c:21762)
            TypeDecl: declname='sector', quals=[] (at pp.c:21762)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='num_sectors', quals=[], storage=[] (at pp.c:21762)
            TypeDecl: declname='num_sectors', quals=[] (at pp.c:21762)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__default__erase', quals=[] (at pp.c:21762)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21764)
      Return:  (at pp.c:21766)
        ID: name='FAIL' (at pp.c:21766)
  FuncDef:  (at pp.c:21770)
    Decl: name='Stm25pLogP__Sector__erase', quals=[], storage=['static', 'inline'] (at pp.c:21770)
      FuncDecl: quals=None (at pp.c:21770)
        ParamList:  (at pp.c:21770)
          Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:21770)
            TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:21770)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='sector', quals=[], storage=[] (at pp.c:21770)
            TypeDecl: declname='sector', quals=[] (at pp.c:21770)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='num_sectors', quals=[], storage=[] (at pp.c:21770)
            TypeDecl: declname='num_sectors', quals=[] (at pp.c:21770)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__erase', quals=[] (at pp.c:21770)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21770)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21772)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21772)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:21776)
        ID: name='arg_0x10192d468' (at pp.c:21776)
        Compound:  (at pp.c:21776)
          Case:  (at pp.c:21778)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:21778)
            Assignment: op='=' (at pp.c:21780)
              ID: name='__nesc_result' (at pp.c:21780)
              FuncCall:  (at None)
                ID: name='Stm25pSectorP__Sector__erase' (at pp.c:21780)
                ExprList:  (at pp.c:21780)
                  ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:21780)
                  ID: name='sector' (at pp.c:21780)
                  ID: name='num_sectors' (at pp.c:21780)
          Break:  (at pp.c:21782)
          Default:  (at pp.c:21784)
            Assignment: op='=' (at pp.c:21786)
              ID: name='__nesc_result' (at pp.c:21786)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__Sector__default__erase' (at pp.c:21786)
                ExprList:  (at pp.c:21786)
                  ID: name='arg_0x10192d468' (at pp.c:21786)
                  ID: name='sector' (at pp.c:21786)
                  ID: name='num_sectors' (at pp.c:21786)
          Break:  (at pp.c:21788)
      Return:  (at pp.c:21794)
        ID: name='__nesc_result' (at pp.c:21794)
  FuncDef:  (at pp.c:21799)
    Decl: name='Stm25pSectorP__signalDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:21799)
      FuncDecl: quals=None (at pp.c:21799)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSectorP__signalDone_task__postTask', quals=[] (at pp.c:21799)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21799)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21801)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21801)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21805)
        ID: name='__nesc_result' (at pp.c:21805)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:21805)
          ExprList:  (at pp.c:21805)
            ID: name='Stm25pSectorP__signalDone_task' (at pp.c:21805)
      Return:  (at pp.c:21809)
        ID: name='__nesc_result' (at pp.c:21809)
  FuncDef:  (at pp.c:21814)
    Decl: name='Stm25pSectorP__signalDone', quals=[], storage=['inline', 'static'] (at pp.c:21814)
      FuncDecl: quals=None (at pp.c:21814)
        ParamList:  (at pp.c:21814)
          Decl: name='error', quals=[], storage=[] (at pp.c:21814)
            TypeDecl: declname='error', quals=[] (at pp.c:21814)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__signalDone', quals=[] (at pp.c:21814)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21816)
      Assignment: op='=' (at pp.c:21817)
        ID: name='Stm25pSectorP__m_error' (at pp.c:21817)
        ID: name='error' (at pp.c:21817)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__signalDone_task__postTask' (at pp.c:21818)
  FuncDef:  (at pp.c:21822)
    Decl: name='Stm25pSectorP__Spi__computeCrcDone', quals=[], storage=['inline', 'static'] (at pp.c:21822)
      FuncDecl: quals=None (at pp.c:21822)
        ParamList:  (at pp.c:21822)
          Decl: name='crc', quals=[], storage=[] (at pp.c:21822)
            TypeDecl: declname='crc', quals=[] (at pp.c:21822)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:21822)
            TypeDecl: declname='addr', quals=[] (at pp.c:21822)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21823)
            TypeDecl: declname='len', quals=[] (at pp.c:21823)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21823)
            TypeDecl: declname='error', quals=[] (at pp.c:21823)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Spi__computeCrcDone', quals=[] (at pp.c:21822)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21825)
      Assignment: op='=' (at pp.c:21826)
        ID: name='Stm25pSectorP__m_crc' (at pp.c:21826)
        ID: name='crc' (at pp.c:21826)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__signalDone' (at pp.c:21827)
        ExprList:  (at pp.c:21827)
          ID: name='SUCCESS' (at pp.c:21827)
  FuncDef:  (at pp.c:21831)
    Decl: name='Stm25pSpiP__Spi__computeCrcDone', quals=[], storage=['static', 'inline'] (at pp.c:21831)
      FuncDecl: quals=None (at pp.c:21831)
        ParamList:  (at pp.c:21831)
          Decl: name='crc', quals=[], storage=[] (at pp.c:21831)
            TypeDecl: declname='crc', quals=[] (at pp.c:21831)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:21831)
            TypeDecl: declname='addr', quals=[] (at pp.c:21831)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21831)
            TypeDecl: declname='len', quals=[] (at pp.c:21831)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21831)
            TypeDecl: declname='error', quals=[] (at pp.c:21831)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__Spi__computeCrcDone', quals=[] (at pp.c:21831)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21831)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__Spi__computeCrcDone' (at pp.c:21833)
        ExprList:  (at pp.c:21833)
          ID: name='crc' (at pp.c:21833)
          ID: name='addr' (at pp.c:21833)
          ID: name='len' (at pp.c:21833)
          ID: name='error' (at pp.c:21833)
  FuncDef:  (at pp.c:21838)
    Decl: name='Stm25pSectorP__Spi__readDone', quals=[], storage=['inline', 'static'] (at pp.c:21838)
      FuncDecl: quals=None (at pp.c:21838)
        ParamList:  (at pp.c:21838)
          Decl: name='addr', quals=[], storage=[] (at pp.c:21838)
            TypeDecl: declname='addr', quals=[] (at pp.c:21838)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:21838)
            PtrDecl: quals=[] (at pp.c:21838)
              TypeDecl: declname='buf', quals=[] (at pp.c:21838)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21839)
            TypeDecl: declname='len', quals=[] (at pp.c:21839)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21839)
            TypeDecl: declname='error', quals=[] (at pp.c:21839)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Spi__readDone', quals=[] (at pp.c:21838)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21841)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__signalDone' (at pp.c:21842)
        ExprList:  (at pp.c:21842)
          ID: name='error' (at pp.c:21842)
  FuncDef:  (at pp.c:21846)
    Decl: name='Stm25pSpiP__Spi__readDone', quals=[], storage=['static', 'inline'] (at pp.c:21846)
      FuncDecl: quals=None (at pp.c:21846)
        ParamList:  (at pp.c:21846)
          Decl: name='addr', quals=[], storage=[] (at pp.c:21846)
            TypeDecl: declname='addr', quals=[] (at pp.c:21846)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:21846)
            PtrDecl: quals=[] (at pp.c:21846)
              TypeDecl: declname='buf', quals=[] (at pp.c:21846)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21846)
            TypeDecl: declname='len', quals=[] (at pp.c:21846)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21846)
            TypeDecl: declname='error', quals=[] (at pp.c:21846)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__Spi__readDone', quals=[] (at pp.c:21846)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21846)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__Spi__readDone' (at pp.c:21848)
        ExprList:  (at pp.c:21848)
          ID: name='addr' (at pp.c:21848)
          ID: name='buf' (at pp.c:21848)
          ID: name='len' (at pp.c:21848)
          ID: name='error' (at pp.c:21848)
  FuncDef:  (at pp.c:21853)
    Decl: name='Stm25pSectorP__Spi__pageProgram', quals=[], storage=['static', 'inline'] (at pp.c:21853)
      FuncDecl: quals=None (at pp.c:21853)
        ParamList:  (at pp.c:21853)
          Decl: name='addr', quals=[], storage=[] (at pp.c:21853)
            TypeDecl: declname='addr', quals=[] (at pp.c:21853)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:21853)
            PtrDecl: quals=[] (at pp.c:21853)
              TypeDecl: declname='buf', quals=[] (at pp.c:21853)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21853)
            TypeDecl: declname='len', quals=[] (at pp.c:21853)
              IdentifierType: names=['stm25p_len_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Spi__pageProgram', quals=[] (at pp.c:21853)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21853)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21855)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21855)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21859)
        ID: name='__nesc_result' (at pp.c:21859)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__Spi__pageProgram' (at pp.c:21859)
          ExprList:  (at pp.c:21859)
            ID: name='addr' (at pp.c:21859)
            ID: name='buf' (at pp.c:21859)
            ID: name='len' (at pp.c:21859)
      Return:  (at pp.c:21863)
        ID: name='__nesc_result' (at pp.c:21863)
  FuncDef:  (at pp.c:21868)
    Decl: name='Stm25pSectorP__Spi__pageProgramDone', quals=[], storage=['inline', 'static'] (at pp.c:21868)
      FuncDecl: quals=None (at pp.c:21868)
        ParamList:  (at pp.c:21868)
          Decl: name='addr', quals=[], storage=[] (at pp.c:21868)
            TypeDecl: declname='addr', quals=[] (at pp.c:21868)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:21868)
            PtrDecl: quals=[] (at pp.c:21868)
              TypeDecl: declname='buf', quals=[] (at pp.c:21868)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21869)
            TypeDecl: declname='len', quals=[] (at pp.c:21869)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21869)
            TypeDecl: declname='error', quals=[] (at pp.c:21869)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Spi__pageProgramDone', quals=[] (at pp.c:21868)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21871)
      Assignment: op='+=' (at pp.c:21872)
        ID: name='addr' (at pp.c:21872)
        ID: name='len' (at pp.c:21872)
      Assignment: op='+=' (at pp.c:21873)
        ID: name='buf' (at pp.c:21873)
        ID: name='len' (at pp.c:21873)
      Assignment: op='-=' (at pp.c:21874)
        ID: name='Stm25pSectorP__m_cur_len' (at pp.c:21874)
        ID: name='len' (at pp.c:21874)
      If:  (at pp.c:21875)
        UnaryOp: op='!' (at pp.c:21875)
          ID: name='Stm25pSectorP__m_cur_len' (at pp.c:21875)
        Compound:  (at pp.c:21875)
          FuncCall:  (at None)
            ID: name='Stm25pSectorP__signalDone' (at pp.c:21876)
            ExprList:  (at pp.c:21876)
              ID: name='SUCCESS' (at pp.c:21876)
        Compound:  (at pp.c:21878)
          FuncCall:  (at None)
            ID: name='Stm25pSectorP__Spi__pageProgram' (at pp.c:21880)
            ExprList:  (at pp.c:21880)
              ID: name='addr' (at pp.c:21880)
              ID: name='buf' (at pp.c:21880)
              FuncCall:  (at None)
                ID: name='Stm25pSectorP__calcWriteLen' (at pp.c:21880)
                ExprList:  (at pp.c:21880)
                  ID: name='addr' (at pp.c:21880)
  FuncDef:  (at pp.c:21885)
    Decl: name='Stm25pSpiP__Spi__pageProgramDone', quals=[], storage=['static', 'inline'] (at pp.c:21885)
      FuncDecl: quals=None (at pp.c:21885)
        ParamList:  (at pp.c:21885)
          Decl: name='addr', quals=[], storage=[] (at pp.c:21885)
            TypeDecl: declname='addr', quals=[] (at pp.c:21885)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:21885)
            PtrDecl: quals=[] (at pp.c:21885)
              TypeDecl: declname='buf', quals=[] (at pp.c:21885)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21885)
            TypeDecl: declname='len', quals=[] (at pp.c:21885)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21885)
            TypeDecl: declname='error', quals=[] (at pp.c:21885)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__Spi__pageProgramDone', quals=[] (at pp.c:21885)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21885)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__Spi__pageProgramDone' (at pp.c:21887)
        ExprList:  (at pp.c:21887)
          ID: name='addr' (at pp.c:21887)
          ID: name='buf' (at pp.c:21887)
          ID: name='len' (at pp.c:21887)
          ID: name='error' (at pp.c:21887)
  FuncDef:  (at pp.c:21892)
    Decl: name='Stm25pSectorP__Spi__sectorErase', quals=[], storage=['static', 'inline'] (at pp.c:21892)
      FuncDecl: quals=None (at pp.c:21892)
        ParamList:  (at pp.c:21892)
          Decl: name='sector', quals=[], storage=[] (at pp.c:21892)
            TypeDecl: declname='sector', quals=[] (at pp.c:21892)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Spi__sectorErase', quals=[] (at pp.c:21892)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:21892)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:21894)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:21894)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:21898)
        ID: name='__nesc_result' (at pp.c:21898)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__Spi__sectorErase' (at pp.c:21898)
          ExprList:  (at pp.c:21898)
            ID: name='sector' (at pp.c:21898)
      Return:  (at pp.c:21902)
        ID: name='__nesc_result' (at pp.c:21902)
  FuncDef:  (at pp.c:21907)
    Decl: name='Stm25pSectorP__Spi__sectorEraseDone', quals=[], storage=['inline', 'static'] (at pp.c:21907)
      FuncDecl: quals=None (at pp.c:21907)
        ParamList:  (at pp.c:21907)
          Decl: name='sector', quals=[], storage=[] (at pp.c:21907)
            TypeDecl: declname='sector', quals=[] (at pp.c:21907)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21907)
            TypeDecl: declname='error', quals=[] (at pp.c:21907)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Spi__sectorEraseDone', quals=[] (at pp.c:21907)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21909)
      If:  (at pp.c:21910)
        BinaryOp: op='<' (at pp.c:21910)
          UnaryOp: op='++' (at pp.c:21910)
            ID: name='Stm25pSectorP__m_cur_len' (at pp.c:21910)
          ID: name='Stm25pSectorP__m_len' (at pp.c:21910)
        Compound:  (at pp.c:21910)
          FuncCall:  (at None)
            ID: name='Stm25pSectorP__Spi__sectorErase' (at pp.c:21911)
            ExprList:  (at pp.c:21911)
              BinaryOp: op='+' (at pp.c:21911)
                BinaryOp: op='+' (at pp.c:21911)
                  StructRef: type='.' (at pp.c:21911)
                    ArrayRef:  (at pp.c:21911)
                      ID: name='STM25P_VMAP' (at pp.c:21911)
                      FuncCall:  (at None)
                        ID: name='Stm25pSectorP__getVolumeId' (at pp.c:21911)
                        ExprList:  (at pp.c:21911)
                          ID: name='Stm25pSectorP__m_client' (at pp.c:21911)
                    ID: name='base' (at pp.c:21911)
                  ID: name='Stm25pSectorP__m_addr' (at pp.c:21911)
                ID: name='Stm25pSectorP__m_cur_len' (at pp.c:21912)
        Compound:  (at pp.c:21914)
          FuncCall:  (at None)
            ID: name='Stm25pSectorP__signalDone' (at pp.c:21916)
            ExprList:  (at pp.c:21916)
              ID: name='error' (at pp.c:21916)
  FuncDef:  (at pp.c:21921)
    Decl: name='Stm25pSpiP__Spi__sectorEraseDone', quals=[], storage=['static', 'inline'] (at pp.c:21921)
      FuncDecl: quals=None (at pp.c:21921)
        ParamList:  (at pp.c:21921)
          Decl: name='sector', quals=[], storage=[] (at pp.c:21921)
            TypeDecl: declname='sector', quals=[] (at pp.c:21921)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21921)
            TypeDecl: declname='error', quals=[] (at pp.c:21921)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__Spi__sectorEraseDone', quals=[] (at pp.c:21921)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21921)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__Spi__sectorEraseDone' (at pp.c:21923)
        ExprList:  (at pp.c:21923)
          ID: name='sector' (at pp.c:21923)
          ID: name='error' (at pp.c:21923)
  FuncDef:  (at pp.c:21928)
    Decl: name='Stm25pSectorP__Spi__bulkEraseDone', quals=[], storage=['inline', 'static'] (at pp.c:21928)
      FuncDecl: quals=None (at pp.c:21928)
        ParamList:  (at pp.c:21928)
          Decl: name='error', quals=[], storage=[] (at pp.c:21928)
            TypeDecl: declname='error', quals=[] (at pp.c:21928)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Spi__bulkEraseDone', quals=[] (at pp.c:21928)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21930)
  FuncDef:  (at pp.c:21934)
    Decl: name='Stm25pSpiP__Spi__bulkEraseDone', quals=[], storage=['static', 'inline'] (at pp.c:21934)
      FuncDecl: quals=None (at pp.c:21934)
        ParamList:  (at pp.c:21934)
          Decl: name='error', quals=[], storage=[] (at pp.c:21934)
            TypeDecl: declname='error', quals=[] (at pp.c:21934)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__Spi__bulkEraseDone', quals=[] (at pp.c:21934)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21934)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__Spi__bulkEraseDone' (at pp.c:21936)
        ExprList:  (at pp.c:21936)
          ID: name='error' (at pp.c:21936)
  FuncDef:  (at pp.c:21941)
    Decl: name='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[], storage=['inline', 'static'] (at pp.c:21941)
      FuncDecl: quals=None (at pp.c:21941)
        ParamList:  (at pp.c:21941)
          Decl: name='id', quals=[], storage=[] (at pp.c:21941)
            TypeDecl: declname='id', quals=[] (at pp.c:21941)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:21941)
            PtrDecl: quals=[] (at pp.c:21941)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:21941)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:21941)
            PtrDecl: quals=[] (at pp.c:21941)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:21941)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21941)
            TypeDecl: declname='len', quals=[] (at pp.c:21941)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21941)
            TypeDecl: declname='error', quals=[] (at pp.c:21941)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone', quals=[] (at pp.c:21941)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21943)
  FuncDef:  (at pp.c:21947)
    Decl: name='Msp430SpiNoDmaP__0__SpiPacket__sendDone', quals=[], storage=['static', 'inline'] (at pp.c:21947)
      FuncDecl: quals=None (at pp.c:21947)
        ParamList:  (at pp.c:21947)
          Decl: name='arg_0x101c3b158', quals=[], storage=[] (at pp.c:21947)
            TypeDecl: declname='arg_0x101c3b158', quals=[] (at pp.c:21947)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='txBuf', quals=[], storage=[] (at pp.c:21947)
            PtrDecl: quals=[] (at pp.c:21947)
              TypeDecl: declname='txBuf', quals=[] (at pp.c:21947)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rxBuf', quals=[], storage=[] (at pp.c:21947)
            PtrDecl: quals=[] (at pp.c:21947)
              TypeDecl: declname='rxBuf', quals=[] (at pp.c:21947)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:21947)
            TypeDecl: declname='len', quals=[] (at pp.c:21947)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21947)
            TypeDecl: declname='error', quals=[] (at pp.c:21947)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__sendDone', quals=[] (at pp.c:21947)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21947)
      Switch:  (at pp.c:21949)
        ID: name='arg_0x101c3b158' (at pp.c:21949)
        Compound:  (at pp.c:21949)
          Case:  (at pp.c:21951)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:21951)
            FuncCall:  (at None)
              ID: name='Stm25pSpiP__SpiPacket__sendDone' (at pp.c:21953)
              ExprList:  (at pp.c:21953)
                ID: name='txBuf' (at pp.c:21953)
                ID: name='rxBuf' (at pp.c:21953)
                ID: name='len' (at pp.c:21953)
                ID: name='error' (at pp.c:21953)
          Break:  (at pp.c:21955)
          Case:  (at pp.c:21957)
            ID: name='Msp430Spi0C__1__CLIENT_ID' (at pp.c:21957)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__SpiPacket__sendDone' (at pp.c:21959)
              ExprList:  (at pp.c:21959)
                ID: name='txBuf' (at pp.c:21959)
                ID: name='rxBuf' (at pp.c:21959)
                ID: name='len' (at pp.c:21959)
                ID: name='error' (at pp.c:21959)
          Break:  (at pp.c:21961)
          Default:  (at pp.c:21963)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__SpiPacket__default__sendDone' (at pp.c:21965)
              ExprList:  (at pp.c:21965)
                ID: name='arg_0x101c3b158' (at pp.c:21965)
                ID: name='txBuf' (at pp.c:21965)
                ID: name='rxBuf' (at pp.c:21965)
                ID: name='len' (at pp.c:21965)
                ID: name='error' (at pp.c:21965)
          Break:  (at pp.c:21967)
  FuncDef:  (at pp.c:21974)
    Decl: name='Msp430SpiNoDmaP__0__signalDone', quals=[], storage=['inline', 'static'] (at pp.c:21974)
      FuncDecl: quals=None (at pp.c:21974)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone', quals=[] (at pp.c:21974)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21976)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__SpiPacket__sendDone' (at pp.c:21977)
        ExprList:  (at pp.c:21977)
          ID: name='Msp430SpiNoDmaP__0__m_client' (at pp.c:21977)
          ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:21977)
          ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:21977)
          ID: name='Msp430SpiNoDmaP__0__m_len' (at pp.c:21977)
          ID: name='SUCCESS' (at pp.c:21978)
  FuncDef:  (at pp.c:21982)
    Decl: name='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:21982)
      FuncDecl: quals=None (at pp.c:21982)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__signalDone_task__runTask', quals=[] (at pp.c:21982)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21984)
      Compound:  (at pp.c:21985)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:21985)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:21985)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:21985)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__signalDone' (at pp.c:21987)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:21989)
          ExprList:  (at pp.c:21989)
            ID: name='__nesc_atomic' (at pp.c:21989)
  FuncDef:  (at pp.c:21993)
    Decl: name='CC2420TransmitP__TXFIFO__readDone', quals=[], storage=['inline', 'static'] (at pp.c:21993)
      FuncDecl: quals=None (at pp.c:21993)
        ParamList:  (at pp.c:21993)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:21993)
            PtrDecl: quals=[] (at pp.c:21993)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:21993)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_len', quals=[], storage=[] (at pp.c:21993)
            TypeDecl: declname='tx_len', quals=[] (at pp.c:21993)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:21994)
            TypeDecl: declname='error', quals=[] (at pp.c:21994)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__TXFIFO__readDone', quals=[] (at pp.c:21993)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:21996)
  FuncDef:  (at pp.c:22000)
    Decl: name='CC2420ReceiveP__SpiResource__release', quals=[], storage=['static', 'inline'] (at pp.c:22000)
      FuncDecl: quals=None (at pp.c:22000)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SpiResource__release', quals=[] (at pp.c:22000)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22000)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22002)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22002)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22006)
        ID: name='__nesc_result' (at pp.c:22006)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Resource__release' (at pp.c:22006)
          ExprList:  (at pp.c:22006)
            ID: name='CC2420SpiC__4__CLIENT_ID' (at pp.c:22006)
      Return:  (at pp.c:22010)
        ID: name='__nesc_result' (at pp.c:22010)
  FuncDef:  (at pp.c:22015)
    Decl: name='CC2420ReceiveP__CSN__set', quals=[], storage=['static', 'inline'] (at pp.c:22015)
      FuncDecl: quals=None (at pp.c:22015)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CSN__set', quals=[] (at pp.c:22015)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22015)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__GeneralIO__set' (at pp.c:22017)
  FuncDef:  (at pp.c:22022)
    Decl: name='CC2420ReceiveP__receiveDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:22022)
      FuncDecl: quals=None (at pp.c:22022)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__receiveDone_task__postTask', quals=[] (at pp.c:22022)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22022)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22024)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22024)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22028)
        ID: name='__nesc_result' (at pp.c:22028)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:22028)
          ExprList:  (at pp.c:22028)
            ID: name='CC2420ReceiveP__receiveDone_task' (at pp.c:22028)
      Return:  (at pp.c:22032)
        ID: name='__nesc_result' (at pp.c:22032)
  FuncDef:  (at pp.c:22037)
    Decl: name='CC2420TransmitP__CC2420PacketBody__getMetadata', quals=[], storage=['static', 'inline'] (at pp.c:22037)
      FuncDecl: quals=None (at pp.c:22037)
        ParamList:  (at pp.c:22037)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22037)
            PtrDecl: quals=[] (at pp.c:22037)
              TypeDecl: declname='msg', quals=[] (at pp.c:22037)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:22037)
          TypeDecl: declname='CC2420TransmitP__CC2420PacketBody__getMetadata', quals=[] (at pp.c:22037)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
    Compound:  (at pp.c:22037)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22039)
        PtrDecl: quals=[] (at pp.c:22039)
          TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22039)
            Struct: name='cc2420_metadata_t', packed=False (at pp.c:22039)
      Assignment: op='=' (at pp.c:22043)
        ID: name='__nesc_result' (at pp.c:22043)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:22043)
          ExprList:  (at pp.c:22043)
            ID: name='msg' (at pp.c:22043)
      Return:  (at pp.c:22047)
        ID: name='__nesc_result' (at pp.c:22047)
  FuncDef:  (at pp.c:22052)
    Decl: name='CC2420TransmitP__CC2420Receive__receive', quals=[], storage=['inline', 'static'] (at pp.c:22052)
      FuncDecl: quals=None (at pp.c:22052)
        ParamList:  (at pp.c:22052)
          Decl: name='type', quals=[], storage=[] (at pp.c:22052)
            TypeDecl: declname='type', quals=[] (at pp.c:22052)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='ack_msg', quals=[], storage=[] (at pp.c:22052)
            PtrDecl: quals=[] (at pp.c:22052)
              TypeDecl: declname='ack_msg', quals=[] (at pp.c:22052)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__CC2420Receive__receive', quals=[] (at pp.c:22052)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22054)
      Decl: name='ack_header', quals=[], storage=[] (at pp.c:22055)
        PtrDecl: quals=[] (at pp.c:22055)
          TypeDecl: declname='ack_header', quals=[] (at pp.c:22055)
            IdentifierType: names=['cc2420_header_t'] (at None)
      Decl: name='msg_header', quals=[], storage=[] (at pp.c:22056)
        PtrDecl: quals=[] (at pp.c:22056)
          TypeDecl: declname='msg_header', quals=[] (at pp.c:22056)
            IdentifierType: names=['cc2420_header_t'] (at None)
      Decl: name='msg_metadata', quals=[], storage=[] (at pp.c:22057)
        PtrDecl: quals=[] (at pp.c:22057)
          TypeDecl: declname='msg_metadata', quals=[] (at pp.c:22057)
            IdentifierType: names=['cc2420_metadata_t'] (at None)
      Decl: name='ack_buf', quals=[], storage=[] (at pp.c:22058)
        PtrDecl: quals=[] (at pp.c:22058)
          TypeDecl: declname='ack_buf', quals=[] (at pp.c:22058)
            IdentifierType: names=['uint8_t'] (at None)
      Decl: name='length', quals=[], storage=[] (at pp.c:22059)
        TypeDecl: declname='length', quals=[] (at pp.c:22059)
          IdentifierType: names=['uint8_t'] (at None)
      If:  (at pp.c:22061)
        BinaryOp: op='&&' (at pp.c:22061)
          BinaryOp: op='==' (at pp.c:22061)
            ID: name='type' (at pp.c:22061)
            ID: name='IEEE154_TYPE_ACK' (at pp.c:22061)
          ID: name='CC2420TransmitP__m_msg' (at pp.c:22061)
        Compound:  (at pp.c:22061)
          Assignment: op='=' (at pp.c:22062)
            ID: name='ack_header' (at pp.c:22062)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CC2420PacketBody__getHeader' (at pp.c:22062)
              ExprList:  (at pp.c:22062)
                ID: name='ack_msg' (at pp.c:22062)
          Assignment: op='=' (at pp.c:22063)
            ID: name='msg_header' (at pp.c:22063)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CC2420PacketBody__getHeader' (at pp.c:22063)
              ExprList:  (at pp.c:22063)
                ID: name='CC2420TransmitP__m_msg' (at pp.c:22063)
          If:  (at pp.c:22065)
            BinaryOp: op='&&' (at pp.c:22065)
              BinaryOp: op='==' (at pp.c:22065)
                ID: name='CC2420TransmitP__m_state' (at pp.c:22065)
                ID: name='CC2420TransmitP__S_ACK_WAIT' (at pp.c:22065)
              BinaryOp: op='==' (at None)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint8' (at pp.c:22065)
                  ExprList:  (at pp.c:22065)
                    StructRef: type='.' (at pp.c:22065)
                      StructRef: type='->' (at pp.c:22065)
                        ID: name='msg_header' (at pp.c:22065)
                        ID: name='dsn' (at pp.c:22065)
                      ID: name='nxdata' (at pp.c:22065)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint8' (at pp.c:22065)
                  ExprList:  (at pp.c:22065)
                    StructRef: type='.' (at pp.c:22065)
                      StructRef: type='->' (at pp.c:22065)
                        ID: name='ack_header' (at pp.c:22065)
                        ID: name='dsn' (at pp.c:22065)
                      ID: name='nxdata' (at pp.c:22065)
            Compound:  (at pp.c:22065)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__BackoffTimer__stop' (at pp.c:22066)
              Assignment: op='=' (at pp.c:22068)
                ID: name='msg_metadata' (at pp.c:22068)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CC2420PacketBody__getMetadata' (at pp.c:22068)
                  ExprList:  (at pp.c:22068)
                    ID: name='CC2420TransmitP__m_msg' (at pp.c:22068)
              Assignment: op='=' (at pp.c:22069)
                ID: name='ack_buf' (at pp.c:22069)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:22069)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['uint8_t'] (at None)
                  ID: name='ack_header' (at pp.c:22069)
              Assignment: op='=' (at pp.c:22070)
                ID: name='length' (at pp.c:22070)
                FuncCall:  (at None)
                  ID: name='__nesc_ntoh_leuint8' (at pp.c:22070)
                  ExprList:  (at pp.c:22070)
                    StructRef: type='.' (at pp.c:22070)
                      StructRef: type='->' (at pp.c:22070)
                        ID: name='ack_header' (at pp.c:22070)
                        ID: name='length' (at pp.c:22070)
                      ID: name='nxdata' (at pp.c:22070)
              FuncCall:  (at None)
                ID: name='__nesc_hton_int8' (at pp.c:22072)
                ExprList:  (at pp.c:22072)
                  StructRef: type='.' (at pp.c:22072)
                    StructRef: type='->' (at pp.c:22072)
                      ID: name='msg_metadata' (at pp.c:22072)
                      ID: name='ack' (at pp.c:22072)
                    ID: name='nxdata' (at pp.c:22072)
                  ID: name='TRUE' (at pp.c:22072)
              FuncCall:  (at None)
                ID: name='__nesc_hton_uint8' (at pp.c:22073)
                ExprList:  (at pp.c:22073)
                  StructRef: type='.' (at pp.c:22073)
                    StructRef: type='->' (at pp.c:22073)
                      ID: name='msg_metadata' (at pp.c:22073)
                      ID: name='rssi' (at pp.c:22073)
                    ID: name='nxdata' (at pp.c:22073)
                  ArrayRef:  (at pp.c:22073)
                    ID: name='ack_buf' (at pp.c:22073)
                    BinaryOp: op='-' (at pp.c:22073)
                      ID: name='length' (at pp.c:22073)
                      Constant: type='int', value='1' (at pp.c:22073)
              FuncCall:  (at None)
                ID: name='__nesc_hton_uint8' (at pp.c:22074)
                ExprList:  (at pp.c:22074)
                  StructRef: type='.' (at pp.c:22074)
                    StructRef: type='->' (at pp.c:22074)
                      ID: name='msg_metadata' (at pp.c:22074)
                      ID: name='lqi' (at pp.c:22074)
                    ID: name='nxdata' (at pp.c:22074)
                  BinaryOp: op='&' (at pp.c:22074)
                    ArrayRef:  (at pp.c:22074)
                      ID: name='ack_buf' (at pp.c:22074)
                      ID: name='length' (at pp.c:22074)
                    Constant: type='int', value='0x7f' (at pp.c:22074)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__signalDone' (at pp.c:22075)
                ExprList:  (at pp.c:22075)
                  ID: name='SUCCESS' (at pp.c:22075)
  FuncDef:  (at pp.c:22081)
    Decl: name='CC2420ReceiveP__CC2420Receive__receive', quals=[], storage=['static', 'inline'] (at pp.c:22081)
      FuncDecl: quals=None (at pp.c:22081)
        ParamList:  (at pp.c:22081)
          Decl: name='type', quals=[], storage=[] (at pp.c:22081)
            TypeDecl: declname='type', quals=[] (at pp.c:22081)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='message', quals=[], storage=[] (at pp.c:22081)
            PtrDecl: quals=[] (at pp.c:22081)
              TypeDecl: declname='message', quals=[] (at pp.c:22081)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Receive__receive', quals=[] (at pp.c:22081)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22081)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CC2420Receive__receive' (at pp.c:22083)
        ExprList:  (at pp.c:22083)
          ID: name='type' (at pp.c:22083)
          ID: name='message' (at pp.c:22083)
  FuncDef:  (at pp.c:22088)
    Decl: name='CC2420ReceiveP__PacketTimeStamp__clear', quals=[], storage=['static', 'inline'] (at pp.c:22088)
      FuncDecl: quals=None (at pp.c:22088)
        ParamList:  (at pp.c:22088)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22088)
            PtrDecl: quals=[] (at pp.c:22088)
              TypeDecl: declname='msg', quals=[] (at pp.c:22088)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__clear', quals=[] (at pp.c:22088)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22088)
      FuncCall:  (at None)
        ID: name='CC2420PacketP__PacketTimeStamp32khz__clear' (at pp.c:22090)
        ExprList:  (at pp.c:22090)
          ID: name='msg' (at pp.c:22090)
  FuncDef:  (at pp.c:22102)
    Decl: name='CC2420ReceiveP__PacketTimeStamp__set', quals=[], storage=['static', 'inline'] (at pp.c:22102)
      FuncDecl: quals=None (at pp.c:22102)
        ParamList:  (at pp.c:22102)
          Decl: name='msg', quals=[], storage=[] (at pp.c:22102)
            PtrDecl: quals=[] (at pp.c:22102)
              TypeDecl: declname='msg', quals=[] (at pp.c:22102)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='value', quals=[], storage=[] (at pp.c:22102)
            TypeDecl: declname='value', quals=[] (at pp.c:22102)
              IdentifierType: names=['CC2420ReceiveP__PacketTimeStamp__size_type'] (at None)
        TypeDecl: declname='CC2420ReceiveP__PacketTimeStamp__set', quals=[] (at pp.c:22102)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22102)
      FuncCall:  (at None)
        ID: name='CC2420PacketP__PacketTimeStamp32khz__set' (at pp.c:22104)
        ExprList:  (at pp.c:22104)
          ID: name='msg' (at pp.c:22104)
          ID: name='value' (at pp.c:22104)
  FuncDef:  (at pp.c:22109)
    Decl: name='HplMsp430GeneralIOP__0__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:22109)
      FuncDecl: quals=None (at pp.c:22109)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__0__IO__getRaw', quals=[] (at pp.c:22109)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:22111)
      Return:  (at pp.c:22113)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:22113)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='32U' (at pp.c:22113)
          BinaryOp: op='<<' (at pp.c:22113)
            Constant: type='int', value='0x01' (at pp.c:22113)
            Constant: type='int', value='0' (at pp.c:22113)
  FuncDef:  (at pp.c:22117)
    Decl: name='HplMsp430GeneralIOP__0__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:22117)
      FuncDecl: quals=None (at pp.c:22117)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__0__IO__get', quals=[] (at pp.c:22117)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22119)
      Return:  (at pp.c:22121)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='HplMsp430GeneralIOP__0__IO__getRaw' (at pp.c:22121)
          Constant: type='int', value='0' (at pp.c:22121)
  FuncDef:  (at pp.c:22125)
    Decl: name='Msp430GpioC__8__HplGeneralIO__get', quals=[], storage=['static', 'inline'] (at pp.c:22125)
      FuncDecl: quals=None (at pp.c:22125)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__8__HplGeneralIO__get', quals=[] (at pp.c:22125)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22125)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22127)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22127)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22131)
        ID: name='__nesc_result' (at pp.c:22131)
        FuncCall:  (at None)
          ID: name='HplMsp430GeneralIOP__0__IO__get' (at pp.c:22131)
      Return:  (at pp.c:22135)
        ID: name='__nesc_result' (at pp.c:22135)
  FuncDef:  (at pp.c:22140)
    Decl: name='Msp430GpioC__8__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:22140)
      FuncDecl: quals=None (at pp.c:22140)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__8__GeneralIO__get', quals=[] (at pp.c:22140)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22142)
      Return:  (at pp.c:22144)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__8__HplGeneralIO__get' (at pp.c:22144)
  FuncDef:  (at pp.c:22148)
    Decl: name='CC2420ReceiveP__FIFOP__get', quals=[], storage=['static', 'inline'] (at pp.c:22148)
      FuncDecl: quals=None (at pp.c:22148)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__FIFOP__get', quals=[] (at pp.c:22148)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22148)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22150)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22150)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22154)
        ID: name='__nesc_result' (at pp.c:22154)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__8__GeneralIO__get' (at pp.c:22154)
      Return:  (at pp.c:22158)
        ID: name='__nesc_result' (at pp.c:22158)
  FuncDef:  (at pp.c:22163)
    Decl: name='HplMsp430GeneralIOP__3__IO__getRaw', quals=[], storage=['inline', 'static'] (at pp.c:22163)
      FuncDecl: quals=None (at pp.c:22163)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__3__IO__getRaw', quals=[] (at pp.c:22163)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:22165)
      Return:  (at pp.c:22167)
        BinaryOp: op='&' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:22167)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='32U' (at pp.c:22167)
          BinaryOp: op='<<' (at pp.c:22167)
            Constant: type='int', value='0x01' (at pp.c:22167)
            Constant: type='int', value='3' (at pp.c:22167)
  FuncDef:  (at pp.c:22171)
    Decl: name='HplMsp430GeneralIOP__3__IO__get', quals=[], storage=['inline', 'static'] (at pp.c:22171)
      FuncDecl: quals=None (at pp.c:22171)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__3__IO__get', quals=[] (at pp.c:22171)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22173)
      Return:  (at pp.c:22175)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='HplMsp430GeneralIOP__3__IO__getRaw' (at pp.c:22175)
          Constant: type='int', value='0' (at pp.c:22175)
  FuncDef:  (at pp.c:22179)
    Decl: name='Msp430GpioC__7__HplGeneralIO__get', quals=[], storage=['static', 'inline'] (at pp.c:22179)
      FuncDecl: quals=None (at pp.c:22179)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__7__HplGeneralIO__get', quals=[] (at pp.c:22179)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22179)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22181)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22181)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22185)
        ID: name='__nesc_result' (at pp.c:22185)
        FuncCall:  (at None)
          ID: name='HplMsp430GeneralIOP__3__IO__get' (at pp.c:22185)
      Return:  (at pp.c:22189)
        ID: name='__nesc_result' (at pp.c:22189)
  FuncDef:  (at pp.c:22194)
    Decl: name='Msp430GpioC__7__GeneralIO__get', quals=[], storage=['inline', 'static'] (at pp.c:22194)
      FuncDecl: quals=None (at pp.c:22194)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__7__GeneralIO__get', quals=[] (at pp.c:22194)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22196)
      Return:  (at pp.c:22198)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__7__HplGeneralIO__get' (at pp.c:22198)
  FuncDef:  (at pp.c:22202)
    Decl: name='CC2420ReceiveP__FIFO__get', quals=[], storage=['static', 'inline'] (at pp.c:22202)
      FuncDecl: quals=None (at pp.c:22202)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__FIFO__get', quals=[] (at pp.c:22202)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22202)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22204)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22204)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22208)
        ID: name='__nesc_result' (at pp.c:22208)
        FuncCall:  (at None)
          ID: name='Msp430GpioC__7__GeneralIO__get' (at pp.c:22208)
      Return:  (at pp.c:22212)
        ID: name='__nesc_result' (at pp.c:22212)
  FuncDef:  (at pp.c:22217)
    Decl: name='CC2420SpiP__Fifo__continueRead', quals=[], storage=['inline', 'static'] (at pp.c:22217)
      FuncDecl: quals=None (at pp.c:22217)
        ParamList:  (at pp.c:22217)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22217)
            TypeDecl: declname='addr', quals=[] (at pp.c:22217)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:22217)
            PtrDecl: quals=[] (at pp.c:22217)
              TypeDecl: declname='data', quals=[] (at pp.c:22217)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22218)
            TypeDecl: declname='len', quals=[] (at pp.c:22218)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__continueRead', quals=[] (at pp.c:22217)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22220)
      Return:  (at pp.c:22221)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiPacket__send' (at pp.c:22221)
          ExprList:  (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:22221)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['void'] (at None)
              Constant: type='int', value='0' (at pp.c:22221)
            ID: name='data' (at pp.c:22221)
            ID: name='len' (at pp.c:22221)
  FuncDef:  (at pp.c:22225)
    Decl: name='CC2420ReceiveP__RXFIFO__continueRead', quals=[], storage=['static', 'inline'] (at pp.c:22225)
      FuncDecl: quals=None (at pp.c:22225)
        ParamList:  (at pp.c:22225)
          Decl: name='data', quals=[], storage=[] (at pp.c:22225)
            PtrDecl: quals=[] (at pp.c:22225)
              TypeDecl: declname='data', quals=[] (at pp.c:22225)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:22225)
            TypeDecl: declname='length', quals=[] (at pp.c:22225)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__RXFIFO__continueRead', quals=[] (at pp.c:22225)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22225)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22227)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22227)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22231)
        ID: name='__nesc_result' (at pp.c:22231)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Fifo__continueRead' (at pp.c:22231)
          ExprList:  (at pp.c:22231)
            ID: name='CC2420_RXFIFO' (at pp.c:22231)
            ID: name='data' (at pp.c:22231)
            ID: name='length' (at pp.c:22231)
      Return:  (at pp.c:22235)
        ID: name='__nesc_result' (at pp.c:22235)
  FuncDef:  (at pp.c:22240)
    Decl: name='CC2420ReceiveP__RXFIFO__beginRead', quals=[], storage=['static', 'inline'] (at pp.c:22240)
      FuncDecl: quals=None (at pp.c:22240)
        ParamList:  (at pp.c:22240)
          Decl: name='data', quals=[], storage=[] (at pp.c:22240)
            PtrDecl: quals=[] (at pp.c:22240)
              TypeDecl: declname='data', quals=[] (at pp.c:22240)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:22240)
            TypeDecl: declname='length', quals=[] (at pp.c:22240)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__RXFIFO__beginRead', quals=[] (at pp.c:22240)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:22240)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22242)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22242)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22246)
        ID: name='__nesc_result' (at pp.c:22246)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Fifo__beginRead' (at pp.c:22246)
          ExprList:  (at pp.c:22246)
            ID: name='CC2420_RXFIFO' (at pp.c:22246)
            ID: name='data' (at pp.c:22246)
            ID: name='length' (at pp.c:22246)
      Return:  (at pp.c:22250)
        ID: name='__nesc_result' (at pp.c:22250)
  FuncDef:  (at pp.c:22255)
    Decl: name='CC2420ReceiveP__CSN__clr', quals=[], storage=['static', 'inline'] (at pp.c:22255)
      FuncDecl: quals=None (at pp.c:22255)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CSN__clr', quals=[] (at pp.c:22255)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22255)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__GeneralIO__clr' (at pp.c:22257)
  FuncDef:  (at pp.c:22262)
    Decl: name='CC2420ReceiveP__SACK__strobe', quals=[], storage=['static', 'inline'] (at pp.c:22262)
      FuncDecl: quals=None (at pp.c:22262)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SACK__strobe', quals=[] (at pp.c:22262)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:22262)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22264)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22264)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22268)
        ID: name='__nesc_result' (at pp.c:22268)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:22268)
          ExprList:  (at pp.c:22268)
            ID: name='CC2420_SACK' (at pp.c:22268)
      Return:  (at pp.c:22272)
        ID: name='__nesc_result' (at pp.c:22272)
  FuncDef:  (at pp.c:22277)
    Decl: name='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[], storage=['inline', 'static'] (at pp.c:22277)
      FuncDecl: quals=None (at pp.c:22277)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__isHwAutoAckDefault', quals=[] (at pp.c:22277)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22279)
      Compound:  (at pp.c:22282)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:22283)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:22283)
            IdentifierType: names=['char', 'unsigned'] (at None)
          ID: name='CC2420ControlP__hwAutoAckDefault' (at pp.c:22285)
        Return:  (at pp.c:22288)
          ID: name='__nesc_temp' (at pp.c:22288)
  FuncDef:  (at pp.c:22293)
    Decl: name='CC2420ReceiveP__CC2420Config__isHwAutoAckDefault', quals=[], storage=['static', 'inline'] (at pp.c:22293)
      FuncDecl: quals=None (at pp.c:22293)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__isHwAutoAckDefault', quals=[] (at pp.c:22293)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22293)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22295)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22295)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22299)
        ID: name='__nesc_result' (at pp.c:22299)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__isHwAutoAckDefault' (at pp.c:22299)
      Return:  (at pp.c:22303)
        ID: name='__nesc_result' (at pp.c:22303)
  FuncDef:  (at pp.c:22308)
    Decl: name='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[], storage=['inline', 'static'] (at pp.c:22308)
      FuncDecl: quals=None (at pp.c:22308)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__isAutoAckEnabled', quals=[] (at pp.c:22308)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22310)
      Compound:  (at pp.c:22313)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:22314)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:22314)
            IdentifierType: names=['char', 'unsigned'] (at None)
          ID: name='CC2420ControlP__autoAckEnabled' (at pp.c:22316)
        Return:  (at pp.c:22319)
          ID: name='__nesc_temp' (at pp.c:22319)
  FuncDef:  (at pp.c:22324)
    Decl: name='CC2420ReceiveP__CC2420Config__isAutoAckEnabled', quals=[], storage=['static', 'inline'] (at pp.c:22324)
      FuncDecl: quals=None (at pp.c:22324)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__CC2420Config__isAutoAckEnabled', quals=[] (at pp.c:22324)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:22324)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22326)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22326)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22330)
        ID: name='__nesc_result' (at pp.c:22330)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__CC2420Config__isAutoAckEnabled' (at pp.c:22330)
      Return:  (at pp.c:22334)
        ID: name='__nesc_result' (at pp.c:22334)
  FuncDef:  (at pp.c:22339)
    Decl: name='CC2420ReceiveP__RXFIFO__readDone', quals=[], storage=['inline', 'static'] (at pp.c:22339)
      FuncDecl: quals=None (at pp.c:22339)
        ParamList:  (at pp.c:22339)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:22339)
            PtrDecl: quals=[] (at pp.c:22339)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:22339)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_len', quals=[], storage=[] (at pp.c:22339)
            TypeDecl: declname='rx_len', quals=[] (at pp.c:22339)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22340)
            TypeDecl: declname='error', quals=[] (at pp.c:22340)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__RXFIFO__readDone', quals=[] (at pp.c:22339)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22342)
      Decl: name='header', quals=[], storage=[] (at pp.c:22343)
        PtrDecl: quals=[] (at pp.c:22343)
          TypeDecl: declname='header', quals=[] (at pp.c:22343)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__CC2420PacketBody__getHeader' (at pp.c:22343)
          ExprList:  (at pp.c:22343)
            ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:22343)
      Decl: name='tmpLen', quals=[], storage=[] (at pp.c:22344)
        TypeDecl: declname='tmpLen', quals=[] (at pp.c:22344)
          IdentifierType: names=['uint8_t'] (at None)
        BinaryOp: op='-' (at pp.c:22344)
          UnaryOp: op='sizeof' (at pp.c:22344)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['message_t'] (at None)
          BinaryOp: op='-' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['size_t'] (at None)
              UnaryOp: op='&' (at None)
                StructRef: type='->' (at None)
                  Cast:  (at None)
                    Typename: quals=[] (at None)
                      PtrDecl: quals=[] (at pp.c:22344)
                        TypeDecl: declname=None, quals=[] (at None)
                          IdentifierType: names=['message_t'] (at None)
                    Constant: type='int', value='0' (at pp.c:22344)
                  ID: name='data' (at pp.c:22344)
            UnaryOp: op='sizeof' (at pp.c:22344)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['cc2420_header_t'] (at None)
      Decl: name='buf', quals=[], storage=[] (at pp.c:22345)
        PtrDecl: quals=[] (at pp.c:22345)
          TypeDecl: declname='buf', quals=[] (at pp.c:22345)
            IdentifierType: names=['uint8_t'] (at None)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:22345)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
          ID: name='header' (at pp.c:22345)
      Assignment: op='=' (at pp.c:22348)
        ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22348)
        ArrayRef:  (at pp.c:22348)
          ID: name='buf' (at pp.c:22348)
          Constant: type='int', value='0' (at pp.c:22348)
      Switch:  (at pp.c:22350)
        ID: name='CC2420ReceiveP__m_state' (at pp.c:22350)
        Compound:  (at pp.c:22350)
          Case:  (at pp.c:22352)
            ID: name='CC2420ReceiveP__S_RX_LENGTH' (at pp.c:22352)
            Assignment: op='=' (at pp.c:22353)
              ID: name='CC2420ReceiveP__m_state' (at pp.c:22353)
              ID: name='CC2420ReceiveP__S_RX_FCF' (at pp.c:22353)
          If:  (at pp.c:22357)
            BinaryOp: op='>' (at pp.c:22357)
              BinaryOp: op='+' (at pp.c:22357)
                ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22357)
                Constant: type='int', value='1' (at pp.c:22357)
              ID: name='CC2420ReceiveP__m_bytes_left' (at pp.c:22357)
            Compound:  (at pp.c:22361)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__flush' (at pp.c:22363)
            Compound:  (at pp.c:22365)
              If:  (at pp.c:22366)
                BinaryOp: op='&&' (at None)
                  UnaryOp: op='!' (at None)
                    FuncCall:  (at None)
                      ID: name='CC2420ReceiveP__FIFO__get' (at pp.c:22366)
                  UnaryOp: op='!' (at None)
                    FuncCall:  (at None)
                      ID: name='CC2420ReceiveP__FIFOP__get' (at pp.c:22366)
                Compound:  (at pp.c:22366)
                  Assignment: op='-=' (at pp.c:22367)
                    ID: name='CC2420ReceiveP__m_bytes_left' (at pp.c:22367)
                    BinaryOp: op='+' (at pp.c:22367)
                      ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22367)
                      Constant: type='int', value='1' (at pp.c:22367)
              If:  (at pp.c:22370)
                BinaryOp: op='<=' (at pp.c:22370)
                  ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22370)
                  ID: name='MAC_PACKET_SIZE' (at pp.c:22370)
                Compound:  (at pp.c:22370)
                  If:  (at pp.c:22371)
                    BinaryOp: op='>' (at pp.c:22371)
                      ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22371)
                      Constant: type='int', value='0' (at pp.c:22371)
                    Compound:  (at pp.c:22371)
                      If:  (at pp.c:22372)
                        BinaryOp: op='>' (at pp.c:22372)
                          ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22372)
                          ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:22372)
                        Compound:  (at pp.c:22372)
                          FuncCall:  (at None)
                            ID: name='CC2420ReceiveP__RXFIFO__continueRead' (at pp.c:22374)
                            ExprList:  (at pp.c:22374)
                              BinaryOp: op='+' (at pp.c:22374)
                                ID: name='buf' (at pp.c:22374)
                                Constant: type='int', value='1' (at pp.c:22374)
                              ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:22374)
                        Compound:  (at pp.c:22376)
                          Assignment: op='=' (at pp.c:22378)
                            ID: name='CC2420ReceiveP__m_state' (at pp.c:22378)
                            ID: name='CC2420ReceiveP__S_RX_PAYLOAD' (at pp.c:22378)
                          FuncCall:  (at None)
                            ID: name='CC2420ReceiveP__RXFIFO__continueRead' (at pp.c:22379)
                            ExprList:  (at pp.c:22379)
                              BinaryOp: op='+' (at pp.c:22379)
                                ID: name='buf' (at pp.c:22379)
                                Constant: type='int', value='1' (at pp.c:22379)
                              ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22379)
                    Compound:  (at pp.c:22382)
                      Assignment: op='=' (at pp.c:22384)
                        ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:22384)
                        ID: name='FALSE' (at pp.c:22384)
                      FuncCall:  (at None)
                        ID: name='CC2420ReceiveP__CSN__set' (at pp.c:22385)
                      FuncCall:  (at None)
                        ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:22386)
                      FuncCall:  (at None)
                        ID: name='CC2420ReceiveP__waitForNextPacket' (at pp.c:22387)
                Compound:  (at pp.c:22390)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__flush' (at pp.c:22392)
          Break:  (at pp.c:22395)
          Case:  (at pp.c:22397)
            ID: name='CC2420ReceiveP__S_RX_FCF' (at pp.c:22397)
            Assignment: op='=' (at pp.c:22398)
              ID: name='CC2420ReceiveP__m_state' (at pp.c:22398)
              ID: name='CC2420ReceiveP__S_RX_PAYLOAD' (at pp.c:22398)
          If:  (at pp.c:22409)
            BinaryOp: op='&&' (at None)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__CC2420Config__isAutoAckEnabled' (at pp.c:22409)
              UnaryOp: op='!' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420ReceiveP__CC2420Config__isHwAutoAckDefault' (at pp.c:22409)
            Compound:  (at pp.c:22409)
              If:  (at pp.c:22413)
                BinaryOp: op='&&' (at None)
                  BinaryOp: op='&&' (at None)
                    BinaryOp: op='==' (at None)
                      BinaryOp: op='&' (at None)
                        BinaryOp: op='>>' (at None)
                          FuncCall:  (at None)
                            ID: name='__nesc_ntoh_leuint16' (at pp.c:22413)
                            ExprList:  (at pp.c:22415)
                              StructRef: type='.' (at pp.c:22415)
                                StructRef: type='->' (at pp.c:22415)
                                  ID: name='header' (at pp.c:22415)
                                  ID: name='fcf' (at pp.c:22415)
                                ID: name='nxdata' (at pp.c:22415)
                          ID: name='IEEE154_FCF_ACK_REQ' (at pp.c:22415)
                        Constant: type='int', value='0x01' (at pp.c:22415)
                      Constant: type='int', value='1' (at pp.c:22415)
                    BinaryOp: op='||' (at None)
                      BinaryOp: op='==' (at None)
                        FuncCall:  (at None)
                          ID: name='__nesc_ntoh_leuint16' (at pp.c:22416)
                          ExprList:  (at pp.c:22416)
                            StructRef: type='.' (at pp.c:22416)
                              StructRef: type='->' (at pp.c:22416)
                                ID: name='header' (at pp.c:22416)
                                ID: name='dest' (at pp.c:22416)
                              ID: name='nxdata' (at pp.c:22416)
                        FuncCall:  (at None)
                          ID: name='CC2420ReceiveP__CC2420Config__getShortAddr' (at pp.c:22416)
                      BinaryOp: op='==' (at None)
                        FuncCall:  (at None)
                          ID: name='__nesc_ntoh_leuint16' (at pp.c:22417)
                          ExprList:  (at pp.c:22417)
                            StructRef: type='.' (at pp.c:22417)
                              StructRef: type='->' (at pp.c:22417)
                                ID: name='header' (at pp.c:22417)
                                ID: name='dest' (at pp.c:22417)
                              ID: name='nxdata' (at pp.c:22417)
                        ID: name='AM_BROADCAST_ADDR' (at pp.c:22417)
                  BinaryOp: op='==' (at None)
                    BinaryOp: op='&' (at None)
                      BinaryOp: op='>>' (at None)
                        FuncCall:  (at None)
                          ID: name='__nesc_ntoh_leuint16' (at pp.c:22418)
                          ExprList:  (at pp.c:22418)
                            StructRef: type='.' (at pp.c:22418)
                              StructRef: type='->' (at pp.c:22418)
                                ID: name='header' (at pp.c:22418)
                                ID: name='fcf' (at pp.c:22418)
                              ID: name='nxdata' (at pp.c:22418)
                        ID: name='IEEE154_FCF_FRAME_TYPE' (at pp.c:22418)
                      Constant: type='int', value='7' (at pp.c:22418)
                    ID: name='IEEE154_TYPE_DATA' (at pp.c:22418)
                Compound:  (at pp.c:22418)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__CSN__set' (at pp.c:22420)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__CSN__clr' (at pp.c:22421)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__SACK__strobe' (at pp.c:22422)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__CSN__set' (at pp.c:22423)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__CSN__clr' (at pp.c:22424)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__RXFIFO__beginRead' (at pp.c:22425)
                    ExprList:  (at pp.c:22425)
                      BinaryOp: op='+' (at pp.c:22425)
                        BinaryOp: op='+' (at pp.c:22425)
                          ID: name='buf' (at pp.c:22425)
                          Constant: type='int', value='1' (at pp.c:22425)
                        ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:22425)
                      BinaryOp: op='-' (at pp.c:22426)
                        ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22426)
                        ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:22426)
                  Return:  (at pp.c:22427)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__RXFIFO__continueRead' (at pp.c:22431)
            ExprList:  (at pp.c:22431)
              BinaryOp: op='+' (at pp.c:22431)
                BinaryOp: op='+' (at pp.c:22431)
                  ID: name='buf' (at pp.c:22431)
                  Constant: type='int', value='1' (at pp.c:22431)
                ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:22431)
              BinaryOp: op='-' (at pp.c:22432)
                ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22432)
                ID: name='CC2420ReceiveP__SACK_HEADER_LENGTH' (at pp.c:22432)
          Break:  (at pp.c:22433)
          Case:  (at pp.c:22435)
            ID: name='CC2420ReceiveP__S_RX_PAYLOAD' (at pp.c:22435)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__CSN__set' (at pp.c:22437)
          If:  (at pp.c:22438)
            UnaryOp: op='!' (at pp.c:22438)
              ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:22438)
            Compound:  (at pp.c:22438)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:22440)
          If:  (at pp.c:22446)
            BinaryOp: op='||' (at pp.c:22448)
              BinaryOp: op='||' (at pp.c:22448)
                BinaryOp: op='||' (at pp.c:22448)
                  BinaryOp: op='&&' (at pp.c:22448)
                    ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:22448)
                    FuncCall:  (at None)
                      ID: name='CC2420ReceiveP__FIFO__get' (at pp.c:22448)
                  UnaryOp: op='!' (at None)
                    FuncCall:  (at None)
                      ID: name='CC2420ReceiveP__FIFOP__get' (at pp.c:22448)
                UnaryOp: op='!' (at pp.c:22449)
                  ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:22449)
              BinaryOp: op='<=' (at pp.c:22450)
                ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22450)
                Constant: type='int', value='10' (at pp.c:22450)
            Compound:  (at pp.c:22450)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__PacketTimeStamp__clear' (at pp.c:22451)
                ExprList:  (at pp.c:22451)
                  ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:22451)
            Compound:  (at pp.c:22453)
              If:  (at pp.c:22454)
                BinaryOp: op='==' (at pp.c:22454)
                  ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:22454)
                  Constant: type='int', value='1' (at pp.c:22454)
                Compound:  (at pp.c:22454)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__PacketTimeStamp__set' (at pp.c:22455)
                    ExprList:  (at pp.c:22455)
                      ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:22455)
                      ArrayRef:  (at pp.c:22455)
                        ID: name='CC2420ReceiveP__m_timestamp_queue' (at pp.c:22455)
                        ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:22455)
              Assignment: op='=' (at pp.c:22458)
                ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:22458)
                BinaryOp: op='%' (at pp.c:22458)
                  BinaryOp: op='+' (at pp.c:22458)
                    ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:22458)
                    Constant: type='int', value='1' (at pp.c:22458)
                  ID: name='CC2420ReceiveP__TIMESTAMP_QUEUE_SIZE' (at pp.c:22458)
              UnaryOp: op='p--' (at pp.c:22459)
                ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:22459)
              If:  (at pp.c:22461)
                BinaryOp: op='>' (at pp.c:22461)
                  ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:22461)
                  Constant: type='int', value='0' (at pp.c:22461)
                Compound:  (at pp.c:22461)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__PacketTimeStamp__clear' (at pp.c:22462)
                    ExprList:  (at pp.c:22462)
                      ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:22462)
                  Assignment: op='=' (at pp.c:22463)
                    ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:22463)
                    Constant: type='int', value='0' (at pp.c:22463)
                  Assignment: op='=' (at pp.c:22464)
                    ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:22464)
                    Constant: type='int', value='0' (at pp.c:22464)
          If:  (at pp.c:22470)
            BinaryOp: op='&&' (at pp.c:22470)
              BinaryOp: op='>>' (at pp.c:22470)
                ArrayRef:  (at pp.c:22470)
                  ID: name='buf' (at pp.c:22470)
                  ID: name='CC2420ReceiveP__rxFrameLength' (at pp.c:22470)
                Constant: type='int', value='7' (at pp.c:22470)
              ID: name='rx_buf' (at pp.c:22470)
            Compound:  (at pp.c:22470)
              Decl: name='type', quals=[], storage=[] (at pp.c:22471)
                TypeDecl: declname='type', quals=[] (at pp.c:22471)
                  IdentifierType: names=['uint8_t'] (at None)
                BinaryOp: op='&' (at None)
                  BinaryOp: op='>>' (at None)
                    FuncCall:  (at None)
                      ID: name='__nesc_ntoh_leuint16' (at pp.c:22471)
                      ExprList:  (at pp.c:22471)
                        StructRef: type='.' (at pp.c:22471)
                          StructRef: type='->' (at pp.c:22471)
                            ID: name='header' (at pp.c:22471)
                            ID: name='fcf' (at pp.c:22471)
                          ID: name='nxdata' (at pp.c:22471)
                    ID: name='IEEE154_FCF_FRAME_TYPE' (at pp.c:22471)
                  Constant: type='int', value='7' (at pp.c:22471)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__CC2420Receive__receive' (at pp.c:22474)
                ExprList:  (at pp.c:22474)
                  ID: name='type' (at pp.c:22474)
                  ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:22474)
              If:  (at pp.c:22475)
                BinaryOp: op='==' (at pp.c:22475)
                  ID: name='type' (at pp.c:22475)
                  ID: name='IEEE154_TYPE_DATA' (at pp.c:22475)
                Compound:  (at pp.c:22475)
                  FuncCall:  (at None)
                    ID: name='CC2420ReceiveP__receiveDone_task__postTask' (at pp.c:22476)
                  Return:  (at pp.c:22477)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__waitForNextPacket' (at pp.c:22481)
          Break:  (at pp.c:22482)
          Default:  (at pp.c:22484)
            Assignment: op='=' (at pp.c:22485)
              ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:22485)
              ID: name='FALSE' (at pp.c:22485)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__CSN__set' (at pp.c:22486)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:22487)
          Break:  (at pp.c:22488)
  FuncDef:  (at pp.c:22493)
    Decl: name='CC2420SpiP__Fifo__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:22493)
      FuncDecl: quals=None (at pp.c:22493)
        ParamList:  (at pp.c:22493)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22493)
            TypeDecl: declname='addr', quals=[] (at pp.c:22493)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:22493)
            PtrDecl: quals=[] (at pp.c:22493)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:22493)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_len', quals=[], storage=[] (at pp.c:22493)
            TypeDecl: declname='rx_len', quals=[] (at pp.c:22493)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22493)
            TypeDecl: declname='error', quals=[] (at pp.c:22493)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__default__readDone', quals=[] (at pp.c:22493)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22495)
  FuncDef:  (at pp.c:22499)
    Decl: name='CC2420SpiP__Fifo__readDone', quals=[], storage=['static', 'inline'] (at pp.c:22499)
      FuncDecl: quals=None (at pp.c:22499)
        ParamList:  (at pp.c:22499)
          Decl: name='arg_0x102486328', quals=[], storage=[] (at pp.c:22499)
            TypeDecl: declname='arg_0x102486328', quals=[] (at pp.c:22499)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:22499)
            PtrDecl: quals=[] (at pp.c:22499)
              TypeDecl: declname='data', quals=[] (at pp.c:22499)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:22499)
            TypeDecl: declname='length', quals=[] (at pp.c:22499)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22499)
            TypeDecl: declname='error', quals=[] (at pp.c:22499)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__readDone', quals=[] (at pp.c:22499)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22499)
      Switch:  (at pp.c:22501)
        ID: name='arg_0x102486328' (at pp.c:22501)
        Compound:  (at pp.c:22501)
          Case:  (at pp.c:22503)
            ID: name='CC2420_TXFIFO' (at pp.c:22503)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__TXFIFO__readDone' (at pp.c:22505)
              ExprList:  (at pp.c:22505)
                ID: name='data' (at pp.c:22505)
                ID: name='length' (at pp.c:22505)
                ID: name='error' (at pp.c:22505)
          Break:  (at pp.c:22507)
          Case:  (at pp.c:22509)
            ID: name='CC2420_RXFIFO' (at pp.c:22509)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__RXFIFO__readDone' (at pp.c:22511)
              ExprList:  (at pp.c:22511)
                ID: name='data' (at pp.c:22511)
                ID: name='length' (at pp.c:22511)
                ID: name='error' (at pp.c:22511)
          Break:  (at pp.c:22513)
          Default:  (at pp.c:22515)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__Fifo__default__readDone' (at pp.c:22517)
              ExprList:  (at pp.c:22517)
                ID: name='arg_0x102486328' (at pp.c:22517)
                ID: name='data' (at pp.c:22517)
                ID: name='length' (at pp.c:22517)
                ID: name='error' (at pp.c:22517)
          Break:  (at pp.c:22519)
  FuncDef:  (at pp.c:22526)
    Decl: name='CC2420ReceiveP__SFLUSHRX__strobe', quals=[], storage=['static', 'inline'] (at pp.c:22526)
      FuncDecl: quals=None (at pp.c:22526)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__SFLUSHRX__strobe', quals=[] (at pp.c:22526)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:22526)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22528)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22528)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22532)
        ID: name='__nesc_result' (at pp.c:22532)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__Strobe__strobe' (at pp.c:22532)
          ExprList:  (at pp.c:22532)
            ID: name='CC2420_SFLUSHRX' (at pp.c:22532)
      Return:  (at pp.c:22536)
        ID: name='__nesc_result' (at pp.c:22536)
  FuncDef:  (at pp.c:22541)
    Decl: name='CC2420TransmitP__TXFIFO__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:22541)
      FuncDecl: quals=None (at pp.c:22541)
        ParamList:  (at pp.c:22541)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:22541)
            PtrDecl: quals=[] (at pp.c:22541)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:22541)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_len', quals=[], storage=[] (at pp.c:22541)
            TypeDecl: declname='tx_len', quals=[] (at pp.c:22541)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22542)
            TypeDecl: declname='error', quals=[] (at pp.c:22542)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__TXFIFO__writeDone', quals=[] (at pp.c:22541)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22544)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CSN__set' (at pp.c:22546)
      If:  (at pp.c:22547)
        BinaryOp: op='==' (at pp.c:22547)
          ID: name='CC2420TransmitP__m_state' (at pp.c:22547)
          ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:22547)
        Compound:  (at pp.c:22547)
          Compound:  (at pp.c:22550)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CSN__clr' (at pp.c:22551)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__SFLUSHTX__strobe' (at pp.c:22552)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__CSN__set' (at pp.c:22553)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:22555)
          Assignment: op='=' (at pp.c:22556)
            ID: name='CC2420TransmitP__m_state' (at pp.c:22556)
            ID: name='CC2420TransmitP__S_STARTED' (at pp.c:22556)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__Send__sendDone' (at pp.c:22557)
            ExprList:  (at pp.c:22557)
              ID: name='CC2420TransmitP__m_msg' (at pp.c:22557)
              ID: name='ECANCEL' (at pp.c:22557)
        Compound:  (at pp.c:22559)
          If:  (at pp.c:22561)
            UnaryOp: op='!' (at pp.c:22561)
              ID: name='CC2420TransmitP__m_cca' (at pp.c:22561)
            Compound:  (at pp.c:22561)
              Compound:  (at pp.c:22564)
                Assignment: op='=' (at pp.c:22565)
                  ID: name='CC2420TransmitP__m_state' (at pp.c:22565)
                  ID: name='CC2420TransmitP__S_BEGIN_TRANSMIT' (at pp.c:22565)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__attemptSend' (at pp.c:22567)
            Compound:  (at pp.c:22569)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:22570)
              Compound:  (at pp.c:22573)
                Assignment: op='=' (at pp.c:22574)
                  ID: name='CC2420TransmitP__m_state' (at pp.c:22574)
                  ID: name='CC2420TransmitP__S_SAMPLE_CCA' (at pp.c:22574)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__RadioBackoff__requestInitialBackoff' (at pp.c:22577)
                ExprList:  (at pp.c:22577)
                  ID: name='CC2420TransmitP__m_msg' (at pp.c:22577)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:22578)
                ExprList:  (at pp.c:22578)
                  ID: name='CC2420TransmitP__myInitialBackoff' (at pp.c:22578)
  FuncDef:  (at pp.c:22584)
    Decl: name='CC2420ReceiveP__RXFIFO__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:22584)
      FuncDecl: quals=None (at pp.c:22584)
        ParamList:  (at pp.c:22584)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:22584)
            PtrDecl: quals=[] (at pp.c:22584)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:22584)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_len', quals=[], storage=[] (at pp.c:22584)
            TypeDecl: declname='tx_len', quals=[] (at pp.c:22584)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22584)
            TypeDecl: declname='error', quals=[] (at pp.c:22584)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420ReceiveP__RXFIFO__writeDone', quals=[] (at pp.c:22584)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22586)
  FuncDef:  (at pp.c:22590)
    Decl: name='CC2420SpiP__Fifo__default__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:22590)
      FuncDecl: quals=None (at pp.c:22590)
        ParamList:  (at pp.c:22590)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22590)
            TypeDecl: declname='addr', quals=[] (at pp.c:22590)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:22590)
            PtrDecl: quals=[] (at pp.c:22590)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:22590)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_len', quals=[], storage=[] (at pp.c:22590)
            TypeDecl: declname='tx_len', quals=[] (at pp.c:22590)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22590)
            TypeDecl: declname='error', quals=[] (at pp.c:22590)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__default__writeDone', quals=[] (at pp.c:22590)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22592)
  FuncDef:  (at pp.c:22596)
    Decl: name='CC2420SpiP__Fifo__writeDone', quals=[], storage=['static', 'inline'] (at pp.c:22596)
      FuncDecl: quals=None (at pp.c:22596)
        ParamList:  (at pp.c:22596)
          Decl: name='arg_0x102486328', quals=[], storage=[] (at pp.c:22596)
            TypeDecl: declname='arg_0x102486328', quals=[] (at pp.c:22596)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:22596)
            PtrDecl: quals=[] (at pp.c:22596)
              TypeDecl: declname='data', quals=[] (at pp.c:22596)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='length', quals=[], storage=[] (at pp.c:22596)
            TypeDecl: declname='length', quals=[] (at pp.c:22596)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22596)
            TypeDecl: declname='error', quals=[] (at pp.c:22596)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__writeDone', quals=[] (at pp.c:22596)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22596)
      Switch:  (at pp.c:22598)
        ID: name='arg_0x102486328' (at pp.c:22598)
        Compound:  (at pp.c:22598)
          Case:  (at pp.c:22600)
            ID: name='CC2420_TXFIFO' (at pp.c:22600)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__TXFIFO__writeDone' (at pp.c:22602)
              ExprList:  (at pp.c:22602)
                ID: name='data' (at pp.c:22602)
                ID: name='length' (at pp.c:22602)
                ID: name='error' (at pp.c:22602)
          Break:  (at pp.c:22604)
          Case:  (at pp.c:22606)
            ID: name='CC2420_RXFIFO' (at pp.c:22606)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__RXFIFO__writeDone' (at pp.c:22608)
              ExprList:  (at pp.c:22608)
                ID: name='data' (at pp.c:22608)
                ID: name='length' (at pp.c:22608)
                ID: name='error' (at pp.c:22608)
          Break:  (at pp.c:22610)
          Default:  (at pp.c:22612)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__Fifo__default__writeDone' (at pp.c:22614)
              ExprList:  (at pp.c:22614)
                ID: name='arg_0x102486328' (at pp.c:22614)
                ID: name='data' (at pp.c:22614)
                ID: name='length' (at pp.c:22614)
                ID: name='error' (at pp.c:22614)
          Break:  (at pp.c:22616)
  FuncDef:  (at pp.c:22623)
    Decl: name='crcByte', quals=[], storage=['inline', 'static'] (at pp.c:22623)
      FuncDecl: quals=None (at pp.c:22623)
        ParamList:  (at pp.c:22623)
          Decl: name='crc', quals=[], storage=[] (at pp.c:22623)
            TypeDecl: declname='crc', quals=[] (at pp.c:22623)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='b', quals=[], storage=[] (at pp.c:22623)
            TypeDecl: declname='b', quals=[] (at pp.c:22623)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='crcByte', quals=[] (at pp.c:22623)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:22625)
      Assignment: op='=' (at pp.c:22626)
        ID: name='crc' (at pp.c:22626)
        BinaryOp: op='|' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
            BinaryOp: op='>>' (at pp.c:22626)
              ID: name='crc' (at pp.c:22626)
              Constant: type='int', value='8' (at pp.c:22626)
          BinaryOp: op='<<' (at pp.c:22626)
            ID: name='crc' (at pp.c:22626)
            Constant: type='int', value='8' (at pp.c:22626)
      Assignment: op='^=' (at pp.c:22627)
        ID: name='crc' (at pp.c:22627)
        ID: name='b' (at pp.c:22627)
      Assignment: op='^=' (at pp.c:22628)
        ID: name='crc' (at pp.c:22628)
        BinaryOp: op='>>' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
            BinaryOp: op='&' (at pp.c:22628)
              ID: name='crc' (at pp.c:22628)
              Constant: type='int', value='0xff' (at pp.c:22628)
          Constant: type='int', value='4' (at pp.c:22628)
      Assignment: op='^=' (at pp.c:22629)
        ID: name='crc' (at pp.c:22629)
        BinaryOp: op='<<' (at pp.c:22629)
          ID: name='crc' (at pp.c:22629)
          Constant: type='int', value='12' (at pp.c:22629)
      Assignment: op='^=' (at pp.c:22630)
        ID: name='crc' (at pp.c:22630)
        BinaryOp: op='<<' (at pp.c:22630)
          BinaryOp: op='&' (at pp.c:22630)
            ID: name='crc' (at pp.c:22630)
            Constant: type='int', value='0xff' (at pp.c:22630)
          Constant: type='int', value='5' (at pp.c:22630)
      Return:  (at pp.c:22631)
        ID: name='crc' (at pp.c:22631)
  FuncDef:  (at pp.c:22635)
    Decl: name='Stm25pSpiP__calcReadLen', quals=[], storage=['inline', 'static'] (at pp.c:22635)
      FuncDecl: quals=None (at pp.c:22635)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__calcReadLen', quals=[] (at pp.c:22635)
          IdentifierType: names=['stm25p_len_t'] (at None)
    Compound:  (at pp.c:22637)
      Return:  (at pp.c:22638)
        TernaryOp:  (at pp.c:22638)
          BinaryOp: op='<' (at pp.c:22638)
            ID: name='Stm25pSpiP__m_cur_len' (at pp.c:22638)
            ID: name='Stm25pSpiP__CRC_BUF_SIZE' (at pp.c:22638)
          ID: name='Stm25pSpiP__m_cur_len' (at pp.c:22638)
          ID: name='Stm25pSpiP__CRC_BUF_SIZE' (at pp.c:22638)
  FuncDef:  (at pp.c:22642)
    Decl: name='DeferredPowerManagerP__0__SplitControl__start', quals=[], storage=['static', 'inline'] (at pp.c:22642)
      FuncDecl: quals=None (at pp.c:22642)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__SplitControl__start', quals=[] (at pp.c:22642)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22642)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22644)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22644)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22648)
        ID: name='__nesc_result' (at pp.c:22648)
        FuncCall:  (at None)
          ID: name='Stm25pSectorP__SplitControl__start' (at pp.c:22648)
      Return:  (at pp.c:22652)
        ID: name='__nesc_result' (at pp.c:22652)
  FuncDef:  (at pp.c:22657)
    Decl: name='DeferredPowerManagerP__0__StdControl__default__start', quals=[], storage=['inline', 'static'] (at pp.c:22657)
      FuncDecl: quals=None (at pp.c:22657)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__StdControl__default__start', quals=[] (at pp.c:22657)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22659)
      Return:  (at pp.c:22660)
        ID: name='SUCCESS' (at pp.c:22660)
  FuncDef:  (at pp.c:22664)
    Decl: name='DeferredPowerManagerP__0__StdControl__start', quals=[], storage=['static', 'inline'] (at pp.c:22664)
      FuncDecl: quals=None (at pp.c:22664)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__StdControl__start', quals=[] (at pp.c:22664)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22664)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22666)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22666)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22670)
        ID: name='__nesc_result' (at pp.c:22670)
        FuncCall:  (at None)
          ID: name='DeferredPowerManagerP__0__StdControl__default__start' (at pp.c:22670)
      Return:  (at pp.c:22674)
        ID: name='__nesc_result' (at pp.c:22674)
  FuncDef:  (at pp.c:22679)
    Decl: name='DeferredPowerManagerP__0__TimerMilli__stop', quals=[], storage=['static', 'inline'] (at pp.c:22679)
      FuncDecl: quals=None (at pp.c:22679)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__TimerMilli__stop', quals=[] (at pp.c:22679)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22679)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__stop' (at pp.c:22681)
        ExprList:  (at pp.c:22681)
          Constant: type='int', value='1U' (at pp.c:22681)
  FuncDef:  (at pp.c:22686)
    Decl: name='DeferredPowerManagerP__0__startTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:22686)
      FuncDecl: quals=None (at pp.c:22686)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__startTask__runTask', quals=[] (at pp.c:22686)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22688)
      FuncCall:  (at None)
        ID: name='DeferredPowerManagerP__0__TimerMilli__stop' (at pp.c:22689)
      Assignment: op='=' (at pp.c:22690)
        ID: name='DeferredPowerManagerP__0__stopTimer' (at pp.c:22690)
        ID: name='FALSE' (at pp.c:22690)
      FuncCall:  (at None)
        ID: name='DeferredPowerManagerP__0__StdControl__start' (at pp.c:22691)
      If:  (at pp.c:22692)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='DeferredPowerManagerP__0__SplitControl__start' (at pp.c:22692)
          ID: name='EALREADY' (at pp.c:22692)
        Compound:  (at pp.c:22692)
          FuncCall:  (at None)
            ID: name='DeferredPowerManagerP__0__ResourceDefaultOwner__release' (at pp.c:22693)
  FuncDef:  (at pp.c:22698)
    Decl: name='DeferredPowerManagerP__0__TimerMilli__startOneShot', quals=[], storage=['static', 'inline'] (at pp.c:22698)
      FuncDecl: quals=None (at pp.c:22698)
        ParamList:  (at pp.c:22698)
          Decl: name='dt', quals=[], storage=[] (at pp.c:22698)
            TypeDecl: declname='dt', quals=[] (at pp.c:22698)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__TimerMilli__startOneShot', quals=[] (at pp.c:22698)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22698)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__startOneShot' (at pp.c:22700)
        ExprList:  (at pp.c:22700)
          Constant: type='int', value='1U' (at pp.c:22700)
          ID: name='dt' (at pp.c:22700)
  FuncDef:  (at pp.c:22705)
    Decl: name='DeferredPowerManagerP__0__timerTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:22705)
      FuncDecl: quals=None (at pp.c:22705)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__timerTask__runTask', quals=[] (at pp.c:22705)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22707)
      FuncCall:  (at None)
        ID: name='DeferredPowerManagerP__0__TimerMilli__startOneShot' (at pp.c:22708)
        ExprList:  (at pp.c:22708)
          Constant: type='int', value='1024' (at pp.c:22708)
  FuncDef:  (at pp.c:22712)
    Decl: name='Stm25pSpiP__SpiResource__request', quals=[], storage=['static', 'inline'] (at pp.c:22712)
      FuncDecl: quals=None (at pp.c:22712)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__SpiResource__request', quals=[] (at pp.c:22712)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22712)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22714)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22714)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22718)
        ID: name='__nesc_result' (at pp.c:22718)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Resource__request' (at pp.c:22718)
          ExprList:  (at pp.c:22718)
            ID: name='Msp430Spi0C__0__CLIENT_ID' (at pp.c:22718)
      Return:  (at pp.c:22722)
        ID: name='__nesc_result' (at pp.c:22722)
  FuncDef:  (at pp.c:22727)
    Decl: name='Stm25pSpiP__ClientResource__request', quals=[], storage=['inline', 'static'] (at pp.c:22727)
      FuncDecl: quals=None (at pp.c:22727)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__ClientResource__request', quals=[] (at pp.c:22727)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22729)
      Return:  (at pp.c:22730)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__SpiResource__request' (at pp.c:22730)
  FuncDef:  (at pp.c:22734)
    Decl: name='Stm25pSectorP__SpiResource__request', quals=[], storage=['static', 'inline'] (at pp.c:22734)
      FuncDecl: quals=None (at pp.c:22734)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSectorP__SpiResource__request', quals=[] (at pp.c:22734)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22734)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22736)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22736)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:22740)
        ID: name='__nesc_result' (at pp.c:22740)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__ClientResource__request' (at pp.c:22740)
      Return:  (at pp.c:22744)
        ID: name='__nesc_result' (at pp.c:22744)
  FuncDef:  (at pp.c:22749)
    Decl: name='Stm25pSectorP__Stm25pResource__granted', quals=[], storage=['inline', 'static'] (at pp.c:22749)
      FuncDecl: quals=None (at pp.c:22749)
        ParamList:  (at pp.c:22749)
          Decl: name='id', quals=[], storage=[] (at pp.c:22749)
            TypeDecl: declname='id', quals=[] (at pp.c:22749)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Stm25pResource__granted', quals=[] (at pp.c:22749)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22751)
      Assignment: op='=' (at pp.c:22752)
        ID: name='Stm25pSectorP__m_client' (at pp.c:22752)
        ID: name='id' (at pp.c:22752)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__SpiResource__request' (at pp.c:22753)
  FuncDef:  (at pp.c:22757)
    Decl: name='ArbiterP__0__Resource__granted', quals=[], storage=['static', 'inline'] (at pp.c:22757)
      FuncDecl: quals=None (at pp.c:22757)
        ParamList:  (at pp.c:22757)
          Decl: name='arg_0x101ac5d40', quals=[], storage=[] (at pp.c:22757)
            TypeDecl: declname='arg_0x101ac5d40', quals=[] (at pp.c:22757)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__Resource__granted', quals=[] (at pp.c:22757)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22757)
      FuncCall:  (at None)
        ID: name='Stm25pSectorP__Stm25pResource__granted' (at pp.c:22759)
        ExprList:  (at pp.c:22759)
          ID: name='arg_0x101ac5d40' (at pp.c:22759)
  FuncDef:  (at pp.c:22764)
    Decl: name='ArbiterP__0__ResourceConfigure__default__configure', quals=[], storage=['inline', 'static'] (at pp.c:22764)
      FuncDecl: quals=None (at pp.c:22764)
        ParamList:  (at pp.c:22764)
          Decl: name='id', quals=[], storage=[] (at pp.c:22764)
            TypeDecl: declname='id', quals=[] (at pp.c:22764)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceConfigure__default__configure', quals=[] (at pp.c:22764)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22766)
  FuncDef:  (at pp.c:22770)
    Decl: name='ArbiterP__0__ResourceConfigure__configure', quals=[], storage=['static', 'inline'] (at pp.c:22770)
      FuncDecl: quals=None (at pp.c:22770)
        ParamList:  (at pp.c:22770)
          Decl: name='arg_0x101ac0340', quals=[], storage=[] (at pp.c:22770)
            TypeDecl: declname='arg_0x101ac0340', quals=[] (at pp.c:22770)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceConfigure__configure', quals=[] (at pp.c:22770)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22770)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__ResourceConfigure__default__configure' (at pp.c:22772)
        ExprList:  (at pp.c:22772)
          ID: name='arg_0x101ac0340' (at pp.c:22772)
  FuncDef:  (at pp.c:22777)
    Decl: name='ArbiterP__0__grantedTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:22777)
      FuncDecl: quals=None (at pp.c:22777)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__grantedTask__runTask', quals=[] (at pp.c:22777)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22779)
      Compound:  (at pp.c:22780)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:22780)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:22780)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:22780)
        Compound:  (at pp.c:22782)
          Assignment: op='=' (at pp.c:22783)
            ID: name='ArbiterP__0__resId' (at pp.c:22783)
            ID: name='ArbiterP__0__reqResId' (at pp.c:22783)
          Assignment: op='=' (at pp.c:22784)
            ID: name='ArbiterP__0__state' (at pp.c:22784)
            ID: name='ArbiterP__0__RES_BUSY' (at pp.c:22784)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:22787)
          ExprList:  (at pp.c:22787)
            ID: name='__nesc_atomic' (at pp.c:22787)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__ResourceConfigure__configure' (at pp.c:22788)
        ExprList:  (at pp.c:22788)
          ID: name='ArbiterP__0__resId' (at pp.c:22788)
      FuncCall:  (at None)
        ID: name='ArbiterP__0__Resource__granted' (at pp.c:22789)
        ExprList:  (at pp.c:22789)
          ID: name='ArbiterP__0__resId' (at pp.c:22789)
  FuncDef:  (at pp.c:22793)
    Decl: name='Stm25pLogP__Sector__default__write', quals=[], storage=['inline', 'static'] (at pp.c:22793)
      FuncDecl: quals=None (at pp.c:22793)
        ParamList:  (at pp.c:22793)
          Decl: name='id', quals=[], storage=[] (at pp.c:22793)
            TypeDecl: declname='id', quals=[] (at pp.c:22793)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22793)
            TypeDecl: declname='addr', quals=[] (at pp.c:22793)
              IdentifierType: names=['storage_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:22793)
            PtrDecl: quals=[] (at pp.c:22793)
              TypeDecl: declname='buf', quals=[] (at pp.c:22793)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22793)
            TypeDecl: declname='len', quals=[] (at pp.c:22793)
              IdentifierType: names=['storage_len_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__default__write', quals=[] (at pp.c:22793)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22795)
      Return:  (at pp.c:22797)
        ID: name='FAIL' (at pp.c:22797)
  FuncDef:  (at pp.c:22801)
    Decl: name='Stm25pLogP__Sector__write', quals=[], storage=['static', 'inline'] (at pp.c:22801)
      FuncDecl: quals=None (at pp.c:22801)
        ParamList:  (at pp.c:22801)
          Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:22801)
            TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:22801)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22801)
            TypeDecl: declname='addr', quals=[] (at pp.c:22801)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:22801)
            PtrDecl: quals=[] (at pp.c:22801)
              TypeDecl: declname='buf', quals=[] (at pp.c:22801)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22801)
            TypeDecl: declname='len', quals=[] (at pp.c:22801)
              IdentifierType: names=['stm25p_len_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__write', quals=[] (at pp.c:22801)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22801)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22803)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22803)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:22807)
        ID: name='arg_0x10192d468' (at pp.c:22807)
        Compound:  (at pp.c:22807)
          Case:  (at pp.c:22809)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:22809)
            Assignment: op='=' (at pp.c:22811)
              ID: name='__nesc_result' (at pp.c:22811)
              FuncCall:  (at None)
                ID: name='Stm25pSectorP__Sector__write' (at pp.c:22811)
                ExprList:  (at pp.c:22811)
                  ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:22811)
                  ID: name='addr' (at pp.c:22811)
                  ID: name='buf' (at pp.c:22811)
                  ID: name='len' (at pp.c:22811)
          Break:  (at pp.c:22813)
          Default:  (at pp.c:22815)
            Assignment: op='=' (at pp.c:22817)
              ID: name='__nesc_result' (at pp.c:22817)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__Sector__default__write' (at pp.c:22817)
                ExprList:  (at pp.c:22817)
                  ID: name='arg_0x10192d468' (at pp.c:22817)
                  ID: name='addr' (at pp.c:22817)
                  ID: name='buf' (at pp.c:22817)
                  ID: name='len' (at pp.c:22817)
          Break:  (at pp.c:22819)
      Return:  (at pp.c:22825)
        ID: name='__nesc_result' (at pp.c:22825)
  FuncDef:  (at pp.c:22830)
    Decl: name='Stm25pLogP__Sector__eraseDone', quals=[], storage=['inline', 'static'] (at pp.c:22830)
      FuncDecl: quals=None (at pp.c:22830)
        ParamList:  (at pp.c:22830)
          Decl: name='id', quals=[], storage=[] (at pp.c:22830)
            TypeDecl: declname='id', quals=[] (at pp.c:22830)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='sector', quals=[], storage=[] (at pp.c:22830)
            TypeDecl: declname='sector', quals=[] (at pp.c:22830)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='num_sectors', quals=[], storage=[] (at pp.c:22831)
            TypeDecl: declname='num_sectors', quals=[] (at pp.c:22831)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22832)
            TypeDecl: declname='error', quals=[] (at pp.c:22832)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__eraseDone', quals=[] (at pp.c:22830)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22834)
      If:  (at pp.c:22835)
        BinaryOp: op='==' (at pp.c:22835)
          StructRef: type='.' (at pp.c:22835)
            ArrayRef:  (at pp.c:22835)
              ID: name='Stm25pLogP__m_log_state' (at pp.c:22835)
              ID: name='id' (at pp.c:22835)
            ID: name='req' (at pp.c:22835)
          ID: name='Stm25pLogP__S_ERASE' (at pp.c:22835)
        Compound:  (at pp.c:22835)
          Assignment: op='=' (at pp.c:22836)
            StructRef: type='.' (at pp.c:22836)
              ArrayRef:  (at pp.c:22836)
                ID: name='Stm25pLogP__m_log_info' (at pp.c:22836)
                ID: name='id' (at pp.c:22836)
              ID: name='read_addr' (at pp.c:22836)
            Constant: type='int', value='0' (at pp.c:22836)
          Assignment: op='=' (at pp.c:22837)
            StructRef: type='.' (at pp.c:22837)
              ArrayRef:  (at pp.c:22837)
                ID: name='Stm25pLogP__m_log_info' (at pp.c:22837)
                ID: name='id' (at pp.c:22837)
              ID: name='write_addr' (at pp.c:22837)
            Constant: type='int', value='0' (at pp.c:22837)
          FuncCall:  (at None)
            ID: name='Stm25pLogP__signalDone' (at pp.c:22838)
            ExprList:  (at pp.c:22838)
              ID: name='id' (at pp.c:22838)
              ID: name='error' (at pp.c:22838)
        Compound:  (at pp.c:22840)
          Decl: name='volume_size', quals=[], storage=[] (at pp.c:22843)
            TypeDecl: declname='volume_size', quals=[] (at pp.c:22843)
              IdentifierType: names=['stm25p_addr_t'] (at None)
            BinaryOp: op='*' (at pp.c:22844)
              ID: name='STM25P_SECTOR_SIZE' (at pp.c:22844)
              BinaryOp: op='-' (at None)
                FuncCall:  (at None)
                  ID: name='Stm25pLogP__Sector__getNumSectors' (at pp.c:22844)
                  ExprList:  (at pp.c:22844)
                    ID: name='id' (at pp.c:22844)
                Constant: type='int', value='1' (at pp.c:22844)
          If:  (at pp.c:22847)
            BinaryOp: op='>' (at pp.c:22847)
              StructRef: type='.' (at pp.c:22847)
                ArrayRef:  (at pp.c:22847)
                  ID: name='Stm25pLogP__m_log_info' (at pp.c:22847)
                  ID: name='id' (at pp.c:22847)
                ID: name='write_addr' (at pp.c:22847)
              ID: name='volume_size' (at pp.c:22847)
            Compound:  (at pp.c:22847)
              Decl: name='read_addr', quals=[], storage=[] (at pp.c:22848)
                TypeDecl: declname='read_addr', quals=[] (at pp.c:22848)
                  IdentifierType: names=['stm25p_addr_t'] (at None)
                BinaryOp: op='-' (at pp.c:22848)
                  StructRef: type='.' (at pp.c:22848)
                    ArrayRef:  (at pp.c:22848)
                      ID: name='Stm25pLogP__m_log_info' (at pp.c:22848)
                      ID: name='id' (at pp.c:22848)
                    ID: name='write_addr' (at pp.c:22848)
                  ID: name='volume_size' (at pp.c:22848)
              If:  (at pp.c:22851)
                BinaryOp: op='<' (at pp.c:22851)
                  StructRef: type='.' (at pp.c:22851)
                    ArrayRef:  (at pp.c:22851)
                      ID: name='Stm25pLogP__m_log_info' (at pp.c:22851)
                      ID: name='id' (at pp.c:22851)
                    ID: name='read_addr' (at pp.c:22851)
                  ID: name='read_addr' (at pp.c:22851)
                Compound:  (at pp.c:22851)
                  Assignment: op='=' (at pp.c:22852)
                    StructRef: type='.' (at pp.c:22852)
                      ArrayRef:  (at pp.c:22852)
                        ID: name='Stm25pLogP__m_log_info' (at pp.c:22852)
                        ID: name='id' (at pp.c:22852)
                      ID: name='read_addr' (at pp.c:22852)
                    ID: name='read_addr' (at pp.c:22852)
          Assignment: op='=' (at pp.c:22856)
            ID: name='Stm25pLogP__m_addr' (at pp.c:22856)
            StructRef: type='.' (at pp.c:22856)
              ArrayRef:  (at pp.c:22856)
                ID: name='Stm25pLogP__m_log_info' (at pp.c:22856)
                ID: name='id' (at pp.c:22856)
              ID: name='write_addr' (at pp.c:22856)
          FuncCall:  (at None)
            ID: name='Stm25pLogP__Sector__write' (at pp.c:22857)
            ExprList:  (at pp.c:22857)
              ID: name='id' (at pp.c:22857)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__calcAddr' (at pp.c:22857)
                ExprList:  (at pp.c:22857)
                  ID: name='id' (at pp.c:22857)
                  ID: name='Stm25pLogP__m_addr' (at pp.c:22857)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  PtrDecl: quals=[] (at pp.c:22857)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint8_t'] (at None)
                UnaryOp: op='&' (at pp.c:22857)
                  ID: name='Stm25pLogP__m_addr' (at pp.c:22857)
              UnaryOp: op='sizeof' (at pp.c:22858)
                ID: name='Stm25pLogP__m_addr' (at pp.c:22858)
  FuncDef:  (at pp.c:22863)
    Decl: name='Stm25pSectorP__Sector__default__eraseDone', quals=[], storage=['inline', 'static'] (at pp.c:22863)
      FuncDecl: quals=None (at pp.c:22863)
        ParamList:  (at pp.c:22863)
          Decl: name='id', quals=[], storage=[] (at pp.c:22863)
            TypeDecl: declname='id', quals=[] (at pp.c:22863)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='sector', quals=[], storage=[] (at pp.c:22863)
            TypeDecl: declname='sector', quals=[] (at pp.c:22863)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='num_sectors', quals=[], storage=[] (at pp.c:22863)
            TypeDecl: declname='num_sectors', quals=[] (at pp.c:22863)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22863)
            TypeDecl: declname='error', quals=[] (at pp.c:22863)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__default__eraseDone', quals=[] (at pp.c:22863)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22865)
  FuncDef:  (at pp.c:22869)
    Decl: name='Stm25pSectorP__Sector__eraseDone', quals=[], storage=['static', 'inline'] (at pp.c:22869)
      FuncDecl: quals=None (at pp.c:22869)
        ParamList:  (at pp.c:22869)
          Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:22869)
            TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:22869)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='sector', quals=[], storage=[] (at pp.c:22869)
            TypeDecl: declname='sector', quals=[] (at pp.c:22869)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='num_sectors', quals=[], storage=[] (at pp.c:22869)
            TypeDecl: declname='num_sectors', quals=[] (at pp.c:22869)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22869)
            TypeDecl: declname='error', quals=[] (at pp.c:22869)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__eraseDone', quals=[] (at pp.c:22869)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22869)
      Switch:  (at pp.c:22871)
        ID: name='arg_0x101a05328' (at pp.c:22871)
        Compound:  (at pp.c:22871)
          Case:  (at pp.c:22873)
            ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:22873)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Sector__eraseDone' (at pp.c:22875)
              ExprList:  (at pp.c:22875)
                ID: name='LogStorageC__0__LOG_ID' (at pp.c:22875)
                ID: name='sector' (at pp.c:22875)
                ID: name='num_sectors' (at pp.c:22875)
                ID: name='error' (at pp.c:22875)
          Break:  (at pp.c:22877)
          Default:  (at pp.c:22879)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__Sector__default__eraseDone' (at pp.c:22881)
              ExprList:  (at pp.c:22881)
                ID: name='arg_0x101a05328' (at pp.c:22881)
                ID: name='sector' (at pp.c:22881)
                ID: name='num_sectors' (at pp.c:22881)
                ID: name='error' (at pp.c:22881)
          Break:  (at pp.c:22883)
  FuncDef:  (at pp.c:22890)
    Decl: name='Stm25pLogP__Sector__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:22890)
      FuncDecl: quals=None (at pp.c:22890)
        ParamList:  (at pp.c:22890)
          Decl: name='id', quals=[], storage=[] (at pp.c:22890)
            TypeDecl: declname='id', quals=[] (at pp.c:22890)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22890)
            TypeDecl: declname='addr', quals=[] (at pp.c:22890)
              IdentifierType: names=['storage_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:22891)
            PtrDecl: quals=[] (at pp.c:22891)
              TypeDecl: declname='buf', quals=[] (at pp.c:22891)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22892)
            TypeDecl: declname='len', quals=[] (at pp.c:22892)
              IdentifierType: names=['storage_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22893)
            TypeDecl: declname='error', quals=[] (at pp.c:22893)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__writeDone', quals=[] (at pp.c:22890)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22895)
      Assignment: op='+=' (at pp.c:22896)
        StructRef: type='.' (at pp.c:22896)
          ArrayRef:  (at pp.c:22896)
            ID: name='Stm25pLogP__m_log_info' (at pp.c:22896)
            ID: name='id' (at pp.c:22896)
          ID: name='write_addr' (at pp.c:22896)
        ID: name='len' (at pp.c:22896)
      If:  (at pp.c:22897)
        BinaryOp: op='==' (at pp.c:22897)
          ID: name='Stm25pLogP__m_rw_state' (at pp.c:22897)
          ID: name='Stm25pLogP__S_HEADER' (at pp.c:22897)
        Compound:  (at pp.c:22897)
          If:  (at pp.c:22898)
            BinaryOp: op='==' (at pp.c:22898)
              ID: name='len' (at pp.c:22898)
              UnaryOp: op='sizeof' (at pp.c:22898)
                ID: name='Stm25pLogP__m_header' (at pp.c:22898)
            Compound:  (at pp.c:22898)
              Assignment: op='=' (at pp.c:22899)
                ID: name='Stm25pLogP__m_rw_state' (at pp.c:22899)
                ID: name='Stm25pLogP__S_DATA' (at pp.c:22899)
          FuncCall:  (at None)
            ID: name='Stm25pLogP__continueAppendOp' (at pp.c:22902)
            ExprList:  (at pp.c:22902)
              ID: name='id' (at pp.c:22902)
        Compound:  (at pp.c:22904)
          FuncCall:  (at None)
            ID: name='Stm25pLogP__signalDone' (at pp.c:22905)
            ExprList:  (at pp.c:22905)
              ID: name='id' (at pp.c:22905)
              ID: name='error' (at pp.c:22905)
  FuncDef:  (at pp.c:22910)
    Decl: name='Stm25pSectorP__Sector__default__writeDone', quals=[], storage=['inline', 'static'] (at pp.c:22910)
      FuncDecl: quals=None (at pp.c:22910)
        ParamList:  (at pp.c:22910)
          Decl: name='id', quals=[], storage=[] (at pp.c:22910)
            TypeDecl: declname='id', quals=[] (at pp.c:22910)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22910)
            TypeDecl: declname='addr', quals=[] (at pp.c:22910)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:22910)
            PtrDecl: quals=[] (at pp.c:22910)
              TypeDecl: declname='buf', quals=[] (at pp.c:22910)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22910)
            TypeDecl: declname='len', quals=[] (at pp.c:22910)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22910)
            TypeDecl: declname='error', quals=[] (at pp.c:22910)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__default__writeDone', quals=[] (at pp.c:22910)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22912)
  FuncDef:  (at pp.c:22916)
    Decl: name='Stm25pSectorP__Sector__writeDone', quals=[], storage=['static', 'inline'] (at pp.c:22916)
      FuncDecl: quals=None (at pp.c:22916)
        ParamList:  (at pp.c:22916)
          Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:22916)
            TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:22916)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22916)
            TypeDecl: declname='addr', quals=[] (at pp.c:22916)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:22916)
            PtrDecl: quals=[] (at pp.c:22916)
              TypeDecl: declname='buf', quals=[] (at pp.c:22916)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22916)
            TypeDecl: declname='len', quals=[] (at pp.c:22916)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22916)
            TypeDecl: declname='error', quals=[] (at pp.c:22916)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__writeDone', quals=[] (at pp.c:22916)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22916)
      Switch:  (at pp.c:22918)
        ID: name='arg_0x101a05328' (at pp.c:22918)
        Compound:  (at pp.c:22918)
          Case:  (at pp.c:22920)
            ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:22920)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Sector__writeDone' (at pp.c:22922)
              ExprList:  (at pp.c:22922)
                ID: name='LogStorageC__0__LOG_ID' (at pp.c:22922)
                ID: name='addr' (at pp.c:22922)
                ID: name='buf' (at pp.c:22922)
                ID: name='len' (at pp.c:22922)
                ID: name='error' (at pp.c:22922)
          Break:  (at pp.c:22924)
          Default:  (at pp.c:22926)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__Sector__default__writeDone' (at pp.c:22928)
              ExprList:  (at pp.c:22928)
                ID: name='arg_0x101a05328' (at pp.c:22928)
                ID: name='addr' (at pp.c:22928)
                ID: name='buf' (at pp.c:22928)
                ID: name='len' (at pp.c:22928)
                ID: name='error' (at pp.c:22928)
          Break:  (at pp.c:22930)
  FuncDef:  (at pp.c:22937)
    Decl: name='Stm25pLogP__Sector__computeCrcDone', quals=[], storage=['inline', 'static'] (at pp.c:22937)
      FuncDecl: quals=None (at pp.c:22937)
        ParamList:  (at pp.c:22937)
          Decl: name='id', quals=[], storage=[] (at pp.c:22937)
            TypeDecl: declname='id', quals=[] (at pp.c:22937)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22937)
            TypeDecl: declname='addr', quals=[] (at pp.c:22937)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22937)
            TypeDecl: declname='len', quals=[] (at pp.c:22937)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='crc', quals=[], storage=[] (at pp.c:22937)
            TypeDecl: declname='crc', quals=[] (at pp.c:22937)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22937)
            TypeDecl: declname='error', quals=[] (at pp.c:22937)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__computeCrcDone', quals=[] (at pp.c:22937)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22939)
  FuncDef:  (at pp.c:22943)
    Decl: name='Stm25pSectorP__Sector__default__computeCrcDone', quals=[], storage=['inline', 'static'] (at pp.c:22943)
      FuncDecl: quals=None (at pp.c:22943)
        ParamList:  (at pp.c:22943)
          Decl: name='id', quals=[], storage=[] (at pp.c:22943)
            TypeDecl: declname='id', quals=[] (at pp.c:22943)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22943)
            TypeDecl: declname='addr', quals=[] (at pp.c:22943)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22943)
            TypeDecl: declname='len', quals=[] (at pp.c:22943)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='crc', quals=[], storage=[] (at pp.c:22943)
            TypeDecl: declname='crc', quals=[] (at pp.c:22943)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22943)
            TypeDecl: declname='error', quals=[] (at pp.c:22943)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__default__computeCrcDone', quals=[] (at pp.c:22943)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22945)
  FuncDef:  (at pp.c:22949)
    Decl: name='Stm25pSectorP__Sector__computeCrcDone', quals=[], storage=['static', 'inline'] (at pp.c:22949)
      FuncDecl: quals=None (at pp.c:22949)
        ParamList:  (at pp.c:22949)
          Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:22949)
            TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:22949)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22949)
            TypeDecl: declname='addr', quals=[] (at pp.c:22949)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22949)
            TypeDecl: declname='len', quals=[] (at pp.c:22949)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='crc', quals=[], storage=[] (at pp.c:22949)
            TypeDecl: declname='crc', quals=[] (at pp.c:22949)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:22949)
            TypeDecl: declname='error', quals=[] (at pp.c:22949)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__computeCrcDone', quals=[] (at pp.c:22949)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:22949)
      Switch:  (at pp.c:22951)
        ID: name='arg_0x101a05328' (at pp.c:22951)
        Compound:  (at pp.c:22951)
          Case:  (at pp.c:22953)
            ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:22953)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Sector__computeCrcDone' (at pp.c:22955)
              ExprList:  (at pp.c:22955)
                ID: name='LogStorageC__0__LOG_ID' (at pp.c:22955)
                ID: name='addr' (at pp.c:22955)
                ID: name='len' (at pp.c:22955)
                ID: name='crc' (at pp.c:22955)
                ID: name='error' (at pp.c:22955)
          Break:  (at pp.c:22957)
          Default:  (at pp.c:22959)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__Sector__default__computeCrcDone' (at pp.c:22961)
              ExprList:  (at pp.c:22961)
                ID: name='arg_0x101a05328' (at pp.c:22961)
                ID: name='addr' (at pp.c:22961)
                ID: name='len' (at pp.c:22961)
                ID: name='crc' (at pp.c:22961)
                ID: name='error' (at pp.c:22961)
          Break:  (at pp.c:22963)
  FuncDef:  (at pp.c:22970)
    Decl: name='Stm25pLogP__Sector__default__read', quals=[], storage=['inline', 'static'] (at pp.c:22970)
      FuncDecl: quals=None (at pp.c:22970)
        ParamList:  (at pp.c:22970)
          Decl: name='id', quals=[], storage=[] (at pp.c:22970)
            TypeDecl: declname='id', quals=[] (at pp.c:22970)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22970)
            TypeDecl: declname='addr', quals=[] (at pp.c:22970)
              IdentifierType: names=['storage_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:22970)
            PtrDecl: quals=[] (at pp.c:22970)
              TypeDecl: declname='buf', quals=[] (at pp.c:22970)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22970)
            TypeDecl: declname='len', quals=[] (at pp.c:22970)
              IdentifierType: names=['storage_len_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__default__read', quals=[] (at pp.c:22970)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22972)
      Return:  (at pp.c:22974)
        ID: name='FAIL' (at pp.c:22974)
  FuncDef:  (at pp.c:22978)
    Decl: name='Stm25pLogP__Sector__read', quals=[], storage=['static', 'inline'] (at pp.c:22978)
      FuncDecl: quals=None (at pp.c:22978)
        ParamList:  (at pp.c:22978)
          Decl: name='arg_0x10192d468', quals=[], storage=[] (at pp.c:22978)
            TypeDecl: declname='arg_0x10192d468', quals=[] (at pp.c:22978)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:22978)
            TypeDecl: declname='addr', quals=[] (at pp.c:22978)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:22978)
            PtrDecl: quals=[] (at pp.c:22978)
              TypeDecl: declname='buf', quals=[] (at pp.c:22978)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:22978)
            TypeDecl: declname='len', quals=[] (at pp.c:22978)
              IdentifierType: names=['stm25p_len_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__read', quals=[] (at pp.c:22978)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:22978)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:22980)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:22980)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:22984)
        ID: name='arg_0x10192d468' (at pp.c:22984)
        Compound:  (at pp.c:22984)
          Case:  (at pp.c:22986)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:22986)
            Assignment: op='=' (at pp.c:22988)
              ID: name='__nesc_result' (at pp.c:22988)
              FuncCall:  (at None)
                ID: name='Stm25pSectorP__Sector__read' (at pp.c:22988)
                ExprList:  (at pp.c:22988)
                  ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:22988)
                  ID: name='addr' (at pp.c:22988)
                  ID: name='buf' (at pp.c:22988)
                  ID: name='len' (at pp.c:22988)
          Break:  (at pp.c:22990)
          Default:  (at pp.c:22992)
            Assignment: op='=' (at pp.c:22994)
              ID: name='__nesc_result' (at pp.c:22994)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__Sector__default__read' (at pp.c:22994)
                ExprList:  (at pp.c:22994)
                  ID: name='arg_0x10192d468' (at pp.c:22994)
                  ID: name='addr' (at pp.c:22994)
                  ID: name='buf' (at pp.c:22994)
                  ID: name='len' (at pp.c:22994)
          Break:  (at pp.c:22996)
      Return:  (at pp.c:23002)
        ID: name='__nesc_result' (at pp.c:23002)
  FuncDef:  (at pp.c:23007)
    Decl: name='Stm25pLogP__Sector__readDone', quals=[], storage=['inline', 'static'] (at pp.c:23007)
      FuncDecl: quals=None (at pp.c:23007)
        ParamList:  (at pp.c:23007)
          Decl: name='id', quals=[], storage=[] (at pp.c:23007)
            TypeDecl: declname='id', quals=[] (at pp.c:23007)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:23007)
            TypeDecl: declname='addr', quals=[] (at pp.c:23007)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:23007)
            PtrDecl: quals=[] (at pp.c:23007)
              TypeDecl: declname='buf', quals=[] (at pp.c:23007)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:23008)
            TypeDecl: declname='len', quals=[] (at pp.c:23008)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:23008)
            TypeDecl: declname='error', quals=[] (at pp.c:23008)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Sector__readDone', quals=[] (at pp.c:23007)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23010)
      Decl: name='log_info', quals=[], storage=[] (at pp.c:23012)
        PtrDecl: quals=[] (at pp.c:23012)
          TypeDecl: declname='log_info', quals=[] (at pp.c:23012)
            IdentifierType: names=['Stm25pLogP__stm25p_log_info_t'] (at None)
        UnaryOp: op='&' (at pp.c:23012)
          ArrayRef:  (at pp.c:23012)
            ID: name='Stm25pLogP__m_log_info' (at pp.c:23012)
            ID: name='id' (at pp.c:23012)
      Switch:  (at pp.c:23015)
        ID: name='Stm25pLogP__m_rw_state' (at pp.c:23015)
        Compound:  (at pp.c:23015)
          Case:  (at pp.c:23016)
            ID: name='Stm25pLogP__S_SEARCH_BLOCKS' (at pp.c:23016)
            Compound:  (at pp.c:23017)
              Decl: name='block', quals=[], storage=[] (at pp.c:23018)
                TypeDecl: declname='block', quals=[] (at pp.c:23018)
                  IdentifierType: names=['uint16_t'] (at None)
                BinaryOp: op='>>' (at pp.c:23018)
                  ID: name='addr' (at pp.c:23018)
                  ID: name='Stm25pLogP__BLOCK_SIZE_LOG2' (at pp.c:23018)
              If:  (at pp.c:23020)
                BinaryOp: op='!=' (at pp.c:23020)
                  ID: name='Stm25pLogP__m_addr' (at pp.c:23020)
                  ID: name='STM25P_INVALID_ADDRESS' (at pp.c:23020)
                Compound:  (at pp.c:23020)
                  If:  (at pp.c:23021)
                    BinaryOp: op='<' (at pp.c:23021)
                      ID: name='Stm25pLogP__m_addr' (at pp.c:23021)
                      StructRef: type='->' (at pp.c:23021)
                        ID: name='log_info' (at pp.c:23021)
                        ID: name='read_addr' (at pp.c:23021)
                    Compound:  (at pp.c:23021)
                      Assignment: op='=' (at pp.c:23022)
                        StructRef: type='->' (at pp.c:23022)
                          ID: name='log_info' (at pp.c:23022)
                          ID: name='read_addr' (at pp.c:23022)
                        ID: name='Stm25pLogP__m_addr' (at pp.c:23022)
                  If:  (at pp.c:23025)
                    BinaryOp: op='>' (at pp.c:23025)
                      ID: name='Stm25pLogP__m_addr' (at pp.c:23025)
                      StructRef: type='->' (at pp.c:23025)
                        ID: name='log_info' (at pp.c:23025)
                        ID: name='write_addr' (at pp.c:23025)
                    Compound:  (at pp.c:23025)
                      Assignment: op='=' (at pp.c:23026)
                        StructRef: type='->' (at pp.c:23026)
                          ID: name='log_info' (at pp.c:23026)
                          ID: name='write_addr' (at pp.c:23026)
                        ID: name='Stm25pLogP__m_addr' (at pp.c:23026)
              If:  (at pp.c:23029)
                BinaryOp: op='<' (at pp.c:23029)
                  UnaryOp: op='++' (at pp.c:23029)
                    ID: name='block' (at pp.c:23029)
                  BinaryOp: op='*' (at None)
                    FuncCall:  (at None)
                      ID: name='Stm25pLogP__Sector__getNumSectors' (at pp.c:23029)
                      ExprList:  (at pp.c:23029)
                        ID: name='id' (at pp.c:23029)
                    ID: name='Stm25pLogP__BLOCKS_PER_SECTOR' (at pp.c:23029)
                Compound:  (at pp.c:23029)
                  Assignment: op='+=' (at pp.c:23030)
                    ID: name='addr' (at pp.c:23030)
                    ID: name='Stm25pLogP__BLOCK_SIZE' (at pp.c:23030)
                  FuncCall:  (at None)
                    ID: name='Stm25pLogP__Sector__read' (at pp.c:23031)
                    ExprList:  (at pp.c:23031)
                      ID: name='id' (at pp.c:23031)
                      ID: name='addr' (at pp.c:23031)
                      Cast:  (at None)
                        Typename: quals=[] (at None)
                          PtrDecl: quals=[] (at pp.c:23031)
                            TypeDecl: declname=None, quals=[] (at None)
                              IdentifierType: names=['uint8_t'] (at None)
                        UnaryOp: op='&' (at pp.c:23031)
                          ID: name='Stm25pLogP__m_addr' (at pp.c:23031)
                      UnaryOp: op='sizeof' (at pp.c:23031)
                        ID: name='Stm25pLogP__m_addr' (at pp.c:23031)
                Compound:  (at pp.c:23033)
                  If:  (at pp.c:23034)
                    BinaryOp: op='==' (at pp.c:23034)
                      StructRef: type='->' (at pp.c:23034)
                        ID: name='log_info' (at pp.c:23034)
                        ID: name='read_addr' (at pp.c:23034)
                      ID: name='STM25P_INVALID_ADDRESS' (at pp.c:23034)
                    Compound:  (at pp.c:23034)
                      Assignment: op='=' (at pp.c:23035)
                        StructRef: type='->' (at pp.c:23035)
                          ID: name='log_info' (at pp.c:23035)
                          ID: name='read_addr' (at pp.c:23035)
                        Constant: type='int', value='0' (at pp.c:23035)
                      Assignment: op='=' (at pp.c:23036)
                        StructRef: type='->' (at pp.c:23036)
                          ID: name='log_info' (at pp.c:23036)
                          ID: name='write_addr' (at pp.c:23036)
                        Constant: type='int', value='0' (at pp.c:23036)
                      FuncCall:  (at None)
                        ID: name='Stm25pLogP__ClientResource__granted' (at pp.c:23037)
                        ExprList:  (at pp.c:23037)
                          ID: name='id' (at pp.c:23037)
                    Compound:  (at pp.c:23040)
                      Assignment: op='+=' (at pp.c:23041)
                        StructRef: type='->' (at pp.c:23041)
                          ID: name='log_info' (at pp.c:23041)
                          ID: name='write_addr' (at pp.c:23041)
                        UnaryOp: op='sizeof' (at pp.c:23041)
                          ID: name='Stm25pLogP__m_addr' (at pp.c:23041)
                      Assignment: op='=' (at pp.c:23042)
                        ID: name='Stm25pLogP__m_rw_state' (at pp.c:23042)
                        ID: name='Stm25pLogP__S_SEARCH_RECORDS' (at pp.c:23042)
                      FuncCall:  (at None)
                        ID: name='Stm25pLogP__Sector__read' (at pp.c:23043)
                        ExprList:  (at pp.c:23043)
                          ID: name='id' (at pp.c:23043)
                          FuncCall:  (at None)
                            ID: name='Stm25pLogP__calcAddr' (at pp.c:23043)
                            ExprList:  (at pp.c:23043)
                              ID: name='id' (at pp.c:23043)
                              StructRef: type='->' (at pp.c:23043)
                                ID: name='log_info' (at pp.c:23043)
                                ID: name='write_addr' (at pp.c:23043)
                          UnaryOp: op='&' (at pp.c:23043)
                            ID: name='Stm25pLogP__m_header' (at pp.c:23043)
                          UnaryOp: op='sizeof' (at pp.c:23044)
                            ID: name='Stm25pLogP__m_header' (at pp.c:23044)
          Break:  (at pp.c:23049)
          Case:  (at pp.c:23051)
            ID: name='Stm25pLogP__S_SEARCH_RECORDS' (at pp.c:23051)
            Compound:  (at pp.c:23052)
              Decl: name='cur_block', quals=[], storage=[] (at pp.c:23054)
                TypeDecl: declname='cur_block', quals=[] (at pp.c:23054)
                  IdentifierType: names=['uint16_t'] (at None)
                BinaryOp: op='>>' (at pp.c:23054)
                  StructRef: type='->' (at pp.c:23054)
                    ID: name='log_info' (at pp.c:23054)
                    ID: name='write_addr' (at pp.c:23054)
                  ID: name='Stm25pLogP__BLOCK_SIZE_LOG2' (at pp.c:23054)
              Decl: name='new_block', quals=[], storage=[] (at pp.c:23055)
                TypeDecl: declname='new_block', quals=[] (at pp.c:23055)
                  IdentifierType: names=['uint16_t'] (at None)
                BinaryOp: op='>>' (at pp.c:23055)
                  BinaryOp: op='+' (at pp.c:23055)
                    BinaryOp: op='+' (at pp.c:23055)
                      StructRef: type='->' (at pp.c:23055)
                        ID: name='log_info' (at pp.c:23055)
                        ID: name='write_addr' (at pp.c:23055)
                      UnaryOp: op='sizeof' (at pp.c:23055)
                        ID: name='Stm25pLogP__m_header' (at pp.c:23055)
                    ID: name='Stm25pLogP__m_header' (at pp.c:23056)
                  ID: name='Stm25pLogP__BLOCK_SIZE_LOG2' (at pp.c:23056)
              If:  (at pp.c:23058)
                BinaryOp: op='&&' (at pp.c:23058)
                  BinaryOp: op='!=' (at pp.c:23058)
                    ID: name='Stm25pLogP__m_header' (at pp.c:23058)
                    ID: name='Stm25pLogP__INVALID_HEADER' (at pp.c:23058)
                  BinaryOp: op='==' (at pp.c:23058)
                    ID: name='cur_block' (at pp.c:23058)
                    ID: name='new_block' (at pp.c:23058)
                Compound:  (at pp.c:23058)
                  Assignment: op='+=' (at pp.c:23059)
                    StructRef: type='->' (at pp.c:23059)
                      ID: name='log_info' (at pp.c:23059)
                      ID: name='write_addr' (at pp.c:23059)
                    BinaryOp: op='+' (at pp.c:23059)
                      UnaryOp: op='sizeof' (at pp.c:23059)
                        ID: name='Stm25pLogP__m_header' (at pp.c:23059)
                      ID: name='Stm25pLogP__m_header' (at pp.c:23059)
                  FuncCall:  (at None)
                    ID: name='Stm25pLogP__Sector__read' (at pp.c:23060)
                    ExprList:  (at pp.c:23060)
                      ID: name='id' (at pp.c:23060)
                      FuncCall:  (at None)
                        ID: name='Stm25pLogP__calcAddr' (at pp.c:23060)
                        ExprList:  (at pp.c:23060)
                          ID: name='id' (at pp.c:23060)
                          StructRef: type='->' (at pp.c:23060)
                            ID: name='log_info' (at pp.c:23060)
                            ID: name='write_addr' (at pp.c:23060)
                      UnaryOp: op='&' (at pp.c:23061)
                        ID: name='Stm25pLogP__m_header' (at pp.c:23061)
                      UnaryOp: op='sizeof' (at pp.c:23061)
                        ID: name='Stm25pLogP__m_header' (at pp.c:23061)
                Compound:  (at pp.c:23064)
                  FuncCall:  (at None)
                    ID: name='Stm25pLogP__ClientResource__granted' (at pp.c:23065)
                    ExprList:  (at pp.c:23065)
                      ID: name='id' (at pp.c:23065)
          Break:  (at pp.c:23068)
          Case:  (at pp.c:23070)
            ID: name='Stm25pLogP__S_SEARCH_SEEK' (at pp.c:23070)
            Compound:  (at pp.c:23071)
              Assignment: op='+=' (at pp.c:23073)
                StructRef: type='->' (at pp.c:23073)
                  ID: name='log_info' (at pp.c:23073)
                  ID: name='read_addr' (at pp.c:23073)
                BinaryOp: op='+' (at pp.c:23073)
                  UnaryOp: op='sizeof' (at pp.c:23073)
                    ID: name='Stm25pLogP__m_header' (at pp.c:23073)
                  ID: name='Stm25pLogP__m_header' (at pp.c:23073)
              If:  (at pp.c:23075)
                BinaryOp: op='<' (at pp.c:23075)
                  StructRef: type='->' (at pp.c:23075)
                    ID: name='log_info' (at pp.c:23075)
                    ID: name='read_addr' (at pp.c:23075)
                  StructRef: type='.' (at pp.c:23075)
                    ArrayRef:  (at pp.c:23075)
                      ID: name='Stm25pLogP__m_log_state' (at pp.c:23075)
                      ID: name='id' (at pp.c:23075)
                    ID: name='cookie' (at pp.c:23075)
                Compound:  (at pp.c:23075)
                  FuncCall:  (at None)
                    ID: name='Stm25pLogP__Sector__read' (at pp.c:23076)
                    ExprList:  (at pp.c:23076)
                      ID: name='id' (at pp.c:23076)
                      FuncCall:  (at None)
                        ID: name='Stm25pLogP__calcAddr' (at pp.c:23076)
                        ExprList:  (at pp.c:23076)
                          ID: name='id' (at pp.c:23076)
                          StructRef: type='->' (at pp.c:23076)
                            ID: name='log_info' (at pp.c:23076)
                            ID: name='read_addr' (at pp.c:23076)
                      UnaryOp: op='&' (at pp.c:23076)
                        ID: name='Stm25pLogP__m_header' (at pp.c:23076)
                      UnaryOp: op='sizeof' (at pp.c:23077)
                        ID: name='Stm25pLogP__m_header' (at pp.c:23077)
                Compound:  (at pp.c:23080)
                  Assignment: op='=' (at pp.c:23081)
                    StructRef: type='->' (at pp.c:23081)
                      ID: name='log_info' (at pp.c:23081)
                      ID: name='remaining' (at pp.c:23081)
                    BinaryOp: op='-' (at pp.c:23081)
                      StructRef: type='->' (at pp.c:23081)
                        ID: name='log_info' (at pp.c:23081)
                        ID: name='read_addr' (at pp.c:23081)
                      StructRef: type='.' (at pp.c:23081)
                        ArrayRef:  (at pp.c:23081)
                          ID: name='Stm25pLogP__m_log_state' (at pp.c:23081)
                          ID: name='id' (at pp.c:23081)
                        ID: name='cookie' (at pp.c:23081)
                  Assignment: op='=' (at pp.c:23082)
                    StructRef: type='->' (at pp.c:23082)
                      ID: name='log_info' (at pp.c:23082)
                      ID: name='read_addr' (at pp.c:23082)
                    StructRef: type='.' (at pp.c:23082)
                      ArrayRef:  (at pp.c:23082)
                        ID: name='Stm25pLogP__m_log_state' (at pp.c:23082)
                        ID: name='id' (at pp.c:23082)
                      ID: name='cookie' (at pp.c:23082)
                  FuncCall:  (at None)
                    ID: name='Stm25pLogP__signalDone' (at pp.c:23083)
                    ExprList:  (at pp.c:23083)
                      ID: name='id' (at pp.c:23083)
                      ID: name='error' (at pp.c:23083)
          Break:  (at pp.c:23086)
          Case:  (at pp.c:23088)
            ID: name='Stm25pLogP__S_HEADER' (at pp.c:23088)
            Compound:  (at pp.c:23089)
              If:  (at pp.c:23091)
                BinaryOp: op='==' (at pp.c:23091)
                  ID: name='Stm25pLogP__m_header' (at pp.c:23091)
                  ID: name='Stm25pLogP__INVALID_HEADER' (at pp.c:23091)
                Compound:  (at pp.c:23091)
                  Assignment: op='+=' (at pp.c:23092)
                    StructRef: type='->' (at pp.c:23092)
                      ID: name='log_info' (at pp.c:23092)
                      ID: name='read_addr' (at pp.c:23092)
                    ID: name='Stm25pLogP__BLOCK_SIZE' (at pp.c:23092)
                  Assignment: op='&=' (at pp.c:23093)
                    StructRef: type='->' (at pp.c:23093)
                      ID: name='log_info' (at pp.c:23093)
                      ID: name='read_addr' (at pp.c:23093)
                    UnaryOp: op='~' (at pp.c:23093)
                      ID: name='Stm25pLogP__BLOCK_MASK' (at pp.c:23093)
                Compound:  (at pp.c:23095)
                  Assignment: op='+=' (at pp.c:23096)
                    StructRef: type='->' (at pp.c:23096)
                      ID: name='log_info' (at pp.c:23096)
                      ID: name='read_addr' (at pp.c:23096)
                    UnaryOp: op='sizeof' (at pp.c:23096)
                      ID: name='Stm25pLogP__m_header' (at pp.c:23096)
                  Assignment: op='=' (at pp.c:23097)
                    StructRef: type='->' (at pp.c:23097)
                      ID: name='log_info' (at pp.c:23097)
                      ID: name='remaining' (at pp.c:23097)
                    ID: name='Stm25pLogP__m_header' (at pp.c:23097)
                  Assignment: op='=' (at pp.c:23098)
                    ID: name='Stm25pLogP__m_rw_state' (at pp.c:23098)
                    ID: name='Stm25pLogP__S_DATA' (at pp.c:23098)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__continueReadOp' (at pp.c:23100)
                ExprList:  (at pp.c:23100)
                  ID: name='id' (at pp.c:23100)
          Break:  (at pp.c:23102)
          Case:  (at pp.c:23104)
            ID: name='Stm25pLogP__S_DATA' (at pp.c:23104)
            Compound:  (at pp.c:23105)
              Assignment: op='+=' (at pp.c:23106)
                StructRef: type='->' (at pp.c:23106)
                  ID: name='log_info' (at pp.c:23106)
                  ID: name='read_addr' (at pp.c:23106)
                ID: name='len' (at pp.c:23106)
              Assignment: op='-=' (at pp.c:23107)
                StructRef: type='->' (at pp.c:23107)
                  ID: name='log_info' (at pp.c:23107)
                  ID: name='remaining' (at pp.c:23107)
                ID: name='len' (at pp.c:23107)
              Assignment: op='-=' (at pp.c:23108)
                ID: name='Stm25pLogP__m_len' (at pp.c:23108)
                ID: name='len' (at pp.c:23108)
              Assignment: op='=' (at pp.c:23109)
                ID: name='Stm25pLogP__m_rw_state' (at pp.c:23109)
                ID: name='Stm25pLogP__S_HEADER' (at pp.c:23109)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__continueReadOp' (at pp.c:23110)
                ExprList:  (at pp.c:23110)
                  ID: name='id' (at pp.c:23110)
              Break:  (at pp.c:23111)
  FuncDef:  (at pp.c:23117)
    Decl: name='Stm25pSectorP__Sector__default__readDone', quals=[], storage=['inline', 'static'] (at pp.c:23117)
      FuncDecl: quals=None (at pp.c:23117)
        ParamList:  (at pp.c:23117)
          Decl: name='id', quals=[], storage=[] (at pp.c:23117)
            TypeDecl: declname='id', quals=[] (at pp.c:23117)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:23117)
            TypeDecl: declname='addr', quals=[] (at pp.c:23117)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:23117)
            PtrDecl: quals=[] (at pp.c:23117)
              TypeDecl: declname='buf', quals=[] (at pp.c:23117)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:23117)
            TypeDecl: declname='len', quals=[] (at pp.c:23117)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:23117)
            TypeDecl: declname='error', quals=[] (at pp.c:23117)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__default__readDone', quals=[] (at pp.c:23117)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23119)
  FuncDef:  (at pp.c:23123)
    Decl: name='Stm25pSectorP__Sector__readDone', quals=[], storage=['static', 'inline'] (at pp.c:23123)
      FuncDecl: quals=None (at pp.c:23123)
        ParamList:  (at pp.c:23123)
          Decl: name='arg_0x101a05328', quals=[], storage=[] (at pp.c:23123)
            TypeDecl: declname='arg_0x101a05328', quals=[] (at pp.c:23123)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:23123)
            TypeDecl: declname='addr', quals=[] (at pp.c:23123)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:23123)
            PtrDecl: quals=[] (at pp.c:23123)
              TypeDecl: declname='buf', quals=[] (at pp.c:23123)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:23123)
            TypeDecl: declname='len', quals=[] (at pp.c:23123)
              IdentifierType: names=['stm25p_len_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:23123)
            TypeDecl: declname='error', quals=[] (at pp.c:23123)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__readDone', quals=[] (at pp.c:23123)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23123)
      Switch:  (at pp.c:23125)
        ID: name='arg_0x101a05328' (at pp.c:23125)
        Compound:  (at pp.c:23125)
          Case:  (at pp.c:23127)
            ID: name='LogStorageC__0__VOLUME_ID' (at pp.c:23127)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Sector__readDone' (at pp.c:23129)
              ExprList:  (at pp.c:23129)
                ID: name='LogStorageC__0__LOG_ID' (at pp.c:23129)
                ID: name='addr' (at pp.c:23129)
                ID: name='buf' (at pp.c:23129)
                ID: name='len' (at pp.c:23129)
                ID: name='error' (at pp.c:23129)
          Break:  (at pp.c:23131)
          Default:  (at pp.c:23133)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__Sector__default__readDone' (at pp.c:23135)
              ExprList:  (at pp.c:23135)
                ID: name='arg_0x101a05328' (at pp.c:23135)
                ID: name='addr' (at pp.c:23135)
                ID: name='buf' (at pp.c:23135)
                ID: name='len' (at pp.c:23135)
                ID: name='error' (at pp.c:23135)
          Break:  (at pp.c:23137)
  FuncDef:  (at pp.c:23144)
    Decl: name='Stm25pSectorP__signalDone_task__runTask', quals=[], storage=['inline', 'static'] (at pp.c:23144)
      FuncDecl: quals=None (at pp.c:23144)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSectorP__signalDone_task__runTask', quals=[] (at pp.c:23144)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23146)
      Switch:  (at pp.c:23147)
        ID: name='Stm25pSectorP__m_state' (at pp.c:23147)
        Compound:  (at pp.c:23147)
          Case:  (at pp.c:23148)
            ID: name='Stm25pSectorP__S_IDLE' (at pp.c:23148)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__ClientResource__granted' (at pp.c:23149)
              ExprList:  (at pp.c:23149)
                ID: name='Stm25pSectorP__m_client' (at pp.c:23149)
          Break:  (at pp.c:23150)
          Case:  (at pp.c:23151)
            ID: name='Stm25pSectorP__S_READ' (at pp.c:23151)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__Sector__readDone' (at pp.c:23152)
              ExprList:  (at pp.c:23152)
                ID: name='Stm25pSectorP__m_client' (at pp.c:23152)
                ID: name='Stm25pSectorP__m_addr' (at pp.c:23152)
                ID: name='Stm25pSectorP__m_buf' (at pp.c:23152)
                ID: name='Stm25pSectorP__m_len' (at pp.c:23152)
                ID: name='Stm25pSectorP__m_error' (at pp.c:23152)
          Break:  (at pp.c:23153)
          Case:  (at pp.c:23154)
            ID: name='Stm25pSectorP__S_CRC' (at pp.c:23154)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__Sector__computeCrcDone' (at pp.c:23155)
              ExprList:  (at pp.c:23155)
                ID: name='Stm25pSectorP__m_client' (at pp.c:23155)
                ID: name='Stm25pSectorP__m_addr' (at pp.c:23155)
                ID: name='Stm25pSectorP__m_len' (at pp.c:23155)
                ID: name='Stm25pSectorP__m_crc' (at pp.c:23156)
                ID: name='Stm25pSectorP__m_error' (at pp.c:23156)
          Break:  (at pp.c:23157)
          Case:  (at pp.c:23158)
            ID: name='Stm25pSectorP__S_WRITE' (at pp.c:23158)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__Sector__writeDone' (at pp.c:23159)
              ExprList:  (at pp.c:23159)
                ID: name='Stm25pSectorP__m_client' (at pp.c:23159)
                ID: name='Stm25pSectorP__m_addr' (at pp.c:23159)
                ID: name='Stm25pSectorP__m_buf' (at pp.c:23159)
                ID: name='Stm25pSectorP__m_len' (at pp.c:23159)
                ID: name='Stm25pSectorP__m_error' (at pp.c:23159)
          Break:  (at pp.c:23160)
          Case:  (at pp.c:23161)
            ID: name='Stm25pSectorP__S_ERASE' (at pp.c:23161)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__Sector__eraseDone' (at pp.c:23162)
              ExprList:  (at pp.c:23162)
                ID: name='Stm25pSectorP__m_client' (at pp.c:23162)
                ID: name='Stm25pSectorP__m_addr' (at pp.c:23162)
                ID: name='Stm25pSectorP__m_len' (at pp.c:23162)
                ID: name='Stm25pSectorP__m_error' (at pp.c:23162)
          Break:  (at pp.c:23163)
          Default:  (at pp.c:23164)
            Break:  (at pp.c:23165)
  FuncDef:  (at pp.c:23170)
    Decl: name='NoLedsC__Leds__led2Toggle', quals=[], storage=['inline', 'static'] (at pp.c:23170)
      FuncDecl: quals=None (at pp.c:23170)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='NoLedsC__Leds__led2Toggle', quals=[] (at pp.c:23170)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23172)
  FuncDef:  (at pp.c:23176)
    Decl: name='PeriodicSampleLoggerP__0__Leds__led2Toggle', quals=[], storage=['static', 'inline'] (at pp.c:23176)
      FuncDecl: quals=None (at pp.c:23176)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__Leds__led2Toggle', quals=[] (at pp.c:23176)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23176)
      FuncCall:  (at None)
        ID: name='NoLedsC__Leds__led2Toggle' (at pp.c:23178)
  FuncDef:  (at pp.c:23183)
    Decl: name='NoLedsC__Leds__led1Toggle', quals=[], storage=['inline', 'static'] (at pp.c:23183)
      FuncDecl: quals=None (at pp.c:23183)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='NoLedsC__Leds__led1Toggle', quals=[] (at pp.c:23183)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23185)
  FuncDef:  (at pp.c:23189)
    Decl: name='PeriodicSampleLoggerP__0__Leds__led1Toggle', quals=[], storage=['static', 'inline'] (at pp.c:23189)
      FuncDecl: quals=None (at pp.c:23189)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__Leds__led1Toggle', quals=[] (at pp.c:23189)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23189)
      FuncCall:  (at None)
        ID: name='NoLedsC__Leds__led1Toggle' (at pp.c:23191)
  FuncDef:  (at pp.c:23196)
    Decl: name='PeriodicSampleLoggerP__0__Sensor__readDone', quals=[], storage=['inline', 'static'] (at pp.c:23196)
      FuncDecl: quals=None (at pp.c:23196)
        ParamList:  (at pp.c:23196)
          Decl: name='i', quals=[], storage=[] (at pp.c:23196)
            TypeDecl: declname='i', quals=[] (at pp.c:23196)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='result', quals=[], storage=[] (at pp.c:23196)
            TypeDecl: declname='result', quals=[] (at pp.c:23196)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='val', quals=[], storage=[] (at pp.c:23196)
            TypeDecl: declname='val', quals=[] (at pp.c:23196)
              IdentifierType: names=['PeriodicSampleLoggerP__0__sensor_type_t'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__Sensor__readDone', quals=[] (at pp.c:23196)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23198)
      If:  (at pp.c:23199)
        BinaryOp: op='==' (at pp.c:23199)
          ID: name='result' (at pp.c:23199)
          ID: name='SUCCESS' (at pp.c:23199)
        Compound:  (at pp.c:23199)
          Assignment: op='=' (at pp.c:23200)
            ArrayRef:  (at pp.c:23200)
              StructRef: type='->' (at pp.c:23200)
                ID: name='PeriodicSampleLoggerP__0__current_sample' (at pp.c:23200)
                ID: name='values' (at pp.c:23200)
              ID: name='i' (at pp.c:23200)
            ID: name='val' (at pp.c:23200)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__Leds__led1Toggle' (at pp.c:23201)
        Compound:  (at pp.c:23203)
          Assignment: op='=' (at pp.c:23204)
            ArrayRef:  (at pp.c:23204)
              StructRef: type='->' (at pp.c:23204)
                ID: name='PeriodicSampleLoggerP__0__current_sample' (at pp.c:23204)
                ID: name='values' (at pp.c:23204)
              ID: name='i' (at pp.c:23204)
            StructRef: type='.' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['PeriodicSampleLoggerP__0__generic_sensor_sample_type_union_t'] (at None)
                Constant: type='int', value='0xFFFFFFFF' (at pp.c:23204)
              ID: name='st' (at pp.c:23204)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__Leds__led2Toggle' (at pp.c:23205)
  FuncDef:  (at pp.c:23210)
    Decl: name='SineSensorC__0__Read__readDone', quals=[], storage=['static', 'inline'] (at pp.c:23210)
      FuncDecl: quals=None (at pp.c:23210)
        ParamList:  (at pp.c:23210)
          Decl: name='result', quals=[], storage=[] (at pp.c:23210)
            TypeDecl: declname='result', quals=[] (at pp.c:23210)
              IdentifierType: names=['error_t'] (at None)
          Decl: name='val', quals=[], storage=[] (at pp.c:23210)
            TypeDecl: declname='val', quals=[] (at pp.c:23210)
              IdentifierType: names=['SineSensorC__0__Read__val_t'] (at None)
        TypeDecl: declname='SineSensorC__0__Read__readDone', quals=[] (at pp.c:23210)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23210)
      FuncCall:  (at None)
        ID: name='PeriodicSampleLoggerP__0__Sensor__readDone' (at pp.c:23212)
        ExprList:  (at pp.c:23212)
          Constant: type='int', value='0' (at pp.c:23212)
          ID: name='result' (at pp.c:23212)
          ID: name='val' (at pp.c:23212)
  FuncDef:  (at pp.c:23217)
    Decl: name='SineSensorC__0__readTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:23217)
      FuncDecl: quals=None (at pp.c:23217)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SineSensorC__0__readTask__runTask', quals=[] (at pp.c:23217)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23219)
      Decl: name='val', quals=[], storage=[] (at pp.c:23220)
        TypeDecl: declname='val', quals=[] (at pp.c:23220)
          IdentifierType: names=['float'] (at None)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['float'] (at None)
          ID: name='SineSensorC__0__counter' (at pp.c:23220)
      Assignment: op='=' (at pp.c:23223)
        ID: name='val' (at pp.c:23223)
        BinaryOp: op='/' (at pp.c:23223)
          ID: name='val' (at pp.c:23223)
          Constant: type='float', value='20.0' (at pp.c:23223)
      Assignment: op='=' (at pp.c:23224)
        ID: name='val' (at pp.c:23224)
        BinaryOp: op='*' (at None)
          FuncCall:  (at None)
            ID: name='sin' (at pp.c:23224)
            ExprList:  (at pp.c:23224)
              ID: name='val' (at pp.c:23224)
          Constant: type='float', value='32768.0' (at pp.c:23224)
      Assignment: op='+=' (at pp.c:23225)
        ID: name='val' (at pp.c:23225)
        Constant: type='float', value='32768.0' (at pp.c:23225)
      UnaryOp: op='p++' (at pp.c:23226)
        ID: name='SineSensorC__0__counter' (at pp.c:23226)
      FuncCall:  (at None)
        ID: name='SineSensorC__0__Read__readDone' (at pp.c:23227)
        ExprList:  (at pp.c:23227)
          ID: name='SUCCESS' (at pp.c:23227)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint16_t'] (at None)
            ID: name='val' (at pp.c:23227)
  FuncDef:  (at pp.c:23231)
    Decl: name='AlarmToTimerC__0__Alarm__startAt', quals=[], storage=['static', 'inline'] (at pp.c:23231)
      FuncDecl: quals=None (at pp.c:23231)
        ParamList:  (at pp.c:23231)
          Decl: name='t0', quals=[], storage=[] (at pp.c:23231)
            TypeDecl: declname='t0', quals=[] (at pp.c:23231)
              IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:23231)
            TypeDecl: declname='dt', quals=[] (at pp.c:23231)
              IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Alarm__startAt', quals=[] (at pp.c:23231)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23231)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__Alarm__startAt' (at pp.c:23233)
        ExprList:  (at pp.c:23233)
          ID: name='t0' (at pp.c:23233)
          ID: name='dt' (at pp.c:23233)
  FuncDef:  (at pp.c:23238)
    Decl: name='AlarmToTimerC__0__start', quals=[], storage=['inline', 'static'] (at pp.c:23238)
      FuncDecl: quals=None (at pp.c:23238)
        ParamList:  (at pp.c:23238)
          Decl: name='t0', quals=[], storage=[] (at pp.c:23238)
            TypeDecl: declname='t0', quals=[] (at pp.c:23238)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:23238)
            TypeDecl: declname='dt', quals=[] (at pp.c:23238)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='oneshot', quals=[], storage=[] (at pp.c:23238)
            TypeDecl: declname='oneshot', quals=[] (at pp.c:23238)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__start', quals=[] (at pp.c:23238)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23239)
      Assignment: op='=' (at pp.c:23240)
        ID: name='AlarmToTimerC__0__m_dt' (at pp.c:23240)
        ID: name='dt' (at pp.c:23240)
      Assignment: op='=' (at pp.c:23241)
        ID: name='AlarmToTimerC__0__m_oneshot' (at pp.c:23241)
        ID: name='oneshot' (at pp.c:23241)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Alarm__startAt' (at pp.c:23242)
        ExprList:  (at pp.c:23242)
          ID: name='t0' (at pp.c:23242)
          ID: name='dt' (at pp.c:23242)
  FuncDef:  (at pp.c:23246)
    Decl: name='AlarmToTimerC__0__Timer__startOneShotAt', quals=[], storage=['inline', 'static'] (at pp.c:23246)
      FuncDecl: quals=None (at pp.c:23246)
        ParamList:  (at pp.c:23246)
          Decl: name='t0', quals=[], storage=[] (at pp.c:23246)
            TypeDecl: declname='t0', quals=[] (at pp.c:23246)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:23246)
            TypeDecl: declname='dt', quals=[] (at pp.c:23246)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Timer__startOneShotAt', quals=[] (at pp.c:23246)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23247)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__start' (at pp.c:23249)
        ExprList:  (at pp.c:23249)
          ID: name='t0' (at pp.c:23249)
          ID: name='dt' (at pp.c:23249)
          ID: name='TRUE' (at pp.c:23249)
  FuncDef:  (at pp.c:23253)
    Decl: name='VirtualizeTimerC__0__TimerFrom__startOneShotAt', quals=[], storage=['static', 'inline'] (at pp.c:23253)
      FuncDecl: quals=None (at pp.c:23253)
        ParamList:  (at pp.c:23253)
          Decl: name='t0', quals=[], storage=[] (at pp.c:23253)
            TypeDecl: declname='t0', quals=[] (at pp.c:23253)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:23253)
            TypeDecl: declname='dt', quals=[] (at pp.c:23253)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__startOneShotAt', quals=[] (at pp.c:23253)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23253)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Timer__startOneShotAt' (at pp.c:23255)
        ExprList:  (at pp.c:23255)
          ID: name='t0' (at pp.c:23255)
          ID: name='dt' (at pp.c:23255)
  FuncDef:  (at pp.c:23260)
    Decl: name='Msp430AlarmC__0__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:23260)
      FuncDecl: quals=None (at pp.c:23260)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Alarm__stop', quals=[] (at pp.c:23260)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23261)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430TimerControl__disableEvents' (at pp.c:23262)
  FuncDef:  (at pp.c:23266)
    Decl: name='TransformAlarmC__0__AlarmFrom__stop', quals=[], storage=['static', 'inline'] (at pp.c:23266)
      FuncDecl: quals=None (at pp.c:23266)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__AlarmFrom__stop', quals=[] (at pp.c:23266)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23266)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Alarm__stop' (at pp.c:23268)
  FuncDef:  (at pp.c:23273)
    Decl: name='TransformAlarmC__0__Alarm__stop', quals=[], storage=['inline', 'static'] (at pp.c:23273)
      FuncDecl: quals=None (at pp.c:23273)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Alarm__stop', quals=[] (at pp.c:23273)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23274)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__AlarmFrom__stop' (at pp.c:23275)
  FuncDef:  (at pp.c:23279)
    Decl: name='AlarmToTimerC__0__Alarm__stop', quals=[], storage=['static', 'inline'] (at pp.c:23279)
      FuncDecl: quals=None (at pp.c:23279)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Alarm__stop', quals=[] (at pp.c:23279)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23279)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__Alarm__stop' (at pp.c:23281)
  FuncDef:  (at pp.c:23286)
    Decl: name='AlarmToTimerC__0__Timer__stop', quals=[], storage=['inline', 'static'] (at pp.c:23286)
      FuncDecl: quals=None (at pp.c:23286)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Timer__stop', quals=[] (at pp.c:23286)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23287)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Alarm__stop' (at pp.c:23289)
  FuncDef:  (at pp.c:23293)
    Decl: name='VirtualizeTimerC__0__TimerFrom__stop', quals=[], storage=['static', 'inline'] (at pp.c:23293)
      FuncDecl: quals=None (at pp.c:23293)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__stop', quals=[] (at pp.c:23293)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23293)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Timer__stop' (at pp.c:23295)
  FuncDef:  (at pp.c:23300)
    Decl: name='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[], storage=['inline', 'static'] (at pp.c:23300)
      FuncDecl: quals=None (at pp.c:23300)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__updateFromTimer__runTask', quals=[] (at pp.c:23300)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23301)
      Decl: name='now', quals=[], storage=[] (at pp.c:23306)
        TypeDecl: declname='now', quals=[] (at pp.c:23306)
          IdentifierType: names=['uint32_t'] (at None)
        FuncCall:  (at None)
          ID: name='VirtualizeTimerC__0__TimerFrom__getNow' (at pp.c:23306)
      Decl: name='min_remaining', quals=[], storage=[] (at pp.c:23307)
        TypeDecl: declname='min_remaining', quals=[] (at pp.c:23307)
          IdentifierType: names=['int32_t'] (at None)
        BinaryOp: op='-' (at pp.c:23307)
          BinaryOp: op='<<' (at pp.c:23307)
            Constant: type='int', value='1UL' (at pp.c:23307)
            Constant: type='int', value='31' (at pp.c:23307)
          Constant: type='int', value='1' (at pp.c:23307)
      Decl: name='min_remaining_isset', quals=[], storage=[] (at pp.c:23308)
        TypeDecl: declname='min_remaining_isset', quals=[] (at pp.c:23308)
          IdentifierType: names=['bool'] (at None)
        ID: name='FALSE' (at pp.c:23308)
      Decl: name='num', quals=[], storage=[] (at pp.c:23309)
        TypeDecl: declname='num', quals=[] (at pp.c:23309)
          IdentifierType: names=['uint8_t'] (at None)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__TimerFrom__stop' (at pp.c:23311)
      For:  (at pp.c:23313)
        Assignment: op='=' (at pp.c:23313)
          ID: name='num' (at pp.c:23313)
          Constant: type='int', value='0' (at pp.c:23313)
        BinaryOp: op='<' (at pp.c:23313)
          ID: name='num' (at pp.c:23313)
          ID: name='VirtualizeTimerC__0__NUM_TIMERS' (at pp.c:23313)
        UnaryOp: op='p++' (at pp.c:23313)
          ID: name='num' (at pp.c:23313)
        Compound:  (at pp.c:23314)
          Decl: name='timer', quals=[], storage=[] (at pp.c:23315)
            PtrDecl: quals=[] (at pp.c:23315)
              TypeDecl: declname='timer', quals=[] (at pp.c:23315)
                IdentifierType: names=['VirtualizeTimerC__0__Timer_t'] (at None)
            UnaryOp: op='&' (at pp.c:23315)
              ArrayRef:  (at pp.c:23315)
                ID: name='VirtualizeTimerC__0__m_timers' (at pp.c:23315)
                ID: name='num' (at pp.c:23315)
          If:  (at pp.c:23317)
            StructRef: type='->' (at pp.c:23317)
              ID: name='timer' (at pp.c:23317)
              ID: name='isrunning' (at pp.c:23317)
            Compound:  (at pp.c:23318)
              Decl: name='elapsed', quals=[], storage=[] (at pp.c:23319)
                TypeDecl: declname='elapsed', quals=[] (at pp.c:23319)
                  IdentifierType: names=['uint32_t'] (at None)
                BinaryOp: op='-' (at pp.c:23319)
                  ID: name='now' (at pp.c:23319)
                  StructRef: type='->' (at pp.c:23319)
                    ID: name='timer' (at pp.c:23319)
                    ID: name='t0' (at pp.c:23319)
              Decl: name='remaining', quals=[], storage=[] (at pp.c:23320)
                TypeDecl: declname='remaining', quals=[] (at pp.c:23320)
                  IdentifierType: names=['int32_t'] (at None)
                BinaryOp: op='-' (at pp.c:23320)
                  StructRef: type='->' (at pp.c:23320)
                    ID: name='timer' (at pp.c:23320)
                    ID: name='dt' (at pp.c:23320)
                  ID: name='elapsed' (at pp.c:23320)
              If:  (at pp.c:23322)
                BinaryOp: op='<' (at pp.c:23322)
                  ID: name='remaining' (at pp.c:23322)
                  ID: name='min_remaining' (at pp.c:23322)
                Compound:  (at pp.c:23323)
                  Assignment: op='=' (at pp.c:23324)
                    ID: name='min_remaining' (at pp.c:23324)
                    ID: name='remaining' (at pp.c:23324)
                  Assignment: op='=' (at pp.c:23325)
                    ID: name='min_remaining_isset' (at pp.c:23325)
                    ID: name='TRUE' (at pp.c:23325)
      If:  (at pp.c:23330)
        ID: name='min_remaining_isset' (at pp.c:23330)
        Compound:  (at pp.c:23331)
          If:  (at pp.c:23332)
            BinaryOp: op='<=' (at pp.c:23332)
              ID: name='min_remaining' (at pp.c:23332)
              Constant: type='int', value='0' (at pp.c:23332)
            Compound:  (at pp.c:23332)
              FuncCall:  (at None)
                ID: name='VirtualizeTimerC__0__fireTimers' (at pp.c:23333)
                ExprList:  (at pp.c:23333)
                  ID: name='now' (at pp.c:23333)
            Compound:  (at pp.c:23335)
              FuncCall:  (at None)
                ID: name='VirtualizeTimerC__0__TimerFrom__startOneShotAt' (at pp.c:23337)
                ExprList:  (at pp.c:23337)
                  ID: name='now' (at pp.c:23337)
                  ID: name='min_remaining' (at pp.c:23337)
  FuncDef:  (at pp.c:23343)
    Decl: name='NoLedsC__Leds__led0Toggle', quals=[], storage=['inline', 'static'] (at pp.c:23343)
      FuncDecl: quals=None (at pp.c:23343)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='NoLedsC__Leds__led0Toggle', quals=[] (at pp.c:23343)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23345)
  FuncDef:  (at pp.c:23349)
    Decl: name='PeriodicSampleLoggerP__0__Leds__led0Toggle', quals=[], storage=['static', 'inline'] (at pp.c:23349)
      FuncDecl: quals=None (at pp.c:23349)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__Leds__led0Toggle', quals=[] (at pp.c:23349)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23349)
      FuncCall:  (at None)
        ID: name='NoLedsC__Leds__led0Toggle' (at pp.c:23351)
  FuncDef:  (at pp.c:23356)
    Decl: name='PeriodicSampleLoggerP__0__Timer__fired', quals=[], storage=['inline', 'static'] (at pp.c:23356)
      FuncDecl: quals=None (at pp.c:23356)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__Timer__fired', quals=[] (at pp.c:23356)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23358)
      FuncCall:  (at None)
        ID: name='PeriodicSampleLoggerP__0__Leds__led0Toggle' (at pp.c:23359)
      FuncCall:  (at None)
        ID: name='PeriodicSampleLoggerP__0__appendSample' (at pp.c:23360)
        ExprList:  (at pp.c:23360)
          ID: name='PeriodicSampleLoggerP__0__current_sample' (at pp.c:23360)
      Assignment: op='=' (at pp.c:23361)
        ID: name='PeriodicSampleLoggerP__0__current_sample_id' (at pp.c:23361)
        UnaryOp: op='!' (at pp.c:23361)
          ID: name='PeriodicSampleLoggerP__0__current_sample_id' (at pp.c:23361)
      Assignment: op='=' (at pp.c:23362)
        ID: name='PeriodicSampleLoggerP__0__current_sample' (at pp.c:23362)
        UnaryOp: op='&' (at pp.c:23362)
          ArrayRef:  (at pp.c:23362)
            ID: name='PeriodicSampleLoggerP__0__sample' (at pp.c:23362)
            ID: name='PeriodicSampleLoggerP__0__current_sample_id' (at pp.c:23362)
      FuncCall:  (at None)
        ID: name='PeriodicSampleLoggerP__0__readSensors' (at pp.c:23363)
  FuncDef:  (at pp.c:23367)
    Decl: name='Stm25pSectorP__SplitControl__stop', quals=[], storage=['inline', 'static'] (at pp.c:23367)
      FuncDecl: quals=None (at pp.c:23367)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSectorP__SplitControl__stop', quals=[] (at pp.c:23367)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23369)
      Decl: name='error', quals=[], storage=[] (at pp.c:23370)
        TypeDecl: declname='error', quals=[] (at pp.c:23370)
          IdentifierType: names=['error_t'] (at None)
        FuncCall:  (at None)
          ID: name='Stm25pSectorP__SpiResource__request' (at pp.c:23370)
      If:  (at pp.c:23373)
        BinaryOp: op='==' (at pp.c:23373)
          ID: name='error' (at pp.c:23373)
          ID: name='SUCCESS' (at pp.c:23373)
        Compound:  (at pp.c:23373)
          Assignment: op='=' (at pp.c:23374)
            ID: name='Stm25pSectorP__m_power_state' (at pp.c:23374)
            ID: name='Stm25pSectorP__S_STOP' (at pp.c:23374)
      Return:  (at pp.c:23377)
        ID: name='error' (at pp.c:23377)
  FuncDef:  (at pp.c:23381)
    Decl: name='DeferredPowerManagerP__0__SplitControl__stop', quals=[], storage=['static', 'inline'] (at pp.c:23381)
      FuncDecl: quals=None (at pp.c:23381)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__SplitControl__stop', quals=[] (at pp.c:23381)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23381)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23383)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23383)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23387)
        ID: name='__nesc_result' (at pp.c:23387)
        FuncCall:  (at None)
          ID: name='Stm25pSectorP__SplitControl__stop' (at pp.c:23387)
      Return:  (at pp.c:23391)
        ID: name='__nesc_result' (at pp.c:23391)
  FuncDef:  (at pp.c:23396)
    Decl: name='DeferredPowerManagerP__0__StdControl__default__stop', quals=[], storage=['inline', 'static'] (at pp.c:23396)
      FuncDecl: quals=None (at pp.c:23396)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__StdControl__default__stop', quals=[] (at pp.c:23396)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23398)
      Return:  (at pp.c:23399)
        ID: name='SUCCESS' (at pp.c:23399)
  FuncDef:  (at pp.c:23403)
    Decl: name='DeferredPowerManagerP__0__StdControl__stop', quals=[], storage=['static', 'inline'] (at pp.c:23403)
      FuncDecl: quals=None (at pp.c:23403)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__StdControl__stop', quals=[] (at pp.c:23403)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23403)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23405)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23405)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23409)
        ID: name='__nesc_result' (at pp.c:23409)
        FuncCall:  (at None)
          ID: name='DeferredPowerManagerP__0__StdControl__default__stop' (at pp.c:23409)
      Return:  (at pp.c:23413)
        ID: name='__nesc_result' (at pp.c:23413)
  FuncDef:  (at pp.c:23418)
    Decl: name='DeferredPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[], storage=['inline', 'static'] (at pp.c:23418)
      FuncDecl: quals=None (at pp.c:23418)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__PowerDownCleanup__default__cleanup', quals=[] (at pp.c:23418)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23420)
  FuncDef:  (at pp.c:23424)
    Decl: name='DeferredPowerManagerP__0__PowerDownCleanup__cleanup', quals=[], storage=['static', 'inline'] (at pp.c:23424)
      FuncDecl: quals=None (at pp.c:23424)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__PowerDownCleanup__cleanup', quals=[] (at pp.c:23424)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23424)
      FuncCall:  (at None)
        ID: name='DeferredPowerManagerP__0__PowerDownCleanup__default__cleanup' (at pp.c:23426)
  FuncDef:  (at pp.c:23431)
    Decl: name='DeferredPowerManagerP__0__TimerMilli__fired', quals=[], storage=['inline', 'static'] (at pp.c:23431)
      FuncDecl: quals=None (at pp.c:23431)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__TimerMilli__fired', quals=[] (at pp.c:23431)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23433)
      Compound:  (at pp.c:23434)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23434)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23434)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:23434)
        Compound:  (at pp.c:23436)
          If:  (at pp.c:23437)
            BinaryOp: op='==' (at pp.c:23437)
              ID: name='DeferredPowerManagerP__0__stopTimer' (at pp.c:23437)
              ID: name='FALSE' (at pp.c:23437)
            Compound:  (at pp.c:23437)
              Assignment: op='=' (at pp.c:23438)
                ID: name='DeferredPowerManagerP__0__stopping' (at pp.c:23438)
                ID: name='TRUE' (at pp.c:23438)
              FuncCall:  (at None)
                ID: name='DeferredPowerManagerP__0__PowerDownCleanup__cleanup' (at pp.c:23439)
              FuncCall:  (at None)
                ID: name='DeferredPowerManagerP__0__StdControl__stop' (at pp.c:23440)
              If:  (at pp.c:23441)
                BinaryOp: op='==' (at None)
                  FuncCall:  (at None)
                    ID: name='DeferredPowerManagerP__0__SplitControl__stop' (at pp.c:23441)
                  ID: name='EALREADY' (at pp.c:23441)
                Compound:  (at pp.c:23441)
                  FuncCall:  (at None)
                    ID: name='DeferredPowerManagerP__0__SplitControl__stopDone' (at pp.c:23442)
                    ExprList:  (at pp.c:23442)
                      ID: name='SUCCESS' (at pp.c:23442)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:23447)
          ExprList:  (at pp.c:23447)
            ID: name='__nesc_atomic' (at pp.c:23447)
  FuncDef:  (at pp.c:23451)
    Decl: name='PowerCycleP__RadioPowerState__getState', quals=[], storage=['static', 'inline'] (at pp.c:23451)
      FuncDecl: quals=None (at pp.c:23451)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__RadioPowerState__getState', quals=[] (at pp.c:23451)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:23451)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23453)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23453)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23457)
        ID: name='__nesc_result' (at pp.c:23457)
        FuncCall:  (at None)
          ID: name='StateImplP__State__getState' (at pp.c:23457)
          ExprList:  (at pp.c:23457)
            Constant: type='int', value='3U' (at pp.c:23457)
      Return:  (at pp.c:23461)
        ID: name='__nesc_result' (at pp.c:23461)
  FuncDef:  (at pp.c:23466)
    Decl: name='PowerCycleP__OnTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:23466)
      FuncDecl: quals=None (at pp.c:23466)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__OnTimer__fired', quals=[] (at pp.c:23466)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23468)
      If:  (at pp.c:23469)
        FuncCall:  (at None)
          ID: name='PowerCycleP__isDutyCycling' (at pp.c:23469)
        Compound:  (at pp.c:23469)
          If:  (at pp.c:23470)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='PowerCycleP__RadioPowerState__getState' (at pp.c:23470)
              ID: name='PowerCycleP__S_OFF' (at pp.c:23470)
            Compound:  (at pp.c:23470)
              Assignment: op='=' (at pp.c:23471)
                ID: name='PowerCycleP__ccaChecks' (at pp.c:23471)
                Constant: type='int', value='0' (at pp.c:23471)
              FuncCall:  (at None)
                ID: name='PowerCycleP__getCca__postTask' (at pp.c:23477)
            Compound:  (at pp.c:23479)
              FuncCall:  (at None)
                ID: name='PowerCycleP__OnTimer__startOneShot' (at pp.c:23481)
                ExprList:  (at pp.c:23481)
                  ID: name='PowerCycleP__sleepInterval' (at pp.c:23481)
  FuncDef:  (at pp.c:23487)
    Decl: name='PowerCycleP__PowerCycle__getSleepInterval', quals=[], storage=['inline', 'static'] (at pp.c:23487)
      FuncDecl: quals=None (at pp.c:23487)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__PowerCycle__getSleepInterval', quals=[] (at pp.c:23487)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:23489)
      Return:  (at pp.c:23490)
        ID: name='PowerCycleP__sleepInterval' (at pp.c:23490)
  FuncDef:  (at pp.c:23494)
    Decl: name='DefaultLplP__PowerCycle__getSleepInterval', quals=[], storage=['static', 'inline'] (at pp.c:23494)
      FuncDecl: quals=None (at pp.c:23494)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__PowerCycle__getSleepInterval', quals=[] (at pp.c:23494)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:23494)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23496)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23496)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23500)
        ID: name='__nesc_result' (at pp.c:23500)
        FuncCall:  (at None)
          ID: name='PowerCycleP__PowerCycle__getSleepInterval' (at pp.c:23500)
      Return:  (at pp.c:23504)
        ID: name='__nesc_result' (at pp.c:23504)
  FuncDef:  (at pp.c:23509)
    Decl: name='DefaultLplP__OffTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:23509)
      FuncDecl: quals=None (at pp.c:23509)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__OffTimer__fired', quals=[] (at pp.c:23509)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23511)
      If:  (at pp.c:23517)
        BinaryOp: op='||' (at None)
          BinaryOp: op='==' (at None)
            FuncCall:  (at None)
              ID: name='DefaultLplP__SplitControlState__getState' (at pp.c:23519)
            ID: name='DefaultLplP__S_OFF' (at pp.c:23519)
          BinaryOp: op='&&' (at None)
            BinaryOp: op='&&' (at None)
              BinaryOp: op='>' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__PowerCycle__getSleepInterval' (at pp.c:23520)
                Constant: type='int', value='0' (at pp.c:23520)
              BinaryOp: op='!=' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__SplitControlState__getState' (at pp.c:23521)
                ID: name='DefaultLplP__S_OFF' (at pp.c:23521)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='DefaultLplP__SendState__getState' (at pp.c:23522)
              ID: name='S_LPL_NOT_SENDING' (at pp.c:23522)
        Compound:  (at pp.c:23522)
          FuncCall:  (at None)
            ID: name='DefaultLplP__stopRadio__postTask' (at pp.c:23523)
  FuncDef:  (at pp.c:23528)
    Decl: name='DefaultLplP__SendState__forceState', quals=[], storage=['static', 'inline'] (at pp.c:23528)
      FuncDecl: quals=None (at pp.c:23528)
        ParamList:  (at pp.c:23528)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:23528)
            TypeDecl: declname='reqState', quals=[] (at pp.c:23528)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='DefaultLplP__SendState__forceState', quals=[] (at pp.c:23528)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23528)
      FuncCall:  (at None)
        ID: name='StateImplP__State__forceState' (at pp.c:23530)
        ExprList:  (at pp.c:23530)
          Constant: type='int', value='5U' (at pp.c:23530)
          ID: name='reqState' (at pp.c:23530)
  FuncDef:  (at pp.c:23535)
    Decl: name='DefaultLplP__SendDoneTimer__fired', quals=[], storage=['inline', 'static'] (at pp.c:23535)
      FuncDecl: quals=None (at pp.c:23535)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__SendDoneTimer__fired', quals=[] (at pp.c:23535)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23537)
      If:  (at pp.c:23538)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendState__getState' (at pp.c:23538)
          ID: name='S_LPL_SENDING' (at pp.c:23538)
        Compound:  (at pp.c:23538)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendState__forceState' (at pp.c:23540)
            ExprList:  (at pp.c:23540)
              ID: name='S_LPL_CLEAN_UP' (at pp.c:23540)
  FuncDef:  (at pp.c:23545)
    Decl: name='VirtualizeTimerC__0__Timer__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:23545)
      FuncDecl: quals=None (at pp.c:23545)
        ParamList:  (at pp.c:23545)
          Decl: name='num', quals=[], storage=[] (at pp.c:23545)
            TypeDecl: declname='num', quals=[] (at pp.c:23545)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__default__fired', quals=[] (at pp.c:23545)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23546)
  FuncDef:  (at pp.c:23550)
    Decl: name='VirtualizeTimerC__0__Timer__fired', quals=[], storage=['static', 'inline'] (at pp.c:23550)
      FuncDecl: quals=None (at pp.c:23550)
        ParamList:  (at pp.c:23550)
          Decl: name='arg_0x1018055d8', quals=[], storage=[] (at pp.c:23550)
            TypeDecl: declname='arg_0x1018055d8', quals=[] (at pp.c:23550)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__Timer__fired', quals=[] (at pp.c:23550)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23550)
      Switch:  (at pp.c:23552)
        ID: name='arg_0x1018055d8' (at pp.c:23552)
        Compound:  (at pp.c:23552)
          Case:  (at pp.c:23554)
            Constant: type='int', value='0U' (at pp.c:23554)
            FuncCall:  (at None)
              ID: name='PeriodicSampleLoggerP__0__Timer__fired' (at pp.c:23556)
          Break:  (at pp.c:23558)
          Case:  (at pp.c:23560)
            Constant: type='int', value='1U' (at pp.c:23560)
            FuncCall:  (at None)
              ID: name='DeferredPowerManagerP__0__TimerMilli__fired' (at pp.c:23562)
          Break:  (at pp.c:23564)
          Case:  (at pp.c:23566)
            Constant: type='int', value='3U' (at pp.c:23566)
            FuncCall:  (at None)
              ID: name='PowerCycleP__OnTimer__fired' (at pp.c:23568)
          Break:  (at pp.c:23570)
          Case:  (at pp.c:23572)
            Constant: type='int', value='5U' (at pp.c:23572)
            FuncCall:  (at None)
              ID: name='DefaultLplP__OffTimer__fired' (at pp.c:23574)
          Break:  (at pp.c:23576)
          Case:  (at pp.c:23578)
            Constant: type='int', value='6U' (at pp.c:23578)
            FuncCall:  (at None)
              ID: name='DefaultLplP__SendDoneTimer__fired' (at pp.c:23580)
          Break:  (at pp.c:23582)
          Default:  (at pp.c:23584)
            FuncCall:  (at None)
              ID: name='VirtualizeTimerC__0__Timer__default__fired' (at pp.c:23586)
              ExprList:  (at pp.c:23586)
                ID: name='arg_0x1018055d8' (at pp.c:23586)
          Break:  (at pp.c:23588)
  FuncDef:  (at pp.c:23595)
    Decl: name='Stm25pLogConfigP__0__Circular__get', quals=[], storage=['inline', 'static'] (at pp.c:23595)
      FuncDecl: quals=None (at pp.c:23595)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pLogConfigP__0__Circular__get', quals=[] (at pp.c:23595)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:23597)
      Return:  (at pp.c:23598)
        Constant: type='int', value='1' (at pp.c:23598)
  FuncDef:  (at pp.c:23602)
    Decl: name='Stm25pLogP__Circular__default__get', quals=[], storage=['inline', 'static'] (at pp.c:23602)
      FuncDecl: quals=None (at pp.c:23602)
        ParamList:  (at pp.c:23602)
          Decl: name='id', quals=[], storage=[] (at pp.c:23602)
            TypeDecl: declname='id', quals=[] (at pp.c:23602)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Circular__default__get', quals=[] (at pp.c:23602)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:23604)
      Return:  (at pp.c:23606)
        ID: name='FALSE' (at pp.c:23606)
  FuncDef:  (at pp.c:23610)
    Decl: name='Stm25pLogP__Circular__get', quals=[], storage=['static', 'inline'] (at pp.c:23610)
      FuncDecl: quals=None (at pp.c:23610)
        ParamList:  (at pp.c:23610)
          Decl: name='arg_0x101944858', quals=[], storage=[] (at pp.c:23610)
            TypeDecl: declname='arg_0x101944858', quals=[] (at pp.c:23610)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Circular__get', quals=[] (at pp.c:23610)
          IdentifierType: names=['Stm25pLogP__Circular__val_t'] (at None)
    Compound:  (at pp.c:23610)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23612)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23612)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Switch:  (at pp.c:23616)
        ID: name='arg_0x101944858' (at pp.c:23616)
        Compound:  (at pp.c:23616)
          Case:  (at pp.c:23618)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:23618)
            Assignment: op='=' (at pp.c:23620)
              ID: name='__nesc_result' (at pp.c:23620)
              FuncCall:  (at None)
                ID: name='Stm25pLogConfigP__0__Circular__get' (at pp.c:23620)
          Break:  (at pp.c:23622)
          Default:  (at pp.c:23624)
            Assignment: op='=' (at pp.c:23626)
              ID: name='__nesc_result' (at pp.c:23626)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__Circular__default__get' (at pp.c:23626)
                ExprList:  (at pp.c:23626)
                  ID: name='arg_0x101944858' (at pp.c:23626)
          Break:  (at pp.c:23628)
      Return:  (at pp.c:23634)
        ID: name='__nesc_result' (at pp.c:23634)
  FuncDef:  (at pp.c:23639)
    Decl: name='Stm25pLogP__Write__append', quals=[], storage=['inline', 'static'] (at pp.c:23639)
      FuncDecl: quals=None (at pp.c:23639)
        ParamList:  (at pp.c:23639)
          Decl: name='id', quals=[], storage=[] (at pp.c:23639)
            TypeDecl: declname='id', quals=[] (at pp.c:23639)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:23639)
            PtrDecl: quals=[] (at pp.c:23639)
              TypeDecl: declname='buf', quals=[] (at pp.c:23639)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:23639)
            TypeDecl: declname='len', quals=[] (at pp.c:23639)
              IdentifierType: names=['storage_len_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Write__append', quals=[] (at pp.c:23639)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23641)
      Decl: name='bytes_left', quals=[], storage=[] (at pp.c:23643)
        TypeDecl: declname='bytes_left', quals=[] (at pp.c:23643)
          IdentifierType: names=['uint16_t'] (at None)
        BinaryOp: op='%' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint16_t'] (at None)
            StructRef: type='.' (at pp.c:23643)
              ArrayRef:  (at pp.c:23643)
                ID: name='Stm25pLogP__m_log_info' (at pp.c:23643)
                ID: name='id' (at pp.c:23643)
              ID: name='write_addr' (at pp.c:23643)
          ID: name='Stm25pLogP__BLOCK_SIZE' (at pp.c:23643)
      Assignment: op='=' (at pp.c:23646)
        ID: name='bytes_left' (at pp.c:23646)
        BinaryOp: op='-' (at pp.c:23646)
          ID: name='Stm25pLogP__BLOCK_SIZE' (at pp.c:23646)
          ID: name='bytes_left' (at pp.c:23646)
      If:  (at pp.c:23649)
        BinaryOp: op='>' (at pp.c:23649)
          ID: name='len' (at pp.c:23649)
          ID: name='Stm25pLogP__MAX_RECORD_SIZE' (at pp.c:23649)
        Compound:  (at pp.c:23649)
          Return:  (at pp.c:23650)
            ID: name='EINVAL' (at pp.c:23650)
      If:  (at pp.c:23653)
        BinaryOp: op='>' (at pp.c:23653)
          BinaryOp: op='+' (at pp.c:23653)
            UnaryOp: op='sizeof' (at pp.c:23653)
              ID: name='Stm25pLogP__m_header' (at pp.c:23653)
            ID: name='len' (at pp.c:23653)
          ID: name='bytes_left' (at pp.c:23653)
        Compound:  (at pp.c:23653)
          Assignment: op='+=' (at pp.c:23654)
            StructRef: type='.' (at pp.c:23654)
              ArrayRef:  (at pp.c:23654)
                ID: name='Stm25pLogP__m_log_info' (at pp.c:23654)
                ID: name='id' (at pp.c:23654)
              ID: name='write_addr' (at pp.c:23654)
            ID: name='bytes_left' (at pp.c:23654)
      If:  (at pp.c:23657)
        BinaryOp: op='&&' (at None)
          UnaryOp: op='!' (at None)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Circular__get' (at pp.c:23657)
              ExprList:  (at pp.c:23657)
                ID: name='id' (at pp.c:23657)
          BinaryOp: op='>=' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
              BinaryOp: op='>>' (at pp.c:23658)
                StructRef: type='.' (at pp.c:23658)
                  ArrayRef:  (at pp.c:23658)
                    ID: name='Stm25pLogP__m_log_info' (at pp.c:23658)
                    ID: name='id' (at pp.c:23658)
                  ID: name='write_addr' (at pp.c:23658)
                ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:23658)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Sector__getNumSectors' (at pp.c:23659)
              ExprList:  (at pp.c:23659)
                ID: name='id' (at pp.c:23659)
        Compound:  (at pp.c:23659)
          Return:  (at pp.c:23660)
            ID: name='ESIZE' (at pp.c:23660)
      Assignment: op='=' (at pp.c:23662)
        ID: name='Stm25pLogP__m_records_lost' (at pp.c:23662)
        ID: name='FALSE' (at pp.c:23662)
      Assignment: op='=' (at pp.c:23663)
        StructRef: type='.' (at pp.c:23663)
          ID: name='Stm25pLogP__m_req' (at pp.c:23663)
          ID: name='req' (at pp.c:23663)
        ID: name='Stm25pLogP__S_APPEND' (at pp.c:23663)
      Assignment: op='=' (at pp.c:23664)
        StructRef: type='.' (at pp.c:23664)
          ID: name='Stm25pLogP__m_req' (at pp.c:23664)
          ID: name='buf' (at pp.c:23664)
        ID: name='buf' (at pp.c:23664)
      Assignment: op='=' (at pp.c:23665)
        StructRef: type='.' (at pp.c:23665)
          ID: name='Stm25pLogP__m_req' (at pp.c:23665)
          ID: name='len' (at pp.c:23665)
        ID: name='len' (at pp.c:23665)
      Return:  (at pp.c:23667)
        FuncCall:  (at None)
          ID: name='Stm25pLogP__newRequest' (at pp.c:23667)
          ExprList:  (at pp.c:23667)
            ID: name='id' (at pp.c:23667)
  FuncDef:  (at pp.c:23671)
    Decl: name='PeriodicSampleLoggerP__0__LogWrite__append', quals=[], storage=['static', 'inline'] (at pp.c:23671)
      FuncDecl: quals=None (at pp.c:23671)
        ParamList:  (at pp.c:23671)
          Decl: name='buf', quals=[], storage=[] (at pp.c:23671)
            PtrDecl: quals=[] (at pp.c:23671)
              TypeDecl: declname='buf', quals=[] (at pp.c:23671)
                IdentifierType: names=['void'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:23671)
            TypeDecl: declname='len', quals=[] (at pp.c:23671)
              IdentifierType: names=['storage_len_t'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__append', quals=[] (at pp.c:23671)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23671)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23673)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23673)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23677)
        ID: name='__nesc_result' (at pp.c:23677)
        FuncCall:  (at None)
          ID: name='Stm25pLogP__Write__append' (at pp.c:23677)
          ExprList:  (at pp.c:23677)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:23677)
            ID: name='buf' (at pp.c:23677)
            ID: name='len' (at pp.c:23677)
      Return:  (at pp.c:23681)
        ID: name='__nesc_result' (at pp.c:23681)
  FuncDef:  (at pp.c:23686)
    Decl: name='VirtualizeTimerC__0__TimerFrom__fired', quals=[], storage=['inline', 'static'] (at pp.c:23686)
      FuncDecl: quals=None (at pp.c:23686)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__TimerFrom__fired', quals=[] (at pp.c:23686)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23687)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__fireTimers' (at pp.c:23688)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='VirtualizeTimerC__0__TimerFrom__getNow' (at pp.c:23688)
  FuncDef:  (at pp.c:23692)
    Decl: name='AlarmToTimerC__0__Timer__fired', quals=[], storage=['static', 'inline'] (at pp.c:23692)
      FuncDecl: quals=None (at pp.c:23692)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Timer__fired', quals=[] (at pp.c:23692)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23692)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__TimerFrom__fired' (at pp.c:23694)
  FuncDef:  (at pp.c:23699)
    Decl: name='TransformAlarmC__0__Alarm__getAlarm', quals=[], storage=['inline', 'static'] (at pp.c:23699)
      FuncDecl: quals=None (at pp.c:23699)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Alarm__getAlarm', quals=[] (at pp.c:23699)
          IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
    Compound:  (at pp.c:23700)
      Compound:  (at pp.c:23701)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:23701)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:23701)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:23701)
        Compound:  (at pp.c:23703)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:23704)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:23704)
              IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
            BinaryOp: op='+' (at pp.c:23706)
              ID: name='TransformAlarmC__0__m_t0' (at pp.c:23706)
              ID: name='TransformAlarmC__0__m_dt' (at pp.c:23706)
          Compound:  (at pp.c:23708)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:23710)
              ExprList:  (at pp.c:23710)
                ID: name='__nesc_atomic' (at pp.c:23710)
            Return:  (at pp.c:23712)
              ID: name='__nesc_temp' (at pp.c:23712)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:23716)
          ExprList:  (at pp.c:23716)
            ID: name='__nesc_atomic' (at pp.c:23716)
  FuncDef:  (at pp.c:23720)
    Decl: name='AlarmToTimerC__0__Alarm__getAlarm', quals=[], storage=['static', 'inline'] (at pp.c:23720)
      FuncDecl: quals=None (at pp.c:23720)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__Alarm__getAlarm', quals=[] (at pp.c:23720)
          IdentifierType: names=['AlarmToTimerC__0__Alarm__size_type'] (at None)
    Compound:  (at pp.c:23720)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23722)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23722)
          IdentifierType: names=['long', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23726)
        ID: name='__nesc_result' (at pp.c:23726)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__0__Alarm__getAlarm' (at pp.c:23726)
      Return:  (at pp.c:23730)
        ID: name='__nesc_result' (at pp.c:23730)
  FuncDef:  (at pp.c:23735)
    Decl: name='AlarmToTimerC__0__fired__runTask', quals=[], storage=['inline', 'static'] (at pp.c:23735)
      FuncDecl: quals=None (at pp.c:23735)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='AlarmToTimerC__0__fired__runTask', quals=[] (at pp.c:23735)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23736)
      If:  (at pp.c:23737)
        BinaryOp: op='==' (at pp.c:23737)
          ID: name='AlarmToTimerC__0__m_oneshot' (at pp.c:23737)
          ID: name='FALSE' (at pp.c:23737)
        Compound:  (at pp.c:23737)
          FuncCall:  (at None)
            ID: name='AlarmToTimerC__0__start' (at pp.c:23738)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='AlarmToTimerC__0__Alarm__getAlarm' (at pp.c:23738)
              ID: name='AlarmToTimerC__0__m_dt' (at pp.c:23738)
              ID: name='FALSE' (at pp.c:23738)
      FuncCall:  (at None)
        ID: name='AlarmToTimerC__0__Timer__fired' (at pp.c:23741)
  FuncDef:  (at pp.c:23745)
    Decl: name='PeriodicSampleLoggerP__0__eraseTask__postTask', quals=[], storage=['static', 'inline'] (at pp.c:23745)
      FuncDecl: quals=None (at pp.c:23745)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__eraseTask__postTask', quals=[] (at pp.c:23745)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23745)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23747)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23747)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23751)
        ID: name='__nesc_result' (at pp.c:23751)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:23751)
          ExprList:  (at pp.c:23751)
            ID: name='PeriodicSampleLoggerP__0__eraseTask' (at pp.c:23751)
      Return:  (at pp.c:23755)
        ID: name='__nesc_result' (at pp.c:23755)
  FuncDef:  (at pp.c:23760)
    Decl: name='Stm25pLogP__Write__erase', quals=[], storage=['inline', 'static'] (at pp.c:23760)
      FuncDecl: quals=None (at pp.c:23760)
        ParamList:  (at pp.c:23760)
          Decl: name='id', quals=[], storage=[] (at pp.c:23760)
            TypeDecl: declname='id', quals=[] (at pp.c:23760)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__Write__erase', quals=[] (at pp.c:23760)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23762)
      Assignment: op='=' (at pp.c:23763)
        StructRef: type='.' (at pp.c:23763)
          ID: name='Stm25pLogP__m_req' (at pp.c:23763)
          ID: name='req' (at pp.c:23763)
        ID: name='Stm25pLogP__S_ERASE' (at pp.c:23763)
      Return:  (at pp.c:23764)
        FuncCall:  (at None)
          ID: name='Stm25pLogP__newRequest' (at pp.c:23764)
          ExprList:  (at pp.c:23764)
            ID: name='id' (at pp.c:23764)
  FuncDef:  (at pp.c:23768)
    Decl: name='PeriodicSampleLoggerP__0__LogWrite__erase', quals=[], storage=['static', 'inline'] (at pp.c:23768)
      FuncDecl: quals=None (at pp.c:23768)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__LogWrite__erase', quals=[] (at pp.c:23768)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23768)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:23770)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:23770)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:23774)
        ID: name='__nesc_result' (at pp.c:23774)
        FuncCall:  (at None)
          ID: name='Stm25pLogP__Write__erase' (at pp.c:23774)
          ExprList:  (at pp.c:23774)
            ID: name='LogStorageC__0__LOG_ID' (at pp.c:23774)
      Return:  (at pp.c:23778)
        ID: name='__nesc_result' (at pp.c:23778)
  FuncDef:  (at pp.c:23783)
    Decl: name='PeriodicSampleLoggerP__0__eraseTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:23783)
      FuncDecl: quals=None (at pp.c:23783)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__eraseTask__runTask', quals=[] (at pp.c:23783)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23785)
      If:  (at pp.c:23786)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__LogWrite__erase' (at pp.c:23786)
          ID: name='SUCCESS' (at pp.c:23786)
        Compound:  (at pp.c:23786)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__eraseTask__postTask' (at pp.c:23787)
  FuncDef:  (at pp.c:23792)
    Decl: name='PeriodicSampleLoggerP__0__appendTask__runTask', quals=[], storage=['inline', 'static'] (at pp.c:23792)
      FuncDecl: quals=None (at pp.c:23792)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__appendTask__runTask', quals=[] (at pp.c:23792)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23794)
      FuncCall:  (at None)
        ID: name='PeriodicSampleLoggerP__0__appendSample' (at pp.c:23795)
        ExprList:  (at pp.c:23795)
          UnaryOp: op='&' (at pp.c:23795)
            ArrayRef:  (at pp.c:23795)
              ID: name='PeriodicSampleLoggerP__0__sample' (at pp.c:23795)
              UnaryOp: op='!' (at pp.c:23795)
                ID: name='PeriodicSampleLoggerP__0__current_sample_id' (at pp.c:23795)
  FuncDef:  (at pp.c:23799)
    Decl: name='Msp430TimerCapComP__3__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:23799)
      FuncDecl: quals=None (at pp.c:23799)
        ParamList:  (at pp.c:23799)
          Decl: name='x', quals=[], storage=[] (at pp.c:23799)
            TypeDecl: declname='x', quals=[] (at pp.c:23799)
              IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__CC2int', quals=[] (at pp.c:23799)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:23801)
      Decl: name='c', quals=[], storage=[] (at pp.c:23810)
        TypeDecl: declname='c', quals=[] (at pp.c:23810)
          Union: name='Msp430TimerCapComP__3____nesc_unnamed4408', packed=False (at pp.c:23803)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:23805)
                IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:23807)
                IdentifierType: names=['uint16_t'] (at None)
        ExprList:  (at pp.c:23810)
          Assignment: op='=' (at pp.c:23810)
            StructRef: type='.' (at pp.c:23810)
              ID: name='f' (at pp.c:23810)
            ID: name='x' (at pp.c:23810)
      Return:  (at pp.c:23813)
        StructRef: type='.' (at pp.c:23813)
          ID: name='c' (at pp.c:23813)
          ID: name='t' (at pp.c:23813)
  FuncDef:  (at pp.c:23816)
    Decl: name='Msp430TimerCapComP__3__compareControl', quals=[], storage=['inline', 'static'] (at pp.c:23816)
      FuncDecl: quals=None (at pp.c:23816)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__compareControl', quals=[] (at pp.c:23816)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:23817)
      Decl: name='x', quals=[], storage=[] (at pp.c:23818)
        TypeDecl: declname='x', quals=[] (at pp.c:23818)
          IdentifierType: names=['Msp430TimerCapComP__3__cc_t'] (at None)
        ExprList:  (at pp.c:23819)
          Assignment: op='=' (at pp.c:23819)
            StructRef: type='.' (at pp.c:23819)
              ID: name='cm' (at pp.c:23819)
            Constant: type='int', value='1' (at pp.c:23819)
          Assignment: op='=' (at pp.c:23820)
            StructRef: type='.' (at pp.c:23820)
              ID: name='ccis' (at pp.c:23820)
            Constant: type='int', value='0' (at pp.c:23820)
          Assignment: op='=' (at pp.c:23821)
            StructRef: type='.' (at pp.c:23821)
              ID: name='clld' (at pp.c:23821)
            Constant: type='int', value='0' (at pp.c:23821)
          Assignment: op='=' (at pp.c:23822)
            StructRef: type='.' (at pp.c:23822)
              ID: name='cap' (at pp.c:23822)
            Constant: type='int', value='0' (at pp.c:23822)
          Assignment: op='=' (at pp.c:23823)
            StructRef: type='.' (at pp.c:23823)
              ID: name='ccie' (at pp.c:23823)
            Constant: type='int', value='0' (at pp.c:23823)
      Return:  (at pp.c:23825)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__3__CC2int' (at pp.c:23825)
          ExprList:  (at pp.c:23825)
            ID: name='x' (at pp.c:23825)
  FuncDef:  (at pp.c:23829)
    Decl: name='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[], storage=['inline', 'static'] (at pp.c:23829)
      FuncDecl: quals=None (at pp.c:23829)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__3__Control__setControlAsCompare', quals=[] (at pp.c:23829)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23830)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:23831)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='386U' (at pp.c:23831)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__3__compareControl' (at pp.c:23831)
  FuncDef:  (at pp.c:23835)
    Decl: name='Msp430AlarmC__0__Msp430TimerControl__setControlAsCompare', quals=[], storage=['static', 'inline'] (at pp.c:23835)
      FuncDecl: quals=None (at pp.c:23835)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Msp430TimerControl__setControlAsCompare', quals=[] (at pp.c:23835)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23835)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__3__Control__setControlAsCompare' (at pp.c:23837)
  FuncDef:  (at pp.c:23842)
    Decl: name='Msp430AlarmC__0__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:23842)
      FuncDecl: quals=None (at pp.c:23842)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__0__Init__init', quals=[] (at pp.c:23842)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23843)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430TimerControl__disableEvents' (at pp.c:23844)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__0__Msp430TimerControl__setControlAsCompare' (at pp.c:23845)
      Return:  (at pp.c:23846)
        ID: name='SUCCESS' (at pp.c:23846)
  FuncDef:  (at pp.c:23850)
    Decl: name='Stm25pLogP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:23850)
      FuncDecl: quals=None (at pp.c:23850)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pLogP__Init__init', quals=[] (at pp.c:23850)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23852)
      Decl: name='i', quals=[], storage=[] (at pp.c:23853)
        TypeDecl: declname='i', quals=[] (at pp.c:23853)
          IdentifierType: names=['int'] (at None)
      For:  (at pp.c:23856)
        Assignment: op='=' (at pp.c:23856)
          ID: name='i' (at pp.c:23856)
          Constant: type='int', value='0' (at pp.c:23856)
        BinaryOp: op='<' (at pp.c:23856)
          ID: name='i' (at pp.c:23856)
          ID: name='Stm25pLogP__NUM_LOGS' (at pp.c:23856)
        UnaryOp: op='p++' (at pp.c:23856)
          ID: name='i' (at pp.c:23856)
        Compound:  (at pp.c:23856)
          Assignment: op='=' (at pp.c:23857)
            StructRef: type='.' (at pp.c:23857)
              ArrayRef:  (at pp.c:23857)
                ID: name='Stm25pLogP__m_log_info' (at pp.c:23857)
                ID: name='i' (at pp.c:23857)
              ID: name='read_addr' (at pp.c:23857)
            ID: name='STM25P_INVALID_ADDRESS' (at pp.c:23857)
          Assignment: op='=' (at pp.c:23858)
            StructRef: type='.' (at pp.c:23858)
              ArrayRef:  (at pp.c:23858)
                ID: name='Stm25pLogP__m_log_info' (at pp.c:23858)
                ID: name='i' (at pp.c:23858)
              ID: name='write_addr' (at pp.c:23858)
            Constant: type='int', value='0' (at pp.c:23858)
      Return:  (at pp.c:23860)
        ID: name='SUCCESS' (at pp.c:23860)
  FuncDef:  (at pp.c:23864)
    Decl: name='HplMsp430GeneralIOP__31__IO__set', quals=[], storage=['inline', 'static'] (at pp.c:23864)
      FuncDecl: quals=None (at pp.c:23864)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__31__IO__set', quals=[] (at pp.c:23864)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23866)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:23869)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='29U' (at pp.c:23869)
        BinaryOp: op='<<' (at pp.c:23869)
          Constant: type='int', value='0x01' (at pp.c:23869)
          Constant: type='int', value='7' (at pp.c:23869)
  FuncDef:  (at pp.c:23873)
    Decl: name='Msp430GpioC__4__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:23873)
      FuncDecl: quals=None (at pp.c:23873)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__4__HplGeneralIO__set', quals=[] (at pp.c:23873)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23873)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__31__IO__set' (at pp.c:23875)
  FuncDef:  (at pp.c:23880)
    Decl: name='Msp430GpioC__4__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:23880)
      FuncDecl: quals=None (at pp.c:23880)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__4__GeneralIO__set', quals=[] (at pp.c:23880)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23882)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__HplGeneralIO__set' (at pp.c:23884)
  FuncDef:  (at pp.c:23888)
    Decl: name='Stm25pSpiP__Hold__set', quals=[], storage=['static', 'inline'] (at pp.c:23888)
      FuncDecl: quals=None (at pp.c:23888)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__Hold__set', quals=[] (at pp.c:23888)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23888)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__GeneralIO__set' (at pp.c:23890)
  FuncDef:  (at pp.c:23895)
    Decl: name='Msp430GpioC__3__HplGeneralIO__set', quals=[], storage=['static', 'inline'] (at pp.c:23895)
      FuncDecl: quals=None (at pp.c:23895)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__3__HplGeneralIO__set', quals=[] (at pp.c:23895)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23895)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__28__IO__set' (at pp.c:23897)
  FuncDef:  (at pp.c:23902)
    Decl: name='Msp430GpioC__3__GeneralIO__set', quals=[], storage=['inline', 'static'] (at pp.c:23902)
      FuncDecl: quals=None (at pp.c:23902)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__3__GeneralIO__set', quals=[] (at pp.c:23902)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23904)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__3__HplGeneralIO__set' (at pp.c:23906)
  FuncDef:  (at pp.c:23910)
    Decl: name='Stm25pSpiP__CSN__set', quals=[], storage=['static', 'inline'] (at pp.c:23910)
      FuncDecl: quals=None (at pp.c:23910)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__CSN__set', quals=[] (at pp.c:23910)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23910)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__3__GeneralIO__set' (at pp.c:23912)
  FuncDef:  (at pp.c:23917)
    Decl: name='HplMsp430GeneralIOP__31__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:23917)
      FuncDecl: quals=None (at pp.c:23917)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__31__IO__makeOutput', quals=[] (at pp.c:23917)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23919)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:23922)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='30U' (at pp.c:23922)
        BinaryOp: op='<<' (at pp.c:23922)
          Constant: type='int', value='0x01' (at pp.c:23922)
          Constant: type='int', value='7' (at pp.c:23922)
  FuncDef:  (at pp.c:23926)
    Decl: name='Msp430GpioC__4__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:23926)
      FuncDecl: quals=None (at pp.c:23926)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__4__HplGeneralIO__makeOutput', quals=[] (at pp.c:23926)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23926)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__31__IO__makeOutput' (at pp.c:23928)
  FuncDef:  (at pp.c:23933)
    Decl: name='Msp430GpioC__4__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:23933)
      FuncDecl: quals=None (at pp.c:23933)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__4__GeneralIO__makeOutput', quals=[] (at pp.c:23933)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23935)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__HplGeneralIO__makeOutput' (at pp.c:23937)
  FuncDef:  (at pp.c:23941)
    Decl: name='Stm25pSpiP__Hold__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:23941)
      FuncDecl: quals=None (at pp.c:23941)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__Hold__makeOutput', quals=[] (at pp.c:23941)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23941)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__4__GeneralIO__makeOutput' (at pp.c:23943)
  FuncDef:  (at pp.c:23948)
    Decl: name='HplMsp430GeneralIOP__28__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:23948)
      FuncDecl: quals=None (at pp.c:23948)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__28__IO__makeOutput', quals=[] (at pp.c:23948)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23950)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:23953)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='30U' (at pp.c:23953)
        BinaryOp: op='<<' (at pp.c:23953)
          Constant: type='int', value='0x01' (at pp.c:23953)
          Constant: type='int', value='4' (at pp.c:23953)
  FuncDef:  (at pp.c:23957)
    Decl: name='Msp430GpioC__3__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:23957)
      FuncDecl: quals=None (at pp.c:23957)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__3__HplGeneralIO__makeOutput', quals=[] (at pp.c:23957)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23957)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__28__IO__makeOutput' (at pp.c:23959)
  FuncDef:  (at pp.c:23964)
    Decl: name='Msp430GpioC__3__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:23964)
      FuncDecl: quals=None (at pp.c:23964)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__3__GeneralIO__makeOutput', quals=[] (at pp.c:23964)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23966)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__3__HplGeneralIO__makeOutput' (at pp.c:23968)
  FuncDef:  (at pp.c:23972)
    Decl: name='Stm25pSpiP__CSN__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:23972)
      FuncDecl: quals=None (at pp.c:23972)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__CSN__makeOutput', quals=[] (at pp.c:23972)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:23972)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__3__GeneralIO__makeOutput' (at pp.c:23974)
  FuncDef:  (at pp.c:23979)
    Decl: name='Stm25pSpiP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:23979)
      FuncDecl: quals=None (at pp.c:23979)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__Init__init', quals=[] (at pp.c:23979)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23981)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__CSN__makeOutput' (at pp.c:23982)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__Hold__makeOutput' (at pp.c:23983)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__CSN__set' (at pp.c:23984)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__Hold__set' (at pp.c:23985)
      Return:  (at pp.c:23986)
        ID: name='SUCCESS' (at pp.c:23986)
  FuncDef:  (at pp.c:23990)
    Decl: name='FcfsResourceQueueC__1__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:23990)
      FuncDecl: quals=None (at pp.c:23990)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__1__Init__init', quals=[] (at pp.c:23990)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:23992)
      FuncCall:  (at None)
        ID: name='memset' (at pp.c:23993)
        ExprList:  (at pp.c:23993)
          ID: name='FcfsResourceQueueC__1__resQ' (at pp.c:23993)
          ID: name='FcfsResourceQueueC__1__NO_ENTRY' (at pp.c:23993)
          UnaryOp: op='sizeof' (at pp.c:23993)
            ID: name='FcfsResourceQueueC__1__resQ' (at pp.c:23993)
      Return:  (at pp.c:23994)
        ID: name='SUCCESS' (at pp.c:23994)
  FuncDef:  (at pp.c:23998)
    Decl: name='FcfsResourceQueueC__2__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:23998)
      FuncDecl: quals=None (at pp.c:23998)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__2__Init__init', quals=[] (at pp.c:23998)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24000)
      FuncCall:  (at None)
        ID: name='memset' (at pp.c:24001)
        ExprList:  (at pp.c:24001)
          ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:24001)
          ID: name='FcfsResourceQueueC__2__NO_ENTRY' (at pp.c:24001)
          UnaryOp: op='sizeof' (at pp.c:24001)
            ID: name='FcfsResourceQueueC__2__resQ' (at pp.c:24001)
      Return:  (at pp.c:24002)
        ID: name='SUCCESS' (at pp.c:24002)
  FuncDef:  (at pp.c:24006)
    Decl: name='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[], storage=['inline', 'static'] (at pp.c:24006)
      FuncDecl: quals=None (at pp.c:24006)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ActiveMessageAddressC__ActiveMessageAddress__amGroup', quals=[] (at pp.c:24006)
          IdentifierType: names=['am_group_t'] (at None)
    Compound:  (at pp.c:24008)
      Decl: name='myGroup', quals=[], storage=[] (at pp.c:24009)
        TypeDecl: declname='myGroup', quals=[] (at pp.c:24009)
          IdentifierType: names=['am_group_t'] (at None)
      Assignment: op='=' (at pp.c:24013)
        ID: name='myGroup' (at pp.c:24013)
        ID: name='ActiveMessageAddressC__group' (at pp.c:24013)
      Return:  (at pp.c:24014)
        ID: name='myGroup' (at pp.c:24014)
  FuncDef:  (at pp.c:24018)
    Decl: name='CC2420ControlP__ActiveMessageAddress__amGroup', quals=[], storage=['static', 'inline'] (at pp.c:24018)
      FuncDecl: quals=None (at pp.c:24018)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__ActiveMessageAddress__amGroup', quals=[] (at pp.c:24018)
          IdentifierType: names=['am_group_t'] (at None)
    Compound:  (at pp.c:24018)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24020)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24020)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24024)
        ID: name='__nesc_result' (at pp.c:24024)
        FuncCall:  (at None)
          ID: name='ActiveMessageAddressC__ActiveMessageAddress__amGroup' (at pp.c:24024)
      Return:  (at pp.c:24028)
        ID: name='__nesc_result' (at pp.c:24028)
  FuncDef:  (at pp.c:24033)
    Decl: name='CC2420ControlP__ActiveMessageAddress__amAddress', quals=[], storage=['static', 'inline'] (at pp.c:24033)
      FuncDecl: quals=None (at pp.c:24033)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__ActiveMessageAddress__amAddress', quals=[] (at pp.c:24033)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:24033)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24035)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24035)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24039)
        ID: name='__nesc_result' (at pp.c:24039)
        FuncCall:  (at None)
          ID: name='ActiveMessageAddressC__ActiveMessageAddress__amAddress' (at pp.c:24039)
      Return:  (at pp.c:24043)
        ID: name='__nesc_result' (at pp.c:24043)
  FuncDef:  (at pp.c:24048)
    Decl: name='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24048)
      FuncDecl: quals=None (at pp.c:24048)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__29__IO__makeOutput', quals=[] (at pp.c:24048)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24050)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24053)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='30U' (at pp.c:24053)
        BinaryOp: op='<<' (at pp.c:24053)
          Constant: type='int', value='0x01' (at pp.c:24053)
          Constant: type='int', value='5' (at pp.c:24053)
  FuncDef:  (at pp.c:24057)
    Decl: name='Msp430GpioC__11__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24057)
      FuncDecl: quals=None (at pp.c:24057)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__HplGeneralIO__makeOutput', quals=[] (at pp.c:24057)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24057)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__29__IO__makeOutput' (at pp.c:24059)
  FuncDef:  (at pp.c:24064)
    Decl: name='Msp430GpioC__11__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24064)
      FuncDecl: quals=None (at pp.c:24064)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__11__GeneralIO__makeOutput', quals=[] (at pp.c:24064)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24066)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__HplGeneralIO__makeOutput' (at pp.c:24068)
  FuncDef:  (at pp.c:24072)
    Decl: name='CC2420ControlP__VREN__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24072)
      FuncDecl: quals=None (at pp.c:24072)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__VREN__makeOutput', quals=[] (at pp.c:24072)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24072)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__11__GeneralIO__makeOutput' (at pp.c:24074)
  FuncDef:  (at pp.c:24079)
    Decl: name='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24079)
      FuncDecl: quals=None (at pp.c:24079)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__30__IO__makeOutput', quals=[] (at pp.c:24079)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24081)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24084)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='30U' (at pp.c:24084)
        BinaryOp: op='<<' (at pp.c:24084)
          Constant: type='int', value='0x01' (at pp.c:24084)
          Constant: type='int', value='6' (at pp.c:24084)
  FuncDef:  (at pp.c:24088)
    Decl: name='Msp430GpioC__9__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24088)
      FuncDecl: quals=None (at pp.c:24088)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__HplGeneralIO__makeOutput', quals=[] (at pp.c:24088)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24088)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__30__IO__makeOutput' (at pp.c:24090)
  FuncDef:  (at pp.c:24095)
    Decl: name='Msp430GpioC__9__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24095)
      FuncDecl: quals=None (at pp.c:24095)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__9__GeneralIO__makeOutput', quals=[] (at pp.c:24095)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24097)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__HplGeneralIO__makeOutput' (at pp.c:24099)
  FuncDef:  (at pp.c:24103)
    Decl: name='CC2420ControlP__RSTN__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24103)
      FuncDecl: quals=None (at pp.c:24103)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__RSTN__makeOutput', quals=[] (at pp.c:24103)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24103)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__9__GeneralIO__makeOutput' (at pp.c:24105)
  FuncDef:  (at pp.c:24110)
    Decl: name='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24110)
      FuncDecl: quals=None (at pp.c:24110)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__26__IO__makeOutput', quals=[] (at pp.c:24110)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24112)
      Assignment: op='|=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24115)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='30U' (at pp.c:24115)
        BinaryOp: op='<<' (at pp.c:24115)
          Constant: type='int', value='0x01' (at pp.c:24115)
          Constant: type='int', value='2' (at pp.c:24115)
  FuncDef:  (at pp.c:24119)
    Decl: name='Msp430GpioC__6__HplGeneralIO__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24119)
      FuncDecl: quals=None (at pp.c:24119)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__6__HplGeneralIO__makeOutput', quals=[] (at pp.c:24119)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24119)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__26__IO__makeOutput' (at pp.c:24121)
  FuncDef:  (at pp.c:24126)
    Decl: name='Msp430GpioC__6__GeneralIO__makeOutput', quals=[], storage=['inline', 'static'] (at pp.c:24126)
      FuncDecl: quals=None (at pp.c:24126)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__6__GeneralIO__makeOutput', quals=[] (at pp.c:24126)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24128)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__HplGeneralIO__makeOutput' (at pp.c:24130)
  FuncDef:  (at pp.c:24134)
    Decl: name='CC2420ControlP__CSN__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24134)
      FuncDecl: quals=None (at pp.c:24134)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CSN__makeOutput', quals=[] (at pp.c:24134)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24134)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__GeneralIO__makeOutput' (at pp.c:24136)
  FuncDef:  (at pp.c:24141)
    Decl: name='CC2420ControlP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24141)
      FuncDecl: quals=None (at pp.c:24141)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__Init__init', quals=[] (at pp.c:24141)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24143)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__makeOutput' (at pp.c:24144)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__RSTN__makeOutput' (at pp.c:24145)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__VREN__makeOutput' (at pp.c:24146)
      Assignment: op='=' (at pp.c:24148)
        ID: name='CC2420ControlP__m_short_addr' (at pp.c:24148)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__ActiveMessageAddress__amAddress' (at pp.c:24148)
      Assignment: op='=' (at pp.c:24149)
        ID: name='CC2420ControlP__m_ext_addr' (at pp.c:24149)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__LocalIeeeEui64__getId' (at pp.c:24149)
      Assignment: op='=' (at pp.c:24150)
        ID: name='CC2420ControlP__m_pan' (at pp.c:24150)
        FuncCall:  (at None)
          ID: name='CC2420ControlP__ActiveMessageAddress__amGroup' (at pp.c:24150)
      Assignment: op='=' (at pp.c:24151)
        ID: name='CC2420ControlP__m_tx_power' (at pp.c:24151)
        Constant: type='int', value='31' (at pp.c:24151)
      Assignment: op='=' (at pp.c:24152)
        ID: name='CC2420ControlP__m_channel' (at pp.c:24152)
        Constant: type='int', value='26' (at pp.c:24152)
      Assignment: op='=' (at pp.c:24158)
        ID: name='CC2420ControlP__addressRecognition' (at pp.c:24158)
        ID: name='TRUE' (at pp.c:24158)
      Assignment: op='=' (at pp.c:24164)
        ID: name='CC2420ControlP__hwAddressRecognition' (at pp.c:24164)
        ID: name='FALSE' (at pp.c:24164)
      Assignment: op='=' (at pp.c:24171)
        ID: name='CC2420ControlP__autoAckEnabled' (at pp.c:24171)
        ID: name='TRUE' (at pp.c:24171)
      Assignment: op='=' (at pp.c:24178)
        ID: name='CC2420ControlP__hwAutoAckDefault' (at pp.c:24178)
        ID: name='FALSE' (at pp.c:24178)
      Return:  (at pp.c:24182)
        ID: name='SUCCESS' (at pp.c:24182)
  FuncDef:  (at pp.c:24186)
    Decl: name='StateImplP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24186)
      FuncDecl: quals=None (at pp.c:24186)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='StateImplP__Init__init', quals=[] (at pp.c:24186)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24188)
      Decl: name='i', quals=[], storage=[] (at pp.c:24189)
        TypeDecl: declname='i', quals=[] (at pp.c:24189)
          IdentifierType: names=['int'] (at None)
      For:  (at pp.c:24192)
        Assignment: op='=' (at pp.c:24192)
          ID: name='i' (at pp.c:24192)
          Constant: type='int', value='0' (at pp.c:24192)
        BinaryOp: op='<' (at pp.c:24192)
          ID: name='i' (at pp.c:24192)
          Constant: type='int', value='6U' (at pp.c:24192)
        UnaryOp: op='p++' (at pp.c:24192)
          ID: name='i' (at pp.c:24192)
        Compound:  (at pp.c:24192)
          Assignment: op='=' (at pp.c:24193)
            ArrayRef:  (at pp.c:24193)
              ID: name='StateImplP__state' (at pp.c:24193)
              ID: name='i' (at pp.c:24193)
            ID: name='StateImplP__S_IDLE' (at pp.c:24193)
      Return:  (at pp.c:24195)
        ID: name='SUCCESS' (at pp.c:24195)
  FuncDef:  (at pp.c:24199)
    Decl: name='Msp430TimerCapComP__5__CC2int', quals=[], storage=['inline', 'static'] (at pp.c:24199)
      FuncDecl: quals=None (at pp.c:24199)
        ParamList:  (at pp.c:24199)
          Decl: name='x', quals=[], storage=[] (at pp.c:24199)
            TypeDecl: declname='x', quals=[] (at pp.c:24199)
              IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__CC2int', quals=[] (at pp.c:24199)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:24201)
      Decl: name='c', quals=[], storage=[] (at pp.c:24210)
        TypeDecl: declname='c', quals=[] (at pp.c:24210)
          Union: name='Msp430TimerCapComP__5____nesc_unnamed4409', packed=False (at pp.c:24203)
            Decl: name='f', quals=[], storage=[] (at 0)
              TypeDecl: declname='f', quals=[] (at pp.c:24205)
                IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
            Decl: name='t', quals=[], storage=[] (at 0)
              TypeDecl: declname='t', quals=[] (at pp.c:24207)
                IdentifierType: names=['uint16_t'] (at None)
        ExprList:  (at pp.c:24210)
          Assignment: op='=' (at pp.c:24210)
            StructRef: type='.' (at pp.c:24210)
              ID: name='f' (at pp.c:24210)
            ID: name='x' (at pp.c:24210)
      Return:  (at pp.c:24213)
        StructRef: type='.' (at pp.c:24213)
          ID: name='c' (at pp.c:24213)
          ID: name='t' (at pp.c:24213)
  FuncDef:  (at pp.c:24216)
    Decl: name='Msp430TimerCapComP__5__compareControl', quals=[], storage=['inline', 'static'] (at pp.c:24216)
      FuncDecl: quals=None (at pp.c:24216)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__compareControl', quals=[] (at pp.c:24216)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:24217)
      Decl: name='x', quals=[], storage=[] (at pp.c:24218)
        TypeDecl: declname='x', quals=[] (at pp.c:24218)
          IdentifierType: names=['Msp430TimerCapComP__5__cc_t'] (at None)
        ExprList:  (at pp.c:24219)
          Assignment: op='=' (at pp.c:24219)
            StructRef: type='.' (at pp.c:24219)
              ID: name='cm' (at pp.c:24219)
            Constant: type='int', value='1' (at pp.c:24219)
          Assignment: op='=' (at pp.c:24220)
            StructRef: type='.' (at pp.c:24220)
              ID: name='ccis' (at pp.c:24220)
            Constant: type='int', value='0' (at pp.c:24220)
          Assignment: op='=' (at pp.c:24221)
            StructRef: type='.' (at pp.c:24221)
              ID: name='clld' (at pp.c:24221)
            Constant: type='int', value='0' (at pp.c:24221)
          Assignment: op='=' (at pp.c:24222)
            StructRef: type='.' (at pp.c:24222)
              ID: name='cap' (at pp.c:24222)
            Constant: type='int', value='0' (at pp.c:24222)
          Assignment: op='=' (at pp.c:24223)
            StructRef: type='.' (at pp.c:24223)
              ID: name='ccie' (at pp.c:24223)
            Constant: type='int', value='0' (at pp.c:24223)
      Return:  (at pp.c:24225)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__5__CC2int' (at pp.c:24225)
          ExprList:  (at pp.c:24225)
            ID: name='x' (at pp.c:24225)
  FuncDef:  (at pp.c:24229)
    Decl: name='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[], storage=['inline', 'static'] (at pp.c:24229)
      FuncDecl: quals=None (at pp.c:24229)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__5__Control__setControlAsCompare', quals=[] (at pp.c:24229)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24230)
      Assignment: op='=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24231)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
            Constant: type='int', value='390U' (at pp.c:24231)
        FuncCall:  (at None)
          ID: name='Msp430TimerCapComP__5__compareControl' (at pp.c:24231)
  FuncDef:  (at pp.c:24235)
    Decl: name='Msp430AlarmC__1__Msp430TimerControl__setControlAsCompare', quals=[], storage=['static', 'inline'] (at pp.c:24235)
      FuncDecl: quals=None (at pp.c:24235)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Msp430TimerControl__setControlAsCompare', quals=[] (at pp.c:24235)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24235)
      FuncCall:  (at None)
        ID: name='Msp430TimerCapComP__5__Control__setControlAsCompare' (at pp.c:24237)
  FuncDef:  (at pp.c:24242)
    Decl: name='Msp430AlarmC__1__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24242)
      FuncDecl: quals=None (at pp.c:24242)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430AlarmC__1__Init__init', quals=[] (at pp.c:24242)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24243)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430TimerControl__disableEvents' (at pp.c:24244)
      FuncCall:  (at None)
        ID: name='Msp430AlarmC__1__Msp430TimerControl__setControlAsCompare' (at pp.c:24245)
      Return:  (at pp.c:24246)
        ID: name='SUCCESS' (at pp.c:24246)
  FuncDef:  (at pp.c:24250)
    Decl: name='HplMsp430GeneralIOP__25__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:24250)
      FuncDecl: quals=None (at pp.c:24250)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__25__IO__makeInput', quals=[] (at pp.c:24250)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24252)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24255)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='30U' (at pp.c:24255)
        UnaryOp: op='~' (at pp.c:24255)
          BinaryOp: op='<<' (at pp.c:24255)
            Constant: type='int', value='0x01' (at pp.c:24255)
            Constant: type='int', value='1' (at pp.c:24255)
  FuncDef:  (at pp.c:24259)
    Decl: name='Msp430GpioC__10__HplGeneralIO__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:24259)
      FuncDecl: quals=None (at pp.c:24259)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__10__HplGeneralIO__makeInput', quals=[] (at pp.c:24259)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24259)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__25__IO__makeInput' (at pp.c:24261)
  FuncDef:  (at pp.c:24266)
    Decl: name='Msp430GpioC__10__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:24266)
      FuncDecl: quals=None (at pp.c:24266)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__10__GeneralIO__makeInput', quals=[] (at pp.c:24266)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24268)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__10__HplGeneralIO__makeInput' (at pp.c:24270)
  FuncDef:  (at pp.c:24274)
    Decl: name='CC2420TransmitP__SFD__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:24274)
      FuncDecl: quals=None (at pp.c:24274)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__SFD__makeInput', quals=[] (at pp.c:24274)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24274)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__10__GeneralIO__makeInput' (at pp.c:24276)
  FuncDef:  (at pp.c:24282)
    Decl: name='CC2420TransmitP__CSN__makeOutput', quals=[], storage=['static', 'inline'] (at pp.c:24282)
      FuncDecl: quals=None (at pp.c:24282)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CSN__makeOutput', quals=[] (at pp.c:24282)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24282)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__6__GeneralIO__makeOutput' (at pp.c:24284)
  FuncDef:  (at pp.c:24289)
    Decl: name='HplMsp430GeneralIOP__4__IO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:24289)
      FuncDecl: quals=None (at pp.c:24289)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__4__IO__makeInput', quals=[] (at pp.c:24289)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24291)
      Assignment: op='&=' (at None)
        UnaryOp: op='*' (at None)
          Cast:  (at None)
            Typename: quals=['volatile'] (at None)
              PtrDecl: quals=[] (at pp.c:24294)
                TypeDecl: declname=None, quals=['volatile'] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            Constant: type='int', value='34U' (at pp.c:24294)
        UnaryOp: op='~' (at pp.c:24294)
          BinaryOp: op='<<' (at pp.c:24294)
            Constant: type='int', value='0x01' (at pp.c:24294)
            Constant: type='int', value='4' (at pp.c:24294)
  FuncDef:  (at pp.c:24298)
    Decl: name='Msp430GpioC__5__HplGeneralIO__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:24298)
      FuncDecl: quals=None (at pp.c:24298)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__5__HplGeneralIO__makeInput', quals=[] (at pp.c:24298)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24298)
      FuncCall:  (at None)
        ID: name='HplMsp430GeneralIOP__4__IO__makeInput' (at pp.c:24300)
  FuncDef:  (at pp.c:24305)
    Decl: name='Msp430GpioC__5__GeneralIO__makeInput', quals=[], storage=['inline', 'static'] (at pp.c:24305)
      FuncDecl: quals=None (at pp.c:24305)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430GpioC__5__GeneralIO__makeInput', quals=[] (at pp.c:24305)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24307)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__5__HplGeneralIO__makeInput' (at pp.c:24309)
  FuncDef:  (at pp.c:24313)
    Decl: name='CC2420TransmitP__CCA__makeInput', quals=[], storage=['static', 'inline'] (at pp.c:24313)
      FuncDecl: quals=None (at pp.c:24313)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__CCA__makeInput', quals=[] (at pp.c:24313)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24313)
      FuncCall:  (at None)
        ID: name='Msp430GpioC__5__GeneralIO__makeInput' (at pp.c:24315)
  FuncDef:  (at pp.c:24320)
    Decl: name='CC2420TransmitP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24320)
      FuncDecl: quals=None (at pp.c:24320)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__Init__init', quals=[] (at pp.c:24320)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24322)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CCA__makeInput' (at pp.c:24323)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CSN__makeOutput' (at pp.c:24324)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__SFD__makeInput' (at pp.c:24325)
      Return:  (at pp.c:24326)
        ID: name='SUCCESS' (at pp.c:24326)
  FuncDef:  (at pp.c:24330)
    Decl: name='CC2420ReceiveP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24330)
      FuncDecl: quals=None (at pp.c:24330)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__Init__init', quals=[] (at pp.c:24330)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24332)
      Assignment: op='=' (at pp.c:24333)
        ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:24333)
        UnaryOp: op='&' (at pp.c:24333)
          ID: name='CC2420ReceiveP__m_rx_buf' (at pp.c:24333)
      Return:  (at pp.c:24334)
        ID: name='SUCCESS' (at pp.c:24334)
  FuncDef:  (at pp.c:24338)
    Decl: name='RandomMlcgC__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24338)
      FuncDecl: quals=None (at pp.c:24338)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RandomMlcgC__Init__init', quals=[] (at pp.c:24338)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24340)
      Assignment: op='=' (at pp.c:24343)
        ID: name='RandomMlcgC__seed' (at pp.c:24343)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['uint32_t'] (at None)
          BinaryOp: op='+' (at pp.c:24343)
            ID: name='TOS_NODE_ID' (at pp.c:24343)
            Constant: type='int', value='1' (at pp.c:24343)
      Return:  (at pp.c:24345)
        ID: name='SUCCESS' (at pp.c:24345)
  FuncDef:  (at pp.c:24349)
    Decl: name='UniqueSendP__Random__rand16', quals=[], storage=['static', 'inline'] (at pp.c:24349)
      FuncDecl: quals=None (at pp.c:24349)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueSendP__Random__rand16', quals=[] (at pp.c:24349)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:24349)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24351)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24351)
          IdentifierType: names=['int', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24355)
        ID: name='__nesc_result' (at pp.c:24355)
        FuncCall:  (at None)
          ID: name='RandomMlcgC__Random__rand16' (at pp.c:24355)
      Return:  (at pp.c:24359)
        ID: name='__nesc_result' (at pp.c:24359)
  FuncDef:  (at pp.c:24364)
    Decl: name='UniqueSendP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24364)
      FuncDecl: quals=None (at pp.c:24364)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueSendP__Init__init', quals=[] (at pp.c:24364)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24366)
      Assignment: op='=' (at pp.c:24367)
        ID: name='UniqueSendP__localSendId' (at pp.c:24367)
        FuncCall:  (at None)
          ID: name='UniqueSendP__Random__rand16' (at pp.c:24367)
      Return:  (at pp.c:24368)
        ID: name='SUCCESS' (at pp.c:24368)
  FuncDef:  (at pp.c:24372)
    Decl: name='UniqueReceiveP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24372)
      FuncDecl: quals=None (at pp.c:24372)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueReceiveP__Init__init', quals=[] (at pp.c:24372)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24374)
      Decl: name='i', quals=[], storage=[] (at pp.c:24375)
        TypeDecl: declname='i', quals=[] (at pp.c:24375)
          IdentifierType: names=['int'] (at None)
      For:  (at pp.c:24378)
        Assignment: op='=' (at pp.c:24378)
          ID: name='i' (at pp.c:24378)
          Constant: type='int', value='0' (at pp.c:24378)
        BinaryOp: op='<' (at pp.c:24378)
          ID: name='i' (at pp.c:24378)
          Constant: type='int', value='4' (at pp.c:24378)
        UnaryOp: op='p++' (at pp.c:24378)
          ID: name='i' (at pp.c:24378)
        Compound:  (at pp.c:24378)
          Assignment: op='=' (at pp.c:24379)
            StructRef: type='.' (at pp.c:24379)
              ArrayRef:  (at pp.c:24379)
                ID: name='UniqueReceiveP__receivedMessages' (at pp.c:24379)
                ID: name='i' (at pp.c:24379)
              ID: name='source' (at pp.c:24379)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['am_addr_t'] (at None)
              Constant: type='int', value='0xFFFF' (at pp.c:24379)
          Assignment: op='=' (at pp.c:24380)
            StructRef: type='.' (at pp.c:24380)
              ArrayRef:  (at pp.c:24380)
                ID: name='UniqueReceiveP__receivedMessages' (at pp.c:24380)
                ID: name='i' (at pp.c:24380)
              ID: name='dsn' (at pp.c:24380)
            Constant: type='int', value='0' (at pp.c:24380)
      Return:  (at pp.c:24382)
        ID: name='SUCCESS' (at pp.c:24382)
  FuncDef:  (at pp.c:24386)
    Decl: name='FcfsResourceQueueC__0__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24386)
      FuncDecl: quals=None (at pp.c:24386)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__0__Init__init', quals=[] (at pp.c:24386)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24388)
      FuncCall:  (at None)
        ID: name='memset' (at pp.c:24389)
        ExprList:  (at pp.c:24389)
          ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:24389)
          ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:24389)
          UnaryOp: op='sizeof' (at pp.c:24389)
            ID: name='FcfsResourceQueueC__0__resQ' (at pp.c:24389)
      Return:  (at pp.c:24390)
        ID: name='SUCCESS' (at pp.c:24390)
  FuncDef:  (at pp.c:24394)
    Decl: name='DefaultLplP__Init__init', quals=[], storage=['inline', 'static'] (at pp.c:24394)
      FuncDecl: quals=None (at pp.c:24394)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__Init__init', quals=[] (at pp.c:24394)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24396)
      Assignment: op='=' (at pp.c:24397)
        ID: name='DefaultLplP__dutyCycling' (at pp.c:24397)
        ID: name='FALSE' (at pp.c:24397)
      Return:  (at pp.c:24398)
        ID: name='SUCCESS' (at pp.c:24398)
  FuncDef:  (at pp.c:24402)
    Decl: name='RealMainP__SoftwareInit__init', quals=[], storage=['static', 'inline'] (at pp.c:24402)
      FuncDecl: quals=None (at pp.c:24402)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__SoftwareInit__init', quals=[] (at pp.c:24402)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:24402)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24404)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24404)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24408)
        ID: name='__nesc_result' (at pp.c:24408)
        FuncCall:  (at None)
          ID: name='DefaultLplP__Init__init' (at pp.c:24408)
      Assignment: op='=' (at pp.c:24410)
        ID: name='__nesc_result' (at pp.c:24410)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24410)
          ExprList:  (at pp.c:24410)
            ID: name='__nesc_result' (at pp.c:24410)
            FuncCall:  (at None)
              ID: name='FcfsResourceQueueC__0__Init__init' (at pp.c:24410)
      Assignment: op='=' (at pp.c:24412)
        ID: name='__nesc_result' (at pp.c:24412)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24412)
          ExprList:  (at pp.c:24412)
            ID: name='__nesc_result' (at pp.c:24412)
            FuncCall:  (at None)
              ID: name='UniqueReceiveP__Init__init' (at pp.c:24412)
      Assignment: op='=' (at pp.c:24414)
        ID: name='__nesc_result' (at pp.c:24414)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24414)
          ExprList:  (at pp.c:24414)
            ID: name='__nesc_result' (at pp.c:24414)
            FuncCall:  (at None)
              ID: name='UniqueSendP__Init__init' (at pp.c:24414)
      Assignment: op='=' (at pp.c:24416)
        ID: name='__nesc_result' (at pp.c:24416)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24416)
          ExprList:  (at pp.c:24416)
            ID: name='__nesc_result' (at pp.c:24416)
            FuncCall:  (at None)
              ID: name='RandomMlcgC__Init__init' (at pp.c:24416)
      Assignment: op='=' (at pp.c:24418)
        ID: name='__nesc_result' (at pp.c:24418)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24418)
          ExprList:  (at pp.c:24418)
            ID: name='__nesc_result' (at pp.c:24418)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__Init__init' (at pp.c:24418)
      Assignment: op='=' (at pp.c:24420)
        ID: name='__nesc_result' (at pp.c:24420)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24420)
          ExprList:  (at pp.c:24420)
            ID: name='__nesc_result' (at pp.c:24420)
            FuncCall:  (at None)
              ID: name='CC2420TransmitP__Init__init' (at pp.c:24420)
      Assignment: op='=' (at pp.c:24422)
        ID: name='__nesc_result' (at pp.c:24422)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24422)
          ExprList:  (at pp.c:24422)
            ID: name='__nesc_result' (at pp.c:24422)
            FuncCall:  (at None)
              ID: name='Msp430AlarmC__1__Init__init' (at pp.c:24422)
      Assignment: op='=' (at pp.c:24424)
        ID: name='__nesc_result' (at pp.c:24424)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24424)
          ExprList:  (at pp.c:24424)
            ID: name='__nesc_result' (at pp.c:24424)
            FuncCall:  (at None)
              ID: name='StateImplP__Init__init' (at pp.c:24424)
      Assignment: op='=' (at pp.c:24426)
        ID: name='__nesc_result' (at pp.c:24426)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24426)
          ExprList:  (at pp.c:24426)
            ID: name='__nesc_result' (at pp.c:24426)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__Init__init' (at pp.c:24426)
      Assignment: op='=' (at pp.c:24428)
        ID: name='__nesc_result' (at pp.c:24428)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24428)
          ExprList:  (at pp.c:24428)
            ID: name='__nesc_result' (at pp.c:24428)
            FuncCall:  (at None)
              ID: name='FcfsResourceQueueC__2__Init__init' (at pp.c:24428)
      Assignment: op='=' (at pp.c:24430)
        ID: name='__nesc_result' (at pp.c:24430)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24430)
          ExprList:  (at pp.c:24430)
            ID: name='__nesc_result' (at pp.c:24430)
            FuncCall:  (at None)
              ID: name='FcfsResourceQueueC__1__Init__init' (at pp.c:24430)
      Assignment: op='=' (at pp.c:24432)
        ID: name='__nesc_result' (at pp.c:24432)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24432)
          ExprList:  (at pp.c:24432)
            ID: name='__nesc_result' (at pp.c:24432)
            FuncCall:  (at None)
              ID: name='Stm25pSpiP__Init__init' (at pp.c:24432)
      Assignment: op='=' (at pp.c:24434)
        ID: name='__nesc_result' (at pp.c:24434)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24434)
          ExprList:  (at pp.c:24434)
            ID: name='__nesc_result' (at pp.c:24434)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Init__init' (at pp.c:24434)
      Assignment: op='=' (at pp.c:24436)
        ID: name='__nesc_result' (at pp.c:24436)
        FuncCall:  (at None)
          ID: name='ecombine' (at pp.c:24436)
          ExprList:  (at pp.c:24436)
            ID: name='__nesc_result' (at pp.c:24436)
            FuncCall:  (at None)
              ID: name='Msp430AlarmC__0__Init__init' (at pp.c:24436)
      Return:  (at pp.c:24440)
        ID: name='__nesc_result' (at pp.c:24440)
  FuncDef:  (at pp.c:24445)
    Decl: name='PowerCycleP__PowerCycle__setSleepInterval', quals=[], storage=['inline', 'static'] (at pp.c:24445)
      FuncDecl: quals=None (at pp.c:24445)
        ParamList:  (at pp.c:24445)
          Decl: name='sleepIntervalMs', quals=[], storage=[] (at pp.c:24445)
            TypeDecl: declname='sleepIntervalMs', quals=[] (at pp.c:24445)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='PowerCycleP__PowerCycle__setSleepInterval', quals=[] (at pp.c:24445)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24447)
      If:  (at pp.c:24448)
        BinaryOp: op='&&' (at pp.c:24448)
          UnaryOp: op='!' (at pp.c:24448)
            ID: name='PowerCycleP__sleepInterval' (at pp.c:24448)
          ID: name='sleepIntervalMs' (at pp.c:24448)
        Compound:  (at pp.c:24448)
          FuncCall:  (at None)
            ID: name='PowerCycleP__stopRadio__postTask' (at pp.c:24450)
      Assignment: op='=' (at pp.c:24453)
        ID: name='PowerCycleP__sleepInterval' (at pp.c:24453)
        ID: name='sleepIntervalMs' (at pp.c:24453)
      If:  (at pp.c:24455)
        BinaryOp: op='&&' (at pp.c:24455)
          BinaryOp: op='==' (at pp.c:24455)
            ID: name='PowerCycleP__sleepInterval' (at pp.c:24455)
            Constant: type='int', value='0' (at pp.c:24455)
          FuncCall:  (at None)
            ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:24455)
            ExprList:  (at pp.c:24455)
              ID: name='PowerCycleP__S_ON' (at pp.c:24455)
        Compound:  (at pp.c:24455)
          If:  (at pp.c:24460)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='PowerCycleP__RadioPowerState__getState' (at pp.c:24460)
              ID: name='PowerCycleP__S_OFF' (at pp.c:24460)
            Compound:  (at pp.c:24460)
              FuncCall:  (at None)
                ID: name='PowerCycleP__SubControl__start' (at pp.c:24461)
  FuncDef:  (at pp.c:24467)
    Decl: name='DefaultLplP__PowerCycle__setSleepInterval', quals=[], storage=['static', 'inline'] (at pp.c:24467)
      FuncDecl: quals=None (at pp.c:24467)
        ParamList:  (at pp.c:24467)
          Decl: name='sleepIntervalMs', quals=[], storage=[] (at pp.c:24467)
            TypeDecl: declname='sleepIntervalMs', quals=[] (at pp.c:24467)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='DefaultLplP__PowerCycle__setSleepInterval', quals=[] (at pp.c:24467)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24467)
      FuncCall:  (at None)
        ID: name='PowerCycleP__PowerCycle__setSleepInterval' (at pp.c:24469)
        ExprList:  (at pp.c:24469)
          ID: name='sleepIntervalMs' (at pp.c:24469)
  FuncDef:  (at pp.c:24474)
    Decl: name='DefaultLplP__LowPowerListening__setLocalWakeupInterval', quals=[], storage=['inline', 'static'] (at pp.c:24474)
      FuncDecl: quals=None (at pp.c:24474)
        ParamList:  (at pp.c:24474)
          Decl: name='intervalMs', quals=[], storage=[] (at pp.c:24474)
            TypeDecl: declname='intervalMs', quals=[] (at pp.c:24474)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='DefaultLplP__LowPowerListening__setLocalWakeupInterval', quals=[] (at pp.c:24474)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24476)
      FuncCall:  (at None)
        ID: name='DefaultLplP__PowerCycle__setSleepInterval' (at pp.c:24477)
        ExprList:  (at pp.c:24477)
          ID: name='intervalMs' (at pp.c:24477)
  FuncDef:  (at pp.c:24481)
    Decl: name='LowPowerSensingPeriodicSamplerC__LPL__setLocalWakeupInterval', quals=[], storage=['static', 'inline'] (at pp.c:24481)
      FuncDecl: quals=None (at pp.c:24481)
        ParamList:  (at pp.c:24481)
          Decl: name='intervalMs', quals=[], storage=[] (at pp.c:24481)
            TypeDecl: declname='intervalMs', quals=[] (at pp.c:24481)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__LPL__setLocalWakeupInterval', quals=[] (at pp.c:24481)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24481)
      FuncCall:  (at None)
        ID: name='DefaultLplP__LowPowerListening__setLocalWakeupInterval' (at pp.c:24483)
        ExprList:  (at pp.c:24483)
          ID: name='intervalMs' (at pp.c:24483)
  FuncDef:  (at pp.c:24488)
    Decl: name='LowPowerSensingPeriodicSamplerC__Boot__booted', quals=[], storage=['inline', 'static'] (at pp.c:24488)
      FuncDecl: quals=None (at pp.c:24488)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__Boot__booted', quals=[] (at pp.c:24488)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24490)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__LPL__setLocalWakeupInterval' (at pp.c:24491)
        ExprList:  (at pp.c:24491)
          ID: name='LPL_INTERVAL' (at pp.c:24491)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__AMControl__start' (at pp.c:24492)
  FuncDef:  (at pp.c:24496)
    Decl: name='PeriodicSampleLoggerP__0__Boot__booted', quals=[], storage=['inline', 'static'] (at pp.c:24496)
      FuncDecl: quals=None (at pp.c:24496)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__Boot__booted', quals=[] (at pp.c:24496)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24498)
      If:  (at pp.c:24499)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__LogWrite__erase' (at pp.c:24499)
          ID: name='SUCCESS' (at pp.c:24499)
        Compound:  (at pp.c:24499)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__eraseTask__postTask' (at pp.c:24500)
  FuncDef:  (at pp.c:24505)
    Decl: name='RealMainP__Boot__booted', quals=[], storage=['static', 'inline'] (at pp.c:24505)
      FuncDecl: quals=None (at pp.c:24505)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__Boot__booted', quals=[] (at pp.c:24505)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24505)
      FuncCall:  (at None)
        ID: name='PeriodicSampleLoggerP__0__Boot__booted' (at pp.c:24507)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__Boot__booted' (at pp.c:24509)
  FuncDef:  (at pp.c:24514)
    Decl: name='__nesc_disable_interrupt', quals=[], storage=['inline', 'static'] (at pp.c:24514)
      FuncDecl: quals=None (at pp.c:24514)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_disable_interrupt', quals=[] (at pp.c:24514)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24515)
      Assignment: op='&=' (at pp.c:24516)
        ID: name='_R2' (at pp.c:24516)
        Constant: type='int', value='0xfff7' (at pp.c:24516)
  FuncDef:  (at pp.c:24520)
    Decl: name='Msp430ClockP__McuPowerOverride__lowestState', quals=[], storage=['inline', 'static'] (at pp.c:24520)
      FuncDecl: quals=None (at pp.c:24520)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430ClockP__McuPowerOverride__lowestState', quals=[] (at pp.c:24520)
          IdentifierType: names=['mcu_power_t'] (at None)
    Compound:  (at pp.c:24522)
      Return:  (at pp.c:24523)
        ID: name='MSP430_POWER_LPM3' (at pp.c:24523)
  FuncDef:  (at pp.c:24527)
    Decl: name='McuSleepC__McuPowerOverride__lowestState', quals=[], storage=['static', 'inline'] (at pp.c:24527)
      FuncDecl: quals=None (at pp.c:24527)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='McuSleepC__McuPowerOverride__lowestState', quals=[] (at pp.c:24527)
          IdentifierType: names=['mcu_power_t'] (at None)
    Compound:  (at pp.c:24527)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24529)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24529)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24533)
        ID: name='__nesc_result' (at pp.c:24533)
        FuncCall:  (at None)
          ID: name='Msp430ClockP__McuPowerOverride__lowestState' (at pp.c:24533)
      Return:  (at pp.c:24537)
        ID: name='__nesc_result' (at pp.c:24537)
  FuncDef:  (at pp.c:24542)
    Decl: name='McuSleepC__getPowerState', quals=[], storage=['inline', 'static'] (at pp.c:24542)
      FuncDecl: quals=None (at pp.c:24542)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='McuSleepC__getPowerState', quals=[] (at pp.c:24542)
          IdentifierType: names=['mcu_power_t'] (at None)
    Compound:  (at pp.c:24544)
      Decl: name='pState', quals=[], storage=[] (at pp.c:24545)
        TypeDecl: declname='pState', quals=[] (at pp.c:24545)
          IdentifierType: names=['mcu_power_t'] (at None)
        ID: name='MSP430_POWER_LPM4' (at pp.c:24545)
      If:  (at pp.c:24555)
        BinaryOp: op='||' (at pp.c:24557)
          BinaryOp: op='||' (at pp.c:24557)
            BinaryOp: op='||' (at pp.c:24557)
              BinaryOp: op='&&' (at pp.c:24557)
                BinaryOp: op='||' (at pp.c:24557)
                  BinaryOp: op='||' (at pp.c:24557)
                    BinaryOp: op='&' (at pp.c:24557)
                      ID: name='TA0CCTL0' (at pp.c:24557)
                      Constant: type='int', value='0x0010' (at pp.c:24557)
                    BinaryOp: op='&' (at pp.c:24558)
                      ID: name='TA0CCTL1' (at pp.c:24558)
                      Constant: type='int', value='0x0010' (at pp.c:24558)
                  BinaryOp: op='&' (at pp.c:24559)
                    ID: name='TA0CCTL2' (at pp.c:24559)
                    Constant: type='int', value='0x0010' (at pp.c:24559)
                BinaryOp: op='==' (at pp.c:24560)
                  BinaryOp: op='&' (at pp.c:24560)
                    ID: name='TA0CTL' (at pp.c:24560)
                    BinaryOp: op='<<' (at pp.c:24560)
                      Constant: type='int', value='3' (at pp.c:24560)
                      Constant: type='int', value='8' (at pp.c:24560)
                  BinaryOp: op='<<' (at pp.c:24560)
                    Constant: type='int', value='2' (at pp.c:24560)
                    Constant: type='int', value='8' (at pp.c:24560)
              BinaryOp: op='&&' (at pp.c:24561)
                BinaryOp: op='&' (at pp.c:24561)
                  ID: name='ME1' (at pp.c:24561)
                  BinaryOp: op='|' (at pp.c:24561)
                    BinaryOp: op='<<' (at pp.c:24561)
                      Constant: type='int', value='1' (at pp.c:24561)
                      Constant: type='int', value='7' (at pp.c:24561)
                    BinaryOp: op='<<' (at pp.c:24561)
                      Constant: type='int', value='1' (at pp.c:24561)
                      Constant: type='int', value='6' (at pp.c:24561)
                BinaryOp: op='&' (at pp.c:24561)
                  ID: name='U0TCTL' (at pp.c:24561)
                  Constant: type='int', value='0x20' (at pp.c:24561)
            BinaryOp: op='&&' (at pp.c:24562)
              BinaryOp: op='&' (at pp.c:24562)
                ID: name='ME2' (at pp.c:24562)
                BinaryOp: op='|' (at pp.c:24562)
                  BinaryOp: op='<<' (at pp.c:24562)
                    Constant: type='int', value='1' (at pp.c:24562)
                    Constant: type='int', value='5' (at pp.c:24562)
                  BinaryOp: op='<<' (at pp.c:24562)
                    Constant: type='int', value='1' (at pp.c:24562)
                    Constant: type='int', value='4' (at pp.c:24562)
              BinaryOp: op='&' (at pp.c:24562)
                ID: name='U1TCTL' (at pp.c:24562)
                Constant: type='int', value='0x20' (at pp.c:24562)
          BinaryOp: op='&&' (at pp.c:24565)
            BinaryOp: op='&&' (at pp.c:24565)
              BinaryOp: op='&&' (at pp.c:24565)
                BinaryOp: op='&&' (at pp.c:24565)
                  BinaryOp: op='&' (at pp.c:24565)
                    ID: name='U0CTLnr' (at pp.c:24565)
                    Constant: type='int', value='0x01' (at pp.c:24565)
                  BinaryOp: op='&' (at pp.c:24565)
                    ID: name='I2CTCTLnr' (at pp.c:24565)
                    Constant: type='int', value='0x20' (at pp.c:24565)
                BinaryOp: op='&' (at pp.c:24566)
                  ID: name='I2CDCTLnr' (at pp.c:24566)
                  Constant: type='int', value='0x20' (at pp.c:24566)
              BinaryOp: op='&' (at pp.c:24566)
                ID: name='U0CTLnr' (at pp.c:24566)
                Constant: type='int', value='0x04' (at pp.c:24566)
            BinaryOp: op='&' (at pp.c:24566)
              ID: name='U0CTLnr' (at pp.c:24566)
              Constant: type='int', value='0x20' (at pp.c:24566)
        Compound:  (at pp.c:24566)
          Assignment: op='=' (at pp.c:24569)
            ID: name='pState' (at pp.c:24569)
            ID: name='MSP430_POWER_LPM1' (at pp.c:24569)
      If:  (at pp.c:24573)
        BinaryOp: op='&' (at pp.c:24573)
          ID: name='ADC12CTL0' (at pp.c:24573)
          Constant: type='int', value='0x0010' (at pp.c:24573)
        Compound:  (at pp.c:24573)
          If:  (at pp.c:24574)
            BinaryOp: op='&' (at pp.c:24574)
              ID: name='ADC12CTL1' (at pp.c:24574)
              BinaryOp: op='<<' (at pp.c:24574)
                Constant: type='int', value='2' (at pp.c:24574)
                Constant: type='int', value='3' (at pp.c:24574)
            Compound:  (at pp.c:24574)
              If:  (at pp.c:24576)
                BinaryOp: op='&' (at pp.c:24576)
                  ID: name='ADC12CTL1' (at pp.c:24576)
                  BinaryOp: op='<<' (at pp.c:24576)
                    Constant: type='int', value='1' (at pp.c:24576)
                    Constant: type='int', value='3' (at pp.c:24576)
                Compound:  (at pp.c:24576)
                  Assignment: op='=' (at pp.c:24577)
                    ID: name='pState' (at pp.c:24577)
                    ID: name='MSP430_POWER_LPM1' (at pp.c:24577)
                Compound:  (at pp.c:24579)
                  Assignment: op='=' (at pp.c:24581)
                    ID: name='pState' (at pp.c:24581)
                    ID: name='MSP430_POWER_ACTIVE' (at pp.c:24581)
            Compound:  (at pp.c:24584)
              If:  (at pp.c:24586)
                BinaryOp: op='&&' (at pp.c:24586)
                  BinaryOp: op='&' (at pp.c:24586)
                    ID: name='ADC12CTL1' (at pp.c:24586)
                    Constant: type='int', value='0x0400' (at pp.c:24586)
                  BinaryOp: op='==' (at pp.c:24586)
                    BinaryOp: op='&' (at pp.c:24586)
                      ID: name='TA0CTL' (at pp.c:24586)
                      BinaryOp: op='<<' (at pp.c:24586)
                        Constant: type='int', value='3' (at pp.c:24586)
                        Constant: type='int', value='8' (at pp.c:24586)
                    BinaryOp: op='<<' (at pp.c:24586)
                      Constant: type='int', value='2' (at pp.c:24586)
                      Constant: type='int', value='8' (at pp.c:24586)
                Compound:  (at pp.c:24586)
                  Assignment: op='=' (at pp.c:24590)
                    ID: name='pState' (at pp.c:24590)
                    ID: name='MSP430_POWER_LPM1' (at pp.c:24590)
      Return:  (at pp.c:24595)
        ID: name='pState' (at pp.c:24595)
  FuncDef:  (at pp.c:24599)
    Decl: name='mcombine', quals=[], storage=['inline', 'static'] (at pp.c:24599)
      FuncDecl: quals=None (at pp.c:24599)
        ParamList:  (at pp.c:24599)
          Decl: name='m1', quals=[], storage=[] (at pp.c:24599)
            TypeDecl: declname='m1', quals=[] (at pp.c:24599)
              IdentifierType: names=['mcu_power_t'] (at None)
          Decl: name='m2', quals=[], storage=[] (at pp.c:24599)
            TypeDecl: declname='m2', quals=[] (at pp.c:24599)
              IdentifierType: names=['mcu_power_t'] (at None)
        TypeDecl: declname='mcombine', quals=[] (at pp.c:24599)
          IdentifierType: names=['mcu_power_t'] (at None)
    Compound:  (at pp.c:24601)
      Return:  (at pp.c:24602)
        TernaryOp:  (at pp.c:24602)
          BinaryOp: op='<' (at pp.c:24602)
            ID: name='m1' (at pp.c:24602)
            ID: name='m2' (at pp.c:24602)
          ID: name='m1' (at pp.c:24602)
          ID: name='m2' (at pp.c:24602)
  FuncDef:  (at pp.c:24606)
    Decl: name='McuSleepC__computePowerState', quals=[], storage=['inline', 'static'] (at pp.c:24606)
      FuncDecl: quals=None (at pp.c:24606)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='McuSleepC__computePowerState', quals=[] (at pp.c:24606)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24608)
      Assignment: op='=' (at pp.c:24609)
        ID: name='McuSleepC__powerState' (at pp.c:24609)
        FuncCall:  (at None)
          ID: name='mcombine' (at pp.c:24609)
          ExprList:  (at None)
            FuncCall:  (at None)
              ID: name='McuSleepC__getPowerState' (at pp.c:24609)
            FuncCall:  (at None)
              ID: name='McuSleepC__McuPowerOverride__lowestState' (at pp.c:24610)
  FuncDef:  (at pp.c:24613)
    Decl: name='McuSleepC__McuSleep__sleep', quals=[], storage=['inline', 'static'] (at pp.c:24613)
      FuncDecl: quals=None (at pp.c:24613)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='McuSleepC__McuSleep__sleep', quals=[] (at pp.c:24613)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24615)
      Decl: name='temp', quals=[], storage=[] (at pp.c:24616)
        TypeDecl: declname='temp', quals=[] (at pp.c:24616)
          IdentifierType: names=['uint16_t'] (at None)
      If:  (at pp.c:24619)
        ID: name='McuSleepC__dirty' (at pp.c:24619)
        Compound:  (at pp.c:24619)
          FuncCall:  (at None)
            ID: name='McuSleepC__computePowerState' (at pp.c:24620)
      Assignment: op='=' (at pp.c:24623)
        ID: name='temp' (at pp.c:24623)
        BinaryOp: op='|' (at pp.c:24623)
          ArrayRef:  (at pp.c:24623)
            ID: name='McuSleepC__msp430PowerBits' (at pp.c:24623)
            ID: name='McuSleepC__powerState' (at pp.c:24623)
          Constant: type='int', value='0x0008' (at pp.c:24623)
      Assignment: op='|=' (at pp.c:24624)
        ID: name='_R2' (at pp.c:24624)
        ID: name='temp' (at pp.c:24624)
      FuncCall:  (at None)
        ID: name='__nesc_disable_interrupt' (at pp.c:24627)
  FuncDef:  (at pp.c:24631)
    Decl: name='SchedulerBasicP__McuSleep__sleep', quals=[], storage=['static', 'inline'] (at pp.c:24631)
      FuncDecl: quals=None (at pp.c:24631)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SchedulerBasicP__McuSleep__sleep', quals=[] (at pp.c:24631)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24631)
      FuncCall:  (at None)
        ID: name='McuSleepC__McuSleep__sleep' (at pp.c:24633)
  FuncDef:  (at pp.c:24638)
    Decl: name='SchedulerBasicP__popTask', quals=[], storage=['__inline', 'static'] (at pp.c:24638)
      FuncDecl: quals=None (at pp.c:24638)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SchedulerBasicP__popTask', quals=[] (at pp.c:24638)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:24639)
      If:  (at pp.c:24640)
        BinaryOp: op='!=' (at pp.c:24640)
          ID: name='SchedulerBasicP__m_head' (at pp.c:24640)
          ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24640)
        Compound:  (at pp.c:24641)
          Decl: name='id', quals=[], storage=[] (at pp.c:24642)
            TypeDecl: declname='id', quals=[] (at pp.c:24642)
              IdentifierType: names=['uint8_t'] (at None)
            ID: name='SchedulerBasicP__m_head' (at pp.c:24642)
          Assignment: op='=' (at pp.c:24645)
            ID: name='SchedulerBasicP__m_head' (at pp.c:24645)
            ArrayRef:  (at pp.c:24645)
              ID: name='SchedulerBasicP__m_next' (at pp.c:24645)
              ID: name='SchedulerBasicP__m_head' (at pp.c:24645)
          If:  (at pp.c:24646)
            BinaryOp: op='==' (at pp.c:24646)
              ID: name='SchedulerBasicP__m_head' (at pp.c:24646)
              ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24646)
            Compound:  (at pp.c:24647)
              Assignment: op='=' (at pp.c:24648)
                ID: name='SchedulerBasicP__m_tail' (at pp.c:24648)
                ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24648)
          Assignment: op='=' (at pp.c:24650)
            ArrayRef:  (at pp.c:24650)
              ID: name='SchedulerBasicP__m_next' (at pp.c:24650)
              ID: name='id' (at pp.c:24650)
            ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24650)
          Return:  (at pp.c:24651)
            ID: name='id' (at pp.c:24651)
        Compound:  (at pp.c:24654)
          Return:  (at pp.c:24655)
            ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24655)
  FuncDef:  (at pp.c:24660)
    Decl: name='SchedulerBasicP__Scheduler__taskLoop', quals=[], storage=['inline', 'static'] (at pp.c:24660)
      FuncDecl: quals=None (at pp.c:24660)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SchedulerBasicP__Scheduler__taskLoop', quals=[] (at pp.c:24660)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24661)
      For:  (at pp.c:24662)
        Compound:  (at pp.c:24663)
          Decl: name='nextTask', quals=[], storage=[] (at pp.c:24664)
            TypeDecl: declname='nextTask', quals=[] (at pp.c:24664)
              IdentifierType: names=['uint8_t'] (at None)
          Compound:  (at pp.c:24666)
            Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:24666)
              TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:24666)
                IdentifierType: names=['__nesc_atomic_t'] (at None)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_start' (at pp.c:24666)
            Compound:  (at pp.c:24667)
              While:  (at pp.c:24668)
                BinaryOp: op='==' (at pp.c:24668)
                  Assignment: op='=' (at pp.c:24668)
                    ID: name='nextTask' (at pp.c:24668)
                    FuncCall:  (at None)
                      ID: name='SchedulerBasicP__popTask' (at pp.c:24668)
                  ID: name='SchedulerBasicP__NO_TASK' (at pp.c:24668)
                Compound:  (at pp.c:24669)
                  FuncCall:  (at None)
                    ID: name='SchedulerBasicP__McuSleep__sleep' (at pp.c:24670)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:24674)
              ExprList:  (at pp.c:24674)
                ID: name='__nesc_atomic' (at pp.c:24674)
          FuncCall:  (at None)
            ID: name='SchedulerBasicP__TaskBasic__runTask' (at pp.c:24675)
            ExprList:  (at pp.c:24675)
              ID: name='nextTask' (at pp.c:24675)
  FuncDef:  (at pp.c:24680)
    Decl: name='RealMainP__Scheduler__taskLoop', quals=[], storage=['static', 'inline'] (at pp.c:24680)
      FuncDecl: quals=None (at pp.c:24680)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RealMainP__Scheduler__taskLoop', quals=[] (at pp.c:24680)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24680)
      FuncCall:  (at None)
        ID: name='SchedulerBasicP__Scheduler__taskLoop' (at pp.c:24682)
  FuncDef:  (at pp.c:24687)
    Decl: name='Msp430UsartShareP__0__ArbiterInfo__userId', quals=[], storage=['static', 'inline'] (at pp.c:24687)
      FuncDecl: quals=None (at pp.c:24687)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__ArbiterInfo__userId', quals=[] (at pp.c:24687)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:24687)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24689)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24689)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24693)
        ID: name='__nesc_result' (at pp.c:24693)
        FuncCall:  (at None)
          ID: name='ArbiterP__1__ArbiterInfo__userId' (at pp.c:24693)
      Return:  (at pp.c:24697)
        ID: name='__nesc_result' (at pp.c:24697)
  FuncDef:  (at pp.c:24702)
    Decl: name='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:24702)
      FuncDecl: quals=None (at pp.c:24702)
        ParamList:  (at pp.c:24702)
          Decl: name='id', quals=[], storage=[] (at pp.c:24702)
            TypeDecl: declname='id', quals=[] (at pp.c:24702)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:24702)
            TypeDecl: declname='data', quals=[] (at pp.c:24702)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__rxDone', quals=[] (at pp.c:24702)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24704)
  FuncDef:  (at pp.c:24708)
    Decl: name='Msp430UsartShareP__0__Interrupts__rxDone', quals=[], storage=['static', 'inline'] (at pp.c:24708)
      FuncDecl: quals=None (at pp.c:24708)
        ParamList:  (at pp.c:24708)
          Decl: name='arg_0x101f8c6b0', quals=[], storage=[] (at pp.c:24708)
            TypeDecl: declname='arg_0x101f8c6b0', quals=[] (at pp.c:24708)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:24708)
            TypeDecl: declname='data', quals=[] (at pp.c:24708)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__Interrupts__rxDone', quals=[] (at pp.c:24708)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24708)
      Switch:  (at pp.c:24710)
        ID: name='arg_0x101f8c6b0' (at pp.c:24710)
        Compound:  (at pp.c:24710)
          Case:  (at pp.c:24712)
            ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:24712)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone' (at pp.c:24714)
              ExprList:  (at pp.c:24714)
                ID: name='data' (at pp.c:24714)
          Break:  (at pp.c:24716)
          Case:  (at pp.c:24718)
            ID: name='Msp430Usart0C__1__CLIENT_ID' (at pp.c:24718)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone' (at pp.c:24720)
              ExprList:  (at pp.c:24720)
                ID: name='data' (at pp.c:24720)
          Break:  (at pp.c:24722)
          Default:  (at pp.c:24724)
            FuncCall:  (at None)
              ID: name='Msp430UsartShareP__0__Interrupts__default__rxDone' (at pp.c:24726)
              ExprList:  (at pp.c:24726)
                ID: name='arg_0x101f8c6b0' (at pp.c:24726)
                ID: name='data' (at pp.c:24726)
          Break:  (at pp.c:24728)
  FuncDef:  (at pp.c:24735)
    Decl: name='Msp430UsartShareP__0__ArbiterInfo__inUse', quals=[], storage=['static', 'inline'] (at pp.c:24735)
      FuncDecl: quals=None (at pp.c:24735)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__ArbiterInfo__inUse', quals=[] (at pp.c:24735)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:24735)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24737)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24737)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24741)
        ID: name='__nesc_result' (at pp.c:24741)
        FuncCall:  (at None)
          ID: name='ArbiterP__1__ArbiterInfo__inUse' (at pp.c:24741)
      Return:  (at pp.c:24745)
        ID: name='__nesc_result' (at pp.c:24745)
  FuncDef:  (at pp.c:24750)
    Decl: name='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[], storage=['inline', 'static'] (at pp.c:24750)
      FuncDecl: quals=None (at pp.c:24750)
        ParamList:  (at pp.c:24750)
          Decl: name='data', quals=[], storage=[] (at pp.c:24750)
            TypeDecl: declname='data', quals=[] (at pp.c:24750)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__rxDone', quals=[] (at pp.c:24750)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24752)
      If:  (at pp.c:24753)
        FuncCall:  (at None)
          ID: name='Msp430UsartShareP__0__ArbiterInfo__inUse' (at pp.c:24753)
        Compound:  (at pp.c:24753)
          FuncCall:  (at None)
            ID: name='Msp430UsartShareP__0__Interrupts__rxDone' (at pp.c:24754)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430UsartShareP__0__ArbiterInfo__userId' (at pp.c:24754)
              ID: name='data' (at pp.c:24754)
  FuncDef:  (at pp.c:24759)
    Decl: name='HplMsp430Usart0P__Interrupts__rxDone', quals=[], storage=['static', 'inline'] (at pp.c:24759)
      FuncDecl: quals=None (at pp.c:24759)
        ParamList:  (at pp.c:24759)
          Decl: name='data', quals=[], storage=[] (at pp.c:24759)
            TypeDecl: declname='data', quals=[] (at pp.c:24759)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Interrupts__rxDone', quals=[] (at pp.c:24759)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24759)
      FuncCall:  (at None)
        ID: name='Msp430UsartShareP__0__RawInterrupts__rxDone' (at pp.c:24761)
        ExprList:  (at pp.c:24761)
          ID: name='data' (at pp.c:24761)
  FuncDef:  (at pp.c:24766)
    Decl: name='HplMsp430Usart0P__Usart__disableRxIntr', quals=[], storage=['inline', 'static'] (at pp.c:24766)
      FuncDecl: quals=None (at pp.c:24766)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__disableRxIntr', quals=[] (at pp.c:24766)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24768)
      Assignment: op='&=' (at pp.c:24769)
        ID: name='HplMsp430Usart0P__IE1' (at pp.c:24769)
        UnaryOp: op='~' (at pp.c:24769)
          BinaryOp: op='<<' (at pp.c:24769)
            Constant: type='int', value='1' (at pp.c:24769)
            Constant: type='int', value='6' (at pp.c:24769)
  FuncDef:  (at pp.c:24773)
    Decl: name='Msp430SpiNoDmaP__0__Usart__disableRxIntr', quals=[], storage=['static', 'inline'] (at pp.c:24773)
      FuncDecl: quals=None (at pp.c:24773)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__Usart__disableRxIntr', quals=[] (at pp.c:24773)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24773)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Usart__disableRxIntr' (at pp.c:24775)
  FuncDef:  (at pp.c:24780)
    Decl: name='HplMsp430I2C0P__HplI2C__isI2C', quals=[], storage=['inline', 'static'] (at pp.c:24780)
      FuncDecl: quals=None (at pp.c:24780)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430I2C0P__HplI2C__isI2C', quals=[] (at pp.c:24780)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:24782)
      Compound:  (at pp.c:24785)
        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:24786)
          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:24786)
            IdentifierType: names=['char', 'unsigned'] (at None)
          BinaryOp: op='&&' (at pp.c:24788)
            BinaryOp: op='&&' (at pp.c:24788)
              BinaryOp: op='&' (at pp.c:24788)
                ID: name='HplMsp430I2C0P__U0CTL' (at pp.c:24788)
                Constant: type='int', value='0x20' (at pp.c:24788)
              BinaryOp: op='&' (at pp.c:24788)
                ID: name='HplMsp430I2C0P__U0CTL' (at pp.c:24788)
                Constant: type='int', value='0x04' (at pp.c:24788)
            BinaryOp: op='&' (at pp.c:24788)
              ID: name='HplMsp430I2C0P__U0CTL' (at pp.c:24788)
              Constant: type='int', value='0x01' (at pp.c:24788)
        Return:  (at pp.c:24791)
          ID: name='__nesc_temp' (at pp.c:24791)
  FuncDef:  (at pp.c:24796)
    Decl: name='HplMsp430Usart0P__HplI2C__isI2C', quals=[], storage=['static', 'inline'] (at pp.c:24796)
      FuncDecl: quals=None (at pp.c:24796)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__HplI2C__isI2C', quals=[] (at pp.c:24796)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:24796)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:24798)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:24798)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:24802)
        ID: name='__nesc_result' (at pp.c:24802)
        FuncCall:  (at None)
          ID: name='HplMsp430I2C0P__HplI2C__isI2C' (at pp.c:24802)
      Return:  (at pp.c:24806)
        ID: name='__nesc_result' (at pp.c:24806)
  FuncDef:  (at pp.c:24811)
    Decl: name='Msp430UsartShareP__0__I2CInterrupts__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:24811)
      FuncDecl: quals=None (at pp.c:24811)
        ParamList:  (at pp.c:24811)
          Decl: name='id', quals=[], storage=[] (at pp.c:24811)
            TypeDecl: declname='id', quals=[] (at pp.c:24811)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__I2CInterrupts__default__fired', quals=[] (at pp.c:24811)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24813)
  FuncDef:  (at pp.c:24817)
    Decl: name='Msp430UsartShareP__0__I2CInterrupts__fired', quals=[], storage=['static', 'inline'] (at pp.c:24817)
      FuncDecl: quals=None (at pp.c:24817)
        ParamList:  (at pp.c:24817)
          Decl: name='arg_0x101f8a4d0', quals=[], storage=[] (at pp.c:24817)
            TypeDecl: declname='arg_0x101f8a4d0', quals=[] (at pp.c:24817)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__I2CInterrupts__fired', quals=[] (at pp.c:24817)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24817)
      FuncCall:  (at None)
        ID: name='Msp430UsartShareP__0__I2CInterrupts__default__fired' (at pp.c:24819)
        ExprList:  (at pp.c:24819)
          ID: name='arg_0x101f8a4d0' (at pp.c:24819)
  FuncDef:  (at pp.c:24824)
    Decl: name='Msp430UsartShareP__0__RawI2CInterrupts__fired', quals=[], storage=['inline', 'static'] (at pp.c:24824)
      FuncDecl: quals=None (at pp.c:24824)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__RawI2CInterrupts__fired', quals=[] (at pp.c:24824)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24826)
      If:  (at pp.c:24827)
        FuncCall:  (at None)
          ID: name='Msp430UsartShareP__0__ArbiterInfo__inUse' (at pp.c:24827)
        Compound:  (at pp.c:24827)
          FuncCall:  (at None)
            ID: name='Msp430UsartShareP__0__I2CInterrupts__fired' (at pp.c:24828)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430UsartShareP__0__ArbiterInfo__userId' (at pp.c:24828)
  FuncDef:  (at pp.c:24833)
    Decl: name='HplMsp430Usart0P__I2CInterrupts__fired', quals=[], storage=['static', 'inline'] (at pp.c:24833)
      FuncDecl: quals=None (at pp.c:24833)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__I2CInterrupts__fired', quals=[] (at pp.c:24833)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24833)
      FuncCall:  (at None)
        ID: name='Msp430UsartShareP__0__RawI2CInterrupts__fired' (at pp.c:24835)
  FuncDef:  (at pp.c:24840)
    Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:24840)
      FuncDecl: quals=None (at pp.c:24840)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__txDone', quals=[] (at pp.c:24840)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24842)
  FuncDef:  (at pp.c:24846)
    Decl: name='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[], storage=['inline', 'static'] (at pp.c:24846)
      FuncDecl: quals=None (at pp.c:24846)
        ParamList:  (at pp.c:24846)
          Decl: name='id', quals=[], storage=[] (at pp.c:24846)
            TypeDecl: declname='id', quals=[] (at pp.c:24846)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__Interrupts__default__txDone', quals=[] (at pp.c:24846)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24848)
  FuncDef:  (at pp.c:24852)
    Decl: name='Msp430UsartShareP__0__Interrupts__txDone', quals=[], storage=['static', 'inline'] (at pp.c:24852)
      FuncDecl: quals=None (at pp.c:24852)
        ParamList:  (at pp.c:24852)
          Decl: name='arg_0x101f8c6b0', quals=[], storage=[] (at pp.c:24852)
            TypeDecl: declname='arg_0x101f8c6b0', quals=[] (at pp.c:24852)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__Interrupts__txDone', quals=[] (at pp.c:24852)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24852)
      Switch:  (at pp.c:24854)
        ID: name='arg_0x101f8c6b0' (at pp.c:24854)
        Compound:  (at pp.c:24854)
          Case:  (at pp.c:24856)
            ID: name='Msp430Usart0C__0__CLIENT_ID' (at pp.c:24856)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__UsartInterrupts__txDone' (at pp.c:24858)
          Break:  (at pp.c:24860)
          Case:  (at pp.c:24862)
            ID: name='Msp430Usart0C__1__CLIENT_ID' (at pp.c:24862)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__UsartInterrupts__txDone' (at pp.c:24864)
          Break:  (at pp.c:24866)
          Default:  (at pp.c:24868)
            FuncCall:  (at None)
              ID: name='Msp430UsartShareP__0__Interrupts__default__txDone' (at pp.c:24870)
              ExprList:  (at pp.c:24870)
                ID: name='arg_0x101f8c6b0' (at pp.c:24870)
          Break:  (at pp.c:24872)
  FuncDef:  (at pp.c:24879)
    Decl: name='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[], storage=['inline', 'static'] (at pp.c:24879)
      FuncDecl: quals=None (at pp.c:24879)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430UsartShareP__0__RawInterrupts__txDone', quals=[] (at pp.c:24879)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24881)
      If:  (at pp.c:24882)
        FuncCall:  (at None)
          ID: name='Msp430UsartShareP__0__ArbiterInfo__inUse' (at pp.c:24882)
        Compound:  (at pp.c:24882)
          FuncCall:  (at None)
            ID: name='Msp430UsartShareP__0__Interrupts__txDone' (at pp.c:24883)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430UsartShareP__0__ArbiterInfo__userId' (at pp.c:24883)
  FuncDef:  (at pp.c:24888)
    Decl: name='HplMsp430Usart0P__Interrupts__txDone', quals=[], storage=['static', 'inline'] (at pp.c:24888)
      FuncDecl: quals=None (at pp.c:24888)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Interrupts__txDone', quals=[] (at pp.c:24888)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24888)
      FuncCall:  (at None)
        ID: name='Msp430UsartShareP__0__RawInterrupts__txDone' (at pp.c:24890)
  FuncDef:  (at pp.c:24895)
    Decl: name='CC2420ReceiveP__InterruptFIFOP__fired', quals=[], storage=['inline', 'static'] (at pp.c:24895)
      FuncDecl: quals=None (at pp.c:24895)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__InterruptFIFOP__fired', quals=[] (at pp.c:24895)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24897)
      If:  (at pp.c:24898)
        BinaryOp: op='==' (at pp.c:24898)
          ID: name='CC2420ReceiveP__m_state' (at pp.c:24898)
          ID: name='CC2420ReceiveP__S_STARTED' (at pp.c:24898)
        Compound:  (at pp.c:24898)
          Assignment: op='=' (at pp.c:24900)
            ID: name='CC2420ReceiveP__m_state' (at pp.c:24900)
            ID: name='CC2420ReceiveP__S_RX_LENGTH' (at pp.c:24900)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__beginReceive' (at pp.c:24901)
        Compound:  (at pp.c:24907)
          UnaryOp: op='p++' (at pp.c:24908)
            ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:24908)
  FuncDef:  (at pp.c:24913)
    Decl: name='Msp430InterruptC__1__Interrupt__fired', quals=[], storage=['static', 'inline'] (at pp.c:24913)
      FuncDecl: quals=None (at pp.c:24913)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__Interrupt__fired', quals=[] (at pp.c:24913)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24913)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__InterruptFIFOP__fired' (at pp.c:24915)
  FuncDef:  (at pp.c:24920)
    Decl: name='Msp430InterruptC__1__HplInterrupt__fired', quals=[], storage=['inline', 'static'] (at pp.c:24920)
      FuncDecl: quals=None (at pp.c:24920)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__1__HplInterrupt__fired', quals=[] (at pp.c:24920)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24922)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__1__HplInterrupt__clear' (at pp.c:24923)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__1__Interrupt__fired' (at pp.c:24924)
  FuncDef:  (at pp.c:24928)
    Decl: name='HplMsp430InterruptP__Port10__fired', quals=[], storage=['static', 'inline'] (at pp.c:24928)
      FuncDecl: quals=None (at pp.c:24928)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port10__fired', quals=[] (at pp.c:24928)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24928)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__1__HplInterrupt__fired' (at pp.c:24930)
  FuncDef:  (at pp.c:24935)
    Decl: name='HplMsp430InterruptP__Port11__clear', quals=[], storage=['inline', 'static'] (at pp.c:24935)
      FuncDecl: quals=None (at pp.c:24935)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port11__clear', quals=[] (at pp.c:24935)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24937)
      Assignment: op='&=' (at pp.c:24939)
        ID: name='P1IFG' (at pp.c:24939)
        UnaryOp: op='~' (at pp.c:24939)
          BinaryOp: op='<<' (at pp.c:24939)
            Constant: type='int', value='1' (at pp.c:24939)
            Constant: type='int', value='1' (at pp.c:24939)
  FuncDef:  (at pp.c:24943)
    Decl: name='HplMsp430InterruptP__Port11__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:24943)
      FuncDecl: quals=None (at pp.c:24943)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port11__default__fired', quals=[] (at pp.c:24943)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24945)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port11__clear' (at pp.c:24947)
  FuncDef:  (at pp.c:24951)
    Decl: name='HplMsp430InterruptP__Port11__fired', quals=[], storage=['static', 'inline'] (at pp.c:24951)
      FuncDecl: quals=None (at pp.c:24951)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port11__fired', quals=[] (at pp.c:24951)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24951)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port11__default__fired' (at pp.c:24953)
  FuncDef:  (at pp.c:24958)
    Decl: name='HplMsp430InterruptP__Port12__clear', quals=[], storage=['inline', 'static'] (at pp.c:24958)
      FuncDecl: quals=None (at pp.c:24958)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port12__clear', quals=[] (at pp.c:24958)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24960)
      Assignment: op='&=' (at pp.c:24962)
        ID: name='P1IFG' (at pp.c:24962)
        UnaryOp: op='~' (at pp.c:24962)
          BinaryOp: op='<<' (at pp.c:24962)
            Constant: type='int', value='1' (at pp.c:24962)
            Constant: type='int', value='2' (at pp.c:24962)
  FuncDef:  (at pp.c:24966)
    Decl: name='HplMsp430InterruptP__Port12__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:24966)
      FuncDecl: quals=None (at pp.c:24966)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port12__default__fired', quals=[] (at pp.c:24966)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24968)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port12__clear' (at pp.c:24970)
  FuncDef:  (at pp.c:24974)
    Decl: name='HplMsp430InterruptP__Port12__fired', quals=[], storage=['static', 'inline'] (at pp.c:24974)
      FuncDecl: quals=None (at pp.c:24974)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port12__fired', quals=[] (at pp.c:24974)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24974)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port12__default__fired' (at pp.c:24976)
  FuncDef:  (at pp.c:24981)
    Decl: name='HplMsp430InterruptP__Port13__clear', quals=[], storage=['inline', 'static'] (at pp.c:24981)
      FuncDecl: quals=None (at pp.c:24981)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port13__clear', quals=[] (at pp.c:24981)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24983)
      Assignment: op='&=' (at pp.c:24985)
        ID: name='P1IFG' (at pp.c:24985)
        UnaryOp: op='~' (at pp.c:24985)
          BinaryOp: op='<<' (at pp.c:24985)
            Constant: type='int', value='1' (at pp.c:24985)
            Constant: type='int', value='3' (at pp.c:24985)
  FuncDef:  (at pp.c:24989)
    Decl: name='HplMsp430InterruptP__Port13__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:24989)
      FuncDecl: quals=None (at pp.c:24989)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port13__default__fired', quals=[] (at pp.c:24989)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24991)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port13__clear' (at pp.c:24993)
  FuncDef:  (at pp.c:24997)
    Decl: name='HplMsp430InterruptP__Port13__fired', quals=[], storage=['static', 'inline'] (at pp.c:24997)
      FuncDecl: quals=None (at pp.c:24997)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port13__fired', quals=[] (at pp.c:24997)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:24997)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port13__default__fired' (at pp.c:24999)
  FuncDef:  (at pp.c:25004)
    Decl: name='CC2420CsmaP__startDone_task__postTask', quals=[], storage=['static', 'inline'] (at pp.c:25004)
      FuncDecl: quals=None (at pp.c:25004)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__startDone_task__postTask', quals=[] (at pp.c:25004)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25004)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:25006)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:25006)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:25010)
        ID: name='__nesc_result' (at pp.c:25010)
        FuncCall:  (at None)
          ID: name='SchedulerBasicP__TaskBasic__postTask' (at pp.c:25010)
          ExprList:  (at pp.c:25010)
            ID: name='CC2420CsmaP__startDone_task' (at pp.c:25010)
      Return:  (at pp.c:25014)
        ID: name='__nesc_result' (at pp.c:25014)
  FuncDef:  (at pp.c:25019)
    Decl: name='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[], storage=['inline', 'static'] (at pp.c:25019)
      FuncDecl: quals=None (at pp.c:25019)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__CC2420Power__startOscillatorDone', quals=[] (at pp.c:25019)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25021)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__startDone_task__postTask' (at pp.c:25022)
  FuncDef:  (at pp.c:25026)
    Decl: name='CC2420ControlP__CC2420Power__startOscillatorDone', quals=[], storage=['static', 'inline'] (at pp.c:25026)
      FuncDecl: quals=None (at pp.c:25026)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__startOscillatorDone', quals=[] (at pp.c:25026)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25026)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__CC2420Power__startOscillatorDone' (at pp.c:25028)
  FuncDef:  (at pp.c:25033)
    Decl: name='CC2420ControlP__InterruptCCA__disable', quals=[], storage=['static', 'inline'] (at pp.c:25033)
      FuncDecl: quals=None (at pp.c:25033)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__InterruptCCA__disable', quals=[] (at pp.c:25033)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25033)
      Decl: name='__nesc_result', quals=[], storage=[] (at pp.c:25035)
        TypeDecl: declname='__nesc_result', quals=[] (at pp.c:25035)
          IdentifierType: names=['char', 'unsigned'] (at None)
      Assignment: op='=' (at pp.c:25039)
        ID: name='__nesc_result' (at pp.c:25039)
        FuncCall:  (at None)
          ID: name='Msp430InterruptC__0__Interrupt__disable' (at pp.c:25039)
      Return:  (at pp.c:25043)
        ID: name='__nesc_result' (at pp.c:25043)
  FuncDef:  (at pp.c:25048)
    Decl: name='CC2420ControlP__InterruptCCA__fired', quals=[], storage=['inline', 'static'] (at pp.c:25048)
      FuncDecl: quals=None (at pp.c:25048)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__InterruptCCA__fired', quals=[] (at pp.c:25048)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25050)
      Assignment: op='=' (at pp.c:25051)
        ID: name='CC2420ControlP__m_state' (at pp.c:25051)
        ID: name='CC2420ControlP__S_XOSC_STARTED' (at pp.c:25051)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__InterruptCCA__disable' (at pp.c:25052)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__IOCFG1__write' (at pp.c:25053)
        ExprList:  (at pp.c:25053)
          Constant: type='int', value='0' (at pp.c:25053)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__writeId' (at pp.c:25054)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__set' (at pp.c:25055)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CSN__clr' (at pp.c:25056)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__CC2420Power__startOscillatorDone' (at pp.c:25057)
  FuncDef:  (at pp.c:25061)
    Decl: name='Msp430InterruptC__0__Interrupt__fired', quals=[], storage=['static', 'inline'] (at pp.c:25061)
      FuncDecl: quals=None (at pp.c:25061)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__Interrupt__fired', quals=[] (at pp.c:25061)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25061)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__InterruptCCA__fired' (at pp.c:25063)
  FuncDef:  (at pp.c:25068)
    Decl: name='Msp430InterruptC__0__HplInterrupt__fired', quals=[], storage=['inline', 'static'] (at pp.c:25068)
      FuncDecl: quals=None (at pp.c:25068)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430InterruptC__0__HplInterrupt__fired', quals=[] (at pp.c:25068)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25070)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__0__HplInterrupt__clear' (at pp.c:25071)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__0__Interrupt__fired' (at pp.c:25072)
  FuncDef:  (at pp.c:25076)
    Decl: name='HplMsp430InterruptP__Port14__fired', quals=[], storage=['static', 'inline'] (at pp.c:25076)
      FuncDecl: quals=None (at pp.c:25076)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port14__fired', quals=[] (at pp.c:25076)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25076)
      FuncCall:  (at None)
        ID: name='Msp430InterruptC__0__HplInterrupt__fired' (at pp.c:25078)
  FuncDef:  (at pp.c:25083)
    Decl: name='HplMsp430InterruptP__Port15__clear', quals=[], storage=['inline', 'static'] (at pp.c:25083)
      FuncDecl: quals=None (at pp.c:25083)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port15__clear', quals=[] (at pp.c:25083)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25085)
      Assignment: op='&=' (at pp.c:25087)
        ID: name='P1IFG' (at pp.c:25087)
        UnaryOp: op='~' (at pp.c:25087)
          BinaryOp: op='<<' (at pp.c:25087)
            Constant: type='int', value='1' (at pp.c:25087)
            Constant: type='int', value='5' (at pp.c:25087)
  FuncDef:  (at pp.c:25091)
    Decl: name='HplMsp430InterruptP__Port15__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25091)
      FuncDecl: quals=None (at pp.c:25091)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port15__default__fired', quals=[] (at pp.c:25091)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25093)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port15__clear' (at pp.c:25095)
  FuncDef:  (at pp.c:25099)
    Decl: name='HplMsp430InterruptP__Port15__fired', quals=[], storage=['static', 'inline'] (at pp.c:25099)
      FuncDecl: quals=None (at pp.c:25099)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port15__fired', quals=[] (at pp.c:25099)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25099)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port15__default__fired' (at pp.c:25101)
  FuncDef:  (at pp.c:25106)
    Decl: name='HplMsp430InterruptP__Port16__clear', quals=[], storage=['inline', 'static'] (at pp.c:25106)
      FuncDecl: quals=None (at pp.c:25106)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port16__clear', quals=[] (at pp.c:25106)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25108)
      Assignment: op='&=' (at pp.c:25110)
        ID: name='P1IFG' (at pp.c:25110)
        UnaryOp: op='~' (at pp.c:25110)
          BinaryOp: op='<<' (at pp.c:25110)
            Constant: type='int', value='1' (at pp.c:25110)
            Constant: type='int', value='6' (at pp.c:25110)
  FuncDef:  (at pp.c:25114)
    Decl: name='HplMsp430InterruptP__Port16__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25114)
      FuncDecl: quals=None (at pp.c:25114)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port16__default__fired', quals=[] (at pp.c:25114)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25116)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port16__clear' (at pp.c:25118)
  FuncDef:  (at pp.c:25122)
    Decl: name='HplMsp430InterruptP__Port16__fired', quals=[], storage=['static', 'inline'] (at pp.c:25122)
      FuncDecl: quals=None (at pp.c:25122)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port16__fired', quals=[] (at pp.c:25122)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25122)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port16__default__fired' (at pp.c:25124)
  FuncDef:  (at pp.c:25129)
    Decl: name='HplMsp430InterruptP__Port17__clear', quals=[], storage=['inline', 'static'] (at pp.c:25129)
      FuncDecl: quals=None (at pp.c:25129)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port17__clear', quals=[] (at pp.c:25129)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25131)
      Assignment: op='&=' (at pp.c:25133)
        ID: name='P1IFG' (at pp.c:25133)
        UnaryOp: op='~' (at pp.c:25133)
          BinaryOp: op='<<' (at pp.c:25133)
            Constant: type='int', value='1' (at pp.c:25133)
            Constant: type='int', value='7' (at pp.c:25133)
  FuncDef:  (at pp.c:25137)
    Decl: name='HplMsp430InterruptP__Port17__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25137)
      FuncDecl: quals=None (at pp.c:25137)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port17__default__fired', quals=[] (at pp.c:25137)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25139)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port17__clear' (at pp.c:25141)
  FuncDef:  (at pp.c:25145)
    Decl: name='HplMsp430InterruptP__Port17__fired', quals=[], storage=['static', 'inline'] (at pp.c:25145)
      FuncDecl: quals=None (at pp.c:25145)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port17__fired', quals=[] (at pp.c:25145)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25145)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port17__default__fired' (at pp.c:25147)
  FuncDef:  (at pp.c:25152)
    Decl: name='HplMsp430InterruptP__Port20__clear', quals=[], storage=['inline', 'static'] (at pp.c:25152)
      FuncDecl: quals=None (at pp.c:25152)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port20__clear', quals=[] (at pp.c:25152)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25154)
      Assignment: op='&=' (at pp.c:25156)
        ID: name='P2IFG' (at pp.c:25156)
        UnaryOp: op='~' (at pp.c:25156)
          BinaryOp: op='<<' (at pp.c:25156)
            Constant: type='int', value='1' (at pp.c:25156)
            Constant: type='int', value='0' (at pp.c:25156)
  FuncDef:  (at pp.c:25160)
    Decl: name='HplMsp430InterruptP__Port20__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25160)
      FuncDecl: quals=None (at pp.c:25160)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port20__default__fired', quals=[] (at pp.c:25160)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25162)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port20__clear' (at pp.c:25164)
  FuncDef:  (at pp.c:25168)
    Decl: name='HplMsp430InterruptP__Port20__fired', quals=[], storage=['static', 'inline'] (at pp.c:25168)
      FuncDecl: quals=None (at pp.c:25168)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port20__fired', quals=[] (at pp.c:25168)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25168)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port20__default__fired' (at pp.c:25170)
  FuncDef:  (at pp.c:25175)
    Decl: name='HplMsp430InterruptP__Port21__clear', quals=[], storage=['inline', 'static'] (at pp.c:25175)
      FuncDecl: quals=None (at pp.c:25175)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port21__clear', quals=[] (at pp.c:25175)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25177)
      Assignment: op='&=' (at pp.c:25179)
        ID: name='P2IFG' (at pp.c:25179)
        UnaryOp: op='~' (at pp.c:25179)
          BinaryOp: op='<<' (at pp.c:25179)
            Constant: type='int', value='1' (at pp.c:25179)
            Constant: type='int', value='1' (at pp.c:25179)
  FuncDef:  (at pp.c:25183)
    Decl: name='HplMsp430InterruptP__Port21__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25183)
      FuncDecl: quals=None (at pp.c:25183)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port21__default__fired', quals=[] (at pp.c:25183)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25185)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port21__clear' (at pp.c:25187)
  FuncDef:  (at pp.c:25191)
    Decl: name='HplMsp430InterruptP__Port21__fired', quals=[], storage=['static', 'inline'] (at pp.c:25191)
      FuncDecl: quals=None (at pp.c:25191)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port21__fired', quals=[] (at pp.c:25191)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25191)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port21__default__fired' (at pp.c:25193)
  FuncDef:  (at pp.c:25198)
    Decl: name='HplMsp430InterruptP__Port22__clear', quals=[], storage=['inline', 'static'] (at pp.c:25198)
      FuncDecl: quals=None (at pp.c:25198)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port22__clear', quals=[] (at pp.c:25198)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25200)
      Assignment: op='&=' (at pp.c:25202)
        ID: name='P2IFG' (at pp.c:25202)
        UnaryOp: op='~' (at pp.c:25202)
          BinaryOp: op='<<' (at pp.c:25202)
            Constant: type='int', value='1' (at pp.c:25202)
            Constant: type='int', value='2' (at pp.c:25202)
  FuncDef:  (at pp.c:25206)
    Decl: name='HplMsp430InterruptP__Port22__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25206)
      FuncDecl: quals=None (at pp.c:25206)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port22__default__fired', quals=[] (at pp.c:25206)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25208)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port22__clear' (at pp.c:25210)
  FuncDef:  (at pp.c:25214)
    Decl: name='HplMsp430InterruptP__Port22__fired', quals=[], storage=['static', 'inline'] (at pp.c:25214)
      FuncDecl: quals=None (at pp.c:25214)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port22__fired', quals=[] (at pp.c:25214)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25214)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port22__default__fired' (at pp.c:25216)
  FuncDef:  (at pp.c:25221)
    Decl: name='HplMsp430InterruptP__Port23__clear', quals=[], storage=['inline', 'static'] (at pp.c:25221)
      FuncDecl: quals=None (at pp.c:25221)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port23__clear', quals=[] (at pp.c:25221)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25223)
      Assignment: op='&=' (at pp.c:25225)
        ID: name='P2IFG' (at pp.c:25225)
        UnaryOp: op='~' (at pp.c:25225)
          BinaryOp: op='<<' (at pp.c:25225)
            Constant: type='int', value='1' (at pp.c:25225)
            Constant: type='int', value='3' (at pp.c:25225)
  FuncDef:  (at pp.c:25229)
    Decl: name='HplMsp430InterruptP__Port23__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25229)
      FuncDecl: quals=None (at pp.c:25229)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port23__default__fired', quals=[] (at pp.c:25229)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25231)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port23__clear' (at pp.c:25233)
  FuncDef:  (at pp.c:25237)
    Decl: name='HplMsp430InterruptP__Port23__fired', quals=[], storage=['static', 'inline'] (at pp.c:25237)
      FuncDecl: quals=None (at pp.c:25237)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port23__fired', quals=[] (at pp.c:25237)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25237)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port23__default__fired' (at pp.c:25239)
  FuncDef:  (at pp.c:25244)
    Decl: name='HplMsp430InterruptP__Port24__clear', quals=[], storage=['inline', 'static'] (at pp.c:25244)
      FuncDecl: quals=None (at pp.c:25244)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port24__clear', quals=[] (at pp.c:25244)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25246)
      Assignment: op='&=' (at pp.c:25248)
        ID: name='P2IFG' (at pp.c:25248)
        UnaryOp: op='~' (at pp.c:25248)
          BinaryOp: op='<<' (at pp.c:25248)
            Constant: type='int', value='1' (at pp.c:25248)
            Constant: type='int', value='4' (at pp.c:25248)
  FuncDef:  (at pp.c:25252)
    Decl: name='HplMsp430InterruptP__Port24__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25252)
      FuncDecl: quals=None (at pp.c:25252)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port24__default__fired', quals=[] (at pp.c:25252)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25254)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port24__clear' (at pp.c:25256)
  FuncDef:  (at pp.c:25260)
    Decl: name='HplMsp430InterruptP__Port24__fired', quals=[], storage=['static', 'inline'] (at pp.c:25260)
      FuncDecl: quals=None (at pp.c:25260)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port24__fired', quals=[] (at pp.c:25260)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25260)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port24__default__fired' (at pp.c:25262)
  FuncDef:  (at pp.c:25267)
    Decl: name='HplMsp430InterruptP__Port25__clear', quals=[], storage=['inline', 'static'] (at pp.c:25267)
      FuncDecl: quals=None (at pp.c:25267)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port25__clear', quals=[] (at pp.c:25267)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25269)
      Assignment: op='&=' (at pp.c:25271)
        ID: name='P2IFG' (at pp.c:25271)
        UnaryOp: op='~' (at pp.c:25271)
          BinaryOp: op='<<' (at pp.c:25271)
            Constant: type='int', value='1' (at pp.c:25271)
            Constant: type='int', value='5' (at pp.c:25271)
  FuncDef:  (at pp.c:25275)
    Decl: name='HplMsp430InterruptP__Port25__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25275)
      FuncDecl: quals=None (at pp.c:25275)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port25__default__fired', quals=[] (at pp.c:25275)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25277)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port25__clear' (at pp.c:25279)
  FuncDef:  (at pp.c:25283)
    Decl: name='HplMsp430InterruptP__Port25__fired', quals=[], storage=['static', 'inline'] (at pp.c:25283)
      FuncDecl: quals=None (at pp.c:25283)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port25__fired', quals=[] (at pp.c:25283)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25283)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port25__default__fired' (at pp.c:25285)
  FuncDef:  (at pp.c:25290)
    Decl: name='HplMsp430InterruptP__Port26__clear', quals=[], storage=['inline', 'static'] (at pp.c:25290)
      FuncDecl: quals=None (at pp.c:25290)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port26__clear', quals=[] (at pp.c:25290)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25292)
      Assignment: op='&=' (at pp.c:25294)
        ID: name='P2IFG' (at pp.c:25294)
        UnaryOp: op='~' (at pp.c:25294)
          BinaryOp: op='<<' (at pp.c:25294)
            Constant: type='int', value='1' (at pp.c:25294)
            Constant: type='int', value='6' (at pp.c:25294)
  FuncDef:  (at pp.c:25298)
    Decl: name='HplMsp430InterruptP__Port26__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25298)
      FuncDecl: quals=None (at pp.c:25298)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port26__default__fired', quals=[] (at pp.c:25298)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25300)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port26__clear' (at pp.c:25302)
  FuncDef:  (at pp.c:25306)
    Decl: name='HplMsp430InterruptP__Port26__fired', quals=[], storage=['static', 'inline'] (at pp.c:25306)
      FuncDecl: quals=None (at pp.c:25306)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port26__fired', quals=[] (at pp.c:25306)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25306)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port26__default__fired' (at pp.c:25308)
  FuncDef:  (at pp.c:25313)
    Decl: name='HplMsp430InterruptP__Port27__clear', quals=[], storage=['inline', 'static'] (at pp.c:25313)
      FuncDecl: quals=None (at pp.c:25313)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port27__clear', quals=[] (at pp.c:25313)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25315)
      Assignment: op='&=' (at pp.c:25317)
        ID: name='P2IFG' (at pp.c:25317)
        UnaryOp: op='~' (at pp.c:25317)
          BinaryOp: op='<<' (at pp.c:25317)
            Constant: type='int', value='1' (at pp.c:25317)
            Constant: type='int', value='7' (at pp.c:25317)
  FuncDef:  (at pp.c:25321)
    Decl: name='HplMsp430InterruptP__Port27__default__fired', quals=[], storage=['inline', 'static'] (at pp.c:25321)
      FuncDecl: quals=None (at pp.c:25321)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port27__default__fired', quals=[] (at pp.c:25321)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25323)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port27__clear' (at pp.c:25325)
  FuncDef:  (at pp.c:25329)
    Decl: name='HplMsp430InterruptP__Port27__fired', quals=[], storage=['static', 'inline'] (at pp.c:25329)
      FuncDecl: quals=None (at pp.c:25329)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430InterruptP__Port27__fired', quals=[] (at pp.c:25329)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25329)
      FuncCall:  (at None)
        ID: name='HplMsp430InterruptP__Port27__default__fired' (at pp.c:25331)
  FuncDef:  (at pp.c:25336)
    Decl: name='__nesc_atomic_start', quals=[], storage=[] (at pp.c:25336)
      FuncDecl: quals=None (at pp.c:25336)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='__nesc_atomic_start', quals=[] (at pp.c:25336)
          IdentifierType: names=['__nesc_atomic_t'] (at None)
    Compound:  (at pp.c:25337)
      Decl: name='result', quals=[], storage=[] (at pp.c:25338)
        TypeDecl: declname='result', quals=[] (at pp.c:25338)
          IdentifierType: names=['__nesc_atomic_t'] (at None)
        BinaryOp: op='!=' (at pp.c:25338)
          BinaryOp: op='&' (at pp.c:25338)
            Compound:  (at pp.c:25338)
              Decl: name='__x', quals=[], storage=[] (at pp.c:25340)
                TypeDecl: declname='__x', quals=[] (at pp.c:25340)
                  IdentifierType: names=['uint16_t'] (at None)
              Assignment: op='=' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                  ID: name='__x' (at pp.c:25343)
                ID: name='_R2' (at pp.c:25343)
              ID: name='__x' (at pp.c:25343)
            Constant: type='int', value='0x0008' (at pp.c:25347)
          Constant: type='int', value='0' (at pp.c:25347)
      FuncCall:  (at None)
        ID: name='__nesc_disable_interrupt' (at pp.c:25350)
      Return:  (at pp.c:25352)
        ID: name='result' (at pp.c:25352)
  FuncDef:  (at pp.c:25355)
    Decl: name='__nesc_atomic_end', quals=[], storage=[] (at pp.c:25355)
      FuncDecl: quals=None (at pp.c:25355)
        ParamList:  (at pp.c:25355)
          Decl: name='reenable_interrupts', quals=[], storage=[] (at pp.c:25355)
            TypeDecl: declname='reenable_interrupts', quals=[] (at pp.c:25355)
              IdentifierType: names=['__nesc_atomic_t'] (at None)
        TypeDecl: declname='__nesc_atomic_end', quals=[] (at pp.c:25355)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25356)
      If:  (at pp.c:25358)
        ID: name='reenable_interrupts' (at pp.c:25358)
        Compound:  (at pp.c:25358)
          FuncCall:  (at None)
            ID: name='__nesc_enable_interrupt' (at pp.c:25359)
  FuncDef:  (at pp.c:25364)
    Decl: name='sig_TIMERA0_VECTOR', quals=[], storage=[] (at pp.c:25364)
      FuncDecl: quals=None (at pp.c:25364)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_TIMERA0_VECTOR', quals=[] (at pp.c:25364)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25366)
      FuncCall:  (at None)
        ID: name='Msp430TimerCommonP__VectorTimerA0__fired' (at pp.c:25368)
  FuncDef:  (at pp.c:25372)
    Decl: name='Msp430TimerCapComP__0__Event__fired', quals=[], storage=['static'] (at pp.c:25372)
      FuncDecl: quals=None (at pp.c:25372)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__0__Event__fired', quals=[] (at pp.c:25372)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25373)
      If:  (at pp.c:25374)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__0__Control__getControl' (at pp.c:25374)
          ID: name='cap' (at pp.c:25374)
        Compound:  (at pp.c:25374)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__0__Capture__captured' (at pp.c:25375)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__0__Capture__getEvent' (at pp.c:25375)
        Compound:  (at pp.c:25377)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__0__Compare__fired' (at pp.c:25379)
  FuncDef:  (at pp.c:25384)
    Decl: name='Msp430TimerCapComP__1__Event__fired', quals=[], storage=['static'] (at pp.c:25384)
      FuncDecl: quals=None (at pp.c:25384)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__1__Event__fired', quals=[] (at pp.c:25384)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25385)
      If:  (at pp.c:25386)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__1__Control__getControl' (at pp.c:25386)
          ID: name='cap' (at pp.c:25386)
        Compound:  (at pp.c:25386)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__1__Capture__captured' (at pp.c:25387)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__1__Capture__getEvent' (at pp.c:25387)
        Compound:  (at pp.c:25389)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__1__Compare__fired' (at pp.c:25391)
  FuncDef:  (at pp.c:25396)
    Decl: name='Msp430TimerCapComP__2__Event__fired', quals=[], storage=['static'] (at pp.c:25396)
      FuncDecl: quals=None (at pp.c:25396)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerCapComP__2__Event__fired', quals=[] (at pp.c:25396)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25397)
      If:  (at pp.c:25398)
        StructRef: type='.' (at None)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__2__Control__getControl' (at pp.c:25398)
          ID: name='cap' (at pp.c:25398)
        Compound:  (at pp.c:25398)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__2__Capture__captured' (at pp.c:25399)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='Msp430TimerCapComP__2__Capture__getEvent' (at pp.c:25399)
        Compound:  (at pp.c:25401)
          FuncCall:  (at None)
            ID: name='Msp430TimerCapComP__2__Compare__fired' (at pp.c:25403)
  FuncDef:  (at pp.c:25408)
    Decl: name='sig_TIMERA1_VECTOR', quals=[], storage=[] (at pp.c:25408)
      FuncDecl: quals=None (at pp.c:25408)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_TIMERA1_VECTOR', quals=[] (at pp.c:25408)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25410)
      FuncCall:  (at None)
        ID: name='Msp430TimerCommonP__VectorTimerA1__fired' (at pp.c:25412)
  FuncDef:  (at pp.c:25416)
    Decl: name='sig_TIMERB0_VECTOR', quals=[], storage=[] (at pp.c:25416)
      FuncDecl: quals=None (at pp.c:25416)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_TIMERB0_VECTOR', quals=[] (at pp.c:25416)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25418)
      FuncCall:  (at None)
        ID: name='Msp430TimerCommonP__VectorTimerB0__fired' (at pp.c:25420)
  FuncDef:  (at pp.c:25424)
    Decl: name='Msp430TimerP__1__Event__default__fired', quals=[], storage=['static'] (at pp.c:25424)
      FuncDecl: quals=None (at pp.c:25424)
        ParamList:  (at pp.c:25424)
          Decl: name='n', quals=[], storage=[] (at pp.c:25424)
            TypeDecl: declname='n', quals=[] (at pp.c:25424)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Event__default__fired', quals=[] (at pp.c:25424)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25425)
  FuncDef:  (at pp.c:25429)
    Decl: name='Msp430TimerP__1__Event__fired', quals=[], storage=['static'] (at pp.c:25429)
      FuncDecl: quals=None (at pp.c:25429)
        ParamList:  (at pp.c:25429)
          Decl: name='arg_0x101629c98', quals=[], storage=[] (at pp.c:25429)
            TypeDecl: declname='arg_0x101629c98', quals=[] (at pp.c:25429)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Event__fired', quals=[] (at pp.c:25429)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25429)
      Switch:  (at pp.c:25431)
        ID: name='arg_0x101629c98' (at pp.c:25431)
        Compound:  (at pp.c:25431)
          Case:  (at pp.c:25433)
            Constant: type='int', value='0' (at pp.c:25433)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__3__Event__fired' (at pp.c:25435)
          Break:  (at pp.c:25437)
          Case:  (at pp.c:25439)
            Constant: type='int', value='1' (at pp.c:25439)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__4__Event__fired' (at pp.c:25441)
          Break:  (at pp.c:25443)
          Case:  (at pp.c:25445)
            Constant: type='int', value='2' (at pp.c:25445)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__5__Event__fired' (at pp.c:25447)
          Break:  (at pp.c:25449)
          Case:  (at pp.c:25451)
            Constant: type='int', value='3' (at pp.c:25451)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__6__Event__fired' (at pp.c:25453)
          Break:  (at pp.c:25455)
          Case:  (at pp.c:25457)
            Constant: type='int', value='4' (at pp.c:25457)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__7__Event__fired' (at pp.c:25459)
          Break:  (at pp.c:25461)
          Case:  (at pp.c:25463)
            Constant: type='int', value='5' (at pp.c:25463)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__8__Event__fired' (at pp.c:25465)
          Break:  (at pp.c:25467)
          Case:  (at pp.c:25469)
            Constant: type='int', value='6' (at pp.c:25469)
            FuncCall:  (at None)
              ID: name='Msp430TimerCapComP__9__Event__fired' (at pp.c:25471)
          Break:  (at pp.c:25473)
          Case:  (at pp.c:25475)
            Constant: type='int', value='7' (at pp.c:25475)
            FuncCall:  (at None)
              ID: name='Msp430TimerP__1__Overflow__fired' (at pp.c:25477)
          Break:  (at pp.c:25479)
          Default:  (at pp.c:25481)
            FuncCall:  (at None)
              ID: name='Msp430TimerP__1__Event__default__fired' (at pp.c:25483)
              ExprList:  (at pp.c:25483)
                ID: name='arg_0x101629c98' (at pp.c:25483)
          Break:  (at pp.c:25485)
  FuncDef:  (at pp.c:25492)
    Decl: name='SchedulerBasicP__TaskBasic__postTask', quals=[], storage=['static'] (at pp.c:25492)
      FuncDecl: quals=None (at pp.c:25492)
        ParamList:  (at pp.c:25492)
          Decl: name='id', quals=[], storage=[] (at pp.c:25492)
            TypeDecl: declname='id', quals=[] (at pp.c:25492)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SchedulerBasicP__TaskBasic__postTask', quals=[] (at pp.c:25492)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25493)
      Compound:  (at pp.c:25494)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:25494)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:25494)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:25494)
        Compound:  (at pp.c:25496)
          Compound:  (at pp.c:25498)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:25499)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:25499)
                IdentifierType: names=['char', 'unsigned'] (at None)
              TernaryOp:  (at None)
                FuncCall:  (at None)
                  ID: name='SchedulerBasicP__pushTask' (at pp.c:25501)
                  ExprList:  (at pp.c:25501)
                    ID: name='id' (at pp.c:25501)
                ID: name='SUCCESS' (at pp.c:25501)
                ID: name='EBUSY' (at pp.c:25501)
            Compound:  (at pp.c:25503)
              FuncCall:  (at None)
                ID: name='__nesc_atomic_end' (at pp.c:25505)
                ExprList:  (at pp.c:25505)
                  ID: name='__nesc_atomic' (at pp.c:25505)
              Return:  (at pp.c:25507)
                ID: name='__nesc_temp' (at pp.c:25507)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:25512)
          ExprList:  (at pp.c:25512)
            ID: name='__nesc_atomic' (at pp.c:25512)
  FuncDef:  (at pp.c:25516)
    Decl: name='TransformAlarmC__0__set_alarm', quals=[], storage=['static'] (at pp.c:25516)
      FuncDecl: quals=None (at pp.c:25516)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__0__set_alarm', quals=[] (at pp.c:25516)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25517)
      Decl: name='now', quals=[], storage=[] (at pp.c:25518)
        TypeDecl: declname='now', quals=[] (at pp.c:25518)
          IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__0__Counter__get' (at pp.c:25518)
      Decl: name='expires', quals=[], storage=[] (at pp.c:25520)
        TypeDecl: declname='expires', quals=[] (at pp.c:25520)
          IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
      Decl: name='remaining', quals=[], storage=[] (at pp.c:25522)
        TypeDecl: declname='remaining', quals=[] (at pp.c:25522)
          IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
      Assignment: op='=' (at pp.c:25527)
        ID: name='expires' (at pp.c:25527)
        BinaryOp: op='+' (at pp.c:25527)
          ID: name='TransformAlarmC__0__m_t0' (at pp.c:25527)
          ID: name='TransformAlarmC__0__m_dt' (at pp.c:25527)
      Assignment: op='=' (at pp.c:25530)
        ID: name='remaining' (at pp.c:25530)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
          BinaryOp: op='-' (at pp.c:25530)
            ID: name='expires' (at pp.c:25530)
            ID: name='now' (at pp.c:25530)
      If:  (at pp.c:25533)
        BinaryOp: op='<=' (at pp.c:25533)
          ID: name='TransformAlarmC__0__m_t0' (at pp.c:25533)
          ID: name='now' (at pp.c:25533)
        Compound:  (at pp.c:25534)
          If:  (at pp.c:25535)
            BinaryOp: op='&&' (at pp.c:25535)
              BinaryOp: op='>=' (at pp.c:25535)
                ID: name='expires' (at pp.c:25535)
                ID: name='TransformAlarmC__0__m_t0' (at pp.c:25535)
              BinaryOp: op='<=' (at pp.c:25536)
                ID: name='expires' (at pp.c:25536)
                ID: name='now' (at pp.c:25536)
            Compound:  (at pp.c:25536)
              Assignment: op='=' (at pp.c:25537)
                ID: name='remaining' (at pp.c:25537)
                Constant: type='int', value='0' (at pp.c:25537)
        Compound:  (at pp.c:25540)
          If:  (at pp.c:25541)
            BinaryOp: op='||' (at pp.c:25541)
              BinaryOp: op='>=' (at pp.c:25541)
                ID: name='expires' (at pp.c:25541)
                ID: name='TransformAlarmC__0__m_t0' (at pp.c:25541)
              BinaryOp: op='<=' (at pp.c:25542)
                ID: name='expires' (at pp.c:25542)
                ID: name='now' (at pp.c:25542)
            Compound:  (at pp.c:25542)
              Assignment: op='=' (at pp.c:25543)
                ID: name='remaining' (at pp.c:25543)
                Constant: type='int', value='0' (at pp.c:25543)
      If:  (at pp.c:25547)
        BinaryOp: op='>' (at pp.c:25547)
          ID: name='remaining' (at pp.c:25547)
          ID: name='TransformAlarmC__0__MAX_DELAY' (at pp.c:25547)
        Compound:  (at pp.c:25548)
          Assignment: op='=' (at pp.c:25549)
            ID: name='TransformAlarmC__0__m_t0' (at pp.c:25549)
            BinaryOp: op='+' (at pp.c:25549)
              ID: name='now' (at pp.c:25549)
              ID: name='TransformAlarmC__0__MAX_DELAY' (at pp.c:25549)
          Assignment: op='=' (at pp.c:25550)
            ID: name='TransformAlarmC__0__m_dt' (at pp.c:25550)
            BinaryOp: op='-' (at pp.c:25550)
              ID: name='remaining' (at pp.c:25550)
              ID: name='TransformAlarmC__0__MAX_DELAY' (at pp.c:25550)
          Assignment: op='=' (at pp.c:25551)
            ID: name='remaining' (at pp.c:25551)
            ID: name='TransformAlarmC__0__MAX_DELAY' (at pp.c:25551)
        Compound:  (at pp.c:25554)
          Assignment: op='+=' (at pp.c:25555)
            ID: name='TransformAlarmC__0__m_t0' (at pp.c:25555)
            ID: name='TransformAlarmC__0__m_dt' (at pp.c:25555)
          Assignment: op='=' (at pp.c:25556)
            ID: name='TransformAlarmC__0__m_dt' (at pp.c:25556)
            Constant: type='int', value='0' (at pp.c:25556)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__0__AlarmFrom__startAt' (at pp.c:25558)
        ExprList:  (at None)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__0__from_size_type'] (at None)
              ID: name='now' (at pp.c:25558)
            Constant: type='int', value='5' (at pp.c:25558)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__0__from_size_type'] (at None)
              ID: name='remaining' (at pp.c:25559)
            Constant: type='int', value='5' (at pp.c:25559)
  FuncDef:  (at pp.c:25563)
    Decl: name='TransformCounterC__0__Counter__get', quals=[], storage=['static'] (at pp.c:25563)
      FuncDecl: quals=None (at pp.c:25563)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__0__Counter__get', quals=[] (at pp.c:25563)
          IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
    Compound:  (at pp.c:25564)
      Decl: name='rv', quals=[], storage=[] (at pp.c:25565)
        TypeDecl: declname='rv', quals=[] (at pp.c:25565)
          IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
        Constant: type='int', value='0' (at pp.c:25565)
      Compound:  (at pp.c:25568)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:25568)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:25568)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:25568)
        Compound:  (at pp.c:25569)
          Decl: name='high', quals=[], storage=[] (at pp.c:25570)
            TypeDecl: declname='high', quals=[] (at pp.c:25570)
              IdentifierType: names=['TransformCounterC__0__upper_count_type'] (at None)
            ID: name='TransformCounterC__0__m_upper' (at pp.c:25570)
          Decl: name='low', quals=[], storage=[] (at pp.c:25571)
            TypeDecl: declname='low', quals=[] (at pp.c:25571)
              IdentifierType: names=['TransformCounterC__0__from_size_type'] (at None)
            FuncCall:  (at None)
              ID: name='TransformCounterC__0__CounterFrom__get' (at pp.c:25571)
          If:  (at pp.c:25574)
            FuncCall:  (at None)
              ID: name='TransformCounterC__0__CounterFrom__isOverflowPending' (at pp.c:25574)
            Compound:  (at pp.c:25575)
              UnaryOp: op='p++' (at pp.c:25582)
                ID: name='high' (at pp.c:25582)
              Assignment: op='=' (at pp.c:25583)
                ID: name='low' (at pp.c:25583)
                FuncCall:  (at None)
                  ID: name='TransformCounterC__0__CounterFrom__get' (at pp.c:25583)
          Compound:  (at pp.c:25585)
            Decl: name='high_to', quals=[], storage=[] (at pp.c:25586)
              TypeDecl: declname='high_to', quals=[] (at pp.c:25586)
                IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
              ID: name='high' (at pp.c:25586)
            Decl: name='low_to', quals=[], storage=[] (at pp.c:25587)
              TypeDecl: declname='low_to', quals=[] (at pp.c:25587)
                IdentifierType: names=['TransformCounterC__0__to_size_type'] (at None)
              BinaryOp: op='>>' (at pp.c:25587)
                ID: name='low' (at pp.c:25587)
                ID: name='TransformCounterC__0__LOW_SHIFT_RIGHT' (at pp.c:25587)
            Assignment: op='=' (at pp.c:25590)
              ID: name='rv' (at pp.c:25590)
              BinaryOp: op='|' (at pp.c:25590)
                BinaryOp: op='<<' (at pp.c:25590)
                  ID: name='high_to' (at pp.c:25590)
                  ID: name='TransformCounterC__0__HIGH_SHIFT_LEFT' (at pp.c:25590)
                ID: name='low_to' (at pp.c:25590)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:25594)
          ExprList:  (at pp.c:25594)
            ID: name='__nesc_atomic' (at pp.c:25594)
      Return:  (at pp.c:25595)
        ID: name='rv' (at pp.c:25595)
  FuncDef:  (at pp.c:25599)
    Decl: name='Msp430TimerP__1__Timer__get', quals=[], storage=['static'] (at pp.c:25599)
      FuncDecl: quals=None (at pp.c:25599)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430TimerP__1__Timer__get', quals=[] (at pp.c:25599)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:25600)
      If:  (at pp.c:25605)
        Constant: type='int', value='1' (at pp.c:25605)
        Compound:  (at pp.c:25605)
          Compound:  (at pp.c:25608)
            Decl: name='t0', quals=[], storage=[] (at pp.c:25609)
              TypeDecl: declname='t0', quals=[] (at pp.c:25609)
                IdentifierType: names=['uint16_t'] (at None)
            Decl: name='t1', quals=[], storage=[] (at pp.c:25610)
              TypeDecl: declname='t1', quals=[] (at pp.c:25610)
                IdentifierType: names=['uint16_t'] (at None)
              UnaryOp: op='*' (at None)
                Cast:  (at None)
                  Typename: quals=['volatile'] (at None)
                    PtrDecl: quals=[] (at pp.c:25610)
                      TypeDecl: declname=None, quals=['volatile'] (at None)
                        IdentifierType: names=['uint16_t'] (at None)
                  Constant: type='int', value='400U' (at pp.c:25610)
            DoWhile:  (at pp.c:25613)
              BinaryOp: op='!=' (at pp.c:25621)
                ID: name='t0' (at pp.c:25621)
                ID: name='t1' (at pp.c:25621)
              Compound:  (at pp.c:25613)
                Assignment: op='=' (at pp.c:25615)
                  ID: name='t0' (at pp.c:25615)
                  ID: name='t1' (at pp.c:25615)
                Assignment: op='=' (at pp.c:25617)
                  ID: name='t1' (at pp.c:25617)
                  UnaryOp: op='*' (at None)
                    Cast:  (at None)
                      Typename: quals=['volatile'] (at None)
                        PtrDecl: quals=[] (at pp.c:25617)
                          TypeDecl: declname=None, quals=['volatile'] (at None)
                            IdentifierType: names=['uint16_t'] (at None)
                      Constant: type='int', value='400U' (at pp.c:25617)
            Compound:  (at pp.c:25622)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:25623)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:25623)
                  IdentifierType: names=['int', 'unsigned'] (at None)
                ID: name='t1' (at pp.c:25625)
              Return:  (at pp.c:25628)
                ID: name='__nesc_temp' (at pp.c:25628)
        Compound:  (at pp.c:25634)
          Return:  (at pp.c:25635)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=['volatile'] (at None)
                  PtrDecl: quals=[] (at pp.c:25635)
                    TypeDecl: declname=None, quals=['volatile'] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                Constant: type='int', value='400U' (at pp.c:25635)
  FuncDef:  (at pp.c:25640)
    Decl: name='TransformCounterC__1__Counter__get', quals=[], storage=['static'] (at pp.c:25640)
      FuncDecl: quals=None (at pp.c:25640)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformCounterC__1__Counter__get', quals=[] (at pp.c:25640)
          IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
    Compound:  (at pp.c:25641)
      Decl: name='rv', quals=[], storage=[] (at pp.c:25642)
        TypeDecl: declname='rv', quals=[] (at pp.c:25642)
          IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
        Constant: type='int', value='0' (at pp.c:25642)
      Compound:  (at pp.c:25645)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:25645)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:25645)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:25645)
        Compound:  (at pp.c:25646)
          Decl: name='high', quals=[], storage=[] (at pp.c:25647)
            TypeDecl: declname='high', quals=[] (at pp.c:25647)
              IdentifierType: names=['TransformCounterC__1__upper_count_type'] (at None)
            ID: name='TransformCounterC__1__m_upper' (at pp.c:25647)
          Decl: name='low', quals=[], storage=[] (at pp.c:25648)
            TypeDecl: declname='low', quals=[] (at pp.c:25648)
              IdentifierType: names=['TransformCounterC__1__from_size_type'] (at None)
            FuncCall:  (at None)
              ID: name='TransformCounterC__1__CounterFrom__get' (at pp.c:25648)
          If:  (at pp.c:25651)
            FuncCall:  (at None)
              ID: name='TransformCounterC__1__CounterFrom__isOverflowPending' (at pp.c:25651)
            Compound:  (at pp.c:25652)
              UnaryOp: op='p++' (at pp.c:25659)
                ID: name='high' (at pp.c:25659)
              Assignment: op='=' (at pp.c:25660)
                ID: name='low' (at pp.c:25660)
                FuncCall:  (at None)
                  ID: name='TransformCounterC__1__CounterFrom__get' (at pp.c:25660)
          Compound:  (at pp.c:25662)
            Decl: name='high_to', quals=[], storage=[] (at pp.c:25663)
              TypeDecl: declname='high_to', quals=[] (at pp.c:25663)
                IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
              ID: name='high' (at pp.c:25663)
            Decl: name='low_to', quals=[], storage=[] (at pp.c:25664)
              TypeDecl: declname='low_to', quals=[] (at pp.c:25664)
                IdentifierType: names=['TransformCounterC__1__to_size_type'] (at None)
              BinaryOp: op='>>' (at pp.c:25664)
                ID: name='low' (at pp.c:25664)
                ID: name='TransformCounterC__1__LOW_SHIFT_RIGHT' (at pp.c:25664)
            Assignment: op='=' (at pp.c:25667)
              ID: name='rv' (at pp.c:25667)
              BinaryOp: op='|' (at pp.c:25667)
                BinaryOp: op='<<' (at pp.c:25667)
                  ID: name='high_to' (at pp.c:25667)
                  ID: name='TransformCounterC__1__HIGH_SHIFT_LEFT' (at pp.c:25667)
                ID: name='low_to' (at pp.c:25667)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:25671)
          ExprList:  (at pp.c:25671)
            ID: name='__nesc_atomic' (at pp.c:25671)
      Return:  (at pp.c:25672)
        ID: name='rv' (at pp.c:25672)
  FuncDef:  (at pp.c:25676)
    Decl: name='GpioCaptureC__0__enableCapture', quals=[], storage=['static'] (at pp.c:25676)
      FuncDecl: quals=None (at pp.c:25676)
        ParamList:  (at pp.c:25676)
          Decl: name='mode', quals=[], storage=[] (at pp.c:25676)
            TypeDecl: declname='mode', quals=[] (at pp.c:25676)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='GpioCaptureC__0__enableCapture', quals=[] (at pp.c:25676)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25678)
      Compound:  (at pp.c:25681)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430TimerControl__disableEvents' (at pp.c:25682)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__GeneralIO__selectModuleFunc' (at pp.c:25683)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430TimerControl__clearPendingInterrupt' (at pp.c:25684)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430Capture__clearOverflow' (at pp.c:25685)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430TimerControl__setControlAsCapture' (at pp.c:25686)
          ExprList:  (at pp.c:25686)
            ID: name='mode' (at pp.c:25686)
        FuncCall:  (at None)
          ID: name='GpioCaptureC__0__Msp430TimerControl__enableEvents' (at pp.c:25687)
      Return:  (at pp.c:25689)
        ID: name='SUCCESS' (at pp.c:25689)
  FuncDef:  (at pp.c:25693)
    Decl: name='HplMsp430GeneralIOP__26__IO__clr', quals=[], storage=['static'] (at pp.c:25693)
      FuncDecl: quals=None (at pp.c:25693)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__26__IO__clr', quals=[] (at pp.c:25693)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25695)
      Compound:  (at pp.c:25697)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:25697)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:25697)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:25697)
        Assignment: op='&=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:25699)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:25699)
          UnaryOp: op='~' (at pp.c:25699)
            BinaryOp: op='<<' (at pp.c:25699)
              Constant: type='int', value='0x01' (at pp.c:25699)
              Constant: type='int', value='2' (at pp.c:25699)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:25701)
          ExprList:  (at pp.c:25701)
            ID: name='__nesc_atomic' (at pp.c:25701)
  FuncDef:  (at pp.c:25705)
    Decl: name='CC2420SpiP__Ram__write', quals=[], storage=['static'] (at pp.c:25705)
      FuncDecl: quals=None (at pp.c:25705)
        ParamList:  (at pp.c:25705)
          Decl: name='addr', quals=[], storage=[] (at pp.c:25705)
            TypeDecl: declname='addr', quals=[] (at pp.c:25705)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='offset', quals=[], storage=[] (at pp.c:25705)
            TypeDecl: declname='offset', quals=[] (at pp.c:25705)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:25706)
            PtrDecl: quals=[] (at pp.c:25706)
              TypeDecl: declname='data', quals=[] (at pp.c:25706)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:25707)
            TypeDecl: declname='len', quals=[] (at pp.c:25707)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Ram__write', quals=[] (at pp.c:25705)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:25709)
      Decl: name='status', quals=[], storage=[] (at pp.c:25711)
        TypeDecl: declname='status', quals=[] (at pp.c:25711)
          IdentifierType: names=['cc2420_status_t'] (at None)
        Constant: type='int', value='0' (at pp.c:25711)
      Decl: name='tmpLen', quals=[], storage=[] (at pp.c:25712)
        TypeDecl: declname='tmpLen', quals=[] (at pp.c:25712)
          IdentifierType: names=['uint8_t'] (at None)
        ID: name='len' (at pp.c:25712)
      Decl: name='tmpData', quals=[], storage=[] (at pp.c:25713)
        PtrDecl: quals=[] (at pp.c:25713)
          TypeDecl: declname='tmpData', quals=[] (at pp.c:25713)
            IdentifierType: names=['uint8_t'] (at None)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:25713)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint8_t'] (at None)
          ID: name='data' (at pp.c:25713)
      Compound:  (at pp.c:25715)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:25715)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:25715)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:25715)
        Compound:  (at pp.c:25717)
          If:  (at pp.c:25718)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:25718)
            Compound:  (at pp.c:25718)
              Compound:  (at pp.c:25719)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:25720)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:25720)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='status' (at pp.c:25722)
                Compound:  (at pp.c:25724)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:25726)
                    ExprList:  (at pp.c:25726)
                      ID: name='__nesc_atomic' (at pp.c:25726)
                  Return:  (at pp.c:25728)
                    ID: name='__nesc_temp' (at pp.c:25728)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:25734)
          ExprList:  (at pp.c:25734)
            ID: name='__nesc_atomic' (at pp.c:25734)
      Assignment: op='+=' (at pp.c:25736)
        ID: name='addr' (at pp.c:25736)
        ID: name='offset' (at pp.c:25736)
      Assignment: op='=' (at pp.c:25738)
        ID: name='status' (at pp.c:25738)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:25738)
          ExprList:  (at pp.c:25738)
            BinaryOp: op='|' (at pp.c:25738)
              ID: name='addr' (at pp.c:25738)
              Constant: type='int', value='0x80' (at pp.c:25738)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__SpiByte__write' (at pp.c:25739)
        ExprList:  (at pp.c:25739)
          BinaryOp: op='&' (at pp.c:25739)
            BinaryOp: op='>>' (at pp.c:25739)
              ID: name='addr' (at pp.c:25739)
              Constant: type='int', value='1' (at pp.c:25739)
            Constant: type='int', value='0xc0' (at pp.c:25739)
      For:  (at pp.c:25740)
        ID: name='len' (at pp.c:25740)
        UnaryOp: op='p--' (at pp.c:25740)
          ID: name='len' (at pp.c:25740)
        Compound:  (at pp.c:25740)
          FuncCall:  (at None)
            ID: name='CC2420SpiP__SpiByte__write' (at pp.c:25741)
            ExprList:  (at pp.c:25741)
              ArrayRef:  (at pp.c:25741)
                ID: name='tmpData' (at pp.c:25741)
                BinaryOp: op='-' (at pp.c:25741)
                  ID: name='tmpLen' (at pp.c:25741)
                  ID: name='len' (at pp.c:25741)
      Return:  (at pp.c:25744)
        ID: name='status' (at pp.c:25744)
  FuncDef:  (at pp.c:25748)
    Decl: name='StateImplP__State__isState', quals=[], storage=['static'] (at pp.c:25748)
      FuncDecl: quals=None (at pp.c:25748)
        ParamList:  (at pp.c:25748)
          Decl: name='id', quals=[], storage=[] (at pp.c:25748)
            TypeDecl: declname='id', quals=[] (at pp.c:25748)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='myState', quals=[], storage=[] (at pp.c:25748)
            TypeDecl: declname='myState', quals=[] (at pp.c:25748)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__isState', quals=[] (at pp.c:25748)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:25750)
      Decl: name='isState', quals=[], storage=[] (at pp.c:25751)
        TypeDecl: declname='isState', quals=[] (at pp.c:25751)
          IdentifierType: names=['bool'] (at None)
      Compound:  (at pp.c:25754)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:25754)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:25754)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:25754)
        Assignment: op='=' (at pp.c:25756)
          ID: name='isState' (at pp.c:25756)
          BinaryOp: op='==' (at pp.c:25756)
            ArrayRef:  (at pp.c:25756)
              ID: name='StateImplP__state' (at pp.c:25756)
              ID: name='id' (at pp.c:25756)
            ID: name='myState' (at pp.c:25756)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:25758)
          ExprList:  (at pp.c:25758)
            ID: name='__nesc_atomic' (at pp.c:25758)
      Return:  (at pp.c:25759)
        ID: name='isState' (at pp.c:25759)
  FuncDef:  (at pp.c:25763)
    Decl: name='Msp430SpiNoDmaP__0__SpiByte__write', quals=[], storage=['static'] (at pp.c:25763)
      FuncDecl: quals=None (at pp.c:25763)
        ParamList:  (at pp.c:25763)
          Decl: name='tx', quals=[], storage=[] (at pp.c:25763)
            TypeDecl: declname='tx', quals=[] (at pp.c:25763)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__SpiByte__write', quals=[] (at pp.c:25763)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:25765)
      Decl: name='byte', quals=[], storage=[] (at pp.c:25766)
        TypeDecl: declname='byte', quals=[] (at pp.c:25766)
          IdentifierType: names=['uint8_t'] (at None)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__tx' (at pp.c:25769)
        ExprList:  (at pp.c:25769)
          ID: name='tx' (at pp.c:25769)
      While:  (at pp.c:25770)
        UnaryOp: op='!' (at None)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__Usart__isRxIntrPending' (at pp.c:25770)
      FuncCall:  (at None)
        ID: name='Msp430SpiNoDmaP__0__Usart__clrRxIntr' (at pp.c:25771)
      Assignment: op='=' (at pp.c:25772)
        ID: name='byte' (at pp.c:25772)
        FuncCall:  (at None)
          ID: name='Msp430SpiNoDmaP__0__Usart__rx' (at pp.c:25772)
      Return:  (at pp.c:25774)
        ID: name='byte' (at pp.c:25774)
  FuncDef:  (at pp.c:25778)
    Decl: name='HplMsp430GeneralIOP__26__IO__set', quals=[], storage=['static'] (at pp.c:25778)
      FuncDecl: quals=None (at pp.c:25778)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__26__IO__set', quals=[] (at pp.c:25778)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25780)
      Compound:  (at pp.c:25782)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:25782)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:25782)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:25782)
        Assignment: op='|=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:25784)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:25784)
          BinaryOp: op='<<' (at pp.c:25784)
            Constant: type='int', value='0x01' (at pp.c:25784)
            Constant: type='int', value='2' (at pp.c:25784)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:25786)
          ExprList:  (at pp.c:25786)
            ID: name='__nesc_atomic' (at pp.c:25786)
  FuncDef:  (at pp.c:25790)
    Decl: name='CC2420SpiP__Resource__release', quals=[], storage=['static'] (at pp.c:25790)
      FuncDecl: quals=None (at pp.c:25790)
        ParamList:  (at pp.c:25790)
          Decl: name='id', quals=[], storage=[] (at pp.c:25790)
            TypeDecl: declname='id', quals=[] (at pp.c:25790)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__release', quals=[] (at pp.c:25790)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25792)
      Decl: name='i', quals=[], storage=[] (at pp.c:25793)
        TypeDecl: declname='i', quals=[] (at pp.c:25793)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:25796)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:25796)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:25796)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:25796)
        Compound:  (at pp.c:25798)
          If:  (at pp.c:25799)
            BinaryOp: op='!=' (at pp.c:25799)
              ID: name='CC2420SpiP__m_holder' (at pp.c:25799)
              ID: name='id' (at pp.c:25799)
            Compound:  (at pp.c:25799)
              Compound:  (at pp.c:25800)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:25801)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:25801)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='FAIL' (at pp.c:25803)
                Compound:  (at pp.c:25805)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:25807)
                    ExprList:  (at pp.c:25807)
                      ID: name='__nesc_atomic' (at pp.c:25807)
                  Return:  (at pp.c:25809)
                    ID: name='__nesc_temp' (at pp.c:25809)
          Assignment: op='=' (at pp.c:25814)
            ID: name='CC2420SpiP__m_holder' (at pp.c:25814)
            ID: name='CC2420SpiP__NO_HOLDER' (at pp.c:25814)
          If:  (at pp.c:25815)
            UnaryOp: op='!' (at pp.c:25815)
              ID: name='CC2420SpiP__m_requests' (at pp.c:25815)
            Compound:  (at pp.c:25815)
              FuncCall:  (at None)
                ID: name='CC2420SpiP__WorkingState__toIdle' (at pp.c:25816)
              FuncCall:  (at None)
                ID: name='CC2420SpiP__attemptRelease' (at pp.c:25817)
            Compound:  (at pp.c:25819)
              For:  (at pp.c:25820)
                Assignment: op='=' (at pp.c:25820)
                  ID: name='i' (at pp.c:25820)
                  BinaryOp: op='+' (at pp.c:25820)
                    ID: name='CC2420SpiP__m_holder' (at pp.c:25820)
                    Constant: type='int', value='1' (at pp.c:25820)
                UnaryOp: op='p++' (at pp.c:25820)
                  ID: name='i' (at pp.c:25820)
                Compound:  (at pp.c:25820)
                  Assignment: op='%=' (at pp.c:25821)
                    ID: name='i' (at pp.c:25821)
                    ID: name='CC2420SpiP__RESOURCE_COUNT' (at pp.c:25821)
                  If:  (at pp.c:25823)
                    BinaryOp: op='&' (at pp.c:25823)
                      ID: name='CC2420SpiP__m_requests' (at pp.c:25823)
                      BinaryOp: op='<<' (at pp.c:25823)
                        Constant: type='int', value='1' (at pp.c:25823)
                        ID: name='i' (at pp.c:25823)
                    Compound:  (at pp.c:25823)
                      Assignment: op='=' (at pp.c:25824)
                        ID: name='CC2420SpiP__m_holder' (at pp.c:25824)
                        ID: name='i' (at pp.c:25824)
                      Assignment: op='&=' (at pp.c:25825)
                        ID: name='CC2420SpiP__m_requests' (at pp.c:25825)
                        UnaryOp: op='~' (at pp.c:25825)
                          BinaryOp: op='<<' (at pp.c:25825)
                            Constant: type='int', value='1' (at pp.c:25825)
                            ID: name='i' (at pp.c:25825)
                      FuncCall:  (at None)
                        ID: name='CC2420SpiP__grant__postTask' (at pp.c:25826)
                      Compound:  (at pp.c:25827)
                        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:25828)
                          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:25828)
                            IdentifierType: names=['char', 'unsigned'] (at None)
                          ID: name='SUCCESS' (at pp.c:25830)
                        Compound:  (at pp.c:25832)
                          FuncCall:  (at None)
                            ID: name='__nesc_atomic_end' (at pp.c:25834)
                            ExprList:  (at pp.c:25834)
                              ID: name='__nesc_atomic' (at pp.c:25834)
                          Return:  (at pp.c:25836)
                            ID: name='__nesc_temp' (at pp.c:25836)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:25844)
          ExprList:  (at pp.c:25844)
            ID: name='__nesc_atomic' (at pp.c:25844)
      Return:  (at pp.c:25846)
        ID: name='SUCCESS' (at pp.c:25846)
  FuncDef:  (at pp.c:25850)
    Decl: name='CC2420SpiP__attemptRelease', quals=[], storage=['static'] (at pp.c:25850)
      FuncDecl: quals=None (at pp.c:25850)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420SpiP__attemptRelease', quals=[] (at pp.c:25850)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25852)
      If:  (at pp.c:25855)
        BinaryOp: op='||' (at pp.c:25857)
          BinaryOp: op='||' (at pp.c:25857)
            BinaryOp: op='>' (at pp.c:25857)
              ID: name='CC2420SpiP__m_requests' (at pp.c:25857)
              Constant: type='int', value='0' (at pp.c:25857)
            BinaryOp: op='!=' (at pp.c:25858)
              ID: name='CC2420SpiP__m_holder' (at pp.c:25858)
              ID: name='CC2420SpiP__NO_HOLDER' (at pp.c:25858)
          UnaryOp: op='!' (at None)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:25859)
        Compound:  (at pp.c:25859)
          Return:  (at pp.c:25860)
            ID: name='FAIL' (at pp.c:25860)
      Assignment: op='=' (at pp.c:25863)
        ID: name='CC2420SpiP__release' (at pp.c:25863)
        ID: name='TRUE' (at pp.c:25863)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__ChipSpiResource__releasing' (at pp.c:25864)
      Compound:  (at pp.c:25867)
        If:  (at pp.c:25868)
          ID: name='CC2420SpiP__release' (at pp.c:25868)
          Compound:  (at pp.c:25868)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__SpiResource__release' (at pp.c:25869)
            Compound:  (at pp.c:25870)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:25871)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:25871)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='SUCCESS' (at pp.c:25873)
              Return:  (at pp.c:25876)
                ID: name='__nesc_temp' (at pp.c:25876)
      Return:  (at pp.c:25880)
        ID: name='EBUSY' (at pp.c:25880)
  FuncDef:  (at pp.c:25884)
    Decl: name='ArbiterP__1__Resource__release', quals=[], storage=['static'] (at pp.c:25884)
      FuncDecl: quals=None (at pp.c:25884)
        ParamList:  (at pp.c:25884)
          Decl: name='id', quals=[], storage=[] (at pp.c:25884)
            TypeDecl: declname='id', quals=[] (at pp.c:25884)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__release', quals=[] (at pp.c:25884)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:25886)
      Compound:  (at pp.c:25887)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:25887)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:25887)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:25887)
        Compound:  (at pp.c:25889)
          If:  (at pp.c:25890)
            BinaryOp: op='&&' (at pp.c:25890)
              BinaryOp: op='==' (at pp.c:25890)
                ID: name='ArbiterP__1__state' (at pp.c:25890)
                ID: name='ArbiterP__1__RES_BUSY' (at pp.c:25890)
              BinaryOp: op='==' (at pp.c:25890)
                ID: name='ArbiterP__1__resId' (at pp.c:25890)
                ID: name='id' (at pp.c:25890)
            Compound:  (at pp.c:25890)
              If:  (at pp.c:25891)
                BinaryOp: op='==' (at None)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__1__Queue__isEmpty' (at pp.c:25891)
                  ID: name='FALSE' (at pp.c:25891)
                Compound:  (at pp.c:25891)
                  Assignment: op='=' (at pp.c:25892)
                    ID: name='ArbiterP__1__reqResId' (at pp.c:25892)
                    FuncCall:  (at None)
                      ID: name='ArbiterP__1__Queue__dequeue' (at pp.c:25892)
                  Assignment: op='=' (at pp.c:25893)
                    ID: name='ArbiterP__1__resId' (at pp.c:25893)
                    ID: name='ArbiterP__1__NO_RES' (at pp.c:25893)
                  Assignment: op='=' (at pp.c:25894)
                    ID: name='ArbiterP__1__state' (at pp.c:25894)
                    ID: name='ArbiterP__1__RES_GRANTING' (at pp.c:25894)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__1__grantedTask__postTask' (at pp.c:25895)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__1__ResourceConfigure__unconfigure' (at pp.c:25896)
                    ExprList:  (at pp.c:25896)
                      ID: name='id' (at pp.c:25896)
                Compound:  (at pp.c:25898)
                  Assignment: op='=' (at pp.c:25899)
                    ID: name='ArbiterP__1__resId' (at pp.c:25899)
                    ID: name='ArbiterP__1__default_owner_id' (at pp.c:25899)
                  Assignment: op='=' (at pp.c:25900)
                    ID: name='ArbiterP__1__state' (at pp.c:25900)
                    ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:25900)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__1__ResourceConfigure__unconfigure' (at pp.c:25901)
                    ExprList:  (at pp.c:25901)
                      ID: name='id' (at pp.c:25901)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__1__ResourceDefaultOwner__granted' (at pp.c:25902)
              Compound:  (at pp.c:25904)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:25905)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:25905)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='SUCCESS' (at pp.c:25907)
                Compound:  (at pp.c:25909)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:25911)
                    ExprList:  (at pp.c:25911)
                      ID: name='__nesc_atomic' (at pp.c:25911)
                  Return:  (at pp.c:25913)
                    ID: name='__nesc_temp' (at pp.c:25913)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:25919)
          ExprList:  (at pp.c:25919)
            ID: name='__nesc_atomic' (at pp.c:25919)
      Return:  (at pp.c:25921)
        ID: name='FAIL' (at pp.c:25921)
  FuncDef:  (at pp.c:25925)
    Decl: name='HplMsp430Usart0P__Usart__disableSpi', quals=[], storage=['static'] (at pp.c:25925)
      FuncDecl: quals=None (at pp.c:25925)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__disableSpi', quals=[] (at pp.c:25925)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25927)
      Compound:  (at pp.c:25930)
        Assignment: op='&=' (at pp.c:25931)
          ID: name='HplMsp430Usart0P__ME1' (at pp.c:25931)
          UnaryOp: op='~' (at pp.c:25931)
            BinaryOp: op='<<' (at pp.c:25931)
              Constant: type='int', value='1' (at pp.c:25931)
              Constant: type='int', value='6' (at pp.c:25931)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__SIMO__selectIOFunc' (at pp.c:25932)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__SOMI__selectIOFunc' (at pp.c:25933)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__UCLK__selectIOFunc' (at pp.c:25934)
  FuncDef:  (at pp.c:25939)
    Decl: name='TransformAlarmC__1__Alarm__startAt', quals=[], storage=['static'] (at pp.c:25939)
      FuncDecl: quals=None (at pp.c:25939)
        ParamList:  (at pp.c:25939)
          Decl: name='t0', quals=[], storage=[] (at pp.c:25939)
            TypeDecl: declname='t0', quals=[] (at pp.c:25939)
              IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:25939)
            TypeDecl: declname='dt', quals=[] (at pp.c:25939)
              IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
        TypeDecl: declname='TransformAlarmC__1__Alarm__startAt', quals=[] (at pp.c:25939)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25940)
      Compound:  (at pp.c:25941)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:25941)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:25941)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:25941)
        Compound:  (at pp.c:25942)
          Assignment: op='=' (at pp.c:25943)
            ID: name='TransformAlarmC__1__m_t0' (at pp.c:25943)
            ID: name='t0' (at pp.c:25943)
          Assignment: op='=' (at pp.c:25944)
            ID: name='TransformAlarmC__1__m_dt' (at pp.c:25944)
            ID: name='dt' (at pp.c:25944)
          FuncCall:  (at None)
            ID: name='TransformAlarmC__1__set_alarm' (at pp.c:25945)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:25948)
          ExprList:  (at pp.c:25948)
            ID: name='__nesc_atomic' (at pp.c:25948)
  FuncDef:  (at pp.c:25952)
    Decl: name='TransformAlarmC__1__set_alarm', quals=[], storage=['static'] (at pp.c:25952)
      FuncDecl: quals=None (at pp.c:25952)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='TransformAlarmC__1__set_alarm', quals=[] (at pp.c:25952)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:25953)
      Decl: name='now', quals=[], storage=[] (at pp.c:25954)
        TypeDecl: declname='now', quals=[] (at pp.c:25954)
          IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
        FuncCall:  (at None)
          ID: name='TransformAlarmC__1__Counter__get' (at pp.c:25954)
      Decl: name='expires', quals=[], storage=[] (at pp.c:25956)
        TypeDecl: declname='expires', quals=[] (at pp.c:25956)
          IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
      Decl: name='remaining', quals=[], storage=[] (at pp.c:25958)
        TypeDecl: declname='remaining', quals=[] (at pp.c:25958)
          IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
      Assignment: op='=' (at pp.c:25963)
        ID: name='expires' (at pp.c:25963)
        BinaryOp: op='+' (at pp.c:25963)
          ID: name='TransformAlarmC__1__m_t0' (at pp.c:25963)
          ID: name='TransformAlarmC__1__m_dt' (at pp.c:25963)
      Assignment: op='=' (at pp.c:25966)
        ID: name='remaining' (at pp.c:25966)
        Cast:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['TransformAlarmC__1__to_size_type'] (at None)
          BinaryOp: op='-' (at pp.c:25966)
            ID: name='expires' (at pp.c:25966)
            ID: name='now' (at pp.c:25966)
      If:  (at pp.c:25969)
        BinaryOp: op='<=' (at pp.c:25969)
          ID: name='TransformAlarmC__1__m_t0' (at pp.c:25969)
          ID: name='now' (at pp.c:25969)
        Compound:  (at pp.c:25970)
          If:  (at pp.c:25971)
            BinaryOp: op='&&' (at pp.c:25971)
              BinaryOp: op='>=' (at pp.c:25971)
                ID: name='expires' (at pp.c:25971)
                ID: name='TransformAlarmC__1__m_t0' (at pp.c:25971)
              BinaryOp: op='<=' (at pp.c:25972)
                ID: name='expires' (at pp.c:25972)
                ID: name='now' (at pp.c:25972)
            Compound:  (at pp.c:25972)
              Assignment: op='=' (at pp.c:25973)
                ID: name='remaining' (at pp.c:25973)
                Constant: type='int', value='0' (at pp.c:25973)
        Compound:  (at pp.c:25976)
          If:  (at pp.c:25977)
            BinaryOp: op='||' (at pp.c:25977)
              BinaryOp: op='>=' (at pp.c:25977)
                ID: name='expires' (at pp.c:25977)
                ID: name='TransformAlarmC__1__m_t0' (at pp.c:25977)
              BinaryOp: op='<=' (at pp.c:25978)
                ID: name='expires' (at pp.c:25978)
                ID: name='now' (at pp.c:25978)
            Compound:  (at pp.c:25978)
              Assignment: op='=' (at pp.c:25979)
                ID: name='remaining' (at pp.c:25979)
                Constant: type='int', value='0' (at pp.c:25979)
      If:  (at pp.c:25983)
        BinaryOp: op='>' (at pp.c:25983)
          ID: name='remaining' (at pp.c:25983)
          ID: name='TransformAlarmC__1__MAX_DELAY' (at pp.c:25983)
        Compound:  (at pp.c:25984)
          Assignment: op='=' (at pp.c:25985)
            ID: name='TransformAlarmC__1__m_t0' (at pp.c:25985)
            BinaryOp: op='+' (at pp.c:25985)
              ID: name='now' (at pp.c:25985)
              ID: name='TransformAlarmC__1__MAX_DELAY' (at pp.c:25985)
          Assignment: op='=' (at pp.c:25986)
            ID: name='TransformAlarmC__1__m_dt' (at pp.c:25986)
            BinaryOp: op='-' (at pp.c:25986)
              ID: name='remaining' (at pp.c:25986)
              ID: name='TransformAlarmC__1__MAX_DELAY' (at pp.c:25986)
          Assignment: op='=' (at pp.c:25987)
            ID: name='remaining' (at pp.c:25987)
            ID: name='TransformAlarmC__1__MAX_DELAY' (at pp.c:25987)
        Compound:  (at pp.c:25990)
          Assignment: op='+=' (at pp.c:25991)
            ID: name='TransformAlarmC__1__m_t0' (at pp.c:25991)
            ID: name='TransformAlarmC__1__m_dt' (at pp.c:25991)
          Assignment: op='=' (at pp.c:25992)
            ID: name='TransformAlarmC__1__m_dt' (at pp.c:25992)
            Constant: type='int', value='0' (at pp.c:25992)
      FuncCall:  (at None)
        ID: name='TransformAlarmC__1__AlarmFrom__startAt' (at pp.c:25994)
        ExprList:  (at None)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__1__from_size_type'] (at None)
              ID: name='now' (at pp.c:25994)
            Constant: type='int', value='0' (at pp.c:25994)
          BinaryOp: op='<<' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['TransformAlarmC__1__from_size_type'] (at None)
              ID: name='remaining' (at pp.c:25995)
            Constant: type='int', value='0' (at pp.c:25995)
  FuncDef:  (at pp.c:25999)
    Decl: name='CC2420TransmitP__signalDone', quals=[], storage=['static'] (at pp.c:25999)
      FuncDecl: quals=None (at pp.c:25999)
        ParamList:  (at pp.c:25999)
          Decl: name='err', quals=[], storage=[] (at pp.c:25999)
            TypeDecl: declname='err', quals=[] (at pp.c:25999)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420TransmitP__signalDone', quals=[] (at pp.c:25999)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26001)
      Assignment: op='=' (at pp.c:26004)
        ID: name='CC2420TransmitP__m_state' (at pp.c:26004)
        ID: name='CC2420TransmitP__S_STARTED' (at pp.c:26004)
      Assignment: op='=' (at pp.c:26005)
        ID: name='CC2420TransmitP__abortSpiRelease' (at pp.c:26005)
        ID: name='FALSE' (at pp.c:26005)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__ChipSpiResource__attemptRelease' (at pp.c:26006)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__Send__sendDone' (at pp.c:26007)
        ExprList:  (at pp.c:26007)
          ID: name='CC2420TransmitP__m_msg' (at pp.c:26007)
          ID: name='err' (at pp.c:26007)
  FuncDef:  (at pp.c:26011)
    Decl: name='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[], storage=['static'] (at pp.c:26011)
      FuncDecl: quals=None (at pp.c:26011)
        ParamList:  (at pp.c:26011)
          Decl: name='msg', quals=[], storage=[] (at pp.c:26011)
            PtrDecl: quals=[] (at pp.c:26011)
              TypeDecl: declname='msg', quals=[] (at pp.c:26011)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420PacketP__PacketTimeStamp32khz__clear', quals=[] (at pp.c:26011)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26012)
      FuncCall:  (at None)
        ID: name='__nesc_hton_int8' (at pp.c:26013)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:26013)
                ExprList:  (at pp.c:26013)
                  ID: name='msg' (at pp.c:26013)
              ID: name='timesync' (at pp.c:26013)
            ID: name='nxdata' (at pp.c:26013)
          ID: name='FALSE' (at pp.c:26013)
      FuncCall:  (at None)
        ID: name='__nesc_hton_uint32' (at pp.c:26014)
        ExprList:  (at None)
          StructRef: type='.' (at None)
            StructRef: type='->' (at None)
              FuncCall:  (at None)
                ID: name='CC2420PacketP__CC2420PacketBody__getMetadata' (at pp.c:26014)
                ExprList:  (at pp.c:26014)
                  ID: name='msg' (at pp.c:26014)
              ID: name='timestamp' (at pp.c:26014)
            ID: name='nxdata' (at pp.c:26014)
          ID: name='CC2420_INVALID_TIMESTAMP' (at pp.c:26014)
  FuncDef:  (at pp.c:26018)
    Decl: name='CC2420TransmitP__congestionBackoff', quals=[], storage=['static'] (at pp.c:26018)
      FuncDecl: quals=None (at pp.c:26018)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__congestionBackoff', quals=[] (at pp.c:26018)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26020)
      Compound:  (at pp.c:26021)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26021)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26021)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26021)
        Compound:  (at pp.c:26023)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__RadioBackoff__requestCongestionBackoff' (at pp.c:26024)
            ExprList:  (at pp.c:26024)
              ID: name='CC2420TransmitP__m_msg' (at pp.c:26024)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:26025)
            ExprList:  (at pp.c:26025)
              ID: name='CC2420TransmitP__myCongestionBackoff' (at pp.c:26025)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26028)
          ExprList:  (at pp.c:26028)
            ID: name='__nesc_atomic' (at pp.c:26028)
  FuncDef:  (at pp.c:26032)
    Decl: name='RandomMlcgC__Random__rand32', quals=[], storage=['static'] (at pp.c:26032)
      FuncDecl: quals=None (at pp.c:26032)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='RandomMlcgC__Random__rand32', quals=[] (at pp.c:26032)
          IdentifierType: names=['uint32_t'] (at None)
    Compound:  (at pp.c:26034)
      Decl: name='mlcg', quals=[], storage=[] (at pp.c:26035)
        TypeDecl: declname='mlcg', quals=[] (at pp.c:26035)
          IdentifierType: names=['uint32_t'] (at None)
      Decl: name='p', quals=[], storage=[] (at pp.c:26037)
        TypeDecl: declname='p', quals=[] (at pp.c:26037)
          IdentifierType: names=['uint32_t'] (at None)
      Decl: name='q', quals=[], storage=[] (at pp.c:26039)
        TypeDecl: declname='q', quals=[] (at pp.c:26039)
          IdentifierType: names=['uint32_t'] (at None)
      Decl: name='tmpseed', quals=[], storage=[] (at pp.c:26040)
        TypeDecl: declname='tmpseed', quals=[] (at pp.c:26040)
          IdentifierType: names=['uint64_t'] (at None)
      Compound:  (at pp.c:26043)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26043)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26043)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26043)
        Compound:  (at pp.c:26044)
          Assignment: op='=' (at pp.c:26045)
            ID: name='tmpseed' (at pp.c:26045)
            BinaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['uint64_t'] (at None)
                Constant: type='int', value='33614U' (at pp.c:26045)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['uint64_t'] (at None)
                ID: name='RandomMlcgC__seed' (at pp.c:26045)
          Assignment: op='=' (at pp.c:26046)
            ID: name='q' (at pp.c:26046)
            ID: name='tmpseed' (at pp.c:26046)
          Assignment: op='=' (at pp.c:26047)
            ID: name='q' (at pp.c:26047)
            BinaryOp: op='>>' (at pp.c:26047)
              ID: name='q' (at pp.c:26047)
              Constant: type='int', value='1' (at pp.c:26047)
          Assignment: op='=' (at pp.c:26048)
            ID: name='p' (at pp.c:26048)
            BinaryOp: op='>>' (at pp.c:26048)
              ID: name='tmpseed' (at pp.c:26048)
              Constant: type='int', value='32' (at pp.c:26048)
          Assignment: op='=' (at pp.c:26049)
            ID: name='mlcg' (at pp.c:26049)
            BinaryOp: op='+' (at pp.c:26049)
              ID: name='p' (at pp.c:26049)
              ID: name='q' (at pp.c:26049)
          If:  (at pp.c:26050)
            BinaryOp: op='&' (at pp.c:26050)
              ID: name='mlcg' (at pp.c:26050)
              Constant: type='int', value='0x80000000' (at pp.c:26050)
            Compound:  (at pp.c:26050)
              Assignment: op='=' (at pp.c:26051)
                ID: name='mlcg' (at pp.c:26051)
                BinaryOp: op='&' (at pp.c:26051)
                  ID: name='mlcg' (at pp.c:26051)
                  Constant: type='int', value='0x7FFFFFFF' (at pp.c:26051)
              UnaryOp: op='p++' (at pp.c:26052)
                ID: name='mlcg' (at pp.c:26052)
          Assignment: op='=' (at pp.c:26054)
            ID: name='RandomMlcgC__seed' (at pp.c:26054)
            ID: name='mlcg' (at pp.c:26054)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26057)
          ExprList:  (at pp.c:26057)
            ID: name='__nesc_atomic' (at pp.c:26057)
      Return:  (at pp.c:26058)
        ID: name='mlcg' (at pp.c:26058)
  FuncDef:  (at pp.c:26062)
    Decl: name='CC2420TransmitP__acquireSpiResource', quals=[], storage=['static'] (at pp.c:26062)
      FuncDecl: quals=None (at pp.c:26062)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__acquireSpiResource', quals=[] (at pp.c:26062)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26064)
      Decl: name='error', quals=[], storage=[] (at pp.c:26065)
        TypeDecl: declname='error', quals=[] (at pp.c:26065)
          IdentifierType: names=['error_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__SpiResource__immediateRequest' (at pp.c:26065)
      If:  (at pp.c:26068)
        BinaryOp: op='!=' (at pp.c:26068)
          ID: name='error' (at pp.c:26068)
          ID: name='SUCCESS' (at pp.c:26068)
        Compound:  (at pp.c:26068)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__SpiResource__request' (at pp.c:26069)
      Return:  (at pp.c:26071)
        ID: name='error' (at pp.c:26071)
  FuncDef:  (at pp.c:26075)
    Decl: name='CC2420SpiP__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:26075)
      FuncDecl: quals=None (at pp.c:26075)
        ParamList:  (at pp.c:26075)
          Decl: name='id', quals=[], storage=[] (at pp.c:26075)
            TypeDecl: declname='id', quals=[] (at pp.c:26075)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__immediateRequest', quals=[] (at pp.c:26075)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26077)
      Decl: name='error', quals=[], storage=[] (at pp.c:26078)
        TypeDecl: declname='error', quals=[] (at pp.c:26078)
          IdentifierType: names=['error_t'] (at None)
      Compound:  (at pp.c:26080)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26080)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26080)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26080)
        Compound:  (at pp.c:26082)
          If:  (at pp.c:26083)
            BinaryOp: op='!=' (at None)
              FuncCall:  (at None)
                ID: name='CC2420SpiP__WorkingState__requestState' (at pp.c:26083)
                ExprList:  (at pp.c:26083)
                  ID: name='CC2420SpiP__S_BUSY' (at pp.c:26083)
              ID: name='SUCCESS' (at pp.c:26083)
            Compound:  (at pp.c:26083)
              Compound:  (at pp.c:26084)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26085)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26085)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='EBUSY' (at pp.c:26087)
                Compound:  (at pp.c:26089)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:26091)
                    ExprList:  (at pp.c:26091)
                      ID: name='__nesc_atomic' (at pp.c:26091)
                  Return:  (at pp.c:26093)
                    ID: name='__nesc_temp' (at pp.c:26093)
          If:  (at pp.c:26097)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__SpiResource__isOwner' (at pp.c:26097)
            Compound:  (at pp.c:26097)
              Assignment: op='=' (at pp.c:26098)
                ID: name='CC2420SpiP__m_holder' (at pp.c:26098)
                ID: name='id' (at pp.c:26098)
              Assignment: op='=' (at pp.c:26099)
                ID: name='error' (at pp.c:26099)
                ID: name='SUCCESS' (at pp.c:26099)
            Compound:  (at pp.c:26101)
              If:  (at pp.c:26103)
                BinaryOp: op='==' (at pp.c:26103)
                  Assignment: op='=' (at pp.c:26103)
                    ID: name='error' (at pp.c:26103)
                    FuncCall:  (at None)
                      ID: name='CC2420SpiP__SpiResource__immediateRequest' (at pp.c:26103)
                  ID: name='SUCCESS' (at pp.c:26103)
                Compound:  (at pp.c:26103)
                  Assignment: op='=' (at pp.c:26104)
                    ID: name='CC2420SpiP__m_holder' (at pp.c:26104)
                    ID: name='id' (at pp.c:26104)
                Compound:  (at pp.c:26106)
                  FuncCall:  (at None)
                    ID: name='CC2420SpiP__WorkingState__toIdle' (at pp.c:26107)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26112)
          ExprList:  (at pp.c:26112)
            ID: name='__nesc_atomic' (at pp.c:26112)
      Return:  (at pp.c:26114)
        ID: name='error' (at pp.c:26114)
  FuncDef:  (at pp.c:26118)
    Decl: name='StateImplP__State__requestState', quals=[], storage=['static'] (at pp.c:26118)
      FuncDecl: quals=None (at pp.c:26118)
        ParamList:  (at pp.c:26118)
          Decl: name='id', quals=[], storage=[] (at pp.c:26118)
            TypeDecl: declname='id', quals=[] (at pp.c:26118)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='reqState', quals=[], storage=[] (at pp.c:26118)
            TypeDecl: declname='reqState', quals=[] (at pp.c:26118)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__requestState', quals=[] (at pp.c:26118)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26120)
      Decl: name='returnVal', quals=[], storage=[] (at pp.c:26121)
        TypeDecl: declname='returnVal', quals=[] (at pp.c:26121)
          IdentifierType: names=['error_t'] (at None)
        ID: name='FAIL' (at pp.c:26121)
      Compound:  (at pp.c:26124)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26124)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26124)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26124)
        Compound:  (at pp.c:26126)
          If:  (at pp.c:26127)
            BinaryOp: op='||' (at pp.c:26127)
              BinaryOp: op='==' (at pp.c:26127)
                ID: name='reqState' (at pp.c:26127)
                ID: name='StateImplP__S_IDLE' (at pp.c:26127)
              BinaryOp: op='==' (at pp.c:26127)
                ArrayRef:  (at pp.c:26127)
                  ID: name='StateImplP__state' (at pp.c:26127)
                  ID: name='id' (at pp.c:26127)
                ID: name='StateImplP__S_IDLE' (at pp.c:26127)
            Compound:  (at pp.c:26127)
              Assignment: op='=' (at pp.c:26128)
                ArrayRef:  (at pp.c:26128)
                  ID: name='StateImplP__state' (at pp.c:26128)
                  ID: name='id' (at pp.c:26128)
                ID: name='reqState' (at pp.c:26128)
              Assignment: op='=' (at pp.c:26129)
                ID: name='returnVal' (at pp.c:26129)
                ID: name='SUCCESS' (at pp.c:26129)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26133)
          ExprList:  (at pp.c:26133)
            ID: name='__nesc_atomic' (at pp.c:26133)
      Return:  (at pp.c:26134)
        ID: name='returnVal' (at pp.c:26134)
  FuncDef:  (at pp.c:26138)
    Decl: name='ArbiterP__1__Resource__isOwner', quals=[], storage=['static'] (at pp.c:26138)
      FuncDecl: quals=None (at pp.c:26138)
        ParamList:  (at pp.c:26138)
          Decl: name='id', quals=[], storage=[] (at pp.c:26138)
            TypeDecl: declname='id', quals=[] (at pp.c:26138)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__isOwner', quals=[] (at pp.c:26138)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:26140)
      Compound:  (at pp.c:26143)
        If:  (at pp.c:26144)
          BinaryOp: op='&&' (at pp.c:26144)
            BinaryOp: op='==' (at pp.c:26144)
              ID: name='ArbiterP__1__resId' (at pp.c:26144)
              ID: name='id' (at pp.c:26144)
            BinaryOp: op='==' (at pp.c:26144)
              ID: name='ArbiterP__1__state' (at pp.c:26144)
              ID: name='ArbiterP__1__RES_BUSY' (at pp.c:26144)
          Compound:  (at pp.c:26144)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26145)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26145)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='TRUE' (at pp.c:26147)
            Return:  (at pp.c:26150)
              ID: name='__nesc_temp' (at pp.c:26150)
          Compound:  (at pp.c:26154)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26155)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26155)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='FALSE' (at pp.c:26157)
            Return:  (at pp.c:26160)
              ID: name='__nesc_temp' (at pp.c:26160)
  FuncDef:  (at pp.c:26166)
    Decl: name='ArbiterP__1__Resource__immediateRequest', quals=[], storage=['static'] (at pp.c:26166)
      FuncDecl: quals=None (at pp.c:26166)
        ParamList:  (at pp.c:26166)
          Decl: name='id', quals=[], storage=[] (at pp.c:26166)
            TypeDecl: declname='id', quals=[] (at pp.c:26166)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__immediateRequest', quals=[] (at pp.c:26166)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26168)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceRequested__immediateRequested' (at pp.c:26169)
        ExprList:  (at pp.c:26169)
          ID: name='ArbiterP__1__resId' (at pp.c:26169)
      Compound:  (at pp.c:26172)
        If:  (at pp.c:26173)
          BinaryOp: op='==' (at pp.c:26173)
            ID: name='ArbiterP__1__state' (at pp.c:26173)
            ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:26173)
          Compound:  (at pp.c:26173)
            Assignment: op='=' (at pp.c:26174)
              ID: name='ArbiterP__1__state' (at pp.c:26174)
              ID: name='ArbiterP__1__RES_IMM_GRANTING' (at pp.c:26174)
            Assignment: op='=' (at pp.c:26175)
              ID: name='ArbiterP__1__reqResId' (at pp.c:26175)
              ID: name='id' (at pp.c:26175)
          Compound:  (at pp.c:26177)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26178)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26178)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='FAIL' (at pp.c:26180)
            Return:  (at pp.c:26183)
              ID: name='__nesc_temp' (at pp.c:26183)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__immediateRequested' (at pp.c:26187)
      If:  (at pp.c:26188)
        BinaryOp: op='==' (at pp.c:26188)
          ID: name='ArbiterP__1__resId' (at pp.c:26188)
          ID: name='id' (at pp.c:26188)
        Compound:  (at pp.c:26188)
          FuncCall:  (at None)
            ID: name='ArbiterP__1__ResourceConfigure__configure' (at pp.c:26189)
            ExprList:  (at pp.c:26189)
              ID: name='ArbiterP__1__resId' (at pp.c:26189)
          Return:  (at pp.c:26190)
            ID: name='SUCCESS' (at pp.c:26190)
      Assignment: op='=' (at pp.c:26194)
        ID: name='ArbiterP__1__state' (at pp.c:26194)
        ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:26194)
      Return:  (at pp.c:26195)
        ID: name='FAIL' (at pp.c:26195)
  FuncDef:  (at pp.c:26199)
    Decl: name='ArbiterP__1__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:26199)
      FuncDecl: quals=None (at pp.c:26199)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ResourceDefaultOwner__release', quals=[] (at pp.c:26199)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26201)
      Compound:  (at pp.c:26202)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26202)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26202)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26202)
        Compound:  (at pp.c:26204)
          If:  (at pp.c:26205)
            BinaryOp: op='==' (at pp.c:26205)
              ID: name='ArbiterP__1__resId' (at pp.c:26205)
              ID: name='ArbiterP__1__default_owner_id' (at pp.c:26205)
            Compound:  (at pp.c:26205)
              If:  (at pp.c:26206)
                BinaryOp: op='==' (at pp.c:26206)
                  ID: name='ArbiterP__1__state' (at pp.c:26206)
                  ID: name='ArbiterP__1__RES_GRANTING' (at pp.c:26206)
                Compound:  (at pp.c:26206)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__1__grantedTask__postTask' (at pp.c:26207)
                  Compound:  (at pp.c:26208)
                    Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26209)
                      TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26209)
                        IdentifierType: names=['char', 'unsigned'] (at None)
                      ID: name='SUCCESS' (at pp.c:26211)
                    Compound:  (at pp.c:26213)
                      FuncCall:  (at None)
                        ID: name='__nesc_atomic_end' (at pp.c:26215)
                        ExprList:  (at pp.c:26215)
                          ID: name='__nesc_atomic' (at pp.c:26215)
                      Return:  (at pp.c:26217)
                        ID: name='__nesc_temp' (at pp.c:26217)
                Compound:  (at pp.c:26221)
                  If:  (at pp.c:26223)
                    BinaryOp: op='==' (at pp.c:26223)
                      ID: name='ArbiterP__1__state' (at pp.c:26223)
                      ID: name='ArbiterP__1__RES_IMM_GRANTING' (at pp.c:26223)
                    Compound:  (at pp.c:26223)
                      Assignment: op='=' (at pp.c:26224)
                        ID: name='ArbiterP__1__resId' (at pp.c:26224)
                        ID: name='ArbiterP__1__reqResId' (at pp.c:26224)
                      Assignment: op='=' (at pp.c:26225)
                        ID: name='ArbiterP__1__state' (at pp.c:26225)
                        ID: name='ArbiterP__1__RES_BUSY' (at pp.c:26225)
                      Compound:  (at pp.c:26226)
                        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26227)
                          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26227)
                            IdentifierType: names=['char', 'unsigned'] (at None)
                          ID: name='SUCCESS' (at pp.c:26229)
                        Compound:  (at pp.c:26231)
                          FuncCall:  (at None)
                            ID: name='__nesc_atomic_end' (at pp.c:26233)
                            ExprList:  (at pp.c:26233)
                              ID: name='__nesc_atomic' (at pp.c:26233)
                          Return:  (at pp.c:26235)
                            ID: name='__nesc_temp' (at pp.c:26235)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26243)
          ExprList:  (at pp.c:26243)
            ID: name='__nesc_atomic' (at pp.c:26243)
      Return:  (at pp.c:26245)
        ID: name='FAIL' (at pp.c:26245)
  FuncDef:  (at pp.c:26249)
    Decl: name='HplMsp430Usart0P__Usart__setModeSpi', quals=[], storage=['static'] (at pp.c:26249)
      FuncDecl: quals=None (at pp.c:26249)
        ParamList:  (at pp.c:26249)
          Decl: name='config', quals=[], storage=[] (at pp.c:26249)
            PtrDecl: quals=[] (at pp.c:26249)
              TypeDecl: declname='config', quals=[] (at pp.c:26249)
                IdentifierType: names=['msp430_spi_union_config_t'] (at None)
        TypeDecl: declname='HplMsp430Usart0P__Usart__setModeSpi', quals=[] (at pp.c:26249)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26251)
      Compound:  (at pp.c:26253)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26253)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26253)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26253)
        Compound:  (at pp.c:26255)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__resetUsart' (at pp.c:26256)
            ExprList:  (at pp.c:26256)
              ID: name='TRUE' (at pp.c:26256)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__HplI2C__clearModeI2C' (at pp.c:26257)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__disableUart' (at pp.c:26258)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__configSpi' (at pp.c:26259)
            ExprList:  (at pp.c:26259)
              ID: name='config' (at pp.c:26259)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__enableSpi' (at pp.c:26260)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__resetUsart' (at pp.c:26261)
            ExprList:  (at pp.c:26261)
              ID: name='FALSE' (at pp.c:26261)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__clrIntr' (at pp.c:26262)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Usart__disableIntr' (at pp.c:26263)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26266)
          ExprList:  (at pp.c:26266)
            ID: name='__nesc_atomic' (at pp.c:26266)
      Return:  (at pp.c:26267)
  FuncDef:  (at pp.c:26271)
    Decl: name='CC2420SpiP__Resource__request', quals=[], storage=['static'] (at pp.c:26271)
      FuncDecl: quals=None (at pp.c:26271)
        ParamList:  (at pp.c:26271)
          Decl: name='id', quals=[], storage=[] (at pp.c:26271)
            TypeDecl: declname='id', quals=[] (at pp.c:26271)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Resource__request', quals=[] (at pp.c:26271)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26273)
      Compound:  (at pp.c:26275)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26275)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26275)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26275)
        Compound:  (at pp.c:26277)
          If:  (at pp.c:26278)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='CC2420SpiP__WorkingState__requestState' (at pp.c:26278)
                ExprList:  (at pp.c:26278)
                  ID: name='CC2420SpiP__S_BUSY' (at pp.c:26278)
              ID: name='SUCCESS' (at pp.c:26278)
            Compound:  (at pp.c:26278)
              Assignment: op='=' (at pp.c:26279)
                ID: name='CC2420SpiP__m_holder' (at pp.c:26279)
                ID: name='id' (at pp.c:26279)
              If:  (at pp.c:26280)
                FuncCall:  (at None)
                  ID: name='CC2420SpiP__SpiResource__isOwner' (at pp.c:26280)
                Compound:  (at pp.c:26280)
                  FuncCall:  (at None)
                    ID: name='CC2420SpiP__grant__postTask' (at pp.c:26281)
                Compound:  (at pp.c:26283)
                  FuncCall:  (at None)
                    ID: name='CC2420SpiP__SpiResource__request' (at pp.c:26284)
            Compound:  (at pp.c:26287)
              Assignment: op='|=' (at pp.c:26288)
                ID: name='CC2420SpiP__m_requests' (at pp.c:26288)
                BinaryOp: op='<<' (at pp.c:26288)
                  Constant: type='int', value='1' (at pp.c:26288)
                  ID: name='id' (at pp.c:26288)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26292)
          ExprList:  (at pp.c:26292)
            ID: name='__nesc_atomic' (at pp.c:26292)
      Return:  (at pp.c:26293)
        ID: name='SUCCESS' (at pp.c:26293)
  FuncDef:  (at pp.c:26297)
    Decl: name='ArbiterP__1__Resource__request', quals=[], storage=['static'] (at pp.c:26297)
      FuncDecl: quals=None (at pp.c:26297)
        ParamList:  (at pp.c:26297)
          Decl: name='id', quals=[], storage=[] (at pp.c:26297)
            TypeDecl: declname='id', quals=[] (at pp.c:26297)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='ArbiterP__1__Resource__request', quals=[] (at pp.c:26297)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26299)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceRequested__requested' (at pp.c:26300)
        ExprList:  (at pp.c:26300)
          ID: name='ArbiterP__1__resId' (at pp.c:26300)
      Compound:  (at pp.c:26301)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26301)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26301)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26301)
        Compound:  (at pp.c:26303)
          If:  (at pp.c:26304)
            BinaryOp: op='==' (at pp.c:26304)
              ID: name='ArbiterP__1__state' (at pp.c:26304)
              ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:26304)
            Compound:  (at pp.c:26304)
              Assignment: op='=' (at pp.c:26305)
                ID: name='ArbiterP__1__state' (at pp.c:26305)
                ID: name='ArbiterP__1__RES_GRANTING' (at pp.c:26305)
              Assignment: op='=' (at pp.c:26306)
                ID: name='ArbiterP__1__reqResId' (at pp.c:26306)
                ID: name='id' (at pp.c:26306)
            Compound:  (at pp.c:26308)
              If:  (at pp.c:26310)
                BinaryOp: op='==' (at pp.c:26310)
                  ID: name='ArbiterP__1__reqResId' (at pp.c:26310)
                  ID: name='id' (at pp.c:26310)
                Compound:  (at pp.c:26310)
                  Compound:  (at pp.c:26311)
                    Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26312)
                      TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26312)
                        IdentifierType: names=['char', 'unsigned'] (at None)
                      ID: name='SUCCESS' (at pp.c:26314)
                    Compound:  (at pp.c:26316)
                      FuncCall:  (at None)
                        ID: name='__nesc_atomic_end' (at pp.c:26318)
                        ExprList:  (at pp.c:26318)
                          ID: name='__nesc_atomic' (at pp.c:26318)
                      Return:  (at pp.c:26320)
                        ID: name='__nesc_temp' (at pp.c:26320)
                Compound:  (at pp.c:26326)
                  Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26327)
                    TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26327)
                      IdentifierType: names=['char', 'unsigned'] (at None)
                    FuncCall:  (at None)
                      ID: name='ArbiterP__1__Queue__enqueue' (at pp.c:26329)
                      ExprList:  (at pp.c:26329)
                        ID: name='id' (at pp.c:26329)
                  Compound:  (at pp.c:26331)
                    FuncCall:  (at None)
                      ID: name='__nesc_atomic_end' (at pp.c:26333)
                      ExprList:  (at pp.c:26333)
                        ID: name='__nesc_atomic' (at pp.c:26333)
                    Return:  (at pp.c:26335)
                      ID: name='__nesc_temp' (at pp.c:26335)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26341)
          ExprList:  (at pp.c:26341)
            ID: name='__nesc_atomic' (at pp.c:26341)
      FuncCall:  (at None)
        ID: name='ArbiterP__1__ResourceDefaultOwner__requested' (at pp.c:26343)
      Return:  (at pp.c:26344)
        ID: name='SUCCESS' (at pp.c:26344)
  FuncDef:  (at pp.c:26348)
    Decl: name='CC2420TransmitP__attemptSend', quals=[], storage=['static'] (at pp.c:26348)
      FuncDecl: quals=None (at pp.c:26348)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__attemptSend', quals=[] (at pp.c:26348)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26350)
      Decl: name='status', quals=[], storage=[] (at pp.c:26351)
        TypeDecl: declname='status', quals=[] (at pp.c:26351)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='congestion', quals=[], storage=[] (at pp.c:26352)
        TypeDecl: declname='congestion', quals=[] (at pp.c:26352)
          IdentifierType: names=['bool'] (at None)
        ID: name='TRUE' (at pp.c:26352)
      Compound:  (at pp.c:26354)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26354)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26354)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26354)
        Compound:  (at pp.c:26356)
          If:  (at pp.c:26357)
            BinaryOp: op='==' (at pp.c:26357)
              ID: name='CC2420TransmitP__m_state' (at pp.c:26357)
              ID: name='CC2420TransmitP__S_CANCEL' (at pp.c:26357)
            Compound:  (at pp.c:26357)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__SFLUSHTX__strobe' (at pp.c:26358)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:26359)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__CSN__set' (at pp.c:26360)
              Assignment: op='=' (at pp.c:26361)
                ID: name='CC2420TransmitP__m_state' (at pp.c:26361)
                ID: name='CC2420TransmitP__S_STARTED' (at pp.c:26361)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__Send__sendDone' (at pp.c:26362)
                ExprList:  (at pp.c:26362)
                  ID: name='CC2420TransmitP__m_msg' (at pp.c:26362)
                  ID: name='ECANCEL' (at pp.c:26362)
              Compound:  (at pp.c:26363)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:26365)
                  ExprList:  (at pp.c:26365)
                    ID: name='__nesc_atomic' (at pp.c:26365)
                Return:  (at pp.c:26367)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CSN__clr' (at pp.c:26375)
          Assignment: op='=' (at pp.c:26376)
            ID: name='status' (at pp.c:26376)
            TernaryOp:  (at pp.c:26376)
              ID: name='CC2420TransmitP__m_cca' (at pp.c:26376)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__STXONCCA__strobe' (at pp.c:26376)
              FuncCall:  (at None)
                ID: name='CC2420TransmitP__STXON__strobe' (at pp.c:26376)
          If:  (at pp.c:26377)
            UnaryOp: op='!' (at pp.c:26377)
              BinaryOp: op='&' (at pp.c:26377)
                ID: name='status' (at pp.c:26377)
                ID: name='CC2420_STATUS_TX_ACTIVE' (at pp.c:26377)
            Compound:  (at pp.c:26377)
              Assignment: op='=' (at pp.c:26378)
                ID: name='status' (at pp.c:26378)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__SNOP__strobe' (at pp.c:26378)
              If:  (at pp.c:26379)
                BinaryOp: op='&' (at pp.c:26379)
                  ID: name='status' (at pp.c:26379)
                  ID: name='CC2420_STATUS_TX_ACTIVE' (at pp.c:26379)
                Compound:  (at pp.c:26379)
                  Assignment: op='=' (at pp.c:26380)
                    ID: name='congestion' (at pp.c:26380)
                    ID: name='FALSE' (at pp.c:26380)
          Assignment: op='=' (at pp.c:26384)
            ID: name='CC2420TransmitP__m_state' (at pp.c:26384)
            TernaryOp:  (at pp.c:26384)
              ID: name='congestion' (at pp.c:26384)
              ID: name='CC2420TransmitP__S_SAMPLE_CCA' (at pp.c:26384)
              ID: name='CC2420TransmitP__S_SFD' (at pp.c:26384)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CSN__set' (at pp.c:26385)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26388)
          ExprList:  (at pp.c:26388)
            ID: name='__nesc_atomic' (at pp.c:26388)
      If:  (at pp.c:26390)
        ID: name='congestion' (at pp.c:26390)
        Compound:  (at pp.c:26390)
          Assignment: op='=' (at pp.c:26391)
            ID: name='CC2420TransmitP__totalCcaChecks' (at pp.c:26391)
            Constant: type='int', value='0' (at pp.c:26391)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__releaseSpiResource' (at pp.c:26392)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__congestionBackoff' (at pp.c:26393)
        Compound:  (at pp.c:26397)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__BackoffTimer__start' (at pp.c:26398)
            ExprList:  (at pp.c:26398)
              ID: name='CC2420TransmitP__CC2420_ABORT_PERIOD' (at pp.c:26398)
  FuncDef:  (at pp.c:26403)
    Decl: name='CC2420SpiP__Strobe__strobe', quals=[], storage=['static'] (at pp.c:26403)
      FuncDecl: quals=None (at pp.c:26403)
        ParamList:  (at pp.c:26403)
          Decl: name='addr', quals=[], storage=[] (at pp.c:26403)
            TypeDecl: declname='addr', quals=[] (at pp.c:26403)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Strobe__strobe', quals=[] (at pp.c:26403)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:26405)
      Compound:  (at pp.c:26406)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26406)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26406)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26406)
        Compound:  (at pp.c:26408)
          If:  (at pp.c:26409)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:26409)
            Compound:  (at pp.c:26409)
              Compound:  (at pp.c:26410)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26411)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26411)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  Constant: type='int', value='0' (at pp.c:26413)
                Compound:  (at pp.c:26415)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:26417)
                    ExprList:  (at pp.c:26417)
                      ID: name='__nesc_atomic' (at pp.c:26417)
                  Return:  (at pp.c:26419)
                    ID: name='__nesc_temp' (at pp.c:26419)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26425)
          ExprList:  (at pp.c:26425)
            ID: name='__nesc_atomic' (at pp.c:26425)
      Return:  (at pp.c:26427)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:26427)
          ExprList:  (at pp.c:26427)
            ID: name='addr' (at pp.c:26427)
  FuncDef:  (at pp.c:26431)
    Decl: name='HplMsp430GeneralIOP__30__IO__clr', quals=[], storage=['static'] (at pp.c:26431)
      FuncDecl: quals=None (at pp.c:26431)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__30__IO__clr', quals=[] (at pp.c:26431)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26433)
      Compound:  (at pp.c:26435)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26435)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26435)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26435)
        Assignment: op='&=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:26437)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:26437)
          UnaryOp: op='~' (at pp.c:26437)
            BinaryOp: op='<<' (at pp.c:26437)
              Constant: type='int', value='0x01' (at pp.c:26437)
              Constant: type='int', value='6' (at pp.c:26437)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26439)
          ExprList:  (at pp.c:26439)
            ID: name='__nesc_atomic' (at pp.c:26439)
  FuncDef:  (at pp.c:26443)
    Decl: name='HplMsp430GeneralIOP__30__IO__set', quals=[], storage=['static'] (at pp.c:26443)
      FuncDecl: quals=None (at pp.c:26443)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__30__IO__set', quals=[] (at pp.c:26443)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26445)
      Compound:  (at pp.c:26447)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26447)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26447)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26447)
        Assignment: op='|=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:26449)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:26449)
          BinaryOp: op='<<' (at pp.c:26449)
            Constant: type='int', value='0x01' (at pp.c:26449)
            Constant: type='int', value='6' (at pp.c:26449)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26451)
          ExprList:  (at pp.c:26451)
            ID: name='__nesc_atomic' (at pp.c:26451)
  FuncDef:  (at pp.c:26455)
    Decl: name='sig_TIMERB1_VECTOR', quals=[], storage=[] (at pp.c:26455)
      FuncDecl: quals=None (at pp.c:26455)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_TIMERB1_VECTOR', quals=[] (at pp.c:26455)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26457)
      FuncCall:  (at None)
        ID: name='Msp430TimerCommonP__VectorTimerB1__fired' (at pp.c:26459)
  FuncDef:  (at pp.c:26463)
    Decl: name='main', quals=[], storage=[] (at pp.c:26463)
      FuncDecl: quals=None (at pp.c:26463)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='main', quals=[] (at pp.c:26463)
          IdentifierType: names=['int'] (at None)
    Compound:  (at pp.c:26465)
      Compound:  (at pp.c:26466)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26466)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26466)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26466)
        Compound:  (at pp.c:26467)
          Compound:  (at pp.c:26473)
          FuncCall:  (at None)
            ID: name='RealMainP__Scheduler__init' (at pp.c:26478)
          FuncCall:  (at None)
            ID: name='RealMainP__PlatformInit__init' (at pp.c:26484)
          While:  (at pp.c:26485)
            FuncCall:  (at None)
              ID: name='RealMainP__Scheduler__runNextTask' (at pp.c:26485)
          FuncCall:  (at None)
            ID: name='RealMainP__SoftwareInit__init' (at pp.c:26491)
          While:  (at pp.c:26492)
            FuncCall:  (at None)
              ID: name='RealMainP__Scheduler__runNextTask' (at pp.c:26492)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26495)
          ExprList:  (at pp.c:26495)
            ID: name='__nesc_atomic' (at pp.c:26495)
      FuncCall:  (at None)
        ID: name='__nesc_enable_interrupt' (at pp.c:26498)
      FuncCall:  (at None)
        ID: name='RealMainP__Boot__booted' (at pp.c:26500)
      FuncCall:  (at None)
        ID: name='RealMainP__Scheduler__taskLoop' (at pp.c:26503)
      Return:  (at pp.c:26508)
        UnaryOp: op='-' (at pp.c:26508)
          Constant: type='int', value='1' (at pp.c:26508)
  FuncDef:  (at pp.c:26512)
    Decl: name='Msp430ClockP__set_dco_calib', quals=[], storage=['static'] (at pp.c:26512)
      FuncDecl: quals=None (at pp.c:26512)
        ParamList:  (at pp.c:26512)
          Decl: name='calib', quals=[], storage=[] (at pp.c:26512)
            TypeDecl: declname='calib', quals=[] (at pp.c:26512)
              IdentifierType: names=['int'] (at None)
        TypeDecl: declname='Msp430ClockP__set_dco_calib', quals=[] (at pp.c:26512)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26513)
      Assignment: op='=' (at pp.c:26514)
        ID: name='BCSCTL1' (at pp.c:26514)
        BinaryOp: op='|' (at pp.c:26514)
          BinaryOp: op='&' (at pp.c:26514)
            ID: name='BCSCTL1' (at pp.c:26514)
            UnaryOp: op='~' (at pp.c:26514)
              Constant: type='int', value='0x07' (at pp.c:26514)
          BinaryOp: op='&' (at pp.c:26514)
            BinaryOp: op='>>' (at pp.c:26514)
              ID: name='calib' (at pp.c:26514)
              Constant: type='int', value='8' (at pp.c:26514)
            Constant: type='int', value='0x07' (at pp.c:26514)
      Assignment: op='=' (at pp.c:26515)
        ID: name='DCOCTL' (at pp.c:26515)
        BinaryOp: op='&' (at pp.c:26515)
          ID: name='calib' (at pp.c:26515)
          Constant: type='int', value='0xff' (at pp.c:26515)
  FuncDef:  (at pp.c:26519)
    Decl: name='MotePlatformC__TOSH_FLASH_M25P_DP_bit', quals=[], storage=['static'] (at pp.c:26519)
      FuncDecl: quals=None (at pp.c:26519)
        ParamList:  (at pp.c:26519)
          Decl: name='set', quals=[], storage=[] (at pp.c:26519)
            TypeDecl: declname='set', quals=[] (at pp.c:26519)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='MotePlatformC__TOSH_FLASH_M25P_DP_bit', quals=[] (at pp.c:26519)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26521)
      If:  (at pp.c:26522)
        ID: name='set' (at pp.c:26522)
        Compound:  (at pp.c:26522)
          FuncCall:  (at None)
            ID: name='TOSH_SET_SIMO0_PIN' (at pp.c:26523)
        Compound:  (at pp.c:26525)
          FuncCall:  (at None)
            ID: name='TOSH_CLR_SIMO0_PIN' (at pp.c:26527)
      FuncCall:  (at None)
        ID: name='TOSH_SET_UCLK0_PIN' (at pp.c:26530)
      FuncCall:  (at None)
        ID: name='TOSH_CLR_UCLK0_PIN' (at pp.c:26531)
  FuncDef:  (at pp.c:26535)
    Decl: name='HplMsp430GeneralIOP__38__IO__set', quals=[], storage=['static'] (at pp.c:26535)
      FuncDecl: quals=None (at pp.c:26535)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__38__IO__set', quals=[] (at pp.c:26535)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26537)
      Compound:  (at pp.c:26539)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26539)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26539)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26539)
        Assignment: op='|=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:26541)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='49U' (at pp.c:26541)
          BinaryOp: op='<<' (at pp.c:26541)
            Constant: type='int', value='0x01' (at pp.c:26541)
            Constant: type='int', value='6' (at pp.c:26541)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26543)
          ExprList:  (at pp.c:26543)
            ID: name='__nesc_atomic' (at pp.c:26543)
  FuncDef:  (at pp.c:26547)
    Decl: name='SchedulerBasicP__Scheduler__runNextTask', quals=[], storage=['static'] (at pp.c:26547)
      FuncDecl: quals=None (at pp.c:26547)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SchedulerBasicP__Scheduler__runNextTask', quals=[] (at pp.c:26547)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:26548)
      Decl: name='nextTask', quals=[], storage=[] (at pp.c:26549)
        TypeDecl: declname='nextTask', quals=[] (at pp.c:26549)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:26553)
        Assignment: op='=' (at pp.c:26554)
          ID: name='nextTask' (at pp.c:26554)
          FuncCall:  (at None)
            ID: name='SchedulerBasicP__popTask' (at pp.c:26554)
        If:  (at pp.c:26555)
          BinaryOp: op='==' (at pp.c:26555)
            ID: name='nextTask' (at pp.c:26555)
            ID: name='SchedulerBasicP__NO_TASK' (at pp.c:26555)
          Compound:  (at pp.c:26556)
            Compound:  (at pp.c:26557)
              Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26558)
                TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26558)
                  IdentifierType: names=['char', 'unsigned'] (at None)
                ID: name='FALSE' (at pp.c:26560)
              Return:  (at pp.c:26563)
                ID: name='__nesc_temp' (at pp.c:26563)
      FuncCall:  (at None)
        ID: name='SchedulerBasicP__TaskBasic__runTask' (at pp.c:26568)
        ExprList:  (at pp.c:26568)
          ID: name='nextTask' (at pp.c:26568)
      Return:  (at pp.c:26569)
        ID: name='TRUE' (at pp.c:26569)
  FuncDef:  (at pp.c:26573)
    Decl: name='SchedulerBasicP__TaskBasic__default__runTask', quals=[], storage=['static'] (at pp.c:26573)
      FuncDecl: quals=None (at pp.c:26573)
        ParamList:  (at pp.c:26573)
          Decl: name='id', quals=[], storage=[] (at pp.c:26573)
            TypeDecl: declname='id', quals=[] (at pp.c:26573)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SchedulerBasicP__TaskBasic__default__runTask', quals=[] (at pp.c:26573)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26574)
  FuncDef:  (at pp.c:26578)
    Decl: name='SchedulerBasicP__TaskBasic__runTask', quals=[], storage=['static'] (at pp.c:26578)
      FuncDecl: quals=None (at pp.c:26578)
        ParamList:  (at pp.c:26578)
          Decl: name='arg_0x101487d50', quals=[], storage=[] (at pp.c:26578)
            TypeDecl: declname='arg_0x101487d50', quals=[] (at pp.c:26578)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='SchedulerBasicP__TaskBasic__runTask', quals=[] (at pp.c:26578)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26578)
      Switch:  (at pp.c:26580)
        ID: name='arg_0x101487d50' (at pp.c:26580)
        Compound:  (at pp.c:26580)
          Case:  (at pp.c:26582)
            ID: name='PeriodicSampleLoggerP__0__eraseTask' (at pp.c:26582)
            FuncCall:  (at None)
              ID: name='PeriodicSampleLoggerP__0__eraseTask__runTask' (at pp.c:26584)
          Break:  (at pp.c:26586)
          Case:  (at pp.c:26588)
            ID: name='PeriodicSampleLoggerP__0__appendTask' (at pp.c:26588)
            FuncCall:  (at None)
              ID: name='PeriodicSampleLoggerP__0__appendTask__runTask' (at pp.c:26590)
          Break:  (at pp.c:26592)
          Case:  (at pp.c:26594)
            ID: name='AlarmToTimerC__0__fired' (at pp.c:26594)
            FuncCall:  (at None)
              ID: name='AlarmToTimerC__0__fired__runTask' (at pp.c:26596)
          Break:  (at pp.c:26598)
          Case:  (at pp.c:26600)
            ID: name='VirtualizeTimerC__0__updateFromTimer' (at pp.c:26600)
            FuncCall:  (at None)
              ID: name='VirtualizeTimerC__0__updateFromTimer__runTask' (at pp.c:26602)
          Break:  (at pp.c:26604)
          Case:  (at pp.c:26606)
            ID: name='SineSensorC__0__readTask' (at pp.c:26606)
            FuncCall:  (at None)
              ID: name='SineSensorC__0__readTask__runTask' (at pp.c:26608)
          Break:  (at pp.c:26610)
          Case:  (at pp.c:26612)
            ID: name='Stm25pSectorP__signalDone_task' (at pp.c:26612)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__signalDone_task__runTask' (at pp.c:26614)
          Break:  (at pp.c:26616)
          Case:  (at pp.c:26618)
            ID: name='ArbiterP__0__grantedTask' (at pp.c:26618)
            FuncCall:  (at None)
              ID: name='ArbiterP__0__grantedTask__runTask' (at pp.c:26620)
          Break:  (at pp.c:26622)
          Case:  (at pp.c:26624)
            ID: name='DeferredPowerManagerP__0__startTask' (at pp.c:26624)
            FuncCall:  (at None)
              ID: name='DeferredPowerManagerP__0__startTask__runTask' (at pp.c:26626)
          Break:  (at pp.c:26628)
          Case:  (at pp.c:26630)
            ID: name='DeferredPowerManagerP__0__timerTask' (at pp.c:26630)
            FuncCall:  (at None)
              ID: name='DeferredPowerManagerP__0__timerTask__runTask' (at pp.c:26632)
          Break:  (at pp.c:26634)
          Case:  (at pp.c:26636)
            ID: name='Msp430SpiNoDmaP__0__signalDone_task' (at pp.c:26636)
            FuncCall:  (at None)
              ID: name='Msp430SpiNoDmaP__0__signalDone_task__runTask' (at pp.c:26638)
          Break:  (at pp.c:26640)
          Case:  (at pp.c:26642)
            ID: name='ArbiterP__1__grantedTask' (at pp.c:26642)
            FuncCall:  (at None)
              ID: name='ArbiterP__1__grantedTask__runTask' (at pp.c:26644)
          Break:  (at pp.c:26646)
          Case:  (at pp.c:26648)
            ID: name='LowPowerSensingPeriodicSamplerC__readNextTask' (at pp.c:26648)
            FuncCall:  (at None)
              ID: name='LowPowerSensingPeriodicSamplerC__readNextTask__runTask' (at pp.c:26650)
          Break:  (at pp.c:26652)
          Case:  (at pp.c:26654)
            ID: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask' (at pp.c:26654)
            FuncCall:  (at None)
              ID: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__runTask' (at pp.c:26656)
          Break:  (at pp.c:26658)
          Case:  (at pp.c:26660)
            ID: name='CC2420CsmaP__startDone_task' (at pp.c:26660)
            FuncCall:  (at None)
              ID: name='CC2420CsmaP__startDone_task__runTask' (at pp.c:26662)
          Break:  (at pp.c:26664)
          Case:  (at pp.c:26666)
            ID: name='CC2420CsmaP__stopDone_task' (at pp.c:26666)
            FuncCall:  (at None)
              ID: name='CC2420CsmaP__stopDone_task__runTask' (at pp.c:26668)
          Break:  (at pp.c:26670)
          Case:  (at pp.c:26672)
            ID: name='CC2420CsmaP__sendDone_task' (at pp.c:26672)
            FuncCall:  (at None)
              ID: name='CC2420CsmaP__sendDone_task__runTask' (at pp.c:26674)
          Break:  (at pp.c:26676)
          Case:  (at pp.c:26678)
            ID: name='CC2420ControlP__sync' (at pp.c:26678)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__sync__runTask' (at pp.c:26680)
          Break:  (at pp.c:26682)
          Case:  (at pp.c:26684)
            ID: name='CC2420ControlP__syncDone' (at pp.c:26684)
            FuncCall:  (at None)
              ID: name='CC2420ControlP__syncDone__runTask' (at pp.c:26686)
          Break:  (at pp.c:26688)
          Case:  (at pp.c:26690)
            ID: name='CC2420SpiP__grant' (at pp.c:26690)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__grant__runTask' (at pp.c:26692)
          Break:  (at pp.c:26694)
          Case:  (at pp.c:26696)
            ID: name='CC2420ReceiveP__receiveDone_task' (at pp.c:26696)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__receiveDone_task__runTask' (at pp.c:26698)
          Break:  (at pp.c:26700)
          Case:  (at pp.c:26702)
            ID: name='CC2420TinyosNetworkP__grantTask' (at pp.c:26702)
            FuncCall:  (at None)
              ID: name='CC2420TinyosNetworkP__grantTask__runTask' (at pp.c:26704)
          Break:  (at pp.c:26706)
          Case:  (at pp.c:26708)
            ID: name='DefaultLplP__send' (at pp.c:26708)
            FuncCall:  (at None)
              ID: name='DefaultLplP__send__runTask' (at pp.c:26710)
          Break:  (at pp.c:26712)
          Case:  (at pp.c:26714)
            ID: name='DefaultLplP__resend' (at pp.c:26714)
            FuncCall:  (at None)
              ID: name='DefaultLplP__resend__runTask' (at pp.c:26716)
          Break:  (at pp.c:26718)
          Case:  (at pp.c:26720)
            ID: name='DefaultLplP__startRadio' (at pp.c:26720)
            FuncCall:  (at None)
              ID: name='DefaultLplP__startRadio__runTask' (at pp.c:26722)
          Break:  (at pp.c:26724)
          Case:  (at pp.c:26726)
            ID: name='DefaultLplP__stopRadio' (at pp.c:26726)
            FuncCall:  (at None)
              ID: name='DefaultLplP__stopRadio__runTask' (at pp.c:26728)
          Break:  (at pp.c:26730)
          Case:  (at pp.c:26732)
            ID: name='PowerCycleP__stopRadio' (at pp.c:26732)
            FuncCall:  (at None)
              ID: name='PowerCycleP__stopRadio__runTask' (at pp.c:26734)
          Break:  (at pp.c:26736)
          Case:  (at pp.c:26738)
            ID: name='PowerCycleP__startRadio' (at pp.c:26738)
            FuncCall:  (at None)
              ID: name='PowerCycleP__startRadio__runTask' (at pp.c:26740)
          Break:  (at pp.c:26742)
          Case:  (at pp.c:26744)
            ID: name='PowerCycleP__getCca' (at pp.c:26744)
            FuncCall:  (at None)
              ID: name='PowerCycleP__getCca__runTask' (at pp.c:26746)
          Break:  (at pp.c:26748)
          Case:  (at pp.c:26750)
            ID: name='AMQueueImplP__0__CancelTask' (at pp.c:26750)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__CancelTask__runTask' (at pp.c:26752)
          Break:  (at pp.c:26754)
          Case:  (at pp.c:26756)
            ID: name='AMQueueImplP__0__errorTask' (at pp.c:26756)
            FuncCall:  (at None)
              ID: name='AMQueueImplP__0__errorTask__runTask' (at pp.c:26758)
          Break:  (at pp.c:26760)
          Default:  (at pp.c:26762)
            FuncCall:  (at None)
              ID: name='SchedulerBasicP__TaskBasic__default__runTask' (at pp.c:26764)
              ExprList:  (at pp.c:26764)
                ID: name='arg_0x101487d50' (at pp.c:26764)
          Break:  (at pp.c:26766)
  FuncDef:  (at pp.c:26773)
    Decl: name='LowPowerSensingPeriodicSamplerC__readNext', quals=[], storage=['static'] (at pp.c:26773)
      FuncDecl: quals=None (at pp.c:26773)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__readNext', quals=[] (at pp.c:26773)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26775)
      Decl: name='error', quals=[], storage=[] (at pp.c:26776)
        TypeDecl: declname='error', quals=[] (at pp.c:26776)
          IdentifierType: names=['error_t'] (at None)
        FuncCall:  (at None)
          ID: name='LowPowerSensingPeriodicSamplerC__SampleLogRead__readNext' (at pp.c:26776)
      If:  (at pp.c:26779)
        BinaryOp: op='==' (at pp.c:26779)
          ID: name='error' (at pp.c:26779)
          ID: name='FAIL' (at pp.c:26779)
        Compound:  (at pp.c:26779)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__readNextTask__postTask' (at pp.c:26780)
        Compound:  (at pp.c:26782)
          If:  (at pp.c:26784)
            BinaryOp: op='==' (at pp.c:26784)
              ID: name='error' (at pp.c:26784)
              ID: name='ECANCEL' (at pp.c:26784)
            Compound:  (at pp.c:26784)
              Assignment: op='=' (at pp.c:26785)
                ID: name='LowPowerSensingPeriodicSamplerC__sendBusy' (at pp.c:26785)
                ID: name='FALSE' (at pp.c:26785)
              FuncCall:  (at None)
                ID: name='LowPowerSensingPeriodicSamplerC__Leds__led1Toggle' (at pp.c:26786)
  FuncDef:  (at pp.c:26792)
    Decl: name='SampleLogReaderP__0__SampleLogRead__readNext', quals=[], storage=['static'] (at pp.c:26792)
      FuncDecl: quals=None (at pp.c:26792)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='SampleLogReaderP__0__SampleLogRead__readNext', quals=[] (at pp.c:26792)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26794)
      Compound:  (at pp.c:26795)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26795)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26795)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26795)
        Assignment: op='=' (at pp.c:26797)
          ID: name='SampleLogReaderP__0__writeLocation' (at pp.c:26797)
          FuncCall:  (at None)
            ID: name='SampleLogReaderP__0__LogWrite__currentOffset' (at pp.c:26797)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26799)
          ExprList:  (at pp.c:26799)
            ID: name='__nesc_atomic' (at pp.c:26799)
      If:  (at pp.c:26800)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='SampleLogReaderP__0__LogRead__currentOffset' (at pp.c:26800)
          ID: name='SampleLogReaderP__0__writeLocation' (at pp.c:26800)
        Compound:  (at pp.c:26800)
          Return:  (at pp.c:26801)
            ID: name='ECANCEL' (at pp.c:26801)
        Compound:  (at pp.c:26803)
          Return:  (at pp.c:26805)
            FuncCall:  (at None)
              ID: name='SampleLogReaderP__0__LogRead__read' (at pp.c:26805)
              ExprList:  (at pp.c:26805)
                UnaryOp: op='&' (at pp.c:26805)
                  ID: name='SampleLogReaderP__0__sample' (at pp.c:26805)
                UnaryOp: op='sizeof' (at pp.c:26805)
                  ID: name='SampleLogReaderP__0__sample' (at pp.c:26805)
  FuncDef:  (at pp.c:26810)
    Decl: name='Stm25pLogP__newRequest', quals=[], storage=['static'] (at pp.c:26810)
      FuncDecl: quals=None (at pp.c:26810)
        ParamList:  (at pp.c:26810)
          Decl: name='client', quals=[], storage=[] (at pp.c:26810)
            TypeDecl: declname='client', quals=[] (at pp.c:26810)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__newRequest', quals=[] (at pp.c:26810)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26812)
      If:  (at pp.c:26814)
        BinaryOp: op='!=' (at pp.c:26814)
          StructRef: type='.' (at pp.c:26814)
            ArrayRef:  (at pp.c:26814)
              ID: name='Stm25pLogP__m_log_state' (at pp.c:26814)
              ID: name='client' (at pp.c:26814)
            ID: name='req' (at pp.c:26814)
          ID: name='Stm25pLogP__S_IDLE' (at pp.c:26814)
        Compound:  (at pp.c:26814)
          Return:  (at pp.c:26815)
            ID: name='FAIL' (at pp.c:26815)
      FuncCall:  (at None)
        ID: name='Stm25pLogP__ClientResource__request' (at pp.c:26817)
        ExprList:  (at pp.c:26817)
          ID: name='client' (at pp.c:26817)
      Assignment: op='=' (at pp.c:26818)
        ArrayRef:  (at pp.c:26818)
          ID: name='Stm25pLogP__m_log_state' (at pp.c:26818)
          ID: name='client' (at pp.c:26818)
        ID: name='Stm25pLogP__m_req' (at pp.c:26818)
      Return:  (at pp.c:26820)
        ID: name='SUCCESS' (at pp.c:26820)
  FuncDef:  (at pp.c:26824)
    Decl: name='AMQueueImplP__0__sendDone', quals=[], storage=['static'] (at pp.c:26824)
      FuncDecl: quals=None (at pp.c:26824)
        ParamList:  (at pp.c:26824)
          Decl: name='last', quals=[], storage=[] (at pp.c:26824)
            TypeDecl: declname='last', quals=[] (at pp.c:26824)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:26824)
            PtrDecl: quals=[] (at pp.c:26824)
              TypeDecl: declname='msg', quals=[] (at pp.c:26824)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:26824)
            TypeDecl: declname='err', quals=[] (at pp.c:26824)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__sendDone', quals=[] (at pp.c:26824)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26826)
      Assignment: op='=' (at pp.c:26827)
        StructRef: type='.' (at pp.c:26827)
          ArrayRef:  (at pp.c:26827)
            ID: name='AMQueueImplP__0__queue' (at pp.c:26827)
            ID: name='last' (at pp.c:26827)
          ID: name='msg' (at pp.c:26827)
        Cast:  (at None)
          Typename: quals=[] (at None)
            PtrDecl: quals=[] (at pp.c:26827)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['void'] (at None)
          Constant: type='int', value='0' (at pp.c:26827)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__tryToSend' (at pp.c:26828)
      FuncCall:  (at None)
        ID: name='AMQueueImplP__0__Send__sendDone' (at pp.c:26829)
        ExprList:  (at pp.c:26829)
          ID: name='last' (at pp.c:26829)
          ID: name='msg' (at pp.c:26829)
          ID: name='err' (at pp.c:26829)
  FuncDef:  (at pp.c:26833)
    Decl: name='CC2420ActiveMessageP__AMPacket__destination', quals=[], storage=['static'] (at pp.c:26833)
      FuncDecl: quals=None (at pp.c:26833)
        ParamList:  (at pp.c:26833)
          Decl: name='amsg', quals=[], storage=[] (at pp.c:26833)
            PtrDecl: quals=[] (at pp.c:26833)
              TypeDecl: declname='amsg', quals=[] (at pp.c:26833)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMPacket__destination', quals=[] (at pp.c:26833)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:26835)
      Decl: name='header', quals=[], storage=[] (at pp.c:26836)
        PtrDecl: quals=[] (at pp.c:26836)
          TypeDecl: declname='header', quals=[] (at pp.c:26836)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:26836)
          ExprList:  (at pp.c:26836)
            ID: name='amsg' (at pp.c:26836)
      Return:  (at pp.c:26839)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_leuint16' (at pp.c:26839)
          ExprList:  (at pp.c:26839)
            StructRef: type='.' (at pp.c:26839)
              StructRef: type='->' (at pp.c:26839)
                ID: name='header' (at pp.c:26839)
                ID: name='dest' (at pp.c:26839)
              ID: name='nxdata' (at pp.c:26839)
  FuncDef:  (at pp.c:26843)
    Decl: name='CC2420ActiveMessageP__AMSend__send', quals=[], storage=['static'] (at pp.c:26843)
      FuncDecl: quals=None (at pp.c:26843)
        ParamList:  (at pp.c:26843)
          Decl: name='id', quals=[], storage=[] (at pp.c:26843)
            TypeDecl: declname='id', quals=[] (at pp.c:26843)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:26843)
            TypeDecl: declname='addr', quals=[] (at pp.c:26843)
              IdentifierType: names=['am_addr_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:26844)
            PtrDecl: quals=[] (at pp.c:26844)
              TypeDecl: declname='msg', quals=[] (at pp.c:26844)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:26845)
            TypeDecl: declname='len', quals=[] (at pp.c:26845)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__AMSend__send', quals=[] (at pp.c:26843)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26847)
      Decl: name='__nesc_temp48', quals=[], storage=[] (at pp.c:26848)
        PtrDecl: quals=[] (at pp.c:26848)
          TypeDecl: declname='__nesc_temp48', quals=[] (at pp.c:26848)
            IdentifierType: names=['char', 'unsigned'] (at None)
      Decl: name='header', quals=[], storage=[] (at pp.c:26850)
        PtrDecl: quals=[] (at pp.c:26850)
          TypeDecl: declname='header', quals=[] (at pp.c:26850)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:26850)
          ExprList:  (at pp.c:26850)
            ID: name='msg' (at pp.c:26850)
      If:  (at pp.c:26852)
        BinaryOp: op='>' (at pp.c:26852)
          ID: name='len' (at pp.c:26852)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__Packet__maxPayloadLength' (at pp.c:26852)
        Compound:  (at pp.c:26852)
          Return:  (at pp.c:26853)
            ID: name='ESIZE' (at pp.c:26853)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint8' (at pp.c:26856)
        ExprList:  (at pp.c:26856)
          StructRef: type='.' (at pp.c:26856)
            StructRef: type='->' (at pp.c:26856)
              ID: name='header' (at pp.c:26856)
              ID: name='type' (at pp.c:26856)
            ID: name='nxdata' (at pp.c:26856)
          ID: name='id' (at pp.c:26856)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint16' (at pp.c:26857)
        ExprList:  (at pp.c:26857)
          StructRef: type='.' (at pp.c:26857)
            StructRef: type='->' (at pp.c:26857)
              ID: name='header' (at pp.c:26857)
              ID: name='dest' (at pp.c:26857)
            ID: name='nxdata' (at pp.c:26857)
          ID: name='addr' (at pp.c:26857)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint16' (at pp.c:26858)
        ExprList:  (at pp.c:26858)
          StructRef: type='.' (at pp.c:26858)
            StructRef: type='->' (at pp.c:26858)
              ID: name='header' (at pp.c:26858)
              ID: name='destpan' (at pp.c:26858)
            ID: name='nxdata' (at pp.c:26858)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__CC2420Config__getPanAddr' (at pp.c:26858)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint16' (at pp.c:26859)
        ExprList:  (at pp.c:26859)
          StructRef: type='.' (at pp.c:26859)
            StructRef: type='->' (at pp.c:26859)
              ID: name='header' (at pp.c:26859)
              ID: name='src' (at pp.c:26859)
            ID: name='nxdata' (at pp.c:26859)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__AMPacket__address' (at pp.c:26859)
      ExprList:  (at pp.c:26860)
        Assignment: op='=' (at pp.c:26860)
          ID: name='__nesc_temp48' (at pp.c:26860)
          StructRef: type='.' (at pp.c:26860)
            StructRef: type='->' (at pp.c:26860)
              ID: name='header' (at pp.c:26860)
              ID: name='fcf' (at pp.c:26860)
            ID: name='nxdata' (at pp.c:26860)
        FuncCall:  (at None)
          ID: name='__nesc_hton_leuint16' (at pp.c:26860)
          ExprList:  (at pp.c:26860)
            ID: name='__nesc_temp48' (at pp.c:26860)
            BinaryOp: op='|' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:26860)
                ExprList:  (at pp.c:26860)
                  ID: name='__nesc_temp48' (at pp.c:26860)
              BinaryOp: op='|' (at pp.c:26860)
                BinaryOp: op='|' (at pp.c:26860)
                  BinaryOp: op='<<' (at pp.c:26860)
                    Constant: type='int', value='1' (at pp.c:26860)
                    ID: name='IEEE154_FCF_INTRAPAN' (at pp.c:26860)
                  BinaryOp: op='<<' (at pp.c:26861)
                    ID: name='IEEE154_ADDR_SHORT' (at pp.c:26861)
                    ID: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:26861)
                BinaryOp: op='<<' (at pp.c:26862)
                  ID: name='IEEE154_ADDR_SHORT' (at pp.c:26862)
                  ID: name='IEEE154_FCF_SRC_ADDR_MODE' (at pp.c:26862)
      FuncCall:  (at None)
        ID: name='__nesc_hton_leuint8' (at pp.c:26863)
        ExprList:  (at pp.c:26863)
          StructRef: type='.' (at pp.c:26863)
            StructRef: type='->' (at pp.c:26863)
              ID: name='header' (at pp.c:26863)
              ID: name='length' (at pp.c:26863)
            ID: name='nxdata' (at pp.c:26863)
          BinaryOp: op='+' (at pp.c:26863)
            ID: name='len' (at pp.c:26863)
            ID: name='CC2420_SIZE' (at pp.c:26863)
      If:  (at pp.c:26865)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__RadioResource__immediateRequest' (at pp.c:26865)
          ID: name='SUCCESS' (at pp.c:26865)
        Compound:  (at pp.c:26865)
          Decl: name='rc', quals=[], storage=[] (at pp.c:26866)
            TypeDecl: declname='rc', quals=[] (at pp.c:26866)
              IdentifierType: names=['error_t'] (at None)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__SendNotifier__aboutToSend' (at pp.c:26869)
            ExprList:  (at pp.c:26869)
              ID: name='id' (at pp.c:26869)
              ID: name='addr' (at pp.c:26869)
              ID: name='msg' (at pp.c:26869)
          Assignment: op='=' (at pp.c:26871)
            ID: name='rc' (at pp.c:26871)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__SubSend__send' (at pp.c:26871)
              ExprList:  (at pp.c:26871)
                ID: name='msg' (at pp.c:26871)
                ID: name='len' (at pp.c:26871)
          If:  (at pp.c:26872)
            BinaryOp: op='!=' (at pp.c:26872)
              ID: name='rc' (at pp.c:26872)
              ID: name='SUCCESS' (at pp.c:26872)
            Compound:  (at pp.c:26872)
              FuncCall:  (at None)
                ID: name='CC2420ActiveMessageP__RadioResource__release' (at pp.c:26873)
          Return:  (at pp.c:26876)
            ID: name='rc' (at pp.c:26876)
        Compound:  (at pp.c:26880)
          Assignment: op='=' (at pp.c:26881)
            ID: name='CC2420ActiveMessageP__pending_length' (at pp.c:26881)
            ID: name='len' (at pp.c:26881)
          Assignment: op='=' (at pp.c:26882)
            ID: name='CC2420ActiveMessageP__pending_message' (at pp.c:26882)
            ID: name='msg' (at pp.c:26882)
          Return:  (at pp.c:26883)
            FuncCall:  (at None)
              ID: name='CC2420ActiveMessageP__RadioResource__request' (at pp.c:26883)
  FuncDef:  (at pp.c:26888)
    Decl: name='ActiveMessageAddressC__amAddress', quals=[], storage=['static'] (at pp.c:26888)
      FuncDecl: quals=None (at pp.c:26888)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ActiveMessageAddressC__amAddress', quals=[] (at pp.c:26888)
          IdentifierType: names=['am_addr_t'] (at None)
    Compound:  (at pp.c:26890)
      Decl: name='myAddr', quals=[], storage=[] (at pp.c:26891)
        TypeDecl: declname='myAddr', quals=[] (at pp.c:26891)
          IdentifierType: names=['am_addr_t'] (at None)
      Compound:  (at pp.c:26894)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26894)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26894)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26894)
        Assignment: op='=' (at pp.c:26896)
          ID: name='myAddr' (at pp.c:26896)
          ID: name='ActiveMessageAddressC__addr' (at pp.c:26896)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26898)
          ExprList:  (at pp.c:26898)
            ID: name='__nesc_atomic' (at pp.c:26898)
      Return:  (at pp.c:26899)
        ID: name='myAddr' (at pp.c:26899)
  FuncDef:  (at pp.c:26903)
    Decl: name='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[], storage=['static'] (at pp.c:26903)
      FuncDecl: quals=None (at pp.c:26903)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='FcfsResourceQueueC__0__FcfsQueue__isEmpty', quals=[] (at pp.c:26903)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:26905)
      Compound:  (at pp.c:26906)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26906)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26906)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26906)
        Compound:  (at pp.c:26908)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:26909)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:26909)
              IdentifierType: names=['char', 'unsigned'] (at None)
            BinaryOp: op='==' (at pp.c:26911)
              ID: name='FcfsResourceQueueC__0__qHead' (at pp.c:26911)
              ID: name='FcfsResourceQueueC__0__NO_ENTRY' (at pp.c:26911)
          Compound:  (at pp.c:26913)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:26915)
              ExprList:  (at pp.c:26915)
                ID: name='__nesc_atomic' (at pp.c:26915)
            Return:  (at pp.c:26917)
              ID: name='__nesc_temp' (at pp.c:26917)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26921)
          ExprList:  (at pp.c:26921)
            ID: name='__nesc_atomic' (at pp.c:26921)
  FuncDef:  (at pp.c:26925)
    Decl: name='CC2420TinyosNetworkP__ActiveSend__send', quals=[], storage=['static'] (at pp.c:26925)
      FuncDecl: quals=None (at pp.c:26925)
        ParamList:  (at pp.c:26925)
          Decl: name='msg', quals=[], storage=[] (at pp.c:26925)
            PtrDecl: quals=[] (at pp.c:26925)
              TypeDecl: declname='msg', quals=[] (at pp.c:26925)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:26925)
            TypeDecl: declname='len', quals=[] (at pp.c:26925)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420TinyosNetworkP__ActiveSend__send', quals=[] (at pp.c:26925)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:26927)
      FuncCall:  (at None)
        ID: name='CC2420TinyosNetworkP__CC2420Packet__setNetwork' (at pp.c:26928)
        ExprList:  (at pp.c:26928)
          ID: name='msg' (at pp.c:26928)
          Constant: type='int', value='0x3f' (at pp.c:26928)
      Assignment: op='=' (at pp.c:26929)
        ID: name='CC2420TinyosNetworkP__m_busy_client' (at pp.c:26929)
        ID: name='CC2420TinyosNetworkP__CLIENT_AM' (at pp.c:26929)
      Return:  (at pp.c:26930)
        FuncCall:  (at None)
          ID: name='CC2420TinyosNetworkP__SubSend__send' (at pp.c:26930)
          ExprList:  (at pp.c:26930)
            ID: name='msg' (at pp.c:26930)
            ID: name='len' (at pp.c:26930)
  FuncDef:  (at pp.c:26934)
    Decl: name='CC2420PacketP__getNetwork', quals=[], storage=['static'] (at pp.c:26934)
      FuncDecl: quals=None (at pp.c:26934)
        ParamList:  (at pp.c:26934)
          Decl: name='msg', quals=[], storage=[] (at pp.c:26934)
            PtrDecl: quals=[] (at pp.c:26934)
              TypeDecl: declname='msg', quals=[] (at pp.c:26934)
                IdentifierType: names=['message_t'] (at None)
        PtrDecl: quals=[] (at pp.c:26934)
          TypeDecl: declname='CC2420PacketP__getNetwork', quals=[] (at pp.c:26934)
            IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:26936)
      Decl: name='hdr', quals=[], storage=[] (at pp.c:26937)
        PtrDecl: quals=[] (at pp.c:26937)
          TypeDecl: declname='hdr', quals=[] (at pp.c:26937)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420PacketP__CC2420PacketBody__getHeader' (at pp.c:26937)
          ExprList:  (at pp.c:26937)
            ID: name='msg' (at pp.c:26937)
      Decl: name='offset', quals=[], storage=[] (at pp.c:26938)
        TypeDecl: declname='offset', quals=[] (at pp.c:26938)
          IdentifierType: names=['int'] (at None)
      Assignment: op='=' (at pp.c:26940)
        ID: name='offset' (at pp.c:26940)
        BinaryOp: op='+' (at None)
          BinaryOp: op='+' (at None)
            FuncCall:  (at None)
              ID: name='CC2420PacketP__getAddressLength' (at pp.c:26940)
              ExprList:  (at None)
                BinaryOp: op='&' (at None)
                  BinaryOp: op='>>' (at None)
                    FuncCall:  (at None)
                      ID: name='__nesc_ntoh_leuint16' (at pp.c:26940)
                      ExprList:  (at pp.c:26940)
                        StructRef: type='.' (at pp.c:26940)
                          StructRef: type='->' (at pp.c:26940)
                            ID: name='hdr' (at pp.c:26940)
                            ID: name='fcf' (at pp.c:26940)
                          ID: name='nxdata' (at pp.c:26940)
                    ID: name='IEEE154_FCF_DEST_ADDR_MODE' (at pp.c:26940)
                  Constant: type='int', value='0x3' (at pp.c:26940)
            FuncCall:  (at None)
              ID: name='CC2420PacketP__getAddressLength' (at pp.c:26941)
              ExprList:  (at None)
                BinaryOp: op='&' (at None)
                  BinaryOp: op='>>' (at None)
                    FuncCall:  (at None)
                      ID: name='__nesc_ntoh_leuint16' (at pp.c:26941)
                      ExprList:  (at pp.c:26941)
                        StructRef: type='.' (at pp.c:26941)
                          StructRef: type='->' (at pp.c:26941)
                            ID: name='hdr' (at pp.c:26941)
                            ID: name='fcf' (at pp.c:26941)
                          ID: name='nxdata' (at pp.c:26941)
                    ID: name='IEEE154_FCF_SRC_ADDR_MODE' (at pp.c:26941)
                  Constant: type='int', value='0x3' (at pp.c:26941)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['size_t'] (at None)
            UnaryOp: op='&' (at None)
              StructRef: type='->' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    PtrDecl: quals=[] (at pp.c:26942)
                      TypeDecl: declname=None, quals=[] (at None)
                        IdentifierType: names=['cc2420_header_t'] (at None)
                  Constant: type='int', value='0' (at pp.c:26942)
                ID: name='dest' (at pp.c:26942)
      Return:  (at pp.c:26944)
        BinaryOp: op='+' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:26944)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            ID: name='hdr' (at pp.c:26944)
          ID: name='offset' (at pp.c:26944)
  FuncDef:  (at pp.c:26948)
    Decl: name='StateImplP__State__getState', quals=[], storage=['static'] (at pp.c:26948)
      FuncDecl: quals=None (at pp.c:26948)
        ParamList:  (at pp.c:26948)
          Decl: name='id', quals=[], storage=[] (at pp.c:26948)
            TypeDecl: declname='id', quals=[] (at pp.c:26948)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='StateImplP__State__getState', quals=[] (at pp.c:26948)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:26950)
      Decl: name='theState', quals=[], storage=[] (at pp.c:26951)
        TypeDecl: declname='theState', quals=[] (at pp.c:26951)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:26954)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:26954)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:26954)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:26954)
        Assignment: op='=' (at pp.c:26956)
          ID: name='theState' (at pp.c:26956)
          ArrayRef:  (at pp.c:26956)
            ID: name='StateImplP__state' (at pp.c:26956)
            ID: name='id' (at pp.c:26956)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:26958)
          ExprList:  (at pp.c:26958)
            ID: name='__nesc_atomic' (at pp.c:26958)
      Return:  (at pp.c:26959)
        ID: name='theState' (at pp.c:26959)
  FuncDef:  (at pp.c:26963)
    Decl: name='DefaultLplP__initializeSend', quals=[], storage=['static'] (at pp.c:26963)
      FuncDecl: quals=None (at pp.c:26963)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DefaultLplP__initializeSend', quals=[] (at pp.c:26963)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26965)
      If:  (at pp.c:26967)
        BinaryOp: op='>' (at None)
          FuncCall:  (at None)
            ID: name='DefaultLplP__LowPowerListening__getRemoteWakeupInterval' (at pp.c:26969)
            ExprList:  (at pp.c:26969)
              ID: name='DefaultLplP__currentSendMsg' (at pp.c:26969)
          ID: name='DefaultLplP__ONE_MESSAGE' (at pp.c:26970)
        Compound:  (at pp.c:26970)
          If:  (at pp.c:26972)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint16' (at pp.c:26972)
                ExprList:  (at None)
                  StructRef: type='.' (at None)
                    StructRef: type='->' (at None)
                      FuncCall:  (at None)
                        ID: name='DefaultLplP__CC2420PacketBody__getHeader' (at pp.c:26972)
                        ExprList:  (at pp.c:26972)
                          ID: name='DefaultLplP__currentSendMsg' (at pp.c:26972)
                      ID: name='dest' (at pp.c:26972)
                    ID: name='nxdata' (at pp.c:26972)
              ID: name='IEEE154_BROADCAST_ADDR' (at pp.c:26972)
            Compound:  (at pp.c:26972)
              FuncCall:  (at None)
                ID: name='DefaultLplP__PacketAcknowledgements__noAck' (at pp.c:26973)
                ExprList:  (at pp.c:26973)
                  ID: name='DefaultLplP__currentSendMsg' (at pp.c:26973)
            Compound:  (at pp.c:26977)
              FuncCall:  (at None)
                ID: name='DefaultLplP__PacketAcknowledgements__requestAck' (at pp.c:26979)
                ExprList:  (at pp.c:26979)
                  ID: name='DefaultLplP__currentSendMsg' (at pp.c:26979)
          FuncCall:  (at None)
            ID: name='DefaultLplP__SendDoneTimer__startOneShot' (at pp.c:26982)
            ExprList:  (at None)
              BinaryOp: op='+' (at None)
                FuncCall:  (at None)
                  ID: name='DefaultLplP__LowPowerListening__getRemoteWakeupInterval' (at pp.c:26983)
                  ExprList:  (at pp.c:26983)
                    ID: name='DefaultLplP__currentSendMsg' (at pp.c:26983)
                Constant: type='int', value='20' (at pp.c:26983)
      FuncCall:  (at None)
        ID: name='DefaultLplP__send__postTask' (at pp.c:26986)
  FuncDef:  (at pp.c:26990)
    Decl: name='VirtualizeTimerC__0__startTimer', quals=[], storage=['static'] (at pp.c:26990)
      FuncDecl: quals=None (at pp.c:26990)
        ParamList:  (at pp.c:26990)
          Decl: name='num', quals=[], storage=[] (at pp.c:26990)
            TypeDecl: declname='num', quals=[] (at pp.c:26990)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='t0', quals=[], storage=[] (at pp.c:26990)
            TypeDecl: declname='t0', quals=[] (at pp.c:26990)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:26990)
            TypeDecl: declname='dt', quals=[] (at pp.c:26990)
              IdentifierType: names=['uint32_t'] (at None)
          Decl: name='isoneshot', quals=[], storage=[] (at pp.c:26990)
            TypeDecl: declname='isoneshot', quals=[] (at pp.c:26990)
              IdentifierType: names=['bool'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__startTimer', quals=[] (at pp.c:26990)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:26991)
      Decl: name='timer', quals=[], storage=[] (at pp.c:26992)
        PtrDecl: quals=[] (at pp.c:26992)
          TypeDecl: declname='timer', quals=[] (at pp.c:26992)
            IdentifierType: names=['VirtualizeTimerC__0__Timer_t'] (at None)
        UnaryOp: op='&' (at pp.c:26992)
          ArrayRef:  (at pp.c:26992)
            ID: name='VirtualizeTimerC__0__m_timers' (at pp.c:26992)
            ID: name='num' (at pp.c:26992)
      Assignment: op='=' (at pp.c:26995)
        StructRef: type='->' (at pp.c:26995)
          ID: name='timer' (at pp.c:26995)
          ID: name='t0' (at pp.c:26995)
        ID: name='t0' (at pp.c:26995)
      Assignment: op='=' (at pp.c:26996)
        StructRef: type='->' (at pp.c:26996)
          ID: name='timer' (at pp.c:26996)
          ID: name='dt' (at pp.c:26996)
        ID: name='dt' (at pp.c:26996)
      Assignment: op='=' (at pp.c:26997)
        StructRef: type='->' (at pp.c:26997)
          ID: name='timer' (at pp.c:26997)
          ID: name='isoneshot' (at pp.c:26997)
        ID: name='isoneshot' (at pp.c:26997)
      Assignment: op='=' (at pp.c:26998)
        StructRef: type='->' (at pp.c:26998)
          ID: name='timer' (at pp.c:26998)
          ID: name='isrunning' (at pp.c:26998)
        ID: name='TRUE' (at pp.c:26998)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__updateFromTimer__postTask' (at pp.c:26999)
  FuncDef:  (at pp.c:27003)
    Decl: name='UniqueSendP__State__toIdle', quals=[], storage=['static'] (at pp.c:27003)
      FuncDecl: quals=None (at pp.c:27003)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='UniqueSendP__State__toIdle', quals=[] (at pp.c:27003)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27003)
      FuncCall:  (at None)
        ID: name='StateImplP__State__toIdle' (at pp.c:27005)
        ExprList:  (at pp.c:27005)
          Constant: type='int', value='2U' (at pp.c:27005)
  FuncDef:  (at pp.c:27010)
    Decl: name='DefaultLplP__OffTimer__startOneShot', quals=[], storage=['static'] (at pp.c:27010)
      FuncDecl: quals=None (at pp.c:27010)
        ParamList:  (at pp.c:27010)
          Decl: name='dt', quals=[], storage=[] (at pp.c:27010)
            TypeDecl: declname='dt', quals=[] (at pp.c:27010)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='DefaultLplP__OffTimer__startOneShot', quals=[] (at pp.c:27010)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27010)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__startOneShot' (at pp.c:27012)
        ExprList:  (at pp.c:27012)
          Constant: type='int', value='5U' (at pp.c:27012)
          ID: name='dt' (at pp.c:27012)
  FuncDef:  (at pp.c:27017)
    Decl: name='CC2420CsmaP__SplitControl__start', quals=[], storage=['static'] (at pp.c:27017)
      FuncDecl: quals=None (at pp.c:27017)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControl__start', quals=[] (at pp.c:27017)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27019)
      If:  (at pp.c:27020)
        BinaryOp: op='==' (at None)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__SplitControlState__requestState' (at pp.c:27020)
            ExprList:  (at pp.c:27020)
              ID: name='CC2420CsmaP__S_STARTING' (at pp.c:27020)
          ID: name='SUCCESS' (at pp.c:27020)
        Compound:  (at pp.c:27020)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__CC2420Power__startVReg' (at pp.c:27021)
          Return:  (at pp.c:27022)
            ID: name='SUCCESS' (at pp.c:27022)
        Compound:  (at pp.c:27024)
          If:  (at pp.c:27026)
            FuncCall:  (at None)
              ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27026)
              ExprList:  (at pp.c:27026)
                ID: name='CC2420CsmaP__S_STARTED' (at pp.c:27026)
            Compound:  (at pp.c:27026)
              Return:  (at pp.c:27027)
                ID: name='EALREADY' (at pp.c:27027)
            Compound:  (at pp.c:27029)
              If:  (at pp.c:27031)
                FuncCall:  (at None)
                  ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27031)
                  ExprList:  (at pp.c:27031)
                    ID: name='CC2420CsmaP__S_STARTING' (at pp.c:27031)
                Compound:  (at pp.c:27031)
                  Return:  (at pp.c:27032)
                    ID: name='SUCCESS' (at pp.c:27032)
      Return:  (at pp.c:27037)
        ID: name='EBUSY' (at pp.c:27037)
  FuncDef:  (at pp.c:27040)
    Decl: name='CC2420CsmaP__SplitControl__stop', quals=[], storage=['static'] (at pp.c:27040)
      FuncDecl: quals=None (at pp.c:27040)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420CsmaP__SplitControl__stop', quals=[] (at pp.c:27040)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27042)
      If:  (at pp.c:27043)
        FuncCall:  (at None)
          ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27043)
          ExprList:  (at pp.c:27043)
            ID: name='CC2420CsmaP__S_STARTED' (at pp.c:27043)
        Compound:  (at pp.c:27043)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:27044)
            ExprList:  (at pp.c:27044)
              ID: name='CC2420CsmaP__S_STOPPING' (at pp.c:27044)
          FuncCall:  (at None)
            ID: name='CC2420CsmaP__shutdown' (at pp.c:27045)
          Return:  (at pp.c:27046)
            ID: name='SUCCESS' (at pp.c:27046)
        Compound:  (at pp.c:27048)
          If:  (at pp.c:27050)
            FuncCall:  (at None)
              ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27050)
              ExprList:  (at pp.c:27050)
                ID: name='CC2420CsmaP__S_STOPPED' (at pp.c:27050)
            Compound:  (at pp.c:27050)
              Return:  (at pp.c:27051)
                ID: name='EALREADY' (at pp.c:27051)
            Compound:  (at pp.c:27053)
              If:  (at pp.c:27055)
                FuncCall:  (at None)
                  ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27055)
                  ExprList:  (at pp.c:27055)
                    ID: name='CC2420CsmaP__S_TRANSMITTING' (at pp.c:27055)
                Compound:  (at pp.c:27055)
                  FuncCall:  (at None)
                    ID: name='CC2420CsmaP__SplitControlState__forceState' (at pp.c:27056)
                    ExprList:  (at pp.c:27056)
                      ID: name='CC2420CsmaP__S_STOPPING' (at pp.c:27056)
                  Return:  (at pp.c:27058)
                    ID: name='SUCCESS' (at pp.c:27058)
                Compound:  (at pp.c:27060)
                  If:  (at pp.c:27062)
                    FuncCall:  (at None)
                      ID: name='CC2420CsmaP__SplitControlState__isState' (at pp.c:27062)
                      ExprList:  (at pp.c:27062)
                        ID: name='CC2420CsmaP__S_STOPPING' (at pp.c:27062)
                    Compound:  (at pp.c:27062)
                      Return:  (at pp.c:27063)
                        ID: name='SUCCESS' (at pp.c:27063)
      Return:  (at pp.c:27069)
        ID: name='EBUSY' (at pp.c:27069)
  FuncDef:  (at pp.c:27073)
    Decl: name='CC2420TransmitP__StdControl__stop', quals=[], storage=['static'] (at pp.c:27073)
      FuncDecl: quals=None (at pp.c:27073)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__StdControl__stop', quals=[] (at pp.c:27073)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27075)
      Compound:  (at pp.c:27076)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27076)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27076)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27076)
        Compound:  (at pp.c:27078)
          Assignment: op='=' (at pp.c:27079)
            ID: name='CC2420TransmitP__m_state' (at pp.c:27079)
            ID: name='CC2420TransmitP__S_STOPPED' (at pp.c:27079)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__BackoffTimer__stop' (at pp.c:27080)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CaptureSFD__disable' (at pp.c:27081)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__SpiResource__release' (at pp.c:27082)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__CSN__set' (at pp.c:27083)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27086)
          ExprList:  (at pp.c:27086)
            ID: name='__nesc_atomic' (at pp.c:27086)
      Return:  (at pp.c:27087)
        ID: name='SUCCESS' (at pp.c:27087)
  FuncDef:  (at pp.c:27091)
    Decl: name='CC2420ReceiveP__StdControl__stop', quals=[], storage=['static'] (at pp.c:27091)
      FuncDecl: quals=None (at pp.c:27091)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__StdControl__stop', quals=[] (at pp.c:27091)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27093)
      Compound:  (at pp.c:27094)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27094)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27094)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27094)
        Compound:  (at pp.c:27096)
          Assignment: op='=' (at pp.c:27097)
            ID: name='CC2420ReceiveP__m_state' (at pp.c:27097)
            ID: name='CC2420ReceiveP__S_STOPPED' (at pp.c:27097)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__reset_state' (at pp.c:27098)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__CSN__set' (at pp.c:27099)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__InterruptFIFOP__disable' (at pp.c:27100)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27103)
          ExprList:  (at pp.c:27103)
            ID: name='__nesc_atomic' (at pp.c:27103)
      Return:  (at pp.c:27104)
        ID: name='SUCCESS' (at pp.c:27104)
  FuncDef:  (at pp.c:27108)
    Decl: name='CC2420ReceiveP__reset_state', quals=[], storage=['static'] (at pp.c:27108)
      FuncDecl: quals=None (at pp.c:27108)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__reset_state', quals=[] (at pp.c:27108)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27110)
      Assignment: op='=' (at pp.c:27111)
        ID: name='CC2420ReceiveP__m_bytes_left' (at pp.c:27111)
        ID: name='CC2420ReceiveP__RXFIFO_SIZE' (at pp.c:27111)
      Assignment: op='=' (at pp.c:27114)
        ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:27114)
        ID: name='FALSE' (at pp.c:27114)
      Assignment: op='=' (at pp.c:27115)
        ID: name='CC2420ReceiveP__m_timestamp_head' (at pp.c:27115)
        Constant: type='int', value='0' (at pp.c:27115)
      Assignment: op='=' (at pp.c:27116)
        ID: name='CC2420ReceiveP__m_timestamp_size' (at pp.c:27116)
        Constant: type='int', value='0' (at pp.c:27116)
      Assignment: op='=' (at pp.c:27117)
        ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:27117)
        Constant: type='int', value='0' (at pp.c:27117)
  FuncDef:  (at pp.c:27121)
    Decl: name='CC2420ControlP__CC2420Power__stopVReg', quals=[], storage=['static'] (at pp.c:27121)
      FuncDecl: quals=None (at pp.c:27121)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Power__stopVReg', quals=[] (at pp.c:27121)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27123)
      Assignment: op='=' (at pp.c:27124)
        ID: name='CC2420ControlP__m_state' (at pp.c:27124)
        ID: name='CC2420ControlP__S_VREG_STOPPED' (at pp.c:27124)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__RSTN__clr' (at pp.c:27125)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__VREN__clr' (at pp.c:27126)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__RSTN__set' (at pp.c:27127)
      Return:  (at pp.c:27128)
        ID: name='SUCCESS' (at pp.c:27128)
  FuncDef:  (at pp.c:27132)
    Decl: name='PowerCycleP__finishSplitControlRequests', quals=[], storage=['static'] (at pp.c:27132)
      FuncDecl: quals=None (at pp.c:27132)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__finishSplitControlRequests', quals=[] (at pp.c:27132)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:27134)
      If:  (at pp.c:27135)
        FuncCall:  (at None)
          ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:27135)
          ExprList:  (at pp.c:27135)
            ID: name='PowerCycleP__S_TURNING_OFF' (at pp.c:27135)
        Compound:  (at pp.c:27135)
          FuncCall:  (at None)
            ID: name='PowerCycleP__SplitControlState__forceState' (at pp.c:27136)
            ExprList:  (at pp.c:27136)
              ID: name='PowerCycleP__S_OFF' (at pp.c:27136)
          FuncCall:  (at None)
            ID: name='PowerCycleP__SplitControl__stopDone' (at pp.c:27137)
            ExprList:  (at pp.c:27137)
              ID: name='SUCCESS' (at pp.c:27137)
          Return:  (at pp.c:27138)
            ID: name='TRUE' (at pp.c:27138)
        Compound:  (at pp.c:27140)
          If:  (at pp.c:27142)
            FuncCall:  (at None)
              ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:27142)
              ExprList:  (at pp.c:27142)
                ID: name='PowerCycleP__S_TURNING_ON' (at pp.c:27142)
            Compound:  (at pp.c:27142)
              FuncCall:  (at None)
                ID: name='PowerCycleP__SplitControlState__forceState' (at pp.c:27144)
                ExprList:  (at pp.c:27144)
                  ID: name='PowerCycleP__S_ON' (at pp.c:27144)
              FuncCall:  (at None)
                ID: name='PowerCycleP__SplitControl__startDone' (at pp.c:27145)
                ExprList:  (at pp.c:27145)
                  ID: name='SUCCESS' (at pp.c:27145)
              Return:  (at pp.c:27146)
                ID: name='TRUE' (at pp.c:27146)
      Return:  (at pp.c:27149)
        ID: name='FALSE' (at pp.c:27149)
  FuncDef:  (at pp.c:27153)
    Decl: name='PowerCycleP__SplitControl__start', quals=[], storage=['static'] (at pp.c:27153)
      FuncDecl: quals=None (at pp.c:27153)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PowerCycleP__SplitControl__start', quals=[] (at pp.c:27153)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27155)
      If:  (at pp.c:27156)
        FuncCall:  (at None)
          ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:27156)
          ExprList:  (at pp.c:27156)
            ID: name='PowerCycleP__S_ON' (at pp.c:27156)
        Compound:  (at pp.c:27156)
          Return:  (at pp.c:27157)
            ID: name='EALREADY' (at pp.c:27157)
        Compound:  (at pp.c:27159)
          If:  (at pp.c:27161)
            FuncCall:  (at None)
              ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:27161)
              ExprList:  (at pp.c:27161)
                ID: name='PowerCycleP__S_TURNING_ON' (at pp.c:27161)
            Compound:  (at pp.c:27161)
              Return:  (at pp.c:27162)
                ID: name='SUCCESS' (at pp.c:27162)
            Compound:  (at pp.c:27164)
              If:  (at pp.c:27166)
                UnaryOp: op='!' (at None)
                  FuncCall:  (at None)
                    ID: name='PowerCycleP__SplitControlState__isState' (at pp.c:27166)
                    ExprList:  (at pp.c:27166)
                      ID: name='PowerCycleP__S_OFF' (at pp.c:27166)
                Compound:  (at pp.c:27166)
                  Return:  (at pp.c:27167)
                    ID: name='EBUSY' (at pp.c:27167)
      FuncCall:  (at None)
        ID: name='PowerCycleP__SplitControlState__forceState' (at pp.c:27171)
        ExprList:  (at pp.c:27171)
          ID: name='PowerCycleP__S_TURNING_ON' (at pp.c:27171)
      If:  (at pp.c:27173)
        BinaryOp: op='>' (at pp.c:27173)
          ID: name='PowerCycleP__sleepInterval' (at pp.c:27173)
          Constant: type='int', value='0' (at pp.c:27173)
        Compound:  (at pp.c:27173)
          FuncCall:  (at None)
            ID: name='PowerCycleP__stopRadio__postTask' (at pp.c:27175)
          Return:  (at pp.c:27176)
            ID: name='SUCCESS' (at pp.c:27176)
        Compound:  (at pp.c:27178)
          FuncCall:  (at None)
            ID: name='PowerCycleP__startRadio__postTask' (at pp.c:27179)
          Return:  (at pp.c:27180)
            ID: name='SUCCESS' (at pp.c:27180)
  FuncDef:  (at pp.c:27185)
    Decl: name='PowerCycleP__OnTimer__startOneShot', quals=[], storage=['static'] (at pp.c:27185)
      FuncDecl: quals=None (at pp.c:27185)
        ParamList:  (at pp.c:27185)
          Decl: name='dt', quals=[], storage=[] (at pp.c:27185)
            TypeDecl: declname='dt', quals=[] (at pp.c:27185)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='PowerCycleP__OnTimer__startOneShot', quals=[] (at pp.c:27185)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27185)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__Timer__startOneShot' (at pp.c:27187)
        ExprList:  (at pp.c:27187)
          Constant: type='int', value='3U' (at pp.c:27187)
          ID: name='dt' (at pp.c:27187)
  FuncDef:  (at pp.c:27192)
    Decl: name='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[], storage=['static'] (at pp.c:27192)
      FuncDecl: quals=None (at pp.c:27192)
        ParamList:  (at pp.c:27192)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27192)
            PtrDecl: quals=[] (at pp.c:27192)
              TypeDecl: declname='msg', quals=[] (at pp.c:27192)
                IdentifierType: names=['message_t'] (at None)
        TypeDecl: declname='CC2420CsmaP__SubBackoff__requestInitialBackoff', quals=[] (at pp.c:27192)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27194)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__SubBackoff__setInitialBackoff' (at pp.c:27195)
        ExprList:  (at None)
          BinaryOp: op='+' (at None)
            BinaryOp: op='%' (at None)
              FuncCall:  (at None)
                ID: name='CC2420CsmaP__Random__rand16' (at pp.c:27195)
              BinaryOp: op='*' (at pp.c:27196)
                Constant: type='int', value='0x1F' (at pp.c:27196)
                ID: name='CC2420_BACKOFF_PERIOD' (at pp.c:27196)
            ID: name='CC2420_MIN_BACKOFF' (at pp.c:27196)
      FuncCall:  (at None)
        ID: name='CC2420CsmaP__RadioBackoff__requestInitialBackoff' (at pp.c:27198)
        ExprList:  (at pp.c:27198)
          ID: name='msg' (at pp.c:27198)
  FuncDef:  (at pp.c:27202)
    Decl: name='CC2420TransmitP__loadTXFIFO', quals=[], storage=['static'] (at pp.c:27202)
      FuncDecl: quals=None (at pp.c:27202)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420TransmitP__loadTXFIFO', quals=[] (at pp.c:27202)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27204)
      Decl: name='header', quals=[], storage=[] (at pp.c:27205)
        PtrDecl: quals=[] (at pp.c:27205)
          TypeDecl: declname='header', quals=[] (at pp.c:27205)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__CC2420PacketBody__getHeader' (at pp.c:27205)
          ExprList:  (at pp.c:27205)
            ID: name='CC2420TransmitP__m_msg' (at pp.c:27205)
      Decl: name='tx_power', quals=[], storage=[] (at pp.c:27206)
        TypeDecl: declname='tx_power', quals=[] (at pp.c:27206)
          IdentifierType: names=['uint8_t'] (at None)
        FuncCall:  (at None)
          ID: name='__nesc_ntoh_uint8' (at pp.c:27206)
          ExprList:  (at None)
            StructRef: type='.' (at None)
              StructRef: type='->' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420TransmitP__CC2420PacketBody__getMetadata' (at pp.c:27206)
                  ExprList:  (at pp.c:27206)
                    ID: name='CC2420TransmitP__m_msg' (at pp.c:27206)
                ID: name='tx_power' (at pp.c:27206)
              ID: name='nxdata' (at pp.c:27206)
      If:  (at pp.c:27208)
        UnaryOp: op='!' (at pp.c:27208)
          ID: name='tx_power' (at pp.c:27208)
        Compound:  (at pp.c:27208)
          Assignment: op='=' (at pp.c:27209)
            ID: name='tx_power' (at pp.c:27209)
            Constant: type='int', value='31' (at pp.c:27209)
      FuncCall:  (at None)
        ID: name='CC2420TransmitP__CSN__clr' (at pp.c:27212)
      If:  (at pp.c:27214)
        BinaryOp: op='!=' (at pp.c:27214)
          ID: name='CC2420TransmitP__m_tx_power' (at pp.c:27214)
          ID: name='tx_power' (at pp.c:27214)
        Compound:  (at pp.c:27214)
          FuncCall:  (at None)
            ID: name='CC2420TransmitP__TXCTRL__write' (at pp.c:27215)
            ExprList:  (at pp.c:27215)
              BinaryOp: op='|' (at pp.c:27215)
                BinaryOp: op='|' (at pp.c:27215)
                  BinaryOp: op='|' (at pp.c:27215)
                    BinaryOp: op='<<' (at pp.c:27215)
                      Constant: type='int', value='2' (at pp.c:27215)
                      ID: name='CC2420_TXCTRL_TXMIXBUF_CUR' (at pp.c:27215)
                    BinaryOp: op='<<' (at pp.c:27216)
                      Constant: type='int', value='3' (at pp.c:27216)
                      ID: name='CC2420_TXCTRL_PA_CURRENT' (at pp.c:27216)
                  BinaryOp: op='<<' (at pp.c:27217)
                    Constant: type='int', value='1' (at pp.c:27217)
                    ID: name='CC2420_TXCTRL_RESERVED' (at pp.c:27217)
                BinaryOp: op='<<' (at pp.c:27218)
                  BinaryOp: op='&' (at pp.c:27218)
                    ID: name='tx_power' (at pp.c:27218)
                    Constant: type='int', value='0x1F' (at pp.c:27218)
                  ID: name='CC2420_TXCTRL_PA_LEVEL' (at pp.c:27218)
      Assignment: op='=' (at pp.c:27221)
        ID: name='CC2420TransmitP__m_tx_power' (at pp.c:27221)
        ID: name='tx_power' (at pp.c:27221)
      Compound:  (at pp.c:27223)
        Decl: name='tmpLen', quals=[], storage=[] (at pp.c:27224)
          TypeDecl: declname='tmpLen', quals=[] (at pp.c:27224)
            IdentifierType: names=['uint8_t'] (at None)
          BinaryOp: op='-' (at None)
            FuncCall:  (at None)
              ID: name='__nesc_ntoh_leuint8' (at pp.c:27224)
              ExprList:  (at pp.c:27224)
                StructRef: type='.' (at pp.c:27224)
                  StructRef: type='->' (at pp.c:27224)
                    ID: name='header' (at pp.c:27224)
                    ID: name='length' (at pp.c:27224)
                  ID: name='nxdata' (at pp.c:27224)
            Constant: type='int', value='1' (at pp.c:27224)
        FuncCall:  (at None)
          ID: name='CC2420TransmitP__TXFIFO__write' (at pp.c:27227)
          ExprList:  (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                PtrDecl: quals=[] (at pp.c:27227)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              ID: name='header' (at pp.c:27227)
            BinaryOp: op='-' (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint8' (at pp.c:27227)
                ExprList:  (at pp.c:27227)
                  StructRef: type='.' (at pp.c:27227)
                    StructRef: type='->' (at pp.c:27227)
                      ID: name='header' (at pp.c:27227)
                      ID: name='length' (at pp.c:27227)
                    ID: name='nxdata' (at pp.c:27227)
              Constant: type='int', value='1' (at pp.c:27227)
  FuncDef:  (at pp.c:27232)
    Decl: name='CC2420SpiP__Reg__write', quals=[], storage=['static'] (at pp.c:27232)
      FuncDecl: quals=None (at pp.c:27232)
        ParamList:  (at pp.c:27232)
          Decl: name='addr', quals=[], storage=[] (at pp.c:27232)
            TypeDecl: declname='addr', quals=[] (at pp.c:27232)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:27232)
            TypeDecl: declname='data', quals=[] (at pp.c:27232)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Reg__write', quals=[] (at pp.c:27232)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:27234)
      Compound:  (at pp.c:27235)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27235)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27235)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27235)
        Compound:  (at pp.c:27237)
          If:  (at pp.c:27238)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:27238)
            Compound:  (at pp.c:27238)
              Compound:  (at pp.c:27239)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:27240)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:27240)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  Constant: type='int', value='0' (at pp.c:27242)
                Compound:  (at pp.c:27244)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:27246)
                    ExprList:  (at pp.c:27246)
                      ID: name='__nesc_atomic' (at pp.c:27246)
                  Return:  (at pp.c:27248)
                    ID: name='__nesc_temp' (at pp.c:27248)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27254)
          ExprList:  (at pp.c:27254)
            ID: name='__nesc_atomic' (at pp.c:27254)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__SpiByte__write' (at pp.c:27256)
        ExprList:  (at pp.c:27256)
          ID: name='addr' (at pp.c:27256)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__SpiByte__write' (at pp.c:27257)
        ExprList:  (at pp.c:27257)
          BinaryOp: op='>>' (at pp.c:27257)
            ID: name='data' (at pp.c:27257)
            Constant: type='int', value='8' (at pp.c:27257)
      Return:  (at pp.c:27258)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:27258)
          ExprList:  (at pp.c:27258)
            BinaryOp: op='&' (at pp.c:27258)
              ID: name='data' (at pp.c:27258)
              Constant: type='int', value='0xff' (at pp.c:27258)
  FuncDef:  (at pp.c:27262)
    Decl: name='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[], storage=['static'] (at pp.c:27262)
      FuncDecl: quals=None (at pp.c:27262)
        ParamList:  (at pp.c:27262)
          Decl: name='id', quals=[], storage=[] (at pp.c:27262)
            TypeDecl: declname='id', quals=[] (at pp.c:27262)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:27262)
            PtrDecl: quals=[] (at pp.c:27262)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:27262)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:27263)
            PtrDecl: quals=[] (at pp.c:27263)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:27263)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:27264)
            TypeDecl: declname='len', quals=[] (at pp.c:27264)
              IdentifierType: names=['uint16_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__SpiPacket__send', quals=[] (at pp.c:27262)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27266)
      Assignment: op='=' (at pp.c:27268)
        ID: name='Msp430SpiNoDmaP__0__m_client' (at pp.c:27268)
        ID: name='id' (at pp.c:27268)
      Assignment: op='=' (at pp.c:27269)
        ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:27269)
        ID: name='tx_buf' (at pp.c:27269)
      Assignment: op='=' (at pp.c:27270)
        ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:27270)
        ID: name='rx_buf' (at pp.c:27270)
      Assignment: op='=' (at pp.c:27271)
        ID: name='Msp430SpiNoDmaP__0__m_len' (at pp.c:27271)
        ID: name='len' (at pp.c:27271)
      Assignment: op='=' (at pp.c:27272)
        ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:27272)
        Constant: type='int', value='0' (at pp.c:27272)
      If:  (at pp.c:27274)
        ID: name='len' (at pp.c:27274)
        Compound:  (at pp.c:27274)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__Usart__enableRxIntr' (at pp.c:27275)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__continueOp' (at pp.c:27276)
        Compound:  (at pp.c:27278)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__signalDone_task__postTask' (at pp.c:27279)
      Return:  (at pp.c:27282)
        ID: name='SUCCESS' (at pp.c:27282)
  FuncDef:  (at pp.c:27286)
    Decl: name='Msp430SpiNoDmaP__0__continueOp', quals=[], storage=['static'] (at pp.c:27286)
      FuncDecl: quals=None (at pp.c:27286)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__continueOp', quals=[] (at pp.c:27286)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27288)
      Decl: name='end', quals=[], storage=[] (at pp.c:27290)
        TypeDecl: declname='end', quals=[] (at pp.c:27290)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='tmp', quals=[], storage=[] (at pp.c:27291)
        TypeDecl: declname='tmp', quals=[] (at pp.c:27291)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:27293)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27293)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27293)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27293)
        Compound:  (at pp.c:27295)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__Usart__tx' (at pp.c:27296)
            ExprList:  (at pp.c:27296)
              TernaryOp:  (at pp.c:27296)
                ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:27296)
                ArrayRef:  (at pp.c:27296)
                  ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:27296)
                  ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:27296)
                Constant: type='int', value='0' (at pp.c:27296)
          Assignment: op='=' (at pp.c:27298)
            ID: name='end' (at pp.c:27298)
            BinaryOp: op='+' (at pp.c:27298)
              ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:27298)
              ID: name='Msp430SpiNoDmaP__0__SPI_ATOMIC_SIZE' (at pp.c:27298)
          If:  (at pp.c:27299)
            BinaryOp: op='>' (at pp.c:27299)
              ID: name='end' (at pp.c:27299)
              ID: name='Msp430SpiNoDmaP__0__m_len' (at pp.c:27299)
            Compound:  (at pp.c:27299)
              Assignment: op='=' (at pp.c:27300)
                ID: name='end' (at pp.c:27300)
                ID: name='Msp430SpiNoDmaP__0__m_len' (at pp.c:27300)
          While:  (at pp.c:27302)
            BinaryOp: op='<' (at pp.c:27302)
              UnaryOp: op='++' (at pp.c:27302)
                ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:27302)
              ID: name='end' (at pp.c:27302)
            Compound:  (at pp.c:27302)
              While:  (at pp.c:27303)
                UnaryOp: op='!' (at None)
                  FuncCall:  (at None)
                    ID: name='Msp430SpiNoDmaP__0__Usart__isRxIntrPending' (at pp.c:27303)
              Assignment: op='=' (at pp.c:27304)
                ID: name='tmp' (at pp.c:27304)
                FuncCall:  (at None)
                  ID: name='Msp430SpiNoDmaP__0__Usart__rx' (at pp.c:27304)
              If:  (at pp.c:27305)
                ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:27305)
                Compound:  (at pp.c:27305)
                  Assignment: op='=' (at pp.c:27306)
                    ArrayRef:  (at pp.c:27306)
                      ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:27306)
                      BinaryOp: op='-' (at pp.c:27306)
                        ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:27306)
                        Constant: type='int', value='1' (at pp.c:27306)
                    ID: name='tmp' (at pp.c:27306)
              FuncCall:  (at None)
                ID: name='Msp430SpiNoDmaP__0__Usart__tx' (at pp.c:27309)
                ExprList:  (at pp.c:27309)
                  TernaryOp:  (at pp.c:27309)
                    ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:27309)
                    ArrayRef:  (at pp.c:27309)
                      ID: name='Msp430SpiNoDmaP__0__m_tx_buf' (at pp.c:27309)
                      ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:27309)
                    Constant: type='int', value='0' (at pp.c:27309)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27313)
          ExprList:  (at pp.c:27313)
            ID: name='__nesc_atomic' (at pp.c:27313)
  FuncDef:  (at pp.c:27317)
    Decl: name='CC2420ActiveMessageP__RadioResource__granted', quals=[], storage=['static'] (at pp.c:27317)
      FuncDecl: quals=None (at pp.c:27317)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ActiveMessageP__RadioResource__granted', quals=[] (at pp.c:27317)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27319)
      Decl: name='rc', quals=[], storage=[] (at pp.c:27320)
        TypeDecl: declname='rc', quals=[] (at pp.c:27320)
          IdentifierType: names=['uint8_t'] (at None)
      Decl: name='header', quals=[], storage=[] (at pp.c:27321)
        PtrDecl: quals=[] (at pp.c:27321)
          TypeDecl: declname='header', quals=[] (at pp.c:27321)
            IdentifierType: names=['cc2420_header_t'] (at None)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__CC2420PacketBody__getHeader' (at pp.c:27321)
          ExprList:  (at pp.c:27321)
            ID: name='CC2420ActiveMessageP__pending_message' (at pp.c:27321)
      FuncCall:  (at None)
        ID: name='CC2420ActiveMessageP__SendNotifier__aboutToSend' (at pp.c:27323)
        ExprList:  (at None)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint8' (at pp.c:27323)
            ExprList:  (at pp.c:27323)
              StructRef: type='.' (at pp.c:27323)
                StructRef: type='->' (at pp.c:27323)
                  ID: name='header' (at pp.c:27323)
                  ID: name='type' (at pp.c:27323)
                ID: name='nxdata' (at pp.c:27323)
          FuncCall:  (at None)
            ID: name='__nesc_ntoh_leuint16' (at pp.c:27323)
            ExprList:  (at pp.c:27323)
              StructRef: type='.' (at pp.c:27323)
                StructRef: type='->' (at pp.c:27323)
                  ID: name='header' (at pp.c:27323)
                  ID: name='dest' (at pp.c:27323)
                ID: name='nxdata' (at pp.c:27323)
          ID: name='CC2420ActiveMessageP__pending_message' (at pp.c:27323)
      Assignment: op='=' (at pp.c:27324)
        ID: name='rc' (at pp.c:27324)
        FuncCall:  (at None)
          ID: name='CC2420ActiveMessageP__SubSend__send' (at pp.c:27324)
          ExprList:  (at pp.c:27324)
            ID: name='CC2420ActiveMessageP__pending_message' (at pp.c:27324)
            ID: name='CC2420ActiveMessageP__pending_length' (at pp.c:27324)
      If:  (at pp.c:27325)
        BinaryOp: op='!=' (at pp.c:27325)
          ID: name='rc' (at pp.c:27325)
          ID: name='SUCCESS' (at pp.c:27325)
        Compound:  (at pp.c:27325)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__RadioResource__release' (at pp.c:27326)
          FuncCall:  (at None)
            ID: name='CC2420ActiveMessageP__AMSend__sendDone' (at pp.c:27327)
            ExprList:  (at None)
              FuncCall:  (at None)
                ID: name='__nesc_ntoh_leuint8' (at pp.c:27327)
                ExprList:  (at pp.c:27327)
                  StructRef: type='.' (at pp.c:27327)
                    StructRef: type='->' (at pp.c:27327)
                      ID: name='header' (at pp.c:27327)
                      ID: name='type' (at pp.c:27327)
                    ID: name='nxdata' (at pp.c:27327)
              ID: name='CC2420ActiveMessageP__pending_message' (at pp.c:27327)
              ID: name='rc' (at pp.c:27327)
  FuncDef:  (at pp.c:27332)
    Decl: name='AMQueueImplP__0__AMSend__sendDone', quals=[], storage=['static'] (at pp.c:27332)
      FuncDecl: quals=None (at pp.c:27332)
        ParamList:  (at pp.c:27332)
          Decl: name='id', quals=[], storage=[] (at pp.c:27332)
            TypeDecl: declname='id', quals=[] (at pp.c:27332)
              IdentifierType: names=['am_id_t'] (at None)
          Decl: name='msg', quals=[], storage=[] (at pp.c:27332)
            PtrDecl: quals=[] (at pp.c:27332)
              TypeDecl: declname='msg', quals=[] (at pp.c:27332)
                IdentifierType: names=['message_t'] (at None)
          Decl: name='err', quals=[], storage=[] (at pp.c:27332)
            TypeDecl: declname='err', quals=[] (at pp.c:27332)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='AMQueueImplP__0__AMSend__sendDone', quals=[] (at pp.c:27332)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27334)
      If:  (at pp.c:27340)
        BinaryOp: op='>=' (at pp.c:27340)
          ID: name='AMQueueImplP__0__current' (at pp.c:27340)
          Constant: type='int', value='1' (at pp.c:27340)
        Compound:  (at pp.c:27340)
          Return:  (at pp.c:27341)
      If:  (at pp.c:27343)
        BinaryOp: op='==' (at pp.c:27343)
          StructRef: type='.' (at pp.c:27343)
            ArrayRef:  (at pp.c:27343)
              ID: name='AMQueueImplP__0__queue' (at pp.c:27343)
              ID: name='AMQueueImplP__0__current' (at pp.c:27343)
            ID: name='msg' (at pp.c:27343)
          ID: name='msg' (at pp.c:27343)
        Compound:  (at pp.c:27343)
          FuncCall:  (at None)
            ID: name='AMQueueImplP__0__sendDone' (at pp.c:27344)
            ExprList:  (at pp.c:27344)
              ID: name='AMQueueImplP__0__current' (at pp.c:27344)
              ID: name='msg' (at pp.c:27344)
              ID: name='err' (at pp.c:27344)
        Compound:  (at pp.c:27346)
  FuncDef:  (at pp.c:27352)
    Decl: name='CC2420ControlP__CC2420Config__getShortAddr', quals=[], storage=['static'] (at pp.c:27352)
      FuncDecl: quals=None (at pp.c:27352)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__CC2420Config__getShortAddr', quals=[] (at pp.c:27352)
          IdentifierType: names=['uint16_t'] (at None)
    Compound:  (at pp.c:27354)
      Compound:  (at pp.c:27355)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27355)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27355)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27355)
        Compound:  (at pp.c:27357)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:27358)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:27358)
              IdentifierType: names=['int', 'unsigned'] (at None)
            ID: name='CC2420ControlP__m_short_addr' (at pp.c:27360)
          Compound:  (at pp.c:27362)
            FuncCall:  (at None)
              ID: name='__nesc_atomic_end' (at pp.c:27364)
              ExprList:  (at pp.c:27364)
                ID: name='__nesc_atomic' (at pp.c:27364)
            Return:  (at pp.c:27366)
              ID: name='__nesc_temp' (at pp.c:27366)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27370)
          ExprList:  (at pp.c:27370)
            ID: name='__nesc_atomic' (at pp.c:27370)
  FuncDef:  (at pp.c:27374)
    Decl: name='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[], storage=['static'] (at pp.c:27374)
      FuncDecl: quals=None (at pp.c:27374)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='DallasId48ToIeeeEui64C__LocalIeeeEui64__getId', quals=[] (at pp.c:27374)
          IdentifierType: names=['ieee_eui64_t'] (at None)
    Compound:  (at pp.c:27376)
      Decl: name='id', quals=[], storage=[] (at pp.c:27377)
        ArrayDecl:  (at pp.c:27377)
          TypeDecl: declname='id', quals=[] (at pp.c:27377)
            IdentifierType: names=['uint8_t'] (at None)
          Constant: type='int', value='6' (at pp.c:27377)
      Decl: name='eui', quals=[], storage=[] (at pp.c:27378)
        TypeDecl: declname='eui', quals=[] (at pp.c:27378)
          IdentifierType: names=['ieee_eui64_t'] (at None)
      If:  (at pp.c:27381)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='DallasId48ToIeeeEui64C__ReadId48__read' (at pp.c:27381)
            ExprList:  (at pp.c:27381)
              ID: name='id' (at pp.c:27381)
          ID: name='SUCCESS' (at pp.c:27381)
        Compound:  (at pp.c:27381)
          FuncCall:  (at None)
            ID: name='memset' (at pp.c:27382)
            ExprList:  (at pp.c:27382)
              StructRef: type='.' (at pp.c:27382)
                ID: name='eui' (at pp.c:27382)
                ID: name='data' (at pp.c:27382)
              Constant: type='int', value='0' (at pp.c:27382)
              Constant: type='int', value='8' (at pp.c:27382)
          Goto: name='done' (at pp.c:27383)
      Assignment: op='=' (at pp.c:27386)
        ArrayRef:  (at pp.c:27386)
          StructRef: type='.' (at pp.c:27386)
            ID: name='eui' (at pp.c:27386)
            ID: name='data' (at pp.c:27386)
          Constant: type='int', value='0' (at pp.c:27386)
        ID: name='IEEE_EUI64_COMPANY_ID_0' (at pp.c:27386)
      Assignment: op='=' (at pp.c:27387)
        ArrayRef:  (at pp.c:27387)
          StructRef: type='.' (at pp.c:27387)
            ID: name='eui' (at pp.c:27387)
            ID: name='data' (at pp.c:27387)
          Constant: type='int', value='1' (at pp.c:27387)
        ID: name='IEEE_EUI64_COMPANY_ID_1' (at pp.c:27387)
      Assignment: op='=' (at pp.c:27388)
        ArrayRef:  (at pp.c:27388)
          StructRef: type='.' (at pp.c:27388)
            ID: name='eui' (at pp.c:27388)
            ID: name='data' (at pp.c:27388)
          Constant: type='int', value='2' (at pp.c:27388)
        ID: name='IEEE_EUI64_COMPANY_ID_2' (at pp.c:27388)
      Assignment: op='=' (at pp.c:27392)
        ArrayRef:  (at pp.c:27392)
          StructRef: type='.' (at pp.c:27392)
            ID: name='eui' (at pp.c:27392)
            ID: name='data' (at pp.c:27392)
          Constant: type='int', value='3' (at pp.c:27392)
        ID: name='IEEE_EUI64_SERIAL_ID_0' (at pp.c:27392)
      Assignment: op='=' (at pp.c:27393)
        ArrayRef:  (at pp.c:27393)
          StructRef: type='.' (at pp.c:27393)
            ID: name='eui' (at pp.c:27393)
            ID: name='data' (at pp.c:27393)
          Constant: type='int', value='4' (at pp.c:27393)
        ID: name='IEEE_EUI64_SERIAL_ID_1' (at pp.c:27393)
      Assignment: op='=' (at pp.c:27396)
        ArrayRef:  (at pp.c:27396)
          StructRef: type='.' (at pp.c:27396)
            ID: name='eui' (at pp.c:27396)
            ID: name='data' (at pp.c:27396)
          Constant: type='int', value='5' (at pp.c:27396)
        ArrayRef:  (at pp.c:27396)
          ID: name='id' (at pp.c:27396)
          Constant: type='int', value='2' (at pp.c:27396)
      Assignment: op='=' (at pp.c:27397)
        ArrayRef:  (at pp.c:27397)
          StructRef: type='.' (at pp.c:27397)
            ID: name='eui' (at pp.c:27397)
            ID: name='data' (at pp.c:27397)
          Constant: type='int', value='6' (at pp.c:27397)
        ArrayRef:  (at pp.c:27397)
          ID: name='id' (at pp.c:27397)
          Constant: type='int', value='1' (at pp.c:27397)
      Assignment: op='=' (at pp.c:27398)
        ArrayRef:  (at pp.c:27398)
          StructRef: type='.' (at pp.c:27398)
            ID: name='eui' (at pp.c:27398)
            ID: name='data' (at pp.c:27398)
          Constant: type='int', value='7' (at pp.c:27398)
        ArrayRef:  (at pp.c:27398)
          ID: name='id' (at pp.c:27398)
          Constant: type='int', value='0' (at pp.c:27398)
      Label: name='done' (at pp.c:27400)
        Return:  (at pp.c:27401)
          ID: name='eui' (at pp.c:27401)
  FuncDef:  (at pp.c:27405)
    Decl: name='BusyWaitCounterC__0__BusyWait__wait', quals=[], storage=['static'] (at pp.c:27405)
      FuncDecl: quals=None (at pp.c:27405)
        ParamList:  (at pp.c:27405)
          Decl: name='dt', quals=[], storage=[] (at pp.c:27405)
            TypeDecl: declname='dt', quals=[] (at pp.c:27405)
              IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
        TypeDecl: declname='BusyWaitCounterC__0__BusyWait__wait', quals=[] (at pp.c:27405)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27406)
      Compound:  (at pp.c:27408)
        Decl: name='t0', quals=[], storage=[] (at pp.c:27411)
          TypeDecl: declname='t0', quals=[] (at pp.c:27411)
            IdentifierType: names=['BusyWaitCounterC__0__size_type'] (at None)
          FuncCall:  (at None)
            ID: name='BusyWaitCounterC__0__Counter__get' (at pp.c:27411)
        If:  (at pp.c:27413)
          BinaryOp: op='>' (at pp.c:27413)
            ID: name='dt' (at pp.c:27413)
            ID: name='BusyWaitCounterC__0__HALF_MAX_SIZE_TYPE' (at pp.c:27413)
          Compound:  (at pp.c:27414)
            Assignment: op='-=' (at pp.c:27415)
              ID: name='dt' (at pp.c:27415)
              ID: name='BusyWaitCounterC__0__HALF_MAX_SIZE_TYPE' (at pp.c:27415)
            While:  (at pp.c:27416)
              BinaryOp: op='<=' (at None)
                BinaryOp: op='-' (at None)
                  FuncCall:  (at None)
                    ID: name='BusyWaitCounterC__0__Counter__get' (at pp.c:27416)
                  ID: name='t0' (at pp.c:27416)
                ID: name='dt' (at pp.c:27416)
            Assignment: op='+=' (at pp.c:27417)
              ID: name='t0' (at pp.c:27417)
              ID: name='dt' (at pp.c:27417)
            Assignment: op='=' (at pp.c:27418)
              ID: name='dt' (at pp.c:27418)
              ID: name='BusyWaitCounterC__0__HALF_MAX_SIZE_TYPE' (at pp.c:27418)
        While:  (at pp.c:27421)
          BinaryOp: op='<=' (at None)
            BinaryOp: op='-' (at None)
              FuncCall:  (at None)
                ID: name='BusyWaitCounterC__0__Counter__get' (at pp.c:27421)
              ID: name='t0' (at pp.c:27421)
            ID: name='dt' (at pp.c:27421)
  FuncDef:  (at pp.c:27426)
    Decl: name='CC2420ReceiveP__waitForNextPacket', quals=[], storage=['static'] (at pp.c:27426)
      FuncDecl: quals=None (at pp.c:27426)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__waitForNextPacket', quals=[] (at pp.c:27426)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27428)
      Compound:  (at pp.c:27429)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27429)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27429)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27429)
        Compound:  (at pp.c:27431)
          If:  (at pp.c:27432)
            BinaryOp: op='==' (at pp.c:27432)
              ID: name='CC2420ReceiveP__m_state' (at pp.c:27432)
              ID: name='CC2420ReceiveP__S_STOPPED' (at pp.c:27432)
            Compound:  (at pp.c:27432)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:27433)
              Compound:  (at pp.c:27434)
                FuncCall:  (at None)
                  ID: name='__nesc_atomic_end' (at pp.c:27436)
                  ExprList:  (at pp.c:27436)
                    ID: name='__nesc_atomic' (at pp.c:27436)
                Return:  (at pp.c:27438)
          Assignment: op='=' (at pp.c:27441)
            ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:27441)
            ID: name='FALSE' (at pp.c:27441)
          If:  (at pp.c:27443)
            BinaryOp: op='||' (at pp.c:27443)
              BinaryOp: op='&&' (at pp.c:27443)
                ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:27443)
                FuncCall:  (at None)
                  ID: name='CC2420ReceiveP__FIFO__get' (at pp.c:27443)
              UnaryOp: op='!' (at None)
                FuncCall:  (at None)
                  ID: name='CC2420ReceiveP__FIFOP__get' (at pp.c:27443)
            Compound:  (at pp.c:27443)
              If:  (at pp.c:27445)
                ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:27445)
                Compound:  (at pp.c:27445)
                  UnaryOp: op='p--' (at pp.c:27446)
                    ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:27446)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__beginReceive' (at pp.c:27453)
            Compound:  (at pp.c:27456)
              Assignment: op='=' (at pp.c:27458)
                ID: name='CC2420ReceiveP__m_state' (at pp.c:27458)
                ID: name='CC2420ReceiveP__S_STARTED' (at pp.c:27458)
              Assignment: op='=' (at pp.c:27459)
                ID: name='CC2420ReceiveP__m_missed_packets' (at pp.c:27459)
                Constant: type='int', value='0' (at pp.c:27459)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:27460)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27464)
          ExprList:  (at pp.c:27464)
            ID: name='__nesc_atomic' (at pp.c:27464)
  FuncDef:  (at pp.c:27468)
    Decl: name='CC2420ReceiveP__beginReceive', quals=[], storage=['static'] (at pp.c:27468)
      FuncDecl: quals=None (at pp.c:27468)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__beginReceive', quals=[] (at pp.c:27468)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27470)
      Assignment: op='=' (at pp.c:27471)
        ID: name='CC2420ReceiveP__m_state' (at pp.c:27471)
        ID: name='CC2420ReceiveP__S_RX_LENGTH' (at pp.c:27471)
      Assignment: op='=' (at pp.c:27474)
        ID: name='CC2420ReceiveP__receivingPacket' (at pp.c:27474)
        ID: name='TRUE' (at pp.c:27474)
      If:  (at pp.c:27475)
        FuncCall:  (at None)
          ID: name='CC2420ReceiveP__SpiResource__isOwner' (at pp.c:27475)
        Compound:  (at pp.c:27475)
          FuncCall:  (at None)
            ID: name='CC2420ReceiveP__receive' (at pp.c:27476)
        Compound:  (at pp.c:27478)
          If:  (at pp.c:27480)
            BinaryOp: op='==' (at None)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__SpiResource__immediateRequest' (at pp.c:27480)
              ID: name='SUCCESS' (at pp.c:27480)
            Compound:  (at pp.c:27480)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__receive' (at pp.c:27481)
            Compound:  (at pp.c:27483)
              FuncCall:  (at None)
                ID: name='CC2420ReceiveP__SpiResource__request' (at pp.c:27484)
  FuncDef:  (at pp.c:27490)
    Decl: name='CC2420ReceiveP__receive', quals=[], storage=['static'] (at pp.c:27490)
      FuncDecl: quals=None (at pp.c:27490)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__receive', quals=[] (at pp.c:27490)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27492)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CSN__clr' (at pp.c:27493)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__RXFIFO__beginRead' (at pp.c:27494)
        ExprList:  (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:27494)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            FuncCall:  (at None)
              ID: name='CC2420ReceiveP__CC2420PacketBody__getHeader' (at pp.c:27494)
              ExprList:  (at pp.c:27494)
                ID: name='CC2420ReceiveP__m_p_rx_buf' (at pp.c:27494)
          Constant: type='int', value='1' (at pp.c:27494)
  FuncDef:  (at pp.c:27498)
    Decl: name='CC2420SpiP__Fifo__beginRead', quals=[], storage=['static'] (at pp.c:27498)
      FuncDecl: quals=None (at pp.c:27498)
        ParamList:  (at pp.c:27498)
          Decl: name='addr', quals=[], storage=[] (at pp.c:27498)
            TypeDecl: declname='addr', quals=[] (at pp.c:27498)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='data', quals=[], storage=[] (at pp.c:27498)
            PtrDecl: quals=[] (at pp.c:27498)
              TypeDecl: declname='data', quals=[] (at pp.c:27498)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:27499)
            TypeDecl: declname='len', quals=[] (at pp.c:27499)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='CC2420SpiP__Fifo__beginRead', quals=[] (at pp.c:27498)
          IdentifierType: names=['cc2420_status_t'] (at None)
    Compound:  (at pp.c:27501)
      Decl: name='status', quals=[], storage=[] (at pp.c:27503)
        TypeDecl: declname='status', quals=[] (at pp.c:27503)
          IdentifierType: names=['cc2420_status_t'] (at None)
        Constant: type='int', value='0' (at pp.c:27503)
      Compound:  (at pp.c:27505)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27505)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27505)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27505)
        Compound:  (at pp.c:27507)
          If:  (at pp.c:27508)
            FuncCall:  (at None)
              ID: name='CC2420SpiP__WorkingState__isIdle' (at pp.c:27508)
            Compound:  (at pp.c:27508)
              Compound:  (at pp.c:27509)
                Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:27510)
                  TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:27510)
                    IdentifierType: names=['char', 'unsigned'] (at None)
                  ID: name='status' (at pp.c:27512)
                Compound:  (at pp.c:27514)
                  FuncCall:  (at None)
                    ID: name='__nesc_atomic_end' (at pp.c:27516)
                    ExprList:  (at pp.c:27516)
                      ID: name='__nesc_atomic' (at pp.c:27516)
                  Return:  (at pp.c:27518)
                    ID: name='__nesc_temp' (at pp.c:27518)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27524)
          ExprList:  (at pp.c:27524)
            ID: name='__nesc_atomic' (at pp.c:27524)
      Assignment: op='=' (at pp.c:27526)
        ID: name='CC2420SpiP__m_addr' (at pp.c:27526)
        BinaryOp: op='|' (at pp.c:27526)
          ID: name='addr' (at pp.c:27526)
          Constant: type='int', value='0x40' (at pp.c:27526)
      Assignment: op='=' (at pp.c:27528)
        ID: name='status' (at pp.c:27528)
        FuncCall:  (at None)
          ID: name='CC2420SpiP__SpiByte__write' (at pp.c:27528)
          ExprList:  (at pp.c:27528)
            ID: name='CC2420SpiP__m_addr' (at pp.c:27528)
      FuncCall:  (at None)
        ID: name='CC2420SpiP__Fifo__continueRead' (at pp.c:27529)
        ExprList:  (at pp.c:27529)
          ID: name='addr' (at pp.c:27529)
          ID: name='data' (at pp.c:27529)
          ID: name='len' (at pp.c:27529)
      Return:  (at pp.c:27531)
        ID: name='status' (at pp.c:27531)
  FuncDef:  (at pp.c:27535)
    Decl: name='CC2420ControlP__writeFsctrl', quals=[], storage=['static'] (at pp.c:27535)
      FuncDecl: quals=None (at pp.c:27535)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__writeFsctrl', quals=[] (at pp.c:27535)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27537)
      Decl: name='channel', quals=[], storage=[] (at pp.c:27538)
        TypeDecl: declname='channel', quals=[] (at pp.c:27538)
          IdentifierType: names=['uint8_t'] (at None)
      Compound:  (at pp.c:27540)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27540)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27540)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27540)
        Compound:  (at pp.c:27542)
          Assignment: op='=' (at pp.c:27543)
            ID: name='channel' (at pp.c:27543)
            ID: name='CC2420ControlP__m_channel' (at pp.c:27543)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27546)
          ExprList:  (at pp.c:27546)
            ID: name='__nesc_atomic' (at pp.c:27546)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__FSCTRL__write' (at pp.c:27548)
        ExprList:  (at pp.c:27548)
          BinaryOp: op='|' (at pp.c:27548)
            BinaryOp: op='<<' (at pp.c:27548)
              Constant: type='int', value='1' (at pp.c:27548)
              ID: name='CC2420_FSCTRL_LOCK_THR' (at pp.c:27548)
            BinaryOp: op='<<' (at pp.c:27549)
              BinaryOp: op='+' (at pp.c:27549)
                BinaryOp: op='*' (at pp.c:27549)
                  BinaryOp: op='-' (at pp.c:27549)
                    ID: name='channel' (at pp.c:27549)
                    Constant: type='int', value='11' (at pp.c:27549)
                  Constant: type='int', value='5' (at pp.c:27549)
                Constant: type='int', value='357' (at pp.c:27549)
              ID: name='CC2420_FSCTRL_FREQ' (at pp.c:27549)
  FuncDef:  (at pp.c:27558)
    Decl: name='CC2420ControlP__writeMdmctrl0', quals=[], storage=['static'] (at pp.c:27558)
      FuncDecl: quals=None (at pp.c:27558)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__writeMdmctrl0', quals=[] (at pp.c:27558)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27560)
      Compound:  (at pp.c:27561)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27561)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27561)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27561)
        Compound:  (at pp.c:27563)
          FuncCall:  (at None)
            ID: name='CC2420ControlP__MDMCTRL0__write' (at pp.c:27564)
            ExprList:  (at pp.c:27564)
              BinaryOp: op='|' (at pp.c:27564)
                BinaryOp: op='|' (at pp.c:27564)
                  BinaryOp: op='|' (at pp.c:27564)
                    BinaryOp: op='|' (at pp.c:27564)
                      BinaryOp: op='|' (at pp.c:27564)
                        BinaryOp: op='|' (at pp.c:27564)
                          BinaryOp: op='|' (at pp.c:27564)
                            BinaryOp: op='<<' (at pp.c:27564)
                              Constant: type='int', value='1' (at pp.c:27564)
                              ID: name='CC2420_MDMCTRL0_RESERVED_FRAME_MODE' (at pp.c:27564)
                            BinaryOp: op='<<' (at pp.c:27565)
                              TernaryOp:  (at pp.c:27565)
                                BinaryOp: op='&&' (at pp.c:27565)
                                  ID: name='CC2420ControlP__addressRecognition' (at pp.c:27565)
                                  ID: name='CC2420ControlP__hwAddressRecognition' (at pp.c:27565)
                                Constant: type='int', value='1' (at pp.c:27565)
                                Constant: type='int', value='0' (at pp.c:27565)
                              ID: name='CC2420_MDMCTRL0_ADR_DECODE' (at pp.c:27565)
                          BinaryOp: op='<<' (at pp.c:27566)
                            Constant: type='int', value='2' (at pp.c:27566)
                            ID: name='CC2420_MDMCTRL0_CCA_HYST' (at pp.c:27566)
                        BinaryOp: op='<<' (at pp.c:27567)
                          Constant: type='int', value='3' (at pp.c:27567)
                          ID: name='CC2420_MDMCTRL0_CCA_MOD' (at pp.c:27567)
                      BinaryOp: op='<<' (at pp.c:27568)
                        Constant: type='int', value='1' (at pp.c:27568)
                        ID: name='CC2420_MDMCTRL0_AUTOCRC' (at pp.c:27568)
                    BinaryOp: op='<<' (at pp.c:27569)
                      BinaryOp: op='&&' (at pp.c:27569)
                        ID: name='CC2420ControlP__autoAckEnabled' (at pp.c:27569)
                        ID: name='CC2420ControlP__hwAutoAckDefault' (at pp.c:27569)
                      ID: name='CC2420_MDMCTRL0_AUTOACK' (at pp.c:27569)
                  BinaryOp: op='<<' (at pp.c:27570)
                    Constant: type='int', value='0' (at pp.c:27570)
                    ID: name='CC2420_MDMCTRL0_AUTOACK' (at pp.c:27570)
                BinaryOp: op='<<' (at pp.c:27571)
                  Constant: type='int', value='2' (at pp.c:27571)
                  ID: name='CC2420_MDMCTRL0_PREAMBLE_LENGTH' (at pp.c:27571)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27574)
          ExprList:  (at pp.c:27574)
            ID: name='__nesc_atomic' (at pp.c:27574)
  FuncDef:  (at pp.c:27583)
    Decl: name='CC2420ControlP__writeId', quals=[], storage=['static'] (at pp.c:27583)
      FuncDecl: quals=None (at pp.c:27583)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ControlP__writeId', quals=[] (at pp.c:27583)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27585)
      Decl: name='id', quals=[], storage=[] (at pp.c:27586)
        ArrayDecl:  (at pp.c:27586)
          TypeDecl: declname='id', quals=[] (at pp.c:27586)
            IdentifierType: names=['nxle_uint16_t'] (at None)
          Constant: type='int', value='6' (at pp.c:27586)
      Compound:  (at pp.c:27588)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27588)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27588)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27588)
        Compound:  (at pp.c:27590)
          Assignment: op='=' (at None)
            UnaryOp: op='*' (at None)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  PtrDecl: quals=[] (at pp.c:27591)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['ieee_eui64_t'] (at None)
                UnaryOp: op='&' (at pp.c:27591)
                  ArrayRef:  (at pp.c:27591)
                    ID: name='id' (at pp.c:27591)
                    Constant: type='int', value='0' (at pp.c:27591)
            ID: name='CC2420ControlP__m_ext_addr' (at pp.c:27591)
          FuncCall:  (at None)
            ID: name='__nesc_hton_leuint16' (at pp.c:27592)
            ExprList:  (at pp.c:27592)
              StructRef: type='.' (at pp.c:27592)
                ArrayRef:  (at pp.c:27592)
                  ID: name='id' (at pp.c:27592)
                  Constant: type='int', value='4' (at pp.c:27592)
                ID: name='nxdata' (at pp.c:27592)
              ID: name='CC2420ControlP__m_pan' (at pp.c:27592)
          FuncCall:  (at None)
            ID: name='__nesc_hton_leuint16' (at pp.c:27593)
            ExprList:  (at pp.c:27593)
              StructRef: type='.' (at pp.c:27593)
                ArrayRef:  (at pp.c:27593)
                  ID: name='id' (at pp.c:27593)
                  Constant: type='int', value='5' (at pp.c:27593)
                ID: name='nxdata' (at pp.c:27593)
              ID: name='CC2420ControlP__m_short_addr' (at pp.c:27593)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27596)
          ExprList:  (at pp.c:27596)
            ID: name='__nesc_atomic' (at pp.c:27596)
      FuncCall:  (at None)
        ID: name='CC2420ControlP__IEEEADR__write' (at pp.c:27598)
        ExprList:  (at pp.c:27598)
          Constant: type='int', value='0' (at pp.c:27598)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:27598)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint8_t'] (at None)
            UnaryOp: op='&' (at pp.c:27598)
              ID: name='id' (at pp.c:27598)
          Constant: type='int', value='12' (at pp.c:27598)
  FuncDef:  (at pp.c:27602)
    Decl: name='LowPowerSensingPeriodicSamplerC__sendSampleMsg', quals=[], storage=['static'] (at pp.c:27602)
      FuncDecl: quals=None (at pp.c:27602)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__sendSampleMsg', quals=[] (at pp.c:27602)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27604)
      FuncCall:  (at None)
        ID: name='LowPowerSensingPeriodicSamplerC__LPL__setRemoteWakeupInterval' (at pp.c:27605)
        ExprList:  (at pp.c:27605)
          UnaryOp: op='&' (at pp.c:27605)
            ID: name='LowPowerSensingPeriodicSamplerC__sample_msg' (at pp.c:27605)
          Constant: type='int', value='0' (at pp.c:27605)
      If:  (at pp.c:27606)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__SampleSend__send' (at pp.c:27606)
            ExprList:  (at pp.c:27606)
              ID: name='BASE_STATION_ADDR' (at pp.c:27606)
              UnaryOp: op='&' (at pp.c:27606)
                ID: name='LowPowerSensingPeriodicSamplerC__sample_msg' (at pp.c:27606)
              UnaryOp: op='sizeof' (at pp.c:27606)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['nx_sensor_sample_t'] (at None)
          ID: name='SUCCESS' (at pp.c:27606)
        Compound:  (at pp.c:27606)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__sendSampleMsgTask__postTask' (at pp.c:27607)
        Compound:  (at pp.c:27609)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__Leds__led2On' (at pp.c:27611)
  FuncDef:  (at pp.c:27616)
    Decl: name='Stm25pSpiP__SpiResource__granted', quals=[], storage=['static'] (at pp.c:27616)
      FuncDecl: quals=None (at pp.c:27616)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__SpiResource__granted', quals=[] (at pp.c:27616)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27618)
      If:  (at pp.c:27620)
        UnaryOp: op='!' (at pp.c:27620)
          ID: name='Stm25pSpiP__m_is_writing' (at pp.c:27620)
        Compound:  (at pp.c:27620)
          FuncCall:  (at None)
            ID: name='Stm25pSpiP__ClientResource__granted' (at pp.c:27621)
        Compound:  (at pp.c:27623)
          If:  (at pp.c:27625)
            BinaryOp: op='&' (at None)
              FuncCall:  (at None)
                ID: name='Stm25pSpiP__sendCmd' (at pp.c:27625)
                ExprList:  (at pp.c:27625)
                  Constant: type='int', value='0x5' (at pp.c:27625)
                  Constant: type='int', value='2' (at pp.c:27625)
              Constant: type='int', value='0x1' (at pp.c:27625)
            Compound:  (at pp.c:27625)
              FuncCall:  (at None)
                ID: name='Stm25pSpiP__releaseAndRequest' (at pp.c:27626)
            Compound:  (at pp.c:27628)
              FuncCall:  (at None)
                ID: name='Stm25pSpiP__signalDone' (at pp.c:27630)
                ExprList:  (at pp.c:27630)
                  ID: name='SUCCESS' (at pp.c:27630)
  FuncDef:  (at pp.c:27636)
    Decl: name='Stm25pSpiP__sendCmd', quals=[], storage=['static'] (at pp.c:27636)
      FuncDecl: quals=None (at pp.c:27636)
        ParamList:  (at pp.c:27636)
          Decl: name='cmd', quals=[], storage=[] (at pp.c:27636)
            TypeDecl: declname='cmd', quals=[] (at pp.c:27636)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:27636)
            TypeDecl: declname='len', quals=[] (at pp.c:27636)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__sendCmd', quals=[] (at pp.c:27636)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:27638)
      Decl: name='tmp', quals=[], storage=[] (at pp.c:27640)
        TypeDecl: declname='tmp', quals=[] (at pp.c:27640)
          IdentifierType: names=['uint8_t'] (at None)
        Constant: type='int', value='0' (at pp.c:27640)
      Decl: name='i', quals=[], storage=[] (at pp.c:27641)
        TypeDecl: declname='i', quals=[] (at pp.c:27641)
          IdentifierType: names=['int'] (at None)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__CSN__clr' (at pp.c:27643)
      For:  (at pp.c:27644)
        Assignment: op='=' (at pp.c:27644)
          ID: name='i' (at pp.c:27644)
          Constant: type='int', value='0' (at pp.c:27644)
        BinaryOp: op='<' (at pp.c:27644)
          ID: name='i' (at pp.c:27644)
          ID: name='len' (at pp.c:27644)
        UnaryOp: op='p++' (at pp.c:27644)
          ID: name='i' (at pp.c:27644)
        Assignment: op='=' (at pp.c:27645)
          ID: name='tmp' (at pp.c:27645)
          FuncCall:  (at None)
            ID: name='Stm25pSpiP__SpiByte__write' (at pp.c:27645)
            ExprList:  (at pp.c:27645)
              ID: name='cmd' (at pp.c:27645)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__CSN__set' (at pp.c:27646)
      Return:  (at pp.c:27648)
        ID: name='tmp' (at pp.c:27648)
  FuncDef:  (at pp.c:27652)
    Decl: name='HplMsp430GeneralIOP__28__IO__clr', quals=[], storage=['static'] (at pp.c:27652)
      FuncDecl: quals=None (at pp.c:27652)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__28__IO__clr', quals=[] (at pp.c:27652)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27654)
      Compound:  (at pp.c:27656)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27656)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27656)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27656)
        Assignment: op='&=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:27658)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:27658)
          UnaryOp: op='~' (at pp.c:27658)
            BinaryOp: op='<<' (at pp.c:27658)
              Constant: type='int', value='0x01' (at pp.c:27658)
              Constant: type='int', value='4' (at pp.c:27658)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27660)
          ExprList:  (at pp.c:27660)
            ID: name='__nesc_atomic' (at pp.c:27660)
  FuncDef:  (at pp.c:27664)
    Decl: name='HplMsp430GeneralIOP__28__IO__set', quals=[], storage=['static'] (at pp.c:27664)
      FuncDecl: quals=None (at pp.c:27664)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='HplMsp430GeneralIOP__28__IO__set', quals=[] (at pp.c:27664)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27666)
      Compound:  (at pp.c:27668)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27668)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27668)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27668)
        Assignment: op='|=' (at None)
          UnaryOp: op='*' (at None)
            Cast:  (at None)
              Typename: quals=['volatile'] (at None)
                PtrDecl: quals=[] (at pp.c:27670)
                  TypeDecl: declname=None, quals=['volatile'] (at None)
                    IdentifierType: names=['uint8_t'] (at None)
              Constant: type='int', value='29U' (at pp.c:27670)
          BinaryOp: op='<<' (at pp.c:27670)
            Constant: type='int', value='0x01' (at pp.c:27670)
            Constant: type='int', value='4' (at pp.c:27670)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27672)
          ExprList:  (at pp.c:27672)
            ID: name='__nesc_atomic' (at pp.c:27672)
  FuncDef:  (at pp.c:27676)
    Decl: name='ArbiterP__0__ResourceDefaultOwner__release', quals=[], storage=['static'] (at pp.c:27676)
      FuncDecl: quals=None (at pp.c:27676)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__0__ResourceDefaultOwner__release', quals=[] (at pp.c:27676)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27678)
      Compound:  (at pp.c:27679)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27679)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27679)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27679)
        Compound:  (at pp.c:27681)
          If:  (at pp.c:27682)
            BinaryOp: op='==' (at pp.c:27682)
              ID: name='ArbiterP__0__resId' (at pp.c:27682)
              ID: name='ArbiterP__0__default_owner_id' (at pp.c:27682)
            Compound:  (at pp.c:27682)
              If:  (at pp.c:27683)
                BinaryOp: op='==' (at pp.c:27683)
                  ID: name='ArbiterP__0__state' (at pp.c:27683)
                  ID: name='ArbiterP__0__RES_GRANTING' (at pp.c:27683)
                Compound:  (at pp.c:27683)
                  FuncCall:  (at None)
                    ID: name='ArbiterP__0__grantedTask__postTask' (at pp.c:27684)
                  Compound:  (at pp.c:27685)
                    Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:27686)
                      TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:27686)
                        IdentifierType: names=['char', 'unsigned'] (at None)
                      ID: name='SUCCESS' (at pp.c:27688)
                    Compound:  (at pp.c:27690)
                      FuncCall:  (at None)
                        ID: name='__nesc_atomic_end' (at pp.c:27692)
                        ExprList:  (at pp.c:27692)
                          ID: name='__nesc_atomic' (at pp.c:27692)
                      Return:  (at pp.c:27694)
                        ID: name='__nesc_temp' (at pp.c:27694)
                Compound:  (at pp.c:27698)
                  If:  (at pp.c:27700)
                    BinaryOp: op='==' (at pp.c:27700)
                      ID: name='ArbiterP__0__state' (at pp.c:27700)
                      ID: name='ArbiterP__0__RES_IMM_GRANTING' (at pp.c:27700)
                    Compound:  (at pp.c:27700)
                      Assignment: op='=' (at pp.c:27701)
                        ID: name='ArbiterP__0__resId' (at pp.c:27701)
                        ID: name='ArbiterP__0__reqResId' (at pp.c:27701)
                      Assignment: op='=' (at pp.c:27702)
                        ID: name='ArbiterP__0__state' (at pp.c:27702)
                        ID: name='ArbiterP__0__RES_BUSY' (at pp.c:27702)
                      Compound:  (at pp.c:27703)
                        Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:27704)
                          TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:27704)
                            IdentifierType: names=['char', 'unsigned'] (at None)
                          ID: name='SUCCESS' (at pp.c:27706)
                        Compound:  (at pp.c:27708)
                          FuncCall:  (at None)
                            ID: name='__nesc_atomic_end' (at pp.c:27710)
                            ExprList:  (at pp.c:27710)
                              ID: name='__nesc_atomic' (at pp.c:27710)
                          Return:  (at pp.c:27712)
                            ID: name='__nesc_temp' (at pp.c:27712)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27720)
          ExprList:  (at pp.c:27720)
            ID: name='__nesc_atomic' (at pp.c:27720)
      Return:  (at pp.c:27722)
        ID: name='FAIL' (at pp.c:27722)
  FuncDef:  (at pp.c:27726)
    Decl: name='DeferredPowerManagerP__0__SplitControl__stopDone', quals=[], storage=['static'] (at pp.c:27726)
      FuncDecl: quals=None (at pp.c:27726)
        ParamList:  (at pp.c:27726)
          Decl: name='error', quals=[], storage=[] (at pp.c:27726)
            TypeDecl: declname='error', quals=[] (at pp.c:27726)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='DeferredPowerManagerP__0__SplitControl__stopDone', quals=[] (at pp.c:27726)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27728)
      If:  (at pp.c:27729)
        BinaryOp: op='==' (at pp.c:27729)
          ID: name='DeferredPowerManagerP__0__requested' (at pp.c:27729)
          ID: name='TRUE' (at pp.c:27729)
        Compound:  (at pp.c:27729)
          FuncCall:  (at None)
            ID: name='DeferredPowerManagerP__0__StdControl__start' (at pp.c:27730)
          FuncCall:  (at None)
            ID: name='DeferredPowerManagerP__0__SplitControl__start' (at pp.c:27731)
      Compound:  (at pp.c:27733)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:27733)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:27733)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:27733)
        Compound:  (at pp.c:27735)
          Assignment: op='=' (at pp.c:27736)
            ID: name='DeferredPowerManagerP__0__requested' (at pp.c:27736)
            ID: name='FALSE' (at pp.c:27736)
          Assignment: op='=' (at pp.c:27737)
            ID: name='DeferredPowerManagerP__0__stopping' (at pp.c:27737)
            ID: name='FALSE' (at pp.c:27737)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:27740)
          ExprList:  (at pp.c:27740)
            ID: name='__nesc_atomic' (at pp.c:27740)
  FuncDef:  (at pp.c:27744)
    Decl: name='Stm25pSectorP__SplitControl__start', quals=[], storage=['static'] (at pp.c:27744)
      FuncDecl: quals=None (at pp.c:27744)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSectorP__SplitControl__start', quals=[] (at pp.c:27744)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27746)
      Decl: name='error', quals=[], storage=[] (at pp.c:27747)
        TypeDecl: declname='error', quals=[] (at pp.c:27747)
          IdentifierType: names=['error_t'] (at None)
        FuncCall:  (at None)
          ID: name='Stm25pSectorP__SpiResource__request' (at pp.c:27747)
      If:  (at pp.c:27750)
        BinaryOp: op='==' (at pp.c:27750)
          ID: name='error' (at pp.c:27750)
          ID: name='SUCCESS' (at pp.c:27750)
        Compound:  (at pp.c:27750)
          Assignment: op='=' (at pp.c:27751)
            ID: name='Stm25pSectorP__m_power_state' (at pp.c:27751)
            ID: name='Stm25pSectorP__S_START' (at pp.c:27751)
      Return:  (at pp.c:27754)
        ID: name='error' (at pp.c:27754)
  FuncDef:  (at pp.c:27758)
    Decl: name='Stm25pLogP__ClientResource__granted', quals=[], storage=['static'] (at pp.c:27758)
      FuncDecl: quals=None (at pp.c:27758)
        ParamList:  (at pp.c:27758)
          Decl: name='id', quals=[], storage=[] (at pp.c:27758)
            TypeDecl: declname='id', quals=[] (at pp.c:27758)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__ClientResource__granted', quals=[] (at pp.c:27758)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27760)
      If:  (at pp.c:27763)
        BinaryOp: op='&&' (at pp.c:27763)
          BinaryOp: op='==' (at pp.c:27763)
            StructRef: type='.' (at pp.c:27763)
              ArrayRef:  (at pp.c:27763)
                ID: name='Stm25pLogP__m_log_info' (at pp.c:27763)
                ID: name='id' (at pp.c:27763)
              ID: name='read_addr' (at pp.c:27763)
            ID: name='STM25P_INVALID_ADDRESS' (at pp.c:27763)
          BinaryOp: op='!=' (at pp.c:27764)
            StructRef: type='.' (at pp.c:27764)
              ArrayRef:  (at pp.c:27764)
                ID: name='Stm25pLogP__m_log_state' (at pp.c:27764)
                ID: name='id' (at pp.c:27764)
              ID: name='req' (at pp.c:27764)
            ID: name='Stm25pLogP__S_ERASE' (at pp.c:27764)
        Compound:  (at pp.c:27764)
          Assignment: op='=' (at pp.c:27765)
            ID: name='Stm25pLogP__m_rw_state' (at pp.c:27765)
            ID: name='Stm25pLogP__S_SEARCH_BLOCKS' (at pp.c:27765)
          FuncCall:  (at None)
            ID: name='Stm25pLogP__Sector__read' (at pp.c:27766)
            ExprList:  (at pp.c:27766)
              ID: name='id' (at pp.c:27766)
              Constant: type='int', value='0' (at pp.c:27766)
              Cast:  (at None)
                Typename: quals=[] (at None)
                  PtrDecl: quals=[] (at pp.c:27766)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint8_t'] (at None)
                UnaryOp: op='&' (at pp.c:27766)
                  ID: name='Stm25pLogP__m_addr' (at pp.c:27766)
              UnaryOp: op='sizeof' (at pp.c:27766)
                ID: name='Stm25pLogP__m_addr' (at pp.c:27766)
        Compound:  (at pp.c:27769)
          Switch:  (at pp.c:27770)
            StructRef: type='.' (at pp.c:27770)
              ArrayRef:  (at pp.c:27770)
                ID: name='Stm25pLogP__m_log_state' (at pp.c:27770)
                ID: name='id' (at pp.c:27770)
              ID: name='req' (at pp.c:27770)
            Compound:  (at pp.c:27770)
              Case:  (at pp.c:27771)
                ID: name='Stm25pLogP__S_READ' (at pp.c:27771)
                Assignment: op='=' (at pp.c:27772)
                  ID: name='Stm25pLogP__m_rw_state' (at pp.c:27772)
                  TernaryOp:  (at pp.c:27772)
                    StructRef: type='.' (at pp.c:27772)
                      ArrayRef:  (at pp.c:27772)
                        ID: name='Stm25pLogP__m_log_info' (at pp.c:27772)
                        ID: name='id' (at pp.c:27772)
                      ID: name='remaining' (at pp.c:27772)
                    ID: name='Stm25pLogP__S_DATA' (at pp.c:27772)
                    ID: name='Stm25pLogP__S_HEADER' (at pp.c:27772)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__continueReadOp' (at pp.c:27773)
                ExprList:  (at pp.c:27773)
                  ID: name='id' (at pp.c:27773)
              Break:  (at pp.c:27774)
              Case:  (at pp.c:27775)
                ID: name='Stm25pLogP__S_SEEK' (at pp.c:27775)
                Compound:  (at pp.c:27776)
                  Decl: name='numSectors', quals=[], storage=[] (at pp.c:27778)
                    TypeDecl: declname='numSectors', quals=[] (at pp.c:27778)
                      IdentifierType: names=['uint8_t'] (at None)
                    FuncCall:  (at None)
                      ID: name='Stm25pLogP__Sector__getNumSectors' (at pp.c:27778)
                      ExprList:  (at pp.c:27778)
                        ID: name='id' (at pp.c:27778)
                  Decl: name='readSector', quals=[], storage=[] (at pp.c:27779)
                    TypeDecl: declname='readSector', quals=[] (at pp.c:27779)
                      IdentifierType: names=['uint8_t'] (at None)
                    BinaryOp: op='>>' (at pp.c:27780)
                      StructRef: type='.' (at pp.c:27780)
                        ArrayRef:  (at pp.c:27780)
                          ID: name='Stm25pLogP__m_log_state' (at pp.c:27780)
                          ID: name='id' (at pp.c:27780)
                        ID: name='cookie' (at pp.c:27780)
                      ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:27780)
                  Decl: name='writeSector', quals=[], storage=[] (at pp.c:27781)
                    TypeDecl: declname='writeSector', quals=[] (at pp.c:27781)
                      IdentifierType: names=['uint8_t'] (at None)
                    BinaryOp: op='+' (at pp.c:27782)
                      BinaryOp: op='>>' (at pp.c:27782)
                        BinaryOp: op='-' (at pp.c:27782)
                          StructRef: type='.' (at pp.c:27782)
                            ArrayRef:  (at pp.c:27782)
                              ID: name='Stm25pLogP__m_log_info' (at pp.c:27782)
                              ID: name='id' (at pp.c:27782)
                            ID: name='write_addr' (at pp.c:27782)
                          Constant: type='int', value='1' (at pp.c:27782)
                        ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:27782)
                      Constant: type='int', value='1' (at pp.c:27782)
                  If:  (at pp.c:27784)
                    BinaryOp: op='>' (at pp.c:27784)
                      BinaryOp: op='-' (at pp.c:27784)
                        ID: name='writeSector' (at pp.c:27784)
                        ID: name='readSector' (at pp.c:27784)
                      ID: name='numSectors' (at pp.c:27784)
                    Compound:  (at pp.c:27784)
                      Assignment: op='=' (at pp.c:27785)
                        StructRef: type='.' (at pp.c:27785)
                          ArrayRef:  (at pp.c:27785)
                            ID: name='Stm25pLogP__m_log_state' (at pp.c:27785)
                            ID: name='id' (at pp.c:27785)
                          ID: name='cookie' (at pp.c:27785)
                        BinaryOp: op='<<' (at None)
                          Cast:  (at None)
                            Typename: quals=[] (at None)
                              TypeDecl: declname=None, quals=[] (at None)
                                IdentifierType: names=['storage_cookie_t'] (at None)
                            BinaryOp: op='-' (at pp.c:27786)
                              ID: name='writeSector' (at pp.c:27786)
                              ID: name='numSectors' (at pp.c:27786)
                          ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:27787)
                  Assignment: op='=' (at pp.c:27789)
                    StructRef: type='.' (at pp.c:27789)
                      ArrayRef:  (at pp.c:27789)
                        ID: name='Stm25pLogP__m_log_info' (at pp.c:27789)
                        ID: name='id' (at pp.c:27789)
                      ID: name='read_addr' (at pp.c:27789)
                    BinaryOp: op='&' (at pp.c:27789)
                      StructRef: type='.' (at pp.c:27789)
                        ArrayRef:  (at pp.c:27789)
                          ID: name='Stm25pLogP__m_log_state' (at pp.c:27789)
                          ID: name='id' (at pp.c:27789)
                        ID: name='cookie' (at pp.c:27789)
                      UnaryOp: op='~' (at pp.c:27789)
                        ID: name='Stm25pLogP__BLOCK_MASK' (at pp.c:27789)
                  Assignment: op='=' (at pp.c:27790)
                    StructRef: type='.' (at pp.c:27790)
                      ArrayRef:  (at pp.c:27790)
                        ID: name='Stm25pLogP__m_log_info' (at pp.c:27790)
                        ID: name='id' (at pp.c:27790)
                      ID: name='remaining' (at pp.c:27790)
                    Constant: type='int', value='0' (at pp.c:27790)
                  Assignment: op='=' (at pp.c:27791)
                    ID: name='Stm25pLogP__m_rw_state' (at pp.c:27791)
                    ID: name='Stm25pLogP__S_SEARCH_SEEK' (at pp.c:27791)
                  If:  (at pp.c:27792)
                    BinaryOp: op='!=' (at pp.c:27792)
                      StructRef: type='.' (at pp.c:27792)
                        ArrayRef:  (at pp.c:27792)
                          ID: name='Stm25pLogP__m_log_info' (at pp.c:27792)
                          ID: name='id' (at pp.c:27792)
                        ID: name='read_addr' (at pp.c:27792)
                      StructRef: type='.' (at pp.c:27792)
                        ArrayRef:  (at pp.c:27792)
                          ID: name='Stm25pLogP__m_log_state' (at pp.c:27792)
                          ID: name='id' (at pp.c:27792)
                        ID: name='cookie' (at pp.c:27792)
                    Compound:  (at pp.c:27792)
                      Assignment: op='+=' (at pp.c:27793)
                        StructRef: type='.' (at pp.c:27793)
                          ArrayRef:  (at pp.c:27793)
                            ID: name='Stm25pLogP__m_log_info' (at pp.c:27793)
                            ID: name='id' (at pp.c:27793)
                          ID: name='read_addr' (at pp.c:27793)
                        UnaryOp: op='sizeof' (at pp.c:27793)
                          ID: name='Stm25pLogP__m_addr' (at pp.c:27793)
                      FuncCall:  (at None)
                        ID: name='Stm25pLogP__Sector__read' (at pp.c:27794)
                        ExprList:  (at pp.c:27794)
                          ID: name='id' (at pp.c:27794)
                          FuncCall:  (at None)
                            ID: name='Stm25pLogP__calcAddr' (at pp.c:27794)
                            ExprList:  (at pp.c:27794)
                              ID: name='id' (at pp.c:27794)
                              StructRef: type='.' (at pp.c:27794)
                                ArrayRef:  (at pp.c:27794)
                                  ID: name='Stm25pLogP__m_log_info' (at pp.c:27794)
                                  ID: name='id' (at pp.c:27794)
                                ID: name='read_addr' (at pp.c:27794)
                          UnaryOp: op='&' (at pp.c:27795)
                            ID: name='Stm25pLogP__m_header' (at pp.c:27795)
                          UnaryOp: op='sizeof' (at pp.c:27795)
                            ID: name='Stm25pLogP__m_header' (at pp.c:27795)
                    Compound:  (at pp.c:27797)
                      FuncCall:  (at None)
                        ID: name='Stm25pLogP__signalDone' (at pp.c:27798)
                        ExprList:  (at pp.c:27798)
                          ID: name='id' (at pp.c:27798)
                          ID: name='SUCCESS' (at pp.c:27798)
              Break:  (at pp.c:27802)
              Case:  (at pp.c:27803)
                ID: name='Stm25pLogP__S_ERASE' (at pp.c:27803)
                FuncCall:  (at None)
                  ID: name='Stm25pLogP__Sector__erase' (at pp.c:27804)
                  ExprList:  (at pp.c:27804)
                    ID: name='id' (at pp.c:27804)
                    Constant: type='int', value='0' (at pp.c:27804)
                    FuncCall:  (at None)
                      ID: name='Stm25pLogP__Sector__getNumSectors' (at pp.c:27804)
                      ExprList:  (at pp.c:27804)
                        ID: name='id' (at pp.c:27804)
              Break:  (at pp.c:27805)
              Case:  (at pp.c:27806)
                ID: name='Stm25pLogP__S_APPEND' (at pp.c:27806)
                Assignment: op='=' (at pp.c:27807)
                  ID: name='Stm25pLogP__m_rw_state' (at pp.c:27807)
                  ID: name='Stm25pLogP__S_HEADER' (at pp.c:27807)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__continueAppendOp' (at pp.c:27808)
                ExprList:  (at pp.c:27808)
                  ID: name='id' (at pp.c:27808)
              Break:  (at pp.c:27809)
              Case:  (at pp.c:27810)
                ID: name='Stm25pLogP__S_SYNC' (at pp.c:27810)
                FuncCall:  (at None)
                  ID: name='Stm25pLogP__signalDone' (at pp.c:27811)
                  ExprList:  (at pp.c:27811)
                    ID: name='id' (at pp.c:27811)
                    ID: name='SUCCESS' (at pp.c:27811)
              Break:  (at pp.c:27812)
              Case:  (at pp.c:27813)
                ID: name='Stm25pLogP__S_IDLE' (at pp.c:27813)
                Break:  (at pp.c:27814)
  FuncDef:  (at pp.c:27820)
    Decl: name='Stm25pSectorP__Sector__read', quals=[], storage=['static'] (at pp.c:27820)
      FuncDecl: quals=None (at pp.c:27820)
        ParamList:  (at pp.c:27820)
          Decl: name='id', quals=[], storage=[] (at pp.c:27820)
            TypeDecl: declname='id', quals=[] (at pp.c:27820)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:27820)
            TypeDecl: declname='addr', quals=[] (at pp.c:27820)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:27820)
            PtrDecl: quals=[] (at pp.c:27820)
              TypeDecl: declname='buf', quals=[] (at pp.c:27820)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:27821)
            TypeDecl: declname='len', quals=[] (at pp.c:27821)
              IdentifierType: names=['stm25p_len_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__read', quals=[] (at pp.c:27820)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27823)
      Assignment: op='=' (at pp.c:27825)
        ID: name='Stm25pSectorP__m_state' (at pp.c:27825)
        ID: name='Stm25pSectorP__S_READ' (at pp.c:27825)
      Assignment: op='=' (at pp.c:27826)
        ID: name='Stm25pSectorP__m_addr' (at pp.c:27826)
        ID: name='addr' (at pp.c:27826)
      Assignment: op='=' (at pp.c:27827)
        ID: name='Stm25pSectorP__m_buf' (at pp.c:27827)
        ID: name='buf' (at pp.c:27827)
      Assignment: op='=' (at pp.c:27828)
        ID: name='Stm25pSectorP__m_len' (at pp.c:27828)
        ID: name='len' (at pp.c:27828)
      Return:  (at pp.c:27830)
        FuncCall:  (at None)
          ID: name='Stm25pSectorP__Spi__read' (at pp.c:27830)
          ExprList:  (at None)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__physicalAddr' (at pp.c:27830)
              ExprList:  (at pp.c:27830)
                ID: name='id' (at pp.c:27830)
                ID: name='addr' (at pp.c:27830)
            ID: name='buf' (at pp.c:27830)
            ID: name='len' (at pp.c:27830)
  FuncDef:  (at pp.c:27834)
    Decl: name='Stm25pSpiP__newRequest', quals=[], storage=['static'] (at pp.c:27834)
      FuncDecl: quals=None (at pp.c:27834)
        ParamList:  (at pp.c:27834)
          Decl: name='write', quals=[], storage=[] (at pp.c:27834)
            TypeDecl: declname='write', quals=[] (at pp.c:27834)
              IdentifierType: names=['bool'] (at None)
          Decl: name='cmd_len', quals=[], storage=[] (at pp.c:27834)
            TypeDecl: declname='cmd_len', quals=[] (at pp.c:27834)
              IdentifierType: names=['stm25p_len_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__newRequest', quals=[] (at pp.c:27834)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27836)
      Assignment: op='=' (at pp.c:27837)
        ArrayRef:  (at pp.c:27837)
          ID: name='Stm25pSpiP__m_cmd' (at pp.c:27837)
          Constant: type='int', value='1' (at pp.c:27837)
        BinaryOp: op='>>' (at pp.c:27837)
          ID: name='Stm25pSpiP__m_addr' (at pp.c:27837)
          Constant: type='int', value='16' (at pp.c:27837)
      Assignment: op='=' (at pp.c:27838)
        ArrayRef:  (at pp.c:27838)
          ID: name='Stm25pSpiP__m_cmd' (at pp.c:27838)
          Constant: type='int', value='2' (at pp.c:27838)
        BinaryOp: op='>>' (at pp.c:27838)
          ID: name='Stm25pSpiP__m_addr' (at pp.c:27838)
          Constant: type='int', value='8' (at pp.c:27838)
      Assignment: op='=' (at pp.c:27839)
        ArrayRef:  (at pp.c:27839)
          ID: name='Stm25pSpiP__m_cmd' (at pp.c:27839)
          Constant: type='int', value='3' (at pp.c:27839)
        ID: name='Stm25pSpiP__m_addr' (at pp.c:27839)
      If:  (at pp.c:27840)
        ID: name='write' (at pp.c:27840)
        Compound:  (at pp.c:27840)
          FuncCall:  (at None)
            ID: name='Stm25pSpiP__sendCmd' (at pp.c:27841)
            ExprList:  (at pp.c:27841)
              ID: name='Stm25pSpiP__S_WRITE_ENABLE' (at pp.c:27841)
              Constant: type='int', value='1' (at pp.c:27841)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__CSN__clr' (at pp.c:27844)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__SpiPacket__send' (at pp.c:27845)
        ExprList:  (at pp.c:27845)
          ID: name='Stm25pSpiP__m_cmd' (at pp.c:27845)
          Cast:  (at None)
            Typename: quals=[] (at None)
              PtrDecl: quals=[] (at pp.c:27845)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['void'] (at None)
            Constant: type='int', value='0' (at pp.c:27845)
          ID: name='cmd_len' (at pp.c:27845)
      Return:  (at pp.c:27846)
        ID: name='SUCCESS' (at pp.c:27846)
  FuncDef:  (at pp.c:27850)
    Decl: name='Stm25pLogP__continueReadOp', quals=[], storage=['static'] (at pp.c:27850)
      FuncDecl: quals=None (at pp.c:27850)
        ParamList:  (at pp.c:27850)
          Decl: name='client', quals=[], storage=[] (at pp.c:27850)
            TypeDecl: declname='client', quals=[] (at pp.c:27850)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__continueReadOp', quals=[] (at pp.c:27850)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27852)
      Decl: name='read_addr', quals=[], storage=[] (at pp.c:27854)
        TypeDecl: declname='read_addr', quals=[] (at pp.c:27854)
          IdentifierType: names=['stm25p_addr_t'] (at None)
        StructRef: type='.' (at pp.c:27854)
          ArrayRef:  (at pp.c:27854)
            ID: name='Stm25pLogP__m_log_info' (at pp.c:27854)
            ID: name='client' (at pp.c:27854)
          ID: name='read_addr' (at pp.c:27854)
      Decl: name='buf', quals=[], storage=[] (at pp.c:27855)
        PtrDecl: quals=[] (at pp.c:27855)
          TypeDecl: declname='buf', quals=[] (at pp.c:27855)
            IdentifierType: names=['uint8_t'] (at None)
      Decl: name='len', quals=[], storage=[] (at pp.c:27856)
        TypeDecl: declname='len', quals=[] (at pp.c:27856)
          IdentifierType: names=['uint8_t'] (at None)
      If:  (at pp.c:27859)
        BinaryOp: op='||' (at pp.c:27859)
          BinaryOp: op='==' (at pp.c:27859)
            ID: name='Stm25pLogP__m_len' (at pp.c:27859)
            Constant: type='int', value='0' (at pp.c:27859)
          BinaryOp: op='>=' (at pp.c:27859)
            ID: name='read_addr' (at pp.c:27859)
            StructRef: type='.' (at pp.c:27859)
              ArrayRef:  (at pp.c:27859)
                ID: name='Stm25pLogP__m_log_info' (at pp.c:27859)
                ID: name='client' (at pp.c:27859)
              ID: name='write_addr' (at pp.c:27859)
        Compound:  (at pp.c:27859)
          FuncCall:  (at None)
            ID: name='Stm25pLogP__signalDone' (at pp.c:27860)
            ExprList:  (at pp.c:27860)
              ID: name='client' (at pp.c:27860)
              ID: name='SUCCESS' (at pp.c:27860)
          Return:  (at pp.c:27861)
      Assignment: op='=' (at pp.c:27864)
        ID: name='buf' (at pp.c:27864)
        UnaryOp: op='&' (at pp.c:27864)
          ID: name='Stm25pLogP__m_header' (at pp.c:27864)
      Assignment: op='=' (at pp.c:27865)
        ID: name='len' (at pp.c:27865)
        UnaryOp: op='sizeof' (at pp.c:27865)
          ID: name='Stm25pLogP__m_header' (at pp.c:27865)
      If:  (at pp.c:27867)
        BinaryOp: op='==' (at pp.c:27867)
          ID: name='Stm25pLogP__m_rw_state' (at pp.c:27867)
          ID: name='Stm25pLogP__S_DATA' (at pp.c:27867)
        Compound:  (at pp.c:27867)
          If:  (at pp.c:27869)
            BinaryOp: op='==' (at pp.c:27869)
              ID: name='Stm25pLogP__m_header' (at pp.c:27869)
              ID: name='Stm25pLogP__INVALID_HEADER' (at pp.c:27869)
            Compound:  (at pp.c:27869)
              Assignment: op='=' (at pp.c:27870)
                ID: name='Stm25pLogP__m_rw_state' (at pp.c:27870)
                ID: name='Stm25pLogP__S_HEADER' (at pp.c:27870)
              Assignment: op='+=' (at pp.c:27871)
                ID: name='read_addr' (at pp.c:27871)
                ID: name='Stm25pLogP__BLOCK_SIZE' (at pp.c:27871)
              Assignment: op='&=' (at pp.c:27872)
                ID: name='read_addr' (at pp.c:27872)
                UnaryOp: op='~' (at pp.c:27872)
                  ID: name='Stm25pLogP__BLOCK_MASK' (at pp.c:27872)
            Compound:  (at pp.c:27874)
              Assignment: op='=' (at pp.c:27875)
                ID: name='buf' (at pp.c:27875)
                BinaryOp: op='-' (at pp.c:27875)
                  BinaryOp: op='+' (at pp.c:27875)
                    StructRef: type='.' (at pp.c:27875)
                      ArrayRef:  (at pp.c:27875)
                        ID: name='Stm25pLogP__m_log_state' (at pp.c:27875)
                        ID: name='client' (at pp.c:27875)
                      ID: name='buf' (at pp.c:27875)
                    StructRef: type='.' (at pp.c:27875)
                      ArrayRef:  (at pp.c:27875)
                        ID: name='Stm25pLogP__m_log_state' (at pp.c:27875)
                        ID: name='client' (at pp.c:27875)
                      ID: name='len' (at pp.c:27875)
                  ID: name='Stm25pLogP__m_len' (at pp.c:27875)
              If:  (at pp.c:27877)
                BinaryOp: op='<' (at pp.c:27877)
                  StructRef: type='.' (at pp.c:27877)
                    ArrayRef:  (at pp.c:27877)
                      ID: name='Stm25pLogP__m_log_info' (at pp.c:27877)
                      ID: name='client' (at pp.c:27877)
                    ID: name='remaining' (at pp.c:27877)
                  ID: name='Stm25pLogP__m_len' (at pp.c:27877)
                Compound:  (at pp.c:27877)
                  Assignment: op='=' (at pp.c:27878)
                    ID: name='len' (at pp.c:27878)
                    StructRef: type='.' (at pp.c:27878)
                      ArrayRef:  (at pp.c:27878)
                        ID: name='Stm25pLogP__m_log_info' (at pp.c:27878)
                        ID: name='client' (at pp.c:27878)
                      ID: name='remaining' (at pp.c:27878)
                Compound:  (at pp.c:27880)
                  Assignment: op='=' (at pp.c:27882)
                    ID: name='len' (at pp.c:27882)
                    ID: name='Stm25pLogP__m_len' (at pp.c:27882)
      If:  (at pp.c:27887)
        UnaryOp: op='!' (at None)
          BinaryOp: op='&' (at None)
            Cast:  (at None)
              Typename: quals=[] (at None)
                TypeDecl: declname=None, quals=[] (at None)
                  IdentifierType: names=['uint16_t'] (at None)
              ID: name='read_addr' (at pp.c:27887)
            ID: name='Stm25pLogP__BLOCK_MASK' (at pp.c:27887)
        Compound:  (at pp.c:27887)
          Assignment: op='+=' (at pp.c:27888)
            ID: name='read_addr' (at pp.c:27888)
            UnaryOp: op='sizeof' (at pp.c:27888)
              ID: name='Stm25pLogP__m_addr' (at pp.c:27888)
      Assignment: op='=' (at pp.c:27890)
        StructRef: type='.' (at pp.c:27890)
          ArrayRef:  (at pp.c:27890)
            ID: name='Stm25pLogP__m_log_info' (at pp.c:27890)
            ID: name='client' (at pp.c:27890)
          ID: name='read_addr' (at pp.c:27890)
        ID: name='read_addr' (at pp.c:27890)
      FuncCall:  (at None)
        ID: name='Stm25pLogP__Sector__read' (at pp.c:27891)
        ExprList:  (at pp.c:27891)
          ID: name='client' (at pp.c:27891)
          FuncCall:  (at None)
            ID: name='Stm25pLogP__calcAddr' (at pp.c:27891)
            ExprList:  (at pp.c:27891)
              ID: name='client' (at pp.c:27891)
              ID: name='read_addr' (at pp.c:27891)
          ID: name='buf' (at pp.c:27891)
          ID: name='len' (at pp.c:27891)
  FuncDef:  (at pp.c:27895)
    Decl: name='Stm25pLogP__signalDone', quals=[], storage=['static'] (at pp.c:27895)
      FuncDecl: quals=None (at pp.c:27895)
        ParamList:  (at pp.c:27895)
          Decl: name='id', quals=[], storage=[] (at pp.c:27895)
            TypeDecl: declname='id', quals=[] (at pp.c:27895)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:27895)
            TypeDecl: declname='error', quals=[] (at pp.c:27895)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pLogP__signalDone', quals=[] (at pp.c:27895)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27897)
      Decl: name='req', quals=[], storage=[] (at pp.c:27899)
        TypeDecl: declname='req', quals=[] (at pp.c:27899)
          IdentifierType: names=['Stm25pLogP__stm25p_log_req_t'] (at None)
        StructRef: type='.' (at pp.c:27899)
          ArrayRef:  (at pp.c:27899)
            ID: name='Stm25pLogP__m_log_state' (at pp.c:27899)
            ID: name='id' (at pp.c:27899)
          ID: name='req' (at pp.c:27899)
      Decl: name='buf', quals=[], storage=[] (at pp.c:27900)
        PtrDecl: quals=[] (at pp.c:27900)
          TypeDecl: declname='buf', quals=[] (at pp.c:27900)
            IdentifierType: names=['void'] (at None)
        StructRef: type='.' (at pp.c:27900)
          ArrayRef:  (at pp.c:27900)
            ID: name='Stm25pLogP__m_log_state' (at pp.c:27900)
            ID: name='id' (at pp.c:27900)
          ID: name='buf' (at pp.c:27900)
      Decl: name='len', quals=[], storage=[] (at pp.c:27901)
        TypeDecl: declname='len', quals=[] (at pp.c:27901)
          IdentifierType: names=['storage_len_t'] (at None)
        StructRef: type='.' (at pp.c:27901)
          ArrayRef:  (at pp.c:27901)
            ID: name='Stm25pLogP__m_log_state' (at pp.c:27901)
            ID: name='id' (at pp.c:27901)
          ID: name='len' (at pp.c:27901)
      FuncCall:  (at None)
        ID: name='Stm25pLogP__ClientResource__release' (at pp.c:27903)
        ExprList:  (at pp.c:27903)
          ID: name='id' (at pp.c:27903)
      Assignment: op='=' (at pp.c:27904)
        StructRef: type='.' (at pp.c:27904)
          ArrayRef:  (at pp.c:27904)
            ID: name='Stm25pLogP__m_log_state' (at pp.c:27904)
            ID: name='id' (at pp.c:27904)
          ID: name='req' (at pp.c:27904)
        ID: name='Stm25pLogP__S_IDLE' (at pp.c:27904)
      Switch:  (at pp.c:27905)
        ID: name='req' (at pp.c:27905)
        Compound:  (at pp.c:27905)
          Case:  (at pp.c:27906)
            ID: name='Stm25pLogP__S_IDLE' (at pp.c:27906)
            Break:  (at pp.c:27907)
          Case:  (at pp.c:27908)
            ID: name='Stm25pLogP__S_READ' (at pp.c:27908)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Read__readDone' (at pp.c:27909)
              ExprList:  (at pp.c:27909)
                ID: name='id' (at pp.c:27909)
                ID: name='buf' (at pp.c:27909)
                BinaryOp: op='-' (at pp.c:27909)
                  ID: name='len' (at pp.c:27909)
                  ID: name='Stm25pLogP__m_len' (at pp.c:27909)
                ID: name='error' (at pp.c:27909)
          Break:  (at pp.c:27910)
          Case:  (at pp.c:27911)
            ID: name='Stm25pLogP__S_SEEK' (at pp.c:27911)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Read__seekDone' (at pp.c:27912)
              ExprList:  (at pp.c:27912)
                ID: name='id' (at pp.c:27912)
                ID: name='error' (at pp.c:27912)
          Break:  (at pp.c:27913)
          Case:  (at pp.c:27914)
            ID: name='Stm25pLogP__S_ERASE' (at pp.c:27914)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Write__eraseDone' (at pp.c:27915)
              ExprList:  (at pp.c:27915)
                ID: name='id' (at pp.c:27915)
                ID: name='error' (at pp.c:27915)
          Break:  (at pp.c:27916)
          Case:  (at pp.c:27917)
            ID: name='Stm25pLogP__S_APPEND' (at pp.c:27917)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Write__appendDone' (at pp.c:27918)
              ExprList:  (at pp.c:27918)
                ID: name='id' (at pp.c:27918)
                ID: name='buf' (at pp.c:27918)
                ID: name='len' (at pp.c:27918)
                ID: name='Stm25pLogP__m_records_lost' (at pp.c:27918)
                ID: name='error' (at pp.c:27918)
          Break:  (at pp.c:27919)
          Case:  (at pp.c:27920)
            ID: name='Stm25pLogP__S_SYNC' (at pp.c:27920)
            FuncCall:  (at None)
              ID: name='Stm25pLogP__Write__syncDone' (at pp.c:27921)
              ExprList:  (at pp.c:27921)
                ID: name='id' (at pp.c:27921)
                ID: name='error' (at pp.c:27921)
          Break:  (at pp.c:27922)
  FuncDef:  (at pp.c:27927)
    Decl: name='LowPowerSensingPeriodicSamplerC__SampleLogRead__readDone', quals=[], storage=['static'] (at pp.c:27927)
      FuncDecl: quals=None (at pp.c:27927)
        ParamList:  (at pp.c:27927)
          Decl: name='sample', quals=[], storage=[] (at pp.c:27927)
            PtrDecl: quals=[] (at pp.c:27927)
              TypeDecl: declname='sample', quals=[] (at pp.c:27927)
                IdentifierType: names=['sensor_sample_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:27927)
            TypeDecl: declname='error', quals=[] (at pp.c:27927)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='LowPowerSensingPeriodicSamplerC__SampleLogRead__readDone', quals=[] (at pp.c:27927)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27929)
      If:  (at pp.c:27930)
        BinaryOp: op='==' (at pp.c:27930)
          ID: name='error' (at pp.c:27930)
          ID: name='SUCCESS' (at pp.c:27930)
        Compound:  (at pp.c:27930)
          Decl: name='nx_sample', quals=[], storage=[] (at pp.c:27931)
            PtrDecl: quals=[] (at pp.c:27931)
              TypeDecl: declname='nx_sample', quals=[] (at pp.c:27931)
                IdentifierType: names=['nx_sensor_sample_t'] (at None)
            FuncCall:  (at None)
              ID: name='LowPowerSensingPeriodicSamplerC__SampleSend__getPayload' (at pp.c:27931)
              ExprList:  (at pp.c:27931)
                UnaryOp: op='&' (at pp.c:27931)
                  ID: name='LowPowerSensingPeriodicSamplerC__sample_msg' (at pp.c:27931)
                UnaryOp: op='sizeof' (at pp.c:27931)
                  ID: name='nx_sample' (at pp.c:27931)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__SampleNxConverter__copyToNx' (at pp.c:27934)
            ExprList:  (at pp.c:27934)
              ID: name='nx_sample' (at pp.c:27934)
              ID: name='sample' (at pp.c:27934)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__sendSampleMsg' (at pp.c:27935)
        Compound:  (at pp.c:27937)
          FuncCall:  (at None)
            ID: name='LowPowerSensingPeriodicSamplerC__readNextTask__postTask' (at pp.c:27939)
  FuncDef:  (at pp.c:27944)
    Decl: name='PeriodicSampleLoggerP__0__readSensors', quals=[], storage=['static'] (at pp.c:27944)
      FuncDecl: quals=None (at pp.c:27944)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__readSensors', quals=[] (at pp.c:27944)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:27946)
      Decl: name='i', quals=[], storage=[] (at pp.c:27947)
        TypeDecl: declname='i', quals=[] (at pp.c:27947)
          IdentifierType: names=['int'] (at None)
      For:  (at pp.c:27950)
        Assignment: op='=' (at pp.c:27950)
          ID: name='i' (at pp.c:27950)
          Constant: type='int', value='0' (at pp.c:27950)
        BinaryOp: op='<' (at pp.c:27950)
          ID: name='i' (at pp.c:27950)
          Constant: type='int', value='1' (at pp.c:27950)
        UnaryOp: op='p++' (at pp.c:27950)
          ID: name='i' (at pp.c:27950)
        FuncCall:  (at None)
          ID: name='PeriodicSampleLoggerP__0__Sensor__read' (at pp.c:27951)
          ExprList:  (at pp.c:27951)
            ID: name='i' (at pp.c:27951)
  FuncDef:  (at pp.c:27955)
    Decl: name='Stm25pLogP__calcAddr', quals=[], storage=['static'] (at pp.c:27955)
      FuncDecl: quals=None (at pp.c:27955)
        ParamList:  (at pp.c:27955)
          Decl: name='client', quals=[], storage=[] (at pp.c:27955)
            TypeDecl: declname='client', quals=[] (at pp.c:27955)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:27955)
            TypeDecl: declname='addr', quals=[] (at pp.c:27955)
              IdentifierType: names=['stm25p_addr_t'] (at None)
        TypeDecl: declname='Stm25pLogP__calcAddr', quals=[] (at pp.c:27955)
          IdentifierType: names=['stm25p_addr_t'] (at None)
    Compound:  (at pp.c:27957)
      Decl: name='result', quals=[], storage=[] (at pp.c:27958)
        TypeDecl: declname='result', quals=[] (at pp.c:27958)
          IdentifierType: names=['stm25p_addr_t'] (at None)
        FuncCall:  (at None)
          ID: name='Stm25pLogP__calcSector' (at pp.c:27958)
          ExprList:  (at pp.c:27958)
            ID: name='client' (at pp.c:27958)
            ID: name='addr' (at pp.c:27958)
      Assignment: op='<<=' (at pp.c:27961)
        ID: name='result' (at pp.c:27961)
        ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:27961)
      Assignment: op='|=' (at pp.c:27962)
        ID: name='result' (at pp.c:27962)
        BinaryOp: op='&' (at pp.c:27962)
          ID: name='addr' (at pp.c:27962)
          ID: name='STM25P_SECTOR_MASK' (at pp.c:27962)
      Return:  (at pp.c:27963)
        ID: name='result' (at pp.c:27963)
  FuncDef:  (at pp.c:27967)
    Decl: name='Stm25pSectorP__Sector__getNumSectors', quals=[], storage=['static'] (at pp.c:27967)
      FuncDecl: quals=None (at pp.c:27967)
        ParamList:  (at pp.c:27967)
          Decl: name='id', quals=[], storage=[] (at pp.c:27967)
            TypeDecl: declname='id', quals=[] (at pp.c:27967)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__getNumSectors', quals=[] (at pp.c:27967)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:27969)
      Return:  (at pp.c:27970)
        StructRef: type='.' (at pp.c:27970)
          ArrayRef:  (at pp.c:27970)
            ID: name='STM25P_VMAP' (at pp.c:27970)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__getVolumeId' (at pp.c:27970)
              ExprList:  (at pp.c:27970)
                ID: name='id' (at pp.c:27970)
          ID: name='size' (at pp.c:27970)
  FuncDef:  (at pp.c:27974)
    Decl: name='Stm25pSectorP__Sector__erase', quals=[], storage=['static'] (at pp.c:27974)
      FuncDecl: quals=None (at pp.c:27974)
        ParamList:  (at pp.c:27974)
          Decl: name='id', quals=[], storage=[] (at pp.c:27974)
            TypeDecl: declname='id', quals=[] (at pp.c:27974)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='sector', quals=[], storage=[] (at pp.c:27974)
            TypeDecl: declname='sector', quals=[] (at pp.c:27974)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='num_sectors', quals=[], storage=[] (at pp.c:27975)
            TypeDecl: declname='num_sectors', quals=[] (at pp.c:27975)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__erase', quals=[] (at pp.c:27974)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27977)
      Assignment: op='=' (at pp.c:27979)
        ID: name='Stm25pSectorP__m_state' (at pp.c:27979)
        ID: name='Stm25pSectorP__S_ERASE' (at pp.c:27979)
      Assignment: op='=' (at pp.c:27980)
        ID: name='Stm25pSectorP__m_addr' (at pp.c:27980)
        ID: name='sector' (at pp.c:27980)
      Assignment: op='=' (at pp.c:27981)
        ID: name='Stm25pSectorP__m_len' (at pp.c:27981)
        ID: name='num_sectors' (at pp.c:27981)
      Assignment: op='=' (at pp.c:27982)
        ID: name='Stm25pSectorP__m_cur_len' (at pp.c:27982)
        Constant: type='int', value='0' (at pp.c:27982)
      Return:  (at pp.c:27984)
        FuncCall:  (at None)
          ID: name='Stm25pSectorP__Spi__sectorErase' (at pp.c:27984)
          ExprList:  (at pp.c:27984)
            BinaryOp: op='+' (at pp.c:27984)
              BinaryOp: op='+' (at pp.c:27984)
                StructRef: type='.' (at pp.c:27984)
                  ArrayRef:  (at pp.c:27984)
                    ID: name='STM25P_VMAP' (at pp.c:27984)
                    FuncCall:  (at None)
                      ID: name='Stm25pSectorP__getVolumeId' (at pp.c:27984)
                      ExprList:  (at pp.c:27984)
                        ID: name='id' (at pp.c:27984)
                  ID: name='base' (at pp.c:27984)
                ID: name='Stm25pSectorP__m_addr' (at pp.c:27984)
              ID: name='Stm25pSectorP__m_cur_len' (at pp.c:27985)
  FuncDef:  (at pp.c:27989)
    Decl: name='Stm25pSpiP__Spi__sectorErase', quals=[], storage=['static'] (at pp.c:27989)
      FuncDecl: quals=None (at pp.c:27989)
        ParamList:  (at pp.c:27989)
          Decl: name='sector', quals=[], storage=[] (at pp.c:27989)
            TypeDecl: declname='sector', quals=[] (at pp.c:27989)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__Spi__sectorErase', quals=[] (at pp.c:27989)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:27991)
      Assignment: op='=' (at pp.c:27992)
        ArrayRef:  (at pp.c:27992)
          ID: name='Stm25pSpiP__m_cmd' (at pp.c:27992)
          Constant: type='int', value='0' (at pp.c:27992)
        ID: name='Stm25pSpiP__S_SECTOR_ERASE' (at pp.c:27992)
      Assignment: op='=' (at pp.c:27993)
        ID: name='Stm25pSpiP__m_addr' (at pp.c:27993)
        BinaryOp: op='<<' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['stm25p_addr_t'] (at None)
            ID: name='sector' (at pp.c:27993)
          ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:27993)
      Return:  (at pp.c:27994)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__newRequest' (at pp.c:27994)
          ExprList:  (at pp.c:27994)
            ID: name='TRUE' (at pp.c:27994)
            Constant: type='int', value='4' (at pp.c:27994)
  FuncDef:  (at pp.c:27998)
    Decl: name='Stm25pLogP__continueAppendOp', quals=[], storage=['static'] (at pp.c:27998)
      FuncDecl: quals=None (at pp.c:27998)
        ParamList:  (at pp.c:27998)
          Decl: name='client', quals=[], storage=[] (at pp.c:27998)
            TypeDecl: declname='client', quals=[] (at pp.c:27998)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Stm25pLogP__continueAppendOp', quals=[] (at pp.c:27998)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28000)
      Decl: name='write_addr', quals=[], storage=[] (at pp.c:28002)
        TypeDecl: declname='write_addr', quals=[] (at pp.c:28002)
          IdentifierType: names=['stm25p_addr_t'] (at None)
        StructRef: type='.' (at pp.c:28002)
          ArrayRef:  (at pp.c:28002)
            ID: name='Stm25pLogP__m_log_info' (at pp.c:28002)
            ID: name='client' (at pp.c:28002)
          ID: name='write_addr' (at pp.c:28002)
      Decl: name='buf', quals=[], storage=[] (at pp.c:28003)
        PtrDecl: quals=[] (at pp.c:28003)
          TypeDecl: declname='buf', quals=[] (at pp.c:28003)
            IdentifierType: names=['void'] (at None)
      Decl: name='len', quals=[], storage=[] (at pp.c:28004)
        TypeDecl: declname='len', quals=[] (at pp.c:28004)
          IdentifierType: names=['uint8_t'] (at None)
      If:  (at pp.c:28006)
        UnaryOp: op='!' (at None)
          Cast:  (at None)
            Typename: quals=[] (at None)
              TypeDecl: declname=None, quals=[] (at None)
                IdentifierType: names=['uint16_t'] (at None)
            ID: name='write_addr' (at pp.c:28006)
        Compound:  (at pp.c:28006)
          Assignment: op='=' (at pp.c:28007)
            ID: name='Stm25pLogP__m_records_lost' (at pp.c:28007)
            ID: name='TRUE' (at pp.c:28007)
          FuncCall:  (at None)
            ID: name='Stm25pLogP__Sector__erase' (at pp.c:28008)
            ExprList:  (at pp.c:28008)
              ID: name='client' (at pp.c:28008)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__calcSector' (at pp.c:28008)
                ExprList:  (at pp.c:28008)
                  ID: name='client' (at pp.c:28008)
                  ID: name='write_addr' (at pp.c:28008)
              Constant: type='int', value='1' (at pp.c:28008)
        Compound:  (at pp.c:28010)
          If:  (at pp.c:28011)
            UnaryOp: op='!' (at None)
              BinaryOp: op='&' (at None)
                Cast:  (at None)
                  Typename: quals=[] (at None)
                    TypeDecl: declname=None, quals=[] (at None)
                      IdentifierType: names=['uint16_t'] (at None)
                  ID: name='write_addr' (at pp.c:28011)
                ID: name='Stm25pLogP__BLOCK_MASK' (at pp.c:28011)
            Compound:  (at pp.c:28011)
              Assignment: op='=' (at pp.c:28012)
                ID: name='buf' (at pp.c:28012)
                UnaryOp: op='&' (at pp.c:28012)
                  StructRef: type='.' (at pp.c:28012)
                    ArrayRef:  (at pp.c:28012)
                      ID: name='Stm25pLogP__m_log_info' (at pp.c:28012)
                      ID: name='client' (at pp.c:28012)
                    ID: name='write_addr' (at pp.c:28012)
              Assignment: op='=' (at pp.c:28013)
                ID: name='len' (at pp.c:28013)
                UnaryOp: op='sizeof' (at pp.c:28013)
                  ID: name='Stm25pLogP__m_addr' (at pp.c:28013)
            Compound:  (at pp.c:28015)
              If:  (at pp.c:28017)
                BinaryOp: op='==' (at pp.c:28017)
                  ID: name='Stm25pLogP__m_rw_state' (at pp.c:28017)
                  ID: name='Stm25pLogP__S_HEADER' (at pp.c:28017)
                Compound:  (at pp.c:28017)
                  Assignment: op='=' (at pp.c:28018)
                    ID: name='buf' (at pp.c:28018)
                    UnaryOp: op='&' (at pp.c:28018)
                      StructRef: type='.' (at pp.c:28018)
                        ArrayRef:  (at pp.c:28018)
                          ID: name='Stm25pLogP__m_log_state' (at pp.c:28018)
                          ID: name='client' (at pp.c:28018)
                        ID: name='len' (at pp.c:28018)
                  Assignment: op='=' (at pp.c:28019)
                    ID: name='len' (at pp.c:28019)
                    UnaryOp: op='sizeof' (at pp.c:28019)
                      StructRef: type='.' (at pp.c:28019)
                        ArrayRef:  (at pp.c:28019)
                          ID: name='Stm25pLogP__m_log_state' (at pp.c:28019)
                          ID: name='client' (at pp.c:28019)
                        ID: name='len' (at pp.c:28019)
                Compound:  (at pp.c:28021)
                  Assignment: op='=' (at pp.c:28022)
                    ID: name='buf' (at pp.c:28022)
                    StructRef: type='.' (at pp.c:28022)
                      ArrayRef:  (at pp.c:28022)
                        ID: name='Stm25pLogP__m_log_state' (at pp.c:28022)
                        ID: name='client' (at pp.c:28022)
                      ID: name='buf' (at pp.c:28022)
                  Assignment: op='=' (at pp.c:28023)
                    ID: name='len' (at pp.c:28023)
                    StructRef: type='.' (at pp.c:28023)
                      ArrayRef:  (at pp.c:28023)
                        ID: name='Stm25pLogP__m_log_state' (at pp.c:28023)
                        ID: name='client' (at pp.c:28023)
                      ID: name='len' (at pp.c:28023)
          FuncCall:  (at None)
            ID: name='Stm25pLogP__Sector__write' (at pp.c:28027)
            ExprList:  (at pp.c:28027)
              ID: name='client' (at pp.c:28027)
              FuncCall:  (at None)
                ID: name='Stm25pLogP__calcAddr' (at pp.c:28027)
                ExprList:  (at pp.c:28027)
                  ID: name='client' (at pp.c:28027)
                  ID: name='write_addr' (at pp.c:28027)
              ID: name='buf' (at pp.c:28027)
              ID: name='len' (at pp.c:28027)
  FuncDef:  (at pp.c:28032)
    Decl: name='Stm25pSectorP__Sector__write', quals=[], storage=['static'] (at pp.c:28032)
      FuncDecl: quals=None (at pp.c:28032)
        ParamList:  (at pp.c:28032)
          Decl: name='id', quals=[], storage=[] (at pp.c:28032)
            TypeDecl: declname='id', quals=[] (at pp.c:28032)
              IdentifierType: names=['uint8_t'] (at None)
          Decl: name='addr', quals=[], storage=[] (at pp.c:28032)
            TypeDecl: declname='addr', quals=[] (at pp.c:28032)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:28033)
            PtrDecl: quals=[] (at pp.c:28033)
              TypeDecl: declname='buf', quals=[] (at pp.c:28033)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:28034)
            TypeDecl: declname='len', quals=[] (at pp.c:28034)
              IdentifierType: names=['stm25p_len_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__Sector__write', quals=[] (at pp.c:28032)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:28036)
      Assignment: op='=' (at pp.c:28038)
        ID: name='Stm25pSectorP__m_state' (at pp.c:28038)
        ID: name='Stm25pSectorP__S_WRITE' (at pp.c:28038)
      Assignment: op='=' (at pp.c:28039)
        ID: name='Stm25pSectorP__m_addr' (at pp.c:28039)
        ID: name='addr' (at pp.c:28039)
      Assignment: op='=' (at pp.c:28040)
        ID: name='Stm25pSectorP__m_buf' (at pp.c:28040)
        ID: name='buf' (at pp.c:28040)
      Assignment: op='=' (at pp.c:28041)
        ID: name='Stm25pSectorP__m_len' (at pp.c:28041)
        Assignment: op='=' (at pp.c:28041)
          ID: name='Stm25pSectorP__m_cur_len' (at pp.c:28041)
          ID: name='len' (at pp.c:28041)
      Return:  (at pp.c:28043)
        FuncCall:  (at None)
          ID: name='Stm25pSectorP__Spi__pageProgram' (at pp.c:28043)
          ExprList:  (at None)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__physicalAddr' (at pp.c:28043)
              ExprList:  (at pp.c:28043)
                ID: name='id' (at pp.c:28043)
                ID: name='addr' (at pp.c:28043)
            ID: name='buf' (at pp.c:28043)
            FuncCall:  (at None)
              ID: name='Stm25pSectorP__calcWriteLen' (at pp.c:28044)
              ExprList:  (at pp.c:28044)
                ID: name='addr' (at pp.c:28044)
  FuncDef:  (at pp.c:28048)
    Decl: name='Stm25pSpiP__Spi__pageProgram', quals=[], storage=['static'] (at pp.c:28048)
      FuncDecl: quals=None (at pp.c:28048)
        ParamList:  (at pp.c:28048)
          Decl: name='addr', quals=[], storage=[] (at pp.c:28048)
            TypeDecl: declname='addr', quals=[] (at pp.c:28048)
              IdentifierType: names=['stm25p_addr_t'] (at None)
          Decl: name='buf', quals=[], storage=[] (at pp.c:28048)
            PtrDecl: quals=[] (at pp.c:28048)
              TypeDecl: declname='buf', quals=[] (at pp.c:28048)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:28049)
            TypeDecl: declname='len', quals=[] (at pp.c:28049)
              IdentifierType: names=['stm25p_len_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__Spi__pageProgram', quals=[] (at pp.c:28048)
          IdentifierType: names=['error_t'] (at None)
    Compound:  (at pp.c:28051)
      Assignment: op='=' (at pp.c:28052)
        ArrayRef:  (at pp.c:28052)
          ID: name='Stm25pSpiP__m_cmd' (at pp.c:28052)
          Constant: type='int', value='0' (at pp.c:28052)
        ID: name='Stm25pSpiP__S_PAGE_PROGRAM' (at pp.c:28052)
      Assignment: op='=' (at pp.c:28053)
        ID: name='Stm25pSpiP__m_addr' (at pp.c:28053)
        ID: name='addr' (at pp.c:28053)
      Assignment: op='=' (at pp.c:28054)
        ID: name='Stm25pSpiP__m_buf' (at pp.c:28054)
        ID: name='buf' (at pp.c:28054)
      Assignment: op='=' (at pp.c:28055)
        ID: name='Stm25pSpiP__m_len' (at pp.c:28055)
        ID: name='len' (at pp.c:28055)
      Return:  (at pp.c:28056)
        FuncCall:  (at None)
          ID: name='Stm25pSpiP__newRequest' (at pp.c:28056)
          ExprList:  (at pp.c:28056)
            ID: name='TRUE' (at pp.c:28056)
            Constant: type='int', value='4' (at pp.c:28056)
  FuncDef:  (at pp.c:28060)
    Decl: name='Stm25pSectorP__calcWriteLen', quals=[], storage=['static'] (at pp.c:28060)
      FuncDecl: quals=None (at pp.c:28060)
        ParamList:  (at pp.c:28060)
          Decl: name='addr', quals=[], storage=[] (at pp.c:28060)
            TypeDecl: declname='addr', quals=[] (at pp.c:28060)
              IdentifierType: names=['stm25p_addr_t'] (at None)
        TypeDecl: declname='Stm25pSectorP__calcWriteLen', quals=[] (at pp.c:28060)
          IdentifierType: names=['stm25p_len_t'] (at None)
    Compound:  (at pp.c:28062)
      Decl: name='len', quals=[], storage=[] (at pp.c:28063)
        TypeDecl: declname='len', quals=[] (at pp.c:28063)
          IdentifierType: names=['stm25p_len_t'] (at None)
        BinaryOp: op='-' (at pp.c:28063)
          ID: name='STM25P_PAGE_SIZE' (at pp.c:28063)
          BinaryOp: op='&' (at pp.c:28063)
            ID: name='addr' (at pp.c:28063)
            ID: name='STM25P_PAGE_MASK' (at pp.c:28063)
      Return:  (at pp.c:28066)
        TernaryOp:  (at pp.c:28066)
          BinaryOp: op='<' (at pp.c:28066)
            ID: name='Stm25pSectorP__m_cur_len' (at pp.c:28066)
            ID: name='len' (at pp.c:28066)
          ID: name='Stm25pSectorP__m_cur_len' (at pp.c:28066)
          ID: name='len' (at pp.c:28066)
  FuncDef:  (at pp.c:28070)
    Decl: name='Stm25pSpiP__releaseAndRequest', quals=[], storage=['static'] (at pp.c:28070)
      FuncDecl: quals=None (at pp.c:28070)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='Stm25pSpiP__releaseAndRequest', quals=[] (at pp.c:28070)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28072)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__SpiResource__release' (at pp.c:28073)
      FuncCall:  (at None)
        ID: name='Stm25pSpiP__SpiResource__request' (at pp.c:28074)
  FuncDef:  (at pp.c:28078)
    Decl: name='Stm25pSpiP__signalDone', quals=[], storage=['static'] (at pp.c:28078)
      FuncDecl: quals=None (at pp.c:28078)
        ParamList:  (at pp.c:28078)
          Decl: name='error', quals=[], storage=[] (at pp.c:28078)
            TypeDecl: declname='error', quals=[] (at pp.c:28078)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__signalDone', quals=[] (at pp.c:28078)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28080)
      Assignment: op='=' (at pp.c:28081)
        ID: name='Stm25pSpiP__m_is_writing' (at pp.c:28081)
        ID: name='FALSE' (at pp.c:28081)
      Switch:  (at pp.c:28082)
        ArrayRef:  (at pp.c:28082)
          ID: name='Stm25pSpiP__m_cmd' (at pp.c:28082)
          Constant: type='int', value='0' (at pp.c:28082)
        Compound:  (at pp.c:28082)
          Case:  (at pp.c:28083)
            ID: name='Stm25pSpiP__S_READ' (at pp.c:28083)
            If:  (at pp.c:28084)
              ID: name='Stm25pSpiP__m_computing_crc' (at pp.c:28084)
              Compound:  (at pp.c:28084)
                Assignment: op='=' (at pp.c:28085)
                  ID: name='Stm25pSpiP__m_computing_crc' (at pp.c:28085)
                  ID: name='FALSE' (at pp.c:28085)
                FuncCall:  (at None)
                  ID: name='Stm25pSpiP__Spi__computeCrcDone' (at pp.c:28086)
                  ExprList:  (at pp.c:28086)
                    ID: name='Stm25pSpiP__m_crc' (at pp.c:28086)
                    ID: name='Stm25pSpiP__m_addr' (at pp.c:28086)
                    ID: name='Stm25pSpiP__m_len' (at pp.c:28086)
                    ID: name='error' (at pp.c:28086)
              Compound:  (at pp.c:28088)
                FuncCall:  (at None)
                  ID: name='Stm25pSpiP__Spi__readDone' (at pp.c:28089)
                  ExprList:  (at pp.c:28089)
                    ID: name='Stm25pSpiP__m_addr' (at pp.c:28089)
                    ID: name='Stm25pSpiP__m_buf' (at pp.c:28089)
                    ID: name='Stm25pSpiP__m_len' (at pp.c:28089)
                    ID: name='error' (at pp.c:28089)
          Break:  (at pp.c:28091)
          Case:  (at pp.c:28092)
            ID: name='Stm25pSpiP__S_PAGE_PROGRAM' (at pp.c:28092)
            FuncCall:  (at None)
              ID: name='Stm25pSpiP__Spi__pageProgramDone' (at pp.c:28093)
              ExprList:  (at pp.c:28093)
                ID: name='Stm25pSpiP__m_addr' (at pp.c:28093)
                ID: name='Stm25pSpiP__m_buf' (at pp.c:28093)
                ID: name='Stm25pSpiP__m_len' (at pp.c:28093)
                ID: name='error' (at pp.c:28093)
          Break:  (at pp.c:28094)
          Case:  (at pp.c:28095)
            ID: name='Stm25pSpiP__S_SECTOR_ERASE' (at pp.c:28095)
            FuncCall:  (at None)
              ID: name='Stm25pSpiP__Spi__sectorEraseDone' (at pp.c:28096)
              ExprList:  (at pp.c:28096)
                BinaryOp: op='>>' (at pp.c:28096)
                  ID: name='Stm25pSpiP__m_addr' (at pp.c:28096)
                  ID: name='STM25P_SECTOR_SIZE_LOG2' (at pp.c:28096)
                ID: name='error' (at pp.c:28096)
          Break:  (at pp.c:28097)
          Case:  (at pp.c:28098)
            ID: name='Stm25pSpiP__S_BULK_ERASE' (at pp.c:28098)
            FuncCall:  (at None)
              ID: name='Stm25pSpiP__Spi__bulkEraseDone' (at pp.c:28099)
              ExprList:  (at pp.c:28099)
                ID: name='error' (at pp.c:28099)
          Break:  (at pp.c:28100)
  FuncDef:  (at pp.c:28105)
    Decl: name='CC2420SpiP__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:28105)
      FuncDecl: quals=None (at pp.c:28105)
        ParamList:  (at pp.c:28105)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:28105)
            PtrDecl: quals=[] (at pp.c:28105)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:28105)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:28105)
            PtrDecl: quals=[] (at pp.c:28105)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:28105)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:28106)
            TypeDecl: declname='len', quals=[] (at pp.c:28106)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:28106)
            TypeDecl: declname='error', quals=[] (at pp.c:28106)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='CC2420SpiP__SpiPacket__sendDone', quals=[] (at pp.c:28105)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28108)
      If:  (at pp.c:28109)
        BinaryOp: op='&' (at pp.c:28109)
          ID: name='CC2420SpiP__m_addr' (at pp.c:28109)
          Constant: type='int', value='0x40' (at pp.c:28109)
        Compound:  (at pp.c:28109)
          FuncCall:  (at None)
            ID: name='CC2420SpiP__Fifo__readDone' (at pp.c:28110)
            ExprList:  (at pp.c:28110)
              BinaryOp: op='&' (at pp.c:28110)
                ID: name='CC2420SpiP__m_addr' (at pp.c:28110)
                UnaryOp: op='~' (at pp.c:28110)
                  Constant: type='int', value='0x40' (at pp.c:28110)
              ID: name='rx_buf' (at pp.c:28110)
              ID: name='len' (at pp.c:28110)
              ID: name='error' (at pp.c:28110)
        Compound:  (at pp.c:28114)
          FuncCall:  (at None)
            ID: name='CC2420SpiP__Fifo__writeDone' (at pp.c:28115)
            ExprList:  (at pp.c:28115)
              ID: name='CC2420SpiP__m_addr' (at pp.c:28115)
              ID: name='tx_buf' (at pp.c:28115)
              ID: name='len' (at pp.c:28115)
              ID: name='error' (at pp.c:28115)
  FuncDef:  (at pp.c:28120)
    Decl: name='CC2420ReceiveP__flush', quals=[], storage=['static'] (at pp.c:28120)
      FuncDecl: quals=None (at pp.c:28120)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='CC2420ReceiveP__flush', quals=[] (at pp.c:28120)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28122)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__reset_state' (at pp.c:28131)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CSN__set' (at pp.c:28133)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CSN__clr' (at pp.c:28134)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__SFLUSHRX__strobe' (at pp.c:28135)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__SFLUSHRX__strobe' (at pp.c:28136)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__CSN__set' (at pp.c:28137)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__SpiResource__release' (at pp.c:28138)
      FuncCall:  (at None)
        ID: name='CC2420ReceiveP__waitForNextPacket' (at pp.c:28139)
  FuncDef:  (at pp.c:28143)
    Decl: name='Stm25pSpiP__SpiPacket__sendDone', quals=[], storage=['static'] (at pp.c:28143)
      FuncDecl: quals=None (at pp.c:28143)
        ParamList:  (at pp.c:28143)
          Decl: name='tx_buf', quals=[], storage=[] (at pp.c:28143)
            PtrDecl: quals=[] (at pp.c:28143)
              TypeDecl: declname='tx_buf', quals=[] (at pp.c:28143)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='rx_buf', quals=[], storage=[] (at pp.c:28143)
            PtrDecl: quals=[] (at pp.c:28143)
              TypeDecl: declname='rx_buf', quals=[] (at pp.c:28143)
                IdentifierType: names=['uint8_t'] (at None)
          Decl: name='len', quals=[], storage=[] (at pp.c:28144)
            TypeDecl: declname='len', quals=[] (at pp.c:28144)
              IdentifierType: names=['uint16_t'] (at None)
          Decl: name='error', quals=[], storage=[] (at pp.c:28144)
            TypeDecl: declname='error', quals=[] (at pp.c:28144)
              IdentifierType: names=['error_t'] (at None)
        TypeDecl: declname='Stm25pSpiP__SpiPacket__sendDone', quals=[] (at pp.c:28143)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28146)
      Decl: name='i', quals=[], storage=[] (at pp.c:28148)
        TypeDecl: declname='i', quals=[] (at pp.c:28148)
          IdentifierType: names=['int'] (at None)
      Switch:  (at pp.c:28150)
        ArrayRef:  (at pp.c:28150)
          ID: name='Stm25pSpiP__m_cmd' (at pp.c:28150)
          Constant: type='int', value='0' (at pp.c:28150)
        Compound:  (at pp.c:28150)
          Case:  (at pp.c:28152)
            ID: name='Stm25pSpiP__S_READ' (at pp.c:28152)
            If:  (at pp.c:28153)
              BinaryOp: op='==' (at pp.c:28153)
                ID: name='tx_buf' (at pp.c:28153)
                ID: name='Stm25pSpiP__m_cmd' (at pp.c:28153)
              Compound:  (at pp.c:28153)
                FuncCall:  (at None)
                  ID: name='Stm25pSpiP__SpiPacket__send' (at pp.c:28154)
                  ExprList:  (at None)
                    Cast:  (at None)
                      Typename: quals=[] (at None)
                        PtrDecl: quals=[] (at pp.c:28154)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['void'] (at None)
                      Constant: type='int', value='0' (at pp.c:28154)
                    ID: name='Stm25pSpiP__m_buf' (at pp.c:28154)
                    ID: name='Stm25pSpiP__m_len' (at pp.c:28154)
                Break:  (at pp.c:28155)
              Compound:  (at pp.c:28157)
                If:  (at pp.c:28159)
                  ID: name='Stm25pSpiP__m_computing_crc' (at pp.c:28159)
                  Compound:  (at pp.c:28159)
                    For:  (at pp.c:28160)
                      Assignment: op='=' (at pp.c:28160)
                        ID: name='i' (at pp.c:28160)
                        Constant: type='int', value='0' (at pp.c:28160)
                      BinaryOp: op='<' (at pp.c:28160)
                        ID: name='i' (at pp.c:28160)
                        ID: name='len' (at pp.c:28160)
                      UnaryOp: op='p++' (at pp.c:28160)
                        ID: name='i' (at pp.c:28160)
                      Assignment: op='=' (at pp.c:28161)
                        ID: name='Stm25pSpiP__m_crc' (at pp.c:28161)
                        FuncCall:  (at None)
                          ID: name='crcByte' (at pp.c:28161)
                          ExprList:  (at pp.c:28161)
                            ID: name='Stm25pSpiP__m_crc' (at pp.c:28161)
                            ArrayRef:  (at pp.c:28161)
                              ID: name='Stm25pSpiP__m_crc_buf' (at pp.c:28161)
                              ID: name='i' (at pp.c:28161)
                    Assignment: op='+=' (at pp.c:28162)
                      ID: name='Stm25pSpiP__m_cur_addr' (at pp.c:28162)
                      ID: name='len' (at pp.c:28162)
                    Assignment: op='-=' (at pp.c:28163)
                      ID: name='Stm25pSpiP__m_cur_len' (at pp.c:28163)
                      ID: name='len' (at pp.c:28163)
                    If:  (at pp.c:28164)
                      ID: name='Stm25pSpiP__m_cur_len' (at pp.c:28164)
                      Compound:  (at pp.c:28164)
                        FuncCall:  (at None)
                          ID: name='Stm25pSpiP__SpiPacket__send' (at pp.c:28165)
                          ExprList:  (at None)
                            Cast:  (at None)
                              Typename: quals=[] (at None)
                                PtrDecl: quals=[] (at pp.c:28165)
                                  TypeDecl: declname=None, quals=[] (at None)
                                    IdentifierType: names=['void'] (at None)
                              Constant: type='int', value='0' (at pp.c:28165)
                            ID: name='Stm25pSpiP__m_crc_buf' (at pp.c:28165)
                            FuncCall:  (at None)
                              ID: name='Stm25pSpiP__calcReadLen' (at pp.c:28165)
                        Break:  (at pp.c:28166)
          FuncCall:  (at None)
            ID: name='Stm25pSpiP__CSN__set' (at pp.c:28171)
          FuncCall:  (at None)
            ID: name='Stm25pSpiP__signalDone' (at pp.c:28172)
            ExprList:  (at pp.c:28172)
              ID: name='SUCCESS' (at pp.c:28172)
          Break:  (at pp.c:28173)
          Case:  (at pp.c:28175)
            ID: name='Stm25pSpiP__S_PAGE_PROGRAM' (at pp.c:28175)
            If:  (at pp.c:28176)
              BinaryOp: op='==' (at pp.c:28176)
                ID: name='tx_buf' (at pp.c:28176)
                ID: name='Stm25pSpiP__m_cmd' (at pp.c:28176)
              Compound:  (at pp.c:28176)
                FuncCall:  (at None)
                  ID: name='Stm25pSpiP__SpiPacket__send' (at pp.c:28177)
                  ExprList:  (at pp.c:28177)
                    ID: name='Stm25pSpiP__m_buf' (at pp.c:28177)
                    Cast:  (at None)
                      Typename: quals=[] (at None)
                        PtrDecl: quals=[] (at pp.c:28177)
                          TypeDecl: declname=None, quals=[] (at None)
                            IdentifierType: names=['void'] (at None)
                      Constant: type='int', value='0' (at pp.c:28177)
                    ID: name='Stm25pSpiP__m_len' (at pp.c:28177)
                Break:  (at pp.c:28178)
          Case:  (at pp.c:28182)
            ID: name='Stm25pSpiP__S_SECTOR_ERASE' (at pp.c:28182)
            Case:  (at pp.c:28182)
              ID: name='Stm25pSpiP__S_BULK_ERASE' (at pp.c:28182)
              FuncCall:  (at None)
                ID: name='Stm25pSpiP__CSN__set' (at pp.c:28183)
          Assignment: op='=' (at pp.c:28184)
            ID: name='Stm25pSpiP__m_is_writing' (at pp.c:28184)
            ID: name='TRUE' (at pp.c:28184)
          FuncCall:  (at None)
            ID: name='Stm25pSpiP__releaseAndRequest' (at pp.c:28185)
          Break:  (at pp.c:28186)
          Default:  (at pp.c:28188)
            Break:  (at pp.c:28189)
  FuncDef:  (at pp.c:28194)
    Decl: name='VirtualizeTimerC__0__fireTimers', quals=[], storage=['static'] (at pp.c:28194)
      FuncDecl: quals=None (at pp.c:28194)
        ParamList:  (at pp.c:28194)
          Decl: name='now', quals=[], storage=[] (at pp.c:28194)
            TypeDecl: declname='now', quals=[] (at pp.c:28194)
              IdentifierType: names=['uint32_t'] (at None)
        TypeDecl: declname='VirtualizeTimerC__0__fireTimers', quals=[] (at pp.c:28194)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28195)
      Decl: name='num', quals=[], storage=[] (at pp.c:28196)
        TypeDecl: declname='num', quals=[] (at pp.c:28196)
          IdentifierType: names=['uint8_t'] (at None)
      For:  (at pp.c:28198)
        Assignment: op='=' (at pp.c:28198)
          ID: name='num' (at pp.c:28198)
          Constant: type='int', value='0' (at pp.c:28198)
        BinaryOp: op='<' (at pp.c:28198)
          ID: name='num' (at pp.c:28198)
          ID: name='VirtualizeTimerC__0__NUM_TIMERS' (at pp.c:28198)
        UnaryOp: op='p++' (at pp.c:28198)
          ID: name='num' (at pp.c:28198)
        Compound:  (at pp.c:28199)
          Decl: name='timer', quals=[], storage=[] (at pp.c:28200)
            PtrDecl: quals=[] (at pp.c:28200)
              TypeDecl: declname='timer', quals=[] (at pp.c:28200)
                IdentifierType: names=['VirtualizeTimerC__0__Timer_t'] (at None)
            UnaryOp: op='&' (at pp.c:28200)
              ArrayRef:  (at pp.c:28200)
                ID: name='VirtualizeTimerC__0__m_timers' (at pp.c:28200)
                ID: name='num' (at pp.c:28200)
          If:  (at pp.c:28202)
            StructRef: type='->' (at pp.c:28202)
              ID: name='timer' (at pp.c:28202)
              ID: name='isrunning' (at pp.c:28202)
            Compound:  (at pp.c:28203)
              Decl: name='elapsed', quals=[], storage=[] (at pp.c:28204)
                TypeDecl: declname='elapsed', quals=[] (at pp.c:28204)
                  IdentifierType: names=['uint32_t'] (at None)
                BinaryOp: op='-' (at pp.c:28204)
                  ID: name='now' (at pp.c:28204)
                  StructRef: type='->' (at pp.c:28204)
                    ID: name='timer' (at pp.c:28204)
                    ID: name='t0' (at pp.c:28204)
              If:  (at pp.c:28206)
                BinaryOp: op='>=' (at pp.c:28206)
                  ID: name='elapsed' (at pp.c:28206)
                  StructRef: type='->' (at pp.c:28206)
                    ID: name='timer' (at pp.c:28206)
                    ID: name='dt' (at pp.c:28206)
                Compound:  (at pp.c:28207)
                  If:  (at pp.c:28208)
                    StructRef: type='->' (at pp.c:28208)
                      ID: name='timer' (at pp.c:28208)
                      ID: name='isoneshot' (at pp.c:28208)
                    Compound:  (at pp.c:28208)
                      Assignment: op='=' (at pp.c:28209)
                        StructRef: type='->' (at pp.c:28209)
                          ID: name='timer' (at pp.c:28209)
                          ID: name='isrunning' (at pp.c:28209)
                        ID: name='FALSE' (at pp.c:28209)
                    Compound:  (at pp.c:28211)
                      Assignment: op='+=' (at pp.c:28213)
                        StructRef: type='->' (at pp.c:28213)
                          ID: name='timer' (at pp.c:28213)
                          ID: name='t0' (at pp.c:28213)
                        StructRef: type='->' (at pp.c:28213)
                          ID: name='timer' (at pp.c:28213)
                          ID: name='dt' (at pp.c:28213)
                  FuncCall:  (at None)
                    ID: name='VirtualizeTimerC__0__Timer__fired' (at pp.c:28215)
                    ExprList:  (at pp.c:28215)
                      ID: name='num' (at pp.c:28215)
                  Break:  (at pp.c:28216)
      FuncCall:  (at None)
        ID: name='VirtualizeTimerC__0__updateFromTimer__postTask' (at pp.c:28220)
  FuncDef:  (at pp.c:28224)
    Decl: name='PeriodicSampleLoggerP__0__appendSample', quals=[], storage=['static'] (at pp.c:28224)
      FuncDecl: quals=None (at pp.c:28224)
        ParamList:  (at pp.c:28224)
          Decl: name='s', quals=[], storage=[] (at pp.c:28224)
            PtrDecl: quals=[] (at pp.c:28224)
              TypeDecl: declname='s', quals=[] (at pp.c:28224)
                IdentifierType: names=['PeriodicSampleLoggerP__0__generic_sensor_sample_t'] (at None)
        TypeDecl: declname='PeriodicSampleLoggerP__0__appendSample', quals=[] (at pp.c:28224)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28226)
      If:  (at pp.c:28228)
        BinaryOp: op='!=' (at None)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__LogWrite__append' (at pp.c:28228)
            ExprList:  (at pp.c:28228)
              ID: name='s' (at pp.c:28228)
              UnaryOp: op='sizeof' (at pp.c:28228)
                Typename: quals=[] (at None)
                  TypeDecl: declname=None, quals=[] (at None)
                    IdentifierType: names=['PeriodicSampleLoggerP__0__generic_sensor_sample_t'] (at None)
          ID: name='SUCCESS' (at pp.c:28228)
        Compound:  (at pp.c:28228)
          FuncCall:  (at None)
            ID: name='PeriodicSampleLoggerP__0__appendTask__postTask' (at pp.c:28229)
  FuncDef:  (at pp.c:28234)
    Decl: name='TransformAlarmC__0__Alarm__startAt', quals=[], storage=['static'] (at pp.c:28234)
      FuncDecl: quals=None (at pp.c:28234)
        ParamList:  (at pp.c:28234)
          Decl: name='t0', quals=[], storage=[] (at pp.c:28234)
            TypeDecl: declname='t0', quals=[] (at pp.c:28234)
              IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
          Decl: name='dt', quals=[], storage=[] (at pp.c:28234)
            TypeDecl: declname='dt', quals=[] (at pp.c:28234)
              IdentifierType: names=['TransformAlarmC__0__to_size_type'] (at None)
        TypeDecl: declname='TransformAlarmC__0__Alarm__startAt', quals=[] (at pp.c:28234)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28235)
      Compound:  (at pp.c:28236)
        Decl: name='__nesc_atomic', quals=[], storage=[] (at pp.c:28236)
          TypeDecl: declname='__nesc_atomic', quals=[] (at pp.c:28236)
            IdentifierType: names=['__nesc_atomic_t'] (at None)
          FuncCall:  (at None)
            ID: name='__nesc_atomic_start' (at pp.c:28236)
        Compound:  (at pp.c:28237)
          Assignment: op='=' (at pp.c:28238)
            ID: name='TransformAlarmC__0__m_t0' (at pp.c:28238)
            ID: name='t0' (at pp.c:28238)
          Assignment: op='=' (at pp.c:28239)
            ID: name='TransformAlarmC__0__m_dt' (at pp.c:28239)
            ID: name='dt' (at pp.c:28239)
          FuncCall:  (at None)
            ID: name='TransformAlarmC__0__set_alarm' (at pp.c:28240)
        FuncCall:  (at None)
          ID: name='__nesc_atomic_end' (at pp.c:28243)
          ExprList:  (at pp.c:28243)
            ID: name='__nesc_atomic' (at pp.c:28243)
  FuncDef:  (at pp.c:28247)
    Decl: name='sig_UART0RX_VECTOR', quals=[], storage=[] (at pp.c:28247)
      FuncDecl: quals=None (at pp.c:28247)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_UART0RX_VECTOR', quals=[] (at pp.c:28247)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28249)
      Decl: name='temp', quals=[], storage=[] (at pp.c:28250)
        TypeDecl: declname='temp', quals=[] (at pp.c:28250)
          IdentifierType: names=['uint8_t'] (at None)
        ID: name='U0RXBUF' (at pp.c:28250)
      FuncCall:  (at None)
        ID: name='HplMsp430Usart0P__Interrupts__rxDone' (at pp.c:28253)
        ExprList:  (at pp.c:28253)
          ID: name='temp' (at pp.c:28253)
  FuncDef:  (at pp.c:28257)
    Decl: name='ArbiterP__1__ArbiterInfo__inUse', quals=[], storage=['static'] (at pp.c:28257)
      FuncDecl: quals=None (at pp.c:28257)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ArbiterInfo__inUse', quals=[] (at pp.c:28257)
          IdentifierType: names=['bool'] (at None)
    Compound:  (at pp.c:28259)
      Compound:  (at pp.c:28262)
        If:  (at pp.c:28263)
          BinaryOp: op='==' (at pp.c:28263)
            ID: name='ArbiterP__1__state' (at pp.c:28263)
            ID: name='ArbiterP__1__RES_CONTROLLED' (at pp.c:28263)
          Compound:  (at pp.c:28264)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28265)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28265)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='FALSE' (at pp.c:28267)
            Return:  (at pp.c:28270)
              ID: name='__nesc_temp' (at pp.c:28270)
      Return:  (at pp.c:28274)
        ID: name='TRUE' (at pp.c:28274)
  FuncDef:  (at pp.c:28278)
    Decl: name='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[], storage=['static'] (at pp.c:28278)
      FuncDecl: quals=None (at pp.c:28278)
        ParamList:  (at pp.c:28278)
          Decl: name='data', quals=[], storage=[] (at pp.c:28278)
            TypeDecl: declname='data', quals=[] (at pp.c:28278)
              IdentifierType: names=['uint8_t'] (at None)
        TypeDecl: declname='Msp430SpiNoDmaP__0__UsartInterrupts__rxDone', quals=[] (at pp.c:28278)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28280)
      If:  (at pp.c:28282)
        ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:28282)
        Compound:  (at pp.c:28282)
          Assignment: op='=' (at pp.c:28283)
            ArrayRef:  (at pp.c:28283)
              ID: name='Msp430SpiNoDmaP__0__m_rx_buf' (at pp.c:28283)
              BinaryOp: op='-' (at pp.c:28283)
                ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:28283)
                Constant: type='int', value='1' (at pp.c:28283)
            ID: name='data' (at pp.c:28283)
      If:  (at pp.c:28285)
        BinaryOp: op='<' (at pp.c:28285)
          ID: name='Msp430SpiNoDmaP__0__m_pos' (at pp.c:28285)
          ID: name='Msp430SpiNoDmaP__0__m_len' (at pp.c:28285)
        Compound:  (at pp.c:28285)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__continueOp' (at pp.c:28286)
        Compound:  (at pp.c:28290)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__Usart__disableRxIntr' (at pp.c:28291)
          FuncCall:  (at None)
            ID: name='Msp430SpiNoDmaP__0__signalDone' (at pp.c:28292)
  FuncDef:  (at pp.c:28297)
    Decl: name='ArbiterP__1__ArbiterInfo__userId', quals=[], storage=['static'] (at pp.c:28297)
      FuncDecl: quals=None (at pp.c:28297)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='ArbiterP__1__ArbiterInfo__userId', quals=[] (at pp.c:28297)
          IdentifierType: names=['uint8_t'] (at None)
    Compound:  (at pp.c:28299)
      Compound:  (at pp.c:28302)
        If:  (at pp.c:28303)
          BinaryOp: op='!=' (at pp.c:28303)
            ID: name='ArbiterP__1__state' (at pp.c:28303)
            ID: name='ArbiterP__1__RES_BUSY' (at pp.c:28303)
          Compound:  (at pp.c:28304)
            Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28305)
              TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28305)
                IdentifierType: names=['char', 'unsigned'] (at None)
              ID: name='ArbiterP__1__NO_RES' (at pp.c:28307)
            Return:  (at pp.c:28310)
              ID: name='__nesc_temp' (at pp.c:28310)
        Compound:  (at pp.c:28313)
          Decl: name='__nesc_temp', quals=[], storage=[] (at pp.c:28314)
            TypeDecl: declname='__nesc_temp', quals=[] (at pp.c:28314)
              IdentifierType: names=['char', 'unsigned'] (at None)
            ID: name='ArbiterP__1__resId' (at pp.c:28316)
          Return:  (at pp.c:28319)
            ID: name='__nesc_temp' (at pp.c:28319)
  FuncDef:  (at pp.c:28325)
    Decl: name='sig_UART0TX_VECTOR', quals=[], storage=[] (at pp.c:28325)
      FuncDecl: quals=None (at pp.c:28325)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_UART0TX_VECTOR', quals=[] (at pp.c:28325)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28327)
      If:  (at pp.c:28328)
        FuncCall:  (at None)
          ID: name='HplMsp430Usart0P__HplI2C__isI2C' (at pp.c:28328)
        Compound:  (at pp.c:28328)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__I2CInterrupts__fired' (at pp.c:28329)
        Compound:  (at pp.c:28331)
          FuncCall:  (at None)
            ID: name='HplMsp430Usart0P__Interrupts__txDone' (at pp.c:28333)
  FuncDef:  (at pp.c:28338)
    Decl: name='sig_PORT1_VECTOR', quals=[], storage=[] (at pp.c:28338)
      FuncDecl: quals=None (at pp.c:28338)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_PORT1_VECTOR', quals=[] (at pp.c:28338)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28339)
      Decl: name='n', quals=['volatile'], storage=[] (at pp.c:28340)
        TypeDecl: declname='n', quals=['volatile'] (at pp.c:28340)
          IdentifierType: names=['int'] (at None)
        BinaryOp: op='&' (at pp.c:28340)
          ID: name='P1IFG' (at pp.c:28340)
          ID: name='P1IE' (at pp.c:28340)
      If:  (at pp.c:28342)
        BinaryOp: op='&' (at pp.c:28342)
          ID: name='n' (at pp.c:28342)
          BinaryOp: op='<<' (at pp.c:28342)
            Constant: type='int', value='1' (at pp.c:28342)
            Constant: type='int', value='0' (at pp.c:28342)
        Compound:  (at pp.c:28342)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port10__fired' (at pp.c:28344)
          Return:  (at pp.c:28346)
      If:  (at pp.c:28349)
        BinaryOp: op='&' (at pp.c:28349)
          ID: name='n' (at pp.c:28349)
          BinaryOp: op='<<' (at pp.c:28349)
            Constant: type='int', value='1' (at pp.c:28349)
            Constant: type='int', value='1' (at pp.c:28349)
        Compound:  (at pp.c:28349)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port11__fired' (at pp.c:28351)
          Return:  (at pp.c:28353)
      If:  (at pp.c:28356)
        BinaryOp: op='&' (at pp.c:28356)
          ID: name='n' (at pp.c:28356)
          BinaryOp: op='<<' (at pp.c:28356)
            Constant: type='int', value='1' (at pp.c:28356)
            Constant: type='int', value='2' (at pp.c:28356)
        Compound:  (at pp.c:28356)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port12__fired' (at pp.c:28358)
          Return:  (at pp.c:28360)
      If:  (at pp.c:28363)
        BinaryOp: op='&' (at pp.c:28363)
          ID: name='n' (at pp.c:28363)
          BinaryOp: op='<<' (at pp.c:28363)
            Constant: type='int', value='1' (at pp.c:28363)
            Constant: type='int', value='3' (at pp.c:28363)
        Compound:  (at pp.c:28363)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port13__fired' (at pp.c:28365)
          Return:  (at pp.c:28367)
      If:  (at pp.c:28370)
        BinaryOp: op='&' (at pp.c:28370)
          ID: name='n' (at pp.c:28370)
          BinaryOp: op='<<' (at pp.c:28370)
            Constant: type='int', value='1' (at pp.c:28370)
            Constant: type='int', value='4' (at pp.c:28370)
        Compound:  (at pp.c:28370)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port14__fired' (at pp.c:28372)
          Return:  (at pp.c:28374)
      If:  (at pp.c:28377)
        BinaryOp: op='&' (at pp.c:28377)
          ID: name='n' (at pp.c:28377)
          BinaryOp: op='<<' (at pp.c:28377)
            Constant: type='int', value='1' (at pp.c:28377)
            Constant: type='int', value='5' (at pp.c:28377)
        Compound:  (at pp.c:28377)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port15__fired' (at pp.c:28379)
          Return:  (at pp.c:28381)
      If:  (at pp.c:28384)
        BinaryOp: op='&' (at pp.c:28384)
          ID: name='n' (at pp.c:28384)
          BinaryOp: op='<<' (at pp.c:28384)
            Constant: type='int', value='1' (at pp.c:28384)
            Constant: type='int', value='6' (at pp.c:28384)
        Compound:  (at pp.c:28384)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port16__fired' (at pp.c:28386)
          Return:  (at pp.c:28388)
      If:  (at pp.c:28391)
        BinaryOp: op='&' (at pp.c:28391)
          ID: name='n' (at pp.c:28391)
          BinaryOp: op='<<' (at pp.c:28391)
            Constant: type='int', value='1' (at pp.c:28391)
            Constant: type='int', value='7' (at pp.c:28391)
        Compound:  (at pp.c:28391)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port17__fired' (at pp.c:28393)
          Return:  (at pp.c:28395)
  FuncDef:  (at pp.c:28400)
    Decl: name='sig_PORT2_VECTOR', quals=[], storage=[] (at pp.c:28400)
      FuncDecl: quals=None (at pp.c:28400)
        ParamList:  (at None)
          Typename: quals=[] (at None)
            TypeDecl: declname=None, quals=[] (at None)
              IdentifierType: names=['void'] (at None)
        TypeDecl: declname='sig_PORT2_VECTOR', quals=[] (at pp.c:28400)
          IdentifierType: names=['void'] (at None)
    Compound:  (at pp.c:28401)
      Decl: name='n', quals=['volatile'], storage=[] (at pp.c:28402)
        TypeDecl: declname='n', quals=['volatile'] (at pp.c:28402)
          IdentifierType: names=['int'] (at None)
        BinaryOp: op='&' (at pp.c:28402)
          ID: name='P2IFG' (at pp.c:28402)
          ID: name='P2IE' (at pp.c:28402)
      If:  (at pp.c:28404)
        BinaryOp: op='&' (at pp.c:28404)
          ID: name='n' (at pp.c:28404)
          BinaryOp: op='<<' (at pp.c:28404)
            Constant: type='int', value='1' (at pp.c:28404)
            Constant: type='int', value='0' (at pp.c:28404)
        Compound:  (at pp.c:28404)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port20__fired' (at pp.c:28406)
          Return:  (at pp.c:28408)
      If:  (at pp.c:28411)
        BinaryOp: op='&' (at pp.c:28411)
          ID: name='n' (at pp.c:28411)
          BinaryOp: op='<<' (at pp.c:28411)
            Constant: type='int', value='1' (at pp.c:28411)
            Constant: type='int', value='1' (at pp.c:28411)
        Compound:  (at pp.c:28411)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port21__fired' (at pp.c:28413)
          Return:  (at pp.c:28415)
      If:  (at pp.c:28418)
        BinaryOp: op='&' (at pp.c:28418)
          ID: name='n' (at pp.c:28418)
          BinaryOp: op='<<' (at pp.c:28418)
            Constant: type='int', value='1' (at pp.c:28418)
            Constant: type='int', value='2' (at pp.c:28418)
        Compound:  (at pp.c:28418)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port22__fired' (at pp.c:28420)
          Return:  (at pp.c:28422)
      If:  (at pp.c:28425)
        BinaryOp: op='&' (at pp.c:28425)
          ID: name='n' (at pp.c:28425)
          BinaryOp: op='<<' (at pp.c:28425)
            Constant: type='int', value='1' (at pp.c:28425)
            Constant: type='int', value='3' (at pp.c:28425)
        Compound:  (at pp.c:28425)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port23__fired' (at pp.c:28427)
          Return:  (at pp.c:28429)
      If:  (at pp.c:28432)
        BinaryOp: op='&' (at pp.c:28432)
          ID: name='n' (at pp.c:28432)
          BinaryOp: op='<<' (at pp.c:28432)
            Constant: type='int', value='1' (at pp.c:28432)
            Constant: type='int', value='4' (at pp.c:28432)
        Compound:  (at pp.c:28432)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port24__fired' (at pp.c:28434)
          Return:  (at pp.c:28436)
      If:  (at pp.c:28439)
        BinaryOp: op='&' (at pp.c:28439)
          ID: name='n' (at pp.c:28439)
          BinaryOp: op='<<' (at pp.c:28439)
            Constant: type='int', value='1' (at pp.c:28439)
            Constant: type='int', value='5' (at pp.c:28439)
        Compound:  (at pp.c:28439)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port25__fired' (at pp.c:28441)
          Return:  (at pp.c:28443)
      If:  (at pp.c:28446)
        BinaryOp: op='&' (at pp.c:28446)
          ID: name='n' (at pp.c:28446)
          BinaryOp: op='<<' (at pp.c:28446)
            Constant: type='int', value='1' (at pp.c:28446)
            Constant: type='int', value='6' (at pp.c:28446)
        Compound:  (at pp.c:28446)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port26__fired' (at pp.c:28448)
          Return:  (at pp.c:28450)
      If:  (at pp.c:28453)
        BinaryOp: op='&' (at pp.c:28453)
          ID: name='n' (at pp.c:28453)
          BinaryOp: op='<<' (at pp.c:28453)
            Constant: type='int', value='1' (at pp.c:28453)
            Constant: type='int', value='7' (at pp.c:28453)
        Compound:  (at pp.c:28453)
          FuncCall:  (at None)
            ID: name='HplMsp430InterruptP__Port27__fired' (at pp.c:28455)
          Return:  (at pp.c:28457)
[Log] Parsed preprocessed file into AST.
